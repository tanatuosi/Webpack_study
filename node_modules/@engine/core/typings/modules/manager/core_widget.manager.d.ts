import { Widget } from '@fui/core';
export declare class CoreWidgetManager<T extends Widget> {
    /**
     * 根据dependences查看widgetName是否在依赖中
     * 历史遗留: 匹配的控件名可能带$可能不带
     * @param widgetName 控件名
     * @param dependences 控件依赖
     */
    static compareWidgetNameByDependences: (widgetName: string, dependences: string[]) => boolean;
    protected controllerDict: Map<string, T>;
    /**
     * 注册控件
     * @param instance 控件实例
     * @param widgetName 控件名
     */
    register(instance: T, widgetName?: string): void;
    /**
     * 获取存储表
     */
    getWidgetsMap(): Map<string, T>;
    /**
     * 根据控件名获取实例
     * @param widgetName 控件名
     */
    getWidgetByName(widgetName?: string): T | undefined;
    /**
     * 获取所有控件
     */
    getWidgets(): T[];
    /**
     * 获取widget的依赖控件名，neil整理版：https://kms.finedevelop.com/pages/viewpage.action?pageId=75081435
     * @param widget 控件
     */
    getDependenceByWidget(widget: T): string[];
    /**
     * 获取widget值依赖的控件名
     * @param widget 控件
     */
    getValueDependenceByWidget(widget: T): string[];
    /**
     * 根据控件名获取该控件被哪些控件依赖
     * @param widgetName 控件名
     */
    getWidgetDependenceByWidgetName(widgetName: string): string[];
    /**
     * 根据控件名获取该控件值被哪些控件依赖
     * @param widgetName 控件名
     */
    getWidgetValueDependenceByWidgetName(widgetName: string): string[];
    /**
     * 获取控件依赖
     * @param widgetName 控件名
     * @param filter 过滤条件
     * @param excluded 过滤查询哪些widgetName
     */
    private getWidgetDependence;
    /**
     * 公开接口
     * @param widgetName 控件名
     */
    resolveVariable(widgetName: string): any;
    /**
     * 清除字典
     */
    clear(): void;
    /**
     * 销毁实例
     */
    destroy(): void;
    destroy(widgetName: string): void;
    destroy(widgetName: string[]): void;
    /**
     * 更新实例
     */
    update(): void;
    /**
     * 刷新
     */
    refresh(): void;
}
