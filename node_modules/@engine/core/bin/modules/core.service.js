var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import jss from 'jss';
import jssGlobal from 'jss-plugin-global';
import jssNested from 'jss-plugin-nested';
import { ICON_FONT_MAP } from './core.constants';
export const { shortcut, model, store, Model, provider } = BI.Decorators;
/**
 * 转换背景配置为stylesheet
 * @param background 背景配置
 */
export function generateBackgroundStyle(background) {
    if (BI.isNull(background)) {
        return {};
    }
    if ('background' in background) {
        return {
            background: background.background,
        };
    }
    let style = {};
    switch (background.backgroundType) {
        case 'ColorBackground':
            style['background-color'] = transformColor(background.color);
            break;
        case 'TextureBackground':
        case 'ImageBackground':
        case 'PatternBackground':
            style = Object.assign({ 'background-image': `url(${background.imgUrl})` }, getImgStyle(background.layout));
            break;
        case 'GradientBackground':
            style.background = transformGradientBackground({
                direction: background.direction,
                startColor: background.startColor,
                begin: background.begin || 0,
                endColor: background.endColor,
                finish: background.finish || 0,
            });
            break;
        default:
            return;
    }
    return style;
}
function transformGradientBackground(background) {
    const startColor = transformColor(background.startColor);
    const endColor = transformColor(background.endColor);
    const total = 160;
    const begin = transformNumer2Percentage(background.begin / total);
    const finish = transformNumer2Percentage((background.finish || total) / total);
    return `linear-gradient(${background.direction === 1 ? 180 : 90}deg, ${startColor}, ${startColor} ${begin}, ${endColor} ${finish}, ${endColor})`;
}
/**
 * 根据layout转换为样式sheet
 * @param type layou类型
 */
function getImgStyle(type) {
    switch (type) {
        // 平铺
        case 0:
            return {
                'background-repeat': 'repeat',
            };
        // 拉伸
        case 2:
            return {
                'background-repeat': 'no-repeat',
                'background-position': 'center',
                'background-size': '100% 100%',
            };
        case 4:
            return {
                'background-size': 'contain',
                'background-repeat': 'no-repeat',
                'background-position': 'center',
            };
        // 默认
        case 1:
        case 3:
        default:
            return {
                'background-repeat': 'no-repeat',
                'background-position': 'center',
            };
    }
}
function transformNumer2Percentage(v) {
    return `${v * 100}%`;
}
export function warnWhenDeparture(name) {
    console.warn(BI.i18nText('Fine-Report_Js_Warning', name));
}
/**
 * departure触发装饰器
 */
export function departure() {
    return function (_target, propertyKey, descriptor) {
        const render = descriptor.value;
        descriptor.value = function (...args) {
            warnWhenDeparture(propertyKey);
            const result = render.apply(this, args);
            return result;
        };
        return descriptor;
    };
}
/**
 * basic button包装器
 */
let BasicButtonWrapper = class BasicButtonWrapper extends BI.BasicButton {
    render() {
        return this.options.render();
    }
    doClick() {
        this.options.doClick();
    }
};
BasicButtonWrapper.xtype = 'report.core.basic_button_wrapper';
BasicButtonWrapper = __decorate([
    shortcut()
], BasicButtonWrapper);
/**
 * 给控件render外包装basicButton
 */
export function click() {
    return function (_target, _propertyKey, descriptor) {
        const render = descriptor.value;
        descriptor.value = function (...args) {
            return {
                type: BasicButtonWrapper.xtype,
                cls: 'cursor-default',
                render: () => render.apply(this, args),
                doClick: () => {
                    this.fireEvent('click');
                },
            };
        };
        return descriptor;
    };
}
/**
 * resize方法的装饰方法
 * 如果宽高没有发生变化则不触发resize
 */
export function exResize() {
    return function (_target, _propertyKey, descriptor) {
        const render = descriptor.value;
        descriptor.value = function (width, height) {
            if (this.options.width !== width || this.options.height !== height) {
                this.options.width = width;
                this.options.height = height;
                return render.apply(this, [width, height]);
            }
        };
        return descriptor;
    };
}
/**
 * 将数字类color转换为十六进制颜色
 * @param color 颜色
 */
export function transformColor(color) {
    if (BI.isString(color)) {
        return color;
    }
    if (!color) {
        return '#000';
    }
    const tem = (~color).toString(16);
    const OldColorValue = parseInt(`0x${tem.replace(/#/g, '')}`, 16);
    const str = `000000${(0xffffff - OldColorValue).toString(16)}`;
    return `#${str.substring(str.length - 6, str.length)}`;
}
export function getIconCls(iconInfo) {
    return ICON_FONT_MAP.get(iconInfo.iconName) || getIconImageCls(iconInfo);
}
function getIconImageCls(iconInfo) {
    const cls = `icon-${BI.UUID()}`;
    const { iconPosition, toolbarImage } = iconInfo;
    jss.use(jssGlobal(), jssNested());
    jss.createStyleSheet({
        '@global': {
            [`.${cls} .b-font`]: {
                'background-image': `url(${toolbarImage})`,
                'background-repeat': 'no-repeat',
                'background-position': iconPosition,
                height: '16px',
                width: '16px',
            },
            [`.base-disabled .${cls} .b-font`]: {
                opacity: '.5',
            },
        },
    }).attach();
    return cls;
}
/**
 * 找到最上层符合条件的父亲dom
 * @param filter 需要包含哪些条件
 * @returns boolean
 */
export function findTargetParent(filter = () => true) {
    let parent = window;
    // 跨域获取不到parent时，catch error
    try {
        let fullScreenParent = null;
        // REPORT-68408 FVS页面不是fineUI写的，但有Report全局变量，找parent还要加上有无BI的逻辑
        while (parent && parent.parent !== parent) {
            const tmp = parent.parent;
            if (!tmp)
                break;
            if (!filter(tmp))
                break;
            fullScreenParent = parent;
            parent = parent.parent;
        }
        // 平台首页弹出parent=平台;全屏情况弹出fullScreenParent=模板，parent=平台
        if (BI.FullScreen.isFullScreen(parent.document) && fullScreenParent && fullScreenParent.document) {
            parent = fullScreenParent;
        }
    }
    catch (e) {
        // catch error
    }
    return parent;
}
/**
 * 判断是否是全屏状态
 */
export function isFullScreen() {
    const wicket = findTargetParent();
    // IE 和 firefox 可以用此方式判断，chrome 和 safari 在未缩放的情况下也能获得正确结果
    if (wicket.innerHeight === wicket.screen.height || BI.FullScreen.isFullScreen(wicket.document)) {
        return true;
    }
    // 缩放的情况下需要转换一下再比较，这里只能获得近似值
    const browserZoomLevel = wicket.outerWidth / wicket.innerWidth;
    if (browserZoomLevel < 0.98 || browserZoomLevel > 1.02) {
        const windowHeightBeforeZoom = wicket.innerHeight * browserZoomLevel;
        return Math.abs(wicket.screen.height - windowHeightBeforeZoom) < 30;
    }
    return false;
}
/**
 * 转换HTML部分标签的方法
 */
export function htmlDecode(v) {
    if (BI.isNull(v))
        return '';
    return v.replace(/<br\/>/g, '\n')
        .replace(/&quot;/g, '"')
        .replace(/&amp;/g, '&')
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&nbsp;/g, ' ');
}
//# sourceMappingURL=core.service.js.map