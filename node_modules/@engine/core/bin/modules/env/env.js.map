{"version":3,"file":"env.js","sourceRoot":"","sources":["../../../src/modules/env/env.ts"],"names":[],"mappings":"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","sourcesContent":["import { provider } from '../core.service';\nimport { Type } from '../core.types';\nimport { AbstractEnv, AbstractEnvJSON } from './env.abstract';\n\n@provider()\nclass ReportEnvProvider {\n    public static xtype = 'report.env.provider';\n\n    private env : AbstractEnv;\n\n    public $get() {\n        const provider = this;\n\n        return class EnvProvider {\n            public get Version(): string {\n                return provider.env.getVersion();\n            }\n        \n            public get FineServletURL(): string {\n                return provider.env.getFineServletURL();\n            }\n        \n            public get ReqPrefix(): string {\n                return provider.env.getReqPrefix();\n            }\n        \n            public get SessionID(): string {\n                return provider.env.getSessionID();\n            }\n        \n            public get initParameters(): {[key: string]: any} | undefined {\n                return provider.env.getInitParameters();\n            }\n        \n            public use(Env: Type<AbstractEnv>) {\n                provider.env = new Env();\n            }\n        \n            public assign(env: AbstractEnvJSON) {\n                provider.env = transformEnvJSON2AbstractEnv(env);\n            }\n        \n            public isAssigned() {\n                return !!provider.env;\n            }\n        \n            public getInstance() {\n                return provider.env;\n            }\n        \n            public get servletURL(): string {\n                return provider.env.getServletURL();\n            }\n        };\n    }\n\n    public useEnv(value: AbstractEnvJSON) {\n        this.env = transformEnvJSON2AbstractEnv(value);\n    }\n}\n\n/**\n * 转换json为env实例\n * @param envJSON json\n */\nfunction transformEnvJSON2AbstractEnv (envJSON: AbstractEnvJSON): AbstractEnv {\n    class Env extends AbstractEnv {\n        public getFineServletURL() {\n            return 'getFineServletURL' in envJSON ? envJSON.getFineServletURL() : envJSON.fineServletURL;\n        }\n\n        public getReqPrefix() {\n            return 'getReqPrefix' in envJSON ? envJSON.getReqPrefix() : envJSON.reqPrefix;\n        }\n\n        public getVersion() {\n            return 'getVersion' in envJSON ? envJSON.getVersion() : envJSON.version;\n        }\n\n        public getServletURL() {\n            return 'getServletURL' in envJSON ? envJSON.getServletURL() : envJSON.servletURL;\n        }\n\n        public getSessionID() {\n            return 'getSessionID' in envJSON ? envJSON.getSessionID() : envJSON.sessionID;\n        }\n\n        public getInitParameters() {\n            return 'getInitParameters' in envJSON ? envJSON.getInitParameters() : envJSON.initParameters;\n        }\n    }\n\n    return new Env();\n}\n\nexport const envProvider: InstanceType<ReturnType<ReportEnvProvider['$get']>> = BI.Providers.getProvider(ReportEnvProvider.xtype);\n"]}