var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { provider } from '../core.service';
import { AbstractEnv } from './env.abstract';
let ReportEnvProvider = class ReportEnvProvider {
    $get() {
        const provider = this;
        return class EnvProvider {
            get Version() {
                return provider.env.getVersion();
            }
            get FineServletURL() {
                return provider.env.getFineServletURL();
            }
            get ReqPrefix() {
                return provider.env.getReqPrefix();
            }
            get SessionID() {
                return provider.env.getSessionID();
            }
            get initParameters() {
                return provider.env.getInitParameters();
            }
            use(Env) {
                provider.env = new Env();
            }
            assign(env) {
                provider.env = transformEnvJSON2AbstractEnv(env);
            }
            isAssigned() {
                return !!provider.env;
            }
            getInstance() {
                return provider.env;
            }
            get servletURL() {
                return provider.env.getServletURL();
            }
        };
    }
    useEnv(value) {
        this.env = transformEnvJSON2AbstractEnv(value);
    }
};
ReportEnvProvider.xtype = 'report.env.provider';
ReportEnvProvider = __decorate([
    provider()
], ReportEnvProvider);
/**
 * 转换json为env实例
 * @param envJSON json
 */
function transformEnvJSON2AbstractEnv(envJSON) {
    class Env extends AbstractEnv {
        getFineServletURL() {
            return 'getFineServletURL' in envJSON ? envJSON.getFineServletURL() : envJSON.fineServletURL;
        }
        getReqPrefix() {
            return 'getReqPrefix' in envJSON ? envJSON.getReqPrefix() : envJSON.reqPrefix;
        }
        getVersion() {
            return 'getVersion' in envJSON ? envJSON.getVersion() : envJSON.version;
        }
        getServletURL() {
            return 'getServletURL' in envJSON ? envJSON.getServletURL() : envJSON.servletURL;
        }
        getSessionID() {
            return 'getSessionID' in envJSON ? envJSON.getSessionID() : envJSON.sessionID;
        }
        getInitParameters() {
            return 'getInitParameters' in envJSON ? envJSON.getInitParameters() : envJSON.initParameters;
        }
    }
    return new Env();
}
export const envProvider = BI.Providers.getProvider(ReportEnvProvider.xtype);
//# sourceMappingURL=env.js.map