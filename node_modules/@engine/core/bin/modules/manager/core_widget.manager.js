export class CoreWidgetManager {
    constructor() {
        this.controllerDict = new Map();
    }
    /**
     * 注册控件
     * @param instance 控件实例
     * @param widgetName 控件名
     */
    register(instance, widgetName) {
        this.controllerDict.set(widgetName || instance.attr('widgetName'), instance);
    }
    /**
     * 获取存储表
     */
    getWidgetsMap() {
        return this.controllerDict;
    }
    /**
     * 根据控件名获取实例
     * @param widgetName 控件名
     */
    getWidgetByName(widgetName) {
        return widgetName ? this.controllerDict.get(widgetName.toUpperCase()) : undefined;
    }
    /**
     * 获取所有控件
     */
    getWidgets() {
        return Array.from(this.getWidgetsMap().values());
    }
    /**
     * 获取widget的依赖控件名，neil整理版：https://kms.finedevelop.com/pages/viewpage.action?pageId=75081435
     * @param widget 控件
     */
    getDependenceByWidget(widget) {
        return BI.uniq(BI.concat(widget.attr('dependence') || [], widget.attr('valueDependence') || []))
            .map((widgetName) => widgetName.toLowerCase());
    }
    /**
     * 获取widget值依赖的控件名
     * @param widget 控件
     */
    getValueDependenceByWidget(widget) {
        return (widget.attr('widgetExeDependence') || [])
            .map((widgetName) => widgetName.toLowerCase());
    }
    /**
     * 根据控件名获取该控件被哪些控件依赖
     * @param widgetName 控件名
     */
    getWidgetDependenceByWidgetName(widgetName) {
        return this.getWidgetDependence(widgetName, this.getDependenceByWidget);
    }
    /**
     * 根据控件名获取该控件值被哪些控件依赖
     * @param widgetName 控件名
     */
    getWidgetValueDependenceByWidgetName(widgetName) {
        return this.getWidgetDependence(widgetName, this.getValueDependenceByWidget);
    }
    /**
     * 获取控件依赖
     * @param widgetName 控件名
     * @param filter 过滤条件
     * @param excluded 过滤查询哪些widgetName
     */
    getWidgetDependence(widgetName, filter, excluded = []) {
        const controllerWidgets = this.getWidgets();
        excluded.push(widgetName);
        const widgetNames = controllerWidgets
            .reduce((prev, currentWidget) => {
            const currentWidgetName = currentWidget.attr('widgetName');
            if (excluded.includes(currentWidgetName))
                return prev;
            const dependences = filter(currentWidget);
            if (CoreWidgetManager.compareWidgetNameByDependences(widgetName, dependences)) {
                prev.push(currentWidgetName, ...this.getWidgetDependence(currentWidgetName, filter, excluded));
            }
            return prev;
        }, []);
        return BI.uniq(widgetNames);
    }
    /**
     * 公开接口
     * @param widgetName 控件名
     */
    resolveVariable(widgetName) {
        const widget = this.getWidgetByName(BI.startWith(widgetName, '$') ? widgetName.substring(1) : widgetName);
        return widget ? widget.getValue() : undefined;
    }
    /**
     * 清除字典
     */
    clear() {
        this.controllerDict.clear();
    }
    destroy(widgetName) {
        if (!widgetName) {
            this.clear();
            return;
        }
        if (BI.isArray(widgetName)) {
            widgetName.forEach(name => {
                this.controllerDict.delete(name);
            });
            return;
        }
        this.controllerDict.delete(widgetName);
    }
    /**
     * 更新实例
     */
    update() { }
    /**
     * 刷新
     */
    refresh() { }
}
/**
 * 根据dependences查看widgetName是否在依赖中
 * 历史遗留: 匹配的控件名可能带$可能不带
 * @param widgetName 控件名
 * @param dependences 控件依赖
 */
CoreWidgetManager.compareWidgetNameByDependences = (widgetName, dependences) => dependences.includes(`$${widgetName.toLowerCase()}`) || dependences.includes(widgetName.toLowerCase());
//# sourceMappingURL=core_widget.manager.js.map