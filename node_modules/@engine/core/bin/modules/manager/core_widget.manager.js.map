{"version":3,"file":"core_widget.manager.js","sourceRoot":"","sources":["../../../src/modules/manager/core_widget.manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Widget } from '@fui/core';\n\nexport class CoreWidgetManager<T extends Widget> {\n    /**\n     * 根据dependences查看widgetName是否在依赖中\n     * 历史遗留: 匹配的控件名可能带$可能不带\n     * @param widgetName 控件名\n     * @param dependences 控件依赖\n     */\n    public static compareWidgetNameByDependences = (widgetName: string, dependences: string[]): boolean => dependences.includes(`$${widgetName.toLowerCase()}`) || dependences.includes(widgetName.toLowerCase());\n\n    protected controllerDict = new Map<string, T>();\n\n    /**\n     * 注册控件\n     * @param instance 控件实例\n     * @param widgetName 控件名\n     */\n    public register(instance: T, widgetName?: string) {\n        this.controllerDict.set(widgetName || instance.attr('widgetName'), instance);\n    }\n\n    /**\n     * 获取存储表\n     */\n    public getWidgetsMap() {\n        return this.controllerDict;\n    }\n\n    /**\n     * 根据控件名获取实例\n     * @param widgetName 控件名\n     */\n    public getWidgetByName(widgetName?: string) {\n        return widgetName ? this.controllerDict.get(widgetName.toUpperCase()) : undefined;\n    }\n\n    /**\n     * 获取所有控件\n     */\n    public getWidgets() {\n        return Array.from(this.getWidgetsMap().values());\n    }\n\n    /**\n     * 获取widget的依赖控件名，neil整理版：https://kms.finedevelop.com/pages/viewpage.action?pageId=75081435\n     * @param widget 控件\n     */\n    public getDependenceByWidget(widget: T): string[] {\n        return BI.uniq(BI.concat(widget.attr('dependence') || [], widget.attr('valueDependence') || []))\n            .map((widgetName: string) => widgetName.toLowerCase());\n    }\n\n    /**\n     * 获取widget值依赖的控件名\n     * @param widget 控件\n     */\n    public getValueDependenceByWidget(widget: T): string[] {\n        return (widget.attr('widgetExeDependence') || [])\n            .map((widgetName: string) => widgetName.toLowerCase());\n    }\n\n    /**\n     * 根据控件名获取该控件被哪些控件依赖\n     * @param widgetName 控件名\n     */\n    public getWidgetDependenceByWidgetName(widgetName: string): string[] {\n        return this.getWidgetDependence(widgetName, this.getDependenceByWidget);\n    }\n\n    /**\n     * 根据控件名获取该控件值被哪些控件依赖\n     * @param widgetName 控件名\n     */\n    public getWidgetValueDependenceByWidgetName(widgetName: string): string[] {\n        return this.getWidgetDependence(widgetName, this.getValueDependenceByWidget);\n    }\n\n    /**\n     * 获取控件依赖\n     * @param widgetName 控件名\n     * @param filter 过滤条件\n     * @param excluded 过滤查询哪些widgetName\n     */\n    private getWidgetDependence(widgetName: string, filter: (widget: T) => string[], excluded: string[] = []): string[] {\n        const controllerWidgets = this.getWidgets();\n\n        excluded.push(widgetName);\n\n        const widgetNames = controllerWidgets\n            .reduce((prev, currentWidget) => {\n                const currentWidgetName: string = currentWidget.attr('widgetName');\n\n                if (excluded.includes(currentWidgetName)) return prev;\n\n                const dependences = filter(currentWidget);\n\n                if (CoreWidgetManager.compareWidgetNameByDependences(widgetName, dependences)) {\n                    prev.push(currentWidgetName, ...this.getWidgetDependence(currentWidgetName, filter, excluded));\n                }\n\n                return prev;\n            }, [] as string[]);\n\n        return BI.uniq(widgetNames);\n    }\n\n    /**\n     * 公开接口\n     * @param widgetName 控件名\n     */\n    public resolveVariable(widgetName: string) {\n        const widget = this.getWidgetByName(BI.startWith(widgetName, '$') ? widgetName.substring(1) : widgetName);\n\n        return widget ? widget.getValue() : undefined;\n    }\n\n    /**\n     * 清除字典\n     */\n    public clear() {\n        this.controllerDict.clear();\n    }\n\n    /**\n     * 销毁实例\n     */\n    public destroy(): void;\n    public destroy(widgetName: string): void;\n    public destroy(widgetName: string[]): void;\n    public destroy(widgetName?: string | string[]) {\n        if (!widgetName) {\n            this.clear();\n\n            return;\n        }\n\n        if (BI.isArray(widgetName)) {\n            widgetName.forEach(name => {\n                this.controllerDict.delete(name);\n            });\n\n            return;\n        }\n        \n        this.controllerDict.delete(widgetName);\n    }\n\n    /**\n     * 更新实例\n     */\n    public update() {}\n\n    /**\n     * 刷新\n     */\n    public refresh() {}\n}\n"]}