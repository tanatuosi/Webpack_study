var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { shortcut, store } from '../../core.service';
import { ReportHtml } from '../report_html/html';
import './errortip.less';
import { ErrorTipModel, ErrorTipTab } from './errortip.model';
let ErrorTip = class ErrorTip extends BI.Widget {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'report-main-components-error-pane bi-user-select-enable',
            errorCode: '',
            errorMsg: '',
            errorTip: '',
            solution: '',
            exception: '',
        };
    }
    setup() {
        const self = this;
        return function () {
            self.store.setErrorResult(self.options);
            return {
                type: BI.CenterAdaptLayout.xtype,
                items: [
                    {
                        type: BI.VerticalLayout.xtype,
                        vgap: 10,
                        items: [
                            {
                                type: BI.CenterAdaptLayout.xtype,
                                items: [{
                                        type: BI.Icon.xtype,
                                        height: 140,
                                        width: 460,
                                        cls: 'preview-fail-tip-background',
                                    }],
                            },
                            {
                                type: BI.Label.xtype,
                                cls: 'fail-tip-title bi-high-light bi-font-bold',
                                text: BI.i18nText('Fine-Report_Preview_Fail_Title'),
                            },
                            {
                                type: BI.Label.xtype,
                                width: 460,
                                whiteSpace: 'normal',
                                cls: 'fail-tip-message bi-error',
                                text: () => self.getErrorCodeText(self.model.errorResult.errorMsg),
                            },
                            {
                                type: BI.VerticalLayout.xtype,
                                cls: 'bi-border error-tips',
                                items: [
                                    {
                                        type: BI.Segment.xtype,
                                        height: 36,
                                        ref: (ref) => {
                                            self.tabTrigger = ref;
                                        },
                                        cls: 'fail-tip-message',
                                        value: ErrorTipTab.SOLUTION,
                                        items: [{
                                                text: BI.i18nText('Fine-Report_Exception'),
                                                value: ErrorTipTab.EXCEPTION,
                                            }, {
                                                text: BI.i18nText('Fine-Report_Solution'),
                                                value: ErrorTipTab.SOLUTION,
                                            }],
                                        listeners: [{
                                                eventName: 'EVENT_CHANGE',
                                                action: () => {
                                                    self.store.changeTabPanel(self.tabTrigger.getValue()[0]);
                                                },
                                            }],
                                    },
                                    {
                                        type: BI.Tab.xtype,
                                        height: 150,
                                        showIndex: () => self.model.showIndex,
                                        cardCreator: (v) => {
                                            switch (v) {
                                                case ErrorTipTab.EXCEPTION:
                                                    return {
                                                        type: BI.VerticalLayout.xtype,
                                                        scrolly: true,
                                                        vgap: 10,
                                                        hgap: 10,
                                                        items: [{
                                                                el: {
                                                                    type: BI.Text.xtype,
                                                                    text: () => self.model.errorResult.exception,
                                                                    lineHeight: 26,
                                                                },
                                                            }],
                                                    };
                                                case ErrorTipTab.SOLUTION:
                                                default:
                                                    return {
                                                        type: BI.VerticalLayout.xtype,
                                                        scrolly: true,
                                                        vgap: 10,
                                                        hgap: 10,
                                                        items: [{
                                                                el: {
                                                                    type: ReportHtml.xtype,
                                                                    ref: (ref) => {
                                                                        self.labelSolution = ref;
                                                                    },
                                                                    lineHeight: 26,
                                                                    text: BI.i18nText('Fine-Report_Preview_Fail_Tip'),
                                                                },
                                                            }],
                                                    };
                                            }
                                        },
                                    },
                                ],
                            },
                        ],
                    },
                ],
            };
        };
    }
    setErrorTexts(errorResult) {
        const { errorTip, solution } = errorResult;
        this.labelSolution.setText(solution || errorTip || BI.i18nText('Fine-Report_Preview_Fail_Tip'));
        this.store.setErrorResult(errorResult);
    }
    getErrorCodeText(errorMsg) {
        const text = errorMsg;
        if (text.length > 500) {
            return `${text.substring(0, 500)}...`;
        }
        return text;
    }
};
ErrorTip.xtype = 'report.components.error_tip';
ErrorTip = __decorate([
    shortcut(),
    store(ErrorTipModel)
], ErrorTip);
export { ErrorTip };
/**
 * errorTip类装饰器
 * @returns Function
 */
export function errorTip() {
    return function (_target, _propertyKey, descriptor) {
        const render = descriptor.value;
        descriptor.value = function (...args) {
            let errorTipWidget;
            this.on('EVENT_SHOW_ERROR', (errorResult) => {
                errorTipWidget.setErrorTexts(errorResult);
                errorTipWidget.visible();
            });
            return [
                render.apply(this, ...args),
                {
                    type: BI.AbsoluteLayout.xtype,
                    items: [{
                            el: {
                                type: ErrorTip.xtype,
                                invisible: true,
                                ref: (ref) => {
                                    errorTipWidget = ref;
                                },
                                cls: 'bi-card',
                            },
                            top: 0,
                            left: 0,
                            right: 0,
                            bottom: 0,
                        }],
                },
            ];
        };
        return descriptor;
    };
}
//# sourceMappingURL=errortip.js.map