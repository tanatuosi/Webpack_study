var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterCheckbox_1;
import { WIDTH, HEIGHT } from '../controller.constants';
import { setFontSize } from '../controller.service';
import { shortcut } from '@engine/core';
import { setCheckboxStyle, transformValue2Boolean } from './checkbox.service';
import { ReportMultiSelectItem } from '../components/multiselect_item/multiselect_item';
import { AbstractParameterControllerWidget } from '../controller.abstract';
let ParameterCheckbox = ParameterCheckbox_1 = class ParameterCheckbox extends AbstractParameterControllerWidget {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: ParameterCheckbox_1.BASE_CLS,
            $testId: ParameterCheckbox_1.BASE_CLS,
            width: WIDTH,
            height: HEIGHT,
            text: '',
            value: false,
            disabled: false,
            invisible: false,
            needSubmit: false,
            fontSize: 12,
            allowBg: true,
        };
    }
    render() {
        const { width, text, value, fontSize } = this.options;
        const checkboxCls = setFontSize(ParameterCheckbox_1.BASE_CLS, fontSize);
        return {
            type: BI.VerticalLayout.xtype,
            scrolly: true,
            items: [{
                    type: ReportMultiSelectItem.xtype,
                    cls: `${checkboxCls}`,
                    ref: (_ref) => {
                        this.checkbox = _ref;
                    },
                    scale: fontSize / 12,
                    width,
                    text,
                    logic: {
                        dynamic: true,
                    },
                    selected: transformValue2Boolean(value),
                    iconWrapperWidth: 20,
                    listeners: [{
                            eventName: BI.MultiSelectItem.EVENT_CHANGE,
                            action: () => {
                                !this.silence && this.fireEvent('statechange');
                                this.fireEvent('EVENT_CHANGE');
                            },
                        }],
                }],
        };
    }
    postValidateAndToast() {
        return true;
    }
    preGetValidation() {
        return { result: true };
    }
    postGetValidation() {
        return { result: true };
    }
    getValue() {
        return this.checkbox.isSelected();
    }
    async setControllerValue(value) {
        this.checkbox.setSelected(transformValue2Boolean(value));
    }
    setInteractValue(v) {
        this.setControllerValue(v);
    }
    reset() {
        this.checkbox.setSelected(false);
    }
    resize(width, height) {
        const restoreValue = this.checkbox.isSelected();
        super.resize(width, height);
        this.checkbox.setSelected(restoreValue);
    }
    setStyle(styles) {
        this.checkbox.element.addClass(setCheckboxStyle(styles));
    }
    getText() {
        return this.options.text;
    }
};
ParameterCheckbox.xtype = 'report.main.parameter_container.controller.checkbox';
ParameterCheckbox.BASE_CLS = 'report-main-parameter-container-controller-checkbo';
ParameterCheckbox = ParameterCheckbox_1 = __decorate([
    shortcut()
], ParameterCheckbox);
export { ParameterCheckbox };
//# sourceMappingURL=checkbox.js.map