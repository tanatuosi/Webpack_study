{"version":3,"file":"controller.manager.js","sourceRoot":"","sources":["../../src/modules/controller.manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { CoreWidgetManager } from '@engine/core';\nimport { dbCommit, dbCommitConfig, WidgetManager } from '@engine/utils';\nimport { AbstractParameterControllerWidget } from './controller.abstract';\n\nexport class ContollerManager extends WidgetManager<AbstractParameterControllerWidget> {\n    /**\n     * 根据控件获取依赖并获取他们的值\n     * @param widget 控件\n     */\n    public getWidgetDependenceValueByWidget(widget: AbstractParameterControllerWidget) {\n        const dependences: string[] = this.getDependenceByWidget(widget);\n\n        const widgets = this.getNeedSubmitWidgets();\n\n        const value: {[key: string]: any} = {};\n\n        widgets.forEach(widget => {\n            const widgetName = widget.attr('widgetName');\n\n            if (CoreWidgetManager.compareWidgetNameByDependences(widgetName, dependences) && widget.validate()) {\n                value[`$${widgetName}`] = widget.getValue();\n            }\n        });\n\n        return value;\n    }\n\n    /**\n     * 获取所有校验成功的需要提交value的控件\n     */\n    private getValidatedNeedSubmitWidgets() {\n        return this.getNeedSubmitWidgets()\n            .filter(controllerWidget => controllerWidget.validate());\n    }\n\n    /**\n     * 获取需要提交value的控件\n     */\n    public getNeedSubmitWidgets() {\n        const controllerWidgets = this.getWidgets();\n\n        return controllerWidgets\n            .filter(controllerWidget => controllerWidget.attr('needSubmit'));\n    }\n    \n    public getValidatedNeedSubmitWidgetsSortByDependences() {\n        return this.sortWidgetsByDependences(this.getValidatedNeedSubmitWidgets());\n    }\n\n    public getNeedSubmitWidgetsSortByDependences() {\n        return this.sortWidgetsByDependences(this.getNeedSubmitWidgets());\n    }\n\n    /**\n     * 根据依赖关系获取需要提交的widgets，A依赖B，则B在前\n     */\n    private sortWidgetsByDependences(widgets: AbstractParameterControllerWidget[]) {\n        const widgetsDependenceInMap = new Map<string, number>();\n\n        widgets.forEach(widget => {\n            const widgetName = widget.attr('widgetName').toUpperCase();\n\n            const dependented = this.getWidgetDependenceByWidgetName(widgetName).map(name => name.toUpperCase());\n\n            dependented.forEach(dependentName => {\n                const widgetIn = (widgetsDependenceInMap.get(dependentName) || 0) + 1;\n\n                widgetsDependenceInMap.set(dependentName, widgetIn);\n            });\n        });\n\n        // 不依赖于其他组件或者依赖较少其他组件的组件在前\n        return widgets.sort((widgetA, widgetB) => {\n            const widgetNameA = widgetA.attr('widgetName').toUpperCase(), widgetNameB = widgetB.attr('widgetName').toUpperCase();\n\n            const widgetADependenceInMap = widgetsDependenceInMap.get(widgetNameA) || 0;\n\n            const widgetBDependenceInMap = widgetsDependenceInMap.get(widgetNameB) || 0;\n\n            if (widgetADependenceInMap < widgetBDependenceInMap) {\n                return -1;\n            }\n\n            if (widgetADependenceInMap > widgetBDependenceInMap) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * 获取所有校验成功的提交value的控件值\n     */\n    public getValidatedNeedSubmitValue() {\n        return this.getSubmitValueByWidgets(this.getValidatedNeedSubmitWidgets());\n    }\n\n    /**\n     * 获取所有需要提交value的控件值\n     */\n    public getNeedSubmitValue() {\n        return this.getSubmitValueByWidgets(this.getNeedSubmitWidgets());\n    }\n\n    /**\n     * 根据控件获取提交值\n     * @param widgets 参数控件\n     */\n    private getSubmitValueByWidgets(widgets: AbstractParameterControllerWidget[]) {\n        return widgets\n            .reduce((prevValue, currentWidget) => {\n                const submitValue = currentWidget.getSubmitValue();\n\n                Object.assign(prevValue, submitValue);\n\n                return prevValue;\n            }, <{ [widgetName: string]: Array<string> | number | string; }>{});\n    }\n\n    /**\n     * 获取组件联动需要的数据\n     */\n    protected getLinkageData(widgetName: string) {\n        const value = this.getValidatedNeedSubmitValue();\n\n        const widgetNames = this.getWidgetDependenceByWidgetName(widgetName);\n\n        for (const wName in value) {\n            widgetNames.includes(wName) && (value[wName] = '');\n        }\n\n        return {\n            value,\n            widgetNames,\n        };\n    }\n\n    /**\n     * 校验所有控件\n     */\n    public validateWidgets() {\n        const errorWidgets = this.getNeedSubmitWidgets().filter(controllerWidget => {\n            if (controllerWidget.validateAndToast()) {\n                return false;\n            }\n\n            return true;\n        });\n\n        return BI.isEmptyArray(errorWidgets);\n    }\n\n    /**\n     * 公开接口，获取需要提交组件的值\n     */\n    public collectionValue() {\n        return this.getNeedSubmitValue();\n    }\n\n    /**\n     * 数据入库\n     */\n    public dbCommit(opt: dbCommitConfig) {\n        const value = this.getValidatedNeedSubmitValue();\n        dbCommit(opt, value)\n            .then(response =>\n                response.callback && response.callback.call({\n                    options: {\n                        form: this,\n                    },\n                }, response),\n            );\n    }\n}\n"]}