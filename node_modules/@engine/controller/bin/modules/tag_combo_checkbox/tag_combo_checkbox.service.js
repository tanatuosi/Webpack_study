import jss from 'jss';
import jssGlobal from 'jss-plugin-global';
import jssNested from 'jss-plugin-nested';
import { getSplitorByOpts, transformStr2ArrBySplitor } from '../controller.service';
import { ParameterTagComboCheckboxNext } from './tag_combo_checkbox_next';
export const ICON_MAX_SIZE = 28;
export const BASE_ICON_SIZE = 14;
/**
 * 将默认值转为数组
 * @param value 默认朱
 * @param splitor 分隔符
 */
export function transformValue2Arr(value, splitor = ',', startSymbol = '', endSymbol = '') {
    if (BI.isArray(value)) {
        return value.map(v => `${v}`);
    }
    return transformStr2ArrBySplitor(value, splitor, startSymbol, endSymbol);
}
/**
 * 把字典的value转为string类型，以及去除已选值
 * @param data 数据字典的items
 * @param _selectedValues 已选值数组
 */
export function transformControlAttrs(data = [], _selectedValues = [], attributes) {
    const selectedValues = _selectedValues.map(value => `${value}`);
    return Array.from(data)
        .filter(controlAttr => !selectedValues.includes(`${controlAttr.value}`))
        .map(controlAttr => {
        return Object.assign(Object.assign({}, !attributes
            ? {}
            : BI.isFunction(attributes)
                ? attributes(controlAttr)
                : attributes), { text: `${controlAttr.text}`, value: `${controlAttr.value}`, title: `${controlAttr.text}` });
    });
}
export function transformValue2TagComboNextValue(v, _controlAttrData, delimiter, returnArray, customData, startSymbol, endSymbol) {
    const values = preTransformValue2TagComboNextValue(v, delimiter, returnArray, startSymbol, endSymbol);
    const controlAttrData = _controlAttrData.slice(0);
    // 找到实际值相符的item
    values.forEach((value, index) => {
        const controlAttrDataIndex = controlAttrData.findIndex(item => item.value === value);
        if (controlAttrDataIndex === -1) {
            return;
        }
        values[index] = controlAttrData[controlAttrDataIndex];
        controlAttrData.splice(controlAttrDataIndex, 1);
    });
    // 找到显示值相符的item
    values.forEach((value, index) => {
        if (!BI.isString(value)) {
            return;
        }
        const controlAttrDataIndex = controlAttrData.findIndex(item => item.text === value);
        if (controlAttrDataIndex === -1) {
            // 此时还会有一些item没有匹配到，作为自定义项
            customData && (values[index] = { text: value, value });
            return;
        }
        values[index] = controlAttrData[controlAttrDataIndex];
        controlAttrData.splice(controlAttrDataIndex, 1);
    });
    return values
        .filter(value => !BI.isString(value));
}
/**
 * 预处理下value
 * @param v value
 * @param delimiter 分隔符
 * @param returnArray 值是否是array
 */
export function preTransformValue2TagComboNextValue(v, delimiter, returnArray, startSymbol, endSymbol) {
    /**
     * 历史遗留，后台给过来的空值就是空字符串，不会传null
     * 我看老的版本也有这个bug，如果字典里有实际值为空，一样不会显示
     * 所以此处直接将空值置为null
     */
    if (!v) {
        return [];
    }
    if (BI.isObject(v) && 'date_milliseconds' in v) {
        return [BI.print(BI.getDate(v.date_milliseconds), '%Y-%X-%d')];
    }
    return transformValue2Arr(v, getSplitorByOpts(delimiter, returnArray), startSymbol, endSymbol);
}
export function setTagComboCheckboxStyle({ opacity, background, color, border, ['border-radius']: borderRadius }) {
    jss.use(jssGlobal(), jssNested());
    const cls = `${ParameterTagComboCheckboxNext.BASE_CLS}-${BI.UUID()}`;
    const selector = `.${cls}`;
    jss.createStyleSheet({
        '@global': {
            [`${selector}`]: {
                opacity,
                background,
            },
            [`${selector} .bi-combo .bi-card`]: {
                background,
                color,
            },
            [`${selector} .bi-input`]: {
                color,
            },
            [`${selector} .bi-icon-button`]: {
                color,
            },
            [`${selector} .bi-border`]: {
                border,
                'boder-radius': borderRadius,
            },
        },
    }).attach();
    return cls;
}
export function setTagComboCheckboxPopupStyle({ fontSize, itemHeight }) {
    jss.use(jssGlobal(), jssNested());
    const cls = `${ParameterTagComboCheckboxNext.BASE_CLS}-${BI.UUID()}`;
    const selector = `.${cls}`;
    const iconSize = Math.min(parseInt(fontSize, 10), ICON_MAX_SIZE);
    jss.createStyleSheet({
        '@global': {
            [`${selector} .bi-list-pane .bi-label`]: {
                'font-size': `${fontSize} !important`,
            },
            [`${selector} .bi-popup-view .bi-v-tape >.bi-v .bi-label`]: {
                'font-size': `${fontSize} !important`,
            },
            [`${selector} .checkbox-content`]: {
                width: `${iconSize}px !important`,
                height: `${iconSize}px !important`,
            },
            [`${selector} .checkbox-content:after`]: {
                top: `${iconSize / BASE_ICON_SIZE * 6}px !important`,
                left: `${iconSize / BASE_ICON_SIZE * 2}px !important`,
                width: `${iconSize / BASE_ICON_SIZE * 6}px !important`,
                height: `${iconSize / BASE_ICON_SIZE * 9}px !important`,
            },
            [`${selector} .bi-popup-view .bi-half-button`]: {
                width: `${iconSize}px !important`,
                height: `${iconSize}px !important`,
            },
            [`${selector} .bi-popup-view .bi-half-button:after`]: {
                top: `${iconSize / BASE_ICON_SIZE * 2}px !important`,
                left: `${iconSize / BASE_ICON_SIZE * 2}px !important`,
                width: `${iconSize / BASE_ICON_SIZE * 8}px !important`,
                height: `${iconSize / BASE_ICON_SIZE * 8}px !important`,
            },
            [`${selector} .bi-list-pane .bi-tips`]: {
                'font-size': `${fontSize} !important`,
                height: `${itemHeight} !important`,
                'line-height': `${itemHeight} !important`,
            },
        },
    }).attach();
    return cls;
}
//# sourceMappingURL=tag_combo_checkbox.service.js.map