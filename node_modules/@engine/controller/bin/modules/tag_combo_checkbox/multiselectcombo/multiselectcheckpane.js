var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterMultiSelectCheckPane_1;
import { shortcut } from '@engine/core';
let ParameterMultiSelectCheckPane = ParameterMultiSelectCheckPane_1 = class ParameterMultiSelectCheckPane extends BI.Widget {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'bi-multi-select-check-pane bi-background',
            valueGetter: () => [],
            items: [],
            itemHeightGetter: () => 24,
        };
    }
    render() {
        const { items } = this.options;
        return {
            type: BI.VTapeLayout.xtype,
            items: [{
                    height: 12,
                    el: {
                        type: BI.VerticalAdaptLayout.xtype,
                        columnSize: ['auto', 'auto'],
                        cls: 'multi-select-continue-select',
                        items: [{
                                el: {
                                    type: BI.Label.xtype,
                                    title: BI.i18nText('BI-Selected_Data'),
                                    text: BI.i18nText('BI-Selected_Data'),
                                },
                                lgap: 10,
                            },
                            {
                                el: {
                                    type: BI.TextButton.xtype,
                                    title: BI.i18nText('BI-Continue_Select'),
                                    text: BI.i18nText('BI-Continue_Select'),
                                    cls: 'multi-select-check-selected bi-high-light',
                                    listeners: [{
                                            eventName: BI.TextButton.EVENT_CHANGE,
                                            action: () => {
                                                this.fireEvent(ParameterMultiSelectCheckPane_1.EVENT_CHANGE);
                                            },
                                        }],
                                },
                                lgap: 10,
                            }],
                    },
                    tgap: 10,
                }, {
                    el: {
                        type: BI.ListPane.xtype,
                        ref: (_ref) => {
                            this.pane = _ref;
                        },
                        el: {
                            type: BI.Loader.xtype,
                            el: {
                                chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
                            },
                            layouts: [{
                                    type: BI.VerticalLayout.xtype,
                                    lgap: 10,
                                }],
                            items: this.createItems(items),
                        },
                        baseCls: 'bi-display-list',
                    },
                    tgap: 5,
                }],
        };
    }
    createItems(items) {
        return BI.createItems(items, {
            type: BI.IconTextItem.xtype,
            cls: 'cursor-default check-font icon-size-12 display-list-item bi-tips',
            once: true,
            invalid: true,
            selected: true,
            height: this.options.itemHeightGetter(),
            logic: {
                dynamic: true,
            },
        });
    }
    updateValue() {
        const items = this.options.valueGetter();
        this.pane.populate(this.createItems(items));
    }
};
ParameterMultiSelectCheckPane.xtype = 'report-multi-select-check-pane';
ParameterMultiSelectCheckPane.EVENT_CHANGE = 'EVENT_CHANGE';
ParameterMultiSelectCheckPane = ParameterMultiSelectCheckPane_1 = __decorate([
    shortcut()
], ParameterMultiSelectCheckPane);
export { ParameterMultiSelectCheckPane };
//# sourceMappingURL=multiselectcheckpane.js.map