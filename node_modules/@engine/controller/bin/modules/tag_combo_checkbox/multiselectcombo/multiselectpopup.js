var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterMultiSelectPopup_1;
import { shortcut } from '@engine/core';
let ParameterMultiSelectPopup = ParameterMultiSelectPopup_1 = class ParameterMultiSelectPopup extends BI.Widget {
    constructor() {
        super(...arguments);
        this.props = {
            itemsCreator: BI.emptyFn,
            keywordGetter: () => undefined,
            valueGetter: undefined,
            unmatchedValueGetter: () => [],
            itemHeightGetter: () => 24,
            minWidth: 135,
            maxHeight: 400,
            height: 96,
            value: [],
            customData: true,
            repopulateGetter: () => false,
        };
        this.unmatchedValues = [];
        this.values = [];
        this.hasNext = false;
    }
    render() {
        const { itemsCreator, itemHeightGetter, keywordGetter, value } = this.options;
        let loadTotal = false, times = 1;
        this.values = value.slice(0);
        const itemHeight = itemHeightGetter();
        return {
            type: BI.VTapeLayout.xtype,
            ref: (_ref) => {
                this.vtapeWrapper = _ref;
            },
            items: [{
                    el: {
                        type: BI.VerticalLayout.xtype,
                        scrolly: false,
                        items: [{
                                type: BI.MultiSelectBar.xtype,
                                ref: (_ref) => {
                                    this.allSelectButton = _ref;
                                },
                                cls: 'bi-list-item-active',
                                invisible: true,
                                height: itemHeight,
                                iconWrapperWidth: Math.min(36 / 24 * this.options.itemHeightGetter(), 36),
                                listeners: [{
                                        eventName: BI.MultiSelectBar.EVENT_CHANGE,
                                        action: (isSelected) => {
                                            isSelected ? this.setAllSelected() : this.setAllUnselected();
                                            if (isSelected && !loadTotal && this.hasNext) {
                                                loadTotal = true;
                                                itemsCreator({
                                                    loadTotal: true,
                                                    times: times + 1,
                                                }, (data) => {
                                                    this.hasNext = data.hasNext;
                                                    data.items = this.transformItems(data.items);
                                                    data.items.forEach(item => {
                                                        item.selected = true;
                                                    });
                                                    this.pane.addItems(this.createItems(data.items));
                                                    this.fireEvent(ParameterMultiSelectPopup_1.EVENT_SELECT_ALL, true);
                                                });
                                            }
                                            else {
                                                this.fireEvent(ParameterMultiSelectPopup_1.EVENT_SELECT_ALL, isSelected);
                                            }
                                        },
                                    }],
                            }, {
                                type: BI.TextButton.xtype,
                                ref: (_ref) => {
                                    this.addTextBtn = _ref;
                                },
                                invisible: true,
                                text: BI.i18nText('BI-Basic_Click_To_Add_Text', ''),
                                height: itemHeight,
                                cls: 'bi-high-light',
                                hgap: 5,
                                handler: () => {
                                    this.fireEvent(ParameterMultiSelectPopup_1.EVENET_ADD_ITEM, keywordGetter(), keywordGetter(), true);
                                },
                            }],
                    },
                    height: itemHeight,
                }, {
                    type: BI.ListPane.xtype,
                    ref: (_ref) => {
                        this.pane = _ref;
                    },
                    itemsCreator: (op, callback) => {
                        times = op.times;
                        const keyword = keywordGetter();
                        op.keyword = keyword;
                        op.loadTotal = loadTotal && this.hasNext;
                        itemsCreator(op, (data) => {
                            this.hasNext = data.hasNext;
                            data.items = this.transformItems(data.items);
                            callback(this.createItems(data.items));
                            if (op.times === 1) {
                                this.resize(BI.size(data.items) > 0);
                            }
                            this.checkAllSelected();
                        });
                    },
                    el: {
                        type: BI.Loader.xtype,
                        ref: (_ref) => {
                            this.loader = _ref;
                        },
                        el: {
                            chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
                        },
                        layouts: [{
                                type: BI.VerticalLayout.xtype,
                                height: 400,
                                minHeight: 400,
                                scrolly: true,
                            }],
                    },
                    hasNext: () => this.hasNext,
                    listeners: [{
                            eventName: BI.ListPane.EVENT_CHANGE,
                            action: () => {
                                this.checkAllSelected();
                            },
                        }, {
                            eventName: BI.Pane.EVENT_LOADED,
                            action: () => {
                                this.fireEvent(ParameterMultiSelectPopup_1.EVENT_LOADED);
                            },
                        }, {
                            eventName: BI.Pane.EVENT_LOADING,
                            action: () => {
                                this.fireEvent(ParameterMultiSelectPopup_1.EVENT_LOADING);
                            },
                        }],
                }, {
                    el: {
                        type: BI.ButtonGroup.xtype,
                        cls: 'list-view-toolbar bi-high-light bi-split-top',
                        items: BI.createItems([{
                                text: BI.i18nText('BI-Basic_Clears'),
                                handler: () => {
                                    this.fireEvent(ParameterMultiSelectPopup_1.EVENT_CLEAR);
                                },
                            }, {
                                text: BI.i18nText('BI-Basic_Sure'),
                                handler: () => {
                                    this.fireEvent(ParameterMultiSelectPopup_1.EVENT_CONFIRM);
                                },
                            }], {
                            type: BI.TextButton.xtype,
                            once: false,
                            shadow: true,
                            isShadowShowingOnSelected: true,
                        }),
                        layouts: [{
                                type: BI.CenterLayout.xtype,
                                hgap: 0,
                                vgap: 0,
                            }],
                    },
                    height: itemHeight,
                }],
        };
    }
    transformItems(items) {
        let i = 0;
        while (i < this.unmatchedValues.length) {
            const selectedValue = this.unmatchedValues[i];
            const itemIndex = items.findIndex(item => item.text === selectedValue.text && item.value === selectedValue.value);
            if (itemIndex !== -1) {
                items.splice(itemIndex, 1, selectedValue);
                this.unmatchedValues.splice(i, 1);
            }
            else {
                i += 1;
            }
        }
        items.forEach(item => {
            const index = this.values.findIndex(selectedValue => item.text === selectedValue.text && item.value === selectedValue.value);
            if (index !== -1) {
                item.selected = true;
                this.values.splice(index, 1);
            }
        });
        const newItems = this.values.map(value => {
            return Object.assign(Object.assign({}, value), { selected: true });
        });
        this.unmatchedValues = this.unmatchedValues.concat(this.values);
        this.values = [];
        return items.concat(newItems);
    }
    resize(isHeaderVisible) {
        const { itemHeightGetter, keywordGetter } = this.options;
        const itemHeight = itemHeightGetter();
        this.allSelectButton.setVisible(isHeaderVisible);
        BI.nextTick(() => {
            this.pane.setTipVisible(!isHeaderVisible);
            if (!keywordGetter()) {
                this.vtapeWrapper.element.css('height', (this.loader.element.height() || itemHeight) + 2 * itemHeight);
                this.vtapeWrapper.attr('items')[0].height = isHeaderVisible ? itemHeight : 0;
                this.vtapeWrapper.resize();
                this.fireEvent(ParameterMultiSelectPopup_1.EVENT_RESIZE);
            }
        });
    }
    getValue() {
        /**
         * https://work.fineres.com/browse/REPORT-79990
         * 自依赖下拉控件的 itemsCreator 在第一次获取依赖值时返回为空
         */
        const buttons = this.pane.getAllButtons();
        return !BI.isEmptyArray(buttons) ? buttons.filter(btn => btn.isSelected())
            .map(btn => {
            return {
                text: btn.attr('text'),
                value: btn.getValue(),
            };
        }) : this.values;
    }
    getAllLeaves() {
        return this.pane.getAllButtons()
            .map(btn => {
            return {
                text: btn.attr('text'),
                value: btn.getValue(),
            };
        });
    }
    populate() {
        this.pane.populate();
    }
    setAllSelected() {
        this.pane.getAllButtons().forEach(btn => {
            btn.setSelected(true);
        });
    }
    setAllUnselected() {
        this.pane.getAllButtons().forEach(btn => {
            btn.setSelected(false);
        });
    }
    createItems(items) {
        return BI.createItems(items, {
            type: BI.MultiSelectItem.xtype,
            cls: 'bi-list-item-active',
            iconWrapperWidth: Math.min(36 / 24 * this.options.itemHeightGetter(), 36),
            height: this.options.itemHeightGetter(),
            keyword: this.options.keywordGetter(),
            listeners: [{
                    eventName: BI.MultiSelectItem.EVENT_CHANGE,
                    action: (v, btn) => {
                        this.fireEvent(ParameterMultiSelectPopup_1.EVENT_CHANGE, btn.attr('text'), v, btn.isSelected());
                    },
                }],
        });
    }
    checkAllSelected() {
        const isAllSelected = !this.hasNext && this.pane.getAllButtons().every(btn => btn.isSelected());
        if (isAllSelected) {
            this.allSelectButton.setSelected(true);
            return;
        }
        const isAllNotSelected = this.pane.getAllButtons().every(btn => !btn.isSelected());
        isAllNotSelected ? this.allSelectButton.setSelected(false) : this.allSelectButton.setHalfSelected(true);
    }
    switchState(text, value, $isSelected) {
        const isSelected = BI.isNull($isSelected) ? true : $isSelected;
        const btn = this.pane.getAllButtons()
            .find(btn => btn.attr('text') === text
            && btn.getValue() === value
            && (BI.isNotNull($isSelected)
                ? btn.isSelected() === !isSelected
                : true));
        if (btn) {
            btn.setSelected(isSelected);
        }
        else {
            this.pane.addItems(this.createItems([{
                    text,
                    value,
                    selected: isSelected,
                }]));
            this.unmatchedValues.push({ text, value });
        }
        this.resize(true);
        this.checkAllSelected();
        this.fireEvent(ParameterMultiSelectPopup_1.EVENT_SWITCH_STATE);
    }
    switchStates(leaves, isSelected) {
        const items = leaves.slice(0);
        if (!this.options.repopulateGetter()) {
            this.pane.getAllButtons().forEach(btn => {
                const index = items.findIndex(({ text, value }) => btn.attr('text') === text && btn.getValue() === value);
                if (index !== -1) {
                    btn.setSelected(isSelected);
                    items.splice(index, 1);
                }
            });
        }
        if (BI.size(items) > 0) {
            items.forEach(item => {
                item.selected = isSelected;
            });
            this.pane.addItems(this.createItems(items));
            if (this.options.repopulateGetter()) {
                this.values = this.values.concat(items);
            }
            else {
                this.unmatchedValues = this.unmatchedValues.concat(items);
            }
        }
        this.checkAllSelected();
        this.fireEvent(ParameterMultiSelectPopup_1.EVENT_SWITCH_STATE);
    }
    setValue(vals) {
        this.setAllUnselected();
        this.switchStates(vals, true);
    }
    getUnmatchedValues() {
        return this.unmatchedValues;
    }
    getAllButtons() {
        return this.pane.getAllButtons();
    }
    resetState() {
        this.unmatchedValues = [];
        this.values = [];
        this.hasNext = false;
    }
};
ParameterMultiSelectPopup.xtype = 'report-multi-select-popup';
ParameterMultiSelectPopup.EVENT_CHANGE = 'EVENT_CHANGE';
ParameterMultiSelectPopup.EVENT_CONFIRM = 'EVENT_CONFIRM';
ParameterMultiSelectPopup.EVENT_CLEAR = 'EVENT_CLEAR';
ParameterMultiSelectPopup.EVENT_SELECT_ALL = 'EVENT_SELECT_ALL';
ParameterMultiSelectPopup.EVENET_ADD_ITEM = 'EVENET_ADD_ITEM';
ParameterMultiSelectPopup.EVENT_SWITCH_STATE = 'EVENT_SWITCH_STATE';
ParameterMultiSelectPopup.EVENT_RESIZE = 'EVENT_RESIZE';
ParameterMultiSelectPopup.EVENT_LOADED = 'EVENT_LOADED';
ParameterMultiSelectPopup.EVENT_LOADING = 'EVENT_LOADING';
ParameterMultiSelectPopup = ParameterMultiSelectPopup_1 = __decorate([
    shortcut()
], ParameterMultiSelectPopup);
export { ParameterMultiSelectPopup };
//# sourceMappingURL=multiselectpopup.js.map