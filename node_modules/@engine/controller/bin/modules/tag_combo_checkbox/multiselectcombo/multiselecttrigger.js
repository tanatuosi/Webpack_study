var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterMultiSelectTrigger_1;
import { shortcut } from '@engine/core';
import { ParameterMultiSelectPopup } from './multiselectpopup';
import { ParameterMultiSelectSearchPopup } from './multiselectsearchpopup';
let ParameterMultiSelectTrigger = ParameterMultiSelectTrigger_1 = class ParameterMultiSelectTrigger extends BI.Trigger {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'bi-search-text-value-trigger bi-border bi-focus-shadow',
            height: 24,
            itemsCreator: BI.emptyFn,
            valueGetter: () => [],
            unmatchedValueGetter: () => [],
            watermark: '',
            allowEdit: false,
            itemHeightGetter: () => 24,
            customData: true,
            value: [],
        };
    }
    render() {
        const { height, itemsCreator, valueGetter, watermark, unmatchedValueGetter, customData, itemHeightGetter } = this.options;
        return {
            type: BI.HTapeLayout.xtype,
            ref: (_ref) => {
                this.wrapper = _ref;
            },
            items: [
                {
                    el: {
                        type: BI.Searcher.xtype,
                        ref: (_ref) => {
                            this.searcher = _ref;
                        },
                        isAutoSearch: false,
                        el: {
                            type: BI.SignEditor.xtype,
                            ref: (_ref) => {
                                this.editor = _ref;
                            },
                            value: this.joinValues(valueGetter()),
                            allowBlank: true,
                            watermark,
                            height,
                            listeners: [{
                                    eventName: BI.SignEditor.EVENT_FOCUS,
                                    action: () => {
                                        this.editor.setValue('');
                                        this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_FOCUS);
                                    },
                                }, {
                                    eventName: BI.SignEditor.EVENT_BLUR,
                                    action: () => {
                                        this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_BLUR);
                                    },
                                }, {
                                    eventName: BI.SignEditor.EVENT_CLICK,
                                    action: () => {
                                        this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_CLICK);
                                    },
                                }],
                        },
                        popup: {
                            type: ParameterMultiSelectSearchPopup.xtype,
                            itemHeightGetter,
                            customData,
                            cls: 'bi-card',
                            ref: (_ref) => {
                                this.popup = _ref;
                            },
                            keywordGetter: () => this.editor.getValue(),
                            unmatchedValueGetter,
                            itemsCreator,
                            valueGetter,
                            listeners: [{
                                    eventName: ParameterMultiSelectPopup.EVENT_CHANGE,
                                    action: (text, value, isSelected) => {
                                        this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_CHANGE, text, value, isSelected);
                                    },
                                }, {
                                    eventName: ParameterMultiSelectPopup.EVENET_ADD_ITEM,
                                    action: (text, value, isSelected) => {
                                        this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_CHANGE, text, value, isSelected);
                                        this.searcher.stopSearch();
                                    },
                                }, {
                                    eventName: ParameterMultiSelectPopup.EVENT_CONFIRM,
                                    action: () => {
                                        this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_CONFIRM);
                                    },
                                }, {
                                    eventName: ParameterMultiSelectPopup.EVENT_CLEAR,
                                    action: () => {
                                        this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_CLEAR);
                                    },
                                }, {
                                    eventName: ParameterMultiSelectPopup.EVENT_SELECT_ALL,
                                    action: (isSelected) => {
                                        this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_SELECT_ALL, isSelected, this.popup.getAllLeaves());
                                    },
                                }],
                        },
                        onSearch: (_op, callback) => {
                            callback();
                        },
                        listeners: [{
                                eventName: BI.Searcher.EVENT_CHANGE,
                                action: () => {
                                },
                            }, {
                                eventName: BI.Searcher.EVENT_START,
                                action: () => {
                                    this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_START);
                                },
                            }, {
                                eventName: BI.Searcher.EVENT_SEARCHING,
                                action: () => {
                                    this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_SEARCHING);
                                },
                            }, {
                                eventName: BI.Searcher.EVENT_STOP,
                                action: () => {
                                    this.fireEvent(ParameterMultiSelectTrigger_1.EVENT_STOP);
                                },
                            }],
                    },
                },
                {
                    el: {
                        type: BI.Layout.xtype,
                    },
                    width: 0,
                },
                {
                    el: {
                        type: BI.Layout.xtype,
                        width: 24,
                    },
                    width: 24,
                },
            ],
        };
    }
    mounted() {
        !this.options.allowEdit && BI.createWidget({
            type: BI.AbsoluteLayout.xtype,
            element: this,
            items: [{
                    el: {
                        type: BI.Text.xtype,
                        title: () => this.editor.getValue(),
                    },
                    left: 0,
                    right: 24,
                    top: 0,
                    bottom: 0,
                }],
        });
    }
    focus() {
        this.editor.focus();
    }
    blur() {
        this.editor.blur();
    }
    setValue(vals) {
        this.editor.setValue(this.joinValues(vals));
    }
    isSearching() {
        return this.searcher.isSearching();
    }
    stopEditing() {
        this.searcher.stopSearch();
    }
    getSearcher() {
        return this.searcher;
    }
    getValue() {
        return this.popup.getValue();
    }
    setAdapter(adapter) {
        this.searcher.setAdapter(adapter);
    }
    adjustPopupHeight(adapter) {
        this.setAdapter(adapter);
        this.searcher.populate();
        this.searcher.adjustHeight();
    }
    joinValues(vals) {
        return vals.map(val => val.text).join(',');
    }
    refreshPlaceHolderWidth(width) {
        this.wrapper.attr('items')[1].width = width;
        this.wrapper.resize();
    }
    setText(v) {
        this.editor.setValue(v);
    }
    setWaterMark(v) {
        this.editor.setWaterMark(v);
    }
};
ParameterMultiSelectTrigger.EVENT_SEARCHING = 'EVENT_SEARCHING';
ParameterMultiSelectTrigger.EVENT_STOP = 'EVENT_STOP';
ParameterMultiSelectTrigger.EVENT_START = 'EVENT_START';
ParameterMultiSelectTrigger.EVENT_CHANGE = 'EVENT_CHANGE';
ParameterMultiSelectTrigger.EVENT_FOCUS = 'EVENT_FOCUS';
ParameterMultiSelectTrigger.EVENT_BLUR = 'EVENT_BLUR';
ParameterMultiSelectTrigger.EVENT_CONFIRM = 'EVENT_CONFIRM';
ParameterMultiSelectTrigger.EVENT_SELECT_ALL = 'EVENT_SELECT_ALL';
ParameterMultiSelectTrigger.EVENT_CLEAR = 'EVENT_CLEAR';
ParameterMultiSelectTrigger.xtype = 'report.search_text_value_trigger';
ParameterMultiSelectTrigger.EVENT_CLICK = 'EVENT_CLICK';
ParameterMultiSelectTrigger = ParameterMultiSelectTrigger_1 = __decorate([
    shortcut()
], ParameterMultiSelectTrigger);
export { ParameterMultiSelectTrigger };
//# sourceMappingURL=multiselecttrigger.js.map