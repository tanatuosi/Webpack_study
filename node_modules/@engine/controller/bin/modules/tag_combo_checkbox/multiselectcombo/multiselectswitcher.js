var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterMultiSelectSwitcher_1;
import { shortcut } from '@engine/core';
import { ParameterMultiSelectCheckButton } from './multiselectcheckbutton';
import { ParameterMultiSelectCheckPane } from './multiselectcheckpane';
import { ParameterSingleSelectPopup } from '../../combo/singleselectcombo/singleselectpopup';
let ParameterMultiSelectSwitcher = ParameterMultiSelectSwitcher_1 = class ParameterMultiSelectSwitcher extends BI.Widget {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'bi-multi-select-check-selected-switcher',
            valueGetter: () => [],
            popupGetter: () => ParameterSingleSelectPopup,
            itemHeightGetter: () => 24,
        };
        this.afterInit = false;
        this.afterClick = false;
    }
    render() {
        const { valueGetter, itemHeightGetter } = this.options;
        return {
            type: BI.Switcher.xtype,
            ref: (_ref) => {
                this.switcher = _ref;
            },
            trigger: '',
            toggle: false,
            el: {
                type: ParameterMultiSelectCheckButton.xtype,
                ref: (_ref) => {
                    this.checkButton = _ref;
                },
                valueGetter,
                listeners: [{
                        eventName: ParameterMultiSelectCheckButton.EVENT_CHANGE,
                        action: () => {
                            this.afterClick = true;
                            if (this.afterInit) {
                                this.showView();
                            }
                            this.fireEvent(ParameterMultiSelectSwitcher_1.EVENT_CHANGE);
                        },
                    }, {
                        eventName: BI.Events.VIEW,
                        action: (visiblity) => {
                            this.fireEvent(BI.Events.VIEW, visiblity);
                        },
                    }],
            },
            popup: {
                type: ParameterMultiSelectCheckPane.xtype,
                ref: (_ref) => {
                    this.checkPane = _ref;
                },
                valueGetter,
                itemHeightGetter,
                listeners: [{
                        eventName: ParameterMultiSelectCheckPane.EVENT_CHANGE,
                        action: () => {
                            this.switcher.hideView();
                        },
                    }],
            },
            listeners: [{
                    eventName: BI.Switcher.EVENT_BEFORE_POPUPVIEW,
                    action: () => {
                        this.fireEvent(ParameterMultiSelectSwitcher_1.EVENT_BEFORE_POPUPVIEW);
                    },
                }],
        };
    }
    setAdapter(adapter) {
        this.switcher.setAdapter(adapter);
    }
    showView() {
        this.switcher.showView();
    }
    hideView() {
        this.switcher.hideView();
    }
    updateValue() {
        this.checkPane && this.checkPane.updateValue();
        this.checkButton.updateValue();
    }
    setValue(v) {
        this.switcher.setValue(v);
        this.updateValue();
    }
    initSwitcher() {
        if (!this.afterInit) {
            this.setAdapter(this.options.popupGetter());
            if (this.afterClick) {
                this.showView();
            }
        }
        this.afterInit = true;
    }
};
ParameterMultiSelectSwitcher.xtype = 'report-multi-select-switcher';
ParameterMultiSelectSwitcher.EVENT_BEFORE_POPUPVIEW = 'EVENT_BEFORE_POPUPVIEW';
ParameterMultiSelectSwitcher.EVENT_CHANGE = 'EVENT_CHANGE';
ParameterMultiSelectSwitcher = ParameterMultiSelectSwitcher_1 = __decorate([
    shortcut()
], ParameterMultiSelectSwitcher);
export { ParameterMultiSelectSwitcher };
//# sourceMappingURL=multiselectswitcher.js.map