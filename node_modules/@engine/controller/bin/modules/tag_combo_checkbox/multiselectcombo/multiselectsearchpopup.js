var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { shortcut } from '@engine/core';
import { ParameterMultiSelectPopup } from './multiselectpopup';
let ParameterMultiSelectSearchPopup = class ParameterMultiSelectSearchPopup extends ParameterMultiSelectPopup {
    constructor() {
        super(...arguments);
        this.props = {
            itemsCreator: BI.emptyFn,
            keywordGetter: () => undefined,
            valueGetter: () => [],
            unmatchedValueGetter: () => [],
            itemHeightGetter: () => 24,
            minWidth: 135,
            maxHeight: 400,
            height: undefined,
            value: [],
            customData: true,
            repopulateGetter: () => false,
        };
    }
    transformItems(items) {
        const { valueGetter, unmatchedValueGetter, keywordGetter, customData } = this.options;
        const keyword = keywordGetter() || '';
        const unmatchedValues = unmatchedValueGetter().slice(0);
        const selectedValues = valueGetter();
        items.forEach(item => {
            const index = selectedValues.findIndex(value => value.text === item.text && value.value === item.value);
            item.selected = index !== -1;
            if (item.selected) {
                selectedValues.splice(index, 1);
            }
            const unmatchedValueIndex = unmatchedValues.findIndex(value => value.text === item.text && value.value === item.value);
            if (unmatchedValueIndex !== -1) {
                unmatchedValues.splice(unmatchedValueIndex, 1);
            }
        });
        // 匹配下自定义项的选中
        unmatchedValues.forEach(item => {
            const index = selectedValues.findIndex(value => value.text === item.text && value.value === item.value);
            item.selected = index !== -1;
            if (item.selected) {
                selectedValues.splice(index, 1);
            }
        });
        // 剩下的值如果能匹配的肯定不是在数据字典中的，也就是text和item相同的项
        const { match, find } = BI.Func.getSearchResult(unmatchedValues, keyword, 'value');
        const allItems = find.concat(items, match);
        if (BI.size(allItems) === 0 && customData) {
            this.addTextBtn.setText(BI.i18nText('BI-Basic_Click_To_Add_Text', keywordGetter()));
            this.addTextBtn.visible();
        }
        else {
            this.addTextBtn.invisible();
        }
        return match.concat(items, find);
    }
};
ParameterMultiSelectSearchPopup.xtype = 'report-multi-select-search-popup';
ParameterMultiSelectSearchPopup = __decorate([
    shortcut()
], ParameterMultiSelectSearchPopup);
export { ParameterMultiSelectSearchPopup };
//# sourceMappingURL=multiselectsearchpopup.js.map