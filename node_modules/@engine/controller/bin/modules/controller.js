var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { provider } from '@engine/core';
import { errorHandlerProvider } from '@engine/crud';
import { ParameterButton } from './button/button';
import { ParameterCheckbox } from './checkbox/checkbox';
import { ParameterCheckboxGroup } from './checkbox_group/checkbox_group';
import { ParameterComboNext } from './combo/combo_next';
import './controller.less';
import { ParameterDatetime } from './datetime/datetime';
import { ParameterEmpty } from './empty/empty';
import { ControllerAttrErrorHandler, CONTROLLER_ATTR_ERROR_CODE } from './interceptor/error_handler/errorHandler.controller_attr_error';
import { ParameterLabel } from './label/label';
import { ParameterMultifile } from './multifile/multifile';
import { ParameterNumber } from './number/number';
import { PageFixedRowCombobox } from './pagefixedrowcombobox/pagefixedrowcombobox';
import { ParameterPassword } from './password/password';
import { ParameterRadioGroup } from './radio_group/radio_group';
import { ParameterTagComboCheckboxNext } from './tag_combo_checkbox/tag_combo_checkbox_next';
import { ParameterText } from './text/text';
import { ParameterTextarea } from './textarea/textarea';
import { ParameterTree } from './tree_like/tree/tree';
import { ParameterTreeComboBox } from './tree_like/tree_combo_box/tree_combo_box';
errorHandlerProvider.setHandler(CONTROLLER_ATTR_ERROR_CODE.HAVE_RING, ControllerAttrErrorHandler);
errorHandlerProvider.setHandler(CONTROLLER_ATTR_ERROR_CODE.SAME_ORIGIN_ITEM, ControllerAttrErrorHandler);
class ControllerProvider {
    constructor() {
        this.controllerDict = new Map([
            ['button', ParameterButton.xtype],
            ['freebutton', ParameterButton.xtype],
            ['formsubmit', ParameterButton.xtype],
            ['checkbox', ParameterCheckbox.xtype],
            ['checkboxgroup', ParameterCheckboxGroup.xtype],
            ['combo', ParameterComboNext.xtype],
            ['datetime', ParameterDatetime.xtype],
            ['label', ParameterLabel.xtype],
            ['number', ParameterNumber.xtype],
            ['password', ParameterPassword.xtype],
            ['radiogroup', ParameterRadioGroup.xtype],
            ['tagcombocheckbox', ParameterTagComboCheckboxNext.xtype],
            ['combocheckbox', ParameterTagComboCheckboxNext.xtype],
            ['text', ParameterText.xtype],
            ['textarea', ParameterTextarea.xtype],
            ['tree', ParameterTree.xtype],
            ['treecombobox', ParameterTreeComboBox.xtype],
            ['multifile', ParameterMultifile.xtype],
            ['pagefixedrowcombobox', PageFixedRowCombobox.xtype],
        ]);
    }
    get(key) {
        return this.controllerDict.get(key) || ParameterEmpty.xtype;
    }
    set(key, value) {
        this.controllerDict.set(key, value);
    }
    getImpl() {
        return ParameterEmpty;
    }
}
let ReportControllerProvider = class ReportControllerProvider {
    $get() {
        return ControllerProvider;
    }
};
ReportControllerProvider.xtype = 'report.controller.provider';
ReportControllerProvider = __decorate([
    provider()
], ReportControllerProvider);
export const controllerProvider = BI.Providers.getProvider(ReportControllerProvider.xtype);
//# sourceMappingURL=controller.js.map