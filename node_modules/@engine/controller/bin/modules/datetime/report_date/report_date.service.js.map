{"version":3,"file":"report_date.service.js","sourceRoot":"","sources":["../../../../src/modules/datetime/report_date/report_date.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateType } from './report_date';\n\nexport function parseDateTime(date: DateType, format?: string) {\n    if (date) {\n        if (BI.isDate(date)) {\n            return {\n                date: new Date(),\n                isLegal: true,\n            };\n        }\n        if (BI.isString(date) || BI.isNumber(date)) {\n            const dateStr = replaceDateStr(`${date}`);\n            if (needFormat(dateStr)) {\n                if (!format || !checkDateValid(dateStr, format)) {\n                    return {\n                        date: new Date(),\n                        isLegal: false,\n                    };\n                }\n                // xx-xx-xx new Date会加入时区，-换成/可以避免这个问题\n                // safari中new Date(yyyy-MM-dd HH:mm:ss)会报错，需要将-转换为/\n\n                return {\n                    date: BI.parseDateTime(`${dateStr.replaceAll('-', () => '/')}`, format.replaceAll('-', () => '/')),\n                    isLegal: true,\n                };\n            }\n\n            return {\n                date: BI.parseDateTime(dateStr, '%Y-%X-%d %H:%M:%S %p'),\n                isLegal: true,\n            };\n        }\n\n        return {\n            date: new Date('date_milliseconds' in date ? date.date_milliseconds : date.__time__),\n            isLegal: true,\n        };\n    }\n\n    return {\n        date: new Date(),\n        isLegal: false,\n    };\n}\n\n/**\n * 将格式转换为fineui控件接收的格式\n * @param format 格式\n */\nexport function transformFormat(format: string): string {\n    return format\n        .replace(/yyyy/g, '%Y')\n        .replace(/MM/g, '%X')\n        .replace(/dd/g, '%d')\n        .replace(/M/g, '%x')\n        // 匹配开头为d的\n        .replace(/^d/g, '%e')\n        // 匹配非开头为d的\n        .replace(/.d/g, sub => sub[0] === '%' ? sub : `${sub[0]}%e`)\n        .replace(/yy/g, '%y')\n        .replace(/HH/g, '%H')\n        .replace(/mm/g, '%M')\n        .replace(/ss/g, '%S')\n        .replace(/hh/g, '%I')\n        .replace(/a/g, '%P')\n        .replace(/h/g, '%l')\n        // 匹配开头为H的\n        .replace(/^H/g, '%k')\n        // 匹配非开头为H的\n        .replace(/.H/g, sub => sub[0] === '%' ? sub : `${sub[0]}%k`);\n}\n\n/**\n * 将format字符串转换为正则表达式\n * @param formatStr\n */\nexport function format2Regex(formatStr: string) {\n    let str = formatStr;\n    const list = new Map([\n        ['%Y', `(?!0000)[0-9]{4}`],\n        ['%X', `0[1-9]|1[0-2]`],\n        ['%d', `0[1-9]|1[0-9]|2[0-9]|3[0-1]`],\n        ['%x', `[1-9]|1[0-2]`],\n        ['%e', `[1-9]|1[0-9]|2[0-9]|3[0-1]`],\n        ['%y', `[0-9]{2}`],\n        ['%H', `[01][0-9]|2[0-3]`],\n        ['%M', `[0-5][0-9]`],\n        ['%S', `[0-5][0-9]`],\n        ['%I', `0[0-9]|1[0-2]`],\n        ['%P', `am|pm`],\n        ['%l', `[1-9]|1[0-2]`],\n        ['%k', `2[0-3]|[0-1]?[0-9]`],\n    ]);\n    list.forEach((value, key) => {\n        str = str.replaceAll(key, () => `(${value})`);\n    });\n\n    return `^${str}$`;\n}\n\n/**\n * 检验日期格式和format是否匹配\n * @param date\n * @param format\n */\nexport function checkDateValid(date: string, format: string) {\n    const regex = format2Regex(format);\n\n    return new RegExp(regex).test(date);\n}\n\nexport function getFormatType(format: string) {\n    const transformedFormat = transformFormat(format);\n    const isDateFormat = /%d|%e/g.test(transformedFormat);\n    const isTimeFormat = /%H|%M|%S|%I|%l|%k/.test(transformedFormat);\n    // 匹配 yyyy年，但是不匹配 yyyy年mm月等情况\n    const isYearFormat = /%Y/.test(transformedFormat) && !/%[^Y]/.test(transformedFormat);\n\n    return { isDateFormat, isTimeFormat, isYearFormat };\n}\n\n/**\n * 判断日期字符串是否需要校验\n */\nexport function needFormat(dateStr: string) {\n    const whiteList = [\n        'yyyy/MM/dd',\n        'yyyy-MM-dd',\n        'yyyy/MM/dd HH:mm:ss',\n        'yyyy-MM-dd HH:mm:ss',\n        'yyyy/MM/dd HH:mm:ss a',\n        'yyyy-MM-dd HH:mm:ss a',\n    ];\n\n    return !whiteList.some(item => new RegExp(format2Regex(transformFormat(item))).test(dateStr));\n}\n\nexport function replaceDateStr(dateStr: string) {\n    let str = dateStr;\n    [\n        // 后台公式返回的是中文文字 上午/下午，不符合规范，转成am/pm\n        ['上午', 'am'],\n        ['下午', 'pm'],\n    ].forEach(item => {\n        str = str.replaceAll(item[0], () => item[1]);\n    });\n\n    return str;\n}\n"]}