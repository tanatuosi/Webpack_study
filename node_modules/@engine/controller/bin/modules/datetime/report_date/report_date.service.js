export function parseDateTime(date, format) {
    if (date) {
        if (BI.isDate(date)) {
            return {
                date: new Date(),
                isLegal: true,
            };
        }
        if (BI.isString(date) || BI.isNumber(date)) {
            const dateStr = replaceDateStr(`${date}`);
            if (needFormat(dateStr)) {
                if (!format || !checkDateValid(dateStr, format)) {
                    return {
                        date: new Date(),
                        isLegal: false,
                    };
                }
                // xx-xx-xx new Date会加入时区，-换成/可以避免这个问题
                // safari中new Date(yyyy-MM-dd HH:mm:ss)会报错，需要将-转换为/
                return {
                    date: BI.parseDateTime(`${dateStr.replaceAll('-', () => '/')}`, format.replaceAll('-', () => '/')),
                    isLegal: true,
                };
            }
            return {
                date: BI.parseDateTime(dateStr, '%Y-%X-%d %H:%M:%S %p'),
                isLegal: true,
            };
        }
        return {
            date: new Date('date_milliseconds' in date ? date.date_milliseconds : date.__time__),
            isLegal: true,
        };
    }
    return {
        date: new Date(),
        isLegal: false,
    };
}
/**
 * 将格式转换为fineui控件接收的格式
 * @param format 格式
 */
export function transformFormat(format) {
    return format
        .replace(/yyyy/g, '%Y')
        .replace(/MM/g, '%X')
        .replace(/dd/g, '%d')
        .replace(/M/g, '%x')
        // 匹配开头为d的
        .replace(/^d/g, '%e')
        // 匹配非开头为d的
        .replace(/.d/g, sub => sub[0] === '%' ? sub : `${sub[0]}%e`)
        .replace(/yy/g, '%y')
        .replace(/HH/g, '%H')
        .replace(/mm/g, '%M')
        .replace(/ss/g, '%S')
        .replace(/hh/g, '%I')
        .replace(/a/g, '%P')
        .replace(/h/g, '%l')
        // 匹配开头为H的
        .replace(/^H/g, '%k')
        // 匹配非开头为H的
        .replace(/.H/g, sub => sub[0] === '%' ? sub : `${sub[0]}%k`);
}
/**
 * 将format字符串转换为正则表达式
 * @param formatStr
 */
export function format2Regex(formatStr) {
    let str = formatStr;
    const list = new Map([
        ['%Y', `(?!0000)[0-9]{4}`],
        ['%X', `0[1-9]|1[0-2]`],
        ['%d', `0[1-9]|1[0-9]|2[0-9]|3[0-1]`],
        ['%x', `[1-9]|1[0-2]`],
        ['%e', `[1-9]|1[0-9]|2[0-9]|3[0-1]`],
        ['%y', `[0-9]{2}`],
        ['%H', `[01][0-9]|2[0-3]`],
        ['%M', `[0-5][0-9]`],
        ['%S', `[0-5][0-9]`],
        ['%I', `0[0-9]|1[0-2]`],
        ['%P', `am|pm`],
        ['%l', `[1-9]|1[0-2]`],
        ['%k', `2[0-3]|[0-1]?[0-9]`],
    ]);
    list.forEach((value, key) => {
        str = str.replaceAll(key, () => `(${value})`);
    });
    return `^${str}$`;
}
/**
 * 检验日期格式和format是否匹配
 * @param date
 * @param format
 */
export function checkDateValid(date, format) {
    const regex = format2Regex(format);
    return new RegExp(regex).test(date);
}
export function getFormatType(format) {
    const transformedFormat = transformFormat(format);
    const isDateFormat = /%d|%e/g.test(transformedFormat);
    const isTimeFormat = /%H|%M|%S|%I|%l|%k/.test(transformedFormat);
    // 匹配 yyyy年，但是不匹配 yyyy年mm月等情况
    const isYearFormat = /%Y/.test(transformedFormat) && !/%[^Y]/.test(transformedFormat);
    return { isDateFormat, isTimeFormat, isYearFormat };
}
/**
 * 判断日期字符串是否需要校验
 */
export function needFormat(dateStr) {
    const whiteList = [
        'yyyy/MM/dd',
        'yyyy-MM-dd',
        'yyyy/MM/dd HH:mm:ss',
        'yyyy-MM-dd HH:mm:ss',
        'yyyy/MM/dd HH:mm:ss a',
        'yyyy-MM-dd HH:mm:ss a',
    ];
    return !whiteList.some(item => new RegExp(format2Regex(transformFormat(item))).test(dateStr));
}
export function replaceDateStr(dateStr) {
    let str = dateStr;
    [
        // 后台公式返回的是中文文字 上午/下午，不符合规范，转成am/pm
        ['上午', 'am'],
        ['下午', 'pm'],
    ].forEach(item => {
        str = str.replaceAll(item[0], () => item[1]);
    });
    return str;
}
//# sourceMappingURL=report_date.service.js.map