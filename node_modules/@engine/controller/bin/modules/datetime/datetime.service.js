import { getFormatType, ReportDate } from './report_date/report_date';
import jss from 'jss';
import jssGlobal from 'jss-plugin-global';
import jssNested from 'jss-plugin-nested';
/*
 * @Author: iapyang
 * @Maintainers: Teller
 */
import { YearMonthCombo } from './yearmonth/combo.yearmonth';
import { ParameterDatetime } from './datetime';
/**
 * 转换时间控件对象值为毫秒数
 * @param dateValue 时间控件对象值
 */
export function transformDateValue2DateMs(dateValue) {
    if (dateValue.type === BI.DynamicDateCombo.Dynamic) {
        return BI.DynamicDateHelper.getCalculation(dateValue.value).getTime();
    }
    const { year, month = 1, day = 1, hour = 0, minute = 0, second = 0 } = dateValue.value;
    return BI.getDate(year, month - 1, day, hour, minute, second)
        .getTime();
}
/**
 * 根据日期格式获得日期控件类型
 * @param format 格式
 */
export function getControlTypeByFormat(format) {
    const { isDateFormat, isTimeFormat, isYearFormat } = getFormatType(format);
    return isYearFormat ? BI.DynamicYearCombo.xtype :
        isTimeFormat
            ? isDateFormat
                ? BI.DynamicDateTimeCombo.xtype : BI.TimeCombo.xtype
            : isDateFormat
                ? BI.DynamicDateCombo.xtype : YearMonthCombo.xtype;
}
/**
 * 根据Format类型获取时间范围
 * REPORT-80190: "本月"和"今年"按钮只有当天日期在 [minDate, maxDate] 范围内时才生效
 * @param startDate 外部传入的startDate
 * @param endDate 外部传入的endDate
 * @param format 格式
 */
export function getDateRangeByFormat(startDate, endDate, format) {
    let minDate = undefined, maxDate = undefined;
    const { isDateFormat, isTimeFormat, isYearFormat } = getFormatType(format);
    const startReportDate = new ReportDate(startDate, format);
    const endReportDate = new ReportDate(endDate, format);
    if (isYearFormat) { // 年
        startReportDate.isLegal && (minDate = `${startReportDate.toString('yyyy')}-01-01`);
        endReportDate.isLegal && (maxDate = `${endReportDate.toString('yyyy')}-12-31`);
    }
    else if (!isTimeFormat && !isDateFormat) { // 年月
        startReportDate.isLegal && (minDate = `${startReportDate.toString('yyyy-MM')}-01`);
        if (endReportDate.isLegal) {
            const endYear = endReportDate.getValue().getFullYear();
            const endMonth = endReportDate.getValue().getMonth() + 1;
            maxDate = `${endReportDate.toString('yyyy-MM')}-${endMonth === 2 ? BI.isLeapYear(endYear) ? 29 : 28 : [4, 6, 9, 11].includes(endMonth) ? 30 : 31}`;
        }
    }
    else if (isTimeFormat) { // 含时间
        startReportDate.isLegal && (minDate = `${startReportDate.toString('yyyy-MM-dd HH:mm:ss')}`);
        startReportDate.isLegal && (maxDate = `${endReportDate.toString('yyyy-MM-dd HH:mm:ss')}`);
    }
    else {
        minDate = transform2YMDFormat(startDate, format);
        maxDate = transform2YMDFormat(endDate, format);
    }
    return { minDate, maxDate };
}
/**
 * 将日期毫秒数转为格式所要求的字符串
 * @param milliseconds 毫秒数或者2010-07这样的字符串
 * @param format 格式
 */
export function transformDateMs2String(milliseconds, format) {
    if (BI.isNumber(milliseconds)) {
        return new ReportDate({ date_milliseconds: milliseconds }).toString(format);
    }
    return new ReportDate(milliseconds).toString(format);
}
/**
 * 转换time_combo控件对象值为毫秒数
 * @param milliseconds 毫秒数
 */
export function transformTimeValue2DateMs(timeValue, reportDate) {
    const { hour, minute, second } = timeValue;
    return reportDate
        .setHours(hour)
        .setMinutes(minute)
        .setSeconds(second)
        .getTime();
}
/**
 * 将字符串格式转换为xxxx-xx-xx
 * @param date 日期字符串
 * @param format 格式
 */
export function transform2YMDFormat(date, format) {
    const reportDate = new ReportDate(date, format);
    if (!reportDate.isLegal) {
        return undefined;
    }
    return reportDate.toString('yyyy-MM-dd');
}
/**
 * 设置下拉框下拉图标字体大小样式
 * @param baseCls 基础样式class
 * @param dep 字体大小、宽高
 * @returns 返回新的样式class
 */
export function setDatetimeComboFontSize(baseCls, dep) {
    // fontsize 12px对应16px的图标大小
    const ratio = 16 / 12;
    const cls = `${baseCls}-${BI.UUID()}`;
    const selector = `.${cls} .bi-combo .bi-trigger`;
    const { fontSize, width, height } = dep;
    const scale = fontSize / 12;
    // 下拉按钮的宽度，跟随字体大小变化，字体12px时宽度24px
    const triggerWidthStyle = `${scale * 24}px !important`;
    jss.use(jssGlobal(), jssNested());
    jss.createStyleSheet({
        '@global': {
            [`.${cls} .bi-trigger-icon-button.bi-icon-button`]: {
                width: triggerWidthStyle,
                'font-size': `${Math.min(fontSize * ratio, width, height)}px`,
            },
            [selector]: {
                'font-size': `${fontSize}px`,
            },
        },
    })
        .attach();
    return cls;
}
export function isLegal(date, format, start, end) {
    if (!date.isLegal) {
        return false;
    }
    const reportDate = new ReportDate(date.toString(format), format);
    const startDate = new ReportDate(start, format);
    const endDate = new ReportDate(end, format);
    if (start && startDate.isLegal && new ReportDate(start, format).getTime() > reportDate.getTime()) {
        BI.Msg.toast(BI.i18nText('Fine-Report_Value_Less_Than', start));
        return false;
    }
    if (end && endDate.isLegal && new ReportDate(end, format).getTime() < reportDate.getTime()) {
        BI.Msg.toast(BI.i18nText('Fine-Report_Value_More_Than', end));
        return false;
    }
    return true;
}
/**
 * 日期转化为控件所需的格式
 */
export function transform2DateComboValue(date, format, start, end) {
    if (!isLegal(date, format, start, end)) {
        return undefined;
    }
    const isTimeValue = !date.isDateFormat && date.isTimeFormat;
    const dateValue = date.toJSON();
    return isTimeValue ? {
        hour: dateValue.hour,
        minute: dateValue.minute,
        second: dateValue.second,
    } : {
        type: 1,
        value: dateValue,
    };
}
export function setDatetimeComboStyle({ opacity, background, color, border, ['border-radius']: borderRadius }) {
    jss.use(jssGlobal(), jssNested());
    const cls = `${ParameterDatetime.BASE_CLS}-${BI.UUID()}`;
    const selector = `.${cls}`;
    jss.createStyleSheet({
        '@global': {
            [`${selector}`]: {
                opacity,
                background,
            },
            [`${selector} .bi-card`]: {
                background,
                color,
            },
            [`${selector} .bi-text`]: {
                color,
            },
            [`${selector} .bi-icon-button`]: {
                color,
            },
            [`${selector} .bi-border`]: {
                border,
                'border-radius': borderRadius,
            },
        },
    })
        .attach();
    return cls;
}
export function setDatetimeComboPopupStyle({ itemHeight, fontSize }) {
    jss.use(jssGlobal(), jssNested());
    const cls = `${ParameterDatetime.BASE_CLS}-${BI.UUID()}`;
    const selector = `.${cls}`;
    jss.createStyleSheet({
        '@global': {
            [`${selector} .bi-calendar .bi-grid`]: {
                height: `${parseInt(itemHeight, 10) / 24 * 44}px !important`,
            },
            [`${selector} .bi-calendar .bi-grid .bi-label`]: {
                'line-height': `${itemHeight} !important`,
                'font-size': `${fontSize} !important`,
            },
            [`${selector} .bi-calendar .bi-t .bi-abs`]: {
                height: `${itemHeight} !important`,
            },
            [`${selector} .bi-calendar .bi-t .bi-abs >.bi-basic-button`]: {
                height: `${itemHeight} !important`,
            },
            [`${selector} .bi-calendar .bi-t .bi-abs .bi-text`]: {
                'font-size': `${fontSize} !important`,
            },
        },
    })
        .attach();
    return cls;
}
//# sourceMappingURL=datetime.service.js.map