var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { YearMonthTrigger } from './trigger.yearmonth';
import './combo.yearmonth.less';
import { shortcut } from '@engine/core';
import { MAX_DATE, MIN_DATE } from '../datetime.constants';
const constants = {
    popupHeight: 259,
    popupWidth: 270,
    comboAdjustHeight: 1,
    border: 1,
};
let YearMonthCombo = class YearMonthCombo extends BI.Single {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'bi-dynamic-year-month-combo',
            width: 80,
            height: 21,
            minDate: MIN_DATE,
            maxDate: MAX_DATE,
            format: '',
            allowEdit: true,
            isNeedAdjustWidth: true,
        };
    }
    render() {
        const { width, height: initialHeight, container, value, minDate, maxDate, format, allowEdit, behaviors, watermark, isNeedAdjustWidth } = this.options, { comboAdjustHeight } = constants;
        this.storeTriggerValue = '';
        const date = BI.getDate();
        this.storeValue = value;
        const height = initialHeight;
        return {
            type: BI.HTapeLayout.xtype,
            width,
            height,
            cls: 'bi-focus-shadow',
            items: [{
                    el: {
                        type: BI.IconButton.xtype,
                        cls: 'bi-trigger-icon-button date-change-h-font',
                        width: height,
                        height,
                        ref: (_ref) => {
                            this.changeIcon = _ref;
                        },
                    },
                    width: height,
                }, {
                    type: BI.AbsoluteLayout.xtype,
                    items: [{
                            // REPORT-67192 调整层级结构，不需要再对iconButton的点击做处理
                            el: {
                                type: BI.IconButton.xtype,
                                cls: 'bi-trigger-icon-button date-font',
                                width: height,
                                height,
                                ref: (_ref) => {
                                    this.triggerBtn = _ref;
                                },
                            },
                            top: 0,
                            right: 0,
                        }, {
                            el: {
                                type: BI.Combo.xtype,
                                cls: 'bi-border bi-border-radius',
                                destroyWhenHide: true,
                                container,
                                ref: (_ref) => {
                                    this.combo = _ref;
                                },
                                toggle: false,
                                isNeedAdjustHeight: false,
                                isNeedAdjustWidth,
                                el: {
                                    type: YearMonthTrigger.xtype,
                                    min: minDate,
                                    max: maxDate,
                                    watermark,
                                    format,
                                    allowEdit,
                                    height: height - 2,
                                    value,
                                    ref: (_ref) => {
                                        this.trigger = _ref;
                                    },
                                    listeners: [{
                                            eventName: 'EVENT_KEY_DOWN',
                                            action: () => {
                                                if (this.combo.isViewVisible()) {
                                                    this.combo.hideView();
                                                }
                                                this.fireEvent('EVENT_KEY_DOWN', arguments);
                                            },
                                        }, {
                                            eventName: 'EVENT_STOP',
                                            action: () => {
                                                if (!this.combo.isViewVisible()) {
                                                    this.combo.showView();
                                                }
                                            },
                                        }, {
                                            eventName: 'EVENT_FOCUS',
                                            action: () => {
                                                this.storeTriggerValue = this.trigger.getKey();
                                                if (!this.combo.isViewVisible()) {
                                                    this.combo.showView();
                                                }
                                                this.fireEvent('EVENT_FOCUS');
                                            },
                                        }, {
                                            eventName: 'EVENT_BLUR',
                                            action: () => {
                                                this.fireEvent('EVENT_BLUR');
                                            },
                                        }, {
                                            eventName: 'EVENT_ERROR',
                                            action: () => {
                                                this.storeValue = {
                                                    type: BI.DynamicDateCombo.Static,
                                                    value: {
                                                        year: date.getFullYear(),
                                                        month: date.getMonth() + 1,
                                                    },
                                                };
                                                this.fireEvent('EVENT_ERROR');
                                            },
                                        }, {
                                            eventName: 'EVENT_VALID',
                                            action: () => {
                                                this.fireEvent('EVENT_VALID');
                                            },
                                        }, {
                                            eventName: 'EVENT_CHANGE',
                                            action: () => {
                                                this.fireEvent('EVENT_CHANGE');
                                            },
                                        }, {
                                            eventName: 'EVENT_CONFIRM',
                                            action: () => {
                                                if (this.combo.isViewVisible()) {
                                                    return;
                                                }
                                                const dateStore = this.storeTriggerValue;
                                                const dateObj = this.trigger.getKey();
                                                if (BI.isNotEmptyString(dateObj) && !BI.isEqual(dateObj, dateStore)) {
                                                    this.storeValue = this.trigger.getValue();
                                                    this.setValue(this.trigger.getValue());
                                                }
                                                else if (BI.isEmptyString(dateObj)) {
                                                    this.storeValue = undefined;
                                                    this.trigger.setValue();
                                                }
                                                this.checkDynamicValue(this.storeValue);
                                                this.fireEvent('EVENT_CONFIRM');
                                            },
                                        }],
                                },
                                adjustLength: comboAdjustHeight,
                                popup: {
                                    el: {
                                        type: BI.DynamicYearMonthPopup.xtype,
                                        width: isNeedAdjustWidth ? width : undefined,
                                        behaviors,
                                        supportDynamic: this.options.supportDynamic,
                                        min: minDate,
                                        max: maxDate,
                                        ref: (_ref) => {
                                            this.popup = _ref;
                                        },
                                        listeners: [{
                                                eventName: 'EVENT_CHANGE',
                                                action: () => {
                                                    this.setValue(this.popup.getValue());
                                                    this.combo.hideView();
                                                    this.fireEvent('EVENT_CONFIRM');
                                                },
                                            }, {
                                                eventName: 'BUTTON_CLEAR_EVENT_CHANGE',
                                                action: () => {
                                                    this.setValue();
                                                    this.combo.hideView();
                                                    this.fireEvent('EVENT_CONFIRM');
                                                },
                                            }, {
                                                eventName: 'BUTTON_lABEL_EVENT_CHANGE',
                                                action: () => {
                                                    const date = BI.getDate();
                                                    this.setValue({ type: BI.DynamicDateCombo.Static, value: { year: date.getFullYear(), month: date.getMonth() + 1 } });
                                                    this.combo.hideView();
                                                    this.fireEvent('EVENT_CONFIRM');
                                                },
                                            }, {
                                                eventName: 'BUTTON_OK_EVENT_CHANGE',
                                                action: () => {
                                                    this.setValue(this.popup.getValue());
                                                    this.combo.hideView();
                                                    this.fireEvent('EVENT_CONFIRM');
                                                },
                                            }],
                                    },
                                    value,
                                    stopPropagation: false,
                                },
                                // DEC-4250 和复选下拉一样，点击triggerBtn不默认收起
                                hideChecker: (e) => this.triggerBtn.element.find(e.target).length === 0,
                                listeners: [{
                                        eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
                                        action: () => {
                                            if (!this.combo.isViewVisible()) {
                                                this.popup.setValue(this.storeValue);
                                                this.popup.setMinDate(this.options.minDate);
                                                this.popup.setMaxDate(this.options.maxDate);
                                                this.fireEvent('EVENT_BEFORE_POPUPVIEW');
                                            }
                                        },
                                    }],
                            },
                            top: 0,
                            left: 0,
                            right: 0,
                            bottom: 0,
                        }],
                }],
            ref: (_ref) => {
                this.comboWrapper = _ref;
            },
        };
    }
    mounted() {
        this.checkDynamicValue(this.storeValue);
    }
    checkDynamicValue(v) {
        const o = this.options;
        let type = undefined;
        if (BI.isNotNull(v)) {
            type = v.type;
        }
        switch (type) {
            case BI.DynamicDateCombo.Dynamic:
                this.changeIcon.setVisible(true);
                this.comboWrapper.attr('items')[0].width = o.height;
                this.comboWrapper.resize();
                break;
            default:
                this.comboWrapper.attr('items')[0].width = 0;
                this.comboWrapper.resize();
                this.changeIcon.setVisible(false);
                break;
        }
    }
    setMinDate(minDate) {
        this.options.minDate = minDate;
        this.trigger.setMinDate(minDate);
        this.popup && this.popup.setMinDate(minDate);
    }
    setMaxDate(maxDate) {
        this.options.maxDate = maxDate;
        this.trigger.setMaxDate(maxDate);
        this.popup && this.popup.setMaxDate(maxDate);
    }
    setValue(v) {
        this.storeValue = v;
        this.trigger.setValue(v);
        this.checkDynamicValue(v);
    }
    getValue() {
        return this.storeValue;
    }
    getKey() {
        return this.trigger.getKey();
    }
    hidePopupView() {
        this.combo.hideView();
    }
    focus() {
        this.trigger.focus();
    }
    blur() {
        this.trigger.blur();
    }
    setWaterMark(v) {
        this.trigger.setWaterMark(v);
    }
};
YearMonthCombo.xtype = 'report.components.dynamic_year_month_combo';
YearMonthCombo = __decorate([
    shortcut()
], YearMonthCombo);
export { YearMonthCombo };
//# sourceMappingURL=combo.yearmonth.js.map