export function validateByCustomRule(v = '', rule = '') {
    if (!rule) {
        return true;
    }
    if (rule === 'idcardRegex') {
        return validateIDCard(v);
    }
    try {
        return new RegExp(rule).test(v);
    }
    catch (e) {
        return false;
    }
}
/**
 * 身份证校验
 * @param _idCard 身份证校验数据
 */
function validateIDCard(_idCard) {
    const idCard = `${_idCard}`;
    if (idCard.length === 15) {
        // 进行15位身份证的验证
        return isValidityBrithBy15IdCard(idCard);
    }
    else if (idCard.length === 18) {
        // 得到身份证数组
        const idArray = idCard.split('');
        // 进行18位身份证的基本验证和第18位的验证
        return isValidityBrithBy18IdCard(idCard) && isTrueValidateCodeBy18IdCard(idArray);
    }
    return false;
}
/**
 * 判断身份证号码为18位时最后的验证位是否正确
 * @param idArray 身份证号码数组
 */
function isTrueValidateCodeBy18IdCard(idArray) {
    // 加权因子
    const Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1];
    // 身份证验证位值.10代表X
    const ValideCode = [1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2];
    let sum = 0; // 声明加权求和变量
    if (idArray[17].toLowerCase() === 'x') {
        idArray[17] = '10'; // 将最后位为x的验证码替换为10方便后续操作
    }
    for (let i = 0; i < 17; i++) {
        sum += Wi[i] * parseInt(idArray[i], 10); // 加权求和
    }
    const valCodePosition = sum % 11; // 得到验证码所位置
    return idArray[17] === `${ValideCode[valCodePosition]}`;
}
/**
 * 验证18位数身份证号码中的生日是否是有效生日
 * @param idCard 18位书身份证字符串
 */
function isValidityBrithBy18IdCard(idCard18) {
    const year = parseFloat(idCard18.substring(6, 10));
    const month = parseFloat(idCard18.substring(10, 12));
    const day = parseFloat(idCard18.substring(12, 14));
    const temp_date = new Date(year, month - 1, day);
    // 这里用getFullYear()获取年份，避免千年虫问题
    if (temp_date.getFullYear() !== year
        || temp_date.getMonth() !== month - 1
        || temp_date.getDate() !== day) {
        return false;
    }
    return true;
}
/**
 * 验证15位数身份证号码中的生日是否是有效生日
 * @param idCard15 15位书身份证字符串
 */
function isValidityBrithBy15IdCard(idCard15) {
    const year = parseFloat(idCard15.substring(6, 8));
    const month = parseFloat(idCard15.substring(8, 10));
    const day = parseFloat(idCard15.substring(10, 12));
    const temp_date = new Date(year, month - 1, day);
    // 对于老身份证中的你年龄则不需考虑千年虫问题而使用getYear()方法
    if (temp_date.getFullYear() % 100 !== year
        || temp_date.getMonth() !== month - 1
        || temp_date.getDate() !== day) {
        return false;
    }
    return true;
}
//# sourceMappingURL=text.service.js.map