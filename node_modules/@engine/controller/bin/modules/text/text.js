var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { WIDTH, HEIGHT } from '../controller.constants';
import { validateByCustomRule } from './text.service';
import { setEditorStyle, setFontSize, setLineHeight } from '../controller.service';
import { shortcut } from '@engine/core';
import { AbstractParameterControllerWidget } from '../controller.abstract';
let ParameterText = class ParameterText extends AbstractParameterControllerWidget {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'report-main-parameter-container-controller-text',
            $testId: 'report-main-parameter-container-controller-text',
            width: WIDTH,
            height: HEIGHT,
            watermark: '',
            allowBlank: true,
            errorMsg: BI.i18nText('Fine-Report_Preview_Can_Not_Null'),
            value: '',
            regex: '',
            regErrorMsg: BI.i18nText('Fine-Report_Preview_Input_Error'),
            fontSize: 12,
            disabled: false,
            invisible: false,
            needSubmit: false,
            allowBg: true,
        };
    }
    render() {
        const { width, height, value, watermark, fontSize, disabled, allowBg } = this.options;
        const editorCls = setFontSize('report-main-parameter-container-controller-text', fontSize);
        const editorCls2 = setLineHeight('report-main-parameter-container-controller-text', height);
        this.value = `${value}`;
        return {
            type: BI.VerticalLayout.xtype,
            cls: allowBg ? 'bi-card' : '',
            items: [{
                    type: BI.TextEditor.xtype,
                    cls: `${editorCls} ${editorCls2} bi-border-radius`,
                    ref: (_ref) => {
                        this.editor = _ref;
                        // 适配外部获取文本控件
                        this.editComp = _ref.element;
                    },
                    vgap: 0,
                    width,
                    height,
                    disabled,
                    allowBlank: true,
                    value: this.value,
                    watermark,
                    listeners: [{
                            eventName: BI.TextEditor.EVENT_FOCUS,
                            action: () => {
                                !this.silence && this.fireEvent('beforeedit');
                                this.hideBubble();
                            },
                        }, {
                            eventName: BI.TextEditor.EVENT_KEY_DOWN,
                            action: () => {
                                const result = !this.silence && this.fireEvent('afteredit');
                                result !== false && this.fireEvent('EVENT_CHANGE', this.editor.getValue());
                            },
                        }, {
                            eventName: BI.TextEditor.EVENT_BLUR,
                            action: () => {
                                !this.silence && this.fireEvent('stopedit');
                            },
                        }],
                }],
        };
    }
    // 公开接口
    setWaterMark(v) {
        this.editor.setWaterMark(v);
    }
    async setControllerValue(v, fire) {
        this.editor.setValue(v);
        !this.silence && fire && this.fireEvent('afteredit');
    }
    getBasicValidation(value = this.editor.getValue()) {
        const { allowBlank, regex, errorMsg, regErrorMsg } = this.options;
        if (BI.isEmptyString(value) && !allowBlank) {
            return {
                result: false,
                errorMsg,
            };
        }
        return validateByCustomRule(value, regex) ? {
            result: true,
        } : {
            result: false,
            errorMsg: regErrorMsg,
        };
    }
    preGetValidation() {
        return this.getBasicValidation(this.value);
    }
    postGetValidation() {
        return this.getBasicValidation();
    }
    postValidateAndToast() {
        const validation = this.getValidation();
        if (validation.result) {
            return true;
        }
        this.showBubble(validation.errorMsg);
        return false;
    }
    emitManualStopEditEvent() {
        this.fireEvent('stopedit');
    }
    getValue() {
        return this.editor.getValue();
    }
    setInteractValue(v) {
        this.setControllerValue(v);
    }
    reset() {
        this.editor.setValue();
    }
    resize(width, height) {
        const restoreValue = this.editor.getValue();
        super.resize(width, height);
        this.editor.setValue(restoreValue);
    }
    getAdapter() {
        return this.editor;
    }
    focus() {
        this.editor.focus();
    }
    blur() {
        this.editor.blur();
    }
    setStyle(styles) {
        this.editor.element.addClass(setEditorStyle(styles));
    }
    getText() {
        return this.editor.getValue();
    }
};
ParameterText.xtype = 'report.main.parameter_container.controller.text';
ParameterText = __decorate([
    shortcut()
], ParameterText);
export { ParameterText };
//# sourceMappingURL=text.js.map