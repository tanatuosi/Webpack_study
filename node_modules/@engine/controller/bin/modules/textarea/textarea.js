var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { WIDTH } from '../controller.constants';
import { validateByCustomRule } from '../text/text.service';
import { setTextAreaFontSize } from './textarea.service';
import { shortcut } from '@engine/core';
import { AbstractParameterControllerWidget } from '../controller.abstract';
import { setEditorStyle } from '../controller.service';
let ParameterTextarea = class ParameterTextarea extends AbstractParameterControllerWidget {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'report-main-parameter-container-controller-textarea',
            $testId: 'report-main-parameter-container-controller-textarea',
            width: WIDTH,
            height: WIDTH,
            value: '',
            multiline: true,
            regex: '',
            regErrorMsg: BI.i18nText('Fine-Report_Preview_Input_Error'),
            disabled: false,
            invisible: false,
            needSubmit: false,
            fontSize: 12,
            allowBlank: true,
            errorMsg: BI.i18nText('Fine-Report_Preview_Can_Not_Null'),
            watermark: '',
            allowBg: true,
        };
    }
    mounted() {
        this.element.on('keydown', (e) => {
            e.stopPropagation();
        });
        !this.silence && this.fireEvent('afterinit');
    }
    render() {
        const { width, height, value: _value, watermark, fontSize, allowBg } = this.options;
        this.value = `${_value}`;
        return {
            type: BI.VerticalLayout.xtype,
            cls: allowBg ? 'bi-card' : '',
            items: [{
                    type: BI.TextAreaEditor.xtype,
                    cls: `${setTextAreaFontSize('report-main-parameter-container-controller-textarea', fontSize)} bi-border bi-border-radius bi-focus-shadow`,
                    ref: (_ref) => {
                        this.editor = _ref;
                    },
                    width: width - 2,
                    height: height - 2,
                    value: this.value,
                    watermark,
                    listeners: [{
                            eventName: BI.TextAreaEditor.EVENT_KEY_DOWN,
                            action: BI.debounce(() => {
                                const result = !this.silence && this.fireEvent('afteredit');
                                result !== false && this.fireEvent('EVENT_CHANGE');
                            }, 400),
                        }, {
                            eventName: BI.TextAreaEditor.EVENT_BLUR,
                            action: () => {
                                !this.silence && this.fireEvent('stopedit');
                            },
                        }, {
                            eventName: BI.TextAreaEditor.EVENT_FOCUS,
                            action: () => {
                                this.hideBubble();
                                !this.silence && this.fireEvent('beforeedit');
                            },
                        }],
                }],
        };
    }
    async setControllerValue(v) {
        this.editor.setValue(v);
    }
    getValue() {
        return this.editor.getValue();
    }
    getBasicValidation(value = this.editor.getValue()) {
        const { allowBlank, regex, errorMsg, regErrorMsg } = this.options;
        if (BI.isEmptyString(value) && !allowBlank) {
            return {
                result: false,
                errorMsg,
            };
        }
        return validateByCustomRule(value, regex) ? {
            result: true,
        } : {
            result: false,
            errorMsg: regErrorMsg,
        };
    }
    preGetValidation() {
        return this.getBasicValidation(this.value);
    }
    postGetValidation() {
        return this.getBasicValidation();
    }
    postValidateAndToast() {
        const validation = this.getValidation();
        if (validation.result) {
            return true;
        }
        this.showBubble(validation.errorMsg);
        return false;
    }
    setInteractValue(v) {
        this.setControllerValue(v);
    }
    emitManualStopEditEvent() {
        this.fireEvent('stopedit');
    }
    reset() {
        this.editor.setValue();
    }
    resize(width, height) {
        const restoreValue = this.editor.getValue();
        super.resize(width, height);
        this.editor.setValue(restoreValue);
    }
    getAdapter() {
        return this.editor;
    }
    focus() {
        this.editor.focus();
    }
    blur() {
        this.editor.blur();
    }
    setStyle(styles) {
        this.editor.element.addClass(setEditorStyle(styles));
    }
    setWaterMark(v) {
        this.editor.setWatermark(v);
    }
    getText() {
        return this.editor.getValue();
    }
};
ParameterTextarea.xtype = 'report.main.parameter_container.controller.textarea';
ParameterTextarea = __decorate([
    shortcut()
], ParameterTextarea);
export { ParameterTextarea };
//# sourceMappingURL=textarea.js.map