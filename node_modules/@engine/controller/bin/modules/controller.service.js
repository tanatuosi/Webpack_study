import jss from 'jss';
import jssGlobal from 'jss-plugin-global';
import jssNested from 'jss-plugin-nested';
export const LimitCount = 500;
export const PopupMaxHeight = 500;
/**
 * 设置字体大小样式
 * @param baseCls 基础样式class
 * @param fontSize 字体大小
 * @returns 返回新的样式class
 */
export function setFontSize(baseCls, fontSize) {
    const cls = `${baseCls}-${BI.UUID()}`;
    const selector = `.${cls}`;
    jss.use(jssGlobal(), jssNested());
    jss.createStyleSheet({
        '@global': {
            [`${selector}`]: {
                'font-size': `${fontSize}px`,
            },
        },
    }).attach();
    return cls;
}
/**
 * 根据adaptive获取对应width属性
 * @param adaptive 是否自适应
 * @param columnsInRow 非自适应时分为几列
 */
export function getWidthPropByAdaptive(adaptive, columnsInRow = 1) {
    return adaptive ? {} : { width: `${(1 / columnsInRow * 100).toFixed(0)}%` };
}
/**
 * 根据分隔符和是否返回数组返回分隔符
 * @param delimiter 分隔符
 * @param returnArray 是否返回数组
 */
export function getSplitorByOpts(delimiter, returnArray) {
    return returnArray ? undefined : delimiter;
}
/**
 * 设置fontStyle
 * @param fontStyle fontStyle
 */
export function getFontStyle(fontStyle) {
    return {
        'font-style': fontStyle,
        'padding-right': '0.1em',
    };
}
/**
 * 设置文本框样式
 * @param style
 */
export function setEditorStyle({ opacity, background, color, border, ['border-radius']: borderRadius }) {
    jss.use(jssGlobal(), jssNested());
    const cls = `report-contoller-editor-${BI.UUID()}`;
    const selector = `.${cls}`;
    jss.createStyleSheet({
        '@global': {
            [`${selector}`]: {
                opacity,
                background,
            },
            [`${selector} .bi-input`]: {
                color,
            },
            [`${selector} .bi-textarea`]: {
                color,
            },
            [`${selector} .bi-border`]: {
                border,
                'boder-radius': borderRadius,
            },
        },
    }).attach();
    return cls;
}
export function transformControlAttrData(data = []) {
    return BI.isNull(data)
        ? []
        : BI.isArray(data)
            ? data.map(({ text, value }) => {
                return {
                    text: `${text}`,
                    value: `${BI.isNull(value) ? '' : value}`,
                };
            })
            : (() => {
                BI.Msg.toast(BI.i18nText(data.error));
                return [];
            })();
}
/**
 * 根据已有值创建新值，在value最前面加上不可见字符\u200b
 * @param value 当前值
 * @param values 已有值
 */
export function transform2DistinctValueByValues(value, values) {
    let $value = value;
    // eslint-disable-next-line no-constant-condition
    while (true) {
        if (values.includes($value)) {
            $value = `\u200b${$value}`;
            continue;
        }
        break;
    }
    return $value;
}
/**
 * 将已有值转换为唯一值
 * @param items 已有值
 */
export function transform2DistinctValues(items) {
    const values = [];
    return items.map(item => {
        const value = transform2DistinctValueByValues(item.value, values);
        values.push(value);
        return Object.assign(Object.assign({}, item), { value });
    });
}
/**
 * 设置下拉框下拉图标字体大小样式
 * @param baseCls 基础样式class
 * @param fontSize 字体大小
 * @returns 返回新的样式class
 */
export function setComboFontSize(baseCls, dep) {
    const { fontSize } = dep;
    const cls = `${baseCls}-${BI.UUID()}`;
    jss.use(jssGlobal(), jssNested());
    // 下拉按钮
    const selector = `.${cls} .bi-trigger-icon-button.bi-icon-button`;
    // 字体缩放比例
    const scale = fontSize / 12;
    // 下拉树展开收起按钮
    const switcherSize = `${scale * 15}px !important`;
    // 下拉按钮的宽度，跟随字体大小变化，字体12px时宽度24px
    const triggerWidthStyle = `${scale * 24}px !important`;
    jss.createStyleSheet({
        '@global': {
            // 下拉框展开按钮样式
            [`${selector}`]: {
                width: triggerWidthStyle,
                'font-size': `${scale * 16}px`,
            },
            // 不允许编辑下拉树的输入框部分
            [`.${cls}>.bi-trigger.bi-text-trigger >div:first-child`]: {
                'font-size': `${fontSize}px`,
            },
            // 输入框字体 现在下拉框控件存在着两种不一样的dom结构
            [`.${cls}>.bi-combo .bi-trigger .bi-searcher >div:first-child`]: {
                'font-size': `${fontSize}px`,
            },
            [`.${cls}> .bi-trigger .bi-searcher >div:first-child`]: {
                'font-size': `${fontSize}px`,
            },
            [`.${cls} .bi-multi-tree-check-selected-button .x-icon`]: {
                'font-size': `${fontSize}px`,
            },
            [`.${cls} .bi-multi-tree-check-selected-button .bi-icon-button`]: {
                width: switcherSize,
                height: switcherSize,
                'line-height': switcherSize,
            },
            [`.${cls} .bi-multi-tree-check-selected-button .bi-text`]: {
                'font-size': `${fontSize}px`,
                'line-height': switcherSize,
            },
            [`.${cls} .bi-switcher .bi-multi-select-check-selected-button .bi-text`]: {
                'font-size': `${fontSize}px`,
            },
        },
    }).attach();
    return cls;
}
/**
 * 控件匹配实际值/显示值
 * @param widgetName 控件名称
 * @param customData 是否允许自定义值
 * @param op 其余参数
 */
export async function fetchParamViewValue(widgetName, customData, requestor, op) {
    return requestor(Object.assign(Object.assign({}, op), { widgetname: widgetName }))
        .then(re => {
        if (!re) {
            return undefined;
        }
        const text = op.__text__;
        if (BI.isString(re) || !('value' in re)) {
            return customData
                ? text
                    ? {
                        text: `${text}`,
                        value: `${text}`,
                    }
                    : undefined
                : undefined;
        }
        const value = re.value;
        if (BI.isEmptyString(value)) {
            return undefined;
        }
        return {
            text: `${value.text}`,
            value: `${value.val}`,
        };
    });
}
/*
 * 设置字体行高
 * @param baseCls 基础样式class
 * @param lineHeight 行高
 * @returns 返回新的样式class
 */
export function setLineHeight(baseCls, lineHeight) {
    const cls = `${baseCls}-${BI.UUID()}`;
    const selector = `.${cls}`;
    jss.use(jssGlobal(), jssNested());
    jss.createStyleSheet({
        '@global': {
            [`${selector} input`]: {
                'line-height': `${lineHeight}px`,
            },
        },
    }).attach();
    return cls;
}
/**
 * 将默认值转为数组
 * @param value 默认朱
 * @param splitor 分隔符
 */
export function transformStr2ArrBySplitor(value, splitor = ',', startSymbol = '', endSymbol = '') {
    let v = `${value}`;
    if (v.substring(0, 1) === startSymbol) {
        v = v.substring(1);
    }
    if (v.substring(v.length - 1) === endSymbol) {
        v = v.substring(0, v.length - 1);
    }
    return v.split(splitor);
}
//# sourceMappingURL=controller.service.js.map