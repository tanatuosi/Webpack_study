var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterRadioGroupSingleSelectRadioItem_1;
import { shortcut } from '@engine/core';
import { setSingleSelectRadioFontSize } from './radio_group.service';
let ParameterRadioGroupSingleSelectRadioItem = ParameterRadioGroupSingleSelectRadioItem_1 = class ParameterRadioGroupSingleSelectRadioItem extends BI.BasicButton {
    constructor() {
        super(...arguments);
        this.options = this.props;
        this.props = {
            baseCls: 'report-main-parameter-container-controller-radio-group-radio-item',
            $testId: 'bi-single-select-radio-item',
            hgap: 4,
            text: '',
            value: undefined,
            width: undefined,
            adaptive: false,
            scale: 1,
        };
    }
    render() {
        const { scale, adaptive, hgap, text, value } = this.options;
        const defaultHeight = 24 * scale;
        const radioWidth = Math.floor(12 * scale);
        const items = [{
                el: {
                    type: BI.VerticalAdaptLayout.xtype,
                    items: [{
                            type: BI.Radio.xtype,
                            ref: (_ref) => {
                                this.radio = _ref;
                            },
                            width: radioWidth,
                            height: radioWidth,
                            iconWidth: radioWidth - 2,
                            iconHeight: radioWidth - 2,
                        }],
                },
                width: radioWidth,
            }, {
                type: BI.Label.xtype,
                ref: (_ref) => {
                    this.text = _ref;
                },
                cls: 'list-item-text',
                textAlign: 'left',
                whiteSpace: adaptive ? 'normal' : 'nowrap',
                hgap: hgap * scale,
                text,
                value,
                textHeight: adaptive ? undefined : defaultHeight,
            }];
        const cls = setSingleSelectRadioFontSize('report-main-parameter-container-controller-radio-group-radio-item', radioWidth);
        return adaptive ? {
            type: BI.TableAdaptLayout.xtype,
            cls,
            horizontalAlign: BI.HorizontalAlign.Left,
            verticalAlign: BI.VerticalAlign.Middle,
            columnSize: [radioWidth, ''],
            items,
        } : {
            type: BI.HTapeLayout.xtype,
            cls,
            height: defaultHeight,
            items,
        };
    }
    doRedMark(...args) {
        this.text.doRedMark(args);
    }
    unRedMark(...args) {
        this.text.unRedMark(args);
    }
    doClick() {
        super.doClick.apply(this, arguments);
        this.radio.setSelected(this.isSelected());
        if (this.isValid()) {
            this.fireEvent(ParameterRadioGroupSingleSelectRadioItem_1.EVENT_CHANGE, this.isSelected(), this.getValue(), this);
        }
    }
    setSelected(v) {
        super.setSelected.apply(this, arguments);
        this.radio.setSelected(v);
    }
};
ParameterRadioGroupSingleSelectRadioItem.xtype = 'report.main.parameter_container.controller.radio_group.sinlge_select_radio_item';
ParameterRadioGroupSingleSelectRadioItem.EVENT_CHANGE = 'EVENT_CHANGE';
ParameterRadioGroupSingleSelectRadioItem = ParameterRadioGroupSingleSelectRadioItem_1 = __decorate([
    shortcut()
], ParameterRadioGroupSingleSelectRadioItem);
export { ParameterRadioGroupSingleSelectRadioItem };
//# sourceMappingURL=radio_group.single_select_radio_item.js.map