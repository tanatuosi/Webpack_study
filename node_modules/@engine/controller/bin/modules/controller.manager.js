import { CoreWidgetManager } from '@engine/core';
import { dbCommit, WidgetManager } from '@engine/utils';
export class ContollerManager extends WidgetManager {
    /**
     * 根据控件获取依赖并获取他们的值
     * @param widget 控件
     */
    getWidgetDependenceValueByWidget(widget) {
        const dependences = this.getDependenceByWidget(widget);
        const widgets = this.getNeedSubmitWidgets();
        const value = {};
        widgets.forEach(widget => {
            const widgetName = widget.attr('widgetName');
            if (CoreWidgetManager.compareWidgetNameByDependences(widgetName, dependences) && widget.validate()) {
                value[`$${widgetName}`] = widget.getValue();
            }
        });
        return value;
    }
    /**
     * 获取所有校验成功的需要提交value的控件
     */
    getValidatedNeedSubmitWidgets() {
        return this.getNeedSubmitWidgets()
            .filter(controllerWidget => controllerWidget.validate());
    }
    /**
     * 获取需要提交value的控件
     */
    getNeedSubmitWidgets() {
        const controllerWidgets = this.getWidgets();
        return controllerWidgets
            .filter(controllerWidget => controllerWidget.attr('needSubmit'));
    }
    getValidatedNeedSubmitWidgetsSortByDependences() {
        return this.sortWidgetsByDependences(this.getValidatedNeedSubmitWidgets());
    }
    getNeedSubmitWidgetsSortByDependences() {
        return this.sortWidgetsByDependences(this.getNeedSubmitWidgets());
    }
    /**
     * 根据依赖关系获取需要提交的widgets，A依赖B，则B在前
     */
    sortWidgetsByDependences(widgets) {
        const widgetsDependenceInMap = new Map();
        widgets.forEach(widget => {
            const widgetName = widget.attr('widgetName').toUpperCase();
            const dependented = this.getWidgetDependenceByWidgetName(widgetName).map(name => name.toUpperCase());
            dependented.forEach(dependentName => {
                const widgetIn = (widgetsDependenceInMap.get(dependentName) || 0) + 1;
                widgetsDependenceInMap.set(dependentName, widgetIn);
            });
        });
        // 不依赖于其他组件或者依赖较少其他组件的组件在前
        return widgets.sort((widgetA, widgetB) => {
            const widgetNameA = widgetA.attr('widgetName').toUpperCase(), widgetNameB = widgetB.attr('widgetName').toUpperCase();
            const widgetADependenceInMap = widgetsDependenceInMap.get(widgetNameA) || 0;
            const widgetBDependenceInMap = widgetsDependenceInMap.get(widgetNameB) || 0;
            if (widgetADependenceInMap < widgetBDependenceInMap) {
                return -1;
            }
            if (widgetADependenceInMap > widgetBDependenceInMap) {
                return 1;
            }
            return 0;
        });
    }
    /**
     * 获取所有校验成功的提交value的控件值
     */
    getValidatedNeedSubmitValue() {
        return this.getSubmitValueByWidgets(this.getValidatedNeedSubmitWidgets());
    }
    /**
     * 获取所有需要提交value的控件值
     */
    getNeedSubmitValue() {
        return this.getSubmitValueByWidgets(this.getNeedSubmitWidgets());
    }
    /**
     * 根据控件获取提交值
     * @param widgets 参数控件
     */
    getSubmitValueByWidgets(widgets) {
        return widgets
            .reduce((prevValue, currentWidget) => {
            const submitValue = currentWidget.getSubmitValue();
            Object.assign(prevValue, submitValue);
            return prevValue;
        }, {});
    }
    /**
     * 获取组件联动需要的数据
     */
    getLinkageData(widgetName) {
        const value = this.getValidatedNeedSubmitValue();
        const widgetNames = this.getWidgetDependenceByWidgetName(widgetName);
        for (const wName in value) {
            widgetNames.includes(wName) && (value[wName] = '');
        }
        return {
            value,
            widgetNames,
        };
    }
    /**
     * 校验所有控件
     */
    validateWidgets() {
        const errorWidgets = this.getNeedSubmitWidgets().filter(controllerWidget => {
            if (controllerWidget.validateAndToast()) {
                return false;
            }
            return true;
        });
        return BI.isEmptyArray(errorWidgets);
    }
    /**
     * 公开接口，获取需要提交组件的值
     */
    collectionValue() {
        return this.getNeedSubmitValue();
    }
    /**
     * 数据入库
     */
    dbCommit(opt) {
        const value = this.getValidatedNeedSubmitValue();
        dbCommit(opt, value)
            .then(response => response.callback && response.callback.call({
            options: {
                form: this,
            },
        }, response));
    }
}
//# sourceMappingURL=controller.manager.js.map