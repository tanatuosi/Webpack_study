var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterLabel_1;
import { WIDTH, HEIGHT } from '../controller.constants';
import { setLabelStyle, setParamLabelStyles } from './label.service';
import { shortcut, click } from '@engine/core';
import './label.less';
import { AbstractParameterControllerWidget } from '../controller.abstract';
let ParameterLabel = ParameterLabel_1 = class ParameterLabel extends AbstractParameterControllerWidget {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: ParameterLabel_1.BASE_CLS,
            $testId: ParameterLabel_1.BASE_CLS,
            color: 'rgb(0,0,0)',
            fontSize: 12,
            fontfamily: '',
            decoration: 'none',
            textColor: '0,0,0,1',
            textalign: 'left',
            verticalcenter: false,
            value: '',
            disabled: false,
            invisible: false,
            needSubmit: false,
            width: WIDTH,
            height: HEIGHT,
            wrap: false,
            fontweight: undefined,
            fontstyle: undefined,
            allowBg: true,
        };
    }
    render() {
        const { width, height, value, wrap, verticalcenter, textalign, fontfamily, fontSize, decoration, color, fontweight, fontstyle } = this.options;
        const whiteSpace = wrap ? 'normal' : 'nowrap';
        const labelCls = setParamLabelStyles(ParameterLabel_1.BASE_CLS, {
            fontFamily: fontfamily,
            fontSize,
            decoration,
            color,
            fontWeight: fontweight,
            fontStyle: fontstyle,
        });
        const baseProps = {
            ref: (_ref) => {
                this.label = _ref;
                this.editComp = _ref.element[0];
            },
            cls: `${labelCls}`,
            whiteSpace,
            value: `${value}`,
            textWidth: width,
            textAlign: textalign,
        };
        return verticalcenter ? {
            type: BI.CenterAdaptLayout.xtype,
            width,
            height,
            scrollx: true,
            items: [Object.assign({ type: BI.Text.xtype, width }, baseProps)],
        } : {
            type: BI.VerticalLayout.xtype,
            width,
            height,
            scrolly: false,
            scrollable: false,
            items: [Object.assign({ type: BI.Text.xtype }, baseProps)],
        };
    }
    async setControllerValue(v, fire) {
        this.label.setValue(v);
        !this.silence && fire && this.fireEvent('change');
    }
    preGetValidation() {
        return { result: true };
    }
    postGetValidation() {
        return { result: true };
    }
    postValidateAndToast() {
        return true;
    }
    getValue() {
        return this.label.getValue();
    }
    setInteractValue(v) {
        this.setControllerValue(v);
    }
    reset() { }
    resize(width, height) {
        const restoreValue = this.label.getValue();
        super.resize(width, height);
        this.label.setValue(restoreValue);
    }
    setFontSize(fontSize) {
        this.options.fontSize = fontSize;
    }
    setStyle(styles) {
        this.label.element.addClass(setLabelStyle(styles));
    }
    getText() {
        return this.label.getValue();
    }
};
ParameterLabel.xtype = 'report.main.parameter_container.controller.label';
ParameterLabel.BASE_CLS = 'report-main-parameter-container-controller-label';
__decorate([
    click()
], ParameterLabel.prototype, "render", null);
ParameterLabel = ParameterLabel_1 = __decorate([
    shortcut()
], ParameterLabel);
export { ParameterLabel };
//# sourceMappingURL=label.js.map