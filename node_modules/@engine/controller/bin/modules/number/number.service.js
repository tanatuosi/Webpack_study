export var NUM_ERROR;
(function (NUM_ERROR) {
    NUM_ERROR["NOT_ALLOW_BLANK"] = "NOT_ALLOW_BLANK";
    NUM_ERROR["INVALID_NUMBER"] = "INVALID_NUMBER";
    NUM_ERROR["NOT_ALLOW_NEGATIVE"] = "NOT_ALLOW_NEGATIVE";
    NUM_ERROR["NOT_ALLOW_DECIMALS"] = "NOT_ALLOW_DECIMALS";
    NUM_ERROR["TOO_MANY_DECIMALS"] = "TOO_MANY_DECIMALS";
    NUM_ERROR["TOO_MANY_INTEGER"] = "TOO_MANY_INTEGER";
    NUM_ERROR["TOO_LARGE"] = "TOO_LARGE";
    NUM_ERROR["TOO_SMALL"] = "TOO_SMALL";
})(NUM_ERROR || (NUM_ERROR = {}));
export function checkValidation(v, { allowNegative, allowDecimals, allowBlank, maxDecLength = 16, maxIntLength = 32, maxValue, minValue }) {
    if (v === '') {
        return allowBlank || NUM_ERROR.NOT_ALLOW_BLANK;
    }
    if (!BI.isNumeric(v)) {
        return NUM_ERROR.INVALID_NUMBER;
    }
    const num = parseFloat(v);
    if (!allowNegative && num < 0) {
        return NUM_ERROR.NOT_ALLOW_NEGATIVE;
    }
    if (!allowDecimals && Math.floor(num) !== num) {
        return NUM_ERROR.NOT_ALLOW_DECIMALS;
    }
    const decLength = BI.size(`${num}`.split('.')[1]);
    if (decLength > maxDecLength) {
        return NUM_ERROR.TOO_MANY_DECIMALS;
    }
    const intLength = BI.size(`${num}`.split('.')[0]);
    if (intLength > maxIntLength) {
        return NUM_ERROR.TOO_MANY_INTEGER;
    }
    if (BI.isNotNull(maxValue) && num > maxValue) {
        return NUM_ERROR.TOO_LARGE;
    }
    if (BI.isNotNull(minValue) && num < minValue) {
        return NUM_ERROR.TOO_SMALL;
    }
    return true;
}
export function transformValidation2ErrorMsg(validation, opt) {
    const { errorMsg, regErrorMsg, maxValue, minValue } = opt;
    switch (validation) {
        case NUM_ERROR.NOT_ALLOW_BLANK:
            return errorMsg;
        case NUM_ERROR.INVALID_NUMBER:
            return regErrorMsg || BI.i18nText('Fine-Report_Preview_Input_Must_Be_Number');
        case NUM_ERROR.NOT_ALLOW_NEGATIVE:
            return regErrorMsg || BI.i18nText('Fine-Report_Preview_NOT_ALLOW_NEGATIVE');
        case NUM_ERROR.NOT_ALLOW_DECIMALS:
            return regErrorMsg || BI.i18nText('Fine-Report_Preview_NOT_ALLOW_DECIMALS');
        case NUM_ERROR.TOO_MANY_DECIMALS:
            return regErrorMsg || BI.i18nText('Fine-Report_Preview_TOO_MANY_DECIMALS');
        case NUM_ERROR.TOO_LARGE:
            return regErrorMsg || BI.i18nText('Fine-Report_Preview_TOO_LARGE', maxValue);
        case NUM_ERROR.TOO_SMALL:
            return regErrorMsg || BI.i18nText('Fine-Report_Preview_TOO_SMALL', minValue);
        default:
            return regErrorMsg || BI.i18nText('Fine-Report_Preview_Input_Error');
    }
}
/**
 * 根据条件格式化输入值
 * @param v 输入值
 * @param allowNegative 允许负数
 * @param allowDecimals 允许小数
 */
export function formatNumber(v, allowNegative, allowDecimals) {
    let value = v.replace(/[^-0-9\\.]/g, '');
    value = allowNegative
        ? value
            .replace(/^-/g, 'll')
            .replace(/-/g, '')
            .replace(/^ll/, '-')
        : value.replace(/-/g, '');
    value = allowDecimals
        ? value
            .replace(/^[.]/g, '')
            .replace(/[.]/, 'dd')
            .replace(/[.]/g, '')
            .replace(/dd/, '.')
            .replace(/[.]$/g, '')
        : value.replace(/[.]/g, '');
    return value;
}
//# sourceMappingURL=number.service.js.map