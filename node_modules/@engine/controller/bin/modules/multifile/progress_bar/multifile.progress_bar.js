var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { shortcut } from '@engine/core';
import './multifile.progress_bar.less';
let ParameterMultifileProgressBar = class ParameterMultifileProgressBar extends BI.Widget {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'report-main-parameter-container-controller-multifile-progress-bar',
            width: 280,
            height: 16,
            value: 0,
        };
    }
    render() {
        const { value } = this.options;
        return {
            type: BI.AbsoluteLayout.xtype,
            ref: (ref) => {
                this.layer = ref;
            },
            items: [
                {
                    el: {
                        type: BI.Layout.xtype,
                        cls: 'progress-bar-current',
                    },
                    top: 0,
                    left: 0,
                    width: this.transformProgress2Percentage(value),
                    bottom: 0,
                },
                {
                    el: {
                        type: BI.Label.xtype,
                        ref: (ref) => {
                            this.text = ref;
                        },
                        text: this.transformProgress2Percentage(value),
                    },
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                },
            ],
        };
    }
    setValue(progress) {
        this.options.value = progress;
        const percentage = this.transformProgress2Percentage(progress);
        this.text.setValue(percentage);
        this.layer.attr('items')[0].width = percentage;
        this.layer.resize();
    }
    transformProgress2Percentage(progress) {
        return `${(progress * 100).toFixed(0)}%`;
    }
};
ParameterMultifileProgressBar.xtype = 'report.main.parameter_container.controller.multifile.progress_bar';
ParameterMultifileProgressBar = __decorate([
    shortcut()
], ParameterMultifileProgressBar);
export { ParameterMultifileProgressBar };
//# sourceMappingURL=multifile.progress_bar.js.map