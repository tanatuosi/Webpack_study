var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { shortcut } from '@engine/core';
import { ParameterMultifileProgressBar } from '../progress_bar/multifile.progress_bar';
import './multifile.progress_pane.less';
let ParameterMultifileProgressPane = class ParameterMultifileProgressPane extends BI.Widget {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'report-main-parameter-container-controller-multifile-progress-pane',
            queueGetter: () => [],
            uploadedGetter: () => [],
            value: 0,
        };
    }
    render() {
        const { queueGetter, value } = this.options;
        const { text: statusText, value: totalValue } = this.getTotalStatus();
        return {
            type: BI.VerticalLayout.xtype,
            tgap: 2,
            hgap: 2,
            bgap: 5,
            items: [
                {
                    type: BI.Label.xtype,
                    cls: 'pane-title',
                    textAlign: 'left',
                    text: BI.i18nText('Fine-Report_Upload_Progress'),
                    height: 24,
                },
                {
                    type: BI.Label.xtype,
                    ref: (ref) => {
                        this.statusText = ref;
                    },
                    textAlign: 'left',
                    text: statusText,
                },
                {
                    type: BI.Label.xtype,
                    textAlign: 'left',
                    text: BI.i18nText('Fine-Report_Overall_Uploading_Progress'),
                },
                {
                    type: ParameterMultifileProgressBar.xtype,
                    ref: (ref) => {
                        this.totalProgressBar = ref;
                    },
                    value,
                },
                {
                    type: BI.Label.xtype,
                    textAlign: 'left',
                    text: BI.i18nText('Fine-Report_Current_Uploading_Progress'),
                },
                {
                    type: ParameterMultifileProgressBar.xtype,
                    ref: (ref) => {
                        this.currentProgressBar = ref;
                    },
                    value: totalValue,
                },
                {
                    type: BI.Label.xtype,
                    textAlign: 'left',
                    text: queueGetter().join('\n'),
                },
            ],
        };
    }
    setValue(progress) {
        this.options.value = progress;
        const { text: statusText, value: totalValue } = this.getTotalStatus();
        this.statusText.setValue(statusText);
        this.totalProgressBar.setValue(totalValue);
        this.currentProgressBar.setValue(progress);
    }
    getTotalStatus() {
        const { queueGetter, uploadedGetter, value } = this.options;
        const total = BI.size(queueGetter());
        const loaded = BI.size(uploadedGetter());
        const progress = value / total + loaded / total;
        return {
            text: BI.i18nText(progress !== 1 ? 'Fine-Report_Parepare_For_Uploading' : 'Fine-Report_Upload_Complete'),
            value: progress,
        };
    }
};
ParameterMultifileProgressPane.xtype = 'report.main.parameter_container.controller.multifile.progress_pane';
ParameterMultifileProgressPane = __decorate([
    shortcut()
], ParameterMultifileProgressPane);
export { ParameterMultifileProgressPane };
//# sourceMappingURL=multifile.progress_pane.js.map