var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { AbstractParameterControllerWidget } from '../controller.abstract';
import { shortcut } from '@engine/core';
import './multifile.less';
import { setFontSize } from '../controller.service';
import { deleteFile, downloadFile } from '../controller.crud';
import { completeUrl } from '@engine/crud';
import { ParameterMultifileProgressPane } from './progress_pane/multifile.progress_pane';
const DEFAULT_SIZE = 32, DEFAULT_LABEL_SIZE = 20, DEFAULT_FONT_SIZE = 12;
let ParameterMultifile = class ParameterMultifile extends AbstractParameterControllerWidget {
    constructor() {
        super(...arguments);
        this.uploadFiles = [];
        this.canUpload = true;
        this.props = {
            baseCls: 'report-main-parameter-container-controller-multifile',
            disabled: false,
            invisible: false,
            needSubmit: false,
            fontSize: 12,
            value: '0',
            width: 80,
            height: 50,
            accept: '',
            maxlength: Infinity,
            maxSize: -1,
            url: 'attachment/upload',
            allowBg: true,
        };
    }
    render() {
        const { accept, width, height, maxSize, value, maxlength, url } = this.options;
        const fileAccept = accept ? accept.split('|')
            .map(item => `.${item}`)
            .join(',') : '';
        const position = this.calculatePosotion(width, height);
        return {
            type: BI.AbsoluteLayout.xtype,
            ref: (_ref) => {
                this.wrapper = _ref;
            },
            items: [{
                    el: {
                        type: BI.Label.xtype,
                        cls: `count-label ${setFontSize('count-label', position.label.fontSize)}`,
                        ref: (_ref) => {
                            this.label = _ref;
                        },
                        text: value,
                        width: position.label.width,
                        height: position.label.height,
                    },
                    left: position.label.left,
                    top: position.label.top,
                }, {
                    el: {
                        type: BI.BubbleCombo.xtype,
                        ref: (ref) => {
                            this.bubbleCombo = ref;
                        },
                        trigger: 'hover',
                        offsetStyle: 'right',
                        isNeedAdjustHeight: true,
                        isDefaultInit: true,
                        el: {
                            type: BI.IconButton.xtype,
                            ref: (_ref) => {
                                this.button = _ref;
                            },
                            cls: 'upload-trigger-background',
                            width: position.button.width,
                            height: position.button.height,
                            title: () => this.getMultifileEditorValue()
                                .map(({ filename }) => filename)
                                .join('\n'),
                            handler: () => {
                                if (!this.canUpload) {
                                    return;
                                }
                                this.multifileEditor.select();
                            },
                        },
                        popup: {
                            el: {
                                type: BI.ButtonGroup.xtype,
                                ref: (_ref) => {
                                    this.uploadFileGroup = _ref;
                                },
                                layouts: [{
                                        type: BI.VerticalLayout.xtype,
                                        minHeight: 0,
                                    }],
                                items: [],
                            },
                            minWidth: 200,
                            minHeight: 0,
                            maxHeight: 200,
                        },
                    },
                    left: position.button.left,
                    top: position.button.top,
                }, {
                    el: {
                        type: BI.Combo.xtype,
                        ref: (ref) => {
                            this.progressCombo = ref;
                        },
                        hideWhenBlur: false,
                        trigger: '',
                        destroyWhenHide: true,
                        belowMouse: true,
                        offsetStyle: 'left',
                        isNeedAdjustHeight: true,
                        el: {
                            type: BI.Layout.xtype,
                        },
                        popup: {
                            el: {
                                type: ParameterMultifileProgressPane.xtype,
                                queueGetter: () => this.multifileEditor.getQueue()
                                    .map(({ fileName }) => fileName),
                                uploadedGetter: () => this.getMultifileEditorValue()
                                    .map(({ filename }) => filename),
                            },
                            minWidth: 350,
                            minHeight: 200,
                        },
                    },
                    left: position.button.left,
                    top: position.button.top,
                }, {
                    el: {
                        type: BI.MultifileEditor.xtype,
                        ref: (_ref) => {
                            this.multifileEditor = _ref;
                        },
                        url: completeUrl(url),
                        accept: fileAccept,
                        width,
                        height,
                        // REPORT-70632 options的 maxSize 单位固定为KB，fineUi的 maxSize 单位为B，需要转换一下
                        maxSize: maxSize * 1024,
                        multiple: maxlength !== 1,
                        listeners: [{
                                eventName: BI.MultifileEditor.EVENT_CHANGE,
                                action: () => {
                                    this.multifileEditor.upload();
                                },
                            }, {
                                eventName: BI.MultifileEditor.EVENT_UPLOADSTART,
                                action: () => {
                                    this.progressCombo.showView();
                                    // BI-20417 windows下打开资源管理器可能title一直不消失
                                    BI.Tooltips.remove(this.multifileEditor.getName());
                                    this.canUpload = false;
                                },
                            }, {
                                eventName: BI.MultifileEditor.EVENT_UPLOADED,
                                action: async () => {
                                    this.resetState();
                                    const extraFile = this.uploadFiles.length - this.options.maxlength;
                                    if (this.options.maxlength !== Infinity && extraFile > 0) {
                                        for (let i = 0; i < extraFile; i++) {
                                            await this.deleteFile(this.uploadFiles[i].attach_id);
                                        }
                                    }
                                    !this.silence && this.fireEvent('callback');
                                    this.fireEvent('EVENT_CHANGE');
                                },
                            }, {
                                eventName: BI.MultifileEditor.EVENT_ERROR,
                                action: (err) => {
                                    this.resetState();
                                    !this.silence && this.fireEvent('callback');
                                    this.fireEvent('EVENT_CHANGE');
                                    if (BI.isEmptyString(accept)) {
                                        return;
                                    }
                                    const { name } = err.file;
                                    if (err.errorType === 0) {
                                        const fileType = name.split('.').pop();
                                        BI.Msg.toast(BI.i18nText('Fine-Report_File_Type_Error', fileType, accept), { level: 'error' });
                                    }
                                    if (err.errorType === 1) {
                                        BI.Msg.toast(BI.i18nText('Fine-Report_File_TOO_LARGE', name, `${maxSize}KB`), { level: 'error' });
                                    }
                                },
                            }, {
                                eventName: BI.MultifileEditor.EVENT_PROGRESS,
                                action: (progress) => {
                                    this.progressCombo.isViewVisible() && this.progressCombo.setValue(progress.loaded / progress.total);
                                },
                            }],
                    },
                    top: 0,
                    left: 0,
                }],
        };
    }
    resetState() {
        this.label.setText(`${this.getMultifileEditorValue().length}`);
        this.uploadFiles = [
            ...this.uploadFiles,
            ...this.getMultifileEditorValue(),
        ];
        this.hideProgressComboView();
        this.renderUploadFiles();
        this.multifileEditor.reset();
        this.canUpload = true;
    }
    beforeMount() {
        this.multifileEditor.element.on('dragover', (e) => {
            e.preventDefault();
        });
        this.multifileEditor.element.on('drop', (e) => {
            var _a;
            e.preventDefault();
            const files = (_a = e.originalEvent.dataTransfer) === null || _a === void 0 ? void 0 : _a.files;
            if (!files)
                return;
            this.multifileEditor.sendFiles(files);
        });
    }
    hideProgressComboView() {
        setTimeout(() => {
            this.progressCombo.hideView();
            this.bubbleCombo.showView();
        }, 1000);
    }
    renderUploadFiles() {
        var _a;
        const files = this.uploadFiles;
        this.label.setText(`${files.length}`);
        (_a = this.uploadFileGroup) === null || _a === void 0 ? void 0 : _a.populate(files.map(file => {
            return {
                type: BI.LeftRightVerticalAdaptLayout.xtype,
                cls: 'bi-list-item-active cursor-pointer',
                height: 25,
                items: {
                    left: [{
                            type: BI.TextButton.xtype,
                            width: 150,
                            hgap: 3,
                            textAlign: 'left',
                            value: file.filename,
                            title: file.filename,
                            handler: () => {
                                this.downloadFile(file.attach_id);
                            },
                        }],
                    right: [{
                            type: BI.IconButton.xtype,
                            width: 25,
                            cls: 'delete-font',
                            handler: async () => {
                                await this.deleteFile(file.attach_id);
                                this.fireEvent('EVENT_CHANGE');
                            },
                        }],
                },
            };
        }));
    }
    async deleteFile(fileId) {
        await deleteFile(fileId);
        this.uploadFiles = this.uploadFiles.filter(item => item.attach_id !== fileId);
        this.renderUploadFiles();
    }
    downloadFile(fileId) {
        downloadFile(fileId);
    }
    getUploadFiles() {
        return this.uploadFiles;
    }
    preGetValidation() {
        return {
            result: true,
        };
    }
    postGetValidation() {
        return { result: true };
    }
    postValidateAndToast() {
        return true;
    }
    reset() { }
    setInteractValue() { }
    async setControllerValue() { }
    getValue() {
        return this.uploadFiles;
    }
    getMultifileEditorValue() {
        return this.multifileEditor.getValue()
            .filter(({ attach_id }) => attach_id);
    }
    calculatePosotion(width, height) {
        const $width = Math.min(width, DEFAULT_SIZE);
        const $height = Math.min(height, DEFAULT_SIZE);
        const labelSize = DEFAULT_LABEL_SIZE / DEFAULT_SIZE * $width;
        return {
            label: {
                width: labelSize,
                height: labelSize,
                fontSize: DEFAULT_FONT_SIZE / DEFAULT_SIZE * $width,
                left: (width + $width) / 2,
                top: (height - $height) / 2,
            },
            button: {
                width: $width,
                height: $height,
                left: (width - $width) / 2,
                top: (height - $height) / 2,
            },
        };
    }
    resize(width, height) {
        this.options.width = width;
        this.options.height = height;
        this.element.css('width', width);
        this.element.css('height', height);
        const position = this.calculatePosotion(width, height);
        const items = this.wrapper.attr('items');
        items[0].left = position.label.left;
        items[0].top = position.label.top;
        items[1].left = position.button.left;
        items[1].top = position.button.top;
        this.wrapper.resize();
        this.label.element.css('width', position.label.width);
        this.label.element.css('height', position.label.height);
        this.label.element.css('font-size', position.label.fontSize);
        this.button.element.css('width', position.button.width);
        this.button.element.css('height', position.button.height);
        this.multifileEditor.element.css('width', width);
        this.multifileEditor.element.css('height', height);
    }
    getAdapter() {
        return this.multifileEditor;
    }
    setStyle(_styles) { }
};
ParameterMultifile.xtype = 'report.main.parameter_container.controller.multifile';
ParameterMultifile = __decorate([
    shortcut()
], ParameterMultifile);
export { ParameterMultifile };
//# sourceMappingURL=multifile.js.map