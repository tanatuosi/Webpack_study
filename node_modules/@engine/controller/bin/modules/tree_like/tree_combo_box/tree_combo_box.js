var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterTreeComboBox_1;
import { WIDTH, HEIGHT } from '../../controller.constants';
import { setComboFontSize } from '../../controller.service';
import { getParamTreeComboBoxLayout, getSingleTreeTextByValue, transformTreeDefaultValue } from '../tree_like.service';
import { shortcut } from '@engine/core';
import { ParameterTreeLike } from '../tree_like';
import { fetchNewParamTreeControlAttr, fetchNewParamTreeStructure, fetchOldParamTreeControlAttr } from '../../controller.crud';
import { setTreeComboBoxStyle } from './tree_combo_box.service';
let ParameterTreeComboBox = ParameterTreeComboBox_1 = class ParameterTreeComboBox extends ParameterTreeLike {
    constructor() {
        super(...arguments);
        this.nodes = [];
        this.textValueMap = {};
        /**
         * 用来判断数据字典是否能够完全支撑的起默认值
         */
        this.isTreeShowValueComplete = true;
        this.props = {
            baseCls: `${ParameterTreeComboBox_1.BASE_CLS}`,
            $testId: 'report-main-parameter-container-controller-tree-combo-box',
            width: WIDTH,
            height: HEIGHT,
            value: '',
            delimiter: ';',
            disabled: false,
            invisible: false,
            needSubmit: true,
            fontSize: 12,
            async: false,
            mutiSelection: false,
            returnFullPath: false,
            selectLeafOnly: false,
            widgetName: '',
            watermark: '',
            allowBlank: true,
            customData: false,
            errorMsg: BI.i18nText('Fine-Report_Preview_Can_Not_Null'),
            directEdit: false,
            noRepeat: false,
            autoMode: false,
            mode: 'remote',
            searchTime: 200,
            isNeedAdjustWidth: true,
            controlAttr: {
                data: [{
                        ChildNodes: [],
                        isexpand: false,
                        hasChildren: false,
                        id: 1,
                        text: '',
                        showcheck: false,
                        complete: true,
                        value: '',
                        checkstate: 0,
                    }],
                value: '',
            },
            isLayerBuild: false,
            getDependenceByWidget: () => [],
            getWidgetDependenceValueByWidget: () => {
                return {};
            },
            add2WaitingQueue: () => '',
            removeFromWaitingQueue: () => { },
            extraOptsGetter: () => {
                return {};
            },
            oldTreeControlAttrFetcher: fetchOldParamTreeControlAttr,
            newTreeControlAttrFetcher: fetchNewParamTreeControlAttr,
            newTreeStructureFetcher: fetchNewParamTreeStructure,
            allowBg: true,
            needCheckCustomData: true,
            returnArray: true,
            startSymbol: '',
            endSymbol: '',
        };
    }
    isTreeWidget() {
        return false;
    }
    render() {
        const { width, height, fontSize, mutiSelection: multiSelection, selectLeafOnly, watermark, controlAttr, value, customData, directEdit, isNeedAdjustWidth, removeFromWaitingQueue, add2WaitingQueue, allowBg } = this.options;
        this.updateCacheByControlAttrData(controlAttr.data);
        if (BI.isNull(this.tree)) {
            this.transformInteractValue2Node(value);
        }
        return {
            type: BI.VerticalLayout.xtype,
            cls: allowBg ? 'bi-card' : '',
            items: [Object.assign(Object.assign({ type: getParamTreeComboBoxLayout(multiSelection, selectLeafOnly, this.isAsyncTree(), customData) }, this.options.watermark ? {} : { text: '' }), { defaultText: this.options.watermark, watermark, allowSearchValue: directEdit, cls: `${setComboFontSize(ParameterTreeComboBox_1.BASE_CLS, {
                        fontSize, width, height,
                    })}`, isNeedAdjustWidth,
                    width,
                    height, allowEdit: directEdit, allowInsertValue: customData, ref: (_ref) => {
                        this.tree = _ref;
                    }, valueFormatter: (v) => {
                        if (v === this.singleTreeNotSelectedValue) {
                            return '';
                        }
                        const node = this.nodes.find(node => node.value === v);
                        // 如果存在显示值不存在的node，那么就说明nodes列表中数据不全，需要在mounted中尝试补全
                        node || (this.isTreeShowValueComplete = false);
                        return (node === null || node === void 0 ? void 0 : node.text) || getSingleTreeTextByValue(v, this.nodes) || '';
                    }, warningTitle: '', belowMouse: true, itemsCreator: this.isAsyncTree() ? async (op, callback) => {
                        !this.silence && this.fireEvent('nodeadd');
                        const data = multiSelection ? await this.multiAsyncTreeItemCreator(op) : await this.singleAsyncTreeItemCreator(op);
                        this.transformSyncSingleTreeItem(data.items);
                        callback(data);
                    } : undefined, value: this.defaultTreeValue, listeners: [{
                            eventName: 'EVENT_CLICK_ITEM',
                            action: (value) => {
                                this.hideBubble();
                                /**
                                 * 修正 https://work.fineres.com/browse/REPORT-80452 引入
                                 * 为了应对触发afteredit事件后立马调用getValue获取控件值的场景
                                 * 在之前这里触发的afteredit事件取getValue是取不到正确结果的
                                 */
                                const id = add2WaitingQueue();
                                this.rebuildMultiTree(value, false)
                                    .then(() => {
                                    removeFromWaitingQueue(id);
                                    !this.silence && this.fireEvent('click');
                                    !this.silence && this.fireEvent('afteredit');
                                });
                            },
                        }, {
                            eventName: 'EVENT_CONFIRM',
                            action: () => {
                                const id = add2WaitingQueue();
                                this.rebuildMultiTree(undefined, true)
                                    .then(() => {
                                    removeFromWaitingQueue(id);
                                    !this.silence && this.fireEvent('stopedit');
                                });
                            },
                        }, {
                            eventName: 'EVENT_CHANGE',
                            action: () => {
                                const id = add2WaitingQueue();
                                // 单选树处理方法
                                this.rebuildMultiTree(undefined, true)
                                    .then(() => {
                                    if (!multiSelection) {
                                        !this.silence && this.fireEvent('click');
                                        !this.silence && this.fireEvent('afteredit');
                                    }
                                    removeFromWaitingQueue(id);
                                    !this.silence && this.fireEvent('stopedit');
                                });
                            },
                        }, {
                            eventName: 'EVENT_FOCUS',
                            action: () => {
                                !this.silence && this.fireEvent('beforeedit');
                            },
                        }, {
                            eventName: 'EVENT_BEFORE_POPUPVIEW',
                            action: () => {
                                this.hideBubble();
                            },
                        }, {
                            eventName: 'EVENT_SEARCHING',
                            action: () => {
                                !this.silence && this.fireEvent('afteredit');
                            },
                        }] })],
        };
    }
    async mounted() {
        super.mounted();
        await this.rebuildMultiTree(this.defaultTreeValue, false);
        /**
         * 修正 https://work.fineres.com/browse/REPORT-78566 引入
         * 为了应对给异步树设置默认值时，nodes数据中还没有该默认值的问题
         *   换一种方法实现，如果定义了返回值类型为Promise的beforeRender会把后续的render打入微任务队列中
         *   在不需要点击查询就直接显示报表内容的场景取控件值会有问题
         * TODO: 因为render的时候传了value，此处如果重新设置值会出现值闪一下才能变成正确的显示值
         */
        if (!this.isTreeShowValueComplete && this.isAsyncTree()) {
            /** 给resize铺路 */
            await this.updateCacheByValue(this.defaultTreeValue);
            this.setTreeValue(this.defaultTreeValue);
            this.isTreeShowValueComplete = true;
        }
        await this.loadSyncTree();
    }
    emitManualStopEditEvent() {
        this.fireEvent('stopedit');
    }
    /**
     * 更新默认值
     * @param v 值
     */
    updateDefaultValue(v) {
        this.defaultTreeValue = transformTreeDefaultValue(v, this.options.mutiSelection, this.options.selectLeafOnly, {
            textValueMap: this.textValueMap,
            nodes: this.nodes,
        });
        this.value = this.defaultTreeValue;
    }
    /**
     * 对单选树,将默认值添加到节点中
     * @param defaultTreeValue
     */
    addDefaultValue2SingleTreeNode(defaultTreeValue) {
        !this.options.mutiSelection && defaultTreeValue && this.transformSingleTreeValue2Node(defaultTreeValue);
    }
    /**
     * 将传入组件的值(设置的默认值或者是联动设置的值)作为默认值并且更新，同时新增节点
     * @param v
     */
    transformInteractValue2Node(v) {
        this.updateDefaultValue(v);
        /**
         * 这里是对应一个功能
         * 如果是单选树，且该值不存在于树节点时，那么需要给被联动的树新增一个节点
         */
        this.addDefaultValue2SingleTreeNode(this.defaultTreeValue);
    }
    async setInteractValue(v) {
        /**
         * 在设置联动值之前，先更新一下defaultValue，确保树控件更新前状态都是新的
         */
        this.updateDefaultValue(v.value);
        await super.setInteractValue(v);
        /**
         * 如果是单选树，异步情况下当控件值都已经加载完毕之后在决定是否追加node
         */
        this.addDefaultValue2SingleTreeNode(this.defaultTreeValue);
        this.reloadTree();
    }
    reloadControlAttr() {
        this.reset();
        this.reloadTree();
    }
    reloadTree() {
        this.loadSyncTree();
        this.loadAsyncSingleTree();
    }
    async setControllerValue(v, data = []) {
        await super.setControllerValue(v, data);
        this.reloadTree();
    }
    /**
     * REPORT-35261 单选异步树联动后需要刷新树
     */
    loadAsyncSingleTree() {
        if (this.isAsyncTree() && !this.options.mutiSelection) {
            this.tree.populate();
        }
    }
    async loadSyncTree() {
        !this.isAsyncTree() && await this.syncTreeItemCreator()
            .then(data => {
            !this.silence && this.fireEvent('nodeadd');
            this.transformSyncSingleTreeItem(data.items);
            this.tree.populate(data.items);
            this.tree.setValue(this.value || this.defaultTreeValue);
        });
    }
    getAdapter() {
        return this.tree.getSearcher();
    }
    setStyle(styles) {
        this.tree.element.addClass(setTreeComboBoxStyle(styles));
    }
    setPopupStyle() { }
    getText() {
        var _a, _b;
        return (_b = (_a = this.getAdapter()) === null || _a === void 0 ? void 0 : _a.editor) === null || _b === void 0 ? void 0 : _b.getText();
    }
    setWaterMark(v) {
        this.options.watermark = v;
        this.tree.setWaterMark(v);
        this.tree.setValue(this.tree.getValue());
    }
    focus() {
        this.tree.focus();
    }
    blur() {
        this.tree.blur();
    }
};
ParameterTreeComboBox.xtype = 'report.main.parameter_container.controller.editor.tree_combo_box';
ParameterTreeComboBox.BASE_CLS = 'report-main-parameter-container-controller-tree-combo-box';
ParameterTreeComboBox = ParameterTreeComboBox_1 = __decorate([
    shortcut()
], ParameterTreeComboBox);
export { ParameterTreeComboBox };
//# sourceMappingURL=tree_combo_box.js.map