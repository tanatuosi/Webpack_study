{"version":3,"file":"tree_like.service.js","sourceRoot":"","sources":["../../../src/modules/tree_like/tree_like.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ParameterControllerPropsWithTree, ParameterControllerTreeControlAttrData } from '../controller';\nimport { ParamMultiTreeValue, ParamMultiTreeItem, ParamSingleTreeNode, TransformTreeDefaultValueOpts } from './tree_like';\nimport { transform2DistinctValueByValues } from '../controller.service';\nimport { SyncTree } from './tree/sync_tree/sync_tree';\nimport { ListSyncTree } from './tree/sync_tree/list_sync_tree';\nimport { CancelToken } from 'axios';\n\nexport const ROOT = '__root__';\n\nexport const TREE_VIEW_TYPE = 'PULL_DATA';\n\nconst SPLITOR = '__splitor__';\n\nconst LAYER_SPLITOR = /;|；/g;\n\nconst LEAF_SPLITOR = /,|，/g;\n\n/**\n * 多选树控件的itemCreator\n * @param op ootions\n */\nexport async function multiAsyncTreeItemsCreator(requestor: ParameterControllerPropsWithTree['newTreeControlAttrFetcher'], op: {\n\n    /**\n     * expander节点id\n     */\n    id?: string;\n\n    /**\n     * 父节点数据\n     */\n    parentValues?: string[];\n    selectedValues: string[];\n    notSelectedValue?: string;\n\n    /**\n     * 分页次数\n     */\n    times: number;\n\n    /**\n     * 查询选项\n     */\n    type?: number;\n\n    /**\n     * 关键词\n     */\n    keyword: string;\n    checkState: {\n        checked: boolean,\n        half: boolean,\n    };\n    floors: number;\n    widgetName: string;\n    dependence: {\n        [key: string]: any;\n    };\n    reload: boolean;\n    cancelToken?: CancelToken;\n}): Promise<{\n        items: ParamMultiTreeItem[];\n        resultType: string;\n        hasNext: boolean;\n    } | {\n        items: ParamMultiTreeValue;\n        resultType: string;\n        hasNext: boolean;\n    }> {\n    const { reload, widgetName, dependence, checkState, id, parentValues = [], selectedValues, keyword, type, floors, notSelectedValue, cancelToken, ...opts } = op;\n    \n    return requestor(widgetName, {\n        dependence,\n        reload,\n        id,\n        value: BI.last(parentValues),\n        parent_values: parentValues,\n        notSelectedValue,\n        selectedValues,\n        type,\n        parentValues,\n        filter: keyword,\n        checkState,\n        floors,\n        ...opts,\n    }, cancelToken)\n        .then(data => data[0] || {\n            items: [],\n            resultType: '',\n            hasNext: false,\n        });\n}\n\n/**\n * 单选树控件的itemCreator\n * @param op ootions\n */\nexport async function singleAsyncTreeItemsCreator(requestor: ParameterControllerPropsWithTree['oldTreeControlAttrFetcher'], op: {\n    node: {\n        id?: string;\n        value?: string;\n    };\n    keyword: string;\n    widgetName: string;\n    dependence: {\n        [key: string]: any;\n    };\n    reload: boolean;\n    cancelToken?: CancelToken;\n}): Promise<{\n        items: ParamMultiTreeItem[];\n        hasNext: boolean;\n    }> {\n    const { reload, widgetName, dependence, node = {}, keyword, cancelToken, ...opts } = op;\n\n    return requestor(widgetName, {\n        id: node.id,\n        value: getSingleTreeTextByValue(node.value || ''),\n        filter: keyword,\n        dataFilter: keyword,\n        fine_outlet_widget: keyword ? 'nx' : undefined,\n        dependence,\n        parent_values: node.value ? transformString2Array(node.value) : undefined,\n        reload,\n        ...opts,\n    }, cancelToken)\n        .then(data => {\n            const items = transformTreeControlAttr2Items(data, {\n                pId: node.id,\n                // 搜索时，获取到的是整棵树的items且node属性为空，这时需要区别化节点值，所以要加上prefix\n                prefix: keyword ? '' : false,\n            });\n\n            return {\n                items,\n                hasNext: false,\n            };\n        });\n}\n\n/**\n * 同步树控件的itemCreator\n * @param op ootions\n */\nexport async function syncTreeItemsCreator(requestor: ParameterControllerPropsWithTree['oldTreeControlAttrFetcher'], op: {\n    keyword?: string;\n    widgetName: string;\n    dependence: {\n        [key: string]: any;\n    };\n    reload: boolean;\n    prefix?: string | false;\n}): Promise<{\n        items: ParamMultiTreeItem[];\n        hasNext: boolean;\n    }> {\n    const { reload, widgetName, dependence, keyword, prefix, ...opts } = op;\n\n    return requestor(widgetName, {\n        filter: keyword,\n        dependence,\n        reload,\n        ...opts,\n    })\n        .then(data => {\n            const items = transformTreeControlAttr2Items(data, {\n                prefix,\n            });\n\n            return {\n                items,\n                hasNext: false,\n            };\n        });\n}\n\n/**\n * 获取渲染的layout\n * @param multiSelection 是否多选\n * @param selectLeafOnly 叶子节点与子节点是否互相影响\n * @param async 是否同步\n */\nexport function getParamTreeComboBoxLayout(multiSelection: boolean, selectLeafOnly: boolean, async: boolean, customData: boolean): string {\n    return multiSelection\n        ? async\n            ? selectLeafOnly\n                ? customData\n                    ? BI.MultiTreeInsertCombo.xtype\n                    : BI.MultiTreeCombo.xtype\n                : BI.MultiTreeListCombo.xtype\n            : selectLeafOnly\n                ? customData\n                    ? BI.TreeValueChooserInsertCombo.xtype\n                    : BI.TreeValueChooserCombo.xtype\n                : BI.ListTreeValueChooserInsertCombo.xtype\n        : selectLeafOnly\n            ? BI.MultiLayerSingleTreeCombo.xtype\n            : BI.MultiLayerSelectTreeCombo.xtype;\n}\n\n/**\n * 获取树控件渲染的layout\n * @param multiSelection 是否多选\n * @param selectLeafOnly 叶子节点与子节点是否互相影响\n * @param async 是否异步\n */\nexport function getParamTreeLayout(multiSelection: boolean, selectLeafOnly: boolean, async: boolean): string {\n    return multiSelection\n        ? selectLeafOnly\n            ? async ? BI.AsyncTree.xtype : SyncTree.xtype\n            : async ? BI.ListAsyncTree.xtype : ListSyncTree.xtype\n        : selectLeafOnly\n            ? BI.MultiLayerSingleTreePopup.xtype\n            : BI.MultiLayerSelectTreePopup.xtype;\n}\n\n/**\n * 将树的data转换为渲染的items\n * @param data 树的data\n * @param opt 额外属性\n * @param opt.pId 父级pId\n * @param opt.times 分层页数\n */\nexport function transformTreeControlAttr2Items(data: ParameterControllerTreeControlAttrData[] = [], opts : {\n    pId?: number | string;\n    times?: number;\n    prefix?: false | string;\n} = {}): ParamMultiTreeItem[] {\n    const {\n        pId = ROOT,\n        times = 0,\n        prefix = false,\n    } = opts;\n\n    const items: ParamMultiTreeItem[] = [];\n\n    (data || []).forEach(dataItem => {\n        const item = {\n            checked: dataItem.checkstate === 1,\n            half: false,\n            halfCheck: false,\n            id: dataItem.id,\n            isParent: dataItem.hasChildren,\n            open: dataItem.isexpand,\n            pId,\n            // 传''的时候会去显示实际值\n            text: dataItem.text || '\\u200b',\n            times,\n            // 传''的时候会去显示实际值\n            title: dataItem.text || '\\u200b',\n            value: prefix ? `${prefix}${SPLITOR}${dataItem.value}` : dataItem.value,\n        };\n\n        items.push(item);\n\n        if (dataItem.ChildNodes && dataItem.ChildNodes.length > 0) {\n            items.push(...transformTreeControlAttr2Items(dataItem.ChildNodes, {\n                ...opts,\n                pId: dataItem.id,\n                prefix: prefix === false ? false : item.value,\n            }));\n        }\n    });\n\n    return items;\n}\n\n/**\n * 填满树，将Fineui控件中的树结构拓展至叶节点\n * @param value 多选树控件值\n */\nexport async function rebuildAsyncTree(\n    widgetName: string,\n    requestor: ParameterControllerPropsWithTree['newTreeStructureFetcher'],\n    op: {\n        id?: string | number,\n        value?: string | number,\n        dependence: {\n            [key: string]: any;\n        },\n        reload: boolean\n    },\n    valueReference: ParamMultiTreeValue = {},\n): Promise<{\n        valueReference: ParamMultiTreeValue;\n        data: ParameterControllerTreeControlAttrData[];\n    }> {\n    return requestor(widgetName, op)\n        .then(data => {\n            traverseFillValue(data, valueReference);\n\n            return {\n                valueReference,\n                data,\n            };\n        });\n}\n\n/**\n * 根据值遍历填充树\n * @param data data数组\n * @param valueReference 值引用\n */\nexport function traverseFillValue(data: ParameterControllerTreeControlAttrData[] | null | undefined, valueReference: ParamMultiTreeValue) {\n    (data || [])\n        .forEach(item => {\n            valueReference[item.value] = {};\n\n            if (item.hasChildren) {\n                traverseFillValue(item.ChildNodes, valueReference[item.value]);\n            }\n        });\n}\n\n/**\n * 找到需要format的value值\n * @param value 树控件类型值\n * @param path 值路径\n */\nexport function traverseValue(value: ParamMultiTreeValue, path = [ROOT]): {\n    value: string,\n    reference: ParamMultiTreeValue,\n    path: string[],\n}[] {\n    return Object.keys(value)\n        .reduce((result, v) => {\n            if (BI.isEmptyObject(value[v])) {\n                result.push({\n                    value: v,\n                    reference: value[v],\n                    path,\n                });\n            } else {\n                result.push(...traverseValue(value[v], path.concat(v)));\n            }\n\n            return result;\n        }, [] as {\n            value: string,\n            reference: ParamMultiTreeValue,\n            path: string[],\n        }[]);\n}\n\n/**\n * 填满树，将Fineui控件中的树结构拓展至叶节点\n * @param value 多选树控件值\n * @widgeName 控件名\n * @op 查询参数\n * @_data 子节点们\n */\nexport async function rebuildSyncTree(\n    value: ParamMultiTreeValue,\n    widgetName: string,\n    requestor: ParameterControllerPropsWithTree['oldTreeControlAttrFetcher'],\n    op: {\n        dependence: {\n            [key: string]: any;\n        },\n        reload: boolean\n    },\n    _data?: ParameterControllerTreeControlAttrData[],\n): Promise<ParamMultiTreeValue> {\n    const data = !_data ? await requestor(widgetName, op) : _data;\n\n    const valueKeys = Object.keys(value);\n\n    if (valueKeys.length === 0) {\n        for (const item of data) {\n            value[item.value] = {};\n\n            if (item.hasChildren) {\n                await rebuildSyncTree(value[item.value], widgetName, requestor, op, item.ChildNodes);\n            }\n        }\n    }\n\n    for (const item of data) {\n        if (!valueKeys.includes(item.value)) {\n            continue;\n        }\n\n        if (item.hasChildren) {\n            await rebuildSyncTree(value[item.value], widgetName, requestor, op, item.ChildNodes);\n        }\n    }\n\n    return value;\n}\n\n/**\n * 转换多选树控件输出值\n * @param v 树控件值\n * @param returnFullPath 返回完整路径\n */\nexport function transformMultiTreeInsertComboValue(v: ParamMultiTreeValue, returnFullPath: true): string[][]\nexport function transformMultiTreeInsertComboValue(v: ParamMultiTreeValue, returnFullPath: false): string[]\nexport function transformMultiTreeInsertComboValue(v: ParamMultiTreeValue, returnFullPath: boolean): string[] | string[][]\nexport function transformMultiTreeInsertComboValue(v: ParamMultiTreeValue, returnFullPath: boolean): string[] | string[][] {\n    return returnFullPath\n        ? transformMultiTreeValue2DoubleArray(v)\n        : transformMultiTreeValue2SingleArray(v);\n}\n\n/**\n * 将多选树的值转换成用特定分割符起始符的字符串\n * @param v 树控件值\n * @param delimiter\n * @param startSymbol\n * @param endSymbol\n * @returns\n */\nexport function transformMultiTree2FormatStringValue(v: ParamMultiTreeValue, delimiter: string, startSymbol: string, endSymbol: string) {\n    const value = transformDoubleArray2SingleArray(transformMultiTreeValue2DoubleArray(v));\n    \n    return `${startSymbol}${value.join(delimiter)}${endSymbol}`;\n}\n\n/**\n * 转换单选树控件输出值\n * @param v 树控件值\n * @param returnFullPath 返回完整路径\n */\nexport function transformSingleTreeInsertComboValue(v: string[], returnFullPath: boolean): string[] | undefined {\n    const value = completeSingleTreeValue(v);\n\n    return returnFullPath\n        ? value\n        : [BI.last(value || [])];\n}\n\n/**\n * 根据值取得完整路径\n * @param v 单选树的值\n */\nexport function completeSingleTreeValue(v: (string | undefined)[]): string[] | undefined {\n    if (BI.isEmptyArray(v)) {\n        return undefined;\n    }\n\n    const nodeValue = BI.last(v);\n\n    if (!nodeValue) {\n        return undefined;\n    }\n\n    return transformString2Array(nodeValue);\n}\n\n/**\n * 根据op转换值，值上拼上全路径\n * @param item 树item\n * @param op options\n */\nfunction modifySingleTreeItemValue(item: ParamMultiTreeItem, op: {\n    node?: ParamSingleTreeNode;\n}) {\n    if (!op.node) {\n        return item.value;\n    }\n\n    let value = item.value;\n\n    let parentNode = op.node;\n\n    while (parentNode) {\n        value = `${parentNode.originValue}${SPLITOR}${value}`;\n\n        parentNode = parentNode.pNode;\n    }\n\n    return value;\n}\n\n/**\n * 将树结构转换为二维数组\n * @param v 树结构\n * @param parentValues 祖先数组\n */\nexport function transformMultiTreeValue2DoubleArray(v: ParamMultiTreeValue, parentValues: string[] = []): string[][] {\n    return Object.keys(v)\n        .reduce((prev, key) => {\n            if (Object.keys(v[key]).length === 0) {\n                prev.push([...parentValues, key]);\n\n                return prev;\n            }\n\n            return prev.concat(transformMultiTreeValue2DoubleArray(v[key], [...parentValues, key]));\n        }, [] as string[][]);\n}\n\n/**\n * 将树结构转换为一维数组\n * @param v 树结构\n */\nexport function transformMultiTreeValue2SingleArray(v: ParamMultiTreeValue): string[] {\n    return transformDoubleArray2SingleArray(transformMultiTreeValue2DoubleArray(v));\n}\n\n/**\n * 取二维数组的最后一位拼成新数组\n * @param arr 二维数组\n */\nexport function transformDoubleArray2SingleArray(arr: string[][]): string[] {\n    return arr.map(arr => arr[arr.length - 1]);\n}\n\n/**\n * string转二维数组\n * @param str 字符串\n */\nexport function transformString2DoubleArray(str: string): string[][] {\n    return str.split(LAYER_SPLITOR)\n        .map(leaves => leaves.split(LEAF_SPLITOR));\n}\n\n/**\n* string转一维数组\n* @param str 字符串\n*/\nexport function transformString2Array(str: string): string[] {\n    return str.split(SPLITOR);\n}\n\n/**\n * 转换默认值为控件结构\n * @param v 默认值\n * @param opts.multiSelection 多选\n * @param opts.selectLeafOnly 是否选择叶子节点\n * @param opts.nodes nodes数组\n * @param opts.textValueMap key为默认值/实际值\n */\nexport function transformTreeDefaultValue(\n    v: string, multiSelection: true, selectLeafOnly: true, opts: TransformTreeDefaultValueOpts\n): ParamMultiTreeValue\nexport function transformTreeDefaultValue(\n    v: string, multiSelection: true, selectLeafOnly: false, opts: TransformTreeDefaultValueOpts\n): string[][]\nexport function transformTreeDefaultValue(\n    v: string, multiSelection: false, selectLeafOnly: boolean, opts: TransformTreeDefaultValueOpts\n): string\nexport function transformTreeDefaultValue(\n    v: (string | number)[], multiSelection: false, selectLeafOnly: boolean, opts: TransformTreeDefaultValueOpts\n): string\nexport function transformTreeDefaultValue(\n    v: (string | number)[], multiSelection: true, selectLeafOnly: false, opts: TransformTreeDefaultValueOpts\n): string[][]\nexport function transformTreeDefaultValue(\n    v: (string | number)[], multiSelection: true, selectLeafOnly: true, opts: TransformTreeDefaultValueOpts\n): ParamMultiTreeValue\nexport function transformTreeDefaultValue(\n    v: number | string | (string | number)[] | undefined | null, multiSelection: boolean, selectLeafOnly: boolean, opts: TransformTreeDefaultValueOpts\n): ParamMultiTreeValue | string[][] | string | undefined\nexport function transformTreeDefaultValue(\n    $v: string | (string | number)[] | undefined | null | number, multiSelection: boolean, selectLeafOnly: boolean, opts: TransformTreeDefaultValueOpts,\n): ParamMultiTreeValue | string[][] | string | undefined {\n    const v = BI.isNumber($v) ? `${$v}` : $v;\n\n    if (v === '' || BI.isNull(v) || BI.isEmptyObject(v)) {\n        return undefined;\n    }\n\n    if (BI.isString(v)) {\n        return multiSelection\n            ? selectLeafOnly\n                ? transformMultiTreeDefaultValue(v, opts.textValueMap)\n                : transformMultiLeafTreeDefaultValue(v, opts.textValueMap)\n            : transformSingleTreeDefaultValue(v, opts.nodes);\n    }\n\n    if (!multiSelection) {\n        return transformTreeDefaultValue(v.join(SPLITOR), multiSelection, selectLeafOnly, opts);\n    }\n\n    if (!selectLeafOnly) {\n        return v.reduce((result, value) => {\n            result.push(...transformTreeDefaultValue(`${value}`, multiSelection, selectLeafOnly, opts));\n\n            return result;\n        }, [] as string[][]);\n    }\n\n    return v.reduce((result, value) => BI.deepExtend({}, result, transformTreeDefaultValue(`${value}`, multiSelection, selectLeafOnly, opts)), {} as ParamMultiTreeValue);\n}\n\n/**\n * 转换string类型成多选树控件类型\n * @param v 默认值\n * @param valueTextMap key为默认值/实际值\n */\nexport function transformMultiTreeDefaultValue(v: string, textValueMap: {[key: string]: string} = {}): ParamMultiTreeValue {\n    // 分层\n    const layers = splitValue(v);\n\n    return layers.reduce((result, layer) => {\n        let current = result;\n\n        layer\n            .split(LEAF_SPLITOR)\n            .forEach(_leaf => {\n                const leaf = _leaf in textValueMap ? textValueMap[_leaf] : _leaf;\n\n                if (!current[leaf]) {\n                    current[leaf] = {};\n                }\n\n                current = current[leaf];\n            });\n\n        return result;\n    }, {} as ParamMultiTreeValue);\n}\n\n/**\n * 转换string类型成多选树（叶子）控件类型\n * @param v 默认值\n * @param valueTextMap key为默认值/实际值\n */\nfunction transformMultiLeafTreeDefaultValue(v: string, textValueMap: {[key: string]: string} = {}): string[][] {\n    // 分层\n    const layers = splitValue(v);\n\n    return layers.reduce((result, layer) => {\n        result.push(layer.split(LEAF_SPLITOR).map(leaf => leaf in textValueMap ? textValueMap[leaf] : leaf));\n\n        return result;\n    }, [] as string[][]);\n}\n\n/**\n * 转换string类型成单选控件类型\n * @param v 默认值\n */\nfunction transformSingleTreeDefaultValue(v: string, nodes: ParamMultiTreeItem[]): string {\n    // 分层\n    const layer = v.split(LAYER_SPLITOR)[0];\n\n    let result: string[] = [];\n\n    layer\n        .split(',')\n        .reduce((pId, leaf) => {\n            const node = nodes.find(node => node.pId === pId && (node.value === leaf || node.text === leaf));\n\n            if (node) {\n                result = [node.value];\n            } else {\n                result.push(leaf);\n            }\n\n            return node?.id;\n        }, ROOT as string | undefined);\n\n    return result.join(SPLITOR);\n}\n\n/**\n * 转换树控件item的value\n * @param items 树控件的items\n */\nexport function transformDataItems(items: ParamMultiTreeItem[], op: {\n    node?: ParamSingleTreeNode;\n} = {}): ParamMultiTreeItem[] {\n    items.forEach(item => {\n        item.originValue = item.value;\n        item.value = modifySingleTreeItemValue(item, op);\n    });\n\n    return items;\n}\n\n/**\n * 转树的数据字典到map\n * @param data 树的数据字典\n */\nexport function trasnformTreeControlAttr2TextValueMap(data: ParameterControllerTreeControlAttrData[], prefix: false | string): {[key: string]: string} {\n    return (data || []).reduce((map, item) => {\n        const text = replaceRedMarkTag(`${item.text}`);\n\n        const value = prefix ? `${prefix}${SPLITOR}${item.value}` : `${item.value}`;\n\n        if (!(text in map)) {\n            map[text] = value;\n        }\n\n        map[value] = value;\n\n\n        if (item.hasChildren) {\n            return { ...map, ...trasnformTreeControlAttr2TextValueMap(item.ChildNodes, prefix === false ? false : value) };\n        }\n\n        return map;\n    }, {} as {[key: string]: string});\n}\n\n/**\n * 转换fineui的tree items成textValueMap\n * @param items fineui的tree items\n */\nexport function transformMultiTreeItem2TextValueMap(items: ParamMultiTreeItem[]): {[key: string]: string} {\n    return items.reduce((map, item) => {\n        const text = replaceRedMarkTag(`${item.text}`);\n\n        const value = `${item.value}`;\n\n        if (!(text in map)) {\n            map[text] = value;\n        }\n\n        map[value] = value;\n\n        return map;\n    }, {} as {[key: string]: string});\n}\n\n/**\n * 校验是否有额外的值传入\n * @param value 值\n * @param valueTextMap 字典\n */\nexport function validateTreeCustomData(controlAttr: {\n    data: ParameterControllerTreeControlAttrData[],\n    value: string | number\n}, prefix: false | string): boolean {\n    if (controlAttr.value === '') {\n        return true;\n    }\n\n    const textValueMap = trasnformTreeControlAttr2TextValueMap(controlAttr.data, prefix);\n\n    const leaves = splitValue(`${controlAttr.value}`)\n        .reduce((result, layer) => {\n            result.push(...layer.split(LEAF_SPLITOR));\n\n            return result;\n        }, [] as string[]);\n\n    const validation = BI.isNotNull(controlAttr.data)\n        && leaves.every(leaf => leaf in textValueMap);\n\n    if (!validation) {\n        BI.Msg.toast(BI.i18nText('Fine-Report_Preview_Not_In_List'), { level: 'error' });\n    }\n\n    return validation;\n}\n\n/**\n * 去掉text中的标红span标签\n * @param text 文字\n */\nexport function replaceRedMarkTag(text: string | number): string {\n    // 只转化span标签而非替换全部 <>\n    return BI.replaceAll(`${text}`.replace(/<\\/?span.*?>/g, ''), '&nbsp;', ' ');\n}\n\n/**\n * 根据；切割值\n * @param value 值\n */\nfunction splitValue(value: string): string[] {\n    const layers = value.split(LAYER_SPLITOR);\n\n    // 去掉多余的空白\n    if (BI.size(layers) > 1 && BI.last(layers) === '') {\n        layers.pop();\n    }\n\n    return layers;\n}\n\n/**\n * 根据现在单选树的值获取其父亲的值\n * @param value 当前值\n */\nexport function getSingleTreeParentValueByValue(value: string): string {\n    return value\n        .split(SPLITOR)\n        .slice(0, -1)\n        .join(SPLITOR);\n}\n\n/**\n * 根据现在单选树的值获取其显示值\n * @param value 当前值\n * @param nodes 单选树nodeList\n */\nexport function getSingleTreeTextByValue(value: string | undefined, nodes?: ParamMultiTreeItem[]): string {\n    if (!value) {\n        return '';\n    }\n\n    const leaf = BI.last(transformString2Array(value));\n\n    const node = nodes?.find(node => BI.last(transformString2Array(node.value)) === leaf);\n\n    return node?.text || leaf;\n}\n\n/**\n * 根据值获取单选树的完整路径，比如A_spilitor_B_spilitor_C，返回[A, A_spilitor_B, A_spilitor_B_spilitor_C]\n * @param value 控件值\n */\nexport function getSingleTreePathByValue(value?: string): string[] {\n    if (!value) {\n        return [];\n    }\n\n    return transformString2Array(value)\n        .reduce((result, current) => {\n            result.push(result.length === 0 ? current : `${BI.last(result)}${SPLITOR}${current}`);\n\n            return result;\n        }, [] as string[]);\n}\n\n/**\n * 将已有值转换为唯一值\n * @param items 已有值\n */\nexport function transform2DistinctTreeValues<T extends { value: string; pId: string | number }>(items: T[]): T[] {\n    const values: {\n        [key: string]: string[]\n    } = {};\n\n    return items.map(item => {\n        if (!values[item.pId]) {\n            values[item.pId] = [];\n        }\n\n        const value = transform2DistinctValueByValues(item.value, values[item.pId]);\n\n        values[item.pId].push(value);\n\n        return {\n            ...item,\n            value,\n        };\n    });\n}\n"]}