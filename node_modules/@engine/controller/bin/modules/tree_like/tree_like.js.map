{"version":3,"file":"tree_like.js","sourceRoot":"","sources":["../../../src/modules/tree_like/tree_like.ts"],"names":[],"mappings":"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","sourcesContent":["import { Loading } from '@engine/utils';\nimport axios, { CancelTokenSource } from 'axios';\nimport { ParameterControllerTreeControlAttrData } from '../controller';\nimport { AbstractParameterControllerWidget, ControllerValidation } from '../controller.abstract';\nimport { ParameterTree } from './tree/tree';\nimport { ParameterTreeComboBox } from './tree_combo_box/tree_combo_box';\nimport { getSingleTreeParentValueByValue, getSingleTreePathByValue, getSingleTreeTextByValue, multiAsyncTreeItemsCreator, rebuildAsyncTree, rebuildSyncTree, replaceRedMarkTag, ROOT, singleAsyncTreeItemsCreator, syncTreeItemsCreator, transform2DistinctTreeValues, transformDataItems, transformDoubleArray2SingleArray, transformMultiTree2FormatStringValue, transformMultiTreeInsertComboValue, transformMultiTreeItem2TextValueMap, transformSingleTreeInsertComboValue, transformString2Array, transformString2DoubleArray, transformTreeControlAttr2Items, transformTreeDefaultValue, trasnformTreeControlAttr2TextValueMap, traverseValue, TREE_VIEW_TYPE } from './tree_like.service';\n\nexport abstract class ParameterTreeLike extends AbstractParameterControllerWidget {\n    protected tree: any;\n\n    private mask: Loading;\n\n    /**\n     * 单选树自定义的新增值\n     */\n    private singleTreeUnexpectedNodes: ParamMultiTreeItem[] = [];\n\n    protected abstract isTreeWidget(): boolean;\n\n    protected nodes: ParamMultiTreeItem[] = [];\n\n    public options: ParameterTreeComboBox['props'] & ParameterTree['props'];\n\n    protected textValueMap: {[key: string]: string} = {};\n\n    // 完整的多选树值\n    protected completeMultiTreeValue?: ParamMultiTreeValue;\n\n    protected singleTreeNotSelectedValue = BI.UUID();\n\n    private singleTreeNotSelectedNode = {\n        checked: false,\n        half: false,\n        isParent: false,\n        halfCheck: false,\n        id: BI.UUID(),\n        open: false,\n        pId: ROOT,\n        text: BI.i18nText('BI-Basic_No_Select'),\n        times: 0,\n        title: BI.i18nText('BI-Basic_No_Select'),\n        value: this.singleTreeNotSelectedValue,\n        originValue: this.singleTreeNotSelectedValue,\n    };\n\n    protected value: any;\n\n    private cancelTokenSourceDict = new Map<string | number, CancelTokenSource | null>();\n\n    public async mounted() {\n        super.mounted();\n    }\n\n    public async updateControllAttr() {\n        return this.singleAsyncTreeItemCreator({});\n    }\n\n    /**\n     * 根据items更新缓存结构\n     * @param items ParamMultiTreeItem[]\n     */\n    protected updateCacheByItems(items: ParamMultiTreeItem[]) {\n        this.textValueMap = { ...this.textValueMap, ...transformMultiTreeItem2TextValueMap(items) };\n\n        this.nodes = this.nodes.concat(items.map(item => {\n            return {\n                ...item,\n                text: replaceRedMarkTag(item.text),\n            };\n        }));\n\n        items.forEach(item => {\n            item.$testId = 'report-main-parameter-container-controller-tree-item';\n            item.$value = `${item.pId}`;\n        });\n    }\n\n    /**\n     * 根据数据字典data更新缓存结构\n     * @param data 数据字典data\n     */\n    protected updateCacheByControlAttrData(data?: ParameterControllerTreeControlAttrData[]) {\n        const { mutiSelection: multiSelection } = this.options;\n\n        this.nodes = [...this.nodes, ...transformDataItems(transformTreeControlAttr2Items(data || [], {\n            prefix: multiSelection ? false : '',\n        })).map(item => {\n            return {\n                ...item,\n                text: replaceRedMarkTag(item.text),\n            };\n        })];\n\n        this.textValueMap = { ...this.textValueMap, ...trasnformTreeControlAttr2TextValueMap(data || [], multiSelection ? false : '') };\n    }\n\n    /**\n     * 根据值计算出数据字典\n     * @param value 值\n     */\n    protected async updateCacheByValue(value: (string | number)[][] | string) {\n        const data = await this.getInfoByValue(value);\n        if (data?.nodes) {\n            this.updateCacheByControlAttrData(data.nodes);\n        }\n    }\n\n    /**\n     * 根据值计算数据字典和 controlData\n     * @param value 值\n     */\n    protected async getInfoByValue(value: (string | number)[][] | (string | number)[] | string) {\n        const { mutiSelection: multiSelection } = this.options;\n\n        if (this.isEmptyValue(value)) {\n            return;\n        }\n\n        const controlData = [] as ParameterControllerTreeControlAttrData[];\n        const nodes = [] as ParameterControllerTreeControlAttrData[];\n\n        if (multiSelection) {\n            const values: (string | number)[][] = BI.isString(value)\n                ? transformString2DoubleArray(value)\n                : BI.isArray(value)\n                    ? value as (string | number)[][]\n                    : [];\n            for (const leaves of values as (string|number)[][]) {\n                await this.getOneBranchInfo(leaves)\n                    .then(info => {\n                        controlData.push(...info?.controlData || []);\n                        nodes.push(...info?.resultNodes || []);\n                    });\n            }\n        } else {\n            const val: (string | number)[] = BI.isString(value)\n                ? transformString2Array(value)\n                : BI.isArray(value)\n                    ? value as (string | number)[]\n                    : [];\n            await this.getOneBranchInfo(val)\n                .then(info => {\n                    controlData.push(...info?.controlData || []);\n                    nodes.push(...info?.resultNodes || []);\n                });\n        }\n\n        return {\n            controlData,\n            nodes,\n        };\n    }\n    \n    /**\n     * 根据值计算树一个分支的数据字典和controlData\n     * @param values 值\n     * @returns 数组字典和controlData\n     */\n    private async getOneBranchInfo(values: (string | number)[] | string) {\n        const { oldTreeControlAttrFetcher, widgetName } = this.options;\n\n        if (this.isEmptyValue(values)) {\n            return;\n        }\n\n        const controlData = [] as ParameterControllerTreeControlAttrData[];\n        const resultNodes = [] as ParameterControllerTreeControlAttrData[];\n\n        let childNodes = controlData;\n        const parentValues = [] as string[];\n        let parentValue = '', pId = '';\n            \n        const setParentState = (targetNode: ParameterControllerTreeControlAttrData, layerNodes: ParameterControllerTreeControlAttrData[]) => {\n            parentValue = `${targetNode.value}`;\n            pId = `${targetNode.id}`;\n            parentValues.push(targetNode.value);\n            childNodes.push(...layerNodes);\n            targetNode.ChildNodes = [];\n            childNodes = targetNode.ChildNodes;\n            resultNodes.push(...layerNodes);\n        };\n\n        \n        for (const $leaf of values) {\n            const leaf = `${$leaf}`;\n            const nodes = await oldTreeControlAttrFetcher(widgetName, {\n                ...BI.size(parentValues) > 0\n                    ? {\n                        id: pId,\n                        value: parentValue,\n                        parent_values: parentValues,\n                    }\n                    : {},\n                ...this.getTreeOptions(),\n            });\n            const node = nodes.find(node => `${node.value}` === leaf);\n            if (!node) break;\n            setParentState(node, nodes);\n        }\n\n        return {\n            controlData,\n            resultNodes,\n        };\n    }\n\n    public async setControllerValue(v: string, data: ParameterControllerTreeControlAttrData[] = []) {\n        const updateData = data;\n\n        await this.getInfoByValue(v)\n            .then(info => {\n                updateData.push(...info?.nodes || []);\n            });\n        \n        this.updateCacheByControlAttrData(updateData);\n\n        this.value = transformTreeDefaultValue(\n            v,\n            this.options.mutiSelection,\n            this.options.selectLeafOnly,\n            {\n                textValueMap: this.textValueMap,\n                nodes: this.nodes,\n            },\n        );\n\n        this.completeMultiTreeValue = this.value;\n\n        this.setTreeValue(this.value);\n    }\n\n    public async setValue(v: string, data?: ParameterControllerTreeControlAttrData[]) {\n        data\n            ? this.updateCacheByControlAttrData(data)\n            : await this.updateCacheByValue(v);\n\n        this.setControllerValue(v, data);\n\n        this.fireEvent('EVENT_SET_VALUE');\n    }\n\n    protected setTreeValue(v: any) {\n        this.tree.setValue(v);\n    }\n\n    public getValue() {\n        let value: any = this.completeMultiTreeValue || this.tree.getValue();\n        const { mutiSelection: multiSelection, selectLeafOnly, returnFullPath, returnArray, startSymbol = '', endSymbol = '', delimiter } = this.options;\n\n        if (this.isEmptyValue(value)) {\n            return '';\n        }\n\n        if (BI.isString(value) && !multiSelection) {\n            value = [value];\n        }\n\n        if (BI.isString(value) || BI.isNull(value)) {\n            return value || '';\n        }\n\n        if (multiSelection) {\n            if (selectLeafOnly) {\n                return returnArray ? transformMultiTreeInsertComboValue(value, returnFullPath) : transformMultiTree2FormatStringValue(value, delimiter, startSymbol, endSymbol);\n            }\n\n            return returnFullPath ? value : transformDoubleArray2SingleArray(value);\n        }\n\n        return transformSingleTreeInsertComboValue(value, returnFullPath);\n    }\n\n    public async setInteractValue(v: {\n        data: ParameterControllerTreeControlAttrData[];\n        value: number | string | string[] | string[][];\n    }) {\n        await this.setControllerValue(\n            `${BI.isArray(v.value)\n                ? BI.isString(v.value[0])\n                    ? (v.value as string[]).join(',')\n                    : (v.value as string[][]).map(value => value.join(',')).join(';')\n                : v.value}`,\n            v.data);\n    }\n\n    /**\n     * 发送EVENT_CHANGE事件\n     */\n    protected fireEventChange() {\n        this.fireEvent('EVENT_CHANGE', this.getValue());\n    }\n\n    /**\n     * 完善异步多选树返回值\n     */\n    protected async rebuildAsyncMultiTree(value: any, fireEvent: boolean) {\n        this.setShowMask(true);\n\n        const promises: Promise<{\n            valueReference: ParamMultiTreeValue;\n            data: ParameterControllerTreeControlAttrData[];\n        }>[] = [];\n\n        traverseValue(value)\n            .forEach(valueDicts => {\n                /**\n                 * 隐藏bug，如果value有重复，实际上是找不到正确的node的，node还是得根据整体路径去找\n                 * valueDict里还得扔个路径出来\n                 * FIXME: 以后有时间再改\n                 */\n                const node = this.nodes\n                    .slice(0)\n                    .reverse()\n                    .find(node => node.value === valueDicts.value);\n\n                if (!node) {\n                    return;\n                }\n\n                promises.push(rebuildAsyncTree(this.options.widgetName, this.options.newTreeStructureFetcher, {\n                    value: valueDicts.value,\n                    id: node.id,\n                    ...this.getTreeOptions(),\n                }, valueDicts.reference));\n            });\n\n        return Promise.all(promises)\n            .then(data => {\n                data.forEach(treeData => this.updateCacheByControlAttrData(treeData.data));\n\n                this.completeMultiTreeValue = value;\n\n                fireEvent && this.fireEventChange();\n            })\n            .then(() => {\n                this.setShowMask(false);\n            });\n    }\n\n    /**\n     * 完善同步多选树返回值\n     */\n    protected async rebuildSyncMultiTree(value: any, fireEvent: boolean) {\n        this.setShowMask(true);\n        \n        await rebuildSyncTree(\n            value,\n            this.options.widgetName,\n            this.options.oldTreeControlAttrFetcher,\n            this.getTreeOptions(),\n        )\n            .then(() => {\n                this.completeMultiTreeValue = value;\n\n                fireEvent && this.fireEventChange();\n            })\n            .then(() => {\n                this.setShowMask(false);\n            });\n    }\n\n    /**\n     * rebuildMultiTree前置判断\n     * @param v 控件值\n     */\n    private rebuildMultiTreeValidator(v: any): boolean {\n        const { selectLeafOnly, mutiSelection: multiSelection } = this.options;\n\n        if (!selectLeafOnly || !multiSelection) {\n            return false;\n        }\n\n        if (BI.isEmptyObject(v) || BI.isNull(v) || v === '') {\n            this.completeMultiTreeValue = undefined;\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * 完善多选树返回值\n     * @param v 返回值\n     * @param fireEvent 是否发送事件\n     */\n    protected async rebuildMultiTree(_v: any = this.tree.getValue(), fireEvent: boolean) {\n        const v = BI.deepClone(_v);\n\n        if (!this.rebuildMultiTreeValidator(v)) {\n            // REPORT-44591 如果不需要rebuild值，则使用tree的getValue值，所以需要置空completeMultiTreeValue\n            this.completeMultiTreeValue = undefined;\n\n            fireEvent && this.fireEventChange();\n\n            return;\n        }\n\n        this.isAsyncTree() ? await this.rebuildAsyncMultiTree(v, fireEvent) : await this.rebuildSyncMultiTree(v, fireEvent);\n    }\n\n    /**\n     * 同步树的itemCreator\n     */\n    protected syncTreeItemCreator(): Promise<{items: ParamMultiTreeItem[], hasNext: boolean, resultType?: string}> {\n        const { mutiSelection: multiSelection } = this.options;\n\n        return multiSelection ? this.multiSyncTreeItemCreator() : this.singleSyncTreeItemCreator();\n    }\n\n    /**\n     * 多选异步树的itemCreator\n     * @param op options\n     */\n    protected async multiAsyncTreeItemCreator(op: any): Promise<{items: ParamMultiTreeItem[], hasNext: boolean, resultType?: string} | ParamMultiTreeValue> {\n        const { widgetName, newTreeControlAttrFetcher } = this.options;\n        const treeViewType = op.type || TREE_VIEW_TYPE;\n\n        // 合并值的返回请求\n        if (treeViewType === BI.TreeView.REQ_TYPE_ADJUST_DATA || treeViewType === BI.TreeView.REQ_TYPE_SELECT_DATA) {\n            this.setShowMask(true);\n        }\n\n        const cancelTokenSource = this.cancelTokenSourceDict.get(treeViewType);\n\n        if (cancelTokenSource) {\n            cancelTokenSource.cancel();\n            this.cancelTokenSourceDict.delete(treeViewType);\n        }\n\n        return multiAsyncTreeItemsCreator(newTreeControlAttrFetcher, {\n            ...op,\n            widgetName,\n            ...this.getTreeOptions(treeViewType),\n        })\n            .then(data => {\n                this.setShowMask(false);\n\n                if (Array.isArray(data.items)) {\n                    this.updateCacheByItems(data.items);\n\n                    return data as {items: ParamMultiTreeItem[], hasNext: boolean, resultType?: string};\n                }\n                this.cancelTokenSourceDict.delete(treeViewType);\n\n                return data.items;\n            });\n    }\n\n    /**\n     * 单选同步树的itemCreator\n     */\n    protected async singleSyncTreeItemCreator(): Promise<{items: ParamMultiTreeItem[], hasNext: boolean, resultType?: string}> {\n        const { widgetName, oldTreeControlAttrFetcher, allowBlank } = this.options;\n\n        return syncTreeItemsCreator(oldTreeControlAttrFetcher, {\n            widgetName,\n            ...this.getTreeOptions(),\n            prefix: '',\n        })\n            .then(data => {\n                data.items = transform2DistinctTreeValues(transformDataItems(data.items, {}));\n\n                if (!this.isTreeWidget() && allowBlank) {\n                    data.items.unshift(this.singleTreeNotSelectedNode);\n                }\n\n                data.items.push(...this.singleTreeUnexpectedNodes);\n\n                this.updateCacheByItems(data.items);\n\n                return data;\n            });\n    }\n\n    /**\n     * 多选同步树的itemCreator\n     */\n    protected async multiSyncTreeItemCreator(): Promise<{items: ParamMultiTreeItem[], hasNext: boolean}> {\n        const { widgetName, oldTreeControlAttrFetcher } = this.options;\n\n        return syncTreeItemsCreator(oldTreeControlAttrFetcher, {\n            widgetName,\n            ...this.getTreeOptions(),\n        })\n            .then(data => {\n                data.items = transform2DistinctTreeValues(transformDataItems(data.items, {}));\n\n                this.updateCacheByItems(data.items);\n\n                return data;\n            });\n    }\n\n    /**\n     * 单选异步树的itemCreator\n     * @param op options\n     */\n    protected async singleAsyncTreeItemCreator(op: any): Promise<{items: ParamMultiTreeItem[], hasNext: boolean}> {\n        const { widgetName, oldTreeControlAttrFetcher, allowBlank } = this.options;\n\n        const treeViewType = op.type || TREE_VIEW_TYPE;\n        const cancelTokenSource = this.cancelTokenSourceDict.get(treeViewType);\n\n        if (cancelTokenSource) {\n            cancelTokenSource.cancel();\n            this.cancelTokenSourceDict.delete(treeViewType);\n        }\n\n        return singleAsyncTreeItemsCreator(oldTreeControlAttrFetcher, {\n            ...op,\n            widgetName,\n            ...this.getTreeOptions(treeViewType),\n        })\n            .then(data => {\n                data.items = transformDataItems(data.items, op);\n\n                const pId: string | number = BI.get(op, 'node.id', ROOT);\n\n                this.singleTreeUnexpectedNodes.forEach(singleTreeDefaultNode => {\n                    if (pId === singleTreeDefaultNode.pId) {\n                        data.items.push(singleTreeDefaultNode);\n                    }\n                });\n\n                if (!this.isTreeWidget() && !BI.get(op, 'node') && !BI.get(op, 'keyword') && allowBlank) {\n                    data.items.unshift(this.singleTreeNotSelectedNode);\n                }\n\n                this.updateCacheByItems(data.items);\n\n                this.cancelTokenSourceDict.delete(treeViewType);\n\n                return data;\n            });\n    }\n\n    /**\n     * 获取树请求属性\n     */\n    private getTreeOptions(treeViewType: string = TREE_VIEW_TYPE) {\n        const { getWidgetDependenceValueByWidget, getDependenceByWidget, extraOptsGetter } = this.options;\n\n        const dependence = getWidgetDependenceValueByWidget(this);\n\n        const reload = BI.isNotEmptyArray(getDependenceByWidget(this));\n\n        this.cancelTokenSourceDict.set(treeViewType, axios.CancelToken.source());\n\n        return {\n            dependence,\n            reload,\n            ...extraOptsGetter(),\n            cancelToken: this.cancelTokenSourceDict.get(treeViewType)?.token,\n        };\n    }\n\n    public preGetValidation(): ControllerValidation {\n        const { allowBlank, value, errorMsg } = this.options;\n\n        return allowBlank || !BI.isEmpty(value) ? {\n            result: true,\n        } : {\n            result: false,\n            errorMsg,\n        };\n    }\n\n    /**\n     * 处理单选下的同步树\n     */\n    protected transformSyncSingleTreeItem(items: ParamMultiTreeItem[]) {\n        if (!this.isAsyncTree() && !this.options.mutiSelection && this.options.async) {\n            const path = getSingleTreePathByValue(this.value);\n\n            items.forEach(item => {\n                if (path.includes(item.value)) {\n                    item.open = true;\n                }\n            });\n        }\n\n        return items;\n    }\n\n    public postGetValidation(value = this.tree.getValue()): ControllerValidation {\n        const { allowBlank, errorMsg, customData, needCheckCustomData } = this.options;\n\n        if (this.isEmptyValue(value)) {\n            return allowBlank ? {\n                result: true,\n            } : {\n                result: false,\n                errorMsg,\n            };\n        }\n\n        return !customData && needCheckCustomData\n            ? this.validateCustomData(value)\n            : { result: true };\n    }\n\n    public postValidateAndToast() {\n        const validation = this.getValidation();\n\n        if (validation.result) {\n            return true;\n        }\n\n        this.showBubble(validation.errorMsg);\n\n        return false;\n    }\n\n    /**\n     * 校验新增值，不包括校验为空，需要保证传值不能为空\n     * @param value\n     */\n    private validateCustomData(value: any): ControllerValidation {\n        const { mutiSelection: multiSelection, selectLeafOnly } = this.options;\n\n        const leaves: string[] = [];\n\n        if (!multiSelection) {\n            // 单选只有一个值\n            leaves.push(BI.isString(value) ? value : BI.first(value));\n        } else {\n            const arr: string[][] = selectLeafOnly\n                ? transformMultiTreeInsertComboValue(value, true)\n                : value;\n\n            arr.forEach(path => {\n                path.forEach(leaf => {\n                    leaves.push(leaf);\n                });\n            });\n        }\n\n        const validation = leaves.every(leaf => leaf in this.textValueMap);\n\n        return validation\n            ? { result: true }\n            : { result: false, errorMsg:  BI.i18nText('Fine-Report_Preview_Not_In_List') };\n    }\n\n    /**\n     * 值是否为空\n     * @param value\n     */\n    private isEmptyValue(value: any) {\n        // value可能值为 {} undefined []\n        if (BI.isEmpty(value)) {\n            return true;\n        }\n\n        // 单选树空值情况\n        // REPORT-44191不选时有可能返回[undefined]和[null]和['']\n        // TODO 后面要在看看这个问题\n        if (BI.isEqual(value, [this.singleTreeNotSelectedValue]) ||\n            BI.isEqual(value, [undefined]) ||\n            BI.isEqual(value, [null]) ||\n            BI.isEqual(value, [''])\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n\n    /**\n     * 是否是异步构建的树\n     */\n    protected isAsyncTree() {\n        const { async, isLayerBuild } = this.options;\n\n        /**\n         * Tips: isLayerBuild是单独为极速分层构建做的一个标识\n         * 后端逻辑目前是只有极速分层构建树是特殊的\n         */\n\n        return !isLayerBuild && async;\n    }\n\n    public reset() {\n        const { mutiSelection: multiSelection, selectLeafOnly } = this.options;\n\n        // reset之后提交，不置空的话会出现异常\n        this.completeMultiTreeValue = undefined;\n\n        multiSelection\n            ? selectLeafOnly\n                ? this.setTreeValue({})\n                : this.setTreeValue([])\n            : this.setTreeValue(['']);\n    }\n\n    /**\n     * 展示loading遮罩\n     * @param showMask 是否展示loading遮罩\n     */\n    private setShowMask(showMask: boolean) {\n        if (!showMask) {\n            this.mask && this.mask.invisible();\n\n            return;\n        }\n\n        if (!this.mask) {\n            BI.createWidget({\n                type: BI.AbsoluteLayout.xtype,\n                element: 'body',\n                items: [{\n                    el: {\n                        type: Loading.xtype,\n                        cls: 'transparent mask',\n                        ref: (_ref: Loading) => {\n                            this.mask = _ref;\n                        },\n                        listeners: [{\n                            eventName: BI.Events.MOUNT,\n                            action: () => {\n                                this.mask.element.mousedown((e: any) => {\n                                    e.stopEvent();\n                                });\n                            },\n                        }],\n                    },\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                }],\n            });\n        }\n\n        this.mask.visible();\n    }\n\n    /**\n     * 转换单选树的值，不存在的话添加到node中\n     * @param defaultValue 默认值\n     * @param isParent 是否是父节点\n     */\n    protected transformSingleTreeValue2Node(defaultValue: string, isParent = false): ParamMultiTreeItem {\n        const node = this.nodes.find(node => node.value === defaultValue);\n\n        // 找得到该节点的话就不需要额外操作\n        if (node) {\n            return node;\n        }\n\n        const text = getSingleTreeTextByValue(defaultValue);\n\n        const parentValue = getSingleTreeParentValueByValue(defaultValue);\n\n        const pId = BI.isEmptyString(parentValue) ? ROOT : this.transformSingleTreeValue2Node(parentValue, true).id;\n\n        const unexpectedNode = {\n            checked: false,\n            half: false,\n            halfCheck: false,\n            id: BI.UUID(),\n            isParent,\n            open: false,\n            pId,\n            text,\n            times: 0,\n            title: text,\n            value: defaultValue,\n            originValue: defaultValue,\n        };\n\n        this.nodes.push(unexpectedNode);\n\n        this.singleTreeUnexpectedNodes.push(unexpectedNode);\n\n        return unexpectedNode;\n    }\n\n    public resize(width: number, height: number) {\n        const restoreValue = this.tree.getValue();\n\n        const state = this.isEnabled();\n\n        if (this.preResize(width, height)) {\n            this.tree.setValue(restoreValue);\n\n            /**\n             * REPORT-77208 下拉同步树的mounted时会拿value去setValue\n             */\n            this.value = restoreValue;\n\n            this.setEnable(state);\n        }\n    }\n}\n\n/**\n * 多选树结构\n */\nexport interface ParamMultiTreeValue {\n    [key: string]: ParamMultiTreeValue;\n}\n\n/**\n * fineui树控件渲染结构\n */\nexport interface ParamMultiTreeItem {\n    checked: boolean;\n    half: boolean;\n    halfCheck: boolean;\n    id: string | number;\n    isParent: boolean;\n    open: boolean;\n    pId: string | number;\n    text: string;\n    times: number;\n    title: string;\n    value: string;\n    originValue?: string;\n    $testId?: string;\n    $value?: string;\n    height?: number;\n}\n\n/**\n * 单选树op的node\n */\nexport interface ParamSingleTreeNode {\n    pNode: ParamSingleTreeNode;\n    value: string;\n    originValue?: string;\n}\n\nexport interface TransformTreeDefaultValueOpts {\n    nodes: ParamMultiTreeItem[];\n    textValueMap: {[key: string]: string};\n}\n"]}