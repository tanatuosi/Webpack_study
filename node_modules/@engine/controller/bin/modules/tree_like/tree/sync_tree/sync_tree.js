var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { shortcut } from '@engine/core';
import { mergeTreeValue, transformTreeNodesToJson } from '../tree.service';
let SyncTree = class SyncTree extends BI.AbstractTreeValueChooser {
    constructor() {
        super(...arguments);
        this.isAutoExpand = true;
        this.props = {
            baseCls: 'bi-tree-value-chooser-pane',
            items: null,
            itemsCreator: BI.emptyFn,
            value: undefined,
        };
    }
    _init() {
        super._init.apply(this, arguments);
        this.pane = BI.createWidget({
            type: BI.AsyncTree.xtype,
            element: this,
            itemsCreator: BI.bind(this._itemsCreator, this),
        });
        this.pane.on(BI.MultiSelectTree.EVENT_CHANGE, () => {
            this.fireEvent('EVENT_CHANGE');
        });
    }
    setSelectedValue(v) {
        this.options.value = this.mergeValues(v);
        this.pane.setSelectedValue(this.options.value || {});
    }
    setValue(v) {
        this.setSelectedValue(v);
    }
    getValue() {
        return this.pane.getValue();
    }
    /**
     * 公开接口，获取已选值，全选的值会被合并
     */
    getSelectedValue() {
        return this.mergeValues(this.pane.getValue());
    }
    populate() {
        const o = this.options;
        o.itemsCreator({}, (v) => {
            this._initData(v.items);
            this.nodesItems = v.items;
            this.setValue(o.value);
            this.pane.populate();
            this.expandSelectedChildrenNode(this.isAutoExpand);
        });
    }
    enableAutoExpand() {
        this.isAutoExpand = true;
    }
    /**
     * 是否自动展开节点
     * @param parentNode 如果是根节点传true，不然传父节点
     */
    expandSelectedChildrenNode(parentNode) {
        setTimeout(() => {
            const tree = this.pane.nodes;
            const treeId = tree.setting.treeId;
            const nodes = parentNode === true ? tree.getNodes() : parentNode === null || parentNode === void 0 ? void 0 : parentNode.children;
            nodes && nodes.forEach((node) => {
                const foundNode = this.nodesItems.find(nodeitem => nodeitem.id === node.id);
                if (!foundNode || !((foundNode === null || foundNode === void 0 ? void 0 : foundNode.open) || node.checked)) {
                    return;
                }
                this.expandNode(treeId, node);
                this.expandSelectedChildrenNode(node);
            });
        }, 17);
    }
    expandNode(treeId, node) {
        this.pane._beforeExpandNode(treeId, node);
    }
    /**
     * 同步树节点，手动合并下值
     * @param value 值
     */
    mergeValues(value) {
        var _a;
        if (!value || BI.isEmptyObject(value)) {
            return value;
        }
        return mergeTreeValue(value, transformTreeNodesToJson((_a = this.tree) === null || _a === void 0 ? void 0 : _a.toJSON()));
    }
};
SyncTree.xtype = 'report.main.parameter_container.controller.sync_tree';
SyncTree = __decorate([
    shortcut()
], SyncTree);
export { SyncTree };
//# sourceMappingURL=sync_tree.js.map