var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { shortcut } from '@engine/core';
let ListSyncTree = class ListSyncTree extends BI.AbstractListTreeValueChooser {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'bi-tree-value-chooser-pane',
            items: null,
            itemsCreator: BI.emptyFn,
            value: undefined,
        };
    }
    _init() {
        super._init.apply(this, arguments);
        const o = this.options;
        this.pane = BI.createWidget({
            type: BI.ListAsyncTree.xtype,
            element: this,
            itemsCreator: BI.bind(this._itemsCreator, this),
            value: o.value,
        });
        this.pane.on(BI.MultiSelectTree.EVENT_CHANGE, () => {
            this.fireEvent('EVENT_CHANGE');
        });
    }
    setSelectedValue(v) {
        this.pane.setSelectedValue(v);
    }
    setValue(v) {
        this.setSelectedValue(v);
    }
    getValue() {
        return this.pane.getValue();
    }
    populate() {
        const o = this.options;
        o.itemsCreator({}, (v) => {
            this._initData(v.items);
            this.pane.populate();
        });
    }
};
ListSyncTree.xtype = 'report.main.parameter_container.controller.list_sync_tree';
ListSyncTree = __decorate([
    shortcut()
], ListSyncTree);
export { ListSyncTree };
//# sourceMappingURL=list_sync_tree.js.map