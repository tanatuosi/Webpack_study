{"version":3,"file":"list_sync_tree.js","sourceRoot":"","sources":["../../../../../src/modules/tree_like/tree/sync_tree/list_sync_tree.ts"],"names":[],"mappings":";;;;;;AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAGxC,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,EAAE,CAAC,4BAA4B;IAAjE;;QAKW,UAAK,GAAG;YACX,OAAO,EAAE,4BAA4B;YACrC,KAAK,EAAE,IAAI;YACX,YAAY,EAAE,EAAE,CAAC,OAAO;YACxB,KAAK,EAAE,SAAgB;SAC1B,CAAA;IAqCL,CAAC;IAnCU,KAAK;QACR,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACnC,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC;YACxB,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK;YAC5B,OAAO,EAAE,IAAI;YACb,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC;YAC/C,KAAK,EAAE,CAAC,CAAC,KAAK;SACjB,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,YAAY,EAAE,GAAG,EAAE;YAC/C,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,gBAAgB,CAAC,CAAM;QAC1B,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC;IAEM,QAAQ,CAAC,CAAM;QAClB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAChC,CAAC;IAEM,QAAQ;QACX,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;QAEvB,CAAC,CAAC,YAAY,CAAC,EAAE,EAAE,CAAC,CAAM,EAAE,EAAE;YAC1B,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ,CAAA;AA9CiB,kBAAK,GAAG,2DAA2D,CAAC;AADzE,YAAY;IADxB,QAAQ,EAAE;GACE,YAAY,CA+CxB;SA/CY,YAAY","sourcesContent":["import { ListAsyncTree } from '@fui/core';\nimport { shortcut } from '@engine/core';\n\n@shortcut()\nexport class ListSyncTree extends BI.AbstractListTreeValueChooser {\n    public static xtype = 'report.main.parameter_container.controller.list_sync_tree';\n\n    private pane: ListAsyncTree;\n\n    public props = {\n        baseCls: 'bi-tree-value-chooser-pane',\n        items: null,\n        itemsCreator: BI.emptyFn,\n        value: undefined as any,\n    }\n\n    public _init() {\n        super._init.apply(this, arguments);\n        const o = this.options;\n        this.pane = BI.createWidget({\n            type: BI.ListAsyncTree.xtype,\n            element: this,\n            itemsCreator: BI.bind(this._itemsCreator, this),\n            value: o.value,\n        });\n\n        this.pane.on(BI.MultiSelectTree.EVENT_CHANGE, () => {\n            this.fireEvent('EVENT_CHANGE');\n        });\n    }\n\n    public setSelectedValue(v: any) {\n        this.pane.setSelectedValue(v);\n    }\n\n    public setValue(v: any) {\n        this.setSelectedValue(v);\n    }\n\n    public getValue () {\n        return this.pane.getValue();\n    }\n\n    public populate() {\n        const o = this.options;\n\n        o.itemsCreator({}, (v: any) => {\n            this._initData(v.items);\n            this.pane.populate();\n        });\n    }\n}\n"]}