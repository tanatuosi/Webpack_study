var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterTree_1;
import { shortcut } from '@engine/core';
import { HEIGHT, WIDTH } from '../../controller.constants';
import { fetchNewParamTreeControlAttr, fetchNewParamTreeStructure, fetchOldParamTreeControlAttr } from '../../controller.crud';
import { ParameterTreeLike } from '../tree_like';
import { getParamTreeLayout, transformTreeDefaultValue } from '../tree_like.service';
import { PARAMETER_TREE_BASE_CLS } from './tree.constants';
import './tree.less';
import { setTreeFontSize, setTreeStyle } from './tree.service';
let ParameterTree = ParameterTree_1 = class ParameterTree extends ParameterTreeLike {
    constructor() {
        super(...arguments);
        this.nodes = [];
        this.textValueMap = {};
        this.props = {
            baseCls: ParameterTree_1.BASE_CLS,
            $testId: ParameterTree_1.BASE_CLS,
            width: WIDTH,
            height: HEIGHT,
            value: undefined,
            widgetName: '',
            disabled: false,
            invisible: false,
            needSubmit: true,
            fontSize: 12,
            controlAttr: {
                data: [{
                        ChildNodes: [],
                        isexpand: false,
                        hasChildren: false,
                        id: 1,
                        text: '',
                        showcheck: false,
                        complete: true,
                        value: '',
                        checkstate: 0,
                    }],
                value: '',
            },
            async: true,
            mutiSelection: true,
            returnFullPath: false,
            selectLeafOnly: false,
            delimiter: ';',
            allowBlank: true,
            errorMsg: BI.i18nText('Fine-Report_Preview_Can_Not_Null'),
            isLayerBuild: false,
            getDependenceByWidget: () => [],
            getWidgetDependenceValueByWidget: () => {
                return {};
            },
            add2WaitingQueue: () => '',
            removeFromWaitingQueue: () => { },
            extraOptsGetter: () => {
                return {};
            },
            oldTreeControlAttrFetcher: fetchOldParamTreeControlAttr,
            newTreeControlAttrFetcher: fetchNewParamTreeControlAttr,
            newTreeStructureFetcher: fetchNewParamTreeStructure,
            allowBg: true,
            needCheckCustomData: true,
        };
    }
    isTreeWidget() {
        return true;
    }
    render() {
        const { width, height, mutiSelection: multiSelection, selectLeafOnly, controlAttr, value, fontSize, disabled, add2WaitingQueue, removeFromWaitingQueue, allowBg } = this.options;
        this.updateCacheByControlAttrData(controlAttr.data);
        this.defaultTreeValue = transformTreeDefaultValue(value, multiSelection, selectLeafOnly, {
            textValueMap: this.textValueMap,
            nodes: this.nodes,
        });
        this.value = this.defaultTreeValue;
        !multiSelection && this.defaultTreeValue && this.transformSingleTreeValue2Node(this.defaultTreeValue);
        return {
            type: BI.VerticalLayout.xtype,
            cls: allowBg ? 'bi-card' : '',
            items: [{
                    type: getParamTreeLayout(multiSelection, selectLeafOnly, this.isAsyncTree()),
                    cls: `${setTreeFontSize(ParameterTree_1.BASE_CLS, fontSize)}`,
                    ref: (_ref) => {
                        this.tree = _ref;
                    },
                    width,
                    height,
                    itemsCreator: (op, callback) => {
                        !this.silence && this.fireEvent('nodeadd');
                        const cb = async () => {
                            const data = !this.isAsyncTree()
                                ? await this.syncTreeItemCreator()
                                : multiSelection ? await this.multiAsyncTreeItemCreator(op) : await this.singleAsyncTreeItemCreator(op);
                            if ('items' in data) {
                                this.transformSyncSingleTreeItem(data.items);
                            }
                            callback(data);
                            disabled && this.setEnable(!disabled);
                        };
                        cb();
                    },
                    value: this.defaultTreeValue,
                    listeners: [{
                            eventName: 'EVENT_CHANGE',
                            action: () => {
                                this.hideBubble();
                                const id = add2WaitingQueue();
                                this.rebuildMultiTree(undefined, true)
                                    .then(() => {
                                    removeFromWaitingQueue(id);
                                    !this.silence && this.fireEvent('click');
                                });
                            },
                        }],
                    minHeight: height,
                }],
        };
    }
    async setValue(v, data) {
        this.updateCacheByControlAttrData(data);
        this.setControllerValue(v, data || []);
        this.fireEvent('EVENT_SET_VALUE');
    }
    async setControllerValue(v, data) {
        await super.setControllerValue(v, data);
        this.tree.populate();
    }
    setTreeValue(v) {
        this.tree.setSelectedValue ? this.tree.setSelectedValue(v) : this.tree.setValue(v);
    }
    async mounted() {
        super.mounted();
        // 单选的custom_tree会自己创建节点
        if (this.options.mutiSelection) {
            this.tree.populate();
        }
        await this.rebuildMultiTree(this.defaultTreeValue, false);
    }
    /**
     * 开启自动展开已选节点
     */
    enableAutoExpand() {
        var _a, _b;
        (_b = (_a = this.tree).enableAutoExpand) === null || _b === void 0 ? void 0 : _b.call(_a, true);
    }
    reset() {
        super.reset();
        this.tree.populate();
    }
    reloadControlAttr() {
        this.reset();
    }
    /**
     * 公开接口，获取已选值，全选的值会被合并
     */
    getSelectedValue() {
        return this.tree.getSelectedValue ? this.tree.getSelectedValue() : this.tree.getValue();
    }
    setStyle(styles) {
        this.tree.element.addClass(setTreeStyle(styles));
    }
    getText() {
        return '';
    }
};
ParameterTree.xtype = 'report.main.parameter_container.controller.tree';
ParameterTree.BASE_CLS = PARAMETER_TREE_BASE_CLS;
ParameterTree = ParameterTree_1 = __decorate([
    shortcut()
], ParameterTree);
export { ParameterTree };
//# sourceMappingURL=tree.js.map