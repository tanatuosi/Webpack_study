import jss from 'jss';
import jssGlobal from 'jss-plugin-global';
import jssNested from 'jss-plugin-nested';
import { setFontSize } from '../../controller.service';
import { PARAMETER_TREE_BASE_CLS } from './tree.constants';
const fontSizeSplitValue = 20;
/**
 * 获取多选树样式
 * @param selector 选择器
 * @param $fontSize 字体大小
 * @returns 样式
 */
function getMultiTreeStyleByFontSize(selector, $fontSize) {
    const { height, fontSize } = $fontSize <= fontSizeSplitValue
        ? { height: 24, fontSize: Math.max($fontSize, fontSizeSplitValue) }
        : { height: calcItemHeightByFontSize($fontSize), fontSize: Math.max($fontSize, fontSizeSplitValue) };
    const checkboxDefaultSize = 14;
    const left = (24 - height) / 2;
    const checkboxSize = height / 24 * checkboxDefaultSize;
    return {
        [`${selector} .ztree li span.button.switch`]: {
            width: `${height}px !important`,
            height: `${height}px !important`,
            left: `${left}px`,
        },
        [`${selector} .ztree li span.button.chk`]: {
            width: `${checkboxSize}px !important`,
            height: `${checkboxSize}px !important`,
            left: `${checkboxSize - checkboxDefaultSize + left}px`,
        },
        [`${selector} .ztree li span.button.chk:after`]: {
            width: `${height / 24 * 6}px !important`,
            height: `${height / 24 * 9}px !important`,
        },
        [`${selector} .ztree li span.button.chk.bi-half-button:after`]: {
            width: `${height / 24 * 8}px !important`,
            height: `${height / 24 * 8}px !important`,
            left: `${height / 24 * 2}px !important`,
            top: `${height / 24 * 2}px !important`,
        },
        [`${selector} .ztree li a`]: {
            height: `${height}px !important`,
        },
        [`${selector} .ztree li a span`]: {
            'line-height': `${height}px !important`,
        },
        [`${selector} .ztree li ul.line:before`]: {
            left: `${height <= 24 ? 11 : fontSize / 1.5 + 1}px`,
            'border-left-width': `${height <= 24 ? 1 : fontSize / 12}px`,
        },
        [`${selector} .ztree li ul`]: {
            'padding-left': `${height <= 24 ? 18 : height + left}px`,
        },
    };
}
/**
 * 获取单选树样式
 * @param selector 选择器
 * @param fontSize 字体大小
 * @returns 样式
 */
function getSingleTreeStyleByFontSize(selector, fontSize) {
    const height = calcItemHeightByFontSize(fontSize);
    const left = Math.max((24 - height) / 2, 0);
    return {
        [`${selector} .bi-icon-button i`]: {
            width: `${height}px !important`,
            height: `${height}px !important`,
            left: `${left}px`,
        },
        [`${selector} .mid-line-conn-background`]: {
            width: `${height}px !important`,
            height: `${height}px !important`,
            'background-size': 'contain',
        },
        [`${selector} .last-line-conn-background`]: {
            width: `${height}px !important`,
            height: `${height}px !important`,
            'background-size': 'contain',
        },
        [`${selector} .first-line-conn-background`]: {
            width: `${height}px !important`,
            height: `${height}px !important`,
            'background-size': 'contain',
        },
        [`${selector} .mid-line-conn-background + div`]: {
            height: `${height}px !important`,
            'line-height': `${height}px !important`,
        },
        [`${selector} .last-line-conn-background + div`]: {
            height: `${height}px !important`,
            'line-height': `${height}px !important`,
        },
        [`${selector} .first-line-conn-background + div`]: {
            height: `${height}px !important`,
            'line-height': `${height}px !important`,
        },
        [`${selector} .bi-multilayer-single-tree-mid-tree-leaf-item`]: {
            height: `${height}px !important`,
        },
        [`${selector} .bi-multilayer-single-tree-mid-tree-leaf-item .bi-mid-tree-leaf-item`]: {
            height: `${height}px !important`,
        },
        [`${selector} .bi-node`]: {
            height: `${height}px !important`,
        },
        [`${selector} .bi-mid-plus-group-node`]: {
            height: `${height}px !important`,
        },
        [`${selector} .bi-mid-plus-group-node .bi-label`]: {
            height: `${height}px !important`,
            'line-height': `${height}px !important`,
        },
        [`${selector} .bi-multilayer-single-tree-last-tree-leaf-item`]: {
            height: `${height}px !important`,
        },
        [`${selector} .bi-multilayer-single-tree-last-tree-leaf-item .bi-last-tree-leaf-item`]: {
            height: `${height}px !important`,
        },
    };
}
export function setTreeFontSize(baseCls, fontSize) {
    const cls = setFontSize(baseCls, fontSize);
    const selector = `.${cls}`;
    jss.use(jssGlobal(), jssNested());
    jss.createStyleSheet({
        '@global': Object.assign(Object.assign({}, getSingleTreeStyleByFontSize(selector, fontSize)), getMultiTreeStyleByFontSize(selector, fontSize)),
    }).attach();
    return cls;
}
/**
 * 根据字体大小计算行高
 * @param fontSize 字体大小
 */
function calcItemHeightByFontSize(fontSize) {
    return fontSize > fontSizeSplitValue ? fontSize * 1.5 : 24;
}
/**
 * 合并树的值，全选中则置为{}
 * @param value 输的值
 * @param fullValue 完成树json
 */
export function mergeTreeValue(value, fullValue) {
    for (const key in value) {
        // 如果和tree完全相同，则置为全选
        if (BI.isEqual(fullValue[key], value[key])) {
            value[key] = {};
            continue;
        }
        // 若完整树里没有这个节点，则此节点为新增，默认全选
        if (BI.isNull(fullValue[key])) {
            value[key] = {};
            continue;
        }
        // 不完全相同则去下一层比较值
        value[key] = mergeTreeValue(value[key], fullValue[key]);
    }
    return value;
}
/**
 * 转换树节点数据为JSON
 * @param nodes 节点
 * @param valueReference value依赖
 */
export function transformTreeNodesToJson(nodes = [], valueReference = {}) {
    nodes.forEach(node => {
        valueReference[node.value] = {};
        transformTreeNodesToJson(node.children, valueReference[node.value]);
    });
    return valueReference;
}
export function setTreeStyle({ opacity, background, color, border, ['border-radius']: borderRadius }) {
    jss.use(jssGlobal(), jssNested());
    const cls = `${PARAMETER_TREE_BASE_CLS}-${BI.UUID()}`;
    const selector = `.${cls}`;
    jss.createStyleSheet({
        '@global': {
            [`${selector}`]: {
                opacity,
                background,
                color,
            },
            [`${selector} .bi-border`]: {
                border,
                'boder-radius': borderRadius,
            },
        },
    }).attach();
    return cls;
}
//# sourceMappingURL=tree.service.js.map