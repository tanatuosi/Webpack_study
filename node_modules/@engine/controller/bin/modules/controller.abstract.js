export class AbstractParameterControllerWidget extends BI.Widget {
    constructor() {
        super(...arguments);
        this.bubbleName = BI.UUID();
        this.silence = false;
    }
    isUnavailableState() {
        return !this.isEnabled() || !this.isVisible();
    }
    /**
     * 控件校验
     */
    validate() {
        return this.getValidation().result === true;
    }
    /**
     * 手动发出编辑结束事件
     */
    emitManualStopEditEvent() { }
    /**
     * 设置事件状态
     */
    setSilent(isSilent) {
        this.silence = isSilent;
    }
    /**
     * 赋值
     */
    setValue(...args) {
        Promise.resolve(this.setControllerValue(...args))
            .then(() => {
            this.hideBubble();
            this.fireEvent('EVENT_SET_VALUE');
        });
    }
    /**
     * 自定义js接口，控件内部不允许使用
     */
    setText(...args) {
        this.setValue(...args);
    }
    /**
     * 基于原始value的一种校验，仅用于校验invisible以及disabled的控件
     */
    preValidateAndToast() {
        const validation = this.preGetValidation();
        if (validation.result !== true) {
            BI.Msg.toast(`${this.attr('widgetName')}: ${validation.errorMsg}`, { level: 'error' });
            return false;
        }
        return true;
    }
    /**
     * 获取校验结果
     */
    getValidation() {
        if (this.isUnavailableState()) {
            return this.preGetValidation();
        }
        return this.postGetValidation();
    }
    /**
     * 校验以及报错
     */
    validateAndToast() {
        if (this.isUnavailableState()) {
            return this.preValidateAndToast();
        }
        return this.postValidateAndToast();
    }
    /**
     * 校验并Msg toast
     */
    validateAndMsgToast(name = this.attr('widgetName') || '') {
        const validation = this.getValidation();
        if (validation.result) {
            return true;
        }
        BI.Msg.toast(`${name}: ${validation.errorMsg}`, { level: 'error' });
        return false;
    }
    showBubble(v) {
        BI.Bubbles.show(this.bubbleName, v, this, {
            offsetStyle: 'left',
        });
    }
    hideBubble() {
        BI.Bubbles.hide(this.bubbleName, this, {
            offsetStyle: 'left',
        });
    }
    refresh() { }
    mounted() {
        this.fireEvent('afterinit');
    }
    resize(width, height) {
        const state = this.isEnabled();
        this.preResize(width, height);
        this.setEnable(state);
    }
    preResize(width, height) {
        if (this.options.width === width && this.options.height === height) {
            return false;
        }
        this.options.width = width;
        this.options.height = height;
        this.element.css('width', width);
        this.element.css('height', height);
        // reset 将组件干掉重新创建一遍，重走生命周期到mounted
        super.reset();
        return true;
    }
    setFontSize(fontSize) {
        this.options.fontSize = fontSize;
    }
    getAdapter() {
        return undefined;
    }
    /**
     * 清空值并重新加载数据字典，仅有数据字典的生效
     */
    reloadControlAttr() { }
    focus() { }
    blur() { }
    getType() {
        return this.attr('xtype');
    }
    /**
     * 用于提交的值
     */
    getSubmitValue() {
        const widgetName = this.attr('widgetName');
        return {
            [widgetName]: this.getValue(),
        };
    }
}
//# sourceMappingURL=controller.abstract.js.map