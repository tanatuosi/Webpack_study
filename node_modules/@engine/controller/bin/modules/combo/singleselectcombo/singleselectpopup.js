var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterSingleSelectPopup_1;
import { shortcut, store } from '@engine/core';
import { ParameterSingleSelectPopupModel } from './singleselectpopup.model';
let ParameterSingleSelectPopup = ParameterSingleSelectPopup_1 = class ParameterSingleSelectPopup extends BI.Widget {
    constructor() {
        super(...arguments);
        this.props = {
            itemsCreator: BI.emptyFn,
            keywordGetter: () => undefined,
            valueGetter: () => undefined,
            unmatchedValueGetter: () => [],
            minWidth: 135,
            maxHeight: 400,
            height: 72,
            value: undefined,
            customData: true,
            allowNoSelect: true,
            repopulateGetter: () => false,
            name4EmptyGetter: () => '',
            itemHeightGetter: () => 24,
            maxCountGetter: () => 0,
            popupAdjuster: () => { },
            tipText: '',
        };
        this.unmatchedValues = [];
        this.hasNext = false;
        this.afterInit = false;
    }
    render() {
        const { itemsCreator, itemHeightGetter, keywordGetter, value, allowNoSelect, tipText } = this.options;
        this.value = BI.deepClone(value);
        return {
            type: BI.VTapeLayout.xtype,
            ref: (_ref) => {
                this.vtapeWrapper = _ref;
            },
            items: [{
                    el: {
                        type: BI.VerticalLayout.xtype,
                        scrolly: false,
                        items: [{
                                type: BI.SingleSelectItem.xtype,
                                cls: 'bi-list-item-active',
                                iconWrapperWidth: 36,
                                ref: (_ref) => {
                                    this.notSelectBtn = _ref;
                                },
                                text: () => this.model.name4Empty,
                                invisible: !allowNoSelect,
                                height: itemHeightGetter(),
                                listeners: [{
                                        eventName: BI.SingleSelectItem.EVENT_CHANGE,
                                        action: () => {
                                            this.fireEvent(ParameterSingleSelectPopup_1.EVENT_CLEAR);
                                            this.notSelectBtn.setSelected(false);
                                        },
                                    }],
                            }, {
                                type: BI.TextButton.xtype,
                                ref: (_ref) => {
                                    this.addTextBtn = _ref;
                                },
                                invisible: true,
                                text: BI.i18nText('BI-Basic_Click_To_Add_Text', ''),
                                height: itemHeightGetter(),
                                cls: 'bi-high-light',
                                hgap: 5,
                                handler: () => {
                                    this.fireEvent(ParameterSingleSelectPopup_1.EVENT_CHANGE, keywordGetter(), keywordGetter(), true);
                                },
                            }],
                    },
                    height: itemHeightGetter(),
                }, {
                    type: BI.ListPane.xtype,
                    tipText,
                    ref: (_ref) => {
                        this.pane = _ref;
                    },
                    itemsCreator: (op, callback) => {
                        const keyword = keywordGetter();
                        op.keyword = keyword;
                        itemsCreator(op, (data) => {
                            this.hasNext = data.hasNext;
                            data.items = this.transformItems(data.items);
                            callback(this.createItems(data.items));
                            if (op.times === 1) {
                                this.resizeLayout(data.items);
                                this.resize(BI.size(data.items) > 0);
                            }
                        });
                    },
                    el: {
                        type: BI.Loader.xtype,
                        ref: (_ref) => {
                            this.loader = _ref;
                        },
                        el: {
                            chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
                        },
                        layouts: [{
                                type: BI.VerticalLayout.xtype,
                                height: 400,
                                minHeight: 400,
                                scrolly: true,
                            }],
                    },
                    hasNext: () => this.hasNext,
                    listeners: [{
                            eventName: BI.Pane.EVENT_LOADED,
                            action: () => {
                                this.fireEvent(ParameterSingleSelectPopup_1.EVENT_LOADED);
                            },
                        }],
                }],
        };
    }
    resizeLayout(items) {
        const { allowNoSelect, itemHeightGetter } = this.options;
        this.vtapeWrapper.attr('items')[0].height = BI.size(items) === 0 || !allowNoSelect ? 0 : itemHeightGetter();
        this.vtapeWrapper.resize();
    }
    resize(isHeaderVisible) {
        const { itemHeightGetter, allowNoSelect, maxCountGetter } = this.options;
        const height = allowNoSelect ? itemHeightGetter() : 0;
        // 自定义js，限制显示的条目数
        const maxHeight = maxCountGetter() * itemHeightGetter();
        BI.nextTick(() => {
            this.handleResize(isHeaderVisible, (maxHeight || this.loader.element.height() || itemHeightGetter()) + height);
        });
    }
    resetResize(isHeaderVisible) {
        this.handleResize(isHeaderVisible, 72);
    }
    handleResize(isHeaderVisible, paneHeight) {
        if (!this.afterInit) {
            this.afterInit = true;
            return;
        }
        const { itemHeightGetter, allowNoSelect, popupAdjuster, keywordGetter } = this.options;
        const height = allowNoSelect ? itemHeightGetter() : 0;
        this.pane.setTipVisible(!isHeaderVisible);
        if (!keywordGetter()) {
            this.vtapeWrapper.element.css('height', paneHeight);
            this.vtapeWrapper.attr('items')[0].height = isHeaderVisible ? height : 0;
            this.vtapeWrapper.resize();
            popupAdjuster();
        }
    }
    transformItems(items) {
        let i = 0;
        // 匹配未匹配项里的item
        while (i < this.unmatchedValues.length) {
            const selectedValue = this.unmatchedValues[i];
            const itemIndex = items.findIndex(item => item.text === selectedValue.text && item.value === selectedValue.value);
            if (itemIndex !== -1) {
                items.splice(itemIndex, 1);
                this.unmatchedValues.splice(i, 1);
            }
            else {
                i += 1;
            }
        }
        items.some(item => {
            if (BI.isNull(this.value)) {
                return true;
            }
            const isMatched = item.text === this.value.text && item.value === this.value.value;
            if (isMatched) {
                item.selected = true;
                this.value = undefined;
                return true;
            }
            return false;
        });
        const newItems = this.value ? [Object.assign(Object.assign({}, this.value), { selected: true })] : [];
        if (this.value) {
            this.unmatchedValues.push(this.value);
        }
        this.value = undefined;
        return items.concat(newItems);
    }
    getValue() {
        const btn = this.pane.getAllButtons()
            .find(btn => btn.isSelected());
        return btn ? {
            text: btn.attr('text'),
            value: btn.getValue(),
        } : undefined;
    }
    getAllLeaves() {
        return this.pane.getAllButtons()
            .map(btn => {
            return {
                text: btn.attr('text'),
                value: btn.getValue(),
            };
        });
    }
    populate() {
        this.pane.populate();
    }
    setAllUnselected() {
        this.pane.getAllButtons().forEach(btn => {
            btn.setSelected(false);
        });
    }
    selectNextItem() {
        const selectItems = this.pane.getAllButtons();
        const selectedIndex = selectItems.findIndex(btn => btn.isSelected());
        if (selectedIndex + 1 < selectItems.length) {
            selectedIndex >= 0 && selectItems[selectedIndex].setSelected(false);
            selectItems[selectedIndex + 1].setSelected(true);
        }
    }
    selectPreItem() {
        const selectItems = this.pane.getAllButtons();
        const selectedIndex = selectItems.findIndex(btn => btn.isSelected());
        if (selectedIndex > 0) {
            selectItems[selectedIndex].setSelected(false);
            selectItems[selectedIndex - 1].setSelected(true);
        }
    }
    createItems(items) {
        return BI.createItems(items, {
            type: BI.SingleSelectItem.xtype,
            cls: 'bi-list-item-active',
            iconWrapperWidth: 36,
            height: this.options.itemHeightGetter(),
            keyword: this.options.keywordGetter(),
            $testId: 'report-main-parameter-container-controller-combo-item',
            listeners: [{
                    eventName: BI.SingleSelectItem.EVENT_CHANGE,
                    action: (_v, btn) => {
                        this.fireEvent(ParameterSingleSelectPopup_1.EVENT_CHANGE, btn.attr('text'), btn.getValue(), btn.isSelected());
                    },
                }],
        });
    }
    switchState(text, value) {
        let isMatched = false;
        this.pane.getAllButtons().forEach(btn => {
            // 已经找到匹配项的话，后续节点全部不选
            if (isMatched) {
                btn.setSelected(false);
                return;
            }
            // 是否完全匹配
            isMatched = btn.attr('text') === text && btn.getValue() === value;
            btn.setSelected(isMatched);
        });
        // 没有找到符合项或者需要重新刷新时，就添加上去
        if (!isMatched || this.options.repopulateGetter()) {
            this.pane.addItems(this.createItems([{
                    text,
                    value,
                    selected: true,
                }]));
            if (this.options.repopulateGetter()) {
                this.value = { text, value };
            }
            else {
                this.unmatchedValues.push({ text, value });
            }
        }
    }
    setValue(val) {
        this.setAllUnselected();
        if (BI.isNotNull(val)) {
            this.switchState(val.text, val.value);
        }
    }
    getUnmatchedValues() {
        return this.unmatchedValues;
    }
    resetState() {
        this.unmatchedValues = [];
        this.value = undefined;
        this.hasNext = false;
    }
    updateName4Empty() {
        this.store.updateName4Empty();
    }
};
ParameterSingleSelectPopup.xtype = 'report-single-select-popup';
ParameterSingleSelectPopup.EVENT_CHANGE = 'EVENT_CHANGE';
ParameterSingleSelectPopup.EVENT_CLEAR = 'EVENT_CLEAR';
ParameterSingleSelectPopup.EVENT_LOADED = 'EVENT_LOADED';
ParameterSingleSelectPopup = ParameterSingleSelectPopup_1 = __decorate([
    shortcut(),
    store(ParameterSingleSelectPopupModel, {
        props() {
            return {
                name4EmptyGetter: this.options.name4EmptyGetter,
            };
        },
    })
], ParameterSingleSelectPopup);
export { ParameterSingleSelectPopup };
//# sourceMappingURL=singleselectpopup.js.map