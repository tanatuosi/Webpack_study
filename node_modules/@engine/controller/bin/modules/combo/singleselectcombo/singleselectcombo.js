var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterSingleSelectCombo_1;
import { ParameterSingleSelectTrigger } from './singleselecttrigger';
import { shortcut } from '@engine/core';
import { ParameterSingleSelectPopup } from './singleselectpopup';
import { PopupMaxHeight } from '../../controller.service';
import { COMBO_POPUP_HEIGHT } from './singleselectcombo.constants';
let ParameterSingleSelectCombo = ParameterSingleSelectCombo_1 = class ParameterSingleSelectCombo extends BI.Widget {
    constructor() {
        super(...arguments);
        this.repopulate = false;
        this.needResize = false;
        this.props = {
            baseCls: 'bi-search-text-value-combo',
            height: 24,
            text: '',
            items: [],
            tipType: '',
            warningTitle: '',
            attributes: {
                tabIndex: 0,
            },
            title: '',
            value: undefined,
            itemsCreator: BI.emptyFn,
            watermark: '',
            allowEdit: false,
            customData: true,
            allowNoSelect: true,
            controlDataGetter: () => [],
            name4EmptyGetter: () => '',
            itemHeightGetter: () => 24,
            maxCountGetter: () => 0,
        };
    }
    render() {
        const { height, value, text, tipType, warningTitle, title, itemsCreator, watermark, allowEdit, customData, allowNoSelect, name4EmptyGetter, itemHeightGetter, maxCountGetter } = this.options;
        return {
            type: BI.AbsoluteLayout.xtype,
            items: [{
                    el: {
                        type: BI.Combo.xtype,
                        adjustLength: 2,
                        toggle: !allowEdit,
                        ref: (_ref) => {
                            this.combo = _ref;
                        },
                        el: {
                            type: ParameterSingleSelectTrigger.xtype,
                            customData,
                            watermark,
                            allowEdit,
                            itemHeightGetter,
                            cls: 'search-text-value-trigger bi-border-radius',
                            ref: (_ref) => {
                                this.trigger = _ref;
                            },
                            height: height - 2,
                            text,
                            value,
                            tipType,
                            warningTitle,
                            itemsCreator,
                            valueGetter: () => this.popup ? this.popup.getValue() : value,
                            unmatchedValueGetter: () => this.popup ? this.popup.getUnmatchedValues() : value,
                            title,
                            listeners: [{
                                    eventName: ParameterSingleSelectTrigger.EVENT_FOCUS,
                                    action: () => {
                                        // combo里会监听click事件，如果这里也showView的话会触发两次popupView，导致在popup初始化的时候会resize，让loading动画的位置发生偏移，先注释掉
                                        // this.showView();
                                        this.fireEvent(ParameterSingleSelectCombo_1.EVENT_BEFORE_EDIT);
                                    },
                                }, {
                                    eventName: ParameterSingleSelectTrigger.EVENT_CHANGE,
                                    action: (text, value) => {
                                        this.popup.switchState(text, value);
                                        this.fireEvent(ParameterSingleSelectCombo_1.EVENT_CLICK_ITEM);
                                        this.fireEvent(ParameterSingleSelectCombo_1.EVENT_AFTER_EDIT);
                                        this.combo.hideView();
                                    },
                                }, {
                                    eventName: ParameterSingleSelectTrigger.EVENT_SEARCHING,
                                    action: () => {
                                        this.fireEvent(ParameterSingleSelectCombo_1.EVENT_AFTER_EDIT);
                                    },
                                }, {
                                    eventName: ParameterSingleSelectTrigger.EVENT_BLUR,
                                    action: () => {
                                        this.fireEvent(ParameterSingleSelectCombo_1.EVENT_BLUR);
                                    },
                                }, {
                                    eventName: ParameterSingleSelectTrigger.EVENT_CLICK,
                                    action: () => {
                                        this.showView();
                                    },
                                }],
                        },
                        popup: {
                            minWidth: 135,
                            minHeight: COMBO_POPUP_HEIGHT,
                            maxHeight: PopupMaxHeight,
                            el: {
                                type: ParameterSingleSelectPopup.xtype,
                                name4EmptyGetter,
                                itemHeightGetter,
                                maxCountGetter,
                                allowNoSelect,
                                itemsCreator,
                                customData,
                                tipText: allowNoSelect ? '' : BI.i18nText('BI-No_Selected_Item'),
                                popupAdjuster: () => {
                                    this.combo.adjustHeight();
                                },
                                ref: (_ref) => {
                                    this.popup = _ref;
                                    this.trigger.setAdapter(this.popup);
                                },
                                repopulateGetter: () => this.repopulate,
                                listeners: [{
                                        eventName: ParameterSingleSelectPopup.EVENT_CHANGE,
                                        action: (text, value) => {
                                            this.setValue({ value, text });
                                            this.fireEvent(ParameterSingleSelectCombo_1.EVENT_CLICK_ITEM);
                                            this.fireEvent(ParameterSingleSelectCombo_1.EVENT_AFTER_EDIT);
                                            this.combo.hideView();
                                        },
                                    }, {
                                        eventName: ParameterSingleSelectPopup.EVENT_CLEAR,
                                        action: () => {
                                            this.reset();
                                            this.fireEvent(ParameterSingleSelectCombo_1.EVENT_CLICK_ITEM);
                                            this.fireEvent(ParameterSingleSelectCombo_1.EVENT_AFTER_EDIT);
                                            this.combo.hideView();
                                        },
                                    }, {
                                        eventName: ParameterSingleSelectPopup.EVENT_LOADED,
                                        action: () => {
                                            BI.nextTick(() => {
                                                this.trigger.isSearching() && this.trigger.adjustPopupHeight(this.popup);
                                            });
                                        },
                                    }],
                            },
                            value,
                        },
                        listeners: [{
                                eventName: BI.Combo.EVENT_AFTER_HIDEVIEW,
                                action: () => {
                                    const keyword = this.trigger.isSearching() ? this.getAdapter().getKeyword() : undefined;
                                    this.trigger.stopEditing();
                                    this.popup && this.setValue(this.popup.getValue());
                                    this.fireEvent(ParameterSingleSelectCombo_1.EVENT_CONFIRM, keyword);
                                },
                            }, {
                                eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
                                action: () => {
                                    this.fireEvent(ParameterSingleSelectCombo_1.EVENT_BEFORE_POPUPVIEW);
                                    if (this.repopulate) {
                                        this.populate([]);
                                        this.popup.resetResize(true);
                                        this.repopulate = false;
                                    }
                                    else {
                                        this.needResize = true;
                                    }
                                },
                            }, {
                                eventName: BI.Combo.EVENT_AFTER_POPUPVIEW,
                                action: () => {
                                    this.checkResize();
                                },
                            }],
                        hideChecker: (e) => this.triggerBtn.element.find(e.target).length === 0,
                    },
                    left: 0,
                    right: 0,
                    bottom: 0,
                    top: 0,
                }, {
                    el: {
                        type: BI.TriggerIconButton.xtype,
                        cls: 'trigger-icon-button',
                        ref: (_ref) => {
                            this.triggerBtn = _ref;
                        },
                        width: height,
                        height,
                        handler: () => {
                            if (this.combo.isViewVisible()) {
                                this.combo.hideView();
                                return;
                            }
                            this.showView();
                            this.fireEvent(ParameterSingleSelectCombo_1.EVENT_BEFORE_EDIT);
                        },
                    },
                    right: 0,
                    bottom: 0,
                    top: 0,
                }],
        };
    }
    mounted() {
        BI.EventListener.listen(this.element.context, 'keydown', (evt) => {
            var _a, _b;
            const isSearching = this.trigger && this.trigger.isSearching();
            switch (evt.keyCode) {
                case BI.KeyCode.DOWN:
                    (_a = (isSearching ? this.trigger : this.popup)) === null || _a === void 0 ? void 0 : _a.selectNextItem();
                    break;
                case BI.KeyCode.UP:
                    (_b = (isSearching ? this.trigger : this.popup)) === null || _b === void 0 ? void 0 : _b.selectPreItem();
                    break;
                case BI.KeyCode.ENTER:
                    if (isSearching) {
                        return;
                    }
                    this.combo.hideView();
                    break;
                default:
                    break;
            }
        });
    }
    focus() {
        this.trigger.focus();
        this.combo.showView();
        // TODO: 需要研究下为啥事件没触发
        this.checkResize();
    }
    blur() {
        this.trigger.blur();
        this.combo.hideView();
    }
    setRepopulate(v) {
        this.reset();
        this.popup && this.popup.resetState();
        // 如果初始化过，则需要重新初始化
        if (this.popup) {
            this.combo.isViewVisible() ? this.combo.populate() : this.repopulate = v;
            this.needResize = true;
        }
    }
    reset() {
        this.popup && this.popup.setAllUnselected();
        this.setValue();
    }
    showView() {
        this.combo.showView();
    }
    checkResize() {
        if (this.popup && this.needResize) {
            this.popup.resize(true);
            this.needResize = false;
        }
    }
    populate(items) {
        this.options.items = items;
        this.combo.populate(items);
    }
    setValue(v) {
        this.options.value = v;
        this.combo.setValue(v);
    }
    getValue() {
        return this.popup ? this.popup.getValue() : this.options.value;
    }
    validateData() {
        const data = this.getValue();
        const dataAttr = this.options.controlDataGetter();
        if (BI.isEmpty(data === null || data === void 0 ? void 0 : data.value)) {
            return true;
        }
        const validation = dataAttr.some(item => item.text === (data === null || data === void 0 ? void 0 : data.text) && item.value === (data === null || data === void 0 ? void 0 : data.value));
        return validation;
    }
    getAdapter() {
        return this.trigger.getSearcher();
    }
    setWaterMark(v) {
        this.trigger.setWaterMark(v);
    }
    updateName4Empty() {
        var _a;
        (_a = this.popup) === null || _a === void 0 ? void 0 : _a.updateName4Empty();
    }
};
ParameterSingleSelectCombo.EVENT_CHANGE = 'EVENT_CHANGE';
ParameterSingleSelectCombo.EVENT_BEFORE_POPUPVIEW = 'EVENT_BEFORE_POPUPVIEW';
ParameterSingleSelectCombo.EVENT_CONFIRM = 'EVENT_CONFIRM';
ParameterSingleSelectCombo.xtype = 'report.single_select_combo';
ParameterSingleSelectCombo.EVENT_BEFORE_EDIT = 'EVENT_BEFORE_EDIT';
ParameterSingleSelectCombo.EVENT_AFTER_EDIT = 'EVENT_AFTER_EDIT';
ParameterSingleSelectCombo.EVENT_CLICK_ITEM = 'EVENT_CLICK_ITEM';
ParameterSingleSelectCombo.EVENT_BLUR = 'EVENT_BLUR';
ParameterSingleSelectCombo = ParameterSingleSelectCombo_1 = __decorate([
    shortcut()
], ParameterSingleSelectCombo);
export { ParameterSingleSelectCombo };
//# sourceMappingURL=singleselectcombo.js.map