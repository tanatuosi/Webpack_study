var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ParameterSingleSelectTrigger_1;
import { shortcut } from '@engine/core';
import { ParameterSingleSelectPopup } from './singleselectpopup';
import { ParameterSingleSelectSearchPopup } from './singleselectsearchpopup';
let ParameterSingleSelectTrigger = ParameterSingleSelectTrigger_1 = class ParameterSingleSelectTrigger extends BI.Trigger {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'bi-search-text-value-trigger bi-border bi-focus-shadow',
            height: 24,
            itemsCreator: BI.emptyFn,
            valueGetter: () => undefined,
            unmatchedValueGetter: () => [],
            watermark: '',
            allowEdit: false,
            customData: true,
            itemHeightGetter: () => 24,
            value: '',
        };
    }
    render() {
        var _a;
        const { height, itemsCreator, valueGetter, watermark, unmatchedValueGetter, customData, itemHeightGetter } = this.options;
        return {
            type: BI.HTapeLayout.xtype,
            items: [
                {
                    el: {
                        type: BI.Searcher.xtype,
                        ref: (_ref) => {
                            this.searcher = _ref;
                        },
                        isAutoSearch: false,
                        el: {
                            type: BI.SignEditor.xtype,
                            ref: (_ref) => {
                                this.editor = _ref;
                            },
                            value: ((_a = valueGetter()) === null || _a === void 0 ? void 0 : _a.text) || '',
                            allowBlank: true,
                            watermark,
                            height,
                            listeners: [{
                                    eventName: BI.SignEditor.EVENT_FOCUS,
                                    action: () => {
                                        this.editor.setValue('');
                                        this.fireEvent(ParameterSingleSelectTrigger_1.EVENT_FOCUS);
                                    },
                                }, {
                                    eventName: BI.SignEditor.EVENT_BLUR,
                                    action: () => {
                                        this.fireEvent(ParameterSingleSelectTrigger_1.EVENT_BLUR);
                                    },
                                }, {
                                    eventName: BI.SignEditor.EVENT_CLICK,
                                    action: () => {
                                        this.fireEvent(ParameterSingleSelectTrigger_1.EVENT_CLICK);
                                    },
                                }, {
                                    eventName: BI.SignEditor.EVENT_KEY_DOWN,
                                    action: () => {
                                        this.fireEvent(ParameterSingleSelectTrigger_1.EVENT_KEY_DOWN);
                                    },
                                }],
                        },
                        popup: {
                            type: ParameterSingleSelectSearchPopup.xtype,
                            customData,
                            cls: 'bi-card',
                            ref: (_ref) => {
                                this.popup = _ref;
                            },
                            keywordGetter: () => this.editor.getValue(),
                            unmatchedValueGetter,
                            itemsCreator,
                            valueGetter,
                            itemHeightGetter,
                            listeners: [{
                                    eventName: ParameterSingleSelectPopup.EVENT_CHANGE,
                                    action: (text, value, isSelected) => {
                                        this.fireEvent(ParameterSingleSelectTrigger_1.EVENT_CHANGE, text, value, isSelected);
                                    },
                                }],
                        },
                        onSearch: (_op, callback) => {
                            callback();
                        },
                        listeners: [{
                                eventName: BI.Searcher.EVENT_CHANGE,
                                action: () => {
                                },
                            }, {
                                eventName: BI.Searcher.EVENT_START,
                                action: () => {
                                    this.fireEvent(ParameterSingleSelectTrigger_1.EVENT_START);
                                },
                            }, {
                                eventName: BI.Searcher.EVENT_SEARCHING,
                                action: () => {
                                    this.fireEvent(ParameterSingleSelectTrigger_1.EVENT_SEARCHING);
                                },
                            }, {
                                eventName: BI.Searcher.EVENT_STOP,
                                action: () => {
                                    this.fireEvent(ParameterSingleSelectTrigger_1.EVENT_STOP);
                                },
                            }],
                    },
                },
                {
                    el: {
                        type: BI.Layout.xtype,
                        width: 24,
                    },
                    width: 24,
                },
            ],
        };
    }
    mounted() {
        !this.options.allowEdit && BI.createWidget({
            type: BI.AbsoluteLayout.xtype,
            element: this,
            items: [{
                    el: {
                        type: BI.Text.xtype,
                        title: () => this.editor.getValue(),
                    },
                    left: 0,
                    right: 24,
                    top: 0,
                    bottom: 0,
                }],
        });
        BI.EventListener.listen(this.element.context, 'keydown', (evt) => {
            if (evt.keyCode === BI.KeyCode.ENTER) {
                const input = this.editor.getValue();
                const selectedItem = this.popup.getAllLeaves()
                    .find(item => item.text === input)
                    || { text: input, value: input };
                this.options.customData && this.fireEvent(ParameterSingleSelectTrigger_1.EVENT_CHANGE, selectedItem.text, selectedItem.value, true);
            }
        });
    }
    setValue(val) {
        this.editor.setValue((val === null || val === void 0 ? void 0 : val.text) || '');
    }
    stopEditing() {
        this.searcher.stopSearch();
    }
    getSearcher() {
        return this.searcher;
    }
    getValue() {
        return this.popup.getValue();
    }
    setAdapter(adapter) {
        this.searcher.setAdapter(adapter);
    }
    adjustPopupHeight(adapter) {
        this.setAdapter(adapter);
        this.searcher.populate();
        this.searcher.adjustHeight();
    }
    isSearching() {
        return this.searcher.isSearching();
    }
    focus() {
        this.editor.focus();
    }
    blur() {
        this.editor.blur();
    }
    setWaterMark(v) {
        this.editor.setWaterMark(v);
    }
    selectNextItem() {
        this.popup.selectNextItem();
    }
    selectPreItem() {
        this.popup.selectPreItem();
    }
};
ParameterSingleSelectTrigger.EVENT_SEARCHING = 'EVENT_SEARCHING';
ParameterSingleSelectTrigger.EVENT_STOP = 'EVENT_STOP';
ParameterSingleSelectTrigger.EVENT_START = 'EVENT_START';
ParameterSingleSelectTrigger.EVENT_CHANGE = 'EVENT_CHANGE';
ParameterSingleSelectTrigger.EVENT_FOCUS = 'EVENT_FOCUS';
ParameterSingleSelectTrigger.EVENT_BLUR = 'EVENT_BLUR';
ParameterSingleSelectTrigger.xtype = 'report.single_select_trigger';
ParameterSingleSelectTrigger.EVENT_CLICK = 'EVENT_CLICK';
ParameterSingleSelectTrigger.EVENT_KEY_DOWN = 'EVENT_KEY_DOWN';
ParameterSingleSelectTrigger = ParameterSingleSelectTrigger_1 = __decorate([
    shortcut()
], ParameterSingleSelectTrigger);
export { ParameterSingleSelectTrigger };
//# sourceMappingURL=singleselecttrigger.js.map