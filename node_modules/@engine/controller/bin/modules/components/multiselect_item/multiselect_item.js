var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { shortcut } from '@engine/core';
import { setMultiSelectItemFontSize } from './multiselect_item.service';
let ReportMultiSelectItem = class ReportMultiSelectItem extends BI.BasicButton {
    constructor() {
        super(...arguments);
        this.props = {
            extraCls: 'bi-multi-select-item',
            height: undefined,
            logic: {
                dynamic: false,
            },
            hgap: 2,
            rgap: undefined,
            text: '',
            keyword: '',
            value: '',
            py: '',
            scale: 1,
            width: 80,
            title: () => this.options.text,
        };
    }
    render() {
        const o = this.options;
        const defaultSize = 16;
        const height = defaultSize * o.scale + 2;
        const checkboxWidth = 12 * o.scale;
        return {
            type: BI.TableAdaptLayout.xtype,
            cls: setMultiSelectItemFontSize('report-main-components-multiselect-item', o.scale),
            horizontalAlign: BI.HorizontalAlign.Left,
            verticalAlign: o.logic.dynamic ? BI.VerticalAlign.Middle : undefined,
            columnSize: [checkboxWidth, ''],
            items: [{
                    type: BI.CenterAdaptLayout.xtype,
                    items: [{
                            type: BI.Checkbox.xtype,
                            cls: 'bi-card',
                            ref: (_ref) => {
                                this.checkbox = _ref;
                            },
                            width: checkboxWidth,
                            height: checkboxWidth,
                            iconWidth: checkboxWidth,
                            iconHeight: checkboxWidth,
                            listeners: [{
                                    eventName: BI.Controller.EVENT_CHANGE,
                                    action: (type) => {
                                        if (type === BI.Events.CLICK) {
                                            this.setSelected(this.isSelected());
                                        }
                                    },
                                }],
                        }],
                    width: checkboxWidth,
                    height,
                }, {
                    type: BI.Label.xtype,
                    ref: (_ref) => {
                        this.text = _ref;
                    },
                    rgap: o.rgap,
                    keyword: o.keyword,
                    py: o.py,
                    cls: 'list-item-text',
                    textAlign: 'left',
                    whiteSpace: 'normal',
                    hgap: o.hgap * o.scale,
                    text: o.text,
                    value: o.value,
                }],
        };
    }
    doRedMark(..._args) {
        this.text.doRedMark(_args);
    }
    unRedMark(..._args) {
        this.text.unRedMark(_args);
    }
    doClick() {
        super.doClick.apply(this, arguments);
        this.checkbox.setSelected(this.isSelected());
        if (this.isValid()) {
            this.fireEvent(BI.MultiSelectItem.EVENT_CHANGE, this.getValue(), this);
        }
    }
    setSelected(v) {
        super.setSelected.apply(this, arguments);
        this.checkbox.setSelected(v);
    }
};
ReportMultiSelectItem.EVENT_CHANGE = 'EVENT_CHANGE';
ReportMultiSelectItem.xtype = 'report.main.components.multiselect_item';
ReportMultiSelectItem = __decorate([
    shortcut()
], ReportMultiSelectItem);
export { ReportMultiSelectItem };
//# sourceMappingURL=multiselect_item.js.map