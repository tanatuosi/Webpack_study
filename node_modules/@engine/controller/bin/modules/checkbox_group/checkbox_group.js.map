{"version":3,"file":"checkbox_group.js","sourceRoot":"","sources":["../../../src/modules/checkbox_group/checkbox_group.ts"],"names":[],"mappings":"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","sourcesContent":["import { WIDTH, HEIGHT } from '../controller.constants';\nimport { getWidthPropByAdaptive, setFontSize, transformControlAttrData } from '../controller.service';\nimport { transformValue2CheckGroupValue, transformItems2Selected, setCheckboxGroupStyle } from './check_group.service';\nimport { shortcut } from '@engine/core';\nimport { ReportMultiSelectItem } from '../components/multiselect_item/multiselect_item';\nimport { ParameterControllerBasicProps4Item, ParameterControllerPropsWithCombo, ParameterControllerControlAttr, ParameterControllerBasicProps4Render, ParameterControllerForm } from '../controller';\nimport { AbstractParameterControllerWidget, ControllerValidation } from '../controller.abstract';\nimport { BasicButton, ButtonGroup } from '@fui/core';\nimport { fetchParamControlAttr } from '../controller.crud';\n\n@shortcut()\nexport class ParameterCheckboxGroup extends AbstractParameterControllerWidget {\n    public static xtype = 'report.main.parameter_container.controller.checkbox_group';\n\n    public static BASE_CLS = 'report-main-parameter-container-controller-checkbox-group';\n\n    private lists: ButtonGroup;\n\n    private selectedAllValue: string = BI.UUID();\n\n    private selectedAllItem = {\n        text: BI.i18nText('BI-Select_All'),\n        value: this.selectedAllValue,\n    };\n\n    public props: ParamCheckboxGroupProps = {\n        baseCls: ParameterCheckboxGroup.BASE_CLS,\n        $testId: ParameterCheckboxGroup.BASE_CLS,\n        widgetName: '',\n        width: WIDTH,\n        height: HEIGHT,\n        adaptive: false,\n        columnsInRow: 1,\n        controlAttr: {\n            data: [],\n            value: '',\n        },\n        customData: true,\n        directEdit: true,\n        autoMode: true,\n        mode: 'remote',\n        searchTime: 200,\n        chooseAll: false,\n        noRepeat: true,\n        needSubmit: false,\n        disabled: false,\n        invisible: false,\n        fontSize: 12,\n        value: '',\n        delimiter: ',',\n        startSymbol: '',\n        endSymbol: '',\n        returnArray: false,\n        allowBlank: true,\n        errorMsg: BI.i18nText('Fine-Report_Preview_Can_Not_Null'),\n        controlAttrFetcher: fetchParamControlAttr,\n        extraOptsGetter: () => {\n            return {};\n        },\n        getDependenceByWidget: () => [],\n        getWidgetDependenceValueByWidget: () => {\n            return {};\n        },\n        allowBg: true,\n    }\n\n    \n    public render() {\n        const { width, height } = this.options;\n\n        return {\n            type: BI.ButtonGroup.xtype,\n            cls: 'report-hide-scrollbar',\n            ref: (_ref: ButtonGroup) => {\n                this.lists = _ref;\n            },\n            chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,\n            items: this.items,\n            layouts: [{\n                type: BI.FloatLeftLayout.xtype,\n                width,\n                height,\n                scrolly: true,\n            }],\n        };\n    }\n\n    public mounted() {\n        super.mounted();\n\n        this.checkAllSelected();\n    }\n\n    /**\n     * 校验是否全选\n     */\n    private checkAllSelected() {\n        if (!this.options.chooseAll) {\n            return;\n        }\n\n        let count = 0;\n\n        const btns = this.lists.getAllButtons<BasicButton>();\n\n        btns.forEach((btn, index) => {\n            if (index === btns.length - 1) {\n                return;\n            }\n\n            btn.isSelected() && (count += 1);\n        });\n\n        BI.last(btns).setSelected(count === btns.length - 1);\n    }\n\n    public getValue() {\n        const { delimiter, returnArray, startSymbol, endSymbol } = this.options;\n\n        const value: string[] = this.lists.getAllButtons<BasicButton>()\n            .filter(btn => btn.isSelected())\n            .map(btn => btn.getValue());\n\n        BI.remove(value, this.selectedAllValue);\n\n        return transformValue2CheckGroupValue(value, { delimiter, returnArray, startSymbol, endSymbol });\n    }\n\n    public preGetValidation(): ControllerValidation {\n        const { allowBlank, value, errorMsg, controlAttr, delimiter, startSymbol, endSymbol } = this.options;\n\n        if (allowBlank || transformItems2Selected(transformControlAttrData(controlAttr.data), value, delimiter, startSymbol, endSymbol).some(item => item.selected)) {\n            return { result: true };\n        }\n\n        return {\n            result: false,\n            errorMsg,\n        };\n    }\n\n    public postGetValidation(): ControllerValidation {\n        const { allowBlank, errorMsg } = this.options;\n\n        if (allowBlank || this.lists.getValue().length > 0) {\n            return { result: true };\n        }\n\n        return {\n            result: false,\n            errorMsg,\n        };\n    }\n\n    public postValidateAndToast() {\n        const validation = this.getValidation();\n\n        if (validation.result) {\n            return true;\n        }\n\n        this.showBubble(validation.errorMsg);\n\n        return false;\n    }\n\n    public async setControllerValue(v?: number | string | (string | number)[] | null) {\n        this.reset();\n        \n        if (BI.isNull(v)) {\n            return;\n        }\n\n        const btns = this.lists.getAllButtons<BasicButton>();\n\n        const { delimiter, startSymbol, endSymbol } = this.options;\n\n        transformItems2Selected(btns.map(btn => {\n            return {\n                text: btn.attr('text'),\n                value: btn.getValue(),\n            };\n        }), v, delimiter, startSymbol, endSymbol)\n            .forEach((item, index) => {\n                btns[index].setSelected(item.selected || false);\n            });\n\n        this.checkAllSelected();\n    }\n\n    public reset() {\n        this.lists.getAllButtons<BasicButton>()\n            .forEach(btn => {\n                btn.setSelected(false);\n            });\n    }\n\n    public setInteractValue(v: {\n        data: {\n            text: string;\n            value: string;\n        }[];\n        value: string | string[]\n    }) {\n        this.options.controlAttr = v;\n\n        this.options.value = v.value;\n\n        this.lists.populate(this.items);\n    }\n\n    public resize(width: number, height: number) {\n        const restoreValue = this.lists.getValue();\n\n        super.resize(width, height);\n\n        this.lists.setValue(restoreValue);\n    }\n\n    private get items() {\n        const { fontSize, columnsInRow, adaptive, chooseAll, controlAttr, value, delimiter, startSymbol, endSymbol } = this.options;\n\n        const extraCls = setFontSize(ParameterCheckboxGroup.BASE_CLS, fontSize);\n\n        return transformItems2Selected(transformControlAttrData(controlAttr.data), value, delimiter, startSymbol, endSymbol)\n            .concat(chooseAll ? [this.selectedAllItem] : [])\n            .map(({ text, value, selected = false }) => {\n                return {\n                    type: ReportMultiSelectItem.xtype,\n                    width: null,\n                    scale: fontSize / 12,\n                    cls: `${extraCls} bi-list-item-active`,\n                    $testId: 'report-main-parameter-container-controller-checkbox-group-item',\n                    text,\n                    value,\n                    selected,\n                    logic: {\n                        dynamic: adaptive,\n                    },\n                    ...getWidthPropByAdaptive(adaptive, columnsInRow),\n                    listeners: [{\n                        eventName: BI.MultiSelectItem.EVENT_CHANGE,\n                        action: (v: string, multiSelectItem: any) => {\n                            if (!chooseAll) {\n                                return;\n                            }\n\n                            const isSelected = multiSelectItem.isSelected();\n\n                            if (v !== this.selectedAllValue) {\n                                this.checkAllSelected();\n\n                                return;\n                            }\n\n                            const btns = this.lists.getAllButtons<BasicButton>();\n\n                            btns.forEach(btn => {\n                                btn.setSelected(isSelected);\n                            });\n                        },\n                    }, {\n                        eventName: BI.MultiSelectItem.EVENT_CHANGE,\n                        action: () => {\n                            this.hideBubble();\n\n                            !this.silence && this.fireEvent('statechange');\n\n                            this.fireEvent('EVENT_CHANGE');\n                        },\n                    }],\n                };\n            });\n    }\n\n    public async updateControlAttr() {\n        const { widgetName, controlAttrFetcher } = this.options;\n\n        return controlAttrFetcher(widgetName, this.getRequestOpts())\n            .then(res => {\n                this.options.controlAttr = {\n                    data: res,\n                    value: this.options.value,\n                };\n            });\n    }\n\n    public reloadControlAttr() {\n        this.reset();\n\n        this.updateControlAttr()\n            .then(() => {\n                this.lists.populate(this.items);\n            });\n    }\n\n    private getRequestOpts() {\n        const { getWidgetDependenceValueByWidget, getDependenceByWidget, extraOptsGetter } = this.options;\n\n        const dependences = getWidgetDependenceValueByWidget(this);\n\n        return {\n            dependence: dependences,\n            reload: BI.isNotEmptyArray(getDependenceByWidget(this)),\n            ...extraOptsGetter(),\n        };\n    }\n\n    public setStyle(styles: Parameters<AbstractParameterControllerWidget['setStyle']>[0]) {\n        this.lists.element.addClass(setCheckboxGroupStyle(styles));\n    }\n\n    public getText() {\n        const text: string[] = this.lists.getAllButtons<BasicButton>()\n            .filter(btn => btn.isSelected())\n            .map(btn => btn.getText());\n        BI.remove(text, this.selectedAllItem.text);\n\n        return `${text}`;\n    }\n}\n\n\n\nexport interface ParamCheckboxGroupProps extends ParameterControllerCheckboxGroupProps4Render4Item, ParameterControllerForm {\n    baseCls: string;\n    $testId: string;\n    widgetName: string;\n    controlAttrFetcher: typeof fetchParamControlAttr,\n    extraOptsGetter: () => {[key: string]: any};\n}\n\nexport interface ParameterControllerCheckboxGroupProps4Render4Item extends ParameterControllerBasicProps4Item, ParameterControllerPropsWithCombo {\n\n    /**\n     * 自适应, Boolean 类型, true 表示自适应\n     */\n    adaptive: boolean;\n\n    /**\n     * 非自适应情况下展示的列数\n     */\n    columnsInRow: number;\n\n    /**\n     * 提供全选\t默认为 false, true 表示支持全选\n     */\n    chooseAll: boolean;\n\n    /**\n     * 数据字典\n     */\n    controlAttr: ParameterControllerControlAttr;\n\n    /**\n     * 分隔符\n     */\n    delimiter: string;\n\n    /**\n     * 起始符\n     */\n    startSymbol: string;\n\n    /**\n     * 结束符\n     */\n    endSymbol: string;\n\n    /**\n     * 是否返回数组\n     */\n    returnArray: boolean;\n\n    /**\n     * 允许为空\n     */\n    allowBlank: boolean;\n\n    /**\n     * 空验证错误信息\n     */\n    errorMsg: string;\n}\n\nexport interface ParameterControllerCheckboxGroupProps4Render extends ParameterControllerBasicProps4Render, ParameterControllerCheckboxGroupProps4Render4Item { }\n"]}