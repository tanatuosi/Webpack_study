import { ParameterControllerBasicProps4Item, ParameterControllerControlAttr, ParameterControllerBasicProps4Render, ParameterControllerForm } from '../controller';
import { AbstractParameterControllerWidget, ControllerValidation } from '../controller.abstract';
import { ButtonGroup } from '@fui/core';
import { fetchParamControlAttr } from '../controller.crud';
export declare const ParameterRadioGroupXtype = "report.main.parameter_container.controller.radio_group";
export declare class ParameterRadioGroup extends AbstractParameterControllerWidget {
    static xtype: string;
    static BASE_CLS: string;
    private radioGroups;
    $container: ButtonGroup['element'];
    props: ParamRadioGroupProps;
    render(): {
        type: string;
        cls: string;
        ref: (_ref: ButtonGroup) => void;
        items: {
            listeners: {
                eventName: string;
                action: (isSelected: boolean, _value: any, btn: any) => void;
            }[];
            width?: string | undefined;
            type: string;
            disabled: boolean;
            scale: number;
            cls: string;
            text: string;
            title: string;
            adaptive: boolean;
            selected: boolean;
            value: string;
        }[];
        chooseType: number;
        layouts: {
            type: string;
            width: number;
            height: number;
            tgap: number;
            scrolly: boolean;
        }[];
    };
    setControllerValue(v: string | number | (string | number)[]): Promise<void>;
    setInteractValue(controlAttr: ParameterControllerControlAttr): void;
    preGetValidation(): ControllerValidation;
    postGetValidation(): ControllerValidation;
    postValidateAndToast(): boolean;
    getValue(): string;
    /**
     * 将controlData转换成fineui的items
     */
    private get items();
    reset(): void;
    resize(width: number, height: number): void;
    updateControlAttr(): Promise<void>;
    reloadControlAttr(): void;
    private getRequestOpts;
    setStyle(styles: Parameters<AbstractParameterControllerWidget['setStyle']>[0]): void;
    getText(): string;
}
export interface ParamRadioGroupProps extends ParameterControllerRadioGroupProps4Render4Item, ParameterControllerForm {
    baseCls: string;
    $testId: string;
    widgetName: string;
    controlAttrFetcher: typeof fetchParamControlAttr;
    extraOptsGetter: () => {
        [key: string]: any;
    };
}
export interface ParameterControllerRadioGroupProps4Render4Item extends Omit<ParameterControllerBasicProps4Item, 'value'> {
    /**
     * 自适应, Boolean 类型, true 表示自适应
     */
    adaptive: boolean;
    /**
     * 非自适应情况下展示的列数
     */
    columnsInRow: number;
    /**
     * 数据字典
     */
    controlAttr: ParameterControllerControlAttr;
    /**
     * 允许为空
     */
    allowBlank: boolean;
    /**
     * 空验证错误信息
     */
    errorMsg: string;
    /**
     * 去除重复项
     */
    norepeat: boolean;
    value: string | number | (string | number)[];
}
export interface ParameterControllerRadioGroupProps4Render extends ParameterControllerBasicProps4Render, ParameterControllerRadioGroupProps4Render4Item {
}
