import { ParameterControllerBasicProps4Item, ParameterControllerPropsWithCombo, ParameterControllerControlAttr, ParameterControllerBasicProps4Render, ParameterControllerForm } from '../controller';
import { AbstractParameterControllerWidget, ControllerValidation } from '../controller.abstract';
import { ButtonGroup } from '@fui/core';
import { fetchParamControlAttr } from '../controller.crud';
export declare class ParameterCheckboxGroup extends AbstractParameterControllerWidget {
    static xtype: string;
    static BASE_CLS: string;
    private lists;
    private selectedAllValue;
    private selectedAllItem;
    props: ParamCheckboxGroupProps;
    render(): {
        type: string;
        cls: string;
        ref: (_ref: ButtonGroup) => void;
        chooseType: number;
        items: {
            listeners: {
                eventName: string;
                action: (v: string, multiSelectItem: any) => void;
            }[];
            width: string | null;
            type: string;
            scale: number;
            cls: string;
            $testId: string;
            text: string;
            value: string;
            selected: boolean;
            logic: {
                dynamic: boolean;
            };
        }[];
        layouts: {
            type: string;
            width: number;
            height: number;
            scrolly: boolean;
        }[];
    };
    mounted(): void;
    /**
     * 校验是否全选
     */
    private checkAllSelected;
    getValue(): string | string[];
    preGetValidation(): ControllerValidation;
    postGetValidation(): ControllerValidation;
    postValidateAndToast(): boolean;
    setControllerValue(v?: number | string | (string | number)[] | null): Promise<void>;
    reset(): void;
    setInteractValue(v: {
        data: {
            text: string;
            value: string;
        }[];
        value: string | string[];
    }): void;
    resize(width: number, height: number): void;
    private get items();
    updateControlAttr(): Promise<void>;
    reloadControlAttr(): void;
    private getRequestOpts;
    setStyle(styles: Parameters<AbstractParameterControllerWidget['setStyle']>[0]): void;
    getText(): string;
}
export interface ParamCheckboxGroupProps extends ParameterControllerCheckboxGroupProps4Render4Item, ParameterControllerForm {
    baseCls: string;
    $testId: string;
    widgetName: string;
    controlAttrFetcher: typeof fetchParamControlAttr;
    extraOptsGetter: () => {
        [key: string]: any;
    };
}
export interface ParameterControllerCheckboxGroupProps4Render4Item extends ParameterControllerBasicProps4Item, ParameterControllerPropsWithCombo {
    /**
     * 自适应, Boolean 类型, true 表示自适应
     */
    adaptive: boolean;
    /**
     * 非自适应情况下展示的列数
     */
    columnsInRow: number;
    /**
     * 提供全选	默认为 false, true 表示支持全选
     */
    chooseAll: boolean;
    /**
     * 数据字典
     */
    controlAttr: ParameterControllerControlAttr;
    /**
     * 分隔符
     */
    delimiter: string;
    /**
     * 起始符
     */
    startSymbol: string;
    /**
     * 结束符
     */
    endSymbol: string;
    /**
     * 是否返回数组
     */
    returnArray: boolean;
    /**
     * 允许为空
     */
    allowBlank: boolean;
    /**
     * 空验证错误信息
     */
    errorMsg: string;
}
export interface ParameterControllerCheckboxGroupProps4Render extends ParameterControllerBasicProps4Render, ParameterControllerCheckboxGroupProps4Render4Item {
}
