export declare enum NUM_ERROR {
    NOT_ALLOW_BLANK = "NOT_ALLOW_BLANK",
    INVALID_NUMBER = "INVALID_NUMBER",
    NOT_ALLOW_NEGATIVE = "NOT_ALLOW_NEGATIVE",
    NOT_ALLOW_DECIMALS = "NOT_ALLOW_DECIMALS",
    TOO_MANY_DECIMALS = "TOO_MANY_DECIMALS",
    TOO_MANY_INTEGER = "TOO_MANY_INTEGER",
    TOO_LARGE = "TOO_LARGE",
    TOO_SMALL = "TOO_SMALL"
}
export declare function checkValidation(v: any, { allowNegative, allowDecimals, allowBlank, maxDecLength, maxIntLength, maxValue, minValue }: {
    allowDecimals: boolean;
    allowBlank: boolean;
    maxDecLength: number;
    maxIntLength: number;
    maxValue?: number;
    minValue?: number;
    allowNegative: boolean;
}): NUM_ERROR | true;
export declare function transformValidation2ErrorMsg(validation: NUM_ERROR | true, opt: {
    errorMsg: string;
    regErrorMsg: string;
    maxValue?: number;
    minValue?: number;
}): string;
/**
 * 根据条件格式化输入值
 * @param v 输入值
 * @param allowNegative 允许负数
 * @param allowDecimals 允许小数
 */
export declare function formatNumber(v: string, allowNegative: boolean, allowDecimals: boolean): string;
