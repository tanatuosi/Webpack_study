import { ParameterSingleSelectPopup } from './singleselectpopup';
import { Combo, TriggerIconButton } from '@fui/core';
export declare class ParameterSingleSelectCombo extends BI.Widget {
    static EVENT_CHANGE: string;
    static EVENT_BEFORE_POPUPVIEW: string;
    static EVENT_CONFIRM: string;
    static xtype: string;
    static EVENT_BEFORE_EDIT: string;
    static EVENT_AFTER_EDIT: string;
    static EVENT_CLICK_ITEM: string;
    static EVENT_BLUR: string;
    private repopulate;
    private needResize;
    props: {
        baseCls: string;
        height: number;
        text: string;
        items: {
            text: string;
            value: string;
        }[];
        tipType: string;
        warningTitle: string;
        attributes: {
            tabIndex: number;
        };
        title: string;
        value: {
            text: string;
            value: string;
        } | undefined;
        itemsCreator: (op: any, callback: Function) => void;
        watermark: string;
        allowEdit: boolean;
        customData: boolean;
        allowNoSelect: boolean;
        controlDataGetter: () => {
            text: string;
            value: string;
        }[];
        name4EmptyGetter: () => string;
        itemHeightGetter: () => number;
        maxCountGetter: () => number;
    };
    private combo;
    private trigger;
    private popup;
    private triggerBtn;
    render(): {
        type: string;
        items: ({
            el: {
                type: string;
                adjustLength: number;
                toggle: boolean;
                ref: (_ref: Combo) => void;
                el: Partial<{
                    baseCls: string;
                    height: number;
                    itemsCreator: Function;
                    valueGetter: () => {
                        text: string;
                        value: string;
                    } | undefined;
                    unmatchedValueGetter: () => {
                        text: string;
                        value: string;
                    }[];
                    watermark: string;
                    allowEdit: boolean;
                    customData: boolean;
                    itemHeightGetter: () => number;
                    value: string;
                }>;
                popup: {
                    minWidth: number;
                    minHeight: number;
                    maxHeight: number;
                    el: {
                        type: string;
                        name4EmptyGetter: () => string;
                        itemHeightGetter: () => number;
                        maxCountGetter: () => number;
                        allowNoSelect: boolean;
                        itemsCreator: (op: any, callback: Function) => void;
                        customData: boolean;
                        tipText: string;
                        popupAdjuster: () => void;
                        ref: (_ref: ParameterSingleSelectPopup) => void;
                        repopulateGetter: () => boolean;
                        listeners: {
                            eventName: string;
                            action: (text: string, value: string) => void;
                        }[];
                    };
                    value: {
                        text: string;
                        value: string;
                    } | undefined;
                };
                listeners: {
                    eventName: string;
                    action: () => void;
                }[];
                hideChecker: (e: any) => boolean;
                cls?: undefined;
                width?: undefined;
                height?: undefined;
                handler?: undefined;
            };
            left: number;
            right: number;
            bottom: number;
            top: number;
        } | {
            el: {
                type: string;
                cls: string;
                ref: (_ref: TriggerIconButton) => void;
                width: number;
                height: number;
                handler: () => void;
                adjustLength?: undefined;
                toggle?: undefined;
                el?: undefined;
                popup?: undefined;
                listeners?: undefined;
                hideChecker?: undefined;
            };
            right: number;
            bottom: number;
            top: number;
            left?: undefined;
        })[];
    };
    mounted(): void;
    focus(): void;
    blur(): void;
    setRepopulate(v: boolean): void;
    reset(): void;
    showView(): void;
    private checkResize;
    populate(items: any[]): void;
    setValue(v?: {
        text: string;
        value: string;
    }): void;
    getValue(): {
        text: any;
        value: any;
    } | undefined;
    validateData(): boolean;
    getAdapter(): import("@fui/core").Searcher;
    setWaterMark(v: string): void;
    updateName4Empty(): void;
}
