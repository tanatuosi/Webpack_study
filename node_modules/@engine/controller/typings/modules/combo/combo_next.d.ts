import { fetchParamControlAttr, fetchWidgetViewValue } from '../controller.crud';
import { ParameterControllerBasicProps4Item, ParameterControllerPropsWithEditor, ParameterControllerPropsWithCombo, ParameterControllerBasicProps4Render, ParameterControllerForm, ParameterControllerDelayer } from '../controller';
import { AbstractParameterControllerWidget, ControllerValidation } from '../controller.abstract';
import { ParameterSingleSelectCombo } from './singleselectcombo/singleselectcombo';
import './combo.less';
export declare class ParameterComboNext extends AbstractParameterControllerWidget {
    static xtype: string;
    static BASE_CLS: string;
    props: ParamComboProps & ParameterControllerForm & ParameterControllerDelayer;
    private combo;
    get editComp(): ParameterSingleSelectCombo;
    /**
     * 公开接口，修改下拉框控件的默认文字“不选”
     * @param name 名称
     */
    setName4Empty(name: string): void;
    private ratio;
    render(): Partial<{
        baseCls: string;
        height: number;
        text: string;
        items: {
            text: string;
            value: string;
        }[];
        tipType: string;
        warningTitle: string;
        attributes: {
            tabIndex: number;
        };
        title: string;
        value: {
            text: string;
            value: string;
        } | undefined;
        itemsCreator: (op: any, callback: Function) => void;
        watermark: string;
        allowEdit: boolean;
        customData: boolean;
        allowNoSelect: boolean;
        controlDataGetter: () => {
            text: string;
            value: string;
        }[];
        name4EmptyGetter: () => string;
        itemHeightGetter: () => number;
        maxCountGetter: () => number;
    }>;
    mounted(): void;
    preGetValidation(): ControllerValidation;
    postGetValidation(): ControllerValidation;
    postValidateAndToast(): boolean;
    emitManualStopEditEvent(): void;
    getValue(): any;
    updateControllAttrByValue(v: any, controlData?: {
        text: string;
        value: string | number;
    }[]): Promise<{
        value: string;
        text: string;
    } | undefined>;
    setControllerValue(v: any, controlData?: {
        text: string;
        value: string | number;
    }[]): Promise<void>;
    setValue(v: any, controlData?: {
        text: string;
        value: string;
    }[]): void;
    reset(): void;
    reloadControlAttr(): void;
    setInteractValue(v: {
        data: {
            text: string;
            value: string | number;
        }[];
        value: any;
    }): void;
    resize(width: number, height: number): void;
    private getRequestOpts;
    getText(): any;
    getAdapter(): import("@fui/core").Searcher;
    setStyle(styles: Parameters<AbstractParameterControllerWidget['setStyle']>[0]): void;
    setPopupStyle(styles: {
        itemHeight: string;
        fontSize: string;
    }): void;
    setWaterMark(v: string): void;
    focus(): void;
    blur(): void;
}
export interface ParamComboProps extends Omit<ParameterControllerComboProps4Render4Item, 'value'> {
    baseCls: string;
    $testId: string;
    value: string | number | (string | number)[] | {
        date_milliseconds: number;
    };
    name4Empty: string;
    sonHeight: number;
    maxCount: number;
    controlAttrFetcher: typeof fetchParamControlAttr;
    extraOptsGetter: () => {
        [key: string]: any;
    };
    viewValueFetcher: typeof fetchWidgetViewValue;
}
/**
 * 下拉框
 */
export interface ParameterControllerComboProps4Render4Item extends ParameterControllerBasicProps4Item, ParameterControllerPropsWithEditor, ParameterControllerPropsWithCombo {
    widgetName: ParameterControllerBasicProps4Render['widgetName'];
    /**
     * 是否校验自定义值
     */
    needCheckCustomData: boolean;
}
export interface ParameterControllerComboProps4Render extends ParameterControllerBasicProps4Render, ParameterControllerComboProps4Render4Item {
}
