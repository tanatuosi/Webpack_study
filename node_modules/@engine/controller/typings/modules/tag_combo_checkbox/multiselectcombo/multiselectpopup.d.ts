import { ListPane, Loader, MultiSelectBar, TextButton, VTapeLayout } from '@fui/core';
export declare class ParameterMultiSelectPopup extends BI.Widget {
    static xtype: string;
    static EVENT_CHANGE: string;
    static EVENT_CONFIRM: string;
    static EVENT_CLEAR: string;
    static EVENT_SELECT_ALL: string;
    static EVENET_ADD_ITEM: string;
    static EVENT_SWITCH_STATE: string;
    static EVENT_RESIZE: string;
    static EVENT_LOADED: string;
    static EVENT_LOADING: string;
    protected pane: ListPane;
    props: {
        itemsCreator: Function;
        keywordGetter: () => string | undefined;
        valueGetter: (() => {
            text: string;
            value: string;
        }[]) | undefined;
        unmatchedValueGetter: () => {
            text: string;
            value: string;
        }[];
        itemHeightGetter: () => number;
        minWidth: number;
        maxHeight: number;
        height: number | undefined;
        value: {
            text: string;
            value: string;
        }[];
        customData: boolean;
        repopulateGetter: () => boolean;
    };
    protected allSelectButton: MultiSelectBar;
    protected addTextBtn: TextButton;
    private unmatchedValues;
    private values;
    private hasNext;
    private vtapeWrapper;
    private loader;
    render(): {
        type: string;
        ref: (_ref: VTapeLayout) => void;
        items: ({
            el: {
                type: string;
                scrolly: boolean;
                items: ({
                    type: string;
                    ref: (_ref: MultiSelectBar) => void;
                    cls: string;
                    invisible: boolean;
                    height: number;
                    iconWrapperWidth: number;
                    listeners: {
                        eventName: string;
                        action: (isSelected: boolean) => void;
                    }[];
                    text?: undefined;
                    hgap?: undefined;
                    handler?: undefined;
                } | {
                    type: string;
                    ref: (_ref: TextButton) => void;
                    invisible: boolean;
                    text: string;
                    height: number;
                    cls: string;
                    hgap: number;
                    handler: () => void;
                    iconWrapperWidth?: undefined;
                    listeners?: undefined;
                })[];
                ref?: undefined;
                el?: undefined;
                layouts?: undefined;
                cls?: undefined;
            };
            height: number;
            type?: undefined;
            ref?: undefined;
            itemsCreator?: undefined;
            hasNext?: undefined;
            listeners?: undefined;
        } | {
            type: string;
            ref: (_ref: ListPane) => void;
            itemsCreator: (op: any, callback: Function) => void;
            el: {
                type: string;
                ref: (_ref: Loader) => void;
                el: {
                    chooseType: number;
                };
                layouts: {
                    type: string;
                    height: number;
                    minHeight: number;
                    scrolly: boolean;
                }[];
                scrolly?: undefined;
                items?: undefined;
                cls?: undefined;
            };
            hasNext: () => boolean;
            listeners: {
                eventName: string;
                action: () => void;
            }[];
            height?: undefined;
        } | {
            el: {
                type: string;
                cls: string;
                items: ({
                    type: string;
                    once: boolean;
                    shadow: boolean;
                    isShadowShowingOnSelected: boolean;
                } & {
                    text: string;
                    handler: () => void;
                })[];
                layouts: {
                    type: string;
                    hgap: number;
                    vgap: number;
                }[];
                scrolly?: undefined;
                ref?: undefined;
                el?: undefined;
            };
            height: number;
            type?: undefined;
            ref?: undefined;
            itemsCreator?: undefined;
            hasNext?: undefined;
            listeners?: undefined;
        })[];
    };
    protected transformItems(items: {
        text: string;
        value: string;
        [key: string]: any;
    }[]): {
        [key: string]: any;
        text: string;
        value: string;
    }[];
    resize(isHeaderVisible: boolean): void;
    getValue(): {
        text: any;
        value: any;
    }[];
    getAllLeaves(): {
        text: any;
        value: any;
    }[];
    populate(): void;
    setAllSelected(): void;
    setAllUnselected(): void;
    private createItems;
    checkAllSelected(): void;
    switchState(text: string, value: string, $isSelected?: boolean): void;
    switchStates(leaves: {
        text: string;
        value: string;
        [key: string]: any;
    }[], isSelected: boolean): void;
    setValue(vals: {
        text: string;
        value: string;
    }[]): void;
    getUnmatchedValues(): {
        text: string;
        value: string;
    }[];
    getAllButtons(): unknown[];
    resetState(): void;
}
