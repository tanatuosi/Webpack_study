import { ParameterMultiSelectPopup } from './multiselectpopup';
import { ParameterMultiSelectSwitcher } from './multiselectswitcher';
import { Combo, TriggerIconButton } from '@fui/core';
export declare class ParameterMultiSelectCombo extends BI.Widget {
    static EVENT_CHANGE: string;
    static EVENT_BEFORE_POPUPVIEW: string;
    static EVENT_CONFIRM: string;
    static xtype: string;
    static EVENT_BEFORE_EDIT: string;
    static EVENT_AFTER_EDIT: string;
    static EVENT_CLICK_ITEM: string;
    static EVENT_BLUR: string;
    private repopulate;
    private initialized;
    private needResize;
    props: {
        baseCls: string;
        height: number;
        itemHeightGetter: () => number;
        text: string;
        items: {
            text: string;
            value: string;
        }[];
        tipType: string;
        warningTitle: string;
        attributes: {
            tabIndex: number;
        };
        title: string;
        value: {
            text: string;
            value: string;
        }[];
        itemsCreator: (op: any, callback: Function) => void;
        watermark: string;
        allowEdit: boolean;
        customData: boolean;
        allowCount: boolean;
    };
    private combo;
    private trigger;
    private popup;
    private triggerBtn;
    private numberCounter;
    render(): {
        type: string;
        scrollable: boolean;
        items: ({
            el: {
                type: string;
                adjustLength: number;
                toggle: boolean;
                ref: (_ref: Combo) => void;
                el: Partial<{
                    baseCls: string;
                    height: number;
                    itemsCreator: Function;
                    valueGetter: () => {
                        text: string;
                        value: string;
                    }[];
                    unmatchedValueGetter: () => {
                        text: string;
                        value: string;
                    }[];
                    watermark: string;
                    allowEdit: boolean;
                    itemHeightGetter: () => number;
                    customData: boolean;
                    value: {
                        text: string;
                        value: string;
                    }[];
                }>;
                popup: {
                    minWidth: number;
                    maxHeight: number;
                    el: {
                        type: string;
                        itemHeightGetter: () => number;
                        itemsCreator: (op: any, callback: Function) => void;
                        ref: (_ref: ParameterMultiSelectPopup) => void;
                        repopulateGetter: () => boolean;
                        listeners: {
                            eventName: string;
                            action: () => void;
                        }[];
                    };
                    value: {
                        text: string;
                        value: string;
                    }[];
                };
                listeners: {
                    eventName: string;
                    action: () => void;
                }[];
                hideChecker: (e: any) => boolean;
                cls?: undefined;
                width?: undefined;
                height?: undefined;
                handler?: undefined;
                invisible?: undefined;
                items?: undefined;
            };
            left: number;
            right: number;
            bottom: number;
            top: number;
            height?: undefined;
        } | {
            el: {
                type: string;
                cls: string;
                ref: (_ref: TriggerIconButton) => void;
                width: number;
                height: number;
                handler: () => void;
                adjustLength?: undefined;
                toggle?: undefined;
                el?: undefined;
                popup?: undefined;
                listeners?: undefined;
                hideChecker?: undefined;
                invisible?: undefined;
                items?: undefined;
            };
            right: number;
            bottom: number;
            top: number;
            left?: undefined;
            height?: undefined;
        } | {
            el: {
                type: string;
                invisible: boolean;
                items: {
                    type: string;
                    valueGetter: () => {
                        text: any;
                        value: any;
                    }[];
                    popupGetter: () => ParameterMultiSelectPopup;
                    itemHeightGetter: () => number;
                    ref: (_ref: ParameterMultiSelectSwitcher) => void;
                    listeners: {
                        eventName: any;
                        action: (visbility: boolean) => void;
                    }[];
                }[];
                adjustLength?: undefined;
                toggle?: undefined;
                ref?: undefined;
                el?: undefined;
                popup?: undefined;
                listeners?: undefined;
                hideChecker?: undefined;
                cls?: undefined;
                width?: undefined;
                height?: undefined;
                handler?: undefined;
            };
            height: number;
            top: number;
            right: number;
            left?: undefined;
            bottom?: undefined;
        })[];
    };
    reset(): void;
    showView(): void;
    private checkResize;
    populate(items: any[]): void;
    private setStateValue;
    setValue(v?: {
        text: string;
        value: string;
    }[]): void;
    getValue(): {
        text: any;
        value: any;
    }[];
    setRepopulate(v: boolean): void;
    focus(): void;
    blur(): void;
    getAllButtons(): unknown[];
    getAdapter(): import("@fui/core").Searcher;
    setText(v: string): void;
    addValue(text: string, value: string): void;
    setWaterMark(v: string): void;
}
