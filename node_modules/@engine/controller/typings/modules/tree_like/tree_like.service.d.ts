import { ParameterControllerPropsWithTree, ParameterControllerTreeControlAttrData } from '../controller';
import { ParamMultiTreeValue, ParamMultiTreeItem, ParamSingleTreeNode, TransformTreeDefaultValueOpts } from './tree_like';
import { CancelToken } from 'axios';
export declare const ROOT = "__root__";
export declare const TREE_VIEW_TYPE = "PULL_DATA";
/**
 * 多选树控件的itemCreator
 * @param op ootions
 */
export declare function multiAsyncTreeItemsCreator(requestor: ParameterControllerPropsWithTree['newTreeControlAttrFetcher'], op: {
    /**
     * expander节点id
     */
    id?: string;
    /**
     * 父节点数据
     */
    parentValues?: string[];
    selectedValues: string[];
    notSelectedValue?: string;
    /**
     * 分页次数
     */
    times: number;
    /**
     * 查询选项
     */
    type?: number;
    /**
     * 关键词
     */
    keyword: string;
    checkState: {
        checked: boolean;
        half: boolean;
    };
    floors: number;
    widgetName: string;
    dependence: {
        [key: string]: any;
    };
    reload: boolean;
    cancelToken?: CancelToken;
}): Promise<{
    items: ParamMultiTreeItem[];
    resultType: string;
    hasNext: boolean;
} | {
    items: ParamMultiTreeValue;
    resultType: string;
    hasNext: boolean;
}>;
/**
 * 单选树控件的itemCreator
 * @param op ootions
 */
export declare function singleAsyncTreeItemsCreator(requestor: ParameterControllerPropsWithTree['oldTreeControlAttrFetcher'], op: {
    node: {
        id?: string;
        value?: string;
    };
    keyword: string;
    widgetName: string;
    dependence: {
        [key: string]: any;
    };
    reload: boolean;
    cancelToken?: CancelToken;
}): Promise<{
    items: ParamMultiTreeItem[];
    hasNext: boolean;
}>;
/**
 * 同步树控件的itemCreator
 * @param op ootions
 */
export declare function syncTreeItemsCreator(requestor: ParameterControllerPropsWithTree['oldTreeControlAttrFetcher'], op: {
    keyword?: string;
    widgetName: string;
    dependence: {
        [key: string]: any;
    };
    reload: boolean;
    prefix?: string | false;
}): Promise<{
    items: ParamMultiTreeItem[];
    hasNext: boolean;
}>;
/**
 * 获取渲染的layout
 * @param multiSelection 是否多选
 * @param selectLeafOnly 叶子节点与子节点是否互相影响
 * @param async 是否同步
 */
export declare function getParamTreeComboBoxLayout(multiSelection: boolean, selectLeafOnly: boolean, async: boolean, customData: boolean): string;
/**
 * 获取树控件渲染的layout
 * @param multiSelection 是否多选
 * @param selectLeafOnly 叶子节点与子节点是否互相影响
 * @param async 是否异步
 */
export declare function getParamTreeLayout(multiSelection: boolean, selectLeafOnly: boolean, async: boolean): string;
/**
 * 将树的data转换为渲染的items
 * @param data 树的data
 * @param opt 额外属性
 * @param opt.pId 父级pId
 * @param opt.times 分层页数
 */
export declare function transformTreeControlAttr2Items(data?: ParameterControllerTreeControlAttrData[], opts?: {
    pId?: number | string;
    times?: number;
    prefix?: false | string;
}): ParamMultiTreeItem[];
/**
 * 填满树，将Fineui控件中的树结构拓展至叶节点
 * @param value 多选树控件值
 */
export declare function rebuildAsyncTree(widgetName: string, requestor: ParameterControllerPropsWithTree['newTreeStructureFetcher'], op: {
    id?: string | number;
    value?: string | number;
    dependence: {
        [key: string]: any;
    };
    reload: boolean;
}, valueReference?: ParamMultiTreeValue): Promise<{
    valueReference: ParamMultiTreeValue;
    data: ParameterControllerTreeControlAttrData[];
}>;
/**
 * 根据值遍历填充树
 * @param data data数组
 * @param valueReference 值引用
 */
export declare function traverseFillValue(data: ParameterControllerTreeControlAttrData[] | null | undefined, valueReference: ParamMultiTreeValue): void;
/**
 * 找到需要format的value值
 * @param value 树控件类型值
 * @param path 值路径
 */
export declare function traverseValue(value: ParamMultiTreeValue, path?: string[]): {
    value: string;
    reference: ParamMultiTreeValue;
    path: string[];
}[];
/**
 * 填满树，将Fineui控件中的树结构拓展至叶节点
 * @param value 多选树控件值
 * @widgeName 控件名
 * @op 查询参数
 * @_data 子节点们
 */
export declare function rebuildSyncTree(value: ParamMultiTreeValue, widgetName: string, requestor: ParameterControllerPropsWithTree['oldTreeControlAttrFetcher'], op: {
    dependence: {
        [key: string]: any;
    };
    reload: boolean;
}, _data?: ParameterControllerTreeControlAttrData[]): Promise<ParamMultiTreeValue>;
/**
 * 转换多选树控件输出值
 * @param v 树控件值
 * @param returnFullPath 返回完整路径
 */
export declare function transformMultiTreeInsertComboValue(v: ParamMultiTreeValue, returnFullPath: true): string[][];
export declare function transformMultiTreeInsertComboValue(v: ParamMultiTreeValue, returnFullPath: false): string[];
export declare function transformMultiTreeInsertComboValue(v: ParamMultiTreeValue, returnFullPath: boolean): string[] | string[][];
/**
 * 将多选树的值转换成用特定分割符起始符的字符串
 * @param v 树控件值
 * @param delimiter
 * @param startSymbol
 * @param endSymbol
 * @returns
 */
export declare function transformMultiTree2FormatStringValue(v: ParamMultiTreeValue, delimiter: string, startSymbol: string, endSymbol: string): string;
/**
 * 转换单选树控件输出值
 * @param v 树控件值
 * @param returnFullPath 返回完整路径
 */
export declare function transformSingleTreeInsertComboValue(v: string[], returnFullPath: boolean): string[] | undefined;
/**
 * 根据值取得完整路径
 * @param v 单选树的值
 */
export declare function completeSingleTreeValue(v: (string | undefined)[]): string[] | undefined;
/**
 * 将树结构转换为二维数组
 * @param v 树结构
 * @param parentValues 祖先数组
 */
export declare function transformMultiTreeValue2DoubleArray(v: ParamMultiTreeValue, parentValues?: string[]): string[][];
/**
 * 将树结构转换为一维数组
 * @param v 树结构
 */
export declare function transformMultiTreeValue2SingleArray(v: ParamMultiTreeValue): string[];
/**
 * 取二维数组的最后一位拼成新数组
 * @param arr 二维数组
 */
export declare function transformDoubleArray2SingleArray(arr: string[][]): string[];
/**
 * string转二维数组
 * @param str 字符串
 */
export declare function transformString2DoubleArray(str: string): string[][];
/**
* string转一维数组
* @param str 字符串
*/
export declare function transformString2Array(str: string): string[];
/**
 * 转换默认值为控件结构
 * @param v 默认值
 * @param opts.multiSelection 多选
 * @param opts.selectLeafOnly 是否选择叶子节点
 * @param opts.nodes nodes数组
 * @param opts.textValueMap key为默认值/实际值
 */
export declare function transformTreeDefaultValue(v: string, multiSelection: true, selectLeafOnly: true, opts: TransformTreeDefaultValueOpts): ParamMultiTreeValue;
export declare function transformTreeDefaultValue(v: string, multiSelection: true, selectLeafOnly: false, opts: TransformTreeDefaultValueOpts): string[][];
export declare function transformTreeDefaultValue(v: string, multiSelection: false, selectLeafOnly: boolean, opts: TransformTreeDefaultValueOpts): string;
export declare function transformTreeDefaultValue(v: (string | number)[], multiSelection: false, selectLeafOnly: boolean, opts: TransformTreeDefaultValueOpts): string;
export declare function transformTreeDefaultValue(v: (string | number)[], multiSelection: true, selectLeafOnly: false, opts: TransformTreeDefaultValueOpts): string[][];
export declare function transformTreeDefaultValue(v: (string | number)[], multiSelection: true, selectLeafOnly: true, opts: TransformTreeDefaultValueOpts): ParamMultiTreeValue;
export declare function transformTreeDefaultValue(v: number | string | (string | number)[] | undefined | null, multiSelection: boolean, selectLeafOnly: boolean, opts: TransformTreeDefaultValueOpts): ParamMultiTreeValue | string[][] | string | undefined;
/**
 * 转换string类型成多选树控件类型
 * @param v 默认值
 * @param valueTextMap key为默认值/实际值
 */
export declare function transformMultiTreeDefaultValue(v: string, textValueMap?: {
    [key: string]: string;
}): ParamMultiTreeValue;
/**
 * 转换树控件item的value
 * @param items 树控件的items
 */
export declare function transformDataItems(items: ParamMultiTreeItem[], op?: {
    node?: ParamSingleTreeNode;
}): ParamMultiTreeItem[];
/**
 * 转树的数据字典到map
 * @param data 树的数据字典
 */
export declare function trasnformTreeControlAttr2TextValueMap(data: ParameterControllerTreeControlAttrData[], prefix: false | string): {
    [key: string]: string;
};
/**
 * 转换fineui的tree items成textValueMap
 * @param items fineui的tree items
 */
export declare function transformMultiTreeItem2TextValueMap(items: ParamMultiTreeItem[]): {
    [key: string]: string;
};
/**
 * 校验是否有额外的值传入
 * @param value 值
 * @param valueTextMap 字典
 */
export declare function validateTreeCustomData(controlAttr: {
    data: ParameterControllerTreeControlAttrData[];
    value: string | number;
}, prefix: false | string): boolean;
/**
 * 去掉text中的标红span标签
 * @param text 文字
 */
export declare function replaceRedMarkTag(text: string | number): string;
/**
 * 根据现在单选树的值获取其父亲的值
 * @param value 当前值
 */
export declare function getSingleTreeParentValueByValue(value: string): string;
/**
 * 根据现在单选树的值获取其显示值
 * @param value 当前值
 * @param nodes 单选树nodeList
 */
export declare function getSingleTreeTextByValue(value: string | undefined, nodes?: ParamMultiTreeItem[]): string;
/**
 * 根据值获取单选树的完整路径，比如A_spilitor_B_spilitor_C，返回[A, A_spilitor_B, A_spilitor_B_spilitor_C]
 * @param value 控件值
 */
export declare function getSingleTreePathByValue(value?: string): string[];
/**
 * 将已有值转换为唯一值
 * @param items 已有值
 */
export declare function transform2DistinctTreeValues<T extends {
    value: string;
    pId: string | number;
}>(items: T[]): T[];
