import { ParameterControllerTreeControlAttrData } from '../controller';
import { AbstractParameterControllerWidget, ControllerValidation } from '../controller.abstract';
import { ParameterTree } from './tree/tree';
import { ParameterTreeComboBox } from './tree_combo_box/tree_combo_box';
export declare abstract class ParameterTreeLike extends AbstractParameterControllerWidget {
    protected tree: any;
    private mask;
    /**
     * 单选树自定义的新增值
     */
    private singleTreeUnexpectedNodes;
    protected abstract isTreeWidget(): boolean;
    protected nodes: ParamMultiTreeItem[];
    options: ParameterTreeComboBox['props'] & ParameterTree['props'];
    protected textValueMap: {
        [key: string]: string;
    };
    protected completeMultiTreeValue?: ParamMultiTreeValue;
    protected singleTreeNotSelectedValue: string;
    private singleTreeNotSelectedNode;
    protected value: any;
    private cancelTokenSourceDict;
    mounted(): Promise<void>;
    updateControllAttr(): Promise<{
        items: ParamMultiTreeItem[];
        hasNext: boolean;
    }>;
    /**
     * 根据items更新缓存结构
     * @param items ParamMultiTreeItem[]
     */
    protected updateCacheByItems(items: ParamMultiTreeItem[]): void;
    /**
     * 根据数据字典data更新缓存结构
     * @param data 数据字典data
     */
    protected updateCacheByControlAttrData(data?: ParameterControllerTreeControlAttrData[]): void;
    /**
     * 根据值计算出数据字典
     * @param value 值
     */
    protected updateCacheByValue(value: (string | number)[][] | string): Promise<void>;
    /**
     * 根据值计算数据字典和 controlData
     * @param value 值
     */
    protected getInfoByValue(value: (string | number)[][] | (string | number)[] | string): Promise<{
        controlData: ParameterControllerTreeControlAttrData[];
        nodes: ParameterControllerTreeControlAttrData[];
    } | undefined>;
    /**
     * 根据值计算树一个分支的数据字典和controlData
     * @param values 值
     * @returns 数组字典和controlData
     */
    private getOneBranchInfo;
    setControllerValue(v: string, data?: ParameterControllerTreeControlAttrData[]): Promise<void>;
    setValue(v: string, data?: ParameterControllerTreeControlAttrData[]): Promise<void>;
    protected setTreeValue(v: any): void;
    getValue(): any;
    setInteractValue(v: {
        data: ParameterControllerTreeControlAttrData[];
        value: number | string | string[] | string[][];
    }): Promise<void>;
    /**
     * 发送EVENT_CHANGE事件
     */
    protected fireEventChange(): void;
    /**
     * 完善异步多选树返回值
     */
    protected rebuildAsyncMultiTree(value: any, fireEvent: boolean): Promise<void>;
    /**
     * 完善同步多选树返回值
     */
    protected rebuildSyncMultiTree(value: any, fireEvent: boolean): Promise<void>;
    /**
     * rebuildMultiTree前置判断
     * @param v 控件值
     */
    private rebuildMultiTreeValidator;
    /**
     * 完善多选树返回值
     * @param v 返回值
     * @param fireEvent 是否发送事件
     */
    protected rebuildMultiTree(_v: any, fireEvent: boolean): Promise<void>;
    /**
     * 同步树的itemCreator
     */
    protected syncTreeItemCreator(): Promise<{
        items: ParamMultiTreeItem[];
        hasNext: boolean;
        resultType?: string;
    }>;
    /**
     * 多选异步树的itemCreator
     * @param op options
     */
    protected multiAsyncTreeItemCreator(op: any): Promise<{
        items: ParamMultiTreeItem[];
        hasNext: boolean;
        resultType?: string;
    } | ParamMultiTreeValue>;
    /**
     * 单选同步树的itemCreator
     */
    protected singleSyncTreeItemCreator(): Promise<{
        items: ParamMultiTreeItem[];
        hasNext: boolean;
        resultType?: string;
    }>;
    /**
     * 多选同步树的itemCreator
     */
    protected multiSyncTreeItemCreator(): Promise<{
        items: ParamMultiTreeItem[];
        hasNext: boolean;
    }>;
    /**
     * 单选异步树的itemCreator
     * @param op options
     */
    protected singleAsyncTreeItemCreator(op: any): Promise<{
        items: ParamMultiTreeItem[];
        hasNext: boolean;
    }>;
    /**
     * 获取树请求属性
     */
    private getTreeOptions;
    preGetValidation(): ControllerValidation;
    /**
     * 处理单选下的同步树
     */
    protected transformSyncSingleTreeItem(items: ParamMultiTreeItem[]): ParamMultiTreeItem[];
    postGetValidation(value?: any): ControllerValidation;
    postValidateAndToast(): boolean;
    /**
     * 校验新增值，不包括校验为空，需要保证传值不能为空
     * @param value
     */
    private validateCustomData;
    /**
     * 值是否为空
     * @param value
     */
    private isEmptyValue;
    /**
     * 是否是异步构建的树
     */
    protected isAsyncTree(): boolean;
    reset(): void;
    /**
     * 展示loading遮罩
     * @param showMask 是否展示loading遮罩
     */
    private setShowMask;
    /**
     * 转换单选树的值，不存在的话添加到node中
     * @param defaultValue 默认值
     * @param isParent 是否是父节点
     */
    protected transformSingleTreeValue2Node(defaultValue: string, isParent?: boolean): ParamMultiTreeItem;
    resize(width: number, height: number): void;
}
/**
 * 多选树结构
 */
export interface ParamMultiTreeValue {
    [key: string]: ParamMultiTreeValue;
}
/**
 * fineui树控件渲染结构
 */
export interface ParamMultiTreeItem {
    checked: boolean;
    half: boolean;
    halfCheck: boolean;
    id: string | number;
    isParent: boolean;
    open: boolean;
    pId: string | number;
    text: string;
    times: number;
    title: string;
    value: string;
    originValue?: string;
    $testId?: string;
    $value?: string;
    height?: number;
}
/**
 * 单选树op的node
 */
export interface ParamSingleTreeNode {
    pNode: ParamSingleTreeNode;
    value: string;
    originValue?: string;
}
export interface TransformTreeDefaultValueOpts {
    nodes: ParamMultiTreeItem[];
    textValueMap: {
        [key: string]: string;
    };
}
