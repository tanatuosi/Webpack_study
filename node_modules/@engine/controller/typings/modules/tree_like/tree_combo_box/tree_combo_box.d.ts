import { ParameterTreeLike, ParamMultiTreeValue, ParamMultiTreeItem } from '../tree_like';
import { ParameterControllerBasicProps4Item, ParameterControllerPropsWithTree, ParameterControllerBasicProps4Render, ParameterControllerPropsWithEditor, ParameterControllerPropsWithCombo, ParameterControllerForm, ParameterControllerDelayer, ParameterControllerTreeControlAttrData } from '../../controller';
import { AbstractParameterControllerWidget } from '../../controller.abstract';
export declare class ParameterTreeComboBox extends ParameterTreeLike {
    static xtype: string;
    static BASE_CLS: string;
    protected isTreeWidget(): boolean;
    protected tree: any;
    protected nodes: ParamMultiTreeItem[];
    protected textValueMap: {
        [key: string]: string;
    };
    /**
     * 转换后的初始值
     */
    private defaultTreeValue;
    /**
     * 用来判断数据字典是否能够完全支撑的起默认值
     */
    private isTreeShowValueComplete;
    props: ParameterControllerTreeComboBoxProps4RenderProps & ParameterControllerForm & ParameterControllerDelayer;
    protected completeMultiTreeValue: ParamMultiTreeValue;
    render(): {
        type: string;
        cls: string;
        items: {
            defaultText: string;
            watermark: string;
            allowSearchValue: boolean;
            cls: string;
            isNeedAdjustWidth: boolean;
            width: number;
            height: number;
            allowEdit: boolean;
            allowInsertValue: boolean;
            ref: (_ref: any) => void;
            valueFormatter: (v: string) => string;
            warningTitle: string;
            belowMouse: boolean;
            itemsCreator: ((op: any, callback: (data: {
                items: ParamMultiTreeItem[];
                hasNext: boolean;
                resultType?: string;
            } | ParamMultiTreeValue) => void) => Promise<void>) | undefined;
            value: any;
            listeners: {
                eventName: string;
                action: (value: ParamMultiTreeValue) => void;
            }[];
            text?: string | undefined;
            type: string;
        }[];
    };
    mounted(): Promise<void>;
    emitManualStopEditEvent(): void;
    /**
     * 更新默认值
     * @param v 值
     */
    private updateDefaultValue;
    /**
     * 对单选树,将默认值添加到节点中
     * @param defaultTreeValue
     */
    private addDefaultValue2SingleTreeNode;
    /**
     * 将传入组件的值(设置的默认值或者是联动设置的值)作为默认值并且更新，同时新增节点
     * @param v
     */
    private transformInteractValue2Node;
    setInteractValue(v: ParameterControllerTreeComboBoxProps4RenderProps['controlAttr']): Promise<void>;
    reloadControlAttr(): void;
    reloadTree(): void;
    setControllerValue(v: string, data?: ParameterControllerTreeControlAttrData[]): Promise<void>;
    /**
     * REPORT-35261 单选异步树联动后需要刷新树
     */
    private loadAsyncSingleTree;
    private loadSyncTree;
    getAdapter(): any;
    setStyle(styles: Parameters<AbstractParameterControllerWidget['setStyle']>[0]): void;
    setPopupStyle(): void;
    getText(): any;
    setWaterMark(v: string): void;
    focus(): void;
    blur(): void;
}
/**
 * 下拉树结构
 */
export interface ParameterControllerTreeComboBoxProps4Render4Item extends ParameterControllerBasicProps4Item, ParameterControllerPropsWithEditor, Omit<ParameterControllerPropsWithCombo, 'controlAttr'>, ParameterControllerPropsWithTree {
    $testId: string;
    /**
     * 是否校验自定义值
     */
    needCheckCustomData: boolean;
}
export interface ParameterControllerTreeComboBoxProps4Render extends ParameterControllerBasicProps4Render, ParameterControllerTreeComboBoxProps4Render4Item {
}
export interface ParameterControllerTreeComboBoxProps4RenderProps extends Omit<ParameterControllerTreeComboBoxProps4Render4Item, 'value'> {
    baseCls: string;
    value: (string | number)[] | string | undefined | null | number;
    isNeedAdjustWidth: boolean;
}
