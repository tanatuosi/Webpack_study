import { FrListener } from '@engine/core';
import { CancelToken } from 'axios';
import { ParameterControllerButtonProps4Render } from './button/button';
import { ParameterControllerCheckboxProps4Render } from './checkbox/checkbox';
import { ParameterControllerCheckboxGroupProps4Render } from './checkbox_group/checkbox_group';
import { ParameterControllerComboProps4Render } from './combo/combo_next';
import { AbstractParameterControllerWidget } from './controller.abstract';
import './controller.less';
import { ParameterControllerDatetimeProps4Render } from './datetime/datetime';
import { ParameterEmpty } from './empty/empty';
import { ParameterControllerLabelProps4Render } from './label/label';
import { ParameterControllerMultifileProps4Render } from './multifile/multifile';
import { ParameterControllerNumberProps4Render } from './number/number';
import { ParameterControllerPasswordProps4Render } from './password/password';
import { ParameterControllerRadioGroupProps4Render } from './radio_group/radio_group';
import { ParameterControllerTagComboCheckboxProps4Render } from './tag_combo_checkbox/tag_combo_checkbox_next';
import { ParameterControllerTextProps4Render } from './text/text';
import { ParameterControllerTextareaProps4Render } from './textarea/textarea';
import { ParameterControllerTreeProps4Render } from './tree_like/tree/tree';
import { ParameterControllerTreeComboBoxProps4Render } from './tree_like/tree_combo_box/tree_combo_box';
declare class ControllerProvider {
    private controllerDict;
    get(key: string): string;
    set(key: string, value: string): void;
    getImpl(): typeof ParameterEmpty;
}
export declare const controllerProvider: ControllerProvider;
/**
 * 后台传过来的控件属性
 */
export declare type ParameterControllerProps4Render = ParameterControllerTextProps4Render | ParameterControllerButtonProps4Render | ParameterControllerComboProps4Render | ParameterControllerTagComboCheckboxProps4Render | ParameterControllerNumberProps4Render | ParameterControllerRadioGroupProps4Render | ParameterControllerCheckboxGroupProps4Render | ParameterControllerTextareaProps4Render | ParameterControllerPasswordProps4Render | ParameterControllerCheckboxProps4Render | ParameterControllerLabelProps4Render | ParameterControllerTreeComboBoxProps4Render | ParameterControllerDatetimeProps4Render | ParameterControllerTreeProps4Render | ParameterControllerMultifileProps4Render;
/**
 * 控件基础属性，用于渲染外框架的属性
 */
export interface ParameterControllerBasicProps4Render {
    /**
     * 控件名称
     */
    widgetName: string;
    x: number;
    y: number;
    type: 'text' | 'label' | 'button' | 'freebutton' | 'combo' | 'tagcombocheckbox' | 'datetime' | 'textarea' | 'checkboxgroup' | 'radiogroup' | 'number' | 'treecombobox' | 'password' | 'checkbox' | 'tree' | 'formsubmit';
    /**
     * 控件事件集	默认为空, 控件添加事件后返回事件对象组成的数组.
     */
    listeners: Array<FrListener>;
}
/**
 * 参数控件基本属性，用于组件内部使用的基本属性
*/
export interface ParameterControllerBasicProps4Item {
    /**
     * 控件是否不可用
     */
    disabled: boolean;
    /**
     * 控件是否不可见	false表示可见, true表示不可见
     */
    invisible: boolean;
    /**
     * 是否需要提交	false表示不提交, true表示提交
     */
    needSubmit: boolean;
    /**
     * 字体大小
     */
    fontSize: number;
    /**
     * 控件值	控件显示的内容
     */
    value: (string | number)[] | string;
    width: number;
    height: number;
    /**
     * 是否有背景色
     */
    allowBg: boolean;
}
/**
 * 控件包含文本框
*/
export interface ParameterControllerPropsWithEditor {
    /**
     * 允许为空
     */
    allowBlank: boolean;
    /**
     * 空验证错误信息
     */
    errorMsg: string;
    /**
     * 水印
     */
    watermark: string;
}
/**
 * 控件包含下拉框
 */
export interface ParameterControllerPropsWithCombo {
    /**
     * 数据字典，key/value
     */
    controlAttr: ParameterControllerControlAttr;
    /**
     * 允许自定义值
     */
    customData: boolean;
    /**
     * 允许直接编辑
     */
    directEdit: boolean;
    /**
     * 去掉重复项
     */
    noRepeat: boolean;
    /**
     * 这个属性没用
     */
    autoMode: boolean;
    /**
     * 这个属性也没用
     */
    mode: 'remote';
    /**
     * 这个属性没法配=没用
     */
    searchTime: number;
}
/**
 * 包含复选框组
 */
export interface ParameterControllerPropsWithMultiSelectList {
    /**
     * 返回数组	默认 false, true 表示返回数组, false表示返回字符串
     */
    returnArray: boolean;
    /**
     * 起始符	返回字符串的起始符
     */
    startSymbol: string;
    /**
     * 结束符	返回字符串的结束符
     */
    endSymbol: string;
    /**
     * 去掉重复项	默认为 true
     */
    noRepeat: boolean;
}
/**
 * 包含树结构
 */
export interface ParameterControllerPropsWithTree extends Partial<Omit<ParameterControllerPropsWithMultiSelectList, 'noRepeat'>> {
    /**
     * 树结构的数据字典
     */
    controlAttr: ParameterControllerTreeControlAttr;
    /**
     * 异步加载
     */
    async: boolean;
    /**
     * 多选
     */
    mutiSelection: boolean;
    /**
     * 结果返回完整层次路径
     */
    returnFullPath: boolean;
    /**
     * 只返回叶子节点
     */
    selectLeafOnly: boolean;
    /**
     * 分隔符, 默认为 ";" , 下拉框显示选择值之间的分隔符
     */
    delimiter: string;
    widgetName: string;
    /**
     * 是否为极速构建，极速构建的树当成同步树处理
     */
    isLayerBuild: boolean;
    /**
     * 额外请求属性
     */
    extraOptsGetter: () => {
        [key: string]: any;
    };
    /**
     * 老树请求
     */
    oldTreeControlAttrFetcher: (widgetName: string, op?: {
        [key: string]: any;
    }, cancelToken?: CancelToken) => Promise<ParameterControllerTreeControlAttrData[]>;
    /**
     * 新树请求
     */
    newTreeControlAttrFetcher: (widgetName: string, op?: {
        [key: string]: any;
    }, cancelToken?: CancelToken) => Promise<{
        items: {
            checked: boolean;
            half: boolean;
            halfCheck: boolean;
            id: string | number;
            isParent: boolean;
            open: boolean;
            pId: string | number;
            text: string;
            times: number;
            title: string;
            value: string;
        }[];
        resultType: string;
        hasNext: boolean;
    }[] | {
        items: MultiTreeValue;
        resultType: string;
        hasNext: boolean;
    }[]>;
    newTreeStructureFetcher: (widgetName: string, op: {
        [key: string]: any;
    }) => Promise<ParameterControllerTreeControlAttrData[]>;
}
/**
 * 树结构的数据字典
 */
export interface ParameterControllerTreeControlAttr {
    /**
     * data 为返回的数据数组,为第一层树
     */
    data: ParameterControllerTreeControlAttrData[];
    /**
     * 初始默认值,与控件 value 一致
     */
    value: number | string;
}
/**
 * 树结构的数据字典的data
 */
export interface ParameterControllerTreeControlAttrData {
    /**
     * ChildNodes 为子节点对象组成的数组,结构与 data 一致
     */
    ChildNodes: Array<ParameterControllerTreeControlAttrData>;
    /**
     * 是否展开
     */
    isexpand: boolean;
    /**
     * 是否有子节点
     */
    hasChildren: boolean;
    id: number | string;
    /**
     * 显示值
     */
    text: string;
    /**
     * 显示复选框
     */
    showcheck: boolean;
    /**
     * 可能是全选的意思
     */
    complete: boolean;
    /**
     * 实际值
     */
    value: string;
    /**
     * 复选框选中状态
     */
    checkstate: 0 | 1;
}
/**
 * 一般控件的数据字典
 */
export interface ParameterControllerControlAttr {
    /**
     * 属性有值时返回数据对象 { text: 显示值, value: 实际值 }, 否则不返回
     */
    data: Array<{
        text: string | number;
        value?: string | number;
    }>;
    /**
     * 默认值,与控件的 value 值一致
     */
    value: string | number | (string | number)[];
}
/**
 * 控件form属性需要的接口
 */
export interface ParameterControllerForm {
    getWidgetDependenceValueByWidget(widget: AbstractParameterControllerWidget): {
        [key: string]: any;
    };
    getDependenceByWidget(widget: AbstractParameterControllerWidget): string[];
}
/**
 * 控件延迟接口属性
 */
export interface ParameterControllerDelayer {
    add2WaitingQueue: (id?: string) => string;
    removeFromWaitingQueue: (id: string) => void;
}
export declare type DataList = {
    text: string;
    value: string;
}[];
export interface MultiTreeValue {
    [key: string]: MultiTreeValue;
}
export {};
