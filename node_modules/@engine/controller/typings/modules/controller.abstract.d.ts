import { Widget } from '@fui/core';
export declare abstract class AbstractParameterControllerWidget extends BI.Widget {
    private bubbleName;
    protected silence: boolean;
    props: {
        width: number;
        height: number;
        fontSize: number;
    };
    private isUnavailableState;
    /**
     * 控件取值
     */
    abstract getValue(): any;
    /**
     * 控件校验
     */
    validate(): boolean;
    /**
     * 手动发出编辑结束事件
     */
    emitManualStopEditEvent(): void;
    /**
     * 设置事件状态
     */
    setSilent(isSilent: boolean): void;
    /**
     * 控件赋值
     */
    abstract setControllerValue(...args: any[]): Promise<void>;
    /**
     * 赋值
     */
    setValue(...args: any[]): void;
    /**
     * 自定义js接口，控件内部不允许使用
     */
    setText(...args: any[]): void;
    /**
     * 控件设置联动值
     */
    abstract setInteractValue(..._args: any[]): void | Promise<void>;
    /**
     * 控件重置值
     */
    abstract reset(): void;
    /**
     * 基于原始value的一种校验，仅用于校验invisible以及disabled的控件
     */
    abstract preGetValidation(): ControllerValidation;
    /**
     * 正常情况下的校验
     */
    abstract postGetValidation(): ControllerValidation;
    /**
     * 基于原始value的一种校验，仅用于校验invisible以及disabled的控件
     */
    private preValidateAndToast;
    /**
     * 正常情况校验
     */
    abstract postValidateAndToast(): boolean;
    /**
     * 获取校验结果
     */
    getValidation(): ControllerValidation;
    /**
     * 校验以及报错
     */
    validateAndToast(): boolean;
    /**
     * 校验并Msg toast
     */
    validateAndMsgToast(name?: string): boolean;
    showBubble(v: string): void;
    hideBubble(): void;
    refresh(): void;
    mounted(): void;
    resize(width: number, height: number): void;
    protected preResize(width: number, height: number): boolean;
    setFontSize(fontSize: number): void;
    getAdapter(): Widget | undefined;
    /**
     * 清空值并重新加载数据字典，仅有数据字典的生效
     */
    reloadControlAttr(): void;
    focus(): void;
    blur(): void;
    /**
     * 公开接口，设置控件style
     * @param style
     */
    abstract setStyle(style: {
        opacity?: number;
        background?: string;
        color?: string;
        border?: string;
        'border-radius'?: string;
    }): void;
    getType(): any;
    /**
     * 用于提交的值
     */
    getSubmitValue(): {
        [x: number]: any;
    };
}
export declare type ControllerValidation = {
    result: true;
} | {
    result: false;
    errorMsg: string;
};
