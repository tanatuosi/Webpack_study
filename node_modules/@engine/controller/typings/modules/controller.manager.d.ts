import { dbCommitConfig, WidgetManager } from '@engine/utils';
import { AbstractParameterControllerWidget } from './controller.abstract';
export declare class ContollerManager extends WidgetManager<AbstractParameterControllerWidget> {
    /**
     * 根据控件获取依赖并获取他们的值
     * @param widget 控件
     */
    getWidgetDependenceValueByWidget(widget: AbstractParameterControllerWidget): {
        [key: string]: any;
    };
    /**
     * 获取所有校验成功的需要提交value的控件
     */
    private getValidatedNeedSubmitWidgets;
    /**
     * 获取需要提交value的控件
     */
    getNeedSubmitWidgets(): AbstractParameterControllerWidget[];
    getValidatedNeedSubmitWidgetsSortByDependences(): AbstractParameterControllerWidget[];
    getNeedSubmitWidgetsSortByDependences(): AbstractParameterControllerWidget[];
    /**
     * 根据依赖关系获取需要提交的widgets，A依赖B，则B在前
     */
    private sortWidgetsByDependences;
    /**
     * 获取所有校验成功的提交value的控件值
     */
    getValidatedNeedSubmitValue(): {
        [widgetName: string]: string | number | string[];
    };
    /**
     * 获取所有需要提交value的控件值
     */
    getNeedSubmitValue(): {
        [widgetName: string]: string | number | string[];
    };
    /**
     * 根据控件获取提交值
     * @param widgets 参数控件
     */
    private getSubmitValueByWidgets;
    /**
     * 获取组件联动需要的数据
     */
    protected getLinkageData(widgetName: string): {
        value: {
            [widgetName: string]: string | number | string[];
        };
        widgetNames: string[];
    };
    /**
     * 校验所有控件
     */
    validateWidgets(): boolean;
    /**
     * 公开接口，获取需要提交组件的值
     */
    collectionValue(): {
        [widgetName: string]: string | number | string[];
    };
    /**
     * 数据入库
     */
    dbCommit(opt: dbCommitConfig): void;
}
