import './combo.yearmonth.less';
import { Combo, DynamicYearMonthPopup, HTapeLayout, IconButton } from '@fui/core';
export declare class YearMonthCombo extends BI.Single {
    static xtype: string;
    props: {
        /**
         * 水印
         */
        watermark?: string;
        /**
         * 最小日期
         */
        minDate?: string;
        /**
         * 最大日期
         */
        maxDate?: string;
        /**
         * 显示的日期格式化方式
         */
        format?: string;
        /**
         * 是否允许编辑
         */
        allowEdit?: true;
        /**
         * 承载popup的容器
         */
        container?: string;
        /**
         * 是否支持动态时间
         */
        supportDynamic?: boolean;
        /**
         * 行为
         */
        behaviors?: {
            redmark?: Function;
            highlight?: Function;
        };
        /**
         * 控件值
         */
        value?: {
            type: 1 | 2;
            value: {
                year?: number;
                month?: number;
            };
        };
        baseCls: string;
        width: number;
        height: number;
        isNeedAdjustWidth: boolean;
    };
    private storeTriggerValue;
    private storeValue?;
    private changeIcon;
    private combo;
    private trigger;
    private popup;
    private comboWrapper;
    private triggerBtn;
    render(): {
        type: string;
        width: number;
        height: number;
        cls: string;
        items: ({
            el: {
                type: string;
                cls: string;
                width: number;
                height: number;
                ref: (_ref: IconButton) => void;
            };
            width: number;
            type?: undefined;
            items?: undefined;
        } | {
            type: string;
            items: ({
                el: {
                    type: string;
                    cls: string;
                    width: number;
                    height: number;
                    ref: (_ref: IconButton) => void;
                    destroyWhenHide?: undefined;
                    container?: undefined;
                    toggle?: undefined;
                    isNeedAdjustHeight?: undefined;
                    isNeedAdjustWidth?: undefined;
                    el?: undefined;
                    adjustLength?: undefined;
                    popup?: undefined;
                    hideChecker?: undefined;
                    listeners?: undefined;
                };
                top: number;
                right: number;
                left?: undefined;
                bottom?: undefined;
            } | {
                el: {
                    type: string;
                    cls: string;
                    destroyWhenHide: boolean;
                    container: string | undefined;
                    ref: (_ref: Combo) => void;
                    toggle: boolean;
                    isNeedAdjustHeight: boolean;
                    isNeedAdjustWidth: boolean;
                    el: {
                        type: string;
                        min: string | undefined;
                        max: string | undefined;
                        watermark: string | undefined;
                        format: string | undefined;
                        allowEdit: true | undefined;
                        height: number;
                        value: {
                            type: 2 | 1;
                            value: {
                                year?: number | undefined;
                                month?: number | undefined;
                            };
                        } | undefined;
                        ref: (_ref: any) => void;
                        listeners: {
                            eventName: string;
                            action: () => void;
                        }[];
                    };
                    adjustLength: number;
                    popup: {
                        el: {
                            type: string;
                            width: number | undefined;
                            behaviors: {
                                redmark?: Function | undefined;
                                highlight?: Function | undefined;
                            } | undefined;
                            supportDynamic: boolean | undefined;
                            min: string | undefined;
                            max: string | undefined;
                            ref: (_ref: DynamicYearMonthPopup) => void;
                            listeners: {
                                eventName: string;
                                action: () => void;
                            }[];
                        };
                        value: {
                            type: 2 | 1;
                            value: {
                                year?: number | undefined;
                                month?: number | undefined;
                            };
                        } | undefined;
                        stopPropagation: boolean;
                    };
                    hideChecker: (e: any) => boolean;
                    listeners: {
                        eventName: string;
                        action: () => void;
                    }[];
                    width?: undefined;
                    height?: undefined;
                };
                top: number;
                left: number;
                right: number;
                bottom: number;
            })[];
            el?: undefined;
            width?: undefined;
        })[];
        ref: (_ref: HTapeLayout) => void;
    };
    mounted(): void;
    private checkDynamicValue;
    setMinDate(minDate: string): void;
    setMaxDate(maxDate: string): void;
    setValue(v?: {
        type: 1 | 2;
        value: {
            year?: number;
            month?: number;
        };
    }): void;
    getValue(): {
        type: 2 | 1;
        value: {
            year?: number | undefined;
            month?: number | undefined;
        };
    } | undefined;
    getKey(): any;
    hidePopupView(): void;
    focus(): void;
    blur(): void;
    setWaterMark(v: string): void;
}
