import { ParameterControllerBasicProps4Item, ParameterControllerBasicProps4Render, ParameterControllerForm, ParameterControllerPropsWithEditor } from '../controller';
import { AbstractParameterControllerWidget, ControllerValidation } from '../controller.abstract';
import { fetchParamDatetimeControlAttr } from '../controller.crud';
import { ParameterDatetimeModel } from './datetime.model';
export declare class ParameterDatetime extends AbstractParameterControllerWidget {
    static xtype: string;
    static BASE_CLS: string;
    private combo;
    btn: any;
    private reportDate;
    store: ParameterDatetimeModel['store'];
    props: ParameterControllerDatetimeProps4Render4Item & {
        baseCls: string;
        $testId: string;
        widgetName: string;
    } & ParameterControllerForm;
    private model;
    render(): {
        type: string;
        cls: string;
        items: {
            format: string;
            isNeedAdjustWidth: boolean;
            value: {
                hour: number;
                minute: number;
                second: number;
                type?: undefined;
                value?: undefined;
            } | {
                type: number;
                value: {
                    year: number;
                    month: number;
                    day: number;
                    hour: number;
                    minute: number;
                    second: number;
                };
                hour?: undefined;
                minute?: undefined;
                second?: undefined;
            } | undefined;
            ref: (_ref: any) => void;
            behaviors: {
                highlight: () => boolean;
            };
            allowEdit: boolean;
            container: string | undefined;
            listeners: {
                eventName: string;
                action: () => void;
            }[];
            minDate: string | undefined;
            maxDate: string | undefined;
            width: number;
            height: number;
            watermark: string;
            disabled: boolean;
            type: string;
            supportDynamic: boolean;
            cls: string;
        }[];
    };
    getValue(): string | number | {
        __time__: any;
    };
    preGetValidation(): ControllerValidation;
    postGetValidation(): ControllerValidation;
    postValidateAndToast(): boolean;
    emitManualStopEditEvent(): void;
    setControllerValue(v: string | number | {
        date_milliseconds: number;
    } | {
        __time__: number;
    } | Date): Promise<void>;
    setInteractValue(v: string | string[]): Promise<void>;
    reset(): void;
    resize(width: number, height: number): void;
    getAdapter(): any;
    setStyle(styles: Parameters<AbstractParameterControllerWidget['setStyle']>[0]): void;
    setPopupStyle(styles: {
        itemHeight: string;
        fontSize: string;
    }): void;
    setWaterMark(v: string): void;
    setMaxAndMinDate({ max: endDate, min: startDate }: {
        max: string | Date;
        min: string | Date;
    }): void;
    getText(): string;
    focus(): void;
    blur(): void;
}
/**
 * 时间控件
 */
export interface ParameterControllerDatetimeProps4Render4Item extends Omit<ParameterControllerBasicProps4Item, 'value'>, ParameterControllerPropsWithEditor {
    /**
     * 时间显示的格式
     */
    format: string;
    /**
     * 起始日期
     */
    startDate?: string;
    /**
     * 中止日期
     */
    endDate?: string;
    /**
     * 是否返回日期
     */
    returnDate: boolean;
    /**
     * 时间戳
     */
    value: {
        date_milliseconds: number;
    } | string | number;
    /**
     * 允许直接编辑
     */
    directEdit: boolean;
    controlAttrFetcher: typeof fetchParamDatetimeControlAttr;
    extraOptsGetter: () => {
        [key: string]: any;
    };
    container?: string;
    isNeedAdjustWidth: boolean;
}
export interface ParameterControllerDatetimeProps4Render extends ParameterControllerBasicProps4Render, ParameterControllerDatetimeProps4Render4Item {
}
