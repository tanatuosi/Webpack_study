import { AbstractParameterControllerWidget, ControllerValidation } from '../controller.abstract';
import { ParameterControllerBasicProps4Render, ParameterControllerBasicProps4Item } from '../controller';
import './multifile.less';
import { AbsoluteLayout, BubbleCombo, Button, ButtonGroup, Combo, Label, MultifileEditor } from '@fui/core';
export declare class ParameterMultifile extends AbstractParameterControllerWidget {
    static xtype: string;
    private label;
    private multifileEditor;
    private wrapper;
    private button;
    private uploadFileGroup;
    private uploadFiles;
    private canUpload;
    private bubbleCombo;
    private progressCombo;
    props: ParamMultifileProps;
    render(): {
        type: string;
        ref: (_ref: AbsoluteLayout) => void;
        items: ({
            el: {
                type: string;
                cls: string;
                ref: (_ref: Label) => void;
                text: string;
                width: number;
                height: number;
                trigger?: undefined;
                offsetStyle?: undefined;
                isNeedAdjustHeight?: undefined;
                isDefaultInit?: undefined;
                el?: undefined;
                popup?: undefined;
                hideWhenBlur?: undefined;
                destroyWhenHide?: undefined;
                belowMouse?: undefined;
                url?: undefined;
                accept?: undefined;
                maxSize?: undefined;
                multiple?: undefined;
                listeners?: undefined;
            };
            left: number;
            top: number;
        } | {
            el: {
                type: string;
                ref: (ref: BubbleCombo) => void;
                trigger: string;
                offsetStyle: string;
                isNeedAdjustHeight: boolean;
                isDefaultInit: boolean;
                el: {
                    type: string;
                    ref: (_ref: Button) => void;
                    cls: string;
                    width: number;
                    height: number;
                    title: () => string;
                    handler: () => void;
                };
                popup: {
                    el: {
                        type: string;
                        ref: (_ref: ButtonGroup) => void;
                        layouts: {
                            type: string;
                            minHeight: number;
                        }[];
                        items: never[];
                        queueGetter?: undefined;
                        uploadedGetter?: undefined;
                    };
                    minWidth: number;
                    minHeight: number;
                    maxHeight: number;
                };
                cls?: undefined;
                text?: undefined;
                width?: undefined;
                height?: undefined;
                hideWhenBlur?: undefined;
                destroyWhenHide?: undefined;
                belowMouse?: undefined;
                url?: undefined;
                accept?: undefined;
                maxSize?: undefined;
                multiple?: undefined;
                listeners?: undefined;
            };
            left: number;
            top: number;
        } | {
            el: {
                type: string;
                ref: (ref: Combo) => void;
                hideWhenBlur: boolean;
                trigger: string;
                destroyWhenHide: boolean;
                belowMouse: boolean;
                offsetStyle: string;
                isNeedAdjustHeight: boolean;
                el: {
                    type: string;
                    ref?: undefined;
                    cls?: undefined;
                    width?: undefined;
                    height?: undefined;
                    title?: undefined;
                    handler?: undefined;
                };
                popup: {
                    el: {
                        type: string;
                        queueGetter: () => string[];
                        uploadedGetter: () => string[];
                        ref?: undefined;
                        layouts?: undefined;
                        items?: undefined;
                    };
                    minWidth: number;
                    minHeight: number;
                    maxHeight?: undefined;
                };
                cls?: undefined;
                text?: undefined;
                width?: undefined;
                height?: undefined;
                isDefaultInit?: undefined;
                url?: undefined;
                accept?: undefined;
                maxSize?: undefined;
                multiple?: undefined;
                listeners?: undefined;
            };
            left: number;
            top: number;
        } | {
            el: {
                type: string;
                ref: (_ref: MultifileEditor) => void;
                url: string;
                accept: string;
                width: number;
                height: number;
                maxSize: number;
                multiple: boolean;
                listeners: ({
                    eventName: string;
                    action: (err: {
                        errorType: number;
                        file: {
                            name: string;
                        };
                    }) => void;
                } | {
                    eventName: string;
                    action: (progress: {
                        loaded: number;
                        total: number;
                    }) => void;
                })[];
                cls?: undefined;
                text?: undefined;
                trigger?: undefined;
                offsetStyle?: undefined;
                isNeedAdjustHeight?: undefined;
                isDefaultInit?: undefined;
                el?: undefined;
                popup?: undefined;
                hideWhenBlur?: undefined;
                destroyWhenHide?: undefined;
                belowMouse?: undefined;
            };
            top: number;
            left: number;
        })[];
    };
    private resetState;
    beforeMount(): void;
    private hideProgressComboView;
    private renderUploadFiles;
    private deleteFile;
    private downloadFile;
    getUploadFiles(): File[];
    preGetValidation(): ControllerValidation;
    postGetValidation(): ControllerValidation;
    postValidateAndToast(): boolean;
    reset(): void;
    setInteractValue(): void;
    setControllerValue(): Promise<void>;
    getValue(): File[];
    private getMultifileEditorValue;
    private calculatePosotion;
    resize(width: number, height: number): void;
    getAdapter(): MultifileEditor;
    setStyle(_styles: Parameters<AbstractParameterControllerWidget['setStyle']>[0]): void;
}
export interface ParamMultifileProps extends ParameterControllerMultifileProps4Render4Item {
    baseCls: string;
}
export interface ParameterControllerMultifileProps4Render4Item extends ParameterControllerBasicProps4Item {
    /**
     * 接受的文件类型
     */
    accept: string;
    /**
     * 文件最大大小
     */
    maxSize: number;
    /**
     * 最大上传文件数
     */
    maxlength: number;
    /**
     * 已上传个数
     */
    value: string;
    /**
     * 上传地址
     */
    url: string;
}
export interface ParameterControllerMultifileProps4Render extends ParameterControllerBasicProps4Render, ParameterControllerMultifileProps4Render4Item {
}
export interface File {
    attach_id: string;
    attach_type: string;
    filename: string;
}
