import { XHyperLink } from '../hyper_link.types';
import { AbstractLink, HyperLinkProps } from './abstract.link';
interface Type<T, M extends HyperLinkProps> extends Function {
    new (props: M, ...external: any[]): T;
}
export declare const DEFAUTL_LINK_TYPE: {
    WEB_LINK: string;
    JAVASCRIPT: string;
    EMAIL: string;
    VIEWLET: string;
    PARAMETER: string;
    CHART_POPUP: string;
    DOWNLOAD: string;
    CHART_RELATE: string;
};
declare class ReportLinkProvider {
    static xtype: string;
    private linkHandlerDict;
    $get(): {
        new (): {
            getHandler<T extends HyperLinkProps>({ type, ...others }: T & {
                type?: string | undefined;
            }): AbstractLink;
            setHandler(key: string, value: Type<AbstractLink, HyperLinkProps>, external?: any): void;
        };
    };
    addHandler(type: string, value: {
        [key: string]: any;
    }, external?: any): void;
}
export declare const linkHandlerProvider: InstanceType<ReturnType<ReportLinkProvider['$get']>>;
/**
 * 实例化 XHyperLink
 * @param javaScriptGroup XHyperLink数组
 */
export declare function instantiateXHyperLinks(javaScriptGroup: XHyperLink[], external?: {
    [key: string]: any;
}): AbstractLink[];
export {};
