import { AbstractLink } from './abstract.link';
import { openUrl } from '../hyper_link.service';
export class ParameterLink extends AbstractLink {
    constructor(props) {
        super(props);
        const { parameters } = props;
        this.parameters = parameters;
    }
    _excute() {
        openUrl({
            target: '_self',
            url: this.url,
        });
    }
    get url() {
        const url = new URL(window.location.href);
        BI.each(this.parameters, (_index, parameter) => {
            if (url.searchParams.has(parameter.name)) {
                url.searchParams.set(parameter.name, parameter.value.toString());
            }
            else {
                url.searchParams.append(parameter.name, parameter.value.toString());
            }
        });
        return url.href;
    }
}
//# sourceMappingURL=parameter.link.js.map