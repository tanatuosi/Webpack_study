{"version":3,"file":"target.js","sourceRoot":"","sources":["../../../../src/modules/links/target/target.ts"],"names":[],"mappings":";;;;;;AACA,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAMxC,MAAM,OAAO,cAAc;IAA3B;QACY,eAAU,GAAG,IAAI,GAAG,CAA+B;YACvD,CAAC,OAAO,EAAE,UAAU,CAAC;YACrB,CAAC,QAAQ,EAAE,WAAW,CAAC;YACvB,CAAC,SAAS,EAAE,YAAY,CAAC;SAC5B,CAAC,CAAC;IAmBP,CAAC;IAjBU,GAAG,CAAC,MAAc,EAAE,GAAW,EAAE,EAAwB;QAC5D,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC;QAE5D,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,KAA2B;QAC/C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACpC,CAAC;IAEM,MAAM,CAAC,MAAc,EAAE,GAAW,EAAE,EAAwB;QAC/D,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;IAC9C,CAAC;IAEM,OAAO;QACV,OAAO,aAAa,CAAC;IACzB,CAAC;CACJ;AAGD,IAAM,6BAA6B,GAAnC,MAAM,6BAA6B;IAGxB,IAAI;QACP,OAAO,cAAc,CAAC;IAC1B,CAAC;CACJ,CAAA;AALiB,mCAAK,GAAG,kCAAkC,CAAC;AADvD,6BAA6B;IADlC,QAAQ,EAAE;GACL,6BAA6B,CAMlC;AAED,MAAM,CAAC,MAAM,uBAAuB,GAAmB,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import { AbstractTarget } from './target.abstract';\nimport { DefaultTarget } from './target.default';\nimport { SelfTarget } from './target.self';\nimport { BlankTarget } from './target.blank';\nimport { DialogTarget } from './target.dialog';\nimport { provider } from '@engine/core';\n\ninterface Type<T> extends Function {\n    new (target: string, url: string, op: {[key: string]: any}): T\n}\n\nexport class TargetProvider {\n    private targetDict = new Map<string, Type<AbstractTarget>>([\n        ['_self', SelfTarget],\n        ['_blank', BlankTarget],\n        ['_dialog', DialogTarget],\n    ]);\n\n    public get(target: string, url: string, op: {[key: string]: any}): AbstractTarget {\n        const Target = this.targetDict.get(target) || DefaultTarget;\n        \n        return new Target(target, url, op);\n    }\n\n    public set(key: string, value: Type<AbstractTarget>) {\n        this.targetDict.set(key, value);\n    }\n\n    public handle(target: string, url: string, op: {[key: string]: any}) {\n        return this.get(target, url, op).handle();\n    }\n\n    public getImpl() {\n        return DefaultTarget;\n    }\n}\n\n@provider()\nclass ReportHyperlinkTargetProvider {\n    public static xtype = 'report.hyperlink_target.provider';\n\n    public $get() {\n        return TargetProvider;\n    }\n}\n\nexport const hyperLinkTargetProvider: TargetProvider = BI.Providers.getProvider(ReportHyperlinkTargetProvider.xtype);\n"]}