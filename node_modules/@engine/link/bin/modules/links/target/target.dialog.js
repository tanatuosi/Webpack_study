var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { findTargetParent } from '@engine/core';
import { openUrlByPost } from '@engine/crud';
import { ReportPopover } from '@engine/utils';
import { remoteEvaluate } from '../../hyper_link.crud';
import { AbstractTarget } from './target.abstract';
export class DialogTarget extends AbstractTarget {
    constructor(target, url, op) {
        super(target, url, op);
        this.options = op;
    }
    handle() {
        const { width = 0, height = 0, attr = {}, byPost, parameter } = this.options;
        const { title } = attr, position = __rest(attr, ["title"]);
        const dialogID = BI.UUID();
        this.getHeader(title)
            .then(header => {
            const targetName = BI.UUID(); // REPORT-26824 targetName取随机字符串，否则post请求第二次点开时显示空白
            const parent = this.findTargetParent();
            parent.BI.Popovers.create(dialogID, {
                type: ReportPopover.xtype,
                width: Math.min(width, window.innerWidth),
                height: Math.min(height, window.innerHeight),
                header,
                ref: (_ref) => {
                    this.popover = _ref;
                },
                body: {
                    type: BI.AbsoluteLayout.xtype,
                    items: [
                        {
                            el: {
                                type: BI.Iframe.xtype,
                                src: byPost ? '' : this.url,
                                name: targetName,
                            },
                            top: 0,
                            left: 0,
                            right: 0,
                            bottom: 0,
                        },
                    ],
                },
                listeners: [
                    {
                        eventName: BI.Popover.EVENT_CLOSE,
                        action: () => {
                            BI.Popovers.remove(dialogID);
                        },
                    },
                ],
            }).open(dialogID);
            BI.isNotEmptyObject(position) && this.popover.setPosition(position);
            if (byPost) {
                openUrlByPost(this.url, { __parameters__: parameter }, targetName);
            }
        });
        return dialogID;
    }
    findTargetParent() {
        return findTargetParent(parent => !!(parent.Report && parent.BI));
    }
    async getHeader(title) {
        if (BI.isObject(title)) {
            const res = await remoteEvaluate(title.value);
            return res === null || res === void 0 ? void 0 : res.result;
        }
        return title;
    }
}
//# sourceMappingURL=target.dialog.js.map