var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { DefaultTarget } from './target.default';
import { SelfTarget } from './target.self';
import { BlankTarget } from './target.blank';
import { DialogTarget } from './target.dialog';
import { provider } from '@engine/core';
export class TargetProvider {
    constructor() {
        this.targetDict = new Map([
            ['_self', SelfTarget],
            ['_blank', BlankTarget],
            ['_dialog', DialogTarget],
        ]);
    }
    get(target, url, op) {
        const Target = this.targetDict.get(target) || DefaultTarget;
        return new Target(target, url, op);
    }
    set(key, value) {
        this.targetDict.set(key, value);
    }
    handle(target, url, op) {
        return this.get(target, url, op).handle();
    }
    getImpl() {
        return DefaultTarget;
    }
}
let ReportHyperlinkTargetProvider = class ReportHyperlinkTargetProvider {
    $get() {
        return TargetProvider;
    }
};
ReportHyperlinkTargetProvider.xtype = 'report.hyperlink_target.provider';
ReportHyperlinkTargetProvider = __decorate([
    provider()
], ReportHyperlinkTargetProvider);
export const hyperLinkTargetProvider = BI.Providers.getProvider(ReportHyperlinkTargetProvider.xtype);
//# sourceMappingURL=target.js.map