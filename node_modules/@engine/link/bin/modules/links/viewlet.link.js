import { openUrl } from '../hyper_link.service';
import { AbstractLink } from './abstract.link';
import { stringfyParams, paramsSerializer } from '@engine/crud';
export class ViewletLink extends AbstractLink {
    constructor(props) {
        super(props);
        const { targetFrame, width, height, reportUrl, parameters, attr, showParameterInterface, byPost } = props;
        this.target = targetFrame;
        this.width = width;
        this.height = height;
        this.url = reportUrl;
        this.parameters = parameters;
        this.attr = attr;
        this.showParameterInterface = showParameterInterface;
        this.byPost = byPost;
    }
    _excute() {
        // REPORT-39971 & REPORT-40406 此处传参有且仅一次encode即可
        const parameter = this.byPost ? decodeURIComponent(stringfyParams(this.getParameter())) : '';
        openUrl({
            target: this.target,
            url: this.url,
            width: this.width,
            height: this.height,
            attr: this.attr,
            byPost: this.byPost,
            parameter,
            title: this.name,
        });
    }
    getParameter() {
        const parameter = {
            __pi__: this.showParameterInterface,
        };
        this.parameters.forEach(item => {
            parameter[item.name] = item.value;
        });
        return parameter;
    }
    get url() {
        if (this.byPost) {
            return `${this._url}&__pi__=${this.showParameterInterface}`;
        }
        return `${this._url}&${paramsSerializer({
            __parameters__: this.getParameter(),
            _: BI.getDate().getTime(),
        })}`;
    }
    set url(url) {
        this._url = url;
    }
}
//# sourceMappingURL=viewlet.link.js.map