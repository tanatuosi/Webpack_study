var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { provider } from '@engine/core';
import { AbstractLink } from './abstract.link';
import { DownloadLink } from './download.link';
import { EmptyLink } from './empty.link';
import { HTMLLink } from './html.link';
import { JSLink } from './js.link';
import { MailLink } from './mail.link';
import { ParameterLink } from './parameter.link';
import { ViewletLink } from './viewlet.link';
export const DEFAUTL_LINK_TYPE = {
    WEB_LINK: 'weblink',
    JAVASCRIPT: 'javascript',
    EMAIL: 'email',
    VIEWLET: 'viewlet',
    PARAMETER: 'parameter',
    CHART_POPUP: 'chartpop',
    DOWNLOAD: 'download',
    CHART_RELATE: 'chartRelate',
};
let ReportLinkProvider = class ReportLinkProvider {
    constructor() {
        this.linkHandlerDict = new Map([
            [DEFAUTL_LINK_TYPE.WEB_LINK, { link: HTMLLink }],
            [DEFAUTL_LINK_TYPE.JAVASCRIPT, { link: JSLink }],
            [DEFAUTL_LINK_TYPE.EMAIL, { link: MailLink }],
            [DEFAUTL_LINK_TYPE.VIEWLET, { link: ViewletLink }],
            [DEFAUTL_LINK_TYPE.PARAMETER, { link: ParameterLink }],
            [DEFAUTL_LINK_TYPE.DOWNLOAD, { link: DownloadLink }],
        ]);
    }
    $get() {
        const provider = this;
        return class LinkHandlerProvider {
            getHandler(_a) {
                var { type = '' } = _a, others = __rest(_a, ["type"]);
                const { link: Link, external } = provider.linkHandlerDict.get(type) || { link: EmptyLink, external: {} };
                return new Link(others, external);
            }
            setHandler(key, value, external) {
                provider.linkHandlerDict.set(key, { link: value, external });
            }
        };
    }
    // 对外提供，以键值对格式注册link
    addHandler(type, value, external) {
        const linkHandler = BI.inherit(AbstractLink, value);
        this.linkHandlerDict.set(type, { link: linkHandler, external });
    }
};
ReportLinkProvider.xtype = 'report.link.provider';
ReportLinkProvider = __decorate([
    provider()
], ReportLinkProvider);
export const linkHandlerProvider = BI.Providers.getProvider(ReportLinkProvider.xtype);
/**
 * 实例化 XHyperLink
 * @param javaScriptGroup XHyperLink数组
 */
export function instantiateXHyperLinks(javaScriptGroup, external = {}) {
    return javaScriptGroup
        .filter(link => link.javaScript)
        // todo 目前后端还没给，之后适配
        .map(link => linkHandlerProvider.getHandler(Object.assign(Object.assign({ name: link.name }, link.javaScript), { external })));
}
//# sourceMappingURL=link.js.map