{"version":3,"file":"hyper_link.handler.js","sourceRoot":"","sources":["../../src/modules/hyper_link.handler.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH,MAAM,OAAO,qBAAqB;IAO9B,YAAmB,MAA+C;QAJ1D,eAAU,GAAmB,EAAE,CAAC;QAKpC,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACb,MAAM,CAAC;oBACH,IAAI,EAAE,EAAE,CAAC,cAAc,CAAC,KAAK;oBAC7B,KAAK,EAAE,CAAC;4BACJ,EAAE,EAAE;gCACA,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK;gCAC5B,UAAU,EAAE,IAAI;gCAChB,SAAS,EAAE,MAAM;gCACjB,OAAO,EAAE,EAAE;gCACX,OAAO,EAAE,oBAAoB;gCAC7B,EAAE,EAAE;oCACA,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK;iCACxB;gCACD,GAAG,EAAE,CAAC,IAAmB,EAAE,EAAE;oCACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gCACtB,CAAC;gCACD,SAAS,EAAE;oCACP;wCACI,SAAS,EAAE,EAAE,CAAC,aAAa,CAAC,YAAY;wCACxC,MAAM,EAAE,CAAC,CAAS,EAAE,EAAE;4CAClB,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gDACd,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;wCACpC,CAAC;qCACJ;iCACJ;6BACJ;4BACD,GAAG,EAAE,CAAC;4BACN,IAAI,EAAE,CAAC;yBACV,CAAC;iBACL,CAAC,CAAC;aACN;QACL,CAAC,CAAC;IACN,CAAC;IAEM,MAAM,CAAC,CAAQ,EAAE,WAA2B;QAC/C,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,MAAM,UAAU,GAAG,WAAW;aACzB,MAAM,CAAC,SAAS,CAAC,EAAE;YAChB,IAAI,CAAC,SAAS,EAAE;gBACZ,OAAO,KAAK,CAAC;aAChB;YAED,IAAI,SAAS,CAAC,MAAM,EAAE;gBAClB,SAAS,CAAC,MAAM,EAAE,CAAC;gBAEnB,OAAO,KAAK,CAAC;aAChB;YAED,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;QAEP,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,OAAO;SACV;QACD,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;YAEvB,OAAO;SACV;QAED,MAAM,eAAe,GAAG,UAAU;aAC7B,GAAG,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;gBACxB,OAAO,EAAE,oCAAoC;gBAC7C,IAAI,EAAE,SAAS,CAAC,OAAO,EAAE;gBACzB,KAAK,EAAE,KAAK;aACf,CAAC,CAAC,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;CACJ","sourcesContent":["import { AbstractLink } from './links/abstract.link';\nimport { DownListCombo } from '@fui/core';\n\n/**\n * Hyperlink点击处理，表格、图表通用\n */\nexport class HyperLinkClickHandler {\n    private popup: DownListCombo;\n\n    private hyperLinks: AbstractLink[] = [];\n\n    private attach: () => void;\n\n    public constructor(attach: (widget: {[key: string]: any;}) => void) {\n        this.attach = () => {\n            if (!this.popup) {\n                attach({\n                    type: BI.AbsoluteLayout.xtype,\n                    items: [{\n                        el: {\n                            type: BI.DownListCombo.xtype,\n                            belowMouse: true,\n                            container: 'body',\n                            trigger: '',\n                            $testId: 'report-table-popup',\n                            el: {\n                                type: BI.Layout.xtype,\n                            },\n                            ref: (_ref: DownListCombo) => {\n                                this.popup = _ref;\n                            },\n                            listeners: [\n                                {\n                                    eventName: BI.DownListCombo.EVENT_CHANGE,\n                                    action: (v: number) => {\n                                        this.hyperLinks[v] &&\n                                            this.hyperLinks[v].excute();\n                                    },\n                                },\n                            ],\n                        },\n                        top: 0,\n                        left: 0,\n                    }],\n                });\n            }\n        };\n    }\n\n    public handle(e: Event, _hyperLinks: AbstractLink[]) {\n        this.attach();\n\n        const hyperLinks = _hyperLinks\n            .filter(hyperLink => {\n                if (!hyperLink) {\n                    return false;\n                }\n\n                if (hyperLink.silent) {\n                    hyperLink.excute();\n\n                    return false;\n                }\n\n                return true;\n            });\n\n        if (hyperLinks.length === 0) {\n            return;\n        }\n        if (hyperLinks.length === 1) {\n            hyperLinks[0].excute();\n\n            return;\n        }\n\n        const hyperLinksItems = hyperLinks\n            .map((hyperLink, index) => [{\n                $testId: 'report-table-popup-hyper-link-item',\n                text: hyperLink.getName(),\n                value: index,\n            }]);\n        this.hyperLinks = hyperLinks;\n        this.popup.populate(hyperLinksItems);\n        this.popup.showView(e);\n    }\n}\n"]}