import { WidgetManager } from '@engine/utils';
import { AbstractCellControllerHoc } from './cell/cell_controllers/cell_controller_hoc/cell_controller_hoc.abstract';
export declare class CellControllerManager extends WidgetManager<AbstractCellControllerHoc> {
    static NAME: string;
    private uninitializedDict;
    private unmountDict;
    /** 控制cell是否应该隐藏selectFrame */
    private shouldHideSelectFrame;
    addUninitializedWidget(id: string, params: uninitializedWidgetProps, mount?: Function): void;
    mountWidget(id: string): void;
    initializeWidget(id: string): void;
    getUninitializedWidgetsDict(): Map<string, uninitializedWidgetProps>;
    getHideSelectFrameSign(): boolean;
    setHideSelectFrameSign(sign: boolean): void;
    /**
     * 销毁实例
     */
    destroy(): void;
    destroy(widgetName: string): void;
    destroy(widgetName: string[]): void;
    update(): void;
    /**
     * 清除字典
     */
    clear(): void;
    /**
     * 根据cellId获取单元格控件依赖
     * @param initialCellId 单元格id
     * @param dependences 依赖数组（递归使用，默认不传）
     * @returns 依赖
     */
    getWidgetDependenceByCellId(initialCellId?: string, dependences?: string[]): string[];
}
interface uninitializedWidgetProps {
    init: Function;
    cellId: string;
    dependenceMap: {
        [key: string]: string;
    };
    cellWidgetName: string;
}
export {};
