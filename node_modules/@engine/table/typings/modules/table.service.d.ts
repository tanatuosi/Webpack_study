import type { Range, TextShadow } from '@fui/sheet/types';
import { Rule } from 'jss';
import { CellHtml } from './cell/cell.abstract';
import { TableCellGenerator } from './table.cell_generator';
import { BackgroundRepeat, BorderType, CellStyle, DefaultCellStyle, Frozen, PageResult, TableStickerOpt, XBorder, XCellDimension, XCellPosition, XCellStyle, XCellValue } from './table.types';
export declare function getBorderStyle({ width, style, color }: XBorder): BorderType;
export declare function getCellStyle(cellstyle: XCellStyle | undefined, defaultStyle: DefaultCellStyle): CellStyle;
export declare function createEmptyCell(x: number, y: number, width: number, height: number, rowSpan: number, columnSpan: number): PageResult;
export declare function getCompleteImageUrl(id: string, cache: boolean): string;
export declare function removeOldStyles(rule: Rule): void;
export declare function addNewStyles(rule: Rule, styles: {
    [key: string]: string;
}): void;
export declare function adjustRows(rows: number[], paperHeight: number, isFrozen?: boolean): number[];
export declare function adjustCols(cols: number[], paperWidth: number, isFrozen?: boolean): number[];
export declare function getCellSize(celldimension: XCellDimension, colDefalut: number, rowDefault: number): {
    col: number;
    row: number;
};
/**
 * 转换cell value值
 * @param value string类型
 * @returns object
 */
export declare function getCellValue(value: string): XCellValue | undefined;
/**
 * 根据cell值获取cell实际值
 * @param cell cell
 * @returns 实际值
 */
export declare function getCellValueByCell(cell?: PageResult): string | number | boolean | {
    [key: string]: any;
} | undefined;
/**
 * 根据cell值获取cell显示值
 * @param cell cell
 * @returns 显示值
 */
export declare function getCellTextByCell(cell?: PageResult): string;
export declare function getCell(pageResult: PageResult, tableCellGenerator: TableCellGenerator): import("./cell/cell.abstract").AbstractTableCell;
export declare function expandHtml(html: string | undefined, style: Partial<NonNullable<TableStickerOpt['extension']>['style']>, fontScale?: number): {
    el: string;
    initialEl: string;
    style: {
        paddingLeft: number;
        paddingRight: number;
        lineHeight: number;
        spacingBefore: number;
        spacingAfter: number;
        verticalAlign: string;
        textAlign: string;
        color: string | number;
        bold: string | number | boolean;
        fontFamily: string;
        fontSize: number;
        italic: string | boolean;
        strikeThrough: boolean;
        textShadow: boolean | import("./table.types").XTextShadow;
        underLine: {
            width: number;
            style: string;
            color: number;
        } | {
            width: number;
            style: string;
            color: string | number;
        };
        height: string;
        cursor: string;
    };
};
export declare function getMerge(x: number, y: number, columnSpan: number, rowSpan: number): Range;
export declare function getFreeze(frozen?: {
    colFrom: number;
    colTo: number;
    rowFrom: number;
    rowTo: number;
}): [number, number];
export declare function getImgLayout(type: number | BackgroundRepeat): BackgroundRepeat;
/**
 * 单元格地址转化为单元格位置
 * @param address 单元格地址
 */
export declare function address2Position(address: string): {
    x: number;
    y: number;
} | undefined;
/**
 * 修复冻结时合并单元格的问题
 */
export declare function fixFreezeMerge(data: PageResult[][], frozen?: Frozen): void;
export declare function getSticker(x: number, y: number, cellHtml: CellHtml, cell: PageResult): TableStickerOpt;
/**
 * cv转换为value
 * @param cv 实际设置值
 */
export declare function transformCellCv(cv: XCellValue['cv']): {
    xtype: string;
    value: string;
    text: string;
};
/**
 * 根据位置计算id
 * @param x 列
 * @param y 行
 * @returns 字符串
 */
export declare function transformPosition2Id(x: number, y: number): string;
export declare function transformFontWeight(fontWeight: boolean | string | number): string;
export declare function transformTextShadow2Css(textShadow: TextShadow | boolean): string;
export declare function transformFontItalic(fontStyle: boolean | string): string;
/**
 * 选区内被合并的单元格填充真实单元格位置信息
 * @param tableData 表格数据
 * @param position 真实单元格位置
 */
export declare function fixRealCellPositionInMergeCell(tableData: PageResult[][], position: XCellPosition): void;
