import { PageResult, XCellPosition, XCellStyle } from '../../table.types';
import { HandlerExternalContext } from '../handler';
import { AbstractCellHandler } from '../handler.abstract';
/**
 * 针对处理单元格的样式的handler基类
 */
export declare abstract class AbstractCellStyleHandler extends AbstractCellHandler {
    eventNames: string[];
    merger: string;
    protected filter: (cell: PageResult, position: XCellPosition) => boolean;
    protected canCellReset: (position: XCellPosition, eventPosition: XCellPosition) => boolean;
    protected clickCache: Map<string, Partial<XCellStyle> | undefined>;
    protected hoverCache: Map<string, Partial<XCellStyle> | undefined>;
    protected cellStyle?: Partial<XCellStyle>;
    protected trigger: TriggerType;
    protected eventTrigger: 'mousedown' | 'mouseover';
    protected eventPosition: {
        x: number;
        y: number;
    };
    private filterOperationMap;
    private canCellResetMap;
    constructor(externalInterface: HandlerExternalContext, opt: HandlerConfig);
    /**
     * 改变表格的值
     */
    protected alterTableCellStyle(cells: {
        x: number;
        y: number;
        style?: Partial<XCellStyle> | undefined;
    }[]): void;
    action({ e, cell }: Parameters<AbstractCellHandler['action']>[0]): void;
    protected doAction(x: number, y: number): void;
    private updateTable;
    /**
     * 根据样式计算需要保存的属性
     * @param cellStyle 样式
     */
    protected abstract transform2DeaultStyle(cellStyle?: XCellStyle): Partial<XCellStyle>;
    /**
     * 改变单个单元格的样式
     * @param x x坐标
     * @param y y坐标
     */
    protected alterCell(x: number, y: number): void;
    private resetTableCell;
    private resetHoverCell;
    private resetClickCell;
}
export declare type TriggerType = 'mousedown' | 'mouseover' | undefined;
export interface HandlerConfig {
    style: XCellStyle['fontStyle'] | string;
    type: 'cell' | 'line' | 'column' | 'cross' | ((cell: PageResult, position: XCellPosition) => boolean);
    hold?: 'row' | 'column' | 'all' | 'default' | 'cross' | ((position: XCellPosition, eventPosition: XCellPosition) => boolean);
    trigger: TriggerType;
}
