import { Model } from '@engine/core';
import { CellHandler } from './handler/handler';
import { Frozen, PageResult, processTableDataArgs, ReportFitAttr, ReportSettingDetail } from './table.types';
export declare class TableModel extends Model {
    static xtype: string;
    private data;
    private rowChunkLoadData;
    private setTableLoading;
    private options;
    state(): {
        cellstyle: {};
        loading: boolean;
        reportSettingDetail: ReportSettingDetail;
        reportFitAttr: ReportFitAttr;
        activeBox: boolean;
        frozen: Frozen | undefined;
        viewAtCenter: boolean;
        selectedCell: {
            row: number;
            col: number;
        } | undefined;
        tableWidth: number;
        tableHeight: number;
        screenWidth: number;
        webBackground: {
            [key: string]: any;
        };
    };
    computed: {
        paperSetting: () => import("./table.types").PageSettingConfig;
        paperBackground: () => {
            [key: string]: string;
        };
        footerHeight: () => number;
        headerHeight: () => number;
        headerBackground: () => string;
        footerBackground: () => string;
        paperWidth: () => number;
        paperHeight: () => number;
        resizeModel: () => import("..").NoneResizer;
        isAdaptiveTable: () => boolean;
        hasFrozen: () => boolean | undefined;
    };
    actions: {
        setTableLoading: (v: boolean) => void;
        setReportSetting: (v: ReportSettingDetail) => void;
        setReportFitAttr: (v: ReportFitAttr) => void;
        setViewAtCenter: (v: boolean) => void;
        setTableWidth: (width: number) => void;
        setTableHeight: (height: number) => void;
        setScreenWidth: (width: number) => void;
        setWebBackground: (webBackground: {
            [key: string]: any;
        }) => void;
        prePopulate: (size: {
            screenWidth: number;
            tableWidth: number;
            tableHeight: number;
        }, $data?: PageResult[][] | undefined) => false | processTableDataArgs;
        getTableData: () => PageResult[][];
        /**
         * 完整加载表格数据
         * @param opts 传入参数
         */
        completeLoadData: (opts: processTableDataArgs) => void;
        /**
         * 行分块加载数据
         * @param opts 传入参数
         */
        rowChunkLoadData: (opts: processTableDataArgs) => void;
        resize: (width: number, height: number, element: any, screenWidth: number) => void;
        addHandler: (handler: CellHandler, config?: any) => void;
        setFrozen: (frozen?: Frozen | undefined) => void;
        setActiveBox: (activeBox: boolean) => void;
        setSelectedCell: (v: {
            row: number;
            col: number;
        } | undefined) => void;
        refreshCellValues: (cells: PageResult[]) => void;
    };
    private setData;
    private adaptTable;
    private adjustAndLoadData;
    /**
     * 单元格填补空白
     */
    private adjustRowsAndCols;
    /**
     * 转换行为表格所需的行数据，直接修改引用
     */
    private transformTableRowData2SheetRowData;
    /**
     * 转换行为表格所需的单元格数据，直接修改引用
     */
    private transformTableCellData2SheetCellData;
    /**
     * 转换行为表格所需的单元格信息
     */
    private transformTableCellData2SheetCellArgs;
    /**
     * 把页面的布局信息转换成单元格
     */
    private fixData;
    /**
     * 转化下tableData，填充合并真实单元格信息
     * @param data 表格数据
     * @returns 转化后的表格数据
     */
    private transformTableData;
}
