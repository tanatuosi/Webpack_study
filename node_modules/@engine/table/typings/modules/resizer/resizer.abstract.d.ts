import { SheetOptions } from '@fui/sheet/types';
import { CellType, TableStickerOpt } from '../table.types';
import { ResizeOption } from './resizer';
export interface IAbstractResizerConstructorArgs {
    minFontSize?: number;
    [key: string]: any;
}
export declare abstract class AbstractResizer {
    isAdaptive: boolean;
    protected minResizeScale: number;
    protected minFontSize: number;
    protected widthResizeScale: number;
    protected heightResizeScale: number;
    abstract resize(data: SheetOptions, opt: ResizeOption): SheetOptions;
    constructor(opts?: {
        minFontSize?: number;
    });
    resizeWidth(cols: number[], width?: number, rate?: number): number;
    resizeHeight(rows: number[], height: number, rate?: number): number;
    protected resizeFont(rate: number, cells?: CellType[][]): void;
    protected resizeSticker(rate: number, sheet: SheetOptions['sheet']): void;
    protected expandHtml(el: string, style: NonNullable<TableStickerOpt['extension']>['style'], fontScale: number): {
        el: string;
        initialEl: string;
        style: {
            paddingLeft: number;
            paddingRight: number;
            lineHeight: number;
            spacingBefore: number;
            spacingAfter: number;
            verticalAlign: string;
            textAlign: string;
            color: string | number;
            bold: string | number | boolean;
            fontFamily: string;
            fontSize: number;
            italic: string | boolean;
            strikeThrough: boolean;
            textShadow: boolean | import("../table.types").XTextShadow;
            underLine: {
                width: number;
                style: string;
                color: number;
            } | {
                width: number;
                style: string;
                color: string | number;
            };
            height: string;
            cursor: string;
        };
    } | {
        el: string;
        style: undefined;
        initial: string;
    };
    /**
     * 通过font-scale属性进行字体自适应
     * @param element 父级元素
     */
    resizeFontByFontScaleAttr(element: any): void;
}
