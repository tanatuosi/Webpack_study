import { Layout } from '@fui/core';
import { Bounds } from '@fui/sheet/types';
import { Loading, WidgetManager } from '@engine/utils';
import { AbstractCellControllerHoc } from './cell/cell_controllers/cell_controller_hoc/cell_controller_hoc.abstract';
import { HandlerConfig, TriggerType } from './handler/cell_style/handler.abstract.cell_style';
import { CellHandler } from './handler/handler';
import { CellSetStyleArgs, Frozen, PageResult, ReportFitAttr, ReportSettingDetail, TableDirtyCell, TableRadiusRangeArgs, XCellStyle, XCellValue } from './table.types';
import { TableCell } from './table_api/table.api_cell';
import { TableColumn } from './table_api/table.api_column';
import { TableRow } from './table_api/table.api_row';
export declare class AxisSheet extends BI.Widget {
    static xtype: string;
    static EVENT_LOADED: string;
    static EVENT_FETCH_DATA: string;
    static EVENT_SELECT_CELL: string;
    private loading;
    private store;
    private model;
    private background;
    private table;
    private sheet;
    private sheetStyles;
    private mouseInBounds;
    private timer;
    private isDisableContextMenu;
    /**
     * 作用于sticker部分任意组件的管理器
     */
    stickerManagers: Map<string, WidgetManager<any>>;
    private tableCellGenerator;
    /**
     * 暴露给api的方法
     */
    private tableContext4Api;
    props: {
        tableData?: PageResult[][];
        baseCls?: string;
        $testId?: string;
        reportSettingDetail?: ReportSettingDetail;
        reportFitAttr?: ReportFitAttr;
        viewAtCenter?: boolean;
        frozen?: Frozen;
        browserBg?: {
            [key: string]: any;
        };
        widgetName?: string;
        activeBox?: boolean;
        tableWidth?: number;
        tableHeight?: number;
        screenWidth?: number;
        synchronize?: boolean;
        supportCSSTransform?: boolean;
        isDisableContextMenu?: boolean;
    };
    watch: {
        reportSettingDetail: () => void;
        loading: (loading: boolean) => void;
        webBackground: () => void;
    };
    mounted(): void;
    render(): {
        type: string;
        scrollable: boolean;
        cls: string;
        items: ({
            el: {
                type: string;
                scrollx: boolean;
                horizontalAlign: string;
                items: {
                    type: string;
                    invisible: boolean;
                    cls: string;
                    ref: (_ref: Layout) => void;
                    width: number;
                    height: number;
                }[];
                invisible?: undefined;
                cls?: undefined;
                ref?: undefined;
                $testId?: undefined;
            } | {
                type: string;
                invisible: boolean;
                cls: string;
                ref: (_ref: Layout) => void;
                scrollx?: undefined;
                horizontalAlign?: undefined;
                items?: undefined;
                $testId?: undefined;
            };
            top: number;
            left: number;
            right: number;
            bottom: number;
        } | {
            el: {
                type: string;
                ref: (_ref: Layout) => void;
                scrollx?: undefined;
                horizontalAlign?: undefined;
                items?: undefined;
                invisible?: undefined;
                cls?: undefined;
                $testId?: undefined;
            };
            top: number;
            left: number;
            right: number;
            bottom: number;
        } | {
            el: {
                type: string;
                ref: (_ref: Loading) => void;
                $testId: string;
                invisible: boolean;
                scrollx?: undefined;
                horizontalAlign?: undefined;
                items?: undefined;
                cls?: undefined;
            };
            top: number;
            left: number;
            right: number;
            bottom: number;
        })[];
    };
    /**
     * 获取纸张所在实例
     */
    getPaperWidget(): Layout;
    /**
     * 根据位置获取id
     * @param col 列
     * @param row 行
     */
    private getCellIdByPosition;
    /**
     * 根据位置获取单元格控件
     * @param row 行
     * @param col 列
     */
    getWidgetByCell(address: string): AbstractCellControllerHoc | undefined;
    getWidgetByCell(row: number, col: number): AbstractCellControllerHoc | undefined;
    /**
     * 取依赖值（与控件取值不同，若有控件值为数组，应返回最后数组最后一位，即为树结构的子节点）
     * @param realId 单元格id地址或控件id
     */
    getDependenceValueById(realId: string): any;
    /**
     * 根据控件名获取单元格控件数组
     * @param widgetName 控件名
     * @returns 单元格控件widget数组
     */
    getCellControllersByWidgetName(widgetName: string): AbstractCellControllerHoc[];
    /**
     * 选中单元格
     * @param position 单元格位置信息，为空则默认第一个带widget的单元格
     */
    selectCell(id: string): {
        id: string;
        cell: PageResult;
    } | undefined;
    selectCell(cell?: PageResult): {
        id: string;
        cell: PageResult;
    } | undefined;
    selectCell(position?: {
        row: number;
        col: number;
    }): {
        id: string;
        cell: PageResult;
    } | undefined;
    /**
     * 选中下一个单元格
     */
    selectNextCell(): void;
    /**
     * 通过手动调用的方式选中单元格(区别于在页面中通过点击等行为选中单元格)
     *   增加单元格状态统一的处理逻辑
     * @param positionOrIdOrCell
     * @returns
     */
    setSelectCell(positionOrIdOrCell?: {
        row: number;
        col: number;
    } | string | PageResult): {
        id: string;
        cell: PageResult;
    } | undefined;
    /**
     * 获取当前选中单元格信息
     */
    getSelectedCell(): {
        row: number;
        col: number;
    } | undefined;
    getTableData(): PageResult[][];
    populate(data?: PageResult[][], options?: {
        sync?: boolean;
        silent?: boolean;
        cache?: boolean;
    }): void;
    setLoading(loading: boolean): void;
    setReportSettingDetail(v: ReportSettingDetail): void;
    setFrozen(frozen?: Frozen): void;
    setReportFitAttr(v: ReportFitAttr): void;
    setViewAtCenter(viewAtCenter: boolean): void;
    setActiveBox(activeBox: boolean): void;
    setTableWidth(width: number): void;
    setTableHeight(height: number): void;
    setScreenWidth(width: number): void;
    setWebBackground(background: {
        [key: string]: any;
    }): void;
    /**
     * 自适应表格
     */
    resize(width: number, height: number): void;
    /**
     * 重绘前清除所有sticker对象
     */
    private clearInstances;
    /**
     * 重绘前更新所有sticker对象，可以控制不清除，manager内部处理
     */
    private updateInstances;
    /**
     * 根据单元格行列坐标获取位置，e2e对外公开接口
     * @param row 第n行，从1开始
     * @param col 第n列，从1开始
     */
    getCellPosition(row: number, col: number): Bounds;
    /**
     * 设置横向滚动条显隐
     */
    setHScrollBarVisible(visible: boolean): void;
    /**
     * 设置纵向滚动条显隐
     */
    setVScrollBarVisible(visible: boolean): void;
    /**
     * 开启跑马灯效果
     * @param offset 每次的滚动距离
     * @param interval 滚动间隔
     */
    startMarquee(opt?: {
        offset?: number;
        interval?: number;
        stopOnHover?: boolean;
        to?: 'left' | 'right' | 'top' | 'bottom';
    }): void;
    /**
     * 关闭跑马灯效果
     */
    stopMarquee(): void;
    /**
     * 改变背景色
     */
    addBackgroundColorHandler(config: HandlerConfig): void;
    addHighlightRowEffect(color: string, trigger: TriggerType): void;
    addHighlightRowHoldEffect(color: string, trigger: TriggerType): void;
    addHighlightColEffect(color: string, trigger: TriggerType): void;
    addHighlightColHoldEffect(color: string, trigger: TriggerType): void;
    addHighlightCrossEffect(color: string, trigger: TriggerType): void;
    addHighlightCrossHoldEffect(color: string, trigger: TriggerType): void;
    addHighlightCellEffect(color: string, trigger: TriggerType): void;
    addHighlightCellHoldEffect(color: string, singleLine: boolean | undefined, trigger: TriggerType): void;
    /**
     * 改变字体样式
     */
    addFontStyleHandler(config: HandlerConfig): void;
    addSetCellFontEffect(fontConfig: XCellStyle['fontStyle'], trigger: TriggerType): void;
    addSetCellFontHoldEffect(fontConfig: XCellStyle['fontStyle'], singleLine: boolean | undefined, trigger: TriggerType): void;
    addSetRowFontEffect(fontConfig: XCellStyle['fontStyle'], trigger: TriggerType): void;
    addSetRowFontHoldEffect(fontConfig: XCellStyle['fontStyle'], singleLine: boolean | undefined, trigger: TriggerType): void;
    addPopoverEffect(address: string, opts: {
        text?: string;
        header?: string;
        image?: string;
        style?: CellSetStyleArgs;
        type?: string;
    }): void;
    addHandler(handler: CellHandler, config?: any): void;
    /**
     * 单元格实现圆角
     * @param radius
     */
    setCellRadius(radius: number, range?: TableRadiusRangeArgs, single?: boolean): void;
    /**
     * 改变单元格行高
     * @param row 行号
     * @param height 行高
     */
    setRowHeight(row: number, height: number): void;
    /**
     * 改变单元格列宽
     * @param col 列号
     * @param height 列宽
     */
    setColWidth(col: number, height: number): void;
    /**
     * 获取指定位置单元格的值（旧）
     */
    getCellValue(col: number, row: number): XCellValue['cv'];
    getCellValue(address: string): XCellValue['cv'];
    /**
     * 获取指定位置单元格的值（新）
     */
    getCellVal(row: number, col: number): XCellValue['cv'];
    getCellVal(address: string): XCellValue['cv'];
    private getTableCellValueByPosition;
    /**
     * 校验单元格控件
     */
    verifyCellControllers(): {
        id: string;
        message: string;
    }[];
    /**
     * 获取所有脏数据
     */
    getDirtyCells(clear?: boolean): TableDirtyCell[];
    /**
     * 清空脏数据状态
     */
    clearDirtyCells(): void;
    /**
     * 获取已编辑单元格
     */
    getEditedCells(): PageResult[];
    /**
     * 清空修改数据状态
     */
    clearEditedCells(): void;
    /**
     * 设置错误单元格
     * @param cells 单元格信息
     */
    setErrorCells(cells: {
        id: string;
        message: string;
    }[]): {
        row: number;
        col: number;
        value: string;
    }[];
    /**
     * 获取错误单元格
     */
    getErrorCells(): PageResult[];
    /**
     * 清空修改数据状态
     */
    clearErrorCells(): {
        row: number;
        col: number;
        value: string;
    }[];
    /**
     * 设置指定单元格的值（旧）
     * @param address 单元格位置 如：A1
     * @param value 单元格值
     */
    setCellValue(address: string, anything: any, value: string): boolean;
    setCellValue(col: number | string, row: number | string, value: string): boolean;
    setCellValue(address: string, value: string): boolean;
    /**
     * 设置指定单元格的值（新）
     * @param address 单元格位置 如：A1
     * @param value 单元格值
     */
    setCellVal(address: string, anything: any, value: string): boolean;
    setCellVal(row: number | string, col: number | string, value: string): boolean;
    setCellVal(address: string, value: string): boolean;
    private setTableCellValueByPosition;
    /**
     * 设置指定单元格的值
     * @param value 单元格值
     * @param address 单元格位置
     */
    setCellValueByPosition(value: string, position?: {
        x: number;
        y: number;
    }): boolean;
    beforeDestroy(): void;
    /**
     * 高亮错误单元格错误信息
     * @param id 错误单元格id
     */
    highlightErrorCell(id: string, messgae?: string): void;
    private reLayout;
    private changeSize;
    private changeBackground;
    emitCellEvent<T extends any>(eventName: string, arg: any): Promise<T>;
    /**
     * 纵向滚动
     * @param offset 滚动距离
     * @param reverse 反向滚动
     */
    private whellScrollY;
    /**
     * 根据单元格id将单元格的位置调整到可视范围内
     * @param id 单元格id
     * @returns
     */
    adjustCell2Visible(id: string): void;
    /**
     * 横向滚动
     * @param offset 滚动距离
     */
    private whellScrollX;
    /**
     * 通过单元格位置获取单元格的值
     * @param id 单元格位置 如：A1
     * @returns 单元格的值
     */
    private getCellValueById;
    /**
     * 通过单元格位置获取单元格cell信息
     * @param id 单元格位置 如：A1
     * @returns 单元格cell信息
     */
    private getCellById;
    /**
     * 通过单元格位置获取单元格所在行列信息
     * @param id 单元格位置 如：A1
     * @returns 单元格行列信息
     */
    getCellPositionById(id: string): {
        row: number;
        column: number;
    } | undefined;
    /**
     * 通过单元格id获得单元格所在行
     * @param id 单元格id
     * @returns 单元格所在行
     */
    getTDRow(id: string): number | undefined;
    /**
     * 隐藏控件选中高亮提示
     */
    hideSelectFrame(): void;
    /**
     * 获取第col列，第row行的单元格对象，合并非首行的返回undefined
     * @param col 列
     * @param row 行
     * @returns 单元格对象
     */
    getCell(row: number | string, col: number | string): TableCell | undefined;
    /**
     * 获取指定行对象
     * @param row 索引
     * @returns 行对象
     */
    getRow(row: number): TableRow | undefined;
    /**
     * 获取指定列对象
     * @param col 索引
     * @returns 列对象
     */
    getColumn(col: number): TableColumn | undefined;
    /**
     * 获取行数
     * @returns 行数
     */
    getRowCount(): number;
    /**
     * 获取列数
     * @returns 列数
     */
    getColumnCount(): number;
    /**
     * 创建自定义事件监听handler
     */
    private createCustomEventHandler;
    /**
     * 添加事件监听
     * @param actionType 事件type
     * @param func 事件逻辑
     */
    addMouseEventHandler(actionType: string, callback: Function): void;
    /**
     * 设置滚动位置
     * @param x 横坐标
     * @param y 纵坐标
     */
    scrollTo(x: number, y: number): void;
    /**
     * 获取滚动位置
     * @returns 位置
     */
    getScrollOffset(): {
        x: number;
        y: number;
    };
    destroyed(): void;
    /**
     * 是否禁用表格contextMenu
     * @param disable
     */
    disableContextMenu(disable: boolean): void;
}
