import { AbstractParameterControllerWidget, ControllerValidation } from '@engine/controller';
import { AbsoluteLayout, DefaultLayout, Tab } from '@fui/core';
import { AbstractParameterCellControllerWidget } from '../../cell_controller.abstract';
import { AbstractCellControllerHoc } from '../cell_controller_hoc.abstract';
import './cell_controller_hoc.indirect.less';
/**
 * 非直接显示控件
 */
export declare class IndirectCellController extends AbstractCellControllerHoc {
    static xtype: string;
    static EVENT_OPEN: string;
    props: AbstractCellControllerHoc['props'];
    private controller;
    private tip;
    private tab;
    private seleciontMarker;
    private hightLightBorder;
    private controllerWrapper?;
    render(): {
        type: string;
        ref: (ref: Tab) => void;
        showIndex: string;
        cardCreator: (v: string) => {
            type: string;
            ref: (ref: AbsoluteLayout) => void;
            items: {
                el: AbstractParameterControllerWidget | AbstractParameterCellControllerWidget;
                top: number;
                left: number;
                bottom: number;
                right: number;
            }[];
        } | {
            type: string;
            items: ({
                el: {
                    type: string;
                    invisible: boolean;
                    value: any;
                    textAlign: string;
                    cls: string;
                    ref: (ref: import("@fui/core").Label) => void;
                };
                top: number;
                left: number;
                right: number;
                bottom: number;
            } | {
                el: {
                    ref: (ref: DefaultLayout) => void;
                    disabled: boolean;
                    invisible: boolean;
                    width: number;
                    height: number;
                    cls: string;
                    type: string;
                    items?: undefined;
                };
                top: number;
                left: number;
                right: number;
                bottom: number;
            } | {
                el: {
                    type: string;
                    invisible: boolean;
                    ref: (ref: AbsoluteLayout) => void;
                    items: ({
                        el: {
                            ref: (ref: DefaultLayout) => void;
                            disabled: boolean;
                            width: number;
                            height: number;
                            cls: string;
                            type: string;
                            iconWidth?: undefined;
                            iconHeight?: undefined;
                            stopPropagation?: undefined;
                            handler?: undefined;
                        };
                        top: number;
                        left: number;
                        right: number;
                        bottom: number;
                    } | {
                        el: {
                            cls: string;
                            iconWidth: number;
                            iconHeight: number;
                            width: number;
                            height: number;
                            type: string;
                            stopPropagation: boolean;
                            handler: () => void;
                        };
                        top: number;
                        right: number;
                        left?: undefined;
                        bottom?: undefined;
                    })[];
                };
                top: number;
                left: number;
                right: number;
                bottom: number;
            })[];
            ref?: undefined;
        };
    };
    mounted(): void;
    /**
     * 控件是否被挂载
     */
    private isControllerRegistered;
    /**
     * 根据状态挂载或者不挂载控件
     * @param state 状态
     */
    private handleControllerByState;
    setEnable(enable: boolean): void;
    setVisible(visible: boolean): void;
    getValue(): any;
    setValue(v: string): void;
    postGetValidation(): ControllerValidation;
    postValidateAndToast(): true;
    preGetValidation(): ControllerValidation;
    reset(): void;
    setControllerValue(v: string): Promise<void>;
    active(): void;
    inactive(): void;
    isActive(): boolean;
    setText(): void;
    /**
     * 对非直接显示控件进行resize
     * 修复 https://work.fineres.com/browse/REPORT-73661 引入
     * @param width
     * @param height
     */
    resize(width: number, height: number): void;
    reloadControlAttr(): void;
    setSeleted(v: boolean): void;
    hideHightlightBorder(): void;
    /**
     * 查看控件是否是非正常状态
     */
    private isControllerUnusalState;
    setStyle(): void;
    getValidation(): ControllerValidation;
    getDependenceValue(): any;
}
