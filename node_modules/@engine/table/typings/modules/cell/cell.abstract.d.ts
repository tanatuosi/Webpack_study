import './cell.less';
import { Cell, StickerOpt } from '@fui/sheet/types';
import { CellType } from '../table.types';
import { Transform2CellArgs } from './cell';
import { TableExternalContext } from '../table.cell_generator';
import { CellControllerManager } from '../table.cell_controller_manager';
export declare abstract class AbstractTableCell {
    protected options: Transform2CellArgs;
    protected external: TableExternalContext;
    protected cellControllerManager: CellControllerManager;
    private cellErrorTipManager;
    private cellCacheManager;
    id: string;
    getCellStickers(): (CellHtml | undefined)[];
    constructor(opts: Transform2CellArgs, external: TableExternalContext);
    protected getTextByCellValue(value?: string | object): any;
    protected abstract toFullCell(): CellType;
    protected isDirectWidget(): boolean;
    toCell(): CellType;
    protected toHtml(): CellHtml | undefined;
    static transform2CellText(text?: string | object): string;
    static transform2String(v: any): string;
    protected fireEvent(eventName: string, args: {
        e: Event;
        x: number;
        y: number;
        cell: Cell;
        [key: string]: any;
    }): Promise<any>[];
    private toEmptyCell;
    protected toWidget(): CellHtml | undefined;
    /**
     * 创建状态标记
     */
    protected toState(): CellHtml | undefined;
    getStateWidgetJson(wraffleWidth: number, _wraffleHeight: number): {
        [key: string]: any;
    }[];
    protected toFilter(): CellHtml | undefined;
}
export interface CellHtml {
    value: string;
    id: StickerOpt['id'];
    init?: StickerOpt['init'];
    cursor?: string;
    style?: {
        [key: string]: number | string;
    };
    /**
     * 需要富文本拓展
     */
    extended?: boolean;
    lazy?: StickerOpt['lazy'];
}
export declare type EventCellWidgetChangeArgs = Parameters<AbstractTableCell['fireEvent']>[1] & {
    id: string;
    value: any;
    direct: boolean;
    callback?: Function;
};
