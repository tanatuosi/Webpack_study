import { Cell } from '@fui/sheet/types';
import { AbstractLink } from '@engine/link';
import { TableExternalContext } from '../table.cell_generator';
import { CellStyle, XCell, XCelladvancedattr, XCellSortHeader } from '../table.types';
import { AbstractTableCell } from './cell.abstract';
export declare function transformCellTypeByOpts(opts: Transform2CellArgs): string;
export declare class TableCellTypeProvider {
    private typeTransformer;
    transform(opts: Transform2CellArgs): string;
    use(fn: typeof transformCellTypeByOpts): void;
}
export declare const tableCellTypeProvider: TableCellTypeProvider;
interface TableCell extends Function {
    new (opts: Transform2CellArgs, external: TableExternalContext): AbstractTableCell;
}
export declare class TableCellProvider {
    private cellDict;
    get(opts: Transform2CellArgs, external: TableExternalContext): AbstractTableCell;
    set(key: string, value: TableCell): void;
}
export declare const tableCellProvider: TableCellProvider;
export interface Transform2CellArgs {
    cell: XCell;
    style: CellStyle;
    hyperLinks: AbstractLink[];
    listeners: {
        eventName: string;
        action: (args: {
            e: Event;
            x: number;
            y: number;
            cell: Cell;
            [key: string]: any;
        }) => void | Promise<void>;
    }[];
    celladvancedattr?: XCelladvancedattr;
    sortHeader?: XCellSortHeader;
    widget?: {
        [key: string]: any;
    };
}
export {};
