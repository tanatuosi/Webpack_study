import type { BackgroundType, ErrorResult } from '@engine/core';
import type { Cell, Range, StickerOpt } from '@fui/sheet/types';
import type { XCellHyperLink } from '@engine/link';
import type { CellHandler } from './handler/handler';
import type { TableCell } from './table_api/table.api_cell';
import type { TableColumn } from './table_api/table.api_column';
import type { TableRow } from './table_api/table.api_row';
/**
 * 后端分页数据结构
 */
export interface PageResult {
    cell: string;
    value: string;
    position: XCellPosition;
    celldimension: XCellDimension;
    cellstyle?: XCellStyle;
    cellhyperlink?: XCellHyperLink;
    valid?: boolean;
    sortHeader?: XCellSortHeader;
    celladvancedattr?: XCelladvancedattr;
    celladjustattr?: XCelladjustattr;
    /**
     * 修改后的数据是否传入后台
     */
    dirty?: boolean;
    /**
     * 修改后的数据是否校验
     */
    edited?: boolean;
    /**
     * 数据是否被修改过（修改过一次之后不会改变状态）
     */
    transformed?: boolean;
    /**
     * 是否通过数据校验
     */
    errorMsg?: string;
    id?: number | string;
    idx?: number;
    pId?: number | string;
    open?: boolean;
    /**
     * pv转换正则
     */
    fmt?: string;
    /**
     * 单元格是否联动
     */
    frs?: boolean;
    /**
     * 是否直接显示控件
     */
    isShowWidgets?: boolean;
    direction: DataTemplate['direction'];
    indent?: number;
    widget?: {
        [key: string]: any;
    };
    merge?: string;
    sourceCellPosition?: XCellPosition;
}
export declare type XBorderStyle = 'slim_solid' | 'solid' | 'dashed' | 'hair' | 'hair2' | 'thick' | 'double' | 'dotted' | 'dash_dot' | 'dash_dot_dot' | 'slanted_dash_dot' | 'double_dot' | 'large';
/**
 * 单元格位置
 */
export interface XCellPosition {
    /**
     * 代表col
     */
    x: number;
    /**
     * 代表row
     */
    y: number;
    rowSpan?: number;
    columnSpan?: number;
}
/**
 * 单元格尺寸
 */
export interface XCellDimension {
    width: number;
    height: number;
}
/**
 * 单元格样式
 */
export interface XCellStyle {
    fontStyle: {
        bold: boolean | string | number;
        italic: boolean | string;
        fontFamily: string;
        strikeThrough: boolean;
        fontSize: number;
        subscript?: boolean;
        underLine: {
            width: number;
            style: string;
            color: number | string;
        };
        textShadow: boolean | XTextShadow;
        supscript?: boolean;
        color: number | string;
    };
    borderStyle: {
        topBorder: XBorder;
        bottomBorder: XBorder;
        leftBorder: XBorder;
        rightBorder: XBorder;
    };
    contentStyle: {
        paddingLeft: number;
        paddingRight: number;
        lineHeight: number;
        spacingBefore: number;
        spacingAfter: number;
        verticalAlign: string;
        textAlign: string;
        newLine: string;
        rotate?: number;
        verTextDirection?: string;
        verticalText?: string;
    };
    cellBackground: {
        background: {
            backgroundType?: BackgroundType;
            color?: number | string;
            attachmentId?: string;
            imgUrl?: string;
            layout?: number | BackgroundRepeat;
            startColor?: number | string;
            endColor?: number | string;
            begin?: number;
            finish?: number;
            direction?: number;
            radiusConfig?: {
                radius: number;
                tlRadius: boolean;
                trRadius: boolean;
                blRadius: boolean;
                brRadius: boolean;
            };
        };
    } | null;
}
export interface XTextShadow {
    shadowBlur: number;
    shadowColor: string;
    shadowOffsetX: number;
    shadowOffsetY: number;
}
export declare type ContentTextAlign = 'left' | 'center' | 'right';
export declare type ContentVerticalAlign = 'top' | 'middle' | 'bottom';
export interface DefaultCellStyle {
    textAlign?: ContentTextAlign;
    cellJust?: 'NONE' | 'HEIGHT' | 'WIDTH';
}
export interface BorderType {
    width: number;
    style: string;
    color: string;
    dash: number[];
}
export interface BackgroundStyle {
    backgroundImage?: string;
    backgroundSize?: string;
    backgroundImageLayout?: string;
    backgroundColor?: string;
    linearGradient?: {
        degree: number;
        stops: {
            per: number;
            color: string;
        }[];
    };
    type: string;
    radiusConfig?: {
        radius: number;
        tlRadius: boolean;
        trRadius: boolean;
        blRadius: boolean;
        brRadius: boolean;
    };
}
export interface TableRadiusRangeArgs {
    row?: number[];
    column?: number[];
    cell?: number[];
}
export declare type BackgroundRepeat = 'repeat' | 'adapt' | 'stretch' | 'center' | 'default';
export interface CellSetStyleArgs {
    fontWeight?: 'normal' | 'bold' | 'lighter' | 'bolder' | number;
    fontStyle?: string;
    fontFamily?: string;
    fontSize?: number | string;
    color?: string;
    textDecorationLine?: string;
    textDecorationColor?: string;
    textDecorationStyle?: string;
    textDecorationThickness?: string | number;
    textShadow?: string;
    lineHeight?: number;
    border?: string;
    borderTop?: string;
    borderBottom?: string;
    borderLeft?: string;
    borderRight?: string;
    backgroundColor?: string;
    backgroundImage?: string;
    backgroundRepeat?: BackgroundRepeat;
    padding?: string;
    paddingTop?: number | string;
    paddingBottom?: number | string;
    paddingLeft?: number | string;
    paddingRight?: number | string;
    verticalAlign?: string;
    textAlign?: 'start' | 'end' | 'left' | 'right' | 'center' | 'justify' | 'match-parent';
    whiteSpace?: string;
}
export interface ReportSettingDetail {
    paperSetting?: PageSettingConfig;
    background?: {
        [key: string]: string;
    };
    /**
     * 页脚高度
     */
    footerHeight?: number;
    /**
     * 页眉高度
     */
    headerHeight?: number;
}
export interface PageSettingConfig {
    /**
     * 纸张方向 默认纵向, 1为横向
     */
    orientation: number;
    /**
     * 纸张宽度
     */
    paperWidth: number;
    /**
     * 纸张高度
     */
    paperHeight: number;
    /**
     * 左边距
     */
    marginLeft: number;
    /**
     * 上边距
     */
    marginTop: number;
    /**
     * 右边距
     */
    marginRight: number;
    /**
     * 下边距
     */
    marginBottom: number;
}
export interface TableDirtyCell {
    row: number;
    col: number;
    value: string;
    xtype: string;
    attr?: string;
    frs: boolean;
}
export interface TableApiContext {
    addHandler: (handler: CellHandler, config?: any) => void;
    emitCellEvent: (eventName: string, arg: any) => Promise<unknown>;
    getRow: (row: number) => TableRow | undefined;
    getColumn: (col: number) => TableColumn | undefined;
    getCell: (row: number | string, col: number | string) => TableCell | undefined;
}
export interface TableStickerOpt extends StickerOpt {
    el?: string;
    extension?: {
        el: string;
        initialEl: string;
        style?: {
            paddingLeft: number;
            paddingRight: number;
            lineHeight: number;
            spacingBefore: number;
            spacingAfter: number;
            verticalAlign: string;
            textAlign: string;
            color: number | string;
            bold: boolean | string | number;
            fontFamily: string;
            fontSize: number;
            italic: boolean | string;
            strikeThrough: boolean;
            textShadow: boolean | XTextShadow;
            underLine: {
                width: number;
                style: string;
                color: number | string;
            };
            height?: string;
            cursor?: string;
        };
    };
}
export interface CellStyle {
    backgroundStyle?: BackgroundStyle;
    borderStyle?: {
        borderTop: BorderType;
        borderBottom: BorderType;
        borderLeft: BorderType;
        borderRight: BorderType;
    };
    contentStyle?: {
        color: string;
        textAlign: ContentTextAlign;
        verticalAlign: ContentVerticalAlign;
        wrap: boolean;
        fontWeight: string | number;
        fontStyle: string;
        fontFamily: string;
        fontSize: string;
        defaultFontSize?: string;
        lineHeight: string;
        defaultLineHeight?: string;
        underline: {
            width: number;
            style: string;
            color: string;
            dash: number[];
        };
        strikeThrough: 'solid' | 'none';
        textShadow?: XTextShadow;
        subscript?: boolean;
        supscript?: boolean;
        rotate?: number;
        newLine: string;
        verTextDirection?: string;
        verticalText?: string;
        cellJust?: 'NONE' | 'HEIGHT' | 'WIDTH';
    };
    spacingAfter?: number;
    spacingBefore?: number;
    paddingLeft?: number;
    paddingRight?: number;
    fontSize?: string;
    defaultFontSize?: string;
}
export interface CellType {
    type: string;
    stick?: boolean;
    init?: (element: any) => void;
    listeners?: {
        eventName: string;
        action: Function;
    }[];
    image?: string;
    backgroundStyle?: CellStyle['backgroundStyle'];
    borderStyle?: CellStyle['borderStyle'];
    value?: string;
    items?: any[];
    canCopy?: boolean;
    valid?: boolean;
    cursor?: 'default' | 'pointer';
    title?: string;
    stopPropagation?: boolean;
    style?: CellStyle;
    autoWrapInfo?: number[];
    position: {
        x: number;
        y: number;
    };
    [key: string]: any;
}
export interface TableEventCellSelectTextArgs {
    row: number;
    col: number;
    text: string;
    cell: Cell;
}
export interface Frozen {
    colFrom: number;
    colTo: number;
    rowFrom: number;
    rowTo: number;
}
export interface processTableDataArgs {
    sheetData: CellType[][];
    rows: number[];
    cols: number[];
    stickers: TableStickerOpt[];
    merges: Range[];
    rowCount: number;
    columnCount: number;
    sx: number;
    sy: number;
    tableData: PageResult[][];
    screenWidth: number;
    tableWidth: number;
    tableHeight: number;
}
export interface XReportFitAttr {
    fitFont: boolean;
    /**
     * 表格自适应， 1：横向自适应  2：双向自适应  3：不自适应
     */
    fitStateInPC: 1 | 2 | 3;
    minFontSize?: number;
}
export declare type ReportFitAttr = XReportFitAttr & {
    fontScaleGetter?: () => number;
};
export interface CellTooltipArgs {
    show: boolean;
    content?: {
        text?: string;
        image?: string;
        header?: string;
    };
    style?: CellSetStyleArgs;
}
export interface XCelladjustattr {
    adjustStrategy: 'NONE' | 'HEIGHT' | 'WIDTH' | undefined;
}
export interface XBorder {
    width: number;
    style: string;
    color: number | string;
}
/**
 * json parse之后的cell value值
 */
export declare type XCellValue = {
    type: string;
    value: string;
    /**
     * 仅赋值时记录一份到cv，cv会转化为value。value是确定类型string，所有后台交互使用value
     * 对外仅取单元格值时会用到cv
     */
    cv?: any[] | string | number | boolean | {
        [key: string]: any;
    };
    pv?: string;
    xtype?: string;
    presentDep?: string[];
    text?: string;
};
export interface DataTemplate {
    cell: string;
    direction: 0 | 1 | 2;
}
export interface XCelladvancedattr {
    /**
     * 内容显示类型
     */
    contentShowType: 'DEFAULT' | 'SHOW_AS_HTML' | 'SHOW_AS_IMAGE' | 'SHOW_AS_DOWNLOAD';
    /**
     * 是否预览内容
     */
    previewContent: boolean;
    /**
     * 是否打印背景
     */
    printBackground: boolean;
    /**
     * 是否打印内容
     */
    printContent: boolean;
    /**
     * 提示信息
     */
    tooltipText?: string;
    /**
     * 是否超出隐藏
     */
    overflowHide?: boolean;
    /**
      * 隐藏类型
      */
    hideType?: 'CHAR_LENGTH' | 'CELL_WIDTH';
    /**
      * 保留字符长度
      */
    hideStrLength?: number;
    /**
      * 追加到尾部的字符
      */
    appendTailStr?: string;
    [key: string]: any;
}
export interface XCellSortHeader {
    headerArea: string;
    sortArea: string;
    /**
     * 排序选项
     */
    sortItems: XCellExpandAttrSortItem[];
    index: number;
    direction: number;
    /**
     * 当前排序状态
     */
    currentSortItem?: string;
}
interface XCellExpandAttrSortItem {
    description: string;
    iconId: string;
    type: number;
}
export declare type XCell = {
    type: XCellValue['type'];
    value?: XCellValue['value'];
    text?: string | object;
    id?: string;
    pId?: string;
    open?: boolean;
    direction?: 0 | 1 | 2;
    indent?: number;
    autoWrapInfo?: number[];
    valid: boolean;
    fmt?: string;
    isShowWidgets?: boolean;
    /**
     * 修改后的数据是否传入后台
     */
    dirty?: boolean;
    /**
     * 修改后的数据是否校验
     */
    edited?: boolean;
    /**
     * 数据是否被修改过（修改过一次之后不会改变状态）
     */
    transformed?: boolean;
    /**
     * 是否通过数据校验
     */
    errorMsg?: string;
    position: XCellPosition;
    [key: string]: any;
} & XCellValue;
export interface XLegalTableData {
    pageIndex: number;
    totalPage?: number;
    columnCount?: number;
    lastRow?: number;
    rowCount?: number;
    pageResult: PageResult[][];
    sheetIndex?: number;
    layerItems?: XTableLayerItem[];
    upNodeId?: number;
    templates?: DataTemplate[];
    effectEntries?: {
        targetId: number;
        effectRows: number;
    }[];
    frozen?: {
        colFrom: number;
        colTo: number;
        rowFrom: number;
        rowTo: number;
    };
}
interface XTableLayerItem {
    id: number;
    dep: number;
    child?: XTableLayerItem[];
}
export declare type XTableData = XLegalTableData | ErrorResult;
export {};
