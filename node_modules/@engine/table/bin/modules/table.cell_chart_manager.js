import { ChartManager } from '@engine/chart';
export class CellChartManager extends ChartManager {
    constructor() {
        super(...arguments);
        this.linkageCache = new Map();
    }
    /**
     * 根据cellName找到组件
     * @param cellName 单元格名称
     */
    getWidgetByCellName(cellName) {
        let $widget;
        this.controllerDict.forEach((widget, chartID) => {
            if (this.isChartIDMatchWithCellName(chartID, cellName)) {
                $widget = widget;
            }
        });
        return $widget;
    }
    /**
     * 联动
     * @param params 参数
     * @param relateCCName 单元格名称
     */
    link(params, relateCCName) {
        const chart = this.getWidgetByCellName(relateCCName);
        if (chart) {
            chart.changeParameter(params);
        }
        else {
            this.linkageCache.set(relateCCName, params);
        }
    }
    /**
     * chartID是否和cellName匹配
     * @param chartID 图表ID
     * @param cellName 单元格名称
     */
    isChartIDMatchWithCellName(chartID, cellName) {
        return chartID.toUpperCase().startsWith(`Cells__${cellName}`.toUpperCase());
    }
    /**
     * 获取联动缓存
     * @param chartID 图表ID
     * @param clear 是否清除缓存
     */
    getParameterCacheByChartID(chartID, clear = true) {
        let cellName = '';
        Array.from(this.linkageCache.keys())
            .some($cellName => {
            if (this.isChartIDMatchWithCellName(chartID, $cellName)) {
                cellName = $cellName;
                return true;
            }
            return false;
        });
        const params = this.linkageCache.get(cellName) || {};
        clear && this.linkageCache.delete(cellName);
        return params;
    }
    update() { }
}
CellChartManager.NAME = 'CELL_CHART';
//# sourceMappingURL=table.cell_chart_manager.js.map