import { WidgetManager } from '@engine/utils';
export class CellControllerManager extends WidgetManager {
    constructor() {
        super(...arguments);
        this.uninitializedDict = new Map();
        this.unmountDict = new Map();
        /** 控制cell是否应该隐藏selectFrame */
        this.shouldHideSelectFrame = false;
    }
    addUninitializedWidget(id, params, mount) {
        this.uninitializedDict.set(id, params);
        mount && this.unmountDict.set(id, mount);
    }
    mountWidget(id) {
        var _a;
        (_a = this.unmountDict.get(id)) === null || _a === void 0 ? void 0 : _a();
        this.unmountDict.delete(id);
    }
    initializeWidget(id) {
        var _a;
        (_a = this.uninitializedDict.get(id)) === null || _a === void 0 ? void 0 : _a.init();
        this.uninitializedDict.delete(id);
    }
    getUninitializedWidgetsDict() {
        return this.uninitializedDict;
    }
    getHideSelectFrameSign() {
        return this.shouldHideSelectFrame;
    }
    setHideSelectFrameSign(sign) {
        this.shouldHideSelectFrame = sign;
    }
    destroy(widgetName) {
        if (!widgetName) {
            this.clear();
            return;
        }
        if (BI.isArray(widgetName)) {
            widgetName.forEach(name => {
                this.controllerDict.delete(name);
                this.uninitializedDict.delete(name);
                this.unmountDict.delete(name);
            });
            return;
        }
        this.controllerDict.delete(widgetName);
        this.uninitializedDict.delete(widgetName);
        this.unmountDict.delete(widgetName);
    }
    update() {
        this.controllerDict.forEach(controller => {
            controller.blur();
        });
    }
    /**
     * 清除字典
     */
    clear() {
        this.controllerDict.forEach(widget => {
            widget.destroy();
        });
        this.uninitializedDict.clear();
        this.unmountDict.clear();
        super.clear();
    }
    /**
     * 根据cellId获取单元格控件依赖
     * @param initialCellId 单元格id
     * @param dependences 依赖数组（递归使用，默认不传）
     * @returns 依赖
     */
    getWidgetDependenceByCellId(initialCellId = '', dependences = []) {
        const cellId = initialCellId.toUpperCase();
        const map = new Map();
        this.controllerDict.forEach(controller => {
            const dependenceMap = controller.attr('dependenceMap') || {};
            Object.values(dependenceMap)
                .forEach(id => {
                const result = map.get(id) || [];
                const controllerId = controller.attr('cellId');
                controllerId && result.push(controllerId.toUpperCase());
                map.set(id.toUpperCase(), result);
            });
        });
        // 未创建的控件
        this.uninitializedDict.forEach(({ dependenceMap, cellId: controllerId }) => {
            Object.values(dependenceMap)
                .forEach(id => {
                const result = map.get(id) || [];
                controllerId && result.push(controllerId.toUpperCase());
                map.set(id.toUpperCase(), result);
            });
        });
        (map.get(cellId) || []).forEach(dependency => {
            if (dependences.includes(dependency))
                return;
            dependences.push(dependency);
            this.getWidgetDependenceByCellId(dependency, dependences);
        });
        return dependences;
    }
}
CellControllerManager.NAME = 'CELL_CONTROLLER';
//# sourceMappingURL=table.cell_controller_manager.js.map