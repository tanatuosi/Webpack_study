{"version":3,"file":"table.cell_generator.js","sourceRoot":"","sources":["../../src/modules/table.cell_generator.ts"],"names":[],"mappings":"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","sourcesContent":["import { instantiateXHyperLinks, XCellHyperLink } from '@engine/link';\nimport { WidgetManager } from '@engine/utils';\nimport { tableCellProvider } from './cell/cell';\nimport { AbstractTableCell } from './cell/cell.abstract';\nimport { AbstractCellControllerHoc } from './cell/cell_controllers/cell_controller_hoc/cell_controller_hoc.abstract';\nimport { CellHandler, tableClickHandlerProvider } from './handler/handler';\nimport { AbstractCellHandler } from './handler/handler.abstract';\nimport { ChartRelateProps } from './hyper_link/chart_relate.link';\nimport { CellStyle, PageResult, TableEventCellSelectTextArgs, XCell, XCelladvancedattr, XCellSortHeader, XCellValue } from './table.types';\n\nexport class TableCellGenerator {\n    private listeners: {\n        eventName: string;\n        name: string;\n        action: AbstractCellHandler['action'];\n    }[];\n\n    public externalInterface: TableExternalContext;\n\n    public constructor(externalInterface: TableExternalContext) {\n        this.externalInterface = externalInterface;\n        this.listeners = transformHandlers2Listeners(\n            tableClickHandlerProvider.get()\n                .map(Handler => new Handler(externalInterface)),\n        );\n    }\n\n    public addHandler(Handler: CellHandler, ...external: any[]) {\n        const handler = new Handler(this.externalInterface, ...external);\n\n        switch (handler.merger) {\n            case 'uniqe':\n                if (!this.listeners.find(listener => listener.name === handler.name)) {\n                    this.listeners.push(...transformHandlers2Listeners([handler]));\n                }\n                break;\n            case 'covered':\n                // this.listeners = this.listeners.filter(listener => listener.name !== handler.name);\n                // this.listeners.push(...transformHandlers2Listeners([handler]));\n\n                /** 因为这里需要使用保持引用来传给cell的option，所以不能使用filter来打断引用 */\n                for (let index = this.listeners.length - 1; index >= 0; index--) {\n                    this.listeners[index].name === handler.name && this.listeners.splice(index, 1);\n                }\n                this.listeners.push(...transformHandlers2Listeners([handler]));\n                break;\n            default:\n                this.listeners.push(...transformHandlers2Listeners([handler]));\n        }\n    }\n\n    public generate(opts: {\n        cell: XCell;\n        style: CellStyle;\n        cellhyperlink?: XCellHyperLink;\n        celladvancedattr?: XCelladvancedattr;\n        sortHeader?: XCellSortHeader;\n        widget?: {[key: string]: any},\n    }): AbstractTableCell {\n        const { cell, style, cellhyperlink, celladvancedattr, sortHeader, widget } = opts;\n        \n        return tableCellProvider.get({\n            cell,\n            style,\n            celladvancedattr,\n            sortHeader,\n            hyperLinks: this.getHyperLinks(cellhyperlink),\n            listeners: this.listeners,\n            widget,\n        }, this.externalInterface);\n    }\n\n    private getHyperLinks(cellhyperlink: XCellHyperLink | undefined) {\n        const javaScriptGroup = cellhyperlink?.nxNameJavascriptGroup?.javaScriptGroup || [];\n        \n        return instantiateXHyperLinks(javaScriptGroup, <ChartRelateProps['external']>{\n            managersGetter: () => this.externalInterface.getStickerManagers(),\n        });\n    }\n\n    public getListenerByName(name: string) {\n        return this.listeners.find(listener => listener.name === name);\n    }\n}\n\nfunction transformHandlers2Listeners(handlers: AbstractCellHandler[]): TableCellGenerator['listeners'] {\n    return handlers.reduce((result, handler) => result.concat(handler.eventNames.map(eventName => {\n        return {\n            eventName,\n            name: handler.name,\n            action: args => handler.action(args),\n        };\n    })), [] as TableCellGenerator['listeners']);\n}\n\n/**\n * FRTable提供的接口方法\n */\nexport interface TableExternalContext {\n    attach(widget: {[key: string]: any}): any;\n\n    /**\n     * 获取现在table的数据\n     */\n    getTableData(): PageResult[][];\n\n    populate(pageResults?: PageResult[][]): void;\n\n    getWidgetName(): string | undefined;\n\n    getStickerManagers(): Map<string, WidgetManager<any>>;\n\n    getCellValueById(id: string): XCellValue['cv'];\n\n    getCellValueByWidgetName(widgetName: string): any;\n    \n    getWidgetByCell(row: number, col: number): AbstractCellControllerHoc | undefined;\n\n    setSelectCell(info: TableEventCellSelectTextArgs): void;\n\n    partialPopulate(cells: PageResult[]): void;\n\n    getDependenceValueById(address: string): any;\n\n    getFontResizable(): boolean;\n}\n"]}