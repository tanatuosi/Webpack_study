{"version":3,"file":"table.cell_controller_manager.js","sourceRoot":"","sources":["../../src/modules/table.cell_controller_manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { WidgetManager } from '@engine/utils';\nimport { AbstractCellControllerHoc } from './cell/cell_controllers/cell_controller_hoc/cell_controller_hoc.abstract';\n\nexport class CellControllerManager extends WidgetManager<AbstractCellControllerHoc> {\n    public static NAME = 'CELL_CONTROLLER';\n\n    private uninitializedDict = new Map<string, uninitializedWidgetProps>();\n\n    private unmountDict = new Map<string, Function>();\n\n    /** 控制cell是否应该隐藏selectFrame */\n    private shouldHideSelectFrame = false;\n\n    public addUninitializedWidget(id: string, params: uninitializedWidgetProps, mount?: Function) {\n        this.uninitializedDict.set(id, params);\n\n        mount && this.unmountDict.set(id, mount);\n    }\n\n    public mountWidget(id: string) {\n        this.unmountDict.get(id)?.();\n\n        this.unmountDict.delete(id);\n    }\n\n    public initializeWidget(id: string) {\n        this.uninitializedDict.get(id)?.init();\n\n        this.uninitializedDict.delete(id);\n    }\n\n    public getUninitializedWidgetsDict() {\n        return this.uninitializedDict;\n    }\n\n    public getHideSelectFrameSign() {\n        return this.shouldHideSelectFrame;\n    }\n\n    public setHideSelectFrameSign(sign: boolean) {\n        this.shouldHideSelectFrame = sign;\n    }\n\n    /**\n     * 销毁实例\n     */\n    public destroy(): void;\n    public destroy(widgetName: string): void;\n    public destroy(widgetName: string[]): void;\n    public destroy(widgetName?: string | string[]) {\n        if (!widgetName) {\n            this.clear();\n\n            return;\n        }\n\n        if (BI.isArray(widgetName)) {\n            widgetName.forEach(name => {\n                this.controllerDict.delete(name);\n                this.uninitializedDict.delete(name);\n                this.unmountDict.delete(name);\n            });\n\n            return;\n        }\n        \n        this.controllerDict.delete(widgetName);\n        this.uninitializedDict.delete(widgetName);\n        this.unmountDict.delete(widgetName);\n    }\n\n    public update() {\n        this.controllerDict.forEach(controller => {\n            controller.blur();\n        });\n    }\n\n    /**\n     * 清除字典\n     */\n    public clear() {\n        this.controllerDict.forEach(widget => {\n            widget.destroy();\n        });\n\n        this.uninitializedDict.clear();\n\n        this.unmountDict.clear();\n\n        super.clear();\n    }\n\n    /**\n     * 根据cellId获取单元格控件依赖\n     * @param initialCellId 单元格id\n     * @param dependences 依赖数组（递归使用，默认不传）\n     * @returns 依赖\n     */\n    public getWidgetDependenceByCellId(initialCellId = '', dependences: string[] = []): string[] {\n        const cellId = initialCellId.toUpperCase();\n\n        const map = new Map<string, string[]>();\n\n        this.controllerDict.forEach(controller => {\n            const dependenceMap: {[key: string]: string} = controller.attr('dependenceMap') || {};\n\n            Object.values(dependenceMap)\n                .forEach(id => {\n                    const result = map.get(id) || [];\n\n                    const controllerId = controller.attr('cellId');\n\n                    controllerId && result.push(controllerId.toUpperCase());\n\n                    map.set(id.toUpperCase(), result);\n                });\n        });\n\n        // 未创建的控件\n        this.uninitializedDict.forEach(({ dependenceMap, cellId: controllerId }) => {\n            Object.values(dependenceMap)\n                .forEach(id => {\n                    const result = map.get(id) || [];\n\n                    controllerId && result.push(controllerId.toUpperCase());\n\n                    map.set(id.toUpperCase(), result);\n                });\n        });\n\n        (map.get(cellId) || []).forEach(dependency => {\n            if (dependences.includes(dependency)) return;\n\n            dependences.push(dependency);\n\n            this.getWidgetDependenceByCellId(dependency, dependences);\n        });\n\n        return dependences;\n    }\n}\n\ninterface uninitializedWidgetProps {\n    init: Function;\n    cellId: string;\n    dependenceMap: {[key: string]: string};\n    cellWidgetName: string;\n}\n"]}