{"version":3,"file":"table.types.js","sourceRoot":"","sources":["../../src/modules/table.types.ts"],"names":[],"mappings":"","sourcesContent":["import type { BackgroundType, ErrorResult } from '@engine/core';\nimport type { Cell, Range, StickerOpt } from '@fui/sheet/types';\nimport type { XCellHyperLink } from '@engine/link';\nimport type { CellHandler } from './handler/handler';\nimport type { TableCell } from './table_api/table.api_cell';\nimport type { TableColumn } from './table_api/table.api_column';\nimport type { TableRow } from './table_api/table.api_row';\n\n/**\n * 后端分页数据结构\n */\nexport interface PageResult {\n    // 模版单元格\n    cell: string;\n    value: string;\n    position: XCellPosition;\n    celldimension: XCellDimension;\n    cellstyle?: XCellStyle;\n    cellhyperlink?: XCellHyperLink;\n    valid?: boolean;\n    sortHeader?: XCellSortHeader;\n    celladvancedattr?: XCelladvancedattr;\n    celladjustattr?: XCelladjustattr;\n\n    /**\n     * 修改后的数据是否传入后台\n     */\n    dirty?: boolean;\n\n    /**\n     * 修改后的数据是否校验\n     */\n    edited?: boolean;\n\n    /**\n     * 数据是否被修改过（修改过一次之后不会改变状态）\n     */\n    transformed?: boolean;\n\n    /**\n     * 是否通过数据校验\n     */\n    errorMsg?: string;\n    id?: number | string;\n    idx?: number;\n    pId?: number | string;\n    open?: boolean;\n\n    /**\n     * pv转换正则\n     */\n    fmt?: string;\n\n    /**\n     * 单元格是否联动\n     */\n    frs?: boolean;\n\n    /**\n     * 是否直接显示控件\n     */\n    isShowWidgets?: boolean;\n    direction: DataTemplate['direction'];\n    indent?: number;\n    widget?: { [key: string]: any };\n    merge?: string;\n    sourceCellPosition?: XCellPosition;\n}\n\nexport type XBorderStyle =\n    | 'slim_solid'\n    | 'solid'\n    | 'dashed'\n    | 'hair'\n    | 'hair2'\n    | 'thick'\n    | 'double'\n    | 'dotted'\n    | 'dash_dot'\n    | 'dash_dot_dot'\n    | 'slanted_dash_dot'\n    | 'double_dot'\n    | 'large';\n\n/**\n * 单元格位置\n */\nexport interface XCellPosition {\n\n    /**\n     * 代表col\n     */\n    x: number;\n\n    /**\n     * 代表row\n     */\n    y: number;\n    rowSpan?: number;\n    columnSpan?: number;\n}\n\n/**\n * 单元格尺寸\n */\nexport interface XCellDimension {\n    width: number;\n    height: number;\n}\n\n/**\n * 单元格样式\n */\nexport interface XCellStyle {\n    fontStyle: {\n        bold: boolean | string | number;\n        italic: boolean | string;\n        fontFamily: string;\n        strikeThrough: boolean;\n        fontSize: number;\n        subscript?: boolean;\n        underLine: {\n            width: number;\n            style: string;\n            color: number | string;\n        };\n        textShadow: boolean | XTextShadow;\n        supscript?: boolean;\n        color: number | string;\n    };\n    borderStyle: {\n        topBorder: XBorder;\n        bottomBorder: XBorder;\n        leftBorder: XBorder;\n        rightBorder: XBorder;\n    };\n    contentStyle: {\n        paddingLeft: number;\n        paddingRight: number;\n        lineHeight: number;\n        spacingBefore: number;\n        spacingAfter: number;\n        verticalAlign: string;\n        textAlign: string;\n        newLine: string;\n        rotate?: number;\n        verTextDirection?: string;\n        verticalText?: string;\n    };\n    cellBackground: {\n        background: {\n            backgroundType?: BackgroundType;\n            color?: number | string;\n            attachmentId?: string;\n            imgUrl?: string;\n            layout?: number | BackgroundRepeat;\n            startColor?: number | string;\n            endColor?: number | string;\n            begin?: number;\n            finish?: number;\n            direction?: number;\n            radiusConfig?: {\n                radius: number;\n                tlRadius: boolean;\n                trRadius: boolean;\n                blRadius: boolean;\n                brRadius: boolean;\n            };\n        };\n    } | null;\n}\n\nexport interface XTextShadow {\n    shadowBlur: number;\n    shadowColor: string;\n    shadowOffsetX: number;\n    shadowOffsetY: number;\n}\n\nexport type ContentTextAlign = 'left' | 'center' | 'right';\n\nexport type ContentVerticalAlign = 'top' | 'middle' | 'bottom';\n\nexport interface DefaultCellStyle {\n    textAlign?: ContentTextAlign;\n    cellJust?: 'NONE' | 'HEIGHT' | 'WIDTH';\n}\n\nexport interface BorderType {\n    width: number;\n    style: string;\n    color: string;\n    dash: number[];\n}\n\nexport interface BackgroundStyle {\n    backgroundImage?: string;\n    backgroundSize?: string;\n    backgroundImageLayout?: string;\n    backgroundColor?: string;\n    linearGradient?: {\n        degree: number;\n        stops: {\n            per: number;\n            color: string;\n        }[];\n    };\n    type: string;\n    radiusConfig?: {\n        radius: number;\n        tlRadius: boolean;\n        trRadius: boolean;\n        blRadius: boolean;\n        brRadius: boolean;\n    }\n}\n\nexport interface TableRadiusRangeArgs {\n    row?: number[];\n    column?: number[];\n    cell?: number[];\n}\n\nexport type BackgroundRepeat = 'repeat' | 'adapt' | 'stretch' | 'center' | 'default';\n\nexport interface CellSetStyleArgs {\n    fontWeight?: 'normal' | 'bold' | 'lighter' | 'bolder' | number;\n    fontStyle?: string;\n    fontFamily?: string;\n    fontSize?: number | string;\n    color?: string;\n    textDecorationLine?: string;\n    textDecorationColor?: string;\n    textDecorationStyle?: string;\n    textDecorationThickness?: string | number;\n    textShadow?: string;\n    lineHeight?: number;\n    border?: string;\n    borderTop?: string;\n    borderBottom?: string;\n    borderLeft?: string;\n    borderRight?: string;\n    backgroundColor?: string;\n    backgroundImage?: string;\n    backgroundRepeat?: BackgroundRepeat;\n    padding?: string;\n    paddingTop?: number | string;\n    paddingBottom?: number | string;\n    paddingLeft?: number | string;\n    paddingRight?: number | string;\n    verticalAlign?: string;\n    textAlign?: 'start' | 'end' | 'left' | 'right' | 'center' | 'justify' | 'match-parent';\n    whiteSpace?: string;\n}\n\nexport interface ReportSettingDetail {\n    paperSetting?: PageSettingConfig;\n    background?: {\n        [key: string]: string;\n    };\n\n    /**\n     * 页脚高度\n     */\n    footerHeight?: number;\n\n    /**\n     * 页眉高度\n     */\n    headerHeight?: number;\n}\n\nexport interface PageSettingConfig {\n\n    /**\n     * 纸张方向 默认纵向, 1为横向\n     */\n    orientation: number;\n\n    /**\n     * 纸张宽度\n     */\n    paperWidth: number;\n\n    /**\n     * 纸张高度\n     */\n    paperHeight: number;\n\n    /**\n     * 左边距\n     */\n    marginLeft: number;\n\n    /**\n     * 上边距\n     */\n    marginTop: number;\n\n    /**\n     * 右边距\n     */\n    marginRight: number;\n\n    /**\n     * 下边距\n     */\n    marginBottom: number;\n}\n\nexport interface TableDirtyCell {\n    row: number;\n    col: number;\n    value: string;\n    xtype: string;\n    attr?: string;\n    frs: boolean;\n}\n\nexport interface TableApiContext {\n    addHandler: (handler: CellHandler, config?: any) => void;\n    emitCellEvent: (eventName: string, arg: any) => Promise<unknown>;\n    getRow: (row: number) => TableRow | undefined;\n    getColumn: (col: number) => TableColumn | undefined;\n    getCell: (row: number | string, col: number | string) => TableCell | undefined;\n}\n\nexport interface TableStickerOpt extends StickerOpt {\n    el?: string;\n    extension?: {\n        el: string;\n        initialEl: string;\n        style?: {\n            paddingLeft: number;\n            paddingRight: number;\n            lineHeight: number;\n            spacingBefore: number;\n            spacingAfter: number;\n            verticalAlign: string;\n            textAlign: string;\n            color: number | string;\n            bold: boolean | string | number;\n            fontFamily: string;\n            fontSize: number;\n            italic: boolean | string;\n            strikeThrough: boolean;\n            textShadow: boolean | XTextShadow;\n            underLine: {\n                width: number;\n                style: string;\n                color: number | string;\n            };\n            height?: string;\n            cursor?: string;\n        };\n    }\n}\n\nexport interface CellStyle {\n    backgroundStyle?: BackgroundStyle;\n\n    borderStyle?: {\n        borderTop: BorderType;\n        borderBottom: BorderType;\n        borderLeft: BorderType;\n        borderRight: BorderType;\n    };\n\n    contentStyle?: {\n        color: string;\n        textAlign: ContentTextAlign;\n        verticalAlign: ContentVerticalAlign;\n        wrap: boolean;\n        fontWeight: string | number;\n        fontStyle: string;\n        fontFamily: string;\n        fontSize: string;\n        defaultFontSize?: string;\n        lineHeight: string;\n        defaultLineHeight?: string,\n        underline: {\n            width: number;\n            style: string;\n            color: string;\n            dash: number[];\n        };\n        strikeThrough: 'solid' | 'none';\n        textShadow?: XTextShadow;\n        subscript?: boolean;\n        supscript?: boolean;\n        rotate?: number;\n        newLine: string;\n        verTextDirection?: string;\n        verticalText?: string;\n        cellJust?: 'NONE' | 'HEIGHT' | 'WIDTH';\n    };\n    spacingAfter?: number;\n    spacingBefore?: number;\n    // 通过布局解决\n    paddingLeft?: number;\n    paddingRight?: number;\n    fontSize?: string;\n    defaultFontSize?: string;\n}\n\nexport interface CellType {\n    type: string;\n    stick?: boolean;\n    init?: (element: any) => void;\n    listeners?: {\n        eventName: string;\n        action: Function;\n    }[];\n    image?: string;\n    backgroundStyle?: CellStyle['backgroundStyle'];\n    borderStyle?: CellStyle['borderStyle'];\n    value?: string;\n    items?: any[];\n    canCopy?: boolean;\n    valid?: boolean;\n    cursor?: 'default' | 'pointer';\n    title?: string;\n    stopPropagation?: boolean;\n    style?: CellStyle;\n    autoWrapInfo?: number[];\n    position: {\n        x: number;\n        y: number;\n    };\n    [key: string]: any;\n}\n\nexport interface TableEventCellSelectTextArgs { row: number; col: number; text: string; cell: Cell }\n\nexport interface Frozen {\n    colFrom: number;\n    colTo: number;\n    rowFrom: number;\n    rowTo: number;\n}\n\nexport interface processTableDataArgs {\n    sheetData: CellType[][];\n    rows: number[];\n    cols: number[];\n    stickers: TableStickerOpt[];\n    merges: Range[];\n    rowCount: number;\n    columnCount: number;\n    sx: number;\n    sy: number;\n    tableData: PageResult[][];\n    screenWidth: number;\n    tableWidth: number;\n    tableHeight: number;\n}\n\nexport interface XReportFitAttr {\n    fitFont: boolean; // 字体是否自适应，true：自适应，false：不自适应\n    /**\n     * 表格自适应， 1：横向自适应  2：双向自适应  3：不自适应\n     */\n    fitStateInPC: 1 | 2 | 3;\n    minFontSize?: number; // 字体自适应最小字号限制\n}\n\nexport type ReportFitAttr = XReportFitAttr & {\n    // 手动获取字体缩放大小\n    fontScaleGetter?: () => number;\n}\n\nexport interface CellTooltipArgs {\n    show: boolean,\n    content?: {\n        text?: string,\n        image?: string,\n        header?: string\n    },\n    style?: CellSetStyleArgs\n}\n\nexport interface XCelladjustattr {\n    adjustStrategy: 'NONE' | 'HEIGHT' | 'WIDTH' | undefined;\n}\n\nexport interface XBorder {\n    width: number;\n    style: string;\n    color: number | string;\n}\n\n/**\n * json parse之后的cell value值\n */\nexport type XCellValue = {\n    type: string;\n    value: string;\n\n    /**\n     * 仅赋值时记录一份到cv，cv会转化为value。value是确定类型string，所有后台交互使用value\n     * 对外仅取单元格值时会用到cv\n     */\n    cv?: any[] | string | number | boolean | { [key: string]: any; };\n    pv?: string;\n    xtype?: string;\n    presentDep?: string[]\n    text?: string;\n};\n\nexport interface DataTemplate {\n    // 模版单元格\n    cell: string;\n    // 扩展方向（0-不扩展，1-纵向扩展，2-横向扩展）\n    direction: 0 | 1 | 2;\n}\n\nexport interface XCelladvancedattr {\n\n    /**\n     * 内容显示类型\n     */\n    contentShowType: 'DEFAULT' | 'SHOW_AS_HTML' | 'SHOW_AS_IMAGE' | 'SHOW_AS_DOWNLOAD';\n\n    /**\n     * 是否预览内容\n     */\n    previewContent: boolean;\n\n    /**\n     * 是否打印背景\n     */\n    printBackground: boolean;\n\n    /**\n     * 是否打印内容\n     */\n    printContent: boolean;\n\n    /**\n     * 提示信息\n     */\n    tooltipText?: string;\n\n    /**\n     * 是否超出隐藏\n     */\n    overflowHide?: boolean;\n\n    /**\n      * 隐藏类型\n      */\n    hideType?: 'CHAR_LENGTH' | 'CELL_WIDTH';\n\n    /**\n      * 保留字符长度\n      */\n    hideStrLength?: number;\n\n    /**\n      * 追加到尾部的字符\n      */\n    appendTailStr?: string;\n\n    [key: string]: any;\n}\n\nexport interface XCellSortHeader {\n    headerArea: string;\n    sortArea: string;\n\n    /**\n     * 排序选项\n     */\n    sortItems: XCellExpandAttrSortItem[];\n    index: number;\n    direction: number;\n\n    /**\n     * 当前排序状态\n     */\n    currentSortItem?: string;\n}\n\ninterface XCellExpandAttrSortItem { description: string; iconId: string; type: number; }\n\nexport type XCell = {\n    type: XCellValue['type'];\n    value?: XCellValue['value'];\n    text?: string | object;\n    id?: string;\n    pId?: string;\n    open?: boolean;\n    direction?: 0 | 1 | 2;\n    indent?: number;\n    autoWrapInfo?: number[];\n    valid: boolean;\n    fmt?: string;\n    isShowWidgets?: boolean;\n\n    /**\n     * 修改后的数据是否传入后台\n     */\n    dirty?: boolean;\n\n    /**\n     * 修改后的数据是否校验\n     */\n    edited?: boolean;\n\n    /**\n     * 数据是否被修改过（修改过一次之后不会改变状态）\n     */\n    transformed?: boolean;\n\n    /**\n     * 是否通过数据校验\n     */\n    errorMsg?: string;\n    position: XCellPosition;\n    [key: string]: any;\n} & XCellValue;\n\nexport interface XLegalTableData {\n    pageIndex: number;\n    totalPage?: number;\n    columnCount?: number;\n    lastRow?: number;\n    rowCount?: number;\n    pageResult: PageResult[][];\n    sheetIndex?: number;\n    // 层级数据（只有分层计算时会返回）\n    layerItems?: XTableLayerItem[];\n    // 父层级的节点id（只有分层计算时且存在父层级时会返回）\n    upNodeId?: number;\n    // 模版单元格信息（只有分层计算时会返回，且只有第一次请求会返回）\n    templates?: DataTemplate[];\n    // 需要扩大的合并单元格信息（只有分层计算展开节点时会返回）\n    effectEntries?: {\n        // 受影响的合并格id\n        targetId: number;\n        // 需要扩大的行数\n        effectRows: number;\n    }[];\n    frozen?: {\n        colFrom: number;\n        colTo: number;\n        rowFrom: number;\n        rowTo: number;\n    }\n}\n\ninterface XTableLayerItem {\n    // 层级节点的结果单元格id\n    id: number;\n    // 层级序号，从0开始\n    dep: number;\n    child?: XTableLayerItem[];\n}\n\nexport type XTableData = XLegalTableData | ErrorResult;\n"]}