import { instantiateXHyperLinks } from '@engine/link';
import { tableCellProvider } from './cell/cell';
import { tableClickHandlerProvider } from './handler/handler';
export class TableCellGenerator {
    constructor(externalInterface) {
        this.externalInterface = externalInterface;
        this.listeners = transformHandlers2Listeners(tableClickHandlerProvider.get()
            .map(Handler => new Handler(externalInterface)));
    }
    addHandler(Handler, ...external) {
        const handler = new Handler(this.externalInterface, ...external);
        switch (handler.merger) {
            case 'uniqe':
                if (!this.listeners.find(listener => listener.name === handler.name)) {
                    this.listeners.push(...transformHandlers2Listeners([handler]));
                }
                break;
            case 'covered':
                // this.listeners = this.listeners.filter(listener => listener.name !== handler.name);
                // this.listeners.push(...transformHandlers2Listeners([handler]));
                /** 因为这里需要使用保持引用来传给cell的option，所以不能使用filter来打断引用 */
                for (let index = this.listeners.length - 1; index >= 0; index--) {
                    this.listeners[index].name === handler.name && this.listeners.splice(index, 1);
                }
                this.listeners.push(...transformHandlers2Listeners([handler]));
                break;
            default:
                this.listeners.push(...transformHandlers2Listeners([handler]));
        }
    }
    generate(opts) {
        const { cell, style, cellhyperlink, celladvancedattr, sortHeader, widget } = opts;
        return tableCellProvider.get({
            cell,
            style,
            celladvancedattr,
            sortHeader,
            hyperLinks: this.getHyperLinks(cellhyperlink),
            listeners: this.listeners,
            widget,
        }, this.externalInterface);
    }
    getHyperLinks(cellhyperlink) {
        var _a;
        const javaScriptGroup = ((_a = cellhyperlink === null || cellhyperlink === void 0 ? void 0 : cellhyperlink.nxNameJavascriptGroup) === null || _a === void 0 ? void 0 : _a.javaScriptGroup) || [];
        return instantiateXHyperLinks(javaScriptGroup, {
            managersGetter: () => this.externalInterface.getStickerManagers(),
        });
    }
    getListenerByName(name) {
        return this.listeners.find(listener => listener.name === name);
    }
}
function transformHandlers2Listeners(handlers) {
    return handlers.reduce((result, handler) => result.concat(handler.eventNames.map(eventName => {
        return {
            eventName,
            name: handler.name,
            action: args => handler.action(args),
        };
    })), []);
}
//# sourceMappingURL=table.cell_generator.js.map