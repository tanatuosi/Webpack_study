{"version":3,"file":"table.cell_chart_manager.js","sourceRoot":"","sources":["../../src/modules/table.cell_chart_manager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAuB,YAAY,EAAE,MAAM,eAAe,CAAC;AAElE,MAAM,OAAO,gBAAiB,SAAQ,YAAY;IAAlD;;QAGY,iBAAY,GAAG,IAAI,GAAG,EAAgC,CAAC;IAqEnE,CAAC;IAnEG;;;OAGG;IACI,mBAAmB,CAAC,QAAgB;QACvC,IAAI,OAAwC,CAAC;QAE7C,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;YAC5C,IAAI,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACpD,OAAO,GAAG,MAAM,CAAC;aACpB;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,IAAI,CAAC,MAA4B,EAAE,YAAoB;QAC1D,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAErD,IAAI,KAAK,EAAE;YACP,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;SACjC;aAAM;YACH,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;SAC/C;IACL,CAAC;IAED;;;;OAIG;IACK,0BAA0B,CAAC,OAAe,EAAE,QAAgB;QAChE,OAAO,OAAO,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,UAAU,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;IAChF,CAAC;IAED;;;;OAIG;IACI,0BAA0B,CAAC,OAAe,EAAE,KAAK,GAAG,IAAI;QAC3D,IAAI,QAAQ,GAAG,EAAE,CAAC;QAElB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;aAC/B,IAAI,CAAC,SAAS,CAAC,EAAE;YACd,IAAI,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE;gBACrD,QAAQ,GAAG,SAAS,CAAC;gBAErB,OAAO,IAAI,CAAC;aACf;YAED,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;QAEP,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAErD,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAE5C,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,MAAM,KAAI,CAAC;;AAtEJ,qBAAI,GAAG,YAAY,CAAC","sourcesContent":["import { AbstractReportChart, ChartManager } from '@engine/chart';\n\nexport class CellChartManager extends ChartManager {\n    public static NAME = 'CELL_CHART';\n\n    private linkageCache = new Map<string, {[key: string]: any}>();\n\n    /**\n     * 根据cellName找到组件\n     * @param cellName 单元格名称\n     */\n    public getWidgetByCellName(cellName: string) {\n        let $widget: undefined | AbstractReportChart;\n\n        this.controllerDict.forEach((widget, chartID) => {\n            if (this.isChartIDMatchWithCellName(chartID, cellName)) {\n                $widget = widget;\n            }\n        });\n\n        return $widget;\n    }\n\n    /**\n     * 联动\n     * @param params 参数\n     * @param relateCCName 单元格名称\n     */\n    public link(params: {[key: string]: any}, relateCCName: string) {\n        const chart = this.getWidgetByCellName(relateCCName);\n        \n        if (chart) {\n            chart.changeParameter(params);\n        } else {\n            this.linkageCache.set(relateCCName, params);\n        }\n    }\n\n    /**\n     * chartID是否和cellName匹配\n     * @param chartID 图表ID\n     * @param cellName 单元格名称\n     */\n    private isChartIDMatchWithCellName(chartID: string, cellName: string): boolean {\n        return chartID.toUpperCase().startsWith(`Cells__${cellName}`.toUpperCase());\n    }\n\n    /**\n     * 获取联动缓存\n     * @param chartID 图表ID\n     * @param clear 是否清除缓存\n     */\n    public getParameterCacheByChartID(chartID: string, clear = true): {[key: string]: any} {\n        let cellName = '';\n\n        Array.from(this.linkageCache.keys())\n            .some($cellName => {\n                if (this.isChartIDMatchWithCellName(chartID, $cellName)) {\n                    cellName = $cellName;\n\n                    return true;\n                }\n\n                return false;\n            });\n\n        const params = this.linkageCache.get(cellName) || {};\n\n        clear && this.linkageCache.delete(cellName);\n\n        return params;\n    }\n\n    public update() {}\n}\n"]}