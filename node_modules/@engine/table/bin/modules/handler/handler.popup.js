import { AbstractCellHandler } from './handler.abstract';
import jss from 'jss';
export class PopupHandler extends AbstractCellHandler {
    constructor(externalInterface, config) {
        super(externalInterface);
        this.name = 'HOVER_CELL_POPUP';
        this.eventNames = ['CELL_HOVER'];
        this.merger = '';
        this.useCellValue = false;
        const { header, body, image, style, position, scopeType } = config;
        this.position = position;
        this.scopeType = scopeType;
        this.useCellValue = BI.isNull(body);
        this.attach = () => {
            if (!this.combo) {
                this.externalContext.attach({
                    type: BI.AbsoluteLayout.xtype,
                    items: [{
                            el: {
                                type: BI.Combo.xtype,
                                container: 'body',
                                belowMouse: true,
                                el: {
                                    type: BI.Layout.xtype,
                                },
                                ref: (_ref) => {
                                    this.combo = _ref;
                                },
                                popup: {
                                    minHeight: 15,
                                    el: {
                                        type: BI.VerticalLayout.xtype,
                                        cls: 'bi-card bi-border-radius',
                                        extraCls: this.createPopupStyle(style).classes.popupStyle,
                                        items: [
                                            header
                                                ? {
                                                    el: {
                                                        type: BI.Label.xtype,
                                                        cls: 'bi-header-background bi-font-bold',
                                                        text: header,
                                                        hgap: 5,
                                                        vgap: 5,
                                                    },
                                                }
                                                : {},
                                            body || !image
                                                ? {
                                                    type: BI.Label.xtype,
                                                    ref: (_ref) => {
                                                        this.textLabel = _ref;
                                                    },
                                                    text: body,
                                                    hgap: 5,
                                                    vgap: 5,
                                                }
                                                : {
                                                    type: BI.Img.xtype,
                                                    src: image,
                                                    hgap: 5,
                                                    vgap: 5,
                                                },
                                        ],
                                    },
                                },
                            },
                        }],
                });
            }
        };
    }
    createPopupStyle(style = {}) {
        return jss
            .createStyleSheet({
            popupStyle: {
                'font-weight': style.fontWeight,
                'font-family': style.fontFamily,
                'font-size': style.fontSize,
                color: style.color,
                'text-decoration': `${style.textDecorationLine} ${style.textDecorationStyle} ${style.textDecorationColor} ${style.textDecorationThickness}`,
                'font-style': style.fontStyle,
                'text-shadow': style.textShadow,
                padding: style.padding,
                'line-height': style.lineHeight,
                'vertical-align': style.verticalAlign,
                'text-align': style.textAlign,
                border: style.border,
                'background-size': 'contain',
                'background-repeat': style.backgroundRepeat,
                'background-image': style.backgroundImage,
                'background-color': style.backgroundColor,
            },
        })
            .attach();
    }
    action({ cell, e }) {
        if (!cell) {
            return;
        }
        this.combo && this.combo.hideView();
        if (BI.isNull(this.position)) {
            return this.doAction(e, cell.value);
        }
        const { position: { x, y } } = cell;
        const { x: allowX, y: allowY } = this.position;
        let showPopup;
        switch (this.scopeType) {
            case 'cell':
            default:
                showPopup = x === allowX && y === allowY;
                break;
            case 'table':
                showPopup = true;
                break;
            case 'rowcolumn':
                showPopup = x === allowX || y === allowY;
                break;
        }
        showPopup && this.doAction(e, cell.value);
    }
    doAction(e, value) {
        var _a;
        this.attach();
        this.combo.showView(e);
        this.useCellValue && ((_a = this.textLabel) === null || _a === void 0 ? void 0 : _a.setValue(value));
    }
}
//# sourceMappingURL=handler.popup.js.map