{"version":3,"file":"handler.service.js","sourceRoot":"","sources":["../../../src/modules/handler/handler.service.ts"],"names":[],"mappings":"AAEA;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,CAAS,EAAE,CAAS;IAC/C,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;AACvB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,GAAW;IACtC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;IAE9D,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACpB,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,aAAa,CACzB,GAAmB,EACnB,KAA4C,EAC5C,OAA8C;IAE9C,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACjB,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAE/B,MAAM,MAAM,GAAG,kBAAkB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAE7C,IAAI,CAAC,MAAM,EAAE;YACT,OAAO;SACV;QAED,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACP,CAAC;AAGD;;;;GAIG;AACH,MAAM,UAAU,kBAAkB,CAAC,GAAmB,EAAE,CAAS,EAAE,CAAS;IACxE,IAAI,UAAkC,CAAC;IAEvC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QAC5B,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE;YAChD,UAAU,GAAG,IAAI,CAAC;YAElB,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC,CAAC,CAAC;IAEJ,OAAO,UAAU,CAAC;AACtB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CAAC,GAAmB,EAAE,CAAS;IACjE,MAAM,MAAM,GAAiB,EAAE,CAAC;IAChC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACd,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACf,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE;gBACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,iBAAiB,CAC7B,GAAmB,EACnB,QAAuB,EACvB,eAAuE;IAEvE,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC/G,CAAC","sourcesContent":["import { PageResult, XCellPosition } from '../table.types';\n\n/**\n * 将坐标转换为key\n * @param x 横坐标\n * @param y 纵坐标\n */\nexport function encodeCacheKey(x: number, y: number): string {\n    return `${x}-${y}`;\n}\n\n/**\n * 将key转换为坐标\n * @param key key值\n */\nexport function decodeCacheKey(key: string): { x: number, y: number } {\n    const [x, y] = key.split('-').map(item => parseInt(item, 10));\n\n    return { x, y };\n}\n\n/**\n * 修改单元格内容\n * @param raw 原始值\n * @param cells 修改数组\n * @param handler 处理方式\n */\nexport function alterRawTable<T>(\n    raw: PageResult[][],\n    cells: { x: number, y: number, alterer: T}[],\n    handler: (raw: PageResult, alterer: T) => void,\n) {\n    cells.forEach(cell => {\n        const { x, y, alterer } = cell;\n\n        const target = findCellByPosition(raw, x, y);\n\n        if (!target) {\n            return;\n        }\n\n        handler(target, alterer);\n    });\n}\n\n\n/**\n * 根据x y找到cell\n * @param x x坐标\n * @param y y坐标\n */\nexport function findCellByPosition(raw: PageResult[][], x: number, y: number): PageResult | undefined {\n    let targetCell: PageResult | undefined;\n\n    raw.some(row => row.some(cell => {\n        if (cell.position.x === x && cell.position.y === y) {\n            targetCell = cell;\n\n            return true;\n        }\n\n        return false;\n    }));\n\n    return targetCell;\n}\n\n/**\n * 根据x y找到同一行的cells\n * @param x x坐标\n * @param y y坐标\n */\nexport function findCellLineByPosition(raw: PageResult[][], y: number): PageResult[] {\n    const result: PageResult[] = [];\n    raw.forEach(row => {\n        row.forEach(cell => {\n            if (cell.position.y === y) {\n                result.push(cell);\n            }\n        });\n    });\n\n    return result;\n}\n\n/**\n * 根据当前坐标获取满足条件的cells\n * @param raw 原始值\n * @param position 坐标\n * @param filterOperation 过滤条件\n */\nexport function findValidCellData(\n    raw: PageResult[][],\n    position: XCellPosition,\n    filterOperation: (cell: PageResult, position: XCellPosition) => boolean,\n): PageResult[] {\n    return raw.reduce((result, row) => result.concat(row.filter(cell => filterOperation(cell, position))), []);\n}\n"]}