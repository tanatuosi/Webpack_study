{"version":3,"file":"handler.select_controller.js","sourceRoot":"","sources":["../../../src/modules/handler/handler.select_controller.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,oBAAoB,CAAC;AACzD,OAAO,EAAE,qBAAqB,EAAE,MAAM,kCAAkC,CAAC;AACzE,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAErD,MAAM,OAAO,iBAAkB,SAAQ,mBAAmB;IAA1D;;QACW,eAAU,GAAG,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;QAEjD,SAAI,GAAG,aAAa,CAAC;QAErB,WAAM,GAAG,OAAO,CAAC;IA8B5B,CAAC;IA5BU,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,IAAI,EAAiE;QAC3F,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAE1B,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC;QAEzC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC;YAC/B,GAAG;YACH,GAAG;YACH,IAAI,EAAE,GAAG,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;YACtD,IAAI;SACP,CAAC,CAAC;QAEH,MAAM,qBAAqB,GAAsC,CAAC,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE,CAAC,GAAG,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7I,IAAI,CAAC,qBAAqB,EAAE;YACxB,OAAO;SACV;QAED,qBAAqB,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;QAE3C,qBAAqB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAEtC,qBAAqB;aAChB,aAAa,EAAE;aACf,OAAO,CAAC,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE;YAC1B,UAAU,CAAC,UAAU,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACX,CAAC;CACJ","sourcesContent":["import { AbstractCellHandler } from './handler.abstract';\nimport { CellControllerManager } from '../table.cell_controller_manager';\nimport { getCellTextByCell } from '../table.service';\n\nexport class CellSelectHandler extends AbstractCellHandler {\n    public eventNames = ['CELL_CLICK', 'CELL_DOUBLE_CLICK'];\n\n    public name = 'CELL_SELECT';\n\n    public merger = 'uniqe';\n\n    public async action({ id, cell }: Parameters<AbstractCellHandler['action']>[0] & { id: string }) {\n        const { position } = cell;\n\n        const row = position.y, col = position.x;\n\n        this.externalContext.setSelectCell({\n            row,\n            col,\n            text: `${getCellTextByCell(this.tableData[row][col])}`,\n            cell,\n        });\n\n        const cellControllerManager = <CellControllerManager | undefined>(this.externalContext.getStickerManagers().get(CellControllerManager.NAME));\n\n        if (!cellControllerManager) {\n            return;\n        }\n\n        cellControllerManager.initializeWidget(id);\n\n        cellControllerManager.mountWidget(id);\n\n        cellControllerManager\n            .getWidgetsMap()\n            .forEach((controller, name) => {\n                controller.setSeleted(name === id);\n            });\n    }\n}\n"]}