{"version":3,"file":"handler.popup.js","sourceRoot":"","sources":["../../../src/modules/handler/handler.popup.ts"],"names":[],"mappings":"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","sourcesContent":["import { Combo, Label } from '@fui/core';\nimport { CellSetStyleArgs } from '../table.types';\nimport { HandlerExternalContext } from './handler';\nimport { AbstractCellHandler } from './handler.abstract';\nimport jss from 'jss';\n\nexport class PopupHandler extends AbstractCellHandler {\n    public name = 'HOVER_CELL_POPUP';\n\n    public eventNames = ['CELL_HOVER'];\n\n    public merger = '';\n\n    private combo: Combo;\n\n    private textLabel: Label;\n\n    private position: { x?: number, y?: number };\n\n    private scopeType: 'table' | 'cell' | 'rowcolumn';\n\n    private attach: () => void;\n\n    private useCellValue = false;\n\n    public constructor(externalInterface: HandlerExternalContext, config: popupConfig) {\n        super(externalInterface);\n\n        const { header, body, image, style, position, scopeType } = config;\n\n        this.position = position;\n        this.scopeType = scopeType;\n        this.useCellValue = BI.isNull(body);\n\n        this.attach = () => {\n            if (!this.combo) {\n                this.externalContext.attach({\n                    type: BI.AbsoluteLayout.xtype,\n                    items: [{\n                        el: {\n                            type: BI.Combo.xtype,\n                            container: 'body',\n                            belowMouse: true,\n                            el: {\n                                type: BI.Layout.xtype,\n                            },\n                            ref: (_ref: Combo) => {\n                                this.combo = _ref;\n                            },\n                            popup: {\n                                minHeight: 15,\n                                el: {\n                                    type: BI.VerticalLayout.xtype,\n                                    cls: 'bi-card bi-border-radius',\n                                    extraCls: this.createPopupStyle(style).classes.popupStyle,\n                                    items: [\n                                        header\n                                            ? {\n                                                el: {\n                                                    type: BI.Label.xtype,\n                                                    cls: 'bi-header-background bi-font-bold',\n                                                    text: header,\n                                                    hgap: 5,\n                                                    vgap: 5,\n                                                },\n                                            }\n                                            : {},\n                                        body || !image\n                                            ? {\n                                                type: BI.Label.xtype,\n                                                ref: (_ref: Label) => {\n                                                    this.textLabel = _ref;\n                                                },\n                                                text: body,\n                                                hgap: 5,\n                                                vgap: 5,\n                                            }\n                                            : {\n                                                type: BI.Img.xtype,\n                                                src: image,\n                                                hgap: 5,\n                                                vgap: 5,\n                                            },\n                                    ],\n                                },\n                            },\n                        },\n                    }],\n                });\n            }\n        };\n    }\n\n    private createPopupStyle (style: CellSetStyleArgs = {}) {\n        return jss\n            .createStyleSheet(\n                {\n                    popupStyle: {\n                        'font-weight': style.fontWeight,\n                        'font-family': style.fontFamily,\n                        'font-size': style.fontSize,\n                        color: style.color,\n                        'text-decoration': `${style.textDecorationLine} ${style.textDecorationStyle} ${style.textDecorationColor} ${style.textDecorationThickness}`,\n                        'font-style': style.fontStyle,\n                        'text-shadow': style.textShadow,\n                        padding: style.padding,\n                        'line-height': style.lineHeight,\n                        'vertical-align': style.verticalAlign,\n                        'text-align': style.textAlign,\n                        border: style.border,\n                        'background-size': 'contain',\n                        'background-repeat': style.backgroundRepeat,\n                        'background-image': style.backgroundImage,\n                        'background-color': style.backgroundColor,\n                    },\n                },\n            )\n            .attach();\n    }\n\n    public action({ cell, e }: Parameters<AbstractCellHandler['action']>[0]) {\n        if (!cell) {\n            return;\n        }\n\n        this.combo && this.combo.hideView();\n\n        if (BI.isNull(this.position)) {\n            return this.doAction(e, cell.value);\n        }\n\n\n        const { position: { x, y } } = cell;\n        const { x: allowX, y: allowY } = this.position;\n\n        let showPopup;\n\n        switch (this.scopeType) {\n            case 'cell': default:\n                showPopup = x === allowX && y === allowY;\n                break;\n            case 'table':\n                showPopup = true;\n                break;\n            case 'rowcolumn':\n                showPopup = x === allowX || y === allowY;\n                break;\n        }\n\n        showPopup && this.doAction(e, cell.value);\n    }\n\n    private doAction(e: Event | undefined, value: string) {\n        this.attach();\n        this.combo.showView(e);\n        this.useCellValue && this.textLabel?.setValue(value);\n    }\n}\n\ninterface popupConfig {\n    position: { x?: number, y?: number };\n    scopeType: 'table' | 'cell' | 'rowcolumn';\n    body: string,\n    header: string | undefined,\n    image?: string,\n    style?: CellSetStyleArgs,\n}\n"]}