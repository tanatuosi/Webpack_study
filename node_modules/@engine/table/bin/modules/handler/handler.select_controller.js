import { AbstractCellHandler } from './handler.abstract';
import { CellControllerManager } from '../table.cell_controller_manager';
import { getCellTextByCell } from '../table.service';
export class CellSelectHandler extends AbstractCellHandler {
    constructor() {
        super(...arguments);
        this.eventNames = ['CELL_CLICK', 'CELL_DOUBLE_CLICK'];
        this.name = 'CELL_SELECT';
        this.merger = 'uniqe';
    }
    async action({ id, cell }) {
        const { position } = cell;
        const row = position.y, col = position.x;
        this.externalContext.setSelectCell({
            row,
            col,
            text: `${getCellTextByCell(this.tableData[row][col])}`,
            cell,
        });
        const cellControllerManager = (this.externalContext.getStickerManagers().get(CellControllerManager.NAME));
        if (!cellControllerManager) {
            return;
        }
        cellControllerManager.initializeWidget(id);
        cellControllerManager.mountWidget(id);
        cellControllerManager
            .getWidgetsMap()
            .forEach((controller, name) => {
            controller.setSeleted(name === id);
        });
    }
}
//# sourceMappingURL=handler.select_controller.js.map