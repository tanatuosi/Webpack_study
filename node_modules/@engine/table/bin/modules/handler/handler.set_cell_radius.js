import { AbstractCellHandler } from './handler.abstract';
var DirectionRadius;
(function (DirectionRadius) {
    DirectionRadius["TL"] = "tlRadius";
    DirectionRadius["TR"] = "trRadius";
    DirectionRadius["BR"] = "brRadius";
    DirectionRadius["BL"] = "blRadius";
})(DirectionRadius || (DirectionRadius = {}));
/**
 * 设置单元格弧度
 */
export class CellSetRadiusHandler extends AbstractCellHandler {
    constructor() {
        super(...arguments);
        this.eventNames = ['CELL_SET_RADIUS'];
        this.name = 'CELL_SET_RADIUS';
        this.merger = 'uniqe';
    }
    action({ radius, range = {}, single }) {
        const pageResult = this.tableData;
        const { row = [], column = [], cell = [] } = range;
        let [rowStart = 1, rowEnd = Number.MAX_VALUE] = row;
        let [colStart = 1, colEnd = Number.MAX_VALUE] = column;
        if (BI.size(cell)) {
            rowStart = rowEnd = cell[0] || 1;
            colStart = colEnd = cell[1] || 1;
        }
        // 设置范围边缘弧度还是设置范围内所有单元格
        if (!single) {
            const rowCount = BI.size(pageResult);
            const columnCount = pageResult.reduce((max, rowCells) => Math.max(max, BI.size(rowCells)), 0);
            const maxRow = Math.min(rowEnd - 1, rowCount - 1), maxColumn = Math.min(colEnd - 1, columnCount - 1), minRow = Math.max(rowStart - 1, 0), minColumn = Math.max(colStart - 1, 0);
            this.setCellRadius(pageResult[minRow][minColumn], radius, DirectionRadius.TL);
            this.setCellRadius(pageResult[minRow][maxColumn], radius, DirectionRadius.TR);
            this.setCellRadius(pageResult[maxRow][minColumn], radius, DirectionRadius.BL);
            this.setCellRadius(pageResult[maxRow][maxColumn], radius, DirectionRadius.BR);
        }
        else {
            pageResult.forEach((rowCells, rowIndex) => {
                if (!(rowIndex >= rowStart - 1 && rowIndex < rowEnd)) {
                    return;
                }
                rowCells.forEach((cell, columnIndex) => {
                    if (!(columnIndex >= colStart - 1 && columnIndex < colEnd)) {
                        return;
                    }
                    this.setCellRadius(cell, radius);
                });
            });
        }
        this.externalContext.populate(pageResult);
    }
    /**
    * 设置单元格圆角
    * @param cell 单元格
    * @param radius 圆角
    * @param direction 位置
    */
    setCellRadius(cell, radius, direction) {
        var _a, _b;
        const { sourceCellPosition } = cell, realCell = BI.isNull(sourceCellPosition)
            ? cell
            : this.tableData[sourceCellPosition.y][sourceCellPosition.x];
        const cellRadiusConfig = ((_b = (_a = realCell.cellstyle) === null || _a === void 0 ? void 0 : _a.cellBackground) === null || _b === void 0 ? void 0 : _b.background.radiusConfig) || {};
        const radiusConfig = Object.assign({ radius, tlRadius: !direction, trRadius: !direction, blRadius: !direction, brRadius: !direction }, cellRadiusConfig);
        BI.deepExtend(realCell, {
            cellstyle: {
                cellBackground: {
                    background: {
                        radiusConfig: direction
                            ? Object.assign(Object.assign({}, radiusConfig), { [direction]: true }) : radiusConfig,
                    },
                },
            },
        });
    }
}
//# sourceMappingURL=handler.set_cell_radius.js.map