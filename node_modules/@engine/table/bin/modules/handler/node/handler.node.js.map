{"version":3,"file":"handler.node.js","sourceRoot":"","sources":["../../../../src/modules/handler/node/handler.node.ts"],"names":[],"mappings":"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","sourcesContent":["import { Loading } from '@engine/utils';\nimport { PageResult } from '../../table.types';\nimport { HandlerExternalContext } from '../handler';\nimport { AbstractCellHandler } from '../handler.abstract';\n\ninterface Entry {\n    targetId: number | string;\n    effectRows: number;\n}\n\ninterface EffectEntry {\n    key: number;\n    value: Entry[];\n}\n\nexport class NodeCellClickHandler extends AbstractCellHandler {\n    public eventNames = ['CELL_NODE_CLICK'];\n\n    public name = 'NODE_CLICK';\n\n    public merger = 'uniqe';\n\n    private cache = new Map<number | string, PageResult[][]>();\n\n    private loading: Loading;\n\n    private effectEntryMap = new Map<number | string, Entry[]>();\n\n    private nodeDataFetcher: (opts: {[key: string]: any}) => Promise<NodeDataFetcherData | undefined> = async () => undefined;\n\n    public constructor(externalInterface: HandlerExternalContext, opt?: {\n        nodeDataFetcher: NodeCellClickHandler['nodeDataFetcher'],\n    }) {\n        super(externalInterface);\n        \n        this.nodeDataFetcher = opt?.nodeDataFetcher || this.nodeDataFetcher;\n    }\n\n    /**\n     * 设置effectEntryMap，测试用\n     * @param v 值\n     */\n    public setEffectEntryMap(v: EffectEntry[] | EffectEntry) {\n        const values = BI.isArray(v) ? v : [v];\n\n        values.forEach(({ key, value }) => {\n            this.effectEntryMap.set(key, value);\n        });\n    }\n\n    /**\n     * 设置effectEntryMap，测试用\n     * @param v 值\n     */\n    public setCache(v: { key: number, value: PageResult[][] }[] | { key: number, value: PageResult[][] }) {\n        const values = BI.isArray(v) ? v : [v];\n\n        values.forEach(({ value, key }) => {\n            this.cache.set(key, value);\n        });\n    }\n\n    /**\n     * 挂载不透明的loading\n     */\n    private attach() {\n        if (!this.loading) {\n            this.externalContext.attach({\n                type: BI.AbsoluteLayout.xtype,\n                items: [{\n                    el: {\n                        type: Loading.xtype,\n                        ref: (_ref: Loading) => {\n                            this.loading = _ref;\n                        },\n                        cls: 'transparent',\n                    },\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                }],\n            });\n        }\n    }\n\n    public async action({ open, id, eventName, layer }: Parameters<AbstractCellHandler['action']>[0] & { open: boolean, id: number, eventName: string, layer: number }) {\n        this.attach();\n        let pageResults = this.externalContext.getTableData();\n        \n        if (!eventName) {\n            // 单个节点展开或收起\n            let pageCellData: PageResult | undefined;\n\n            pageResults.some(rowData => rowData.some(cellData => {\n                if (cellData.id === id) {\n                    pageCellData = cellData;\n        \n                    return true;\n                }\n        \n                return false;\n            }));\n        \n            if (!pageCellData) {\n                return;\n            }\n\n            pageResults = await this.getPageResults(pageResults, pageCellData, open);\n        } else if (eventName === 'NODE_COLLAPSE') {\n            let startIndent = 0;\n\n            pageResults.forEach(rowData => {\n                rowData.forEach(({ indent }) => {\n                    BI.isNotNull(indent) && (startIndent = Math.max(startIndent, indent));\n                });\n            });\n\n            for (let indent = startIndent; indent >= Math.max(startIndent - layer, 0); indent--) {\n                for (const rowData of pageResults) {\n                    for (const cellData of rowData) {\n                        if (cellData.id && cellData.indent === indent && cellData.open === open) {\n                            pageResults = await this.getPageResults(pageResults, cellData, open);\n                        }\n                    }\n                }\n            }\n        } else if (eventName === 'NODE_COLLAPSE_TO') {\n            for (const rowData of pageResults) {\n                for (const cellData of rowData) {\n                    if (cellData.id && cellData.indent === layer && cellData.open === open) {\n                        pageResults = await this.getPageResults(pageResults, cellData, open);\n                    }\n                }\n            }\n        } else {\n            for (let indent = 0; indent < layer; indent++) {\n                let shouldContinue = false;\n\n                for (const rowData of pageResults) {\n                    for (const cellData of rowData) {\n                        if (cellData.id && cellData.indent === indent && cellData.open === open) {\n                            pageResults = await this.getPageResults(pageResults, cellData, open);\n                        }\n\n                        shouldContinue = shouldContinue || (BI.isNotNull(cellData.indent) ? cellData.indent >= indent : false);\n                    }\n                }\n\n                if (!shouldContinue) {\n                    break;\n                }\n            }\n        }\n        \n        this.externalContext.populate(pageResults);\n        this.loading.invisible();\n    }\n\n    public async getPageResults(pageResults: PageResult[][], cellData: PageResult, open: boolean) {\n        let newPageResults: PageResult[][];\n\n        if (!cellData.id) {\n            return pageResults;\n        }\n        \n        // 需要展开\n        if (!open) {\n            newPageResults = await this.expandRow(pageResults, cellData.id);\n        } else {\n            newPageResults = this.collapseRow(pageResults, cellData.id);\n        }\n        cellData.open = !open;\n\n        return newPageResults;\n    }\n\n    /**\n     * 获取展开值\n     * @param table table对象\n     * @param id 点击节点的id\n     */\n    private async getNodeData(id: number | string): Promise<PageResult[][]> {\n        this.loading.visible();\n\n        const data = this.cache.get(id);\n\n        if (data) {\n            this.cache.delete(id);\n\n            return data;\n        }\n\n        const result = await this.nodeDataFetcher({\n            layer: id,\n        });\n\n        if (!result) {\n            return [];\n        }\n\n        if (result.effectEntries) {\n            this.effectEntryMap.set(id, result.effectEntries);\n        }\n\n        return result.pageResult;\n    }\n\n    /**\n     * 展开行\n     * @param raw 原始数据\n     * @param id 父节点id\n     */\n    private async expandRow(raw: PageResult[][], id: number | string): Promise<PageResult[][]> {\n        const expandData = processRowExpandedData(raw, await this.getNodeData(id), id);\n    \n        const pageResults = expandRow(raw, expandData);\n\n        const effectEntries = this.getEffectEntries(expandData, id);\n\n        const targetIds = effectEntries.map(({ targetId }) => targetId);\n\n        pageResults.forEach(rowData => {\n            rowData.forEach(cellData => {\n                if (cellData.id && targetIds.includes(cellData.id)) {\n                    effectEntries.forEach(({ targetId, effectRows }) => {\n                        if (cellData.id === targetId) {\n                            cellData.position.rowSpan = (cellData.position.rowSpan || 1) + effectRows;\n                        }\n                    });\n                }\n            });\n        });\n\n        return pageResults;\n    }\n\n    /**\n     * 收起行\n     * @param raw 原始数据\n     * @param pId 父节点id\n     */\n    private collapseRow(raw: PageResult[][], pId: number | string): PageResult[][] {\n        const { expanded, unexpanded } = splitPageResultsByRow(raw, pId);\n\n        const maxY = minimize(expanded, 'y');\n\n        unexpanded.forEach(row => {\n            row.forEach(cellData => {\n                const y = cellData.position.y;\n\n                if (y >= maxY) {\n                    cellData.position.y -= expanded.length;\n                }\n            });\n        });\n\n        this.cache.set(pId, expanded);\n\n        const effectEntries = this.getEffectEntries(expanded, pId);\n\n        const targetIds = effectEntries.map(({ targetId }) => targetId);\n\n        unexpanded.forEach(rowData => {\n            rowData.forEach(cellData => {\n                if (cellData.id && targetIds.includes(cellData.id)) {\n                    effectEntries.forEach(({ targetId, effectRows }) => {\n                        if (cellData.id === targetId && cellData.position.rowSpan) {\n                            cellData.position.rowSpan -= effectRows;\n                        }\n                    });\n                }\n            });\n        });\n\n        return unexpanded;\n    }\n\n    /**\n     * 计算data内要收起的相关id\n     * @param data 数据\n     * @param id 默认id\n     */\n    private getEffectEntries(data: PageResult[][], id: number | string) {\n        const relatedIds = [id];\n\n        data.forEach(rowData => {\n            rowData.forEach(cellData => {\n                if (cellData.id && cellData.open) {\n                    relatedIds.push(cellData.id);\n                }\n            });\n        });\n\n        const effectEntries = relatedIds.reduce((entry, id) => entry.concat(this.effectEntryMap.get(id) || []), [] as Entry[]);\n\n        return effectEntries;\n    }\n}\n\n/**\n * 修正拓展行数据的y\n * @param raw 原始数据\n * @param expanded 推展数据\n * @param id 拓展节点id\n */\nexport function processRowExpandedData(raw: PageResult[][], expanded: PageResult[][], id: number | string): PageResult[][] {\n    const upperYs = new Set<number>();\n\n    const curRow = raw.find(rowData => rowData.map(cellData => cellData.id).includes(id));\n\n    if (!curRow) {\n        return expanded;\n    }\n\n    let highlight = false, curY = BI.first(curRow).position.y;\n\n    curRow.forEach(cellData => {\n        if (!highlight) {\n            highlight = cellData.id === id;\n        }\n\n        if (highlight) {\n            curY = Math.max(curY, cellData.position.y + (cellData.position.rowSpan || 1) - 1);\n        }\n    });\n\n    raw.forEach(rowData => {\n        const $curY = BI.first(rowData).position.y;\n\n        if ($curY <= curY) {\n            upperYs.add($curY);\n        }\n    });\n\n    const gapY = minimize(expanded, 'y') - upperYs.size;\n\n    expanded.forEach(rowData => {\n        rowData.forEach(cellData => {\n            cellData.position.y -= gapY;\n        });\n    });\n\n    return expanded;\n}\n\n/**\n * 拓展行\n * @param raw 原始表格数据\n * @param expanded 新表格数据\n */\nfunction expandRow(raw: PageResult[][], expanded: PageResult[][]): PageResult[][] {\n    const minY = minimize(expanded, 'y');\n\n    raw.forEach(row => {\n        row.forEach(cellData => {\n            const y = cellData.position.y;\n\n            if (y >= minY) {\n                cellData.position.y += expanded.length;\n            }\n        });\n    });\n\n    return raw.concat(expanded);\n}\n\n/**\n * 分离出和pId下的所有子节点\n * @param raw 原始数据\n * @param pId 父id\n * @param stay 父id所在行是否留下\n */\nexport function splitPageResultsByRow(\n    raw: PageResult[][],\n    pId: number | string,\n    stay = true,\n): { unexpanded: PageResult[][], expanded: PageResult[][] } {\n    let childrenIds: (number|string)[] = [], unexpanded: PageResult[][] = [], expanded: PageResult[][] = [];\n\n    // 先找到id所在单元格信息\n    let targetCell: PageResult | undefined;\n\n    raw.some(rowData => rowData.some(cellData => {\n        if (cellData.id && cellData.id === pId) {\n            targetCell = cellData;\n\n            return true;\n        }\n\n        return false;\n    }));\n\n    if (!targetCell) {\n        return { expanded: [], unexpanded: raw };\n    }\n\n    const mergedRowYs = new Set<number | string>(), expandedRowYs = new Set<number | string>();\n\n    raw.forEach(rowData => {\n        rowData.forEach(cellData => {\n            if (targetCell!.id && cellData.pId === targetCell!.id) {\n                expandedRowYs.add(cellData.pId);\n            }\n\n            if (cellData.position.y !== targetCell!.position.y || cellData.position.x < targetCell!.position.x) {\n                return;\n            }\n\n            if (!cellData.position.rowSpan) {\n                return;\n            }\n\n            for (let i = 1; i < cellData.position.rowSpan; i++) {\n                mergedRowYs.add(targetCell!.position.y + i);\n            }\n        });\n    });\n\n    raw.forEach(rowData => {\n        const isTargetRow = rowData.some(cellData => cellData.id === pId);\n\n        if (isTargetRow) {\n            unexpanded.push(rowData);\n\n            return;\n        }\n\n        const isExpandedRow = rowData.some(cellData => cellData.pId && expandedRowYs.has(cellData.pId));\n\n        if (isExpandedRow) {\n            rowData.some(cellData => {\n                if (BI.isNotNull(cellData.id) && BI.isNotNull(cellData.pId)) {\n                    childrenIds = BI.uniq(childrenIds.concat([cellData.id]));\n                    \n                    return true;\n                }\n\n                return false;\n            });\n        }\n\n        unexpanded.push(rowData);\n    });\n\n    // 处理子节点id\n    childrenIds.forEach(id => {\n        const result = splitPageResultsByRow(unexpanded, id, false);\n\n        unexpanded = result.unexpanded;\n\n        expanded = expanded.concat(result.expanded);\n    });\n\n    // 处理子节点，子节点应该全部收起\n    unexpanded = unexpanded.filter(rowData => {\n        const isChild = rowData.some(cellData => cellData.id && childrenIds.includes(cellData.id));\n\n        if (isChild) {\n            expanded.push(rowData);\n        }\n\n        return !isChild;\n    });\n\n    const unMerged: PageResult[][] = [];\n\n    unexpanded.forEach(rowData => {\n        const isMergedRow = rowData.some(cellData => mergedRowYs.has(cellData.position.y)) && !stay;\n\n        if (isMergedRow) {\n            expanded.push(rowData);\n        } else {\n            unMerged.push(rowData);\n        }\n    });\n\n    return { unexpanded: unMerged, expanded };\n}\n\n/**\n * 找到表格数据中最小的X或Y\n * @param pageResults 表格数据\n */\nfunction minimize(pageResults: PageResult[][], key: 'x' | 'y') {\n    return pageResults.reduce((min, rowData) => Math.min(rowData.reduce(($min: number, cellData) => Math.min($min, cellData.position[key]), Infinity), min), Infinity);\n}\n\ninterface NodeDataFetcherData {\n    pageResult: PageResult[][];\n    // 需要扩大的合并单元格信息（只有分层计算展开节点时会返回）\n    effectEntries?: {\n        // 受影响的合并格id\n        targetId: number;\n        // 需要扩大的行数\n        effectRows: number;\n    }[];\n}\n"]}