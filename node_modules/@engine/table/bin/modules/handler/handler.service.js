/**
 * 将坐标转换为key
 * @param x 横坐标
 * @param y 纵坐标
 */
export function encodeCacheKey(x, y) {
    return `${x}-${y}`;
}
/**
 * 将key转换为坐标
 * @param key key值
 */
export function decodeCacheKey(key) {
    const [x, y] = key.split('-').map(item => parseInt(item, 10));
    return { x, y };
}
/**
 * 修改单元格内容
 * @param raw 原始值
 * @param cells 修改数组
 * @param handler 处理方式
 */
export function alterRawTable(raw, cells, handler) {
    cells.forEach(cell => {
        const { x, y, alterer } = cell;
        const target = findCellByPosition(raw, x, y);
        if (!target) {
            return;
        }
        handler(target, alterer);
    });
}
/**
 * 根据x y找到cell
 * @param x x坐标
 * @param y y坐标
 */
export function findCellByPosition(raw, x, y) {
    let targetCell;
    raw.some(row => row.some(cell => {
        if (cell.position.x === x && cell.position.y === y) {
            targetCell = cell;
            return true;
        }
        return false;
    }));
    return targetCell;
}
/**
 * 根据x y找到同一行的cells
 * @param x x坐标
 * @param y y坐标
 */
export function findCellLineByPosition(raw, y) {
    const result = [];
    raw.forEach(row => {
        row.forEach(cell => {
            if (cell.position.y === y) {
                result.push(cell);
            }
        });
    });
    return result;
}
/**
 * 根据当前坐标获取满足条件的cells
 * @param raw 原始值
 * @param position 坐标
 * @param filterOperation 过滤条件
 */
export function findValidCellData(raw, position, filterOperation) {
    return raw.reduce((result, row) => result.concat(row.filter(cell => filterOperation(cell, position))), []);
}
//# sourceMappingURL=handler.service.js.map