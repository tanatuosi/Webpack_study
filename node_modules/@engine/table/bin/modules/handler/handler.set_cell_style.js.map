{"version":3,"file":"handler.set_cell_style.js","sourceRoot":"","sources":["../../../src/modules/handler/handler.set_cell_style.ts"],"names":[],"mappings":"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","sourcesContent":["import { BackgroundType, transformColor } from '@engine/core';\nimport { DEFAULT_BORDER } from '../table.constants';\nimport type { CellSetStyleArgs, XBorder, XCellStyle } from '../table.types';\nimport { AbstractCellHandler } from './handler.abstract';\n\n/**\n * 设置单元格样式，css属性\n */\nexport class CellSetStyleHandler extends AbstractCellHandler {\n    public eventNames = ['CELL_SET_STYLE'];\n\n    public name = 'CELL_SET_STYLE';\n\n    public merger = 'covered';\n\n    public action(args: TableCellSetStyleHandler) {\n        const { x, y, style = {} } = args;\n        \n        const cellStyle = this.transformStyle2CellStyle(style);\n\n        const pageResults = this.tableData;\n\n        if (!BI.isNull(x) && !BI.isNull(y)) {\n            BI.deepExtend(pageResults[y].find(cell => cell.position.x === x)?.cellstyle, cellStyle);\n        } else if (BI.isNull(x)) {\n            pageResults[y].forEach(cell => {\n                BI.deepExtend(cell.cellstyle, cellStyle);\n            });\n        } else {\n            pageResults.forEach(rowCells => {\n                BI.deepExtend(rowCells.find(cell => cell.position.x === x)?.cellstyle, cellStyle);\n            });\n        }\n        this.externalContext.populate(pageResults);\n    }\n\n    private transformStyle2CellStyle(style: CellSetStyleArgs) {\n        const cellStyle: XCellStyle = {\n            cellBackground: {\n                background: this.transformBackground(style),\n            },\n            borderStyle: this.transformBorderStyle(style),\n            fontStyle: this.transFormFontStyle(style),\n            contentStyle: this.transformContentStyle(style),\n        };\n\n        return cellStyle;\n    }\n\n    private transFormFontStyle(style: CellSetStyleArgs) {\n        const {\n            fontWeight = 'normal',\n            fontStyle = 'normal',\n            fontFamily = '',\n            fontSize = 12,\n            color = '#000',\n            textDecorationColor = '',\n            textDecorationLine = '',\n            textDecorationStyle = '',\n            textDecorationThickness = 0, // 这个只允许输入尺寸\n            textShadow,\n        } = style;\n\n        const textShadowAttr = textShadow?.split(' ') || [];\n\n        return {\n            bold: fontWeight,\n            italic: fontStyle,\n            fontFamily,\n            strikeThrough: textDecorationLine.indexOf('line-through') !== -1,\n            fontSize: this.getIntValue(fontSize),\n            color,\n            underLine: {\n                width: textDecorationLine.indexOf('underline') !== -1\n                    ? this.getIntValue(textDecorationThickness)\n                    : 0,\n                style: textDecorationStyle,\n                color: textDecorationColor,\n            },\n            textShadow: {\n                shadowBlur: this.getIntValue(textShadowAttr[2]),\n                shadowColor: textShadowAttr[3] || 'black',\n                shadowOffsetX: this.getIntValue(textShadowAttr[0]),\n                shadowOffsetY: this.getIntValue(textShadowAttr[1]),\n            },\n        };\n    }\n\n\n    private transformContentStyle(style: CellSetStyleArgs) {\n        const {\n            padding,\n            paddingBottom,\n            paddingLeft,\n            paddingRight,\n            paddingTop,\n            lineHeight = 0,\n            verticalAlign = '',\n            textAlign = '',\n            whiteSpace = '',\n        } = style;\n\n        const paddingArr = padding?.split(' ') || [];\n\n        return {\n            paddingLeft: this.getIntValue(paddingLeft || paddingArr[3]),\n            paddingRight: this.getIntValue(paddingRight || paddingArr[1]),\n            spacingAfter: this.getIntValue(paddingBottom || paddingArr[2]),\n            spacingBefore: this.getIntValue(paddingTop || paddingArr[0]),\n            lineHeight,\n            verticalAlign,\n            textAlign,\n            newLine: whiteSpace, // 可选值 AUTO_NEWLINE, SINGLE_LINE, SINGLE_LINE_ADJUST_FONT, MULTI_LINE_ADJUST_FONT;\n        };\n    }\n\n    private transformBackground(style: CellSetStyleArgs) {\n        const {\n            backgroundColor,\n            backgroundImage,\n            backgroundRepeat, // backgroundRepeat也只支持单值语法，可选值'repeat' | 'adapt' | 'stretch' | 'center' | 'default'\n        } = style;\n\n        return {\n            ...BI.isNull(backgroundImage)\n                ? {}\n                : this.transformBackgroundImage(backgroundImage),\n            ...BI.isNull(backgroundColor)\n                ? {}\n                : {\n                    backgroundType: 'ColorBackground' as BackgroundType,\n                    color: backgroundColor,\n                },\n            layout: backgroundRepeat,\n        };\n    }\n\n    private transformBackgroundImage(backgroundImage: string) {\n        const background: {\n            imgUrl?: string;\n            backgroundType?: BackgroundType;\n            direction?: number;\n            startColor?: string;\n            endColor?: string;\n        } = {};\n        // 先替换里面的rgb，要不括号不好匹\n        const commonBackgroundImage = this.transformRgb2Color(backgroundImage);\n\n        const url = commonBackgroundImage.match(/url\\((.+?)\\)/g);\n\n        const linearGradient = commonBackgroundImage.match(/linear-gradient\\((.+?)\\)/g);\n\n        if (!BI.isNull(url)) {\n            // 设置多背景图也只取首个\n            background.imgUrl = url[0].replace(/\"|'|url|\\(|\\)/g, '');\n            background.backgroundType = 'ImageBackground';\n        } else if (!BI.isNull(linearGradient)) {\n            // 只支持最简单的横向或纵向渐变,不带方向默认按纵向\n            const linearArr = linearGradient[0].replace(/\"|'|linear-gradient|\\(|\\)/g, '').split(',');\n\n            background.backgroundType = 'GradientBackground';\n\n            const linearArrLength = BI.size(linearArr);\n\n            background.direction = BI.size(linearArr[0].match(/left|right/g)) ? 0 : 1;\n            background.startColor = linearArr[linearArrLength - 2];\n            background.endColor = linearArr[linearArrLength - 1];\n        }\n\n        return background;\n    }\n\n    private transformBorderStyle(style: CellSetStyleArgs) {\n        const {\n            border = DEFAULT_BORDER,\n            borderTop,\n            borderBottom,\n            borderLeft,\n            borderRight,\n        } = style;\n\n        const defaultXborder = this.transformCssBorder2XBorder(border);\n\n        const getXborder4Direction = (border: string | undefined) => BI.isNull(border)\n            ? defaultXborder\n            : this.transformCssBorder2XBorder(border);\n\n        return {\n            topBorder: getXborder4Direction(borderTop),\n            bottomBorder: getXborder4Direction(borderBottom),\n            leftBorder: getXborder4Direction(borderLeft),\n            rightBorder: getXborder4Direction(borderRight),\n        };\n    }\n\n    private getIntValue(value: string | number = 0) {\n        return parseInt(value.toString(), 10);\n    }\n\n    private transformCssBorder2XBorder(border: string): XBorder {\n        const borderArr = border.split(' ');\n\n        return {\n            width: this.getIntValue(borderArr[0]),\n            style: borderArr[1] || 'solid',\n            color: borderArr[2] || -1,\n        };\n    }\n\n    private transformRgb2Color (color: string) {\n        let hexadecimalColor = color;\n\n        color.match(/rgb\\((.+?)\\)/g)?.forEach(rgbColor => {\n            hexadecimalColor = hexadecimalColor.replace(rgbColor, transformColor(rgbColor));\n        });\n\n        return hexadecimalColor;\n    }\n}\n\nexport type TableCellSetStyleHandler = Parameters<AbstractCellHandler['action']>[0] & { style: CellSetStyleArgs }\n"]}