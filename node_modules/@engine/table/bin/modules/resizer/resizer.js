var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { provider } from '@engine/core';
import { FullPaperResizer } from './resizer.full_paper';
import { FullTableResizer } from './resizer.full_table';
import { FullTableLimitResizer } from './resizer.full_table_limit';
import { HorizontalPaperResizer } from './resizer.horizontal_paper';
import { HorizontalTableResizer } from './resizer.horizontal_table';
import { HorizontalTableLimitResizer } from './resizer.horizontal_table_limit';
import { NoneResizer } from './resizer.none';
import { NoneTableResizer } from './resizer.none_table';
/**
 * 对外使用的provider
 */
let ReportTableResizerProvider = class ReportTableResizerProvider {
    constructor() {
        this.resizeModes = new Map([
            [0, HorizontalPaperResizer],
            [1, HorizontalPaperResizer],
            [2, FullPaperResizer],
            [3, NoneTableResizer],
            [4, HorizontalTableResizer],
            [5, FullTableResizer],
            [-1, HorizontalTableLimitResizer],
            [-2, FullTableLimitResizer],
            [-3, NoneResizer],
        ]);
    }
    $get() {
        const provider = this;
        return class {
            setResizer(type, newResizeMode) {
                provider.resizeModes.set(type, newResizeMode);
            }
            /**
             *
             * @param type 1：宽度自适应，2：双向自适应，3：不自适应
             */
            getResizer(type, opts) {
                return new (provider.resizeModes.get(type) || NoneResizer)(opts);
            }
        };
    }
    addResizer(type, value) {
        const Resizer = BI.inherit(NoneResizer, value);
        this.resizeModes.set(type, Resizer);
    }
};
ReportTableResizerProvider.xtype = 'report.table_resizer.provider';
ReportTableResizerProvider = __decorate([
    provider()
], ReportTableResizerProvider);
export const resizerProvider = BI.Providers.getProvider(ReportTableResizerProvider.xtype);
//# sourceMappingURL=resizer.js.map