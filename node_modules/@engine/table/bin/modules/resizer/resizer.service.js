var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
export const fontScaleAttributeName = 'data-font-scale';
/**
 * 对sticker进行自适应
 * @param rate 字体缩放比例
 * @param stickers stickers
 */
export function resizeStickerExtension(rate, extension) {
    const { el } = extension, args = __rest(extension, ["el"]);
    return Object.assign({ el: extension.initialEl
            .replaceAll(/font-size:\s*[0-9.]+/, str => str.replaceAll(/[0-9.]+/, fontSize => parseFloat(fontSize) * rate))
            .replaceAll(new RegExp(`${fontScaleAttributeName}=\\s*"[0-9.]+`), str => str.replaceAll(/[0-9.]+/, () => rate)) }, args);
}
/**
 * 移除横向作为边距的宽度
 */
export function removeColsAdjust(cols) {
    cols[cols.length - 1] = 0;
    cols[cols.length - 2] = 0;
    cols[0] = 0;
    return cols;
}
/**
 * 移除纵向作为边距的宽度
 */
export function removeRowsAdjust(rows) {
    rows[0] = 0;
    rows[rows.length - 3] = 0;
    rows[rows.length - 2] = 0;
    rows[rows.length - 1] = 0;
    return rows;
}
/**
 * 根据缩放比例调整宽高，抹平浮点数
 * @param sizeList
 * @param rate
 * @returns
 */
export function adjustSizeByRate(sizeList, rate) {
    /** 用于保留取整的余数 */
    let remainderSize = 0;
    return sizeList.map(size => {
        /** 对于 remainderSize 在当下节点就直接处理完毕，remainderSize 不再累积 */
        const result = size * rate + remainderSize;
        /** 跟大多数浏览器行为保持一致，采用四舍五入的方法 */
        const result2Int = Math.round(result);
        /**
         * 使得 remainderSize 的区间为 [-0.5, 0.5)
         * 下一个节点单独依靠 remainderSize 四舍五入恒为0
        */
        remainderSize = result - result2Int;
        return result2Int;
    });
}
export function resize(max, sizes = [], scale = 1) {
    return adjustSize(max, adjustSizeByRate(sizes, scale));
}
export function resizeFont(rate, minFontSize = 0, cells) {
    cells && BI.each(cells, (_index, item) => {
        BI.each(item, (_dataIndex, data) => {
            var _a;
            if ((_a = data === null || data === void 0 ? void 0 : data.style) === null || _a === void 0 ? void 0 : _a.defaultFontSize) {
                data.style.fontSize = getResizedFontSize(data.style.defaultFontSize, rate, minFontSize);
            }
            BI.each(BI.get(data, 'items'), (_labelIndex, label) => {
                var _a;
                if ((_a = label === null || label === void 0 ? void 0 : label.el) === null || _a === void 0 ? void 0 : _a.style) {
                    const oldLineHeight = label.el.style.lineHeight;
                    label.el.style.lineHeight = getResizedLineHeight(label.el.style.defaultLineHeight, rate);
                    label.el.style.fontSize = getResizedFontSize(label.el.style.defaultFontSize, rate, minFontSize);
                    label.left *= label.el.style.lineHeight / oldLineHeight;
                    label.right *= label.el.style.lineHeight / oldLineHeight;
                }
            });
        });
    });
}
function getResizedFontSize(oldFontSize, rate, minFontSize) {
    const defaultFontSize = parseInt(oldFontSize, 10);
    const newFontSize = defaultFontSize * rate;
    return `${Math.max(newFontSize, minFontSize)}px`;
}
function getResizedLineHeight(defaultLineHeight, rate) {
    return `${rate * parseInt(defaultLineHeight, 10)}`;
}
/**
 * 处理单元格尺寸
 * 如果格子尺寸相加仅仅比报表块大一点点(不大于2px)
 * 则调整一下尺寸以至于不要出现滚动条
 */
export function adjustSize(max, sizes = []) {
    const totalSize = Math.round(sizes.reduce((total, item) => total + item));
    const index = sizes.findIndex(item => !!item);
    if (totalSize >= max) {
        const MAX_SIZE_DIFFERENCE = 4;
        if (totalSize - max > MAX_SIZE_DIFFERENCE) {
            sizes[sizes.length - 1] = 2;
            sizes[0] = 1;
        }
        else {
            sizes[index] = Math.floor(sizes[index] - (totalSize - max || 1));
        }
    }
    return sizes;
}
//# sourceMappingURL=resizer.service.js.map