import { AbstractTableCell } from './cell.abstract';
export class CurrencyLineTableCell extends AbstractTableCell {
    toFullCell() {
        const { style, cell, hyperLinks, celladvancedattr } = this.options;
        const { text, currencyLineAttr } = cell;
        const cellText = AbstractTableCell.transform2CellText(text);
        const { contentStyle, borderStyle, backgroundStyle } = style;
        return {
            type: BI.AbsoluteLayout.xtype,
            currencyLineAttr: cellText ? currencyLineAttr : undefined,
            style: Object.assign({}, contentStyle),
            borderStyle,
            backgroundStyle,
            listeners: [
                {
                    eventName: 'CELL_CLICK',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_CLICK', { e, x, y, cell, hyperLinks, id: this.id });
                        return true;
                    },
                },
                {
                    eventName: 'CELL_DOUBLE_CLICK',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_DOUBLE_CLICK', { e, x, y, cell, hyperLinks, id: this.id });
                        return true;
                    },
                },
                {
                    eventName: 'CELL_HOVER',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_HOVER', { e, x, y, cell });
                    },
                },
                {
                    eventName: 'CELL_MOUSE_LEAVE',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_MOUSE_LEAVE', { e, x, y, cell });
                    },
                },
                {
                    eventName: 'CELL_MOUSE_DOWN',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_MOUSE_DOWN', { e, x, y, cell });
                    },
                },
            ],
            value: cellText,
            position: cell.position,
            canCopy: true,
            cursor: hyperLinks.length === 0 ? 'default' : 'pointer',
            valid: cell.valid,
            title: celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.tooltipText,
        };
    }
}
//# sourceMappingURL=cell.currency_line.js.map