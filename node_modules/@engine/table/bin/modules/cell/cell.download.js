import { DEFAUTL_LINK_TYPE, linkHandlerProvider } from '@engine/link';
import { AbstractTableCell } from './cell.abstract';
export class DownloadTableCell extends AbstractTableCell {
    toFullCell() {
        var _a;
        const { style, cell, celladvancedattr } = this.options;
        const cellText = ((_a = celladvancedattr) === null || _a === void 0 ? void 0 : _a.fileName) || '';
        const { contentStyle, borderStyle, backgroundStyle, paddingLeft, paddingRight, spacingBefore, spacingAfter, } = style;
        const hyperLinks = [linkHandlerProvider.getHandler({
                type: DEFAUTL_LINK_TYPE.DOWNLOAD,
                name: BI.UUID(),
                id: cell.attach_id,
            })];
        if (contentStyle) {
            contentStyle.underline = {
                width: 1,
                style: 'solid',
                color: '#0000ff',
                dash: [],
            };
            contentStyle.color = '#0000ff';
        }
        return {
            type: BI.AbsoluteLayout.xtype,
            items: [
                {
                    el: {
                        type: BI.Label.xtype,
                        style: contentStyle,
                        listeners: [
                            {
                                eventName: 'CELL_CLICK',
                                action: (e, x, y, cell) => {
                                    this.fireEvent('CELL_CLICK', { e, x, y, cell, hyperLinks, id: this.id });
                                    return true;
                                },
                            },
                        ],
                        text: cellText,
                        autoWrapInfo: cell.autoWrapInfo,
                    },
                    left: paddingLeft,
                    right: paddingRight,
                    top: spacingBefore,
                    bottom: spacingAfter,
                },
            ],
            listeners: [
                {
                    eventName: 'CELL_HOVER',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_HOVER', { e, x, y, cell });
                    },
                },
                {
                    eventName: 'CELL_MOUSE_LEAVE',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_MOUSE_LEAVE', { e, x, y, cell });
                    },
                },
                {
                    eventName: 'CELL_MOUSE_DOWN',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_MOUSE_DOWN', { e, x, y, cell });
                    },
                },
            ],
            backgroundStyle,
            borderStyle,
            value: cellText,
            position: cell.position,
            canCopy: true,
            cursor: 'pointer',
            valid: cell.valid,
            title: celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.tooltipText,
        };
    }
    // 不支持控件
    toWidget() {
        return undefined;
    }
}
//# sourceMappingURL=cell.download.js.map