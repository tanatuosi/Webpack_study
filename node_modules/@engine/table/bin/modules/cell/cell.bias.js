import { AbstractTableCell } from './cell.abstract';
export class BiasTableCell extends AbstractTableCell {
    toFullCell() {
        const { style, cell, hyperLinks, celladvancedattr } = this.options;
        const { texts = [], backslash = false } = cell;
        const { contentStyle, borderStyle, backgroundStyle } = style;
        const fontSize = BI.concat(parseInt(BI.get(contentStyle, 'fontSize'), 10) * 0.75, 'px');
        return {
            type: BI.AbsoluteLayout.xtype,
            bias: {
                texts,
                backslash,
            },
            style: Object.assign(Object.assign({}, contentStyle), { fontSize, defaultFontSize: fontSize }),
            borderStyle,
            backgroundStyle,
            listeners: [
                {
                    eventName: 'CELL_CLICK',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_CLICK', { e, x, y, cell, hyperLinks, id: this.id });
                        return true;
                    },
                },
                {
                    eventName: 'CELL_DOUBLE_CLICK',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_DOUBLE_CLICK', { e, x, y, cell, hyperLinks, id: this.id });
                        return true;
                    },
                },
                {
                    eventName: 'CELL_HOVER',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_HOVER', { e, x, y, cell });
                    },
                },
                {
                    eventName: 'CELL_MOUSE_LEAVE',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_MOUSE_LEAVE', { e, x, y, cell });
                    },
                },
                {
                    eventName: 'CELL_MOUSE_DOWN',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_MOUSE_DOWN', { e, x, y, cell });
                    },
                },
            ],
            value: (texts || []).join('|'),
            position: cell.position,
            title: celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.tooltipText,
        };
    }
    toWidget() {
        return undefined;
    }
    isDirectWidget() {
        return false;
    }
}
//# sourceMappingURL=cell.bias.js.map