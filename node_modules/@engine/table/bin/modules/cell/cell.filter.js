import jss from 'jss';
import jssGlobal from 'jss-plugin-global';
import jssNested from 'jss-plugin-nested';
import { getCompleteImageUrl } from '../table.service';
var type2DescriptionEnum;
(function (type2DescriptionEnum) {
    type2DescriptionEnum[type2DescriptionEnum["Fine-Engine_Sort_No_Order"] = 0] = "Fine-Engine_Sort_No_Order";
    type2DescriptionEnum[type2DescriptionEnum["Fine-Engine_Sort_Ascending_Order"] = 1] = "Fine-Engine_Sort_Ascending_Order";
    type2DescriptionEnum[type2DescriptionEnum["Fine-Engine_Sort_Descending_Order"] = 2] = "Fine-Engine_Sort_Descending_Order";
})(type2DescriptionEnum || (type2DescriptionEnum = {}));
/**
 * 创建排序表头
 */
export function transformCell2Filter() {
    if (!this.options.sortHeader)
        return;
    const { sortItems, headerArea, sortArea, index, direction, currentSortItem } = this.options.sortHeader;
    return {
        id: `${this.id}_filter`,
        init: e => {
            var _a;
            const iconSize = 16;
            let trigger;
            const leftIconCls = 'triangle-left-font', downIconCls = 'triangle-down-font';
            const iconClsMap = {};
            jss.use(jssGlobal(), jssNested());
            let currentIconCls = undefined;
            const items = sortItems.map(({ iconId, type }) => {
                const { classes } = jss.createStyleSheet({
                    icon: {
                        background: `url(${getCompleteImageUrl(iconId, true)}) no-repeat center center`,
                        'background-size': 'contain',
                    },
                }).attach();
                iconClsMap[iconId] = classes.icon;
                const description = BI.i18nText(type2DescriptionEnum[type]);
                return {
                    type: BI.DownListGroupItem.xtype,
                    cls: 'bi-list-item-active',
                    height: 24,
                    iconCls1: classes.icon,
                    iconCls2: '',
                    value: iconId,
                    text: description,
                    logic: {
                        dynamic: true,
                    },
                    seleted: currentSortItem === description,
                    listeners: [{
                            eventName: BI.DownListGroupItem.EVENT_CHANGE,
                            action: () => {
                                currentIconCls = classes.icon;
                                this.fireEvent('CELL_FILTER_CLICK', {
                                    e: {},
                                    x: 0,
                                    y: 0,
                                    cell: {},
                                    id: this.id,
                                    headerArea,
                                    sortArea,
                                    sortRule: type,
                                    index,
                                    direction,
                                });
                            },
                        }],
                };
            });
            const currentIcon = currentSortItem ? (_a = sortItems.find(item => item.description === currentSortItem)) === null || _a === void 0 ? void 0 : _a.iconId : undefined;
            currentIconCls = currentIcon ? iconClsMap[currentIcon] : undefined;
            let combo;
            BI.createWidget({
                element: e.el,
                type: BI.AbsoluteLayout.xtype,
                items: [{
                        el: {
                            type: BI.Combo.xtype,
                            ref: (ref) => {
                                combo = ref;
                            },
                            adjustLength: 2,
                            hideWhenAnotherComboOpen: true,
                            el: {
                                type: BI.IconChangeButton.xtype,
                                iconCls: currentIconCls || leftIconCls,
                                cls: 'icon-size-16',
                                width: iconSize,
                                height: iconSize,
                                ref: (_ref) => {
                                    trigger = _ref;
                                },
                            },
                            popup: {
                                minWidth: 80,
                                minHeight: 25,
                                maxHeight: 500,
                                el: {
                                    type: BI.ButtonGroup.xtype,
                                    items,
                                    layouts: [{
                                            type: BI.VerticalLayout.xtype,
                                        }],
                                },
                            },
                            listeners: [
                                {
                                    eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
                                    action: () => {
                                        trigger.setIcon(currentIconCls || downIconCls);
                                    },
                                },
                                {
                                    eventName: BI.Combo.EVENT_BEFORE_HIDEVIEW,
                                    action: () => {
                                        trigger.setIcon(currentIconCls || leftIconCls);
                                    },
                                },
                            ],
                        },
                        bottom: 1,
                        right: 0,
                        width: iconSize,
                        height: iconSize,
                    }],
            });
            combo === null || combo === void 0 ? void 0 : combo.element.mousedown((e) => {
                e.stopPropagation();
            });
            combo === null || combo === void 0 ? void 0 : combo.element.mouseup((e) => {
                e.stopPropagation();
            });
        },
        value: '',
    };
}
//# sourceMappingURL=cell.filter.js.map