import { getCompleteImageUrl, getImgLayout } from '../table.service';
import { AbstractTableCell } from './cell.abstract';
export class ImageCell extends AbstractTableCell {
    transform2ImageCell(style, url, layout) {
        var _a, _b;
        const { cell, hyperLinks } = this.options;
        const { borderStyle, backgroundStyle, paddingLeft, paddingRight, } = style;
        return {
            type: BI.AbsoluteLayout.xtype,
            items: [
                {
                    el: {
                        type: BI.AbsoluteLayout.xtype,
                        style: {
                            backgroundImage: url,
                            backgroundSize: layout,
                        },
                        listeners: [
                            {
                                eventName: 'CELL_CLICK',
                                action: (e, x, y, cell) => {
                                    this.fireEvent('CELL_CLICK', { e, x, y, cell, hyperLinks, id: this.id });
                                    return true;
                                },
                            },
                        ],
                    },
                    left: paddingLeft,
                    right: paddingRight,
                    top: 0,
                    bottom: 0,
                },
            ],
            listeners: [
                {
                    eventName: 'CELL_DOUBLE_CLICK',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_DOUBLE_CLICK', { e, x, y, cell, hyperLinks, id: this.id });
                        return true;
                    },
                },
                {
                    eventName: 'CELL_HOVER',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_HOVER', { e, x, y, cell });
                    },
                },
                {
                    eventName: 'CELL_MOUSE_LEAVE',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_MOUSE_LEAVE', { e, x, y, cell });
                    },
                },
                {
                    eventName: 'CELL_MOUSE_DOWN',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_MOUSE_DOWN', { e, x, y, cell });
                    },
                },
            ],
            borderStyle,
            backgroundStyle,
            position: cell.position,
            image: url,
            canCopy: ((_a = this.options.celladvancedattr) === null || _a === void 0 ? void 0 : _a.contentShowType) === 'SHOW_AS_IMAGE',
            cursor: this.options.hyperLinks.length === 0 ? 'default' : 'pointer',
            valid: cell.valid,
            title: (_b = this.options.celladvancedattr) === null || _b === void 0 ? void 0 : _b.tooltipText,
        };
    }
}
export class ImageTableCell extends ImageCell {
    toFullCell() {
        const { style, cell } = this.options;
        const { attachid = '', cache = false, imageLayout = 3, value } = cell;
        const layout = getImgLayout(imageLayout);
        return this.transform2ImageCell(style, value ? `data:image;base64,${value}` : getCompleteImageUrl(attachid, cache), layout);
    }
}
//# sourceMappingURL=cell.image.js.map