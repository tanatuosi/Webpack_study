import { cellControllerProvider } from './cell_controllers/cell_controller';
import { DirectCellController } from './cell_controllers/cell_controller_hoc/cell_controller_hoc.direct/cell_controller_hoc.direct';
import { IndirectCellController } from './cell_controllers/cell_controller_hoc/cell_controller_hoc.indirect/cell_controller_hoc.indirect';
/**
 * 根据cell创建widget
 * @param this 单元格类
 */
export function transformCell2Widget() {
    const { widget } = this.options;
    return widget
        ? {
            id: `${this.id}_cell_controllers`,
            init: (e, width, height, mount, isInRange) => {
                const hasWidget = !!this.cellControllerManager.getWidgetByName(this.id);
                if (this.isDirectWidget() || hasWidget) {
                    initWidget.apply(this, [e, width, height]);
                    isInRange
                        ? mount === null || mount === void 0 ? void 0 : mount()
                        : BI.defer(() => {
                            mount === null || mount === void 0 ? void 0 : mount();
                        });
                    return;
                }
                // 初始化时不创建
                this.cellControllerManager.addUninitializedWidget(this.id, {
                    init: () => {
                        initWidget.apply(this, [e, width, height]);
                    },
                    cellId: this.id,
                    dependenceMap: widget.dependenceMap || {},
                    cellWidgetName: widget.widgetName || '',
                }, mount);
            },
            value: '',
            lazy: true,
        }
        : undefined;
}
/**
 * 创建控件的函数
 * @param e dom
 * @param width 宽度
 * @param height 高度
 */
function initWidget(e, width, height) {
    const { widget, cell } = this.options;
    if (!widget)
        return;
    e.css('overflow', 'visible');
    let controller = this.cellControllerManager.getWidgetByName(this.id);
    const wraffleWidth = width - 1;
    const wraffleHeight = height - 1;
    const isControllerInitialized = !!controller;
    const alawysDirect = cellControllerProvider.isDirect(widget === null || widget === void 0 ? void 0 : widget.type);
    const isSlient = cellControllerProvider.isSlient(widget === null || widget === void 0 ? void 0 : widget.type);
    const controllerEventChangeName = cellControllerProvider.getEventChangeName(widget === null || widget === void 0 ? void 0 : widget.type);
    if (!controller) {
        controller = BI.createWidget({
            type: this.isDirectWidget()
                ? DirectCellController.xtype
                : IndirectCellController.xtype,
            text: this.getTextByCellValue(),
            /** 获取是否隐藏selectFrame */
            shouldHideSelectFrame: () => this.cellControllerManager.getHideSelectFrameSign(),
            cellId: this.id,
            dependence: widget.dependence,
            dependenceMap: widget.dependenceMap,
            reportIndex: widget.reportIndex,
            width: wraffleWidth,
            height: wraffleHeight,
            cellWidgetName: widget.widgetName,
            slient: isSlient,
            location: this.id,
            el: Object.assign(Object.assign({}, widget), { widgetName: '', cellWidgetName: widget.widgetName, type: cellControllerProvider.getType(widget.type), xtype: widget.type, width: wraffleWidth, height: wraffleHeight, position: {
                    column: cell.position.x,
                    row: cell.position.y,
                }, location: this.id, value: widget.value, getWidgetDependenceValueByWidget: () => {
                    const dependence = widget.dependence || [];
                    const dependenceMap = widget.dependenceMap || {};
                    return dependence.reduce((result, depCellId) => {
                        const realId = dependenceMap[depCellId];
                        if (!realId) {
                            return result;
                        }
                        const v = this.external.getDependenceValueById(realId);
                        result[depCellId.toUpperCase()] = v;
                        return result;
                    }, {});
                }, getDependenceByWidget: () => widget.dependence || [], 
                // 这是一段很恶心的代码
                // 那么对应什么场景呢？
                // 填报中类似afteredit这类事件后，触发入库
                // 不先执行event_change，就无法写入dirtycell，入库时就获取不到
                // 赶紧来个神通收了这段代码吧
                listeners: (controllerEventChangeName
                    ? [{
                            eventName: controllerEventChangeName,
                            action() {
                                this.fireEvent('EVENT_CHANGE', () => {
                                    this.fireEvent(`_${controllerEventChangeName}`);
                                });
                                return false;
                            },
                        }]
                    : [])
                    .concat((widget.listeners || [])
                    .concat([{
                        eventName: 'EVENT_CHANGE',
                        action: (callback) => {
                            if (alawysDirect) {
                                const validation = controller.validateAndMsgToast(this.id);
                                !validation && controller.reset();
                            }
                            const promises = this.fireEvent('CELL_WIDGET_CHANGE', {
                                e: {},
                                cell: {},
                                x: cell.position.x,
                                y: cell.position.y,
                                value: controller.getValue(),
                                id: this.id,
                                direct: alawysDirect,
                            });
                            Promise.all(promises)
                                .then(() => {
                                /**
                                 * 加个保险确保callback一定是函数，解决控制台报错
                                 * 修复 https://work.fineres.com/browse/REPORT-72256 引入
                                 */
                                BI.isFunction(callback) && callback();
                            });
                        },
                    }])
                    .map(listener => {
                    return Object.assign(Object.assign({}, listener), { eventName: controllerEventChangeName
                            ? listener.eventName === controllerEventChangeName ? `_${controllerEventChangeName}` : listener.eventName
                            : listener.eventName });
                })) }),
            listeners: [{
                    eventName: IndirectCellController.EVENT_OPEN,
                    action: () => {
                        this.fireEvent('CELL_DOUBLE_CLICK', {
                            e: {},
                            x: cell.position.x,
                            y: cell.position.y,
                            id: this.id,
                            cell: {
                                position: {
                                    x: cell.position.x,
                                    y: cell.position.y,
                                },
                                ri: 0,
                                ci: 0,
                                x: cell.position.x,
                                y: cell.position.y,
                                width,
                                height,
                            },
                        });
                    },
                }],
        });
        this.cellControllerManager.register(controller, this.id);
    }
    else {
        controller.setText(this.getTextByCellValue());
        controller.resize(wraffleWidth, wraffleHeight);
    }
    const layout = BI.createWidget({
        type: BI.DefaultLayout.xtype,
        element: e.el,
        items: [{
                type: BI.AbsoluteLayout.xtype,
                items: [
                    !isControllerInitialized
                        ? {
                            el: controller,
                            top: 1,
                            left: 1,
                            right: 0,
                            bottom: 0,
                        }
                        : {
                            el: {
                                type: BI.DefaultLayout.xtype,
                                mounted() {
                                    BI.mount(controller, this.element[0]);
                                },
                            },
                            top: 0,
                            left: 0,
                            right: 0,
                            bottom: 0,
                        },
                    ...this.getStateWidgetJson(wraffleWidth, wraffleHeight),
                ],
            }],
    });
    // 如果控件显示着，则waffle点击事件不冒泡
    layout.element.mousedown((e) => {
        (controller === null || controller === void 0 ? void 0 : controller.isActive()) && e.stopPropagation();
    });
    // 如果控件显示着，则waffle点击事件不冒泡
    layout.element.mouseup((e) => {
        (controller === null || controller === void 0 ? void 0 : controller.isActive()) && e.stopPropagation();
    });
    // 如果控件显示着，则waffle点击事件不冒泡
    layout.element.mousewheel((e) => {
        ((controller === null || controller === void 0 ? void 0 : controller.isActive()) || alawysDirect) && e.stopPropagation();
    });
}
//# sourceMappingURL=cell.widget.js.map