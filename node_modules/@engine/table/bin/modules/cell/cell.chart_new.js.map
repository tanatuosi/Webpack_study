{"version":3,"file":"cell.chart_new.js","sourceRoot":"","sources":["../../../src/modules/cell/cell.chart_new.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AAGzE,OAAO,EAAE,sBAAsB,EAAE,MAAM,cAAc,CAAC;AAEtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAC;AAG/D,OAAO,EAAE,iBAAiB,EAAY,MAAM,iBAAiB,CAAC;AAE9D,MAAM,OAAO,YAAa,SAAQ,iBAAiB;IAK/C,YAAmB,IAAwB,EAAE,QAA8B;QACvE,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAHlB,kBAAa,GAAG,KAAK,CAAC;QAK1B,IAAI,CAAC,gBAAgB,GAAiC,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,gBAAgB,EAAE,CAAC;QAEhJ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QAEtD,QAAQ,CAAC,kBAAkB,EAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACpF,CAAC;IAEO,KAAK,CAAC,YAAY,CAAC,GAI1B;QAOG,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,uBAAuB,EAAE;YACrD,CAAC,EAAS,EAAE;YACZ,IAAI,EAAQ,EAAE;YACd,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/B,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/B,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,aAAa,EAAE,GAAG;SACI,CAAC,CAAC;QAE5B,IAAI,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACzB,OAAO,EAAE,CAAC;SACb;QAED,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAES,UAAU;QAChB,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QACvD,MAAM,EACF,WAAW,EACX,eAAe,GAClB,GAAG,KAAK,CAAC;QAGV,OAAO;YACH,IAAI,EAAE,EAAE,CAAC,cAAc,CAAC,KAAK;YAC7B,WAAW;YACX,eAAe;YACf,eAAe,EAAE,IAAI;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,KAAK,EAAE,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,WAAW;SACvC,CAAC;IACN,CAAC;IAEM,MAAM;QACT,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,OAA4B,CAAC;QACnD,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,GAAkF,IAAI,CAAC;QACxH,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;QAEjD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC;QACpE,IAAI,GAAwB,CAAC;QAE7B,OAAO;YACH,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE,OAAO;YACrB,KAAK,EAAE,EAAE;YACT,IAAI,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;gBAC7B,IAAI,CAAC,OAAO,EAAE;oBACV,OAAO;iBACV;gBAED,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC;gBAEhD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC;gBAC9C,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC;gBAChD,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEpE,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;gBAE3D,MAAM,kBAAkB,GAAG,CAAC,CAAC,KAAK,CAAC;gBAEnC,IAAI,CAAC,KAAK,EAAE;oBACR,KAAK,GAAG,EAAE,CAAC,YAAY,CAAC;wBACpB,IAAI,EAAE,mBAAmB,CAAC,KAAK;wBAC/B,KAAK;wBACL,MAAM;wBACN,MAAM;wBACN,MAAM;wBACN,SAAS;wBACT,eAAe,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC;4BAC3C,OAAO;4BACP,UAAU,EAAE,UAAU;yBACzB,CAAC;6BACG,IAAI,CAAC,KAAK,CAAC,EAAE;4BACV,uCACO,KAAK,KACR,OAAO,IACT;wBACN,CAAC,CAAC;wBACN,sBAAsB,EAAE,eAAe,CAAC,EAAE,CAAC,sBAAsB,CAAC,eAAe,EAAE;4BAC/E,cAAc,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE;yBAC3D,CAAC;wBACF,SAAS,EAAE,CAAC;gCACR,SAAS,EAAE,mBAAmB,CAAC,YAAY;gCAC3C,MAAM,EAAE,GAAG,EAAE;oCACT,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;oCAEzE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;wCAC3B,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;qCAC/B;gCACL,CAAC;6BACJ,CAAC;qBACoC,CAAC,CAAC;oBAE5C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAM,EAAE,OAAO,CAAC,CAAC;iBACnD;gBAED,EAAE,CAAC,YAAY,CAAC;oBACZ,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK;oBAC5B,OAAO,EAAE,OAAO,CAAC,EAAE;oBACnB,KAAK,EAAE,CAAC;4BACJ,IAAI,EAAE,EAAE,CAAC,cAAc,CAAC,KAAK;4BAC7B,KAAK,EAAE;gCACH,CAAC,kBAAkB;oCACf,CAAC,CAAC;wCACE,EAAE,EAAE,KAAK;wCACT,GAAG,EAAE,CAAC;wCACN,IAAI,EAAE,CAAC;wCACP,KAAK,EAAE,CAAC;wCACR,MAAM,EAAE,CAAC;qCACZ;oCACD,CAAC,CAAC;wCACE,EAAE,EAAE;4CACA,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK;4CAC5B,OAAO;gDACH,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gDAEjC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gDAC5B,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gDAE9B,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;4CAC7C,CAAC;yCACJ;wCACD,GAAG,EAAE,CAAC;wCACN,IAAI,EAAE,CAAC;wCACP,KAAK,EAAE,CAAC;wCACR,MAAM,EAAE,CAAC;qCACZ;6BACR;yBACJ,CAAC;iBACL,CAAC,CAAC;YACP,CAAC;SACJ,CAAC;IACN,CAAC;IAED,QAAQ;IACD,QAAQ;QACX,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,UAAU;IACH,OAAO;QACV,OAAO,SAAS,CAAC;IACrB,CAAC;CACJ","sourcesContent":["import { AbstractReportChart, reportChartProvider } from '@engine/chart';\nimport { DefaultLayout } from '@fui/core';\nimport { Cell } from '@fui/sheet/types';\nimport { instantiateXHyperLinks } from '@engine/link';\nimport { CellType } from '../table.types';\nimport { CellChartManager } from '../table.cell_chart_manager';\nimport { TableExternalContext } from '../table.cell_generator';\nimport { Transform2CellArgs } from './cell';\nimport { AbstractTableCell, CellHtml } from './cell.abstract';\n\nexport class ChartNewCell extends AbstractTableCell {\n    private cellChartManager: CellChartManager;\n\n    private fontResizable = false;\n\n    public constructor(opts: Transform2CellArgs, external: TableExternalContext) {\n        super(opts, external);\n\n        this.cellChartManager = <CellChartManager | undefined>(this.external.getStickerManagers().get(CellChartManager.NAME)) || new CellChartManager();\n\n        this.fontResizable = this.external.getFontResizable();\n\n        external.getStickerManagers().set(CellChartManager.NAME, this.cellChartManager);\n    }\n\n    private async getChartData(opt: {\n        [key: string]: any;\n        chartID: string;\n        widgetName?: string | undefined;\n    }): Promise<{\n            chartAttr: any;\n            chartID: string;\n        } | {\n            errorCode: string;\n            errorMsg: string;\n        }[]> {\n        const promises = this.fireEvent('CELL_CHART_FETCH_DATA', {\n            e: <Event>{},\n            cell: <Cell>{},\n            x: this.options.cell.position.x,\n            y: this.options.cell.position.y,\n            id: this.id,\n            requestParams: opt,\n        } as ChartNewCellEventArgs);\n\n        if (BI.size(promises) === 0) {\n            return [];\n        }\n\n        return BI.last(promises);\n    }\n\n    protected toFullCell(): CellType {\n        const { style, cell, celladvancedattr } = this.options;\n        const {\n            borderStyle,\n            backgroundStyle,\n        } = style;\n\n\n        return {\n            type: BI.AbsoluteLayout.xtype,\n            borderStyle,\n            backgroundStyle,\n            stopPropagation: true,\n            position: cell.position,\n            title: celladvancedattr?.tooltipText,\n        };\n    }\n\n    public toHtml(): CellHtml {\n        const { cell } = this.options as ChartNewCellProps;\n        const { chartHeight, chartWidth } = <ChartNewCell['options']['cell'] & { chartWidth: number; chartHeight: number }>cell;\n        const reportName = this.external.getWidgetName();\n\n        const chartID = cell.items ? cell.items[0].simpleChartInShowID : '';\n        let ref: AbstractReportChart;\n\n        return {\n            id: `${this.id}_html`,\n            value: '',\n            init: (element, width, height) => {\n                if (!element) {\n                    return;\n                }\n\n                element.css('cursor', cell.cursor || 'default');\n\n                const wScale = Math.round(width) / chartWidth;\n                const hScale = Math.round(height) / chartHeight;\n                const fontScale = this.fontResizable ? Math.min(wScale, hScale) : 1;\n\n                let chart = this.cellChartManager.getWidgetByName(chartID);\n\n                const isChartInitialized = !!chart;\n\n                if (!chart) {\n                    chart = BI.createWidget({\n                        type: reportChartProvider.xtype,\n                        width,\n                        height,\n                        wScale,\n                        hScale,\n                        fontScale,\n                        chartAttrGetter: async () => this.getChartData({\n                            chartID,\n                            widgetName: reportName,\n                        })\n                            .then(chart => {\n                                return {\n                                    ...chart,\n                                    chartID,\n                                };\n                            }),\n                        instantiateXHyperLinks: javaScriptGroup => instantiateXHyperLinks(javaScriptGroup, {\n                            managersGetter: () => this.external.getStickerManagers(),\n                        }),\n                        listeners: [{\n                            eventName: AbstractReportChart.EVENT_LOADED,\n                            action: () => {\n                                const params = this.cellChartManager.getParameterCacheByChartID(chartID);\n    \n                                if (!BI.isEmptyObject(params)) {\n                                    ref.changeParameter(params);\n                                }\n                            },\n                        }],\n                    } as Partial<AbstractReportChart['props']>);\n\n                    this.cellChartManager.register(chart!, chartID);\n                }\n\n                BI.createWidget({\n                    type: BI.DefaultLayout.xtype,\n                    element: element.el,\n                    items: [{\n                        type: BI.AbsoluteLayout.xtype,\n                        items: [\n                            !isChartInitialized\n                                ? {\n                                    el: chart,\n                                    top: 0,\n                                    left: 0,\n                                    right: 0,\n                                    bottom: 0,\n                                }\n                                : {\n                                    el: {\n                                        type: BI.DefaultLayout.xtype,\n                                        mounted(this: DefaultLayout) {\n                                            BI.mount(chart, this.element[0]);\n\n                                            chart?.element.width(width);\n                                            chart?.element.height(height);\n\n                                            chart?.resize(wScale, hScale, fontScale);\n                                        },\n                                    },\n                                    top: 0,\n                                    left: 0,\n                                    right: 0,\n                                    bottom: 0,\n                                },\n                        ],\n                    }],\n                });\n            },\n        };\n    }\n\n    // 不支持控件\n    public toWidget() {\n        return undefined;\n    }\n\n    // 不支持状态标记\n    public toState() {\n        return undefined;\n    }\n}\n\ntype ChartNewCellProps = Transform2CellArgs & {\n    cell: {\n        items?: {\n            simpleChartInShowID: 'string';\n        }[];\n    }\n}\n\nexport type ChartNewCellEventArgs = Parameters<AbstractTableCell['fireEvent']>[1] & {\n    requestParams: { [key: string]: any; chartID: string; widgetName?: string | undefined; };\n}\n"]}