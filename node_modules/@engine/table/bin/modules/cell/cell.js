import { DEFAULT_TABLE_CELL_TYPE } from '../table.constants';
import { BiasTableCell } from './cell.bias';
import { ChartNewCell } from './cell.chart_new';
import { CurrencyLineTableCell } from './cell.currency_line';
import { DownloadTableCell } from './cell.download';
import { ImageTableCell } from './cell.image';
import { NodeTableCell } from './cell.node';
import { TextTableCell } from './cell.text';
import { WebImageTableCell } from './cell.webimage';
export function transformCellTypeByOpts(opts) {
    const { celladvancedattr, cell } = opts;
    if ((celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.contentShowType) === 'SHOW_AS_DOWNLOAD') {
        return DEFAULT_TABLE_CELL_TYPE.DOWNLOAD;
    }
    if (celladvancedattr && !celladvancedattr.previewContent) {
        return DEFAULT_TABLE_CELL_TYPE.BIAS;
    }
    return cell.type;
}
export class TableCellTypeProvider {
    constructor() {
        this.typeTransformer = transformCellTypeByOpts;
    }
    transform(opts) {
        return this.typeTransformer(opts);
    }
    use(fn) {
        this.typeTransformer = fn;
    }
}
export const tableCellTypeProvider = new TableCellTypeProvider();
export class TableCellProvider {
    constructor() {
        this.cellDict = {
            [DEFAULT_TABLE_CELL_TYPE.BIAS]: BiasTableCell,
            [DEFAULT_TABLE_CELL_TYPE.SIMPLE_CHART]: ChartNewCell,
            [DEFAULT_TABLE_CELL_TYPE.currency_LINE]: CurrencyLineTableCell,
            [DEFAULT_TABLE_CELL_TYPE.IMAGE]: ImageTableCell,
            [DEFAULT_TABLE_CELL_TYPE.WEBIMAGE]: WebImageTableCell,
            [DEFAULT_TABLE_CELL_TYPE.TEXT]: TextTableCell,
            [DEFAULT_TABLE_CELL_TYPE.NODE]: NodeTableCell,
            [DEFAULT_TABLE_CELL_TYPE.DOWNLOAD]: DownloadTableCell,
        };
    }
    get(opts, external) {
        const key = tableCellTypeProvider.transform(opts);
        const Cell = key in this.cellDict ? this.cellDict[key] : this.cellDict.bias;
        return new Cell(opts, external);
    }
    set(key, value) {
        this.cellDict[key] = value;
    }
}
export const tableCellProvider = new TableCellProvider();
//# sourceMappingURL=cell.js.map