{"version":3,"file":"cell_controller.checkbox.js","sourceRoot":"","sources":["../../../../../src/modules/cell/cell_controllers/checkbox/cell_controller.checkbox.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,iBAAiB,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AACtE,OAAO,EAAc,QAAQ,EAAE,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,qCAAqC,EAAE,MAAM,6BAA6B,CAAC;AAGpF,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,qCAAqC;IAAvE;;QAGW,UAAK,GAWR;YACA,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,CAAC;YACd,QAAQ,EAAE;gBACN,GAAG,EAAE,CAAC;gBACN,MAAM,EAAE,CAAC;aACZ;YACD,UAAU,EAAE,EAAE;YACd,OAAO,EAAE,EAAE;SACd,CAAA;IA8CL,CAAC;IA1CU,MAAM;QACT,MAAM,KAA0D,IAAI,CAAC,OAAO,EAAtE,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,OAA0B,EAArB,IAAI,cAArD,oDAAuD,CAAe,CAAC;QAE7E,OAAO,gCACA,IAAI,KACP,IAAI,EAAE,iBAAiB,CAAC,KAAK,EAC7B,GAAG,EAAE,CAAC,GAAsB,EAAE,EAAE;gBAC5B,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;YACxB,CAAC,EACD,SAAS,EAAE,UAAU,GACxB,CAAC;IACN,CAAC;IAEM,oBAAoB;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;IAChD,CAAC;IAEM,gBAAgB;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;IAC5C,CAAC;IAEM,iBAAiB;QACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC;IAC7C,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IACpC,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,KAAU;QACtC,MAAM,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAEM,gBAAgB,CAAC,CAAS;QAC7B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IAEM,QAAQ,KAAI,CAAC;CACvB,CAAA;AAtEiB,kBAAK,GAAG,4CAA4C,CAAC;AAD1D,YAAY;IADxB,QAAQ,EAAE;GACE,YAAY,CAuExB;SAvEY,YAAY","sourcesContent":["import { HEIGHT, ParameterCheckbox, WIDTH } from '@engine/controller';\nimport { FrListener, shortcut } from '@engine/core';\nimport { AbstractParameterCellControllerWidget } from '../cell_controller.abstract';\n\n@shortcut()\nexport class CellCheckBox extends AbstractParameterCellControllerWidget {\n    public static xtype = 'report.main.table_cell.controller.checkbox';\n\n    public props: {\n        position: {\n            row: number;\n            column: number;\n        };\n        reportIndex: number;\n        xlisteners: FrListener[];\n        width: number;\n        height: number;\n        fontSize: number;\n        baseCls: string;\n    } = {\n        width: WIDTH,\n        height: HEIGHT,\n        fontSize: 12,\n        reportIndex: 0,\n        position: {\n            row: 0,\n            column: 0,\n        },\n        xlisteners: [],\n        baseCls: '',\n    }\n\n    private checkbox: ParameterCheckbox;\n\n    public render() {\n        const { xlisteners, position, reportIndex, baseCls, ...opts } = this.options;\n\n        return <Partial<ParameterCheckbox['props']>>{\n            ...opts,\n            type: ParameterCheckbox.xtype,\n            ref: (ref: ParameterCheckbox) => {\n                this.checkbox = ref;\n            },\n            listeners: xlisteners,\n        };\n    }\n\n    public postValidateAndToast() {\n        return this.checkbox.postValidateAndToast();\n    }\n\n    public preGetValidation() {\n        return this.checkbox.preGetValidation();\n    }\n\n    public postGetValidation() {\n        return this.checkbox.postGetValidation();\n    }\n\n    public getValue() {\n        return this.checkbox.getValue();\n    }\n\n    public async setControllerValue(value: any) {\n        await this.checkbox.setControllerValue(value);\n    }\n\n    public setInteractValue(v: string) {\n        this.checkbox.setInteractValue(v);\n    }\n\n    public reset() {\n        this.checkbox.reset();\n    }\n\n    public setStyle() {}\n}\n"]}