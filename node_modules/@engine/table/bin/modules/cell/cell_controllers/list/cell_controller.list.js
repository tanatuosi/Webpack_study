var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { HEIGHT, WIDTH } from '@engine/controller';
import { shortcut } from '@engine/core';
import { AbstractParameterCellControllerWidget } from '../cell_controller.abstract';
import { fetchCellGroupControlAttr } from '../cell_controller.crud';
let CellList = class CellList extends AbstractParameterCellControllerWidget {
    constructor() {
        super(...arguments);
        this.props = {
            width: WIDTH,
            height: HEIGHT,
            fontSize: 12,
            value: '',
            needSubmit: false,
            disabled: false,
            invisible: false,
            allowBlank: true,
            errorMsg: BI.i18nText('Fine-Report_Preview_Can_Not_Null'),
            controlAttr: {
                data: [],
                value: '',
            },
            needHead: false,
            widgetName: '',
            reportIndex: 0,
            position: {
                row: 0,
                column: 0,
            },
        };
    }
    render() {
        const { needHead } = this.options;
        return {
            type: BI.AbsoluteLayout.xtype,
            items: [{
                    el: {
                        type: BI.VerticalLayout.xtype,
                        items: [{
                                type: BI.CenterAdaptLayout.xtype,
                                cls: 'bi-background',
                                items: [{
                                        type: BI.ButtonGroup.xtype,
                                        layouts: [{
                                                type: BI.VerticalAdaptLayout.xtype,
                                                hgap: 2,
                                            }],
                                        items: [{
                                                type: BI.IconButton.xtype,
                                                cls: 'list-add-font report-list-item-active icon-size-16',
                                                handler: () => {
                                                    const name = window.prompt(BI.i18nText('Fine-Report_Input'));
                                                    if (BI.isNull(name) || BI.isEmptyString(name)) {
                                                        BI.Msg.toast(BI.i18nText('Fine-Report_Name_Empty'));
                                                    }
                                                    else {
                                                        this.addItemByValue(name);
                                                    }
                                                },
                                            }, {
                                                type: BI.IconButton.xtype,
                                                cls: 'list-delete-font report-list-item-active icon-size-16',
                                                handler: () => {
                                                    this.removeSelectedItem();
                                                },
                                            }, {
                                                type: BI.IconButton.xtype,
                                                cls: 'list-rename-font report-list-item-active icon-size-16',
                                                handler: () => {
                                                    const selectIndex = this.getSelectedIndex();
                                                    if (selectIndex === -1) {
                                                        BI.Msg.toast(BI.i18nText('Fine-Report_Item_Not_Selected'));
                                                        return;
                                                    }
                                                    const button = this.pane.getAllButtons()[selectIndex];
                                                    const name = button.attr('text');
                                                    const newName = window.prompt('Rename:', name);
                                                    if (BI.isNull(newName) || BI.isEmptyString(newName)) {
                                                        this.removeSelectedItem();
                                                        return;
                                                    }
                                                    button.setText(newName);
                                                    this.options.controlAttr.data[selectIndex].text = newName;
                                                },
                                            }],
                                        invisible: !needHead,
                                        height: 20,
                                    }],
                            }, {
                                type: BI.ListPane.xtype,
                                ref: (_ref) => {
                                    this.pane = _ref;
                                },
                                items: this.getGroupItems(),
                                el: {
                                    type: BI.ButtonGroup.xtype,
                                    chooseType: BI.Selection.None,
                                    layouts: [{
                                            type: BI.VerticalLayout.xtype,
                                        }],
                                },
                            }],
                    },
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                }],
            invisible: !this.postGetValidation().result,
        };
    }
    removeSelectedItem() {
        const selectIndex = this.getSelectedIndex();
        if (selectIndex === -1) {
            BI.Msg.toast(BI.i18nText('Fine-Report_Item_Not_Selected'));
            return;
        }
        this.pane.removeItemAt(selectIndex);
        this.options.controlAttr.data.splice(selectIndex, 1);
    }
    getSelectedIndex() {
        return this.pane.getAllButtons()
            .findIndex(item => item.isSelected());
    }
    addItemByValue(v) {
        this.pane.addItems(this.createItems([{ text: v, value: v }]));
        this.options.controlAttr.data.push({ text: v, value: v });
    }
    beforeInit(cb) {
        this.getGroupControlAttr()
            .then(() => cb());
    }
    getGroupItems() {
        return this.createItems(this.options.controlAttr.data);
    }
    getGroupControlAttr() {
        const { widgetName } = this.options;
        return fetchCellGroupControlAttr(widgetName, this.getRequestOpts())
            .then(res => {
            this.options.controlAttr = {
                data: res,
                value: this.options.value,
            };
        });
    }
    getRequestOpts() {
        const { position, reportIndex } = this.options;
        return {
            location: Object.assign(Object.assign({}, position), { reportIndex }),
        };
    }
    getValue() {
        var _a;
        return ((_a = this.pane.getAllButtons()
            .find(item => item.isSelected())) === null || _a === void 0 ? void 0 : _a.getValue()) || '';
    }
    async setControllerValue($v = '') {
        const v = `${$v}`;
        const buttons = this.pane.getAllButtons();
        buttons.forEach(button => {
            button.setSelected(false);
        });
        let isSelected = buttons.some(button => {
            if (`${button.getValue()}` === `${v}`) {
                button.setSelected(true);
                return true;
            }
            return false;
        });
        if (!isSelected) {
            isSelected = buttons.some(button => {
                if (`${button.attr('text')}` === `${v}`) {
                    button.setSelected(true);
                    return true;
                }
                return false;
            });
        }
        if (!isSelected && v) {
            this.addItemByValue(v);
        }
    }
    setInteractValue() { }
    reset() {
        // 恢复初始状态
        const buttons = this.pane.getAllButtons();
        buttons.forEach(button => {
            button.setSelected(false);
        });
    }
    reloadControlAttr() {
        this.getGroupControlAttr()
            .then(() => {
            this.pane.populate(this.getGroupItems());
        });
    }
    preGetValidation() {
        return { result: true };
    }
    postGetValidation() {
        const { errorMsg } = this.options;
        const value = `${this.getGroupItems()}` || '';
        if (BI.isNull(value) || BI.isEmptyString(value)) {
            return {
                result: false,
                errorMsg,
            };
        }
        return { result: true };
    }
    postValidateAndToast() {
        return true;
    }
    createItems(items) {
        return items.map(item => {
            let singleItem;
            return Object.assign(Object.assign({}, item), { type: BI.SingleSelectItem.xtype, ref: (_ref) => {
                    singleItem = _ref;
                }, cls: 'bi-list-item-active2', height: 12, listeners: [{
                        eventName: BI.SingleSelectItem.EVENT_CHANGE,
                        action: () => {
                            this.pane.getAllButtons()
                                .forEach(button => {
                                button.setSelected(false);
                            });
                            singleItem.setSelected(true);
                        },
                    }] });
        });
    }
    setStyle() { }
};
CellList.xtype = 'report.main.table_cell.controller.list';
CellList = __decorate([
    shortcut()
], CellList);
export { CellList };
//# sourceMappingURL=cell_controller.list.js.map