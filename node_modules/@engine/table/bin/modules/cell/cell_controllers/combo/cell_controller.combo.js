var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { HEIGHT, ParameterComboNext, WIDTH } from '@engine/controller';
import { shortcut } from '@engine/core';
import { AbstractParameterCellControllerWidget } from '../cell_controller.abstract';
import { fetchCellComboControlAttr, fetchCellWidgetViewValue } from '../cell_controller.crud';
let CellCombo = class CellCombo extends AbstractParameterCellControllerWidget {
    constructor() {
        super(...arguments);
        this.props = {
            width: WIDTH,
            height: HEIGHT,
            fontSize: 12,
            reportIndex: 0,
            position: {
                row: 0,
                column: 0,
            },
            xlisteners: [],
            baseCls: '',
        };
    }
    render() {
        const _a = this.options, { xlisteners, position, reportIndex, baseCls } = _a, opts = __rest(_a, ["xlisteners", "position", "reportIndex", "baseCls"]);
        return Object.assign(Object.assign({}, opts), { allowCount: true, type: ParameterComboNext.xtype, ref: (ref) => {
                this.combo = ref;
            }, listeners: xlisteners, needCheckCustomData: false, controlAttrFetcher: fetchCellComboControlAttr, extraOptsGetter: () => {
                return {
                    location: Object.assign(Object.assign({}, position), { reportIndex }),
                };
            }, viewValueFetcher: fetchCellWidgetViewValue, beforeRender(cb) {
                this.updateControllAttrByValue(this.options.value)
                    .then(() => cb());
            } });
    }
    // 复写父类不触发afterinit事件
    mounted() { }
    getValue() {
        return this.combo.getValue();
    }
    postGetValidation() {
        return this.combo.postGetValidation();
    }
    preGetValidation() {
        return this.combo.preGetValidation();
    }
    async setControllerValue(v, controlData) {
        await this.combo.setControllerValue(v, controlData);
    }
    reset() {
        this.combo.reset();
    }
    postValidateAndToast() {
        return this.combo.postValidateAndToast();
    }
    setInteractValue(v) {
        this.combo.setInteractValue(v);
    }
    reloadControlAttr() {
        this.combo.reloadControlAttr();
    }
    getAdapter() {
        return this.combo.getAdapter();
    }
    setStyle() { }
    focus() {
        this.combo.focus();
    }
    blur() {
        this.combo.blur();
    }
};
CellCombo.xtype = 'report.main.table_cell.controller.combo';
CellCombo = __decorate([
    shortcut()
], CellCombo);
export { CellCombo };
//# sourceMappingURL=cell_controller.combo.js.map