var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { controllerProvider, ParameterEmpty, ParameterPassword } from '@engine/controller';
import { provider } from '@engine/core';
import { CellButton } from './button/cell_controller.button';
import { CellCheckBox } from './checkbox/cell_controller.checkbox';
import { CellCheckboxGroup } from './checkbox_group/cell_controller.checkbox_group';
import { CellCombo } from './combo/cell_controller.combo';
import { CellDatetime } from './datetime/cell_controller.datetime';
import { CellIframe } from './iframe/cell_controller.iframe';
import { CellList } from './list/cell_controller.list';
import { CellMultifile } from './multifile/cell_controller.multifile';
import { CellNumber } from './number/cell_controller.number';
import { CellRadioGroup } from './radio_group/cell_controller.radio_group';
import { CellTagComboCheckbox } from './tag_combo_checkbox/cell_controller.tag_combo_checkbox';
import { CellTree } from './tree/cell_controller.tree';
import { CellTreeComboBox } from './tree_combo_box/cell_controller.tree_combo_box';
class CellControllerProvider {
    constructor() {
        this.controllerDict = new Map([
            ['combo', { type: CellCombo.xtype, slient: true }],
            ['tagcombocheckbox', { type: CellTagComboCheckbox.xtype, slient: true }],
            ['combocheckbox', { type: CellTagComboCheckbox.xtype, slient: true }],
            ['button', { type: CellButton.xtype, direct: true, slient: true }],
            ['freebutton', { type: CellButton.xtype, direct: true, slient: true }],
            ['formsubmit', { type: CellButton.xtype, direct: true, slient: true }],
            ['radiogroup', { type: CellRadioGroup.xtype, direct: true, slient: true }],
            ['checkboxgroup', { type: CellCheckboxGroup.xtype, direct: true, slient: true }],
            ['checkbox', { type: CellCheckBox.xtype, direct: true, slient: true }],
            ['iframe', { type: CellIframe.xtype, direct: true }],
            ['password', { type: ParameterPassword.xtype, transformer: v => v.replaceAll(/./g, () => '*') }],
            ['datetime', { type: CellDatetime.xtype, slient: true }],
            ['treecombobox', { type: CellTreeComboBox.xtype, slient: true }],
            ['tree', { type: CellTree.xtype, direct: true, slient: true }],
            ['list', { type: CellList.xtype, direct: true }],
            ['number', { type: CellNumber.xtype, slient: true }],
            ['multifile', { type: CellMultifile.xtype, slient: true }],
        ]);
        /**
         * EVENT_CHANGE对应的绑定事件，即A事件后必发EVENT_CHANGE
         */
        this.controllerEventChangeDict = new Map([
            ['combo', 'stopedit'],
            ['tagcombocheckbox', 'stopedit'],
            ['combocheckbox', 'stopedit'],
            ['radiogroup', 'statechange'],
            ['checkboxgroup', 'statechange'],
            ['checkbox', 'statechange'],
            ['password', 'afteredit'],
            ['datetime', 'stopedit'],
            ['number', 'afteredit'],
            ['text', 'afteredit'],
            ['textarea', 'afteredit'],
        ]);
    }
    getType(key) {
        var _a;
        return ((_a = this.controllerDict.get(key)) === null || _a === void 0 ? void 0 : _a.type) || controllerProvider.get(key);
    }
    isDirect(key) {
        var _a;
        return ((_a = this.controllerDict.get(key)) === null || _a === void 0 ? void 0 : _a.direct) || false;
    }
    set(key, value, direct) {
        this.controllerDict.set(key, {
            type: value,
            direct,
        });
    }
    getImpl() {
        return ParameterEmpty;
    }
    getTextTransformer(type) {
        var _a;
        return type && ((_a = this.controllerDict.get(type)) === null || _a === void 0 ? void 0 : _a.transformer) || function (v) {
            return v;
        };
    }
    isSlient(key) {
        var _a;
        return ((_a = this.controllerDict.get(key)) === null || _a === void 0 ? void 0 : _a.slient) === true;
    }
    getEventChangeName(type) {
        return this.controllerEventChangeDict.get(type);
    }
}
let ReportCellControllerProvider = class ReportCellControllerProvider {
    $get() {
        return CellControllerProvider;
    }
};
ReportCellControllerProvider.xtype = 'report.cell.controller.provider';
ReportCellControllerProvider = __decorate([
    provider()
], ReportCellControllerProvider);
export const cellControllerProvider = BI.Providers.getProvider(ReportCellControllerProvider.xtype);
//# sourceMappingURL=cell_controller.js.map