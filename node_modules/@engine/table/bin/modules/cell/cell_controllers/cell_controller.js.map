{"version":3,"file":"cell_controller.js","sourceRoot":"","sources":["../../../../src/modules/cell/cell_controllers/cell_controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { controllerProvider, ParameterEmpty, ParameterPassword } from '@engine/controller';\nimport { provider } from '@engine/core';\nimport { CellButton } from './button/cell_controller.button';\nimport { CellCheckBox } from './checkbox/cell_controller.checkbox';\nimport { CellCheckboxGroup } from './checkbox_group/cell_controller.checkbox_group';\nimport { CellCombo } from './combo/cell_controller.combo';\nimport { CellDatetime } from './datetime/cell_controller.datetime';\nimport { CellIframe } from './iframe/cell_controller.iframe';\nimport { CellList } from './list/cell_controller.list';\nimport { CellMultifile } from './multifile/cell_controller.multifile';\nimport { CellNumber } from './number/cell_controller.number';\nimport { CellRadioGroup } from './radio_group/cell_controller.radio_group';\nimport { CellTagComboCheckbox } from './tag_combo_checkbox/cell_controller.tag_combo_checkbox';\nimport { CellTree } from './tree/cell_controller.tree';\nimport { CellTreeComboBox } from './tree_combo_box/cell_controller.tree_combo_box';\n\nclass CellControllerProvider {\n    private controllerDict = new Map<string, DictMap>([\n        ['combo', { type: CellCombo.xtype, slient: true }],\n        ['tagcombocheckbox', { type: CellTagComboCheckbox.xtype, slient: true }],\n        ['combocheckbox', { type: CellTagComboCheckbox.xtype, slient: true }],\n        ['button', { type: CellButton.xtype, direct: true, slient: true }],\n        ['freebutton', { type: CellButton.xtype, direct: true, slient: true }],\n        ['formsubmit', { type: CellButton.xtype, direct: true, slient: true }],\n        ['radiogroup', { type: CellRadioGroup.xtype, direct: true, slient: true }],\n        ['checkboxgroup', { type: CellCheckboxGroup.xtype, direct: true, slient: true }],\n        ['checkbox', { type: CellCheckBox.xtype, direct: true, slient: true }],\n        ['iframe', { type: CellIframe.xtype, direct: true }],\n        ['password', { type: ParameterPassword.xtype, transformer: v => v.replaceAll(/./g, () => '*') }],\n        ['datetime', { type: CellDatetime.xtype, slient: true }],\n        ['treecombobox', { type: CellTreeComboBox.xtype, slient: true }],\n        ['tree', { type: CellTree.xtype, direct: true, slient: true }],\n        ['list', { type: CellList.xtype, direct: true }],\n        ['number', { type: CellNumber.xtype, slient: true }],\n        ['multifile', { type: CellMultifile.xtype, slient: true }],\n    ]);\n\n    /**\n     * EVENT_CHANGE对应的绑定事件，即A事件后必发EVENT_CHANGE\n     */\n    private controllerEventChangeDict = new Map<string, string>([\n        ['combo', 'stopedit'],\n        ['tagcombocheckbox', 'stopedit'],\n        ['combocheckbox', 'stopedit'],\n        ['radiogroup', 'statechange'],\n        ['checkboxgroup', 'statechange'],\n        ['checkbox', 'statechange'],\n        ['password', 'afteredit'],\n        ['datetime', 'stopedit'],\n        ['number', 'afteredit'],\n        ['text', 'afteredit'],\n        ['textarea', 'afteredit'],\n    ]);\n\n    public getType(key: string) {\n        return this.controllerDict.get(key)?.type || controllerProvider.get(key);\n    }\n\n    public isDirect(key: string) {\n        return this.controllerDict.get(key)?.direct || false;\n    }\n\n    public set(key: string, value: string, direct?: boolean) {\n        this.controllerDict.set(key, {\n            type: value,\n            direct,\n        });\n    }\n\n    public getImpl() {\n        return ParameterEmpty;\n    }\n\n    public getTextTransformer(type: string) {\n        return type && this.controllerDict.get(type)?.transformer || function (v: string) {\n            return v;\n        };\n    }\n\n    public isSlient(key: string) {\n        return this.controllerDict.get(key)?.slient === true;\n    }\n\n    public getEventChangeName(type: string) {\n        return this.controllerEventChangeDict.get(type);\n    }\n}\n\n@provider()\nclass ReportCellControllerProvider {\n    public static xtype = 'report.cell.controller.provider';\n\n    public $get() {\n        return CellControllerProvider;\n    }\n}\n\nexport const cellControllerProvider: CellControllerProvider = BI.Providers.getProvider(ReportCellControllerProvider.xtype);\n\ninterface DictMap {\n    type: string;\n\n    /**\n     * 是否强制直接显示\n     */\n    direct?: boolean;\n\n    /**\n     * 显示值转换\n     */\n    transformer?: (v: string) => string;\n\n    /**\n     * 是否触发事件\n     */\n    slient?: boolean;\n}\n"]}