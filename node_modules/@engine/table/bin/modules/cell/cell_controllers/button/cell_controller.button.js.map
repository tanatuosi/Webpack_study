{"version":3,"file":"cell_controller.button.js","sourceRoot":"","sources":["../../../../../src/modules/cell/cell_controllers/button/cell_controller.button.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AACpE,OAAO,EAAc,QAAQ,EAAE,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,qCAAqC,EAAE,MAAM,6BAA6B,CAAC;AAGpF,IAAa,UAAU,GAAvB,MAAa,UAAW,SAAQ,qCAAqC;IAArE;;QAGW,UAAK,GAUR;YACA,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,EAAE;YACd,OAAO,EAAE,EAAE;YACX,IAAI,EAAE,EAAE;YACR,GAAG,EAAE,EAAE;YACP,KAAK,EAAE,EAAE;YACT,KAAK,EAAE,EAAE;SACZ,CAAA;IAiDL,CAAC;IA7CU,MAAM;QACT,MAAM,KAAmC,IAAI,CAAC,OAAO,EAA/C,EAAE,UAAU,EAAE,OAAO,OAA0B,EAArB,IAAI,cAA9B,yBAAgC,CAAe,CAAC;QAEtD,OAAO,gCACA,IAAI,KACP,IAAI,EAAE,eAAe,CAAC,KAAK,EAC3B,GAAG,EAAE,CAAC,GAAoB,EAAE,EAAE;gBAC1B,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;YACtB,CAAC,EACD,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,EAC7B,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,EAC9B,SAAS,EAAE,UAAU,EACrB,KAAK,EAAE,IAAI,CAAC,GAAG,KAAK,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAC/D,CAAC;IACN,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IAClC,CAAC;IAEM,iBAAiB;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;IAC3C,CAAC;IAEM,gBAAgB;QACnB,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,CAAS;QACrC,MAAM,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAEM,oBAAoB;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC;IAC9C,CAAC;IAEM,gBAAgB,CAAC,CAAS;QAC7B,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC;IAEM,QAAQ,KAAI,CAAC;CACvB,CAAA;AAvEiB,gBAAK,GAAG,0CAA0C,CAAC;AADxD,UAAU;IADtB,QAAQ,EAAE;GACE,UAAU,CAwEtB;SAxEY,UAAU","sourcesContent":["import { HEIGHT, ParameterButton, WIDTH } from '@engine/controller';\nimport { FrListener, shortcut } from '@engine/core';\nimport { AbstractParameterCellControllerWidget } from '../cell_controller.abstract';\n\n@shortcut()\nexport class CellButton extends AbstractParameterCellControllerWidget {\n    public static xtype = 'report.main.table_cell.controller.button';\n\n    public props: {\n        xlisteners: FrListener[];\n        width: number;\n        height: number;\n        fontSize: number;\n        baseCls: string;\n        text: string;\n        key: string;\n        xtype: string;\n        value: string;\n    } = {\n        width: WIDTH,\n        height: HEIGHT,\n        fontSize: 12,\n        xlisteners: [],\n        baseCls: '',\n        text: '',\n        key: '',\n        xtype: '',\n        value: '',\n    }\n\n    private button: ParameterButton;\n\n    public render() {\n        const { xlisteners, baseCls, ...opts } = this.options;\n\n        return <Partial<ParameterButton['props']>>{\n            ...opts,\n            type: ParameterButton.xtype,\n            ref: (ref: ParameterButton) => {\n                this.button = ref;\n            },\n            text: opts.text || opts.value,\n            value: opts.value || opts.text,\n            listeners: xlisteners,\n            xtype: opts.key === 'formsubmit' ? 'formsubmit' : opts.xtype,\n        };\n    }\n\n    public getValue() {\n        return this.button.getValue();\n    }\n\n    public postGetValidation() {\n        return this.button.postGetValidation();\n    }\n\n    public preGetValidation() {\n        return this.button.preGetValidation();\n    }\n\n    public async setControllerValue(v: string) {\n        await this.button.setControllerValue(v);\n    }\n\n    public reset() {\n        this.button.reset();\n    }\n\n    public postValidateAndToast() {\n        return this.button.postValidateAndToast();\n    }\n\n    public setInteractValue(v: string) {\n        this.button.setInteractValue(v);\n    }\n\n    public setStyle() {}\n}\n"]}