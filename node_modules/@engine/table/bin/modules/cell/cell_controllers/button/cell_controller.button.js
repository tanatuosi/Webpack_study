var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { HEIGHT, ParameterButton, WIDTH } from '@engine/controller';
import { shortcut } from '@engine/core';
import { AbstractParameterCellControllerWidget } from '../cell_controller.abstract';
let CellButton = class CellButton extends AbstractParameterCellControllerWidget {
    constructor() {
        super(...arguments);
        this.props = {
            width: WIDTH,
            height: HEIGHT,
            fontSize: 12,
            xlisteners: [],
            baseCls: '',
            text: '',
            key: '',
            xtype: '',
            value: '',
        };
    }
    render() {
        const _a = this.options, { xlisteners, baseCls } = _a, opts = __rest(_a, ["xlisteners", "baseCls"]);
        return Object.assign(Object.assign({}, opts), { type: ParameterButton.xtype, ref: (ref) => {
                this.button = ref;
            }, text: opts.text || opts.value, value: opts.value || opts.text, listeners: xlisteners, xtype: opts.key === 'formsubmit' ? 'formsubmit' : opts.xtype });
    }
    getValue() {
        return this.button.getValue();
    }
    postGetValidation() {
        return this.button.postGetValidation();
    }
    preGetValidation() {
        return this.button.preGetValidation();
    }
    async setControllerValue(v) {
        await this.button.setControllerValue(v);
    }
    reset() {
        this.button.reset();
    }
    postValidateAndToast() {
        return this.button.postValidateAndToast();
    }
    setInteractValue(v) {
        this.button.setInteractValue(v);
    }
    setStyle() { }
};
CellButton.xtype = 'report.main.table_cell.controller.button';
CellButton = __decorate([
    shortcut()
], CellButton);
export { CellButton };
//# sourceMappingURL=cell_controller.button.js.map