{"version":3,"file":"cell_controller.checkbox_group.js","sourceRoot":"","sources":["../../../../../src/modules/cell/cell_controllers/checkbox_group/cell_controller.checkbox_group.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,sBAAsB,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAC3E,OAAO,EAAc,QAAQ,EAAE,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,qCAAqC,EAAE,MAAM,6BAA6B,CAAC;AACpF,OAAO,EAAE,yBAAyB,EAAE,MAAM,yBAAyB,CAAC;AAGpE,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,qCAAqC;IAA5E;;QAGW,UAAK,GAWR;YACA,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,CAAC;YACd,QAAQ,EAAE;gBACN,GAAG,EAAE,CAAC;gBACN,MAAM,EAAE,CAAC;aACZ;YACD,UAAU,EAAE,EAAE;YACd,OAAO,EAAE,EAAE;SACd,CAAA;IAwEL,CAAC;IApEU,MAAM;QACT,MAAM,KAA0D,IAAI,CAAC,OAAO,EAAtE,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,OAA0B,EAArB,IAAI,cAArD,oDAAuD,CAAe,CAAC;QAE7E,OAAO,gCACA,IAAI,KACP,IAAI,EAAE,sBAAsB,CAAC,KAAK,EAClC,GAAG,EAAE,CAAC,GAA2B,EAAE,EAAE;gBACjC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;YACrB,CAAC,EACD,SAAS,EAAE,UAAU,EACrB,kBAAkB,EAAE,yBAAyB,EAC7C,eAAe,EAAE,GAAG,EAAE;gBAClB,OAAO;oBACH,QAAQ,kCACD,QAAQ,KACX,WAAW,GACd;iBACJ,CAAC;YACN,CAAC,EACD,YAAY,CAA+B,EAAY;gBACnD,IAAI,CAAC,iBAAiB,EAAE;qBACnB,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1B,CAAC,GACJ,CAAC;IACN,CAAC;IAED,qBAAqB;IACd,OAAO,KAAI,CAAC;IAEZ,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IACjC,CAAC;IAEM,iBAAiB;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,CAAC;IAC1C,CAAC;IAEM,gBAAgB;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,CAAqD;QACjF,MAAM,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAEM,oBAAoB;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE,CAAC;IAC7C,CAAC;IAEM,gBAAgB,CAAC,CAMvB;QACG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC;IAEM,iBAAiB;QACpB,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,CAAC;IACnC,CAAC;IAEM,QAAQ,KAAI,CAAC;CACvB,CAAA;AAhGiB,uBAAK,GAAG,kDAAkD,CAAC;AADhE,iBAAiB;IAD7B,QAAQ,EAAE;GACE,iBAAiB,CAiG7B;SAjGY,iBAAiB","sourcesContent":["import { HEIGHT, ParameterCheckboxGroup, WIDTH } from '@engine/controller';\nimport { FrListener, shortcut } from '@engine/core';\nimport { AbstractParameterCellControllerWidget } from '../cell_controller.abstract';\nimport { fetchCellGroupControlAttr } from '../cell_controller.crud';\n\n@shortcut()\nexport class CellCheckboxGroup extends AbstractParameterCellControllerWidget {\n    public static xtype = 'report.main.table_cell.controller.checkbox_group';\n\n    public props: {\n        position: {\n            row: number;\n            column: number;\n        };\n        reportIndex: number;\n        xlisteners: FrListener[];\n        width: number;\n        height: number;\n        fontSize: number;\n        baseCls: string;\n    } = {\n        width: WIDTH,\n        height: HEIGHT,\n        fontSize: 12,\n        reportIndex: 0,\n        position: {\n            row: 0,\n            column: 0,\n        },\n        xlisteners: [],\n        baseCls: '',\n    }\n\n    private group: ParameterCheckboxGroup;\n\n    public render() {\n        const { xlisteners, position, reportIndex, baseCls, ...opts } = this.options;\n\n        return <Partial<ParameterCheckboxGroup['props']>>{\n            ...opts,\n            type: ParameterCheckboxGroup.xtype,\n            ref: (ref: ParameterCheckboxGroup) => {\n                this.group = ref;\n            },\n            listeners: xlisteners,\n            controlAttrFetcher: fetchCellGroupControlAttr,\n            extraOptsGetter: () => {\n                return {\n                    location: {\n                        ...position,\n                        reportIndex,\n                    },\n                };\n            },\n            beforeRender(this: ParameterCheckboxGroup, cb: Function) {\n                this.updateControlAttr()\n                    .then(() => cb());\n            },\n        };\n    }\n\n    // 复写父类不触发afterinit事件\n    public mounted() {}\n\n    public getValue() {\n        return this.group.getValue();\n    }\n\n    public postGetValidation() {\n        return this.group.postGetValidation();\n    }\n\n    public preGetValidation() {\n        return this.group.preGetValidation();\n    }\n\n    public async setControllerValue(v?: string | number | (string | number)[] | undefined) {\n        await this.group.setControllerValue(v);\n    }\n\n    public reset() {\n        this.group.reset();\n    }\n\n    public postValidateAndToast() {\n        return this.group.postValidateAndToast();\n    }\n\n    public setInteractValue(v: {\n        data: {\n            text: string;\n            value: string;\n        }[];\n        value: string | string[];\n    }) {\n        this.group.setInteractValue(v);\n    }\n\n    public reloadControlAttr() {\n        this.group.reloadControlAttr();\n    }\n\n    public setStyle() {}\n}\n"]}