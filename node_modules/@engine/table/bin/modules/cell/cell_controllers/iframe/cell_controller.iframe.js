var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { HEIGHT, WIDTH } from '@engine/controller';
import { shortcut } from '@engine/core';
import { appendParams2Url } from '@engine/crud';
import { AbstractParameterCellControllerWidget } from '../cell_controller.abstract';
import { fetchIframeControlAttr } from '../cell_controller.crud';
let CellIframe = class CellIframe extends AbstractParameterCellControllerWidget {
    constructor() {
        super(...arguments);
        this.props = {
            src: '',
            width: WIDTH,
            height: HEIGHT,
            fontSize: 12,
            value: '',
            showOverFlowX: false,
            showOverFlowY: false,
            widgetName: '',
            cellWidgetName: '',
            reportIndex: 0,
            position: {
                row: 0,
                column: 0,
            },
        };
    }
    render() {
        const { src, width, height, showOverFlowX, showOverFlowY, cellWidgetName } = this.options;
        const scrolling = showOverFlowX || showOverFlowY ? 'yes' : 'no';
        return {
            type: BI.AbsoluteLayout.xtype,
            items: [{
                    el: {
                        type: BI.Iframe.xtype,
                        ref: (_ref) => {
                            this.iframe = _ref;
                        },
                        src,
                        width,
                        height,
                        name: cellWidgetName,
                        attributes: {
                            scrolling,
                        },
                    },
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                }],
        };
    }
    beforeInit() {
        return this.getIframeControlAttr();
    }
    getIframeControlAttr() {
        const { widgetName } = this.options;
        return fetchIframeControlAttr(widgetName, this.getRequestOpts())
            .then(res => {
            let result = {};
            res.forEach(param => {
                result = Object.assign(Object.assign({}, result), param);
            });
            this.options.src = appendParams2Url(this.options.src, result);
        });
    }
    getRequestOpts() {
        const { position, reportIndex } = this.options;
        return {
            location: Object.assign(Object.assign({}, position), { reportIndex }),
        };
    }
    getValue() {
        return this.iframe.getSrc();
    }
    async setControllerValue(v) {
        this.iframe.setSrc(v);
    }
    setInteractValue(v) {
        this.iframe.setSrc(v);
    }
    reset() {
        this.iframe.reset();
    }
    preGetValidation() {
        return { result: true };
    }
    postGetValidation() {
        return { result: true };
    }
    postValidateAndToast() {
        return true;
    }
    setStyle() { }
};
CellIframe.xtype = 'report.main.table_cell.controller.iframe';
CellIframe = __decorate([
    shortcut()
], CellIframe);
export { CellIframe };
//# sourceMappingURL=cell_controller.iframe.js.map