var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { getDownloadFileUrl, HEIGHT, ParameterMultifile, WIDTH } from '@engine/controller';
import { shortcut } from '@engine/core';
import { AbstractParameterCellControllerWidget } from '../cell_controller.abstract';
let CellMultifile = class CellMultifile extends AbstractParameterCellControllerWidget {
    constructor() {
        super(...arguments);
        this.props = {
            width: WIDTH,
            height: HEIGHT,
            fontSize: 12,
            xlisteners: [],
            baseCls: '',
            allowBlank: true,
            errorMsg: '',
        };
    }
    render() {
        const _a = this.options, { xlisteners, baseCls } = _a, opts = __rest(_a, ["xlisteners", "baseCls"]);
        return Object.assign(Object.assign({}, opts), { type: ParameterMultifile.xtype, ref: (ref) => {
                this.editor = ref;
            }, listeners: xlisteners, url: 'write/attachment/upload', cls: 'bi-card' });
    }
    getValue() {
        const files = this.editor.getUploadFiles()
            .map(file => {
            return Object.assign(Object.assign({}, file), { attach_url: getDownloadFileUrl(file.attach_id) });
        });
        if (BI.size(files) === 1) {
            return BI.first(files);
        }
        return files;
    }
    postGetValidation() {
        const { allowBlank, errorMsg } = this.options;
        const result = allowBlank || BI.size(this.editor.getUploadFiles()) > 0;
        return result
            ? {
                result: true,
            } : {
            result: false,
            errorMsg: errorMsg || BI.i18nText('Fine-Report_Preview_Can_Not_Null'),
        };
    }
    preGetValidation() {
        return this.editor.preGetValidation();
    }
    async setControllerValue() {
        await this.editor.setControllerValue();
    }
    reset() {
        this.editor.reset();
    }
    postValidateAndToast() {
        return this.editor.postValidateAndToast();
    }
    setInteractValue() {
        this.editor.setInteractValue();
    }
    setStyle() { }
};
CellMultifile.xtype = 'report.main.table_cell.controller.multifile';
CellMultifile = __decorate([
    shortcut()
], CellMultifile);
export { CellMultifile };
//# sourceMappingURL=cell_controller.multifile.js.map