var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IndirectCellController_1;
import { shortcut } from '@engine/core';
import { AbstractParameterCellControllerWidget } from '../../cell_controller.abstract';
import { AbstractCellControllerHoc } from '../cell_controller_hoc.abstract';
import './cell_controller_hoc.indirect.less';
/**
 * 非直接显示控件
 */
let IndirectCellController = IndirectCellController_1 = class IndirectCellController extends AbstractCellControllerHoc {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'report-main-table-cell-controller-indirect',
            el: {},
            width: 0,
            height: 0,
            fontSize: 12,
            slient: false,
            shouldHideSelectFrame: BI.emptyFn,
        };
    }
    render() {
        const listeners = this.options.el.listeners || [];
        const listener = {
            eventName: 'EVENT_CHANGE',
            action: () => {
                var _a;
                (_a = this.watermark) === null || _a === void 0 ? void 0 : _a.setVisible(!this.checkValueNotEmpty(this.controller.getValue()));
            },
        };
        listeners.push(listener);
        this.controller = BI.createWidget(Object.assign(Object.assign({}, this.options.el), { listeners: this.options.slient ? [listener] : listeners, xlisteners: listeners }));
        return {
            type: BI.Tab.xtype,
            ref: (ref) => {
                this.tab = ref;
            },
            showIndex: 'inactive',
            cardCreator: (v) => {
                switch (v) {
                    case 'active':
                        return {
                            type: BI.AbsoluteLayout.xtype,
                            ref: (ref) => {
                                this.controllerWrapper = ref;
                            },
                            items: [{
                                    el: this.controller,
                                    top: 0,
                                    left: 0,
                                    bottom: 0,
                                    right: 0,
                                }],
                        };
                    case 'inactive':
                    default:
                        return {
                            type: BI.AbsoluteLayout.xtype,
                            items: [{
                                    el: Object.assign(Object.assign({}, this.options.el), { ref: (ref) => {
                                            this.seleciontMarker = ref;
                                        }, disabled: false, invisible: true, width: this.options.width - 2, height: this.options.height - 2, cls: 'cell-selected', type: BI.DefaultLayout.xtype }),
                                    top: 0,
                                    left: 0,
                                    right: 0,
                                    bottom: 0,
                                }, this.createWatermark(), {
                                    el: {
                                        type: BI.AbsoluteLayout.xtype,
                                        invisible: true,
                                        ref: (ref) => {
                                            this.tip = ref;
                                        },
                                        items: [{
                                                el: Object.assign(Object.assign({}, this.options.el), { ref: (ref) => {
                                                        this.hightLightBorder = ref;
                                                    }, disabled: false, width: this.options.width - 2, height: this.options.height - 2, cls: 'bi-high-light-border', type: BI.DefaultLayout.xtype }),
                                                top: 0,
                                                left: 0,
                                                right: 0,
                                                bottom: 0,
                                            }, {
                                                el: {
                                                    cls: 'cell-edit-tip',
                                                    iconWidth: 16,
                                                    iconHeight: 16,
                                                    width: 16,
                                                    height: 16,
                                                    type: BI.IconButton.xtype,
                                                    stopPropagation: true,
                                                    handler: () => {
                                                        this.fireEvent(IndirectCellController_1.EVENT_OPEN);
                                                    },
                                                },
                                                top: 0,
                                                right: 0,
                                            }],
                                    },
                                    top: 0,
                                    left: 0,
                                    right: 0,
                                    bottom: 0,
                                }],
                        };
                }
            },
        };
    }
    mounted() {
        this.element.on('mouseenter', () => {
            if (this.isActive())
                return;
            // 每次mouseenter都刷新状态
            const state = !this.isControllerUnusalState();
            this.tip.setVisible(state);
            this.handleControllerByState(state);
        });
        this.element.on('mouseleave', () => {
            this.tip.invisible();
        });
    }
    /**
     * 控件是否被挂载
     */
    isControllerRegistered() {
        return this.controllerWrapper ? this.controllerWrapper.hasWidget('0') : false;
    }
    /**
     * 根据状态挂载或者不挂载控件
     * @param state 状态
     */
    handleControllerByState(state) {
        var _a;
        if (!state) {
            this.controller.isolate();
            return;
        }
        if (!this.isControllerRegistered()) {
            (_a = this.controllerWrapper) === null || _a === void 0 ? void 0 : _a.addWidget(this.controller);
        }
    }
    setEnable(enable) {
        this.controller.setEnable(enable);
        this.handleControllerByState(enable);
    }
    setVisible(visible) {
        this.controller.setVisible(visible);
        this.handleControllerByState(visible);
    }
    getValue() {
        return this.controller ? this.controller.getValue() : this.options.el.value;
    }
    setValue(v) {
        // TODO:这边是beforeRender导致的bug，临时加个trycatch
        try {
            this.controller
                ? this.controller.setValue(v)
                : this.options.el.value = v;
        }
        catch (e) { }
    }
    postGetValidation() {
        return this.controller.postGetValidation() || {
            result: true,
        };
    }
    postValidateAndToast() {
        return this.controller.postValidateAndToast() || true;
    }
    preGetValidation() {
        return this.controller.preGetValidation() || {
            result: true,
        };
    }
    reset() {
        this.controller.reset();
    }
    async setControllerValue(v) {
        this.controller
            ? await this.controller.setControllerValue(v)
            : this.options.el.value === v || '';
    }
    active() {
        // 如果控件状态不正常，则不切换至active状态
        if (this.isControllerUnusalState()) {
            return;
        }
        this.tab.setSelect('active');
        this.controller.focus();
    }
    inactive() {
        this.tab.setSelect('inactive');
    }
    isActive() {
        return this.tab.getSelect() === 'active';
    }
    setText() { }
    /**
     * 对非直接显示控件进行resize
     * 修复 https://work.fineres.com/browse/REPORT-73661 引入
     * @param width
     * @param height
     */
    resize(width, height) {
        this.controller.resize(width, height);
        this.tab.setHeight(height);
        this.tab.setWidth(width);
        this.seleciontMarker.setWidth(width - 2);
        this.seleciontMarker.setHeight(height - 2);
        this.hightLightBorder.setWidth(width - 2);
        this.hightLightBorder.setHeight(height - 2);
    }
    reloadControlAttr() {
        // TODO:这边是beforeRender导致的bug，临时加个trycatch
        try {
            this.controller.reloadControlAttr();
        }
        catch (e) { }
    }
    setSeleted(v) {
        /** 如果设置了selectFrame为true, 那么在选择cell的时候不将selectionMark设置为显示*/
        if (this.options.shouldHideSelectFrame())
            return;
        this.seleciontMarker.setVisible(v);
    }
    hideHightlightBorder() {
        this.seleciontMarker.setVisible(false);
    }
    /**
     * 查看控件是否是非正常状态
     */
    isControllerUnusalState() {
        return this.controllerWrapper
            ? !this.isControllerRegistered()
            : !(this.controller.isEnabled() && this.controller.isVisible());
    }
    setStyle() { }
    getValidation() {
        if (this.isControllerUnusalState()) {
            return {
                result: true,
            };
        }
        return super.getValidation();
    }
    getDependenceValue() {
        // TODO:这边是beforeRender导致的bug，临时加个trycatch
        try {
            return this.controller instanceof AbstractParameterCellControllerWidget ? this.controller.getDependenceValue() : this.controller.getValue();
        }
        catch (e) { }
    }
};
IndirectCellController.xtype = 'report.main.table_cell.controller.indirect';
IndirectCellController.EVENT_OPEN = 'EVENT_OPEN';
IndirectCellController = IndirectCellController_1 = __decorate([
    shortcut()
], IndirectCellController);
export { IndirectCellController };
//# sourceMappingURL=cell_controller_hoc.indirect.js.map