var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { shortcut } from '@engine/core';
import { AbstractParameterCellControllerWidget } from '../../cell_controller.abstract';
import { AbstractCellControllerHoc } from '../cell_controller_hoc.abstract';
import './cell_controller_hoc.direct.less';
/**
 * 直接显示控件
 */
let DirectCellController = class DirectCellController extends AbstractCellControllerHoc {
    constructor() {
        super(...arguments);
        this.props = {
            baseCls: 'report-main-table-cell-controller-direct',
            el: {},
            width: 0,
            height: 0,
            fontSize: 12,
            slient: false,
            text: '',
            shouldHideSelectFrame: BI.emptyFn,
        };
    }
    render() {
        const listeners = this.options.el.listeners || [];
        const listener = {
            eventName: 'EVENT_CHANGE',
            action: () => {
                var _a;
                (_a = this.watermark) === null || _a === void 0 ? void 0 : _a.setVisible(!this.checkValueNotEmpty(this.controller.getValue()));
            },
        };
        listeners.push(listener, {
            eventName: 'afterinit',
            action: () => {
                this.initLabelLayer();
            },
        });
        return {
            type: BI.BasicButton.xtype,
            render: () => {
                return Object.assign(Object.assign({}, this.options.el), { xlisteners: listeners, listeners: this.options.slient ? [listener] : listeners, ref: (ref) => {
                        this.controller = ref;
                    } });
            },
            handler: () => {
                this.active();
            },
        };
    }
    initLabelLayer() {
        if (this.adapter)
            return;
        const adapter = this.controller.getAdapter();
        if (!adapter)
            return;
        BI.createWidget({
            type: BI.AbsoluteLayout.xtype,
            element: adapter.element,
            items: [{
                    el: {
                        type: BI.AbsoluteLayout.xtype,
                        ref: (ref) => {
                            this.adapter = ref;
                        },
                        items: [
                            {
                                el: {
                                    type: BI.Label.xtype,
                                    ref: (ref) => {
                                        this.label = ref;
                                    },
                                    cls: 'bi-card',
                                    text: this.options.text,
                                    textAlign: 'left',
                                },
                                top: 1,
                                bottom: 1,
                                left: 1,
                                right: 1,
                            },
                            this.createWatermark(),
                        ],
                    },
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0,
                }],
        });
    }
    getValue() {
        return this.controller.getValue();
    }
    setValue(...args) {
        // TODO:这边是beforeRender导致的bug，临时加个trycatch
        try {
            this.controller.setValue(...args);
        }
        catch (e) { }
    }
    postGetValidation() {
        return this.controller.postGetValidation();
    }
    postValidateAndToast() {
        return this.controller.postValidateAndToast();
    }
    preGetValidation() {
        return this.controller.preGetValidation();
    }
    reset() {
        this.controller.reset();
    }
    async setControllerValue(...args) {
        await this.controller.setControllerValue(...args);
    }
    active() {
        var _a;
        (_a = this.adapter) === null || _a === void 0 ? void 0 : _a.invisible();
        this.controller.focus();
    }
    inactive() {
        var _a;
        (_a = this.adapter) === null || _a === void 0 ? void 0 : _a.visible();
    }
    isActive() {
        return this.adapter
            ? !this.adapter.isVisible()
            : false;
    }
    setText(v) {
        var _a;
        (_a = this.label) === null || _a === void 0 ? void 0 : _a.setText(v);
        this.options.text = v;
    }
    reloadControlAttr() {
        // TODO:这边是beforeRender导致的bug，临时加个trycatch
        try {
            this.controller.reloadControlAttr();
        }
        catch (e) { }
    }
    setSeleted(v) {
        /** 如果设置了selectFrame为true, 那么在选择cell的时候不添加选中样式 */
        if (this.options.shouldHideSelectFrame())
            return;
        v
            ? this.element.addClass('highlight-border')
            : this.hideHightlightBorder();
    }
    hideHightlightBorder() {
        this.element.removeClass('highlight-border');
    }
    setStyle() { }
    // FIXME: 现在报错"input输入框在不可见下不能blur"，先trycatch处理一下
    blur() {
        try {
            this.controller.blur();
        }
        catch (e) { }
    }
    /**
     * 对直接显示控件进行resize
     * 修复 https://work.fineres.com/browse/REPORT-73661 引入
     * @param width
     * @param height
     */
    resize(width, height) {
        this.controller.resize(width, height);
    }
    getValidation() {
        if (!this.controller.isEnabled() || !this.controller.isVisible()) {
            return {
                result: true,
            };
        }
        return super.getValidation();
    }
    getDependenceValue() {
        // TODO:这边是beforeRender导致的bug，临时加个trycatch
        try {
            return this.controller instanceof AbstractParameterCellControllerWidget ? this.controller.getDependenceValue() : this.controller.getValue();
        }
        catch (e) { }
    }
};
DirectCellController.xtype = 'report.main.table_cell.controller.direct';
DirectCellController = __decorate([
    shortcut()
], DirectCellController);
export { DirectCellController };
//# sourceMappingURL=cell_controller_hoc.direct.js.map