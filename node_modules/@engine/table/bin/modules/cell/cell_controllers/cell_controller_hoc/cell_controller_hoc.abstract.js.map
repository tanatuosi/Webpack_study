{"version":3,"file":"cell_controller_hoc.abstract.js","sourceRoot":"","sources":["../../../../../src/modules/cell/cell_controllers/cell_controller_hoc/cell_controller_hoc.abstract.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,qCAAqC,EAAE,MAAM,6BAA6B,CAAC;AAEpF;;GAEG;AACH,MAAM,OAAgB,yBAA0B,SAAQ,qCAAqC;IAuBzF,eAAe;IACR,gBAAgB,KAAI,CAAC;IAI5B;;OAEG;IACO,eAAe;QACrB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC;QAEpC,OAAO;YACH,EAAE,EAAE;gBACA,IAAI,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK;gBACpB,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;gBACzC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS;gBAChC,SAAS,EAAE,MAAM;gBACjB,GAAG,EAAE,eAAe;gBACpB,GAAG,EAAE,CAAC,GAAU,EAAE,EAAE;oBAChB,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;gBACzB,CAAC;aACJ;YACD,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,CAAC;YACR,MAAM,EAAE,CAAC;SACZ,CAAC;IACN,CAAC;IAES,kBAAkB,CAAC,KAAU;QACnC,OAAO,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;CACJ","sourcesContent":["import { Label } from '@fui/core';\nimport { AbstractParameterCellControllerWidget } from '../cell_controller.abstract';\n\n/**\n * 单元格控件高阶类，用于封装后的单元格控件\n */\nexport abstract class AbstractCellControllerHoc extends AbstractParameterCellControllerWidget {\n    public props: {\n        baseCls: string;\n        el: {[key: string]: any};\n        width: number;\n        height: number;\n        fontSize: number;\n        slient: boolean;\n        shouldHideSelectFrame: () => boolean\n    }\n\n    public abstract active(): void;\n\n    public abstract inactive(): void;\n\n    public abstract isActive(): boolean;\n\n    public abstract setText(v: string): void;\n\n    public abstract setSeleted(v: boolean): void;\n\n    public abstract hideHightlightBorder(): void;\n\n    // 单元格控件不存在直接联动\n    public setInteractValue() {}\n\n    protected watermark?: Label;\n\n    /**\n     * 创建水印json\n     */\n    protected createWatermark() {\n        const value = this.options.el.value;\n\n        return {\n            el: {\n                type: BI.Label.xtype,\n                invisible: this.checkValueNotEmpty(value),\n                value: this.options.el.watermark,\n                textAlign: 'left',\n                cls: 'bi-water-mark',\n                ref: (ref: Label) => {\n                    this.watermark = ref;\n                },\n            },\n            top: 1,\n            left: 1,\n            right: 1,\n            bottom: 1,\n        };\n    }\n\n    protected checkValueNotEmpty(value: any) {\n        return !BI.isEmptyString(value) && BI.isNotNull(value);\n    }\n}\n"]}