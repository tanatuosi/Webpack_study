{"version":3,"file":"cell.js","sourceRoot":"","sources":["../../../src/modules/cell/cell.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,uBAAuB,EAAE,MAAM,oBAAoB,CAAC;AAG7D,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,qBAAqB,EAAE,MAAM,sBAAsB,CAAC;AAC7D,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AACpD,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAC9C,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAEpD,MAAM,UAAU,uBAAuB,CAAC,IAAwB;IAC5D,MAAM,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;IACxC,IAAI,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,eAAe,MAAK,kBAAkB,EAAE;QAC1D,OAAO,uBAAuB,CAAC,QAAQ,CAAC;KAC3C;IAED,IAAI,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE;QACtD,OAAO,uBAAuB,CAAC,IAAI,CAAC;KACvC;IAED,OAAO,IAAI,CAAC,IAAI,CAAC;AACrB,CAAC;AAED,MAAM,OAAO,qBAAqB;IAAlC;QACY,oBAAe,GAAG,uBAAuB,CAAC;IAStD,CAAC;IAPU,SAAS,CAAC,IAAwB;QACrC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAEM,GAAG,CAAC,EAAkC;QACzC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC9B,CAAC;CACJ;AAED,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,qBAAqB,EAAE,CAAC;AAMjE,MAAM,OAAO,iBAAiB;IAA9B;QACY,aAAQ,GAA+B;YAC3C,CAAC,uBAAuB,CAAC,IAAI,CAAC,EAAE,aAAa;YAC7C,CAAC,uBAAuB,CAAC,YAAY,CAAC,EAAE,YAAY;YACpD,CAAC,uBAAuB,CAAC,aAAa,CAAC,EAAE,qBAAqB;YAC9D,CAAC,uBAAuB,CAAC,KAAK,CAAC,EAAE,cAAc;YAC/C,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE,iBAAiB;YACrD,CAAC,uBAAuB,CAAC,IAAI,CAAC,EAAE,aAAa;YAC7C,CAAC,uBAAuB,CAAC,IAAI,CAAC,EAAE,aAAa;YAC7C,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE,iBAAiB;SACxD,CAAC;IAaN,CAAC;IAXU,GAAG,CAAC,IAAwB,EAAE,QAA8B;QAC/D,MAAM,GAAG,GAAG,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAElD,MAAM,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QAE5E,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,KAAgB;QACpC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IAC/B,CAAC;CACJ;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC","sourcesContent":["import { Cell } from '@fui/sheet/types';\nimport { AbstractLink } from '@engine/link';\nimport { TableExternalContext } from '../table.cell_generator';\nimport { DEFAULT_TABLE_CELL_TYPE } from '../table.constants';\nimport { CellStyle, XCell, XCelladvancedattr, XCellSortHeader } from '../table.types';\nimport { AbstractTableCell } from './cell.abstract';\nimport { BiasTableCell } from './cell.bias';\nimport { ChartNewCell } from './cell.chart_new';\nimport { CurrencyLineTableCell } from './cell.currency_line';\nimport { DownloadTableCell } from './cell.download';\nimport { ImageTableCell } from './cell.image';\nimport { NodeTableCell } from './cell.node';\nimport { TextTableCell } from './cell.text';\nimport { WebImageTableCell } from './cell.webimage';\n\nexport function transformCellTypeByOpts(opts: Transform2CellArgs) {\n    const { celladvancedattr, cell } = opts;\n    if (celladvancedattr?.contentShowType === 'SHOW_AS_DOWNLOAD') {\n        return DEFAULT_TABLE_CELL_TYPE.DOWNLOAD;\n    }\n\n    if (celladvancedattr && !celladvancedattr.previewContent) {\n        return DEFAULT_TABLE_CELL_TYPE.BIAS;\n    }\n\n    return cell.type;\n}\n\nexport class TableCellTypeProvider {\n    private typeTransformer = transformCellTypeByOpts;\n\n    public transform(opts: Transform2CellArgs) {\n        return this.typeTransformer(opts);\n    }\n\n    public use(fn: typeof transformCellTypeByOpts) {\n        this.typeTransformer = fn;\n    }\n}\n\nexport const tableCellTypeProvider = new TableCellTypeProvider();\n\ninterface TableCell extends Function {\n    new (opts: Transform2CellArgs, external: TableExternalContext): AbstractTableCell\n}\n\nexport class TableCellProvider {\n    private cellDict: {[key: string]: TableCell} = {\n        [DEFAULT_TABLE_CELL_TYPE.BIAS]: BiasTableCell,\n        [DEFAULT_TABLE_CELL_TYPE.SIMPLE_CHART]: ChartNewCell,\n        [DEFAULT_TABLE_CELL_TYPE.currency_LINE]: CurrencyLineTableCell,\n        [DEFAULT_TABLE_CELL_TYPE.IMAGE]: ImageTableCell,\n        [DEFAULT_TABLE_CELL_TYPE.WEBIMAGE]: WebImageTableCell,\n        [DEFAULT_TABLE_CELL_TYPE.TEXT]: TextTableCell,\n        [DEFAULT_TABLE_CELL_TYPE.NODE]: NodeTableCell,\n        [DEFAULT_TABLE_CELL_TYPE.DOWNLOAD]: DownloadTableCell,\n    };\n\n    public get(opts: Transform2CellArgs, external: TableExternalContext) {\n        const key = tableCellTypeProvider.transform(opts);\n\n        const Cell = key in this.cellDict ? this.cellDict[key] : this.cellDict.bias;\n        \n        return new Cell(opts, external);\n    }\n\n    public set(key: string, value: TableCell) {\n        this.cellDict[key] = value;\n    }\n}\n\nexport const tableCellProvider = new TableCellProvider();\n\nexport interface Transform2CellArgs {\n    cell: XCell;\n    style: CellStyle;\n    hyperLinks: AbstractLink[];\n    listeners: {\n        eventName: string;\n        action: (args: { e: Event, x: number, y: number, cell: Cell, [key: string]: any }) => void | Promise<void>\n    }[];\n    celladvancedattr?: XCelladvancedattr;\n    sortHeader?: XCellSortHeader;\n    widget?: {[key: string]: any};\n}\n"]}