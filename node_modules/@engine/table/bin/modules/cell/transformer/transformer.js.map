{"version":3,"file":"transformer.js","sourceRoot":"","sources":["../../../../src/modules/cell/transformer/transformer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Type } from '@engine/core';\nimport { PageResult, XCellStyle, XCellValue } from '../../table.types';\nimport { XCellHyperLink } from '@engine/link';\nimport { TableExternalContext } from '../../table.cell_generator';\nimport { CellCacheManager } from '../../table.cell_value_manager';\nimport { getCellValue } from '../../table.service';\nimport { NormalCellValueTransformer } from './transformer.normal';\nimport { TextCellValueTransformer } from './transformer.text';\n\nexport class TableCellValueTransformerProvider {\n    private cellDict = new Map<string, Type<NormalCellValueTransformer>>([\n        ['text', TextCellValueTransformer],\n    ]);\n\n    public setValue(cellData: PageResult, value: { cv: NonNullable<XCellValue['cv']>; pv?: string; cellhyperlink?: XCellHyperLink }, externalContext: TableCellValueTransformerContext, opt: {\n\n        /**\n         * 是否忽略控件赋值\n         */\n        soft?: boolean,\n    } = {}): Promise<boolean> {\n        const { cv, cellhyperlink } = value;\n\n        const currentValue = getCellValue(cellData.value) || { type: 'text', value:'' };\n\n        if (!currentValue) {\n            return new Promise(resolve => {\n                resolve(false);\n            });\n        }\n\n        if (BI.isNull(cellhyperlink) && BI.isEqual(currentValue.cv, cv)) {\n            return new Promise(resolve => {\n                resolve(false);\n            });\n        }\n\n        cellData.edited = true;\n\n        cellData.transformed = true;\n\n        cellData.cellstyle = cellData.cellstyle || <XCellStyle>{\n            fontStyle: {\n                color: -16777216,\n                fontFamily: 'SimSun',\n                fontSize: 12,\n                underLine: {\n                    width: 0,\n                    style: '',\n                    color: -16777216,\n                },\n            },\n        };\n\n        cellData.cellhyperlink = cellhyperlink;\n\n        const controller = externalContext.getWidgetByCell(cellData.position.y, cellData.position.x);\n\n        if (controller && opt.soft !== true) {\n            controller.setValue(cv);\n        }\n\n        const Transformer = this.cellDict.get(currentValue.type) || NormalCellValueTransformer;\n\n        return new Transformer(externalContext, cellData)\n            .setValue(currentValue, value)\n            .then(updatedCellValue => {\n                const isUpdated = cellData.value !== updatedCellValue;\n\n                cellData.value = updatedCellValue;\n\n                if (isUpdated) {\n                    cellData.errorMsg = undefined;\n\n                    const cellCacheManager = <CellCacheManager | undefined>(externalContext.getStickerManagers().get(CellCacheManager.NAME));\n\n                    cellCacheManager?.addCellCache(cellData);\n                }\n\n                return isUpdated;\n            });\n    }\n\n    public set(key: string, transformer: Type<NormalCellValueTransformer>) {\n        this.cellDict.set(key, transformer);\n    }\n}\n\nexport const tableCellValueTransformerProvider = new TableCellValueTransformerProvider();\n\ntype TableCellValueTransformerContext = Pick<TableExternalContext, 'getTableData' | 'getWidgetByCell' | 'getStickerManagers'>;\n"]}