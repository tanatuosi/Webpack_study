{"version":3,"file":"transformer.normal.js","sourceRoot":"","sources":["../../../../src/modules/cell/transformer/transformer.normal.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAGtD,MAAM,OAAO,0BAA0B;IAKnC,YAAmB,iBAAuC,EAAE,QAAoB;QAC5E,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAE3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAEM,QAAQ,CAAC,SAAqB,EAAE,MAA2D;QAC9F,MAAM,EAAE,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,EAAE,KAAI,EAAE,CAAC;QAE5B,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC;QAElB,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC,EAAE,CAAC,CAAC;QAEnD,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;QAExB,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;QAExB,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;QAEtB,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACzB,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACO,kBAAkB,CAAC,UAAoB;QAC7C,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YACrC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAE3D,OAAO,MAAM,CAAC;QAClB,CAAC,EAAwB,EAAE,CAAC,CAAC;IACjC,CAAC;CACJ","sourcesContent":["import { TableExternalContext } from '../../table.cell_generator';\nimport { transformCellCv } from '../../table.service';\nimport { PageResult, XCellValue } from '../../table.types';\n\nexport class NormalCellValueTransformer {\n    protected externalInterface: TableExternalContext;\n\n    protected cellData: PageResult;\n\n    public constructor(externalInterface: TableExternalContext, cellData: PageResult) {\n        this.externalInterface = externalInterface;\n\n        this.cellData = cellData;\n    }\n\n    public setValue(cellValue: XCellValue, update?: { cv: NonNullable<XCellValue['cv']>; pv?: string }): Promise<string> {\n        const cv = update?.cv || '';\n\n        cellValue.cv = cv;\n\n        const { value, xtype, text } = transformCellCv(cv);\n\n        cellValue.xtype = xtype;\n\n        cellValue.value = value;\n\n        cellValue.text = text;\n\n        return new Promise(resolve => {\n            resolve(JSON.stringify(cellValue));\n        });\n    }\n\n    /**\n     * 获取依赖键值对\n     * @param dependence 依赖数组\n     * @returns 依赖键值对\n     */\n    protected getDependenceValue(dependence: string[]) {\n        return dependence.reduce((result, dep) => {\n            result[dep] = this.externalInterface.getCellValueById(dep);\n\n            return result;\n        }, <{[key: string]: any}>{});\n    }\n}\n"]}