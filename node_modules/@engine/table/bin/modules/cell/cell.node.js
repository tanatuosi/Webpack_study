import { AbstractTableCell } from './cell.abstract';
const DEFAULT_SIZE = 16;
// REPORT-31375 火狐浏览器rel="preload"无效，用于火狐下字体预加载
BI.createWidget({
    type: BI.DefaultLayout.xtype,
    items: [{
            type: BI.Layout.xtype,
            css: { 'font-family': 'fineui' },
        }],
    element: 'body',
});
export class NodeTableCell extends AbstractTableCell {
    toFullCell() {
        const { style, cell, hyperLinks, celladvancedattr } = this.options;
        const { value, id, indent: $indent = 0, open, direction } = cell;
        const cellText = AbstractTableCell.transform2CellText(value);
        const { contentStyle, borderStyle, backgroundStyle, paddingLeft, paddingRight, } = style;
        const size = contentStyle ? parseInt(contentStyle.fontSize, 10) : DEFAULT_SIZE;
        const ratio = size / DEFAULT_SIZE;
        const textAlign = (contentStyle === null || contentStyle === void 0 ? void 0 : contentStyle.textAlign) || 'left';
        const iconPadding = 10 * ratio;
        const indent = textAlign === 'left' ? $indent * 15 * ratio + iconPadding : 0;
        let xtype = '';
        switch (textAlign) {
            case 'center':
                xtype = 'bi.flow_center';
                break;
            case 'right':
                xtype = 'bi.flow_right';
                break;
            case 'left':
            default:
                xtype = 'bi.flow_left';
        }
        const listeners = [
            {
                eventName: 'CELL_CLICK',
                action: (e, x, y, cell) => {
                    this.fireEvent('CELL_CLICK', { e, x, y, cell, hyperLinks });
                    return true;
                },
            },
            {
                eventName: 'CELL_HOVER',
                action: (e, x, y, cell) => {
                    this.fireEvent('CELL_HOVER', { e, x, y, cell });
                },
            },
            {
                eventName: 'CELL_MOUSE_LEAVE',
                action: (e, x, y, cell) => {
                    this.fireEvent('CELL_MOUSE_LEAVE', { e, x, y, cell });
                },
            },
            {
                eventName: 'CELL_MOUSE_DOWN',
                action: (e, x, y, cell) => {
                    this.fireEvent('CELL_MOUSE_DOWN', { e, x, y, cell });
                },
            },
        ];
        return {
            type: xtype,
            items: [
                {
                    el: BI.isNull(open) ? {} : {
                        type: BI.Icon.xtype,
                        dblclick: false,
                        listeners: [
                            {
                                eventName: 'CELL_CLICK',
                                action: (e, x, y, cell) => {
                                    this.fireEvent('CELL_NODE_CLICK', { e, x, y, cell, open, id, direction });
                                    return true;
                                },
                            },
                        ],
                        icon: Object.assign(Object.assign({}, contentStyle), { text: open ? '\ue75a' : '\ue75b', textAlign: 'center', color: '#ffffff', backgroundColor: '#419bf9', fontStyle: 'normal', fontFamily: 'fineui', rotate: 0, underline: undefined, strikeThrough: '', size }),
                    },
                    left: indent,
                    right: paddingRight,
                    top: 0,
                    bottom: 0,
                },
                {
                    el: {
                        type: BI.Label.xtype,
                        style: contentStyle,
                        text: cellText,
                        listeners,
                    },
                    left: BI.isNull(open) ? Math.max(paddingLeft || 0) : iconPadding,
                    right: paddingRight,
                    top: 0,
                    bottom: 0,
                },
            ],
            backgroundStyle,
            borderStyle,
            value: cellText,
            position: cell.position,
            listeners,
            canCopy: true,
            cursor: hyperLinks.length === 0 ? 'default' : 'pointer',
            valid: cell.valid,
            title: celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.tooltipText,
        };
    }
    // 不支持控件
    toWidget() {
        return undefined;
    }
}
//# sourceMappingURL=cell.node.js.map