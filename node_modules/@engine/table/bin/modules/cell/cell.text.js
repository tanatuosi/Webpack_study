import { AbstractTableCell } from './cell.abstract';
export class TextTableCell extends AbstractTableCell {
    constructor(opts, external) {
        var _a, _b;
        super(opts, external);
        this.showAsHtml = ((_a = opts.celladvancedattr) === null || _a === void 0 ? void 0 : _a.contentShowType) === 'SHOW_AS_HTML';
        const { style, cell, hyperLinks: _hyperLinks } = opts;
        this.cellText = this.getTextByCellValue(cell.value);
        // REPORT-34855 空白单元格不触发点击事件
        // REPORT-43746 空白单元格有背景图片时，可以触发点击事件
        this.hyperLinks = this.cellText || ((_b = style === null || style === void 0 ? void 0 : style.backgroundStyle) === null || _b === void 0 ? void 0 : _b.backgroundImage) ? _hyperLinks : [];
        this.cursor = BI.size(this.hyperLinks) === 0 ? 'default' : 'pointer';
    }
    toFullCell() {
        const { style, cell, celladvancedattr } = this.options;
        const cellText = this.cellText;
        const { contentStyle, borderStyle, backgroundStyle, paddingLeft, paddingRight, spacingBefore, spacingAfter, } = style;
        return {
            type: BI.AbsoluteLayout.xtype,
            items: [
                {
                    el: {
                        type: BI.Label.xtype,
                        style: contentStyle,
                        listeners: [
                            {
                                eventName: 'CELL_CLICK',
                                action: (e, x, y, cell) => {
                                    this.fireEvent('CELL_CLICK', { e, x, y, cell, hyperLinks: this.hyperLinks, id: this.id });
                                    return true;
                                },
                            },
                        ],
                        text: this.showAsHtml ? '' : cellText,
                        autoWrapInfo: cell.autoWrapInfo,
                        overflowConfig: {
                            overflowHide: celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.overflowHide,
                            hideType: celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.hideType,
                            hideStrLength: celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.hideStrLength,
                            appendTailStr: celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.appendTailStr,
                        },
                    },
                    left: paddingLeft,
                    right: paddingRight,
                    top: spacingBefore,
                    bottom: spacingAfter,
                },
            ],
            backgroundStyle,
            borderStyle,
            value: cellText,
            position: cell.position,
            listeners: [
                {
                    eventName: 'CELL_HOVER',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_HOVER', { e, x, y, cell, id: this.id });
                    },
                },
                {
                    eventName: 'CELL_DOUBLE_CLICK',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_DOUBLE_CLICK', { e, x, y, cell, hyperLinks: this.hyperLinks, id: this.id });
                        return true;
                    },
                },
                {
                    eventName: 'CELL_MOUSE_LEAVE',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_MOUSE_LEAVE', { e, x, y, cell });
                    },
                },
                {
                    eventName: 'CELL_MOUSE_DOWN',
                    action: (e, x, y, cell) => {
                        this.fireEvent('CELL_MOUSE_DOWN', { e, x, y, cell });
                    },
                },
            ],
            canCopy: true,
            cursor: this.cursor,
            valid: cell.valid,
            title: celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.tooltipText,
        };
    }
    toHtml() {
        const { cell } = this.options;
        return this.showAsHtml ? {
            id: `${this.id}_html`,
            value: `${cell.value}`,
            cursor: this.cursor,
            extended: true,
        } : undefined;
    }
    toWidget() {
        if (this.shouldNotShowWidget()) {
            return undefined;
        }
        return super.toWidget();
    }
    toCell() {
        return this.shouldNotShowWidget()
            ? this.toFullCell()
            : super.toCell();
    }
    shouldNotShowWidget() {
        return BI.size(this.hyperLinks) > 0 && this.isDirectWidget();
    }
}
//# sourceMappingURL=cell.text.js.map