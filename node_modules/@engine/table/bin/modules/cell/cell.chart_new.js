import { AbstractReportChart, reportChartProvider } from '@engine/chart';
import { instantiateXHyperLinks } from '@engine/link';
import { CellChartManager } from '../table.cell_chart_manager';
import { AbstractTableCell } from './cell.abstract';
export class ChartNewCell extends AbstractTableCell {
    constructor(opts, external) {
        super(opts, external);
        this.fontResizable = false;
        this.cellChartManager = (this.external.getStickerManagers().get(CellChartManager.NAME)) || new CellChartManager();
        this.fontResizable = this.external.getFontResizable();
        external.getStickerManagers().set(CellChartManager.NAME, this.cellChartManager);
    }
    async getChartData(opt) {
        const promises = this.fireEvent('CELL_CHART_FETCH_DATA', {
            e: {},
            cell: {},
            x: this.options.cell.position.x,
            y: this.options.cell.position.y,
            id: this.id,
            requestParams: opt,
        });
        if (BI.size(promises) === 0) {
            return [];
        }
        return BI.last(promises);
    }
    toFullCell() {
        const { style, cell, celladvancedattr } = this.options;
        const { borderStyle, backgroundStyle, } = style;
        return {
            type: BI.AbsoluteLayout.xtype,
            borderStyle,
            backgroundStyle,
            stopPropagation: true,
            position: cell.position,
            title: celladvancedattr === null || celladvancedattr === void 0 ? void 0 : celladvancedattr.tooltipText,
        };
    }
    toHtml() {
        const { cell } = this.options;
        const { chartHeight, chartWidth } = cell;
        const reportName = this.external.getWidgetName();
        const chartID = cell.items ? cell.items[0].simpleChartInShowID : '';
        let ref;
        return {
            id: `${this.id}_html`,
            value: '',
            init: (element, width, height) => {
                if (!element) {
                    return;
                }
                element.css('cursor', cell.cursor || 'default');
                const wScale = Math.round(width) / chartWidth;
                const hScale = Math.round(height) / chartHeight;
                const fontScale = this.fontResizable ? Math.min(wScale, hScale) : 1;
                let chart = this.cellChartManager.getWidgetByName(chartID);
                const isChartInitialized = !!chart;
                if (!chart) {
                    chart = BI.createWidget({
                        type: reportChartProvider.xtype,
                        width,
                        height,
                        wScale,
                        hScale,
                        fontScale,
                        chartAttrGetter: async () => this.getChartData({
                            chartID,
                            widgetName: reportName,
                        })
                            .then(chart => {
                            return Object.assign(Object.assign({}, chart), { chartID });
                        }),
                        instantiateXHyperLinks: javaScriptGroup => instantiateXHyperLinks(javaScriptGroup, {
                            managersGetter: () => this.external.getStickerManagers(),
                        }),
                        listeners: [{
                                eventName: AbstractReportChart.EVENT_LOADED,
                                action: () => {
                                    const params = this.cellChartManager.getParameterCacheByChartID(chartID);
                                    if (!BI.isEmptyObject(params)) {
                                        ref.changeParameter(params);
                                    }
                                },
                            }],
                    });
                    this.cellChartManager.register(chart, chartID);
                }
                BI.createWidget({
                    type: BI.DefaultLayout.xtype,
                    element: element.el,
                    items: [{
                            type: BI.AbsoluteLayout.xtype,
                            items: [
                                !isChartInitialized
                                    ? {
                                        el: chart,
                                        top: 0,
                                        left: 0,
                                        right: 0,
                                        bottom: 0,
                                    }
                                    : {
                                        el: {
                                            type: BI.DefaultLayout.xtype,
                                            mounted() {
                                                BI.mount(chart, this.element[0]);
                                                chart === null || chart === void 0 ? void 0 : chart.element.width(width);
                                                chart === null || chart === void 0 ? void 0 : chart.element.height(height);
                                                chart === null || chart === void 0 ? void 0 : chart.resize(wScale, hScale, fontScale);
                                            },
                                        },
                                        top: 0,
                                        left: 0,
                                        right: 0,
                                        bottom: 0,
                                    },
                            ],
                        }],
                });
            },
        };
    }
    // 不支持控件
    toWidget() {
        return undefined;
    }
    // 不支持状态标记
    toState() {
        return undefined;
    }
}
//# sourceMappingURL=cell.chart_new.js.map