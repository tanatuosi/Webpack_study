/**
 * 多行列对象
 */
export class MutiTableRowColumn {
    constructor(externalContext) {
        this.tableRowColumns = [];
        this.externalContext = externalContext;
    }
    /**
     * 设置所有行对象行高
     * @param height 行高
     */
    setHeight(height) {
        this.tableRowColumns.forEach(item => item.setHeight(height));
    }
    /**
     * 获取所有行对象行高
     * @returns 行高
     */
    getHeight() {
        return this.tableRowColumns.map(item => item.getHeight());
    }
    /**
     * 设置所有列宽
     * @param width 列宽
     */
    setWidth(width) {
        this.tableRowColumns.forEach(item => item.setWidth(width));
    }
    /**
     * 获取所有列宽
     * @returns 列宽
     */
    getWidth() {
        return this.tableRowColumns.map(item => item.getWidth());
    }
    /**
     * 获取所选行/列单元格对象
     * @param index 索引
     * @returns 单元格
     */
    getCell(index) {
        return this.tableRowColumns.map(item => item.getCell(index));
    }
    /**
     * 获取所在行/列
     * @returns 行/列
     */
    getIndex() {
        return this.tableRowColumns.map(item => item.getIndex());
    }
    /**
     * 设置所选行列样式
     */
    setStyle(opts) {
        this.tableRowColumns.forEach(item => item.setStyle(opts));
    }
    /**
     * 展示所选行列悬浮提示
     * @param opts 配置项
     */
    showToolTip(opts) {
        if (!opts.show)
            return;
        this.tableRowColumns.forEach(item => item.showToolTip(opts));
    }
    /**
     * 生成所需的带索引结构
     * @returns 多行列对象
     */
    createMultipleApi(type, position) {
        let start, end;
        switch (type) {
            case 'row':
            default:
                start = position.y;
                end = start + (position.rowSpan || 1);
                break;
            case 'column':
                start = position.x;
                end = start + (position.columnSpan || 1);
                break;
        }
        for (let index = start; index < end; index++) {
            const rowColumn = type === 'row'
                ? this.externalContext.getRow(index + 1)
                : this.externalContext.getColumn(index + 1);
            !BI.isNull(rowColumn) && this.tableRowColumns.push(rowColumn);
        }
        const index4TableRowColumn = {};
        this.tableRowColumns.forEach((item, index) => {
            index4TableRowColumn[index] = item;
        });
        return Object.assign(Object.assign({}, index4TableRowColumn), { length: BI.size(this.tableRowColumns), setHeight: (height) => this.setHeight(height), getHeight: () => this.getHeight(), setWidth: (width) => this.setWidth(width), getWidth: () => this.getWidth(), getCell: (index) => this.getCell(index), getIndex: () => this.getIndex(), setStyle: (opts) => this.setStyle(opts), showToolTip: (opts) => this.showToolTip(opts) });
    }
}
//# sourceMappingURL=table.api_muti_row_column.js.map