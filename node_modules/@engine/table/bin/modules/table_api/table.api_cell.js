import { PopupHandler } from '../handler/handler.popup';
import { transformFontItalic, transformFontWeight, transformTextShadow2Css } from '../table.service';
import { MutiTableRowColumn } from './table.api_muti_row_column';
/**
 * 供外部使用的单元格api
 */
export class TableCell {
    constructor(externalContext, options) {
        this.externalContext = externalContext;
        this.cellData = options;
    }
    /**
     * 获取单元格位置
     * @returns 位置
     */
    getPosition() {
        const { x, y } = this.cellData.position;
        return [y + 1, x + 1];
    }
    getPosition4Inside() {
        return this.cellData.position;
    }
    /**
     * 获取单元格所占行对象
     * @returns 多行对象
     */
    getRow() {
        return this.getTableRowColumn('row');
    }
    /**
     * 获取单元格所占列对象
     * @returns 多列对象
     */
    getColumn() {
        return this.getTableRowColumn('column');
    }
    /**
     * 生成多行列对象
     * @param type 类型，行或列
     * @returns 多行列对象
     */
    getTableRowColumn(type) {
        return new MutiTableRowColumn(this.externalContext)
            .createMultipleApi(type, this.cellData.position);
    }
    /**
     * 获取单元格值
     * @returns 值
     */
    getValue() {
        return this.cellData.value;
    }
    /**
     * 设置单元格悬浮提示
     * @param opts 提示配置
     */
    showToolTip(opts) {
        if (!opts.show)
            return;
        const { content, style } = opts;
        this.externalContext.addHandler(PopupHandler, {
            position: this.getPosition4Inside(),
            scopeType: 'cell',
            body: content === null || content === void 0 ? void 0 : content.text,
            header: content === null || content === void 0 ? void 0 : content.header,
            image: content === null || content === void 0 ? void 0 : content.image,
            style,
        });
    }
    /**
     * 获取单元格样式
     */
    getCellStyle() {
        var _a, _b;
        const { borderStyle, cellBackground, contentStyle, fontStyle } = this.cellData.cellstyle;
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, borderStyle), { backgroundColor: (_a = cellBackground === null || cellBackground === void 0 ? void 0 : cellBackground.background) === null || _a === void 0 ? void 0 : _a.color, backgroundImage: (_b = cellBackground === null || cellBackground === void 0 ? void 0 : cellBackground.background) === null || _b === void 0 ? void 0 : _b.imgUrl }), contentStyle), fontStyle), { textShadow: transformTextShadow2Css(fontStyle.textShadow), italic: transformFontItalic(fontStyle.italic), fontWeight: transformFontWeight(fontStyle.bold) });
    }
    /**
     * 设置单元格样式
     * @param opts 样式配置
     */
    setStyle(opts) {
        this.externalContext.emitCellEvent('CELL_SET_STYLE', Object.assign({ style: Object.assign(Object.assign({}, this.getCellStyle()), opts) }, this.getPosition4Inside()));
    }
}
//# sourceMappingURL=table.api_cell.js.map