{"version":3,"file":"table.api_muti_row_column.js","sourceRoot":"","sources":["../../../src/modules/table_api/table.api_muti_row_column.ts"],"names":[],"mappings":"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","sourcesContent":["import { CellSetStyleArgs, CellTooltipArgs, TableApiContext, XCellPosition } from '../table.types';\nimport { TableRowColumn } from './table.api_row_column.abstract';\n\n/**\n * 多行列对象\n */\nexport class MutiTableRowColumn {\n    private tableRowColumns: TableRowColumn[] = [];\n    private externalContext: TableApiContext;\n\n    public constructor (externalContext: TableApiContext) {\n        this.externalContext = externalContext;\n    }\n\n    /**\n     * 设置所有行对象行高\n     * @param height 行高\n     */\n    public setHeight (height: number) {\n        this.tableRowColumns.forEach(item => item.setHeight(height));\n    }\n\n    /**\n     * 获取所有行对象行高\n     * @returns 行高\n     */\n    public getHeight () {\n        return this.tableRowColumns.map(item => item.getHeight());\n    }\n\n    /**\n     * 设置所有列宽\n     * @param width 列宽\n     */\n    public setWidth (width: number) {\n        this.tableRowColumns.forEach(item => item.setWidth(width));\n    }\n\n    /**\n     * 获取所有列宽\n     * @returns 列宽\n     */\n    public getWidth () {\n        return this.tableRowColumns.map(item => item.getWidth());\n    }\n\n    /**\n     * 获取所选行/列单元格对象\n     * @param index 索引\n     * @returns 单元格\n     */\n    public getCell (index: number) {\n        return this.tableRowColumns.map(item => item.getCell(index));\n    }\n\n    /**\n     * 获取所在行/列\n     * @returns 行/列\n     */\n    public getIndex () {\n        return this.tableRowColumns.map(item => item.getIndex());\n    }\n\n    /**\n     * 设置所选行列样式\n     */\n    public setStyle (opts: CellSetStyleArgs) {\n        this.tableRowColumns.forEach(item => item.setStyle(opts));\n    }\n\n    /**\n     * 展示所选行列悬浮提示\n     * @param opts 配置项\n     */\n    public showToolTip (opts: CellTooltipArgs) {\n        if (!opts.show) return;\n        \n        this.tableRowColumns.forEach(item => item.showToolTip(opts));\n    }\n\n    /**\n     * 生成所需的带索引结构\n     * @returns 多行列对象\n     */\n    public createMultipleApi (type: string, position: XCellPosition) {\n        let start: number, end: number;\n\n        switch (type) {\n            case 'row':\n            default:\n                start = position.y;\n                end = start + (position.rowSpan || 1);\n                break;\n            case 'column':\n                start = position.x;\n                end = start + (position.columnSpan || 1);\n                break;\n        }\n        \n        for (let index = start; index < end; index++) {\n            const rowColumn = type === 'row'\n                ? this.externalContext.getRow(index + 1)\n                : this.externalContext.getColumn(index + 1);\n            !BI.isNull(rowColumn) && this.tableRowColumns.push(rowColumn);\n        }\n        \n        const index4TableRowColumn: {[key: number]: TableRowColumn} = {};\n\n        this.tableRowColumns.forEach((item, index) => {\n            index4TableRowColumn[index] = item;\n        });\n\n        return {\n            ...index4TableRowColumn,\n            length: BI.size(this.tableRowColumns),\n            setHeight: (height: number) => this.setHeight(height),\n            getHeight: () => this.getHeight(),\n            setWidth: (width: number) => this.setWidth(width),\n            getWidth: () => this.getWidth(),\n            getCell: (index: number) => this.getCell(index),\n            getIndex: () => this.getIndex(),\n            setStyle: (opts: CellSetStyleArgs) => this.setStyle(opts),\n            showToolTip: (opts: CellTooltipArgs) => this.showToolTip(opts),\n        } as ArrayLike<TableRowColumn>;\n    }\n}\n"]}