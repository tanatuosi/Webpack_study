import { fetchChartData, reportChartProvider } from '@engine/chart';
import { AbstractLink, fetchChartPop, instantiateXHyperLinks } from '@engine/link';
import { ReportPopover } from '@engine/utils';
export class ChartNewLink extends AbstractLink {
    constructor(props) {
        var _a;
        super(props);
        const { width, height, chartDigTitle, chartHyperLinkId, parameters, external } = props;
        this.width = width;
        this.height = height;
        this.chartDigTitle = chartDigTitle;
        this.chartHyperLinkId = chartHyperLinkId;
        this.parameters = parameters;
        this.chartManager = (_a = external === null || external === void 0 ? void 0 : external.managersGetter) === null || _a === void 0 ? void 0 : _a.call(external);
    }
    _excute() {
        const params = this.parameters ? this.parameters.reduce((params, { value, name }) => {
            params[name.toUpperCase()] = value;
            return params;
        }, {}) : undefined;
        fetchChartPop(this.chartHyperLinkId, params).then(result => {
            this.openChart({
                width: this.width,
                height: this.height,
                chartID: result.items[0].simpleChartInShowID,
                chartHyperLinkId: this.chartHyperLinkId,
            });
        });
    }
    openChart(options) {
        const id = BI.UUID();
        const { chartID, width, height, chartHyperLinkId } = options;
        BI.Popovers.create(id, {
            type: ReportPopover.xtype,
            width,
            height,
            header: this.chartDigTitle,
            body: {
                type: reportChartProvider.xtype,
                chartHyperLinkId,
                instantiateXHyperLinks: (javaScriptGroup) => instantiateXHyperLinks(javaScriptGroup, {
                    managersGetter: () => this.chartManager,
                }),
                chartAttrGetter: async () => {
                    const chart = await fetchChartData({ chartID });
                    return Object.assign(Object.assign({}, chart), { chartID });
                },
            },
        }).open(id);
        return id;
    }
}
//# sourceMappingURL=chart.link_new.js.map