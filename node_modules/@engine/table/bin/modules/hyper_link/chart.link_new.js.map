{"version":3,"file":"chart.link_new.js","sourceRoot":"","sources":["../../../src/modules/hyper_link/chart.link_new.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AACpE,OAAO,EAAE,YAAY,EAAE,aAAa,EAAsC,sBAAsB,EAAc,MAAM,cAAc,CAAC;AACnI,OAAO,EAAE,aAAa,EAAiB,MAAM,eAAe,CAAC;AAG7D,MAAM,OAAO,YAAa,SAAQ,YAAY;IAQ1C,YAAmB,KAAqB;;QACpC,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,gBAAgB,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;QACvF,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAiC,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,cAAc,+CAAxB,QAAQ,CAAoB,CAAC;IACnF,CAAC;IAES,OAAO;QACb,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE;YAChF,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,KAAK,CAAC;YAEnC,OAAO,MAAM,CAAC;QAClB,CAAC,EAAE,EAA0B,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC3C,aAAa,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACvD,IAAI,CAAC,SAAS,CAAC;gBACX,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,mBAAmB;gBAC5C,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;aAC1C,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAES,SAAS,CAAC,OAKnB;QACG,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QACrB,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC;QAC7D,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE;YACnB,IAAI,EAAE,aAAa,CAAC,KAAK;YACzB,KAAK;YACL,MAAM;YACN,MAAM,EAAE,IAAI,CAAC,aAAa;YAC1B,IAAI,EAAE;gBACF,IAAI,EAAE,mBAAmB,CAAC,KAAK;gBAC/B,gBAAgB;gBAChB,sBAAsB,EAAE,CAAC,eAA6B,EAAE,EAAE,CAAC,sBAAsB,CAAC,eAAe,EAAE;oBAC/F,cAAc,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY;iBAC1C,CAAC;gBACF,eAAe,EAAE,KAAK,IAAI,EAAE;oBACxB,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;oBAEhD,uCACO,KAAK,KACR,OAAO,IACT;gBACN,CAAC;aACJ;SACJ,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEZ,OAAO,EAAE,CAAC;IACd,CAAC;CACJ","sourcesContent":["import { fetchChartData, reportChartProvider } from '@engine/chart';\nimport { AbstractLink, fetchChartPop, HyperLinkParameter, HyperLinkProps, instantiateXHyperLinks, XHyperLink } from '@engine/link';\nimport { ReportPopover, WidgetManager } from '@engine/utils';\nimport { CellChartManager } from '../table.cell_chart_manager';\n\nexport class ChartNewLink extends AbstractLink {\n    protected width?: number;\n    protected height?: number;\n    protected parameters?: HyperLinkParameter[];\n    protected chartDigTitle: string;\n    protected chartHyperLinkId: string;\n    private chartManager?: CellChartManager;\n    \n    public constructor(props: ChartLinkProps) {\n        super(props);\n        const { width, height, chartDigTitle, chartHyperLinkId, parameters, external } = props;\n        this.width = width;\n        this.height = height;\n        this.chartDigTitle = chartDigTitle;\n        this.chartHyperLinkId = chartHyperLinkId;\n        this.parameters = parameters;\n        this.chartManager = <CellChartManager | undefined>external?.managersGetter?.();\n    }\n    \n    protected _excute(): void {\n        const params = this.parameters ? this.parameters.reduce((params, { value, name }) => {\n            params[name.toUpperCase()] = value;\n\n            return params;\n        }, {} as {[key: string]: any}) : undefined;\n        fetchChartPop(this.chartHyperLinkId, params).then(result => {\n            this.openChart({\n                width: this.width,\n                height: this.height,\n                chartID: result.items[0].simpleChartInShowID,\n                chartHyperLinkId: this.chartHyperLinkId,\n            });\n        });\n    }\n\n    protected openChart(options: {\n        chartID: string;\n        width?: number;\n        height?: number;\n        chartHyperLinkId: string;\n    }) {\n        const id = BI.UUID();\n        const { chartID, width, height, chartHyperLinkId } = options;\n        BI.Popovers.create(id, {\n            type: ReportPopover.xtype,\n            width,\n            height,\n            header: this.chartDigTitle,\n            body: {\n                type: reportChartProvider.xtype,\n                chartHyperLinkId,\n                instantiateXHyperLinks: (javaScriptGroup: XHyperLink[]) => instantiateXHyperLinks(javaScriptGroup, {\n                    managersGetter: () => this.chartManager,\n                }),\n                chartAttrGetter: async () => {\n                    const chart = await fetchChartData({ chartID });\n                    \n                    return {\n                        ...chart,\n                        chartID,\n                    };\n                },\n            },\n        }).open(id);\n        \n        return id;\n    }\n}\n\nexport interface ChartLinkProps extends HyperLinkProps {\n    chartDigTitle: string;\n    chartHyperLinkId: string;\n    parameters?: HyperLinkParameter[];\n    external?: {\n        managersGetter: () => Map<string, WidgetManager<any>>;\n    };\n}\n"]}