var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { errorTip, shortcut } from '@engine/core';
import { HyperLinkClickHandler, instantiateXHyperLinks } from '@engine/link';
import { fetchChartHyperLinks } from '../chart.crud';
import { chartManager } from '../chart.manager';
import { AbstractReportChart } from './chart.abstract';
let ReportChartBeta = class ReportChartBeta extends AbstractReportChart {
    constructor() {
        super(...arguments);
        this.hyperlinkHandler = new HyperLinkClickHandler(widget => {
            BI.createWidget(Object.assign(Object.assign({}, widget), { element: this }));
        });
        this.props = {
            chartAttrGetter: async () => ({}),
            autoSize: true,
            instantiateXHyperLinks: (javaScriptGroup) => instantiateXHyperLinks(javaScriptGroup),
            wScale: 1,
            hScale: 1,
            fontScale: 1,
            chartHyperLinkId: '',
        };
    }
    render() {
        VanCharts.resetGlobalScale(this.options.fontScale);
        return {
            type: BI.AbsoluteLayout.xtype,
        };
    }
    mounted() {
        this.getChartAttr().then(chartAttr => {
            if ('errorCode' in chartAttr) {
                this.fireEvent('EVENT_SHOW_ERROR', chartAttr);
                throw {
                    errorCode: chartAttr.errorCode,
                    errorMsg: chartAttr.errorMsg,
                };
            }
            this.chartAttr = chartAttr;
            const chart = chartManager.getWidgetByName(this.chartAttr.chartID);
            chart && chart.remove();
            this.initChart();
            this.fireEvent(AbstractReportChart.EVENT_LOADED);
        });
    }
    refresh() {
        const { wScale, hScale, fontScale } = this.options;
        this.resize(wScale, hScale, fontScale);
    }
    async reload(attr) {
        this.chartAttr = attr ? attr : await this.getChartAttr();
        this.initChart();
    }
    /**
     * 修改图表参数，用于联动
     * @param params 参数
     */
    changeParameter(params) {
        this.chart.changeParameter(params);
    }
    resize(_wScale, _hScale, fontScale) {
        var _a;
        this.options.fontScale = fontScale;
        VanCharts.resetGlobalScale(fontScale);
        (_a = this.chart) === null || _a === void 0 ? void 0 : _a.resize();
    }
    initChart() {
        this.remove();
        this.enforceChartAttr();
        this.chart = new VanChartWidget(this.chartAttr, this.element);
        chartManager.register(this, this.chartAttr.chartID);
    }
    enforceChartAttr() {
        var _a;
        const { fontScale } = this.options;
        if ((_a = this.chartAttr) === null || _a === void 0 ? void 0 : _a.chartAttr) {
            this.chartAttr.chartAttr.scale = fontScale;
            // FIXME: 图表那边手动设置width和height还有点问题，先注释掉
            // if (!this.options.autoSize) {
            //     this.chartAttr.chartAttr.width = this.chartAttr.width;
            //     this.chartAttr.chartAttr.height = this.chartAttr.height;
            // }
        }
    }
    remove() {
        this.removeChart();
        this.chartAttr && chartManager.getWidgetsMap().delete(this.chartAttr.chartID);
    }
    destroy() {
        this.remove();
    }
    removeChart() {
        if (this.chart && this.chart.chartWrapper) {
            this.chart.chartWrapper.clearAll();
            this.chart.options = this.chart.chartWrapper = null;
        }
    }
    async getChartAttr() {
        const chartAttr = await this.options.chartAttrGetter();
        return Object.assign(Object.assign({}, chartAttr), { doFineHyperlink: (e, params, filter = arr => arr) => {
                let hyperLinks = [];
                !params.ChartHyperlink_ID && (params.ChartHyperlink_ID = this.options.chartHyperLinkId);
                fetchChartHyperLinks(params)
                    .then(result => {
                    var _a;
                    const javaScriptGroup = filter(((_a = result.nxNameJavascriptGroup) === null || _a === void 0 ? void 0 : _a.javaScriptGroup) || []);
                    hyperLinks = this.options.instantiateXHyperLinks(javaScriptGroup);
                    this.hyperlinkHandler.handle(e, hyperLinks);
                });
            } });
    }
};
ReportChartBeta.xtype = 'report.chart_beta';
ReportChartBeta.VERSION = '1.0.0';
ReportChartBeta.BUILD_TIME = '2020-8-31 09:27:02';
__decorate([
    errorTip()
], ReportChartBeta.prototype, "render", null);
ReportChartBeta = __decorate([
    shortcut()
], ReportChartBeta);
export { ReportChartBeta };
//# sourceMappingURL=chart_beta.js.map