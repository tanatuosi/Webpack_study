var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { provider } from '@engine/core';
import { AbstractErrorHandler } from './error_handler.abstract';
import { SESSION_ERROR_CODE } from './error_handler.constant';
import { EmptyErrorHandler } from './error_handler.empty';
import { GlobalErrorHandler } from './error_handler.global';
/**
 * 对外使用的provider
 */
let ErrorHandlerProvider = class ErrorHandlerProvider {
    constructor() {
        this.errorHandlerDict = new Map([
            [SESSION_ERROR_CODE, GlobalErrorHandler],
        ]);
    }
    $get() {
        const provider = this;
        return class {
            getHandler(key) {
                const ErrorHandler = provider.errorHandlerDict.get(key) || EmptyErrorHandler;
                return new ErrorHandler();
            }
            setHandler(key, value) {
                provider.errorHandlerDict.set(key, value);
            }
            handle(response) {
                try {
                    const data = response.data;
                    // data可能为空
                    if (data === null || data === void 0 ? void 0 : data.errorCode) {
                        this.getHandler(data.errorCode).handle(data);
                    }
                    return response;
                }
                catch (_a) {
                    throw response;
                }
            }
        };
    }
    addErrorHandler(type, value) {
        const errorHandler = BI.inherit(AbstractErrorHandler, value);
        this.errorHandlerDict.set(type, errorHandler);
    }
};
ErrorHandlerProvider.xtype = 'error.handle.provider';
ErrorHandlerProvider = __decorate([
    provider()
], ErrorHandlerProvider);
export const errorHandlerProvider = BI.Providers.getProvider(ErrorHandlerProvider.xtype);
//# sourceMappingURL=error_handler.js.map