{"version":3,"file":"error_handler.js","sourceRoot":"","sources":["../../../../src/modules/interceptor/error_handler/error_handler.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,QAAQ,EAAQ,MAAM,cAAc,CAAC;AAE9C,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAChE,OAAO,EAAE,kBAAkB,EAAE,MAAM,0BAA0B,CAAC;AAC9D,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAE5D;;GAEG;AAGH,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAA1B;QAGY,qBAAgB,GAAG,IAAI,GAAG,CAAqC;YACnE,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;SAC3C,CAAC,CAAC;IAqCP,CAAC;IAnCU,IAAI;QACP,MAAM,QAAQ,GAAG,IAAI,CAAC;QAEtB,OAAO;YACI,UAAU,CAAE,GAAW;gBAC1B,MAAM,YAAY,GAA+B,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC;gBAEzG,OAAO,IAAI,YAAY,EAAE,CAAC;YAC9B,CAAC;YAEM,UAAU,CAAE,GAAW,EAAE,KAAiC;gBAC7D,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC9C,CAAC;YAEM,MAAM,CAAC,QAAuB;gBACjC,IAAI;oBACA,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;oBAC3B,WAAW;oBACX,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,SAAS,EAAE;wBACjB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;qBAChD;oBAED,OAAO,QAAQ,CAAC;iBACnB;gBAAC,WAAM;oBACJ,MAAM,QAAQ,CAAC;iBAClB;YACL,CAAC;SACJ,CAAC;IACN,CAAC;IAEM,eAAe,CAAC,IAAY,EAAE,KAA2B;QAC5D,MAAM,YAAY,GAAG,EAAE,CAAC,OAAO,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;QAE7D,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAClD,CAAC;CACJ,CAAA;AAzCiB,0BAAK,GAAG,uBAAuB,CAAC;AAD5C,oBAAoB;IADzB,QAAQ,EAAE;GACL,oBAAoB,CA0CzB;AAED,MAAM,CAAC,MAAM,oBAAoB,GAA2D,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import { provider, Type } from '@engine/core';\nimport { AxiosResponse } from 'axios';\nimport { AbstractErrorHandler } from './error_handler.abstract';\nimport { SESSION_ERROR_CODE } from './error_handler.constant';\nimport { EmptyErrorHandler } from './error_handler.empty';\nimport { GlobalErrorHandler } from './error_handler.global';\n\n/**\n * 对外使用的provider\n */\n\n@provider()\nclass ErrorHandlerProvider {\n    public static xtype = 'error.handle.provider';\n\n    private errorHandlerDict = new Map<string, Type<AbstractErrorHandler>>([\n        [SESSION_ERROR_CODE, GlobalErrorHandler],\n    ]);\n\n    public $get () {\n        const provider = this;\n\n        return class {\n            public getHandler (key: string) {\n                const ErrorHandler: Type<AbstractErrorHandler> = provider.errorHandlerDict.get(key) || EmptyErrorHandler;\n            \n                return new ErrorHandler();\n            }\n\n            public setHandler (key: string, value: Type<AbstractErrorHandler>) {\n                provider.errorHandlerDict.set(key, value);\n            }\n\n            public handle(response: AxiosResponse): AxiosResponse {\n                try {\n                    const data = response.data;\n                    // data可能为空\n                    if (data?.errorCode) {\n                        this.getHandler(data.errorCode).handle(data);\n                    }\n\n                    return response;\n                } catch {\n                    throw response;\n                }\n            }\n        };\n    }\n\n    public addErrorHandler(type: string, value: {[key: string]: any}) {\n        const errorHandler = BI.inherit(AbstractErrorHandler, value);\n    \n        this.errorHandlerDict.set(type, errorHandler);\n    }\n}\n\nexport const errorHandlerProvider: InstanceType<ReturnType<ErrorHandlerProvider['$get']>> = BI.Providers.getProvider(ErrorHandlerProvider.xtype);\n"]}