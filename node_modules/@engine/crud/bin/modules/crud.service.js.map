{"version":3,"file":"crud.service.js","sourceRoot":"","sources":["../../src/modules/crud.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { envProvider } from '@engine/core';\nimport axios, { AxiosError, AxiosResponse } from 'axios';\nimport { CrudParams, CrudReqOpts } from './crud.request';\nimport { interceptor } from './interceptor/interceptor';\n\nexport const FINE_AUTH_TOKEN_NAME = 'fine_auth_token';\n\n/**\n * encode两次参数\n * @param $v 参数对象或字符串\n */\nexport function stringfyParams($v: any): string {\n    const v = BI.isString($v) ? $v : JSON.stringify($v);\n\n    return encodeURIComponent(encodeURIComponent(v));\n}\n\n/**\n * 参数序列化\n * @param params 参数对象\n * @param encoder 编码器\n */\nexport function paramsSerializer(params: { [key: string]: any }, encoder: (v: any) => string = stringfyParams): string {\n    return Object.keys(params || {})\n        .map(paramKey => {\n            const paramValue = params[paramKey];\n\n            if (BI.isNull(paramValue)) {\n                return '';\n            }\n\n            const value = encoder(BI.isObject(paramValue) ? JSON.stringify(paramValue) : paramValue);\n\n            return `${encoder(paramKey)}=${value}`;\n        })\n        .filter(v => v !== '')\n        .join('&');\n}\n\n/**\n * url加参数\n * @param url 加所需参数之前的url\n * @param params 参数\n */\nexport function appendParams2Url(url: string, params?: {[key: string]: any}): string {\n    if (!params) {\n        return url;\n    }\n        \n    const joinChar = url.includes('?')\n        ? BI.isNotEmptyObject(params) ? '&' : ''\n        : '?';\n        \n    return `${url}${joinChar}${paramsSerializer(params)}`;\n}\n\nasync function basicRequest(reqOptions: CrudReqOpts = {}): Promise<AxiosResponse> | never {\n    const { url, type, headers = {}, data, params = {}, noProgress = false, cancelToken, baseURL = envProvider.ReqPrefix } = reqOptions;\n\n    // !noProgress && NProgress.start();\n\n    return axios\n        .request({\n            url,\n            // baseURL为空字符串时使用FineServletURL\n            baseURL: baseURL || envProvider.FineServletURL,\n            method: type,\n            headers: {\n                ...headers,\n                'X-Requested-With': 'XMLHttpRequest',\n            },\n            params: {\n                ...params,\n                _: BI.getDate().getTime(),\n            },\n            paramsSerializer,\n            data,\n            cancelToken,\n        })\n        .then((response: AxiosResponse) => interceptor.handle(response))\n        // .then((response: AxiosResponse) => {\n        //     !noProgress && NProgress.done();\n\n        //     return response;\n        // })\n        .catch((error: AxiosError) => {\n            if (!noProgress) {\n                // NProgress.done();\n            }\n\n            throw error;\n        });\n}\n\nasync function request(reqOptions: CrudReqOpts = {}) {\n    return basicRequest(reqOptions)\n        .then((response: AxiosResponse) => {\n            const status = response.status;\n            \n            return status === 200\n                ? BI.isString(response.data)\n                    ? transformStringResponseData2JSON(response.data)\n                    : response.data\n                : {};\n        });\n}\n\nexport function requestGet(url: string, opts: CrudReqOpts = {}) {\n    const { data, params = {}, headers = {}, noProgress = false, cancelToken, baseURL } = opts;\n    \n    return request({\n        url,\n        type: 'GET',\n        data,\n        params: {\n            sessionID: envProvider.SessionID,\n            ...params,\n        },\n        headers,\n        noProgress,\n        cancelToken,\n        baseURL,\n    });\n}\n\nexport function requestGetByAuth(url: string, opts: CrudReqOpts = {}) {\n    const { data, params = {}, baseURL } = opts;\n\n    return requestGet(url, {\n        data,\n        params,\n        headers: {\n            Authorization: `Bearer ${getCookieByName(FINE_AUTH_TOKEN_NAME)}`,\n        },\n        baseURL,\n    });\n}\n\nexport function requestPost(url: string, opts: CrudReqOpts = {}) {\n    const { data, params = {}, headers = {}, noProgress = false, cancelToken, baseURL, encoder } = opts;\n\n    return request({\n        url,\n        type: 'POST',\n        data: paramsSerializer(data, encoder),\n        params,\n        headers: {\n            sessionID: envProvider.SessionID,\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            ...headers,\n        },\n        noProgress,\n        cancelToken,\n        baseURL,\n    });\n}\n\nexport function requestPostByAuth(url: string, opts: {\n    data?: any,\n    params?: CrudParams,\n    [key: string]: any,\n} = {}) {\n    const { data, params = {}, ...args } = opts;\n\n    return requestPost(url, {\n        data,\n        params,\n        ...args,\n        headers:  {\n            Authorization: `Bearer ${getCookieByName(FINE_AUTH_TOKEN_NAME)}`,\n        },\n    });\n}\n\nexport function requestGetByXHR(url: string) {\n    const targetUrl = `${envProvider.ReqPrefix}/${url}?sessionID=${envProvider.SessionID}`;\n    if (BI.isFunction(window.fetch) && BI.isChrome()) {\n        /** 只供 Chrome 浏览器走此流程 */\n        fetch(targetUrl, { keepalive: true });\n    } else {\n        const client = new XMLHttpRequest();\n        client.open('GET', targetUrl, false); // third parameter indicates sync xhr\n        client.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');\n        client.send();\n    }\n}\n\nexport function getCookieByName(name: string): string | null {\n    return BI.Cache.getCookie(name);\n}\n\n/**\n * 后台返回转为json结构\n * @param data 返回的字符串\n */\nfunction transformStringResponseData2JSON(data: string) {\n    const json = BI.jsonDecode(data);\n\n    return data === ''\n        ? data\n        : BI.isEmptyArray(json) ? data : json;\n}\n\nexport function getParamData(noNeedParams = [] as string[]) {\n    const url = getSerachUrl();\n    const paramData: {\n        [key: string]: string,\n    } = {};\n    url.split('&').forEach(item => {\n        const keyValue = item.split('=');\n        if (!noNeedParams.some(key => key === keyValue[0])) {\n            // 因为后面get接口会自动把参数encode两次，这边拿到的参数已经是encode两次过的了，所以这边需要再decode两次拿到正确数据。\n            paramData[keyValue[0]] = decodeURIComponent(decodeURIComponent(keyValue[1]));\n        }\n    });\n    \n    return paramData;\n}\n\n/**\n * 获取当前url\n */\nexport function getSerachUrl(): string {\n    return window.location.search.substr(1);\n}\n\nexport function completeUrl(url: string, params?: { [key: string]: any }) {\n    const query = paramsSerializer(params || {});\n\n    return `${envProvider.ReqPrefix}/${url}?sessionID=${envProvider.SessionID}${query === '' ? '' : `&${query}`}`;\n}\n"]}