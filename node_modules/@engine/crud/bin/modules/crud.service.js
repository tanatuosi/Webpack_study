var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { envProvider } from '@engine/core';
import axios from 'axios';
import { interceptor } from './interceptor/interceptor';
export const FINE_AUTH_TOKEN_NAME = 'fine_auth_token';
/**
 * encode两次参数
 * @param $v 参数对象或字符串
 */
export function stringfyParams($v) {
    const v = BI.isString($v) ? $v : JSON.stringify($v);
    return encodeURIComponent(encodeURIComponent(v));
}
/**
 * 参数序列化
 * @param params 参数对象
 * @param encoder 编码器
 */
export function paramsSerializer(params, encoder = stringfyParams) {
    return Object.keys(params || {})
        .map(paramKey => {
        const paramValue = params[paramKey];
        if (BI.isNull(paramValue)) {
            return '';
        }
        const value = encoder(BI.isObject(paramValue) ? JSON.stringify(paramValue) : paramValue);
        return `${encoder(paramKey)}=${value}`;
    })
        .filter(v => v !== '')
        .join('&');
}
/**
 * url加参数
 * @param url 加所需参数之前的url
 * @param params 参数
 */
export function appendParams2Url(url, params) {
    if (!params) {
        return url;
    }
    const joinChar = url.includes('?')
        ? BI.isNotEmptyObject(params) ? '&' : ''
        : '?';
    return `${url}${joinChar}${paramsSerializer(params)}`;
}
async function basicRequest(reqOptions = {}) {
    const { url, type, headers = {}, data, params = {}, noProgress = false, cancelToken, baseURL = envProvider.ReqPrefix } = reqOptions;
    // !noProgress && NProgress.start();
    return axios
        .request({
        url,
        // baseURL为空字符串时使用FineServletURL
        baseURL: baseURL || envProvider.FineServletURL,
        method: type,
        headers: Object.assign(Object.assign({}, headers), { 'X-Requested-With': 'XMLHttpRequest' }),
        params: Object.assign(Object.assign({}, params), { _: BI.getDate().getTime() }),
        paramsSerializer,
        data,
        cancelToken,
    })
        .then((response) => interceptor.handle(response))
        // .then((response: AxiosResponse) => {
        //     !noProgress && NProgress.done();
        //     return response;
        // })
        .catch((error) => {
        if (!noProgress) {
            // NProgress.done();
        }
        throw error;
    });
}
async function request(reqOptions = {}) {
    return basicRequest(reqOptions)
        .then((response) => {
        const status = response.status;
        return status === 200
            ? BI.isString(response.data)
                ? transformStringResponseData2JSON(response.data)
                : response.data
            : {};
    });
}
export function requestGet(url, opts = {}) {
    const { data, params = {}, headers = {}, noProgress = false, cancelToken, baseURL } = opts;
    return request({
        url,
        type: 'GET',
        data,
        params: Object.assign({ sessionID: envProvider.SessionID }, params),
        headers,
        noProgress,
        cancelToken,
        baseURL,
    });
}
export function requestGetByAuth(url, opts = {}) {
    const { data, params = {}, baseURL } = opts;
    return requestGet(url, {
        data,
        params,
        headers: {
            Authorization: `Bearer ${getCookieByName(FINE_AUTH_TOKEN_NAME)}`,
        },
        baseURL,
    });
}
export function requestPost(url, opts = {}) {
    const { data, params = {}, headers = {}, noProgress = false, cancelToken, baseURL, encoder } = opts;
    return request({
        url,
        type: 'POST',
        data: paramsSerializer(data, encoder),
        params,
        headers: Object.assign({ sessionID: envProvider.SessionID, 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }, headers),
        noProgress,
        cancelToken,
        baseURL,
    });
}
export function requestPostByAuth(url, opts = {}) {
    const { data, params = {} } = opts, args = __rest(opts, ["data", "params"]);
    return requestPost(url, Object.assign(Object.assign({ data,
        params }, args), { headers: {
            Authorization: `Bearer ${getCookieByName(FINE_AUTH_TOKEN_NAME)}`,
        } }));
}
export function requestGetByXHR(url) {
    const targetUrl = `${envProvider.ReqPrefix}/${url}?sessionID=${envProvider.SessionID}`;
    if (BI.isFunction(window.fetch) && BI.isChrome()) {
        /** 只供 Chrome 浏览器走此流程 */
        fetch(targetUrl, { keepalive: true });
    }
    else {
        const client = new XMLHttpRequest();
        client.open('GET', targetUrl, false); // third parameter indicates sync xhr
        client.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');
        client.send();
    }
}
export function getCookieByName(name) {
    return BI.Cache.getCookie(name);
}
/**
 * 后台返回转为json结构
 * @param data 返回的字符串
 */
function transformStringResponseData2JSON(data) {
    const json = BI.jsonDecode(data);
    return data === ''
        ? data
        : BI.isEmptyArray(json) ? data : json;
}
export function getParamData(noNeedParams = []) {
    const url = getSerachUrl();
    const paramData = {};
    url.split('&').forEach(item => {
        const keyValue = item.split('=');
        if (!noNeedParams.some(key => key === keyValue[0])) {
            // 因为后面get接口会自动把参数encode两次，这边拿到的参数已经是encode两次过的了，所以这边需要再decode两次拿到正确数据。
            paramData[keyValue[0]] = decodeURIComponent(decodeURIComponent(keyValue[1]));
        }
    });
    return paramData;
}
/**
 * 获取当前url
 */
export function getSerachUrl() {
    return window.location.search.substr(1);
}
export function completeUrl(url, params) {
    const query = paramsSerializer(params || {});
    return `${envProvider.ReqPrefix}/${url}?sessionID=${envProvider.SessionID}${query === '' ? '' : `&${query}`}`;
}
//# sourceMappingURL=crud.service.js.map