import { FINE_AUTH_TOKEN_NAME, getCookieByName, requestGetByXHR, requestPost } from './crud.service';
let startRenderTime = undefined;
// 判断使用_self方式导出场景
let isAfterBySelf = false;
/**
 * 用户是否登入
 */
export function isLogin() {
    return !!getCookieByName(FINE_AUTH_TOKEN_NAME);
}
/**
 * 关闭session
 */
export function closeSession() {
    // KERNEL-1254 当页面刷新时，unload事件中使用axios发送请求会被cancel掉
    // 灵感来源：https://juejin.im/post/5b21c61cf265da6e5415297f
    // 官方文档推荐XMLHttpRequest或者image：https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon
    requestGetByXHR('session/close');
}
/**
 * 页面性能埋点
 */
export function recordConsumption() {
    if (!startRenderTime) {
        return;
    }
    const stopRenderTime = new Date();
    requestPost('consume', {
        data: {
            render: {
                time: startRenderTime.getTime(),
                finish: stopRenderTime.getTime(),
                consume: stopRenderTime.getTime() - startRenderTime.getTime(),
                memory: BI.get(performance, 'memory.usedJSHeapSize'),
            },
        },
    });
    startRenderTime = undefined;
    return;
}
/**
 * post传参
 * @param url 地址
 * @param parameters 参数
 * @param target 目标
 */
export function openUrlByPost(url, parameters, target = '_self') {
    const temp_form = document.createElement('form');
    temp_form.action = url;
    if (target === '_self')
        isAfterBySelf = true;
    temp_form.target = target;
    temp_form.method = 'post';
    temp_form.style.display = 'none';
    Object.keys(parameters || {})
        .forEach(paramKey => {
        const value = parameters[paramKey];
        if (value) {
            const opt = document.createElement('textarea');
            opt.name = paramKey;
            opt.value = value;
            temp_form.appendChild(opt);
        }
    });
    document.body.appendChild(temp_form);
    temp_form.submit();
    temp_form.remove();
}
/**
 * 查看是否为_self open之后
 * @returns boolean
 */
export function checkIfIsAfterBySelf() {
    return isAfterBySelf;
}
/**
 * 重置_self open状态
 */
export function resetIsAfterBySelf() {
    isAfterBySelf = false;
}
//# sourceMappingURL=crud.request.js.map