/*! time: 2022/11/30 15:20:26; branch: remotes/origin/master commit: 9800147ee64040a2a7acc0a07da49409cc66c638 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 981);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1);
var core = __webpack_require__(7);
var hide = __webpack_require__(14);
var redefine = __webpack_require__(11);
var ctx = __webpack_require__(18);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(63)('wks');
var uid = __webpack_require__(31);
var Symbol = __webpack_require__(1).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(20);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.12' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(2)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(3);
var IE8_DOM_DEFINE = __webpack_require__(105);
var toPrimitive = __webpack_require__(28);
var dP = Object.defineProperty;

exports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(25);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1);
var hide = __webpack_require__(14);
var has = __webpack_require__(13);
var SRC = __webpack_require__(31)('src');
var $toString = __webpack_require__(534);
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(7).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var fails = __webpack_require__(2);
var defined = __webpack_require__(25);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),
/* 13 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(9);
var createDesc = __webpack_require__(30);
module.exports = __webpack_require__(8) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(46);
var defined = __webpack_require__(25);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Element", function() { return Element; });
/* harmony import */ var _plugins__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50);

function Element(widget, attribs) {
  this.l = this.r = this.t = this.b = 0; // 边框

  this.marginLeft = this.marginRight = this.marginTop = this.marginBottom = 0; //间距

  this.position = {};
  this.classMap = {};
  this.classList = [];
  this.children = [];
  this.attribs = attribs || {};
  this.styles = {}; // 兼容处理

  this['0'] = this;
  this.style = {};

  if (!widget) {
    this.nodeName = 'body';
    this.position.x = 0;
    this.position.y = 0;
    this.attribs.id = 'body';
  } else if (BI.isWidget(widget)) {
    this.widget = widget;
    this.nodeName = widget.options.tagName;
    this.textBaseLine = widget.options.textBaseLine;
  } else if (BI.isString(widget)) {
    this.nodeName = widget;
  }
}
initElement(Element);
Object(_plugins__WEBPACK_IMPORTED_MODULE_0__["registFunction"])(Element);

function initElement(element) {
  element.prototype = {
    appendChild: function appendChild(child) {
      child.parent = this;

      if (this.children.push(child) !== 1) {
        var sibling = this.children[this.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
        child.next = null;
      }
    },
    append: function append(child) {
      child.parent = this;

      if (this.children.push(child) !== 1) {
        var sibling = this.children[this.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
        child.next = null;
      }
    },
    getParent: function getParent() {
      return this.parent;
    },
    getSiblings: function getSiblings() {
      var parent = this.getParent();
      return parent ? parent.getChildren() : [this];
    },
    getChildren: function getChildren() {
      return this.children;
    },
    getBounds: function getBounds() {
      return {};
    },
    width: function width() {},
    height: function height() {}
  };
}

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(2);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(19);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(47);
var createDesc = __webpack_require__(30);
var toIObject = __webpack_require__(15);
var toPrimitive = __webpack_require__(28);
var has = __webpack_require__(13);
var IE8_DOM_DEFINE = __webpack_require__(105);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(8) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(0);
var core = __webpack_require__(7);
var fails = __webpack_require__(2);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(18);
var IObject = __webpack_require__(46);
var toObject = __webpack_require__(10);
var toLength = __webpack_require__(6);
var asc = __webpack_require__(121);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 24 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 25 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(8)) {
  var LIBRARY = __webpack_require__(32);
  var global = __webpack_require__(1);
  var fails = __webpack_require__(2);
  var $export = __webpack_require__(0);
  var $typed = __webpack_require__(74);
  var $buffer = __webpack_require__(99);
  var ctx = __webpack_require__(18);
  var anInstance = __webpack_require__(44);
  var propertyDesc = __webpack_require__(30);
  var hide = __webpack_require__(14);
  var redefineAll = __webpack_require__(45);
  var toInteger = __webpack_require__(20);
  var toLength = __webpack_require__(6);
  var toIndex = __webpack_require__(132);
  var toAbsoluteIndex = __webpack_require__(34);
  var toPrimitive = __webpack_require__(28);
  var has = __webpack_require__(13);
  var classof = __webpack_require__(48);
  var isObject = __webpack_require__(4);
  var toObject = __webpack_require__(10);
  var isArrayIter = __webpack_require__(91);
  var create = __webpack_require__(35);
  var getPrototypeOf = __webpack_require__(37);
  var gOPN = __webpack_require__(36).f;
  var getIterFn = __webpack_require__(93);
  var uid = __webpack_require__(31);
  var wks = __webpack_require__(5);
  var createArrayMethod = __webpack_require__(23);
  var createArrayIncludes = __webpack_require__(64);
  var speciesConstructor = __webpack_require__(49);
  var ArrayIterators = __webpack_require__(95);
  var Iterators = __webpack_require__(42);
  var $iterDetect = __webpack_require__(67);
  var setSpecies = __webpack_require__(43);
  var arrayFill = __webpack_require__(94);
  var arrayCopyWithin = __webpack_require__(123);
  var $DP = __webpack_require__(9);
  var $GOPD = __webpack_require__(21);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),
/* 27 */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(4);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(31)('meta');
var isObject = __webpack_require__(4);
var has = __webpack_require__(13);
var setDesc = __webpack_require__(9).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(2)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 31 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(107);
var enumBugKeys = __webpack_require__(78);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(20);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(3);
var dPs = __webpack_require__(108);
var enumBugKeys = __webpack_require__(78);
var IE_PROTO = __webpack_require__(77)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(75)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(79).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(107);
var hiddenKeys = __webpack_require__(78).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(13);
var toObject = __webpack_require__(10);
var IE_PROTO = __webpack_require__(77)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(5)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(14)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(9).f;
var has = __webpack_require__(13);
var TAG = __webpack_require__(5)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var defined = __webpack_require__(25);
var fails = __webpack_require__(2);
var spaces = __webpack_require__(81);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(1);
var dP = __webpack_require__(9);
var DESCRIPTORS = __webpack_require__(8);
var SPECIES = __webpack_require__(5)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(11);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(24);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 47 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(24);
var TAG = __webpack_require__(5)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(3);
var aFunction = __webpack_require__(19);
var SPECIES = __webpack_require__(5)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registFunction", function() { return registFunction; });
/* harmony import */ var _attr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51);
/* harmony import */ var _class__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52);
/* harmony import */ var _css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53);
/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(54);
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(55);
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(56);
/* harmony import */ var _html__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(57);
/* harmony import */ var _keywordMark__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(58);
/* harmony import */ var _renderToHtml__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(59);
/* harmony import */ var _renderToString__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(60);
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(61);
/* harmony import */ var _val__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(62);












var registFunction = function registFunction(Element) {
  var functionMap = {};

  Element.registerFunction = function (key, fn) {
    Element.prototype[key] = functionMap[key] = fn;
  };

  Object(_attr__WEBPACK_IMPORTED_MODULE_0__["registAttrFun"])(Element);
  Object(_class__WEBPACK_IMPORTED_MODULE_1__["registClassFun"])(Element);
  Object(_css__WEBPACK_IMPORTED_MODULE_2__["registCssFun"])(Element);
  Object(_data__WEBPACK_IMPORTED_MODULE_3__["registDataFun"])(Element);
  Object(_empty__WEBPACK_IMPORTED_MODULE_4__["registEmptyFun"])(Element);
  Object(_event__WEBPACK_IMPORTED_MODULE_5__["registEventFun"])(Element);
  Object(_html__WEBPACK_IMPORTED_MODULE_6__["registHtmlFun"])(Element);
  Object(_keywordMark__WEBPACK_IMPORTED_MODULE_7__["registKeywordMarkFun"])(Element);
  Object(_renderToString__WEBPACK_IMPORTED_MODULE_9__["registRenderToStringFun"])(Element);
  Object(_renderToHtml__WEBPACK_IMPORTED_MODULE_8__["registRenderToHtmlFun"])(Element);
  Object(_text__WEBPACK_IMPORTED_MODULE_10__["registTextFun"])(Element);
  Object(_val__WEBPACK_IMPORTED_MODULE_11__["registValFun"])(Element);
};

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registAttrFun", function() { return registAttrFun; });
var registAttrFun = function registAttrFun(Element) {
  Element.registerFunction('attr', function (key, value) {
    var self = this;

    if (BI.isObject(key)) {
      BI.each(key, function (k, v) {
        self.attr(k, v);
      });
      return this;
    }

    if (BI.isNull(value)) {
      return this.attribs[key];
    }

    this.attribs[key] = value;
    return this;
  });
  Element.registerFunction('hasAttrib', function (key) {
    return this.attribs[key] != null;
  });
  Element.registerFunction('removeAttr', function (key) {
    delete this.attribs[key];
  });
};

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registClassFun", function() { return registClassFun; });
var registClassFun = function registClassFun(Element) {
  Element.registerFunction('addClass', function (classList) {
    var self = this;
    BI.each(classList.split(' '), function (i, cls) {
      if (cls && !self.classMap[cls]) {
        self.classList.push(cls);
      }

      cls && (self.classMap[cls] = true);
    });
    return this;
  });
  Element.registerFunction('removeClass', function (classList) {
    var self = this;
    BI.each(classList.split(' '), function (i, cls) {
      if (cls && self.classMap[cls]) {
        delete self.classMap[cls];
        self.classList.splice(self.classList.indexOf(cls), 1);
      }
    });
    return this;
  });
};

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registCssFun", function() { return registCssFun; });
var registCssFun = function registCssFun(Element) {
  Element.registerFunction('css', function (key, value) {
    var self = this;

    if (BI.isObject(key)) {
      BI.each(key, function (k, v) {
        self.css(k, v);
      });
      return this;
    }

    key = BI.trim(BI.camelize(key));
    return css(this, key, value);
  });
};

var css = function css(elem, key, value) {
  key = BI.trim(BI.camelize(key));

  if (BI.isNull(value)) {
    return elem.styles[key];
  }

  elem.styles[key] = value;
  return elem;
};

/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registDataFun", function() { return registDataFun; });
var registDataFun = function registDataFun(Element) {
  Element.registerFunction('data', function (key, value) {
    if (!this._data) {
      this._data = {};
    }

    if (BI.isNull(value)) {
      return this._data[key];
    }

    this._data[key] = value;
    return this;
  });
};

/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registEmptyFun", function() { return registEmptyFun; });
var registEmptyFun = function registEmptyFun(Element) {
  Element.registerFunction('empty', function (text) {
    this.children = [];
    return this;
  });
  Element.registerFunction('destroy', function (text) {
    return this;
  });
};

/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registEventFun", function() { return registEventFun; });
var returnThis = function returnThis() {
  return this;
};

var registEventFun = function registEventFun(Element) {
  ['mousedown', 'mouseup', 'mousewheel', 'keydown', 'keyup', 'focus', 'focusin', 'focusout', 'click', 'on', 'off', 'bind', 'unbind', 'trigger', 'hover', 'scroll', 'scrollLeft', 'scrollTop', 'resize', 'show', 'hide', 'dblclick', 'blur'].forEach(function (event) {
    Element.registerFunction(event, returnThis);
  });
};

/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registHtmlFun", function() { return registHtmlFun; });
var registHtmlFun = function registHtmlFun(Element) {
  Element.registerFunction('html', function (text) {
    if (text && text.charAt(0) === '<') {
      BI.createWidget({
        type: 'bi.html',
        element: this.widget,
        html: text
      });
      this.originalHtml = text;
    } else {
      this.text = BI.htmlDecode(text);
    }

    return this;
  });
};

/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registKeywordMarkFun", function() { return registKeywordMarkFun; });
var registKeywordMarkFun = function registKeywordMarkFun(Element) {
  Element.registerFunction('__textKeywordMarked__', function (text) {
    this[0].textContent = text;
    return this;
  });
};

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registRenderToHtmlFun", function() { return registRenderToHtmlFun; });
var skipArray = [];
var pxStyle = ['font-size', 'width', 'height'];

var _renderToHtml = function _renderToHtml(root) {
  var str = '';

  if (BI.isNull(root.originalHtml)) {
    if (root.tag !== 'body') {
      str += "<".concat(root.tag);

      if (root.classList.length > 0) {
        str += ' class="';
        BI.each(root.classList, function (i, cls) {
          str += " ".concat(cls);
        });
        str += '"';
      }

      str += ' style="';
      BI.each(root.originalStyles, function (key, stl) {
        if (skipArray.contains(key) || key == 'height' && root.classList.contains('bi-design-components-data-data-table-cell')) {
          return;
        }

        key = BI.hyphenate(key);

        if (key === 'font-family') {
          stl = stl.replace(/\"/g, '');
        }

        if (pxStyle.contains(key) && BI.isNumeric(stl)) {
          stl += 'px';
        }

        if (BI.isKey(stl)) {
          str += " ".concat(key, ":").concat(stl, ";");
        }
      });
      str += '"';
      BI.each(root.attribs, function (key, attr) {
        if (BI.isKey(attr)) {
          str += " ".concat(key, "=").concat(attr);
        }
      });

      if (root.textContent) {
        str += " title=".concat(root.textContent);
      }

      str += '>';
    } // 特殊处理，spread_table的行列元素是不取配置里的高度的，使用stretch拉伸的（leaves取了高度），但是功能代码里给单元格默认高度了，导致拉伸不了
    //  而spread_grid_table的行列元素是取配置里的高度的，拉不拉伸都一样


    BI.each(root.children, function (i, child) {
      str += _renderToHtml(child);
    });
  } else {
    str += root.originalHtml;
  }

  if (root.tag !== 'body') {
    if (root.textContent) {
      str += root.textContent;
    }

    str += "</".concat(root.tag, ">");
  }

  return str;
};

var registRenderToHtmlFun = function registRenderToHtmlFun(Element) {
  Element.registerFunction('renderToHtml', function () {
    return _renderToHtml(this);
  });
};

/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registRenderToStringFun", function() { return registRenderToStringFun; });
var skipArray = ['width', 'height'];

var _renderToString = function _renderToString(root) {
  var str = '';

  if (root.nodeName !== 'body') {
    str += "<".concat(root.nodeName);

    if (root.classList.length > 0) {
      str += ' class="';
      BI.each(root.classList, function (i, cls) {
        str += " ".concat(cls);
      });
      str += '"';
    }

    str += ' style="';
    BI.each(root.styles, function (key, stl) {
      if (skipArray.includes(key)) {
        return;
      }

      key = BI.hyphenate(key);
      str += " ".concat(key, ":").concat(stl, ";");
    });
    str += " width:".concat(root.width, "px;");
    str += " height:".concat(root.height, "px;");
    str += ' position: fixed;';
    str += " left: ".concat(root.position.x, "px;");
    str += " top: ".concat(root.position.y, "px;");
    str += '"';
    BI.each(root.attribs, function (key, attr) {
      str += " ".concat(key, ":").concat(attr);
    });
    str += '>';
  }

  BI.each(root.children, function (i, child) {
    str += _renderToString(child);
  }); // if (root.htmlContent) {
  //     str += root.htmlContent;
  // }

  if (root.nodeName !== 'body') {
    if (root.text) {
      str += root.text;
    }

    str += "</".concat(root.nodeName, ">");
  }

  return str;
};

var registRenderToStringFun = function registRenderToStringFun(Element) {
  Element.registerFunction('renderToString', function () {
    return _renderToString(this);
  });
};

/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registTextFun", function() { return registTextFun; });
var registTextFun = function registTextFun(Element) {
  Element.registerFunction('setText', function (text) {
    this.text = text;
    return this;
  });
  Element.registerFunction('setValue', function (text) {
    this.text = text;
    return this;
  });
};

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registValFun", function() { return registValFun; });
var registValFun = function registValFun(Element) {
  Element.registerFunction('val', function (value) {
    if (BI.isNotNull(value)) {
      this.text = "".concat(value);
      return this;
    }

    return this.text;
  });
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(7);
var global = __webpack_require__(1);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(32) ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(15);
var toLength = __webpack_require__(6);
var toAbsoluteIndex = __webpack_require__(34);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 65 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(24);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(5)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(3);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var classof = __webpack_require__(48);
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(125);
var redefine = __webpack_require__(11);
var hide = __webpack_require__(14);
var fails = __webpack_require__(2);
var defined = __webpack_require__(25);
var wks = __webpack_require__(5);
var regexpExec = __webpack_require__(96);

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(18);
var call = __webpack_require__(120);
var isArrayIter = __webpack_require__(91);
var anObject = __webpack_require__(3);
var toLength = __webpack_require__(6);
var getIterFn = __webpack_require__(93);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(1);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(11);
var redefineAll = __webpack_require__(45);
var meta = __webpack_require__(29);
var forOf = __webpack_require__(71);
var anInstance = __webpack_require__(44);
var isObject = __webpack_require__(4);
var fails = __webpack_require__(2);
var $iterDetect = __webpack_require__(67);
var setToStringTag = __webpack_require__(40);
var inheritIfRequired = __webpack_require__(82);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1);
var hide = __webpack_require__(14);
var uid = __webpack_require__(31);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
var document = __webpack_require__(1).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(5);


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(63)('keys');
var uid = __webpack_require__(31);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 78 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(1).document;
module.exports = document && document.documentElement;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(4);
var anObject = __webpack_require__(3);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(18)(Function.call, __webpack_require__(21).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 81 */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
var setPrototypeOf = __webpack_require__(80).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(20);
var defined = __webpack_require__(25);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),
/* 84 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),
/* 85 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(20);
var defined = __webpack_require__(25);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(32);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(11);
var hide = __webpack_require__(14);
var Iterators = __webpack_require__(42);
var $iterCreate = __webpack_require__(119);
var setToStringTag = __webpack_require__(40);
var getPrototypeOf = __webpack_require__(37);
var ITERATOR = __webpack_require__(5)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(89);
var defined = __webpack_require__(25);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(4);
var cof = __webpack_require__(24);
var MATCH = __webpack_require__(5)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(5)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(42);
var ITERATOR = __webpack_require__(5)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(9);
var createDesc = __webpack_require__(30);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(48);
var ITERATOR = __webpack_require__(5)('iterator');
var Iterators = __webpack_require__(42);
module.exports = __webpack_require__(7).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(10);
var toAbsoluteIndex = __webpack_require__(34);
var toLength = __webpack_require__(6);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(38);
var step = __webpack_require__(124);
var Iterators = __webpack_require__(42);
var toIObject = __webpack_require__(15);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(87)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__(68);

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var at = __webpack_require__(86)(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(18);
var invoke = __webpack_require__(113);
var html = __webpack_require__(79);
var cel = __webpack_require__(75);
var global = __webpack_require__(1);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(24)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(1);
var DESCRIPTORS = __webpack_require__(8);
var LIBRARY = __webpack_require__(32);
var $typed = __webpack_require__(74);
var hide = __webpack_require__(14);
var redefineAll = __webpack_require__(45);
var fails = __webpack_require__(2);
var anInstance = __webpack_require__(44);
var toInteger = __webpack_require__(20);
var toLength = __webpack_require__(6);
var toIndex = __webpack_require__(132);
var gOPN = __webpack_require__(36).f;
var dP = __webpack_require__(9).f;
var arrayFill = __webpack_require__(94);
var setToStringTag = __webpack_require__(40);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),
/* 100 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 101 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(137)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 103 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(143); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(27)))

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(8) && !__webpack_require__(2)(function () {
  return Object.defineProperty(__webpack_require__(75)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1);
var core = __webpack_require__(7);
var LIBRARY = __webpack_require__(32);
var wksExt = __webpack_require__(76);
var defineProperty = __webpack_require__(9).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(13);
var toIObject = __webpack_require__(15);
var arrayIndexOf = __webpack_require__(64)(false);
var IE_PROTO = __webpack_require__(77)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(9);
var anObject = __webpack_require__(3);
var getKeys = __webpack_require__(33);

module.exports = __webpack_require__(8) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(15);
var gOPN = __webpack_require__(36).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(8);
var getKeys = __webpack_require__(33);
var gOPS = __webpack_require__(65);
var pIE = __webpack_require__(47);
var toObject = __webpack_require__(10);
var IObject = __webpack_require__(46);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(2)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),
/* 111 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(19);
var isObject = __webpack_require__(4);
var invoke = __webpack_require__(113);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),
/* 113 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(1).parseInt;
var $trim = __webpack_require__(41).trim;
var ws = __webpack_require__(81);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(1).parseFloat;
var $trim = __webpack_require__(41).trim;

module.exports = 1 / $parseFloat(__webpack_require__(81) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(24);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(4);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 118 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(35);
var descriptor = __webpack_require__(30);
var setToStringTag = __webpack_require__(40);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(14)(IteratorPrototype, __webpack_require__(5)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(3);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(624);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(19);
var toObject = __webpack_require__(10);
var IObject = __webpack_require__(46);
var toLength = __webpack_require__(6);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(10);
var toAbsoluteIndex = __webpack_require__(34);
var toLength = __webpack_require__(6);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpExec = __webpack_require__(96);
__webpack_require__(0)({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(8) && /./g.flags != 'g') __webpack_require__(9).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(68)
});


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(32);
var global = __webpack_require__(1);
var ctx = __webpack_require__(18);
var classof = __webpack_require__(48);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(4);
var aFunction = __webpack_require__(19);
var anInstance = __webpack_require__(44);
var forOf = __webpack_require__(71);
var speciesConstructor = __webpack_require__(49);
var task = __webpack_require__(98).set;
var microtask = __webpack_require__(644)();
var newPromiseCapabilityModule = __webpack_require__(128);
var perform = __webpack_require__(645);
var userAgent = __webpack_require__(72);
var promiseResolve = __webpack_require__(129);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(5)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(45)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(40)($Promise, PROMISE);
__webpack_require__(43)(PROMISE);
Wrapper = __webpack_require__(7)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(67)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(19);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(3);
var isObject = __webpack_require__(4);
var newPromiseCapability = __webpack_require__(128);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(9).f;
var create = __webpack_require__(35);
var redefineAll = __webpack_require__(45);
var ctx = __webpack_require__(18);
var anInstance = __webpack_require__(44);
var forOf = __webpack_require__(71);
var $iterDefine = __webpack_require__(87);
var step = __webpack_require__(124);
var setSpecies = __webpack_require__(43);
var DESCRIPTORS = __webpack_require__(8);
var fastKey = __webpack_require__(29).fastKey;
var validate = __webpack_require__(39);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(45);
var getWeak = __webpack_require__(29).getWeak;
var anObject = __webpack_require__(3);
var isObject = __webpack_require__(4);
var anInstance = __webpack_require__(44);
var forOf = __webpack_require__(71);
var createArrayMethod = __webpack_require__(23);
var $has = __webpack_require__(13);
var validate = __webpack_require__(39);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(20);
var toLength = __webpack_require__(6);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(36);
var gOPS = __webpack_require__(65);
var anObject = __webpack_require__(3);
var Reflect = __webpack_require__(1).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(6);
var repeat = __webpack_require__(83);
var defined = __webpack_require__(25);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(8);
var getKeys = __webpack_require__(33);
var toIObject = __webpack_require__(15);
var isEnum = __webpack_require__(47).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};


/***/ }),
/* 136 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.12' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 137 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Created by richie on 15/7/8.
 */

/**
 * 初始化BI对象
 */
var _global = undefined;

if (typeof window !== "undefined") {
  _global = window;
} else if (typeof global !== "undefined") {
  _global = global;
} else if (typeof self !== "undefined") {
  _global = self;
} else {
  _global = this;
}

if (_global) {
  _global._global = _global;
}

if (_global.BI == null) {
  _global.BI = {
    prepares: []
  };
}

if (_global.BI.prepares == null) {
  _global.BI.prepares = [];
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(27)))

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(140)(__webpack_require__(141));

/***/ }),
/* 140 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	function log(error) {
		(typeof console !== "undefined")
		&& (console.error || console.log)("[Script Loader]", error);
	}

	// Check for IE =< 8
	function isIE() {
		return typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";
	}

	try {
		if (typeof execScript !== "undefined" && isIE()) {
			execScript(src);
		} else if (typeof eval !== "undefined") {
			eval.call(null, src);
		} else {
			log("EvalError: No eval function available");
		}
	} catch (error) {
		log(error);
	}
}


/***/ }),
/* 141 */
/***/ (function(module, exports) {

module.exports = "/**\r\n * @license\r\n * Lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash core plus=\"debounce,throttle,get,set,findIndex,findLastIndex,findKey,findLastKey,isArrayLike,invert,invertBy,uniq,uniqBy,omit,omitBy,zip,unzip,rest,range,random,reject,intersection,drop,countBy,union,zipObject,initial,cloneDeep,clamp,isPlainObject,take,takeRight,without,difference,defaultsDeep,trim,merge,groupBy,uniqBy,before,after,unescape,chunk,pick,pickBy,identity\"`\r\n * Copyright JS Foundation and other contributors <https://js.foundation/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n;(function() {\r\n\r\n    /** Used as a safe reference for `undefined` in pre-ES5 environments. */\r\n    var undefined;\r\n\r\n    /** Used as the semantic version number. */\r\n    var VERSION = '4.17.5';\r\n\r\n    /** Used as the size to enable large array optimizations. */\r\n    var LARGE_ARRAY_SIZE = 200;\r\n\r\n    /** Error message constants. */\r\n    var FUNC_ERROR_TEXT = 'Expected a function';\r\n\r\n    /** Used to stand-in for `undefined` hash values. */\r\n    var HASH_UNDEFINED = '__lodash_hash_undefined__';\r\n\r\n    /** Used as the maximum memoize cache size. */\r\n    var MAX_MEMOIZE_SIZE = 500;\r\n\r\n    /** Used as the internal argument placeholder. */\r\n    var PLACEHOLDER = '__lodash_placeholder__';\r\n\r\n    /** Used to compose bitmasks for cloning. */\r\n    var CLONE_DEEP_FLAG = 1,\r\n        CLONE_FLAT_FLAG = 2,\r\n        CLONE_SYMBOLS_FLAG = 4;\r\n\r\n    /** Used to compose bitmasks for value comparisons. */\r\n    var COMPARE_PARTIAL_FLAG = 1,\r\n        COMPARE_UNORDERED_FLAG = 2;\r\n\r\n    /** Used to compose bitmasks for function metadata. */\r\n    var WRAP_BIND_FLAG = 1,\r\n        WRAP_BIND_KEY_FLAG = 2,\r\n        WRAP_CURRY_BOUND_FLAG = 4,\r\n        WRAP_CURRY_FLAG = 8,\r\n        WRAP_CURRY_RIGHT_FLAG = 16,\r\n        WRAP_PARTIAL_FLAG = 32,\r\n        WRAP_PARTIAL_RIGHT_FLAG = 64,\r\n        WRAP_ARY_FLAG = 128,\r\n        WRAP_REARG_FLAG = 256,\r\n        WRAP_FLIP_FLAG = 512;\r\n\r\n    /** Used to detect hot functions by number of calls within a span of milliseconds. */\r\n    var HOT_COUNT = 800,\r\n        HOT_SPAN = 16;\r\n\r\n    /** Used to indicate the type of lazy iteratees. */\r\n    var LAZY_FILTER_FLAG = 1,\r\n        LAZY_MAP_FLAG = 2,\r\n        LAZY_WHILE_FLAG = 3;\r\n\r\n    /** Used as references for various `Number` constants. */\r\n    var INFINITY = 1 / 0,\r\n        MAX_SAFE_INTEGER = 9007199254740991,\r\n        MAX_INTEGER = 1.7976931348623157e+308,\r\n        NAN = 0 / 0;\r\n\r\n    /** Used as references for the maximum length and index of an array. */\r\n    var MAX_ARRAY_LENGTH = 4294967295;\r\n\r\n    /** Used to associate wrap methods with their bit flags. */\r\n    var wrapFlags = [\r\n        ['ary', WRAP_ARY_FLAG],\r\n        ['bind', WRAP_BIND_FLAG],\r\n        ['bindKey', WRAP_BIND_KEY_FLAG],\r\n        ['curry', WRAP_CURRY_FLAG],\r\n        ['curryRight', WRAP_CURRY_RIGHT_FLAG],\r\n        ['flip', WRAP_FLIP_FLAG],\r\n        ['partial', WRAP_PARTIAL_FLAG],\r\n        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\r\n        ['rearg', WRAP_REARG_FLAG]\r\n    ];\r\n\r\n    /** `Object#toString` result references. */\r\n    var argsTag = '[object Arguments]',\r\n        arrayTag = '[object Array]',\r\n        asyncTag = '[object AsyncFunction]',\r\n        boolTag = '[object Boolean]',\r\n        dateTag = '[object Date]',\r\n        errorTag = '[object Error]',\r\n        funcTag = '[object Function]',\r\n        genTag = '[object GeneratorFunction]',\r\n        mapTag = '[object Map]',\r\n        numberTag = '[object Number]',\r\n        nullTag = '[object Null]',\r\n        objectTag = '[object Object]',\r\n        promiseTag = '[object Promise]',\r\n        proxyTag = '[object Proxy]',\r\n        regexpTag = '[object RegExp]',\r\n        setTag = '[object Set]',\r\n        stringTag = '[object String]',\r\n        symbolTag = '[object Symbol]',\r\n        undefinedTag = '[object Undefined]',\r\n        weakMapTag = '[object WeakMap]';\r\n\r\n    var arrayBufferTag = '[object ArrayBuffer]',\r\n        dataViewTag = '[object DataView]',\r\n        float32Tag = '[object Float32Array]',\r\n        float64Tag = '[object Float64Array]',\r\n        int8Tag = '[object Int8Array]',\r\n        int16Tag = '[object Int16Array]',\r\n        int32Tag = '[object Int32Array]',\r\n        uint8Tag = '[object Uint8Array]',\r\n        uint8ClampedTag = '[object Uint8ClampedArray]',\r\n        uint16Tag = '[object Uint16Array]',\r\n        uint32Tag = '[object Uint32Array]';\r\n\r\n    /** Used to match HTML entities and HTML characters. */\r\n    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\r\n        reUnescapedHtml = /[&<>\"']/g,\r\n        reHasEscapedHtml = RegExp(reEscapedHtml.source),\r\n        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\r\n\r\n    /** Used to match property names within property paths. */\r\n    var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\r\n        reIsPlainProp = /^\\w*$/,\r\n        rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\n\r\n    /**\r\n     * Used to match `RegExp`\r\n     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\r\n     */\r\n    var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\r\n\r\n    /** Used to match leading and trailing whitespace. */\r\n    var reTrim = /^\\s+|\\s+$/g;\r\n\r\n    /** Used to match wrap detail comments. */\r\n    var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\r\n        reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\r\n        reSplitDetails = /,? & /;\r\n\r\n    /** Used to match backslashes in property paths. */\r\n    var reEscapeChar = /\\\\(\\\\)?/g;\r\n\r\n    /** Used to match `RegExp` flags from their coerced string values. */\r\n    var reFlags = /\\w*$/;\r\n\r\n    /** Used to detect bad signed hexadecimal string values. */\r\n    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n    /** Used to detect binary string values. */\r\n    var reIsBinary = /^0b[01]+$/i;\r\n\r\n    /** Used to detect host constructors (Safari). */\r\n    var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\r\n\r\n    /** Used to detect octal string values. */\r\n    var reIsOctal = /^0o[0-7]+$/i;\r\n\r\n    /** Used to detect unsigned integer values. */\r\n    var reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n    /** Used to compose unicode character classes. */\r\n    var rsAstralRange = '\\\\ud800-\\\\udfff',\r\n        rsComboMarksRange = '\\\\u0300-\\\\u036f',\r\n        reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\r\n        rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\r\n        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\r\n        rsVarRange = '\\\\ufe0e\\\\ufe0f';\r\n\r\n    /** Used to compose unicode capture groups. */\r\n    var rsAstral = '[' + rsAstralRange + ']',\r\n        rsCombo = '[' + rsComboRange + ']',\r\n        rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\r\n        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\r\n        rsNonAstral = '[^' + rsAstralRange + ']',\r\n        rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\r\n        rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\r\n        rsZWJ = '\\\\u200d';\r\n\r\n    /** Used to compose unicode regexes. */\r\n    var reOptMod = rsModifier + '?',\r\n        rsOptVar = '[' + rsVarRange + ']?',\r\n        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\r\n        rsSeq = rsOptVar + reOptMod + rsOptJoin,\r\n        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\r\n\r\n    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\r\n    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\r\n\r\n    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\r\n    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\r\n\r\n    /** Used to identify `toStringTag` values of typed arrays. */\r\n    var typedArrayTags = {};\r\n    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\r\n        typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\r\n            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\r\n                typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\r\n                    typedArrayTags[uint32Tag] = true;\r\n    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\r\n        typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\r\n            typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\r\n                typedArrayTags[errorTag] = typedArrayTags[funcTag] =\r\n                    typedArrayTags[mapTag] = typedArrayTags[numberTag] =\r\n                        typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\r\n                            typedArrayTags[setTag] = typedArrayTags[stringTag] =\r\n                                typedArrayTags[weakMapTag] = false;\r\n\r\n    /** Used to identify `toStringTag` values supported by `_.clone`. */\r\n    var cloneableTags = {};\r\n    cloneableTags[argsTag] = cloneableTags[arrayTag] =\r\n        cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\r\n            cloneableTags[boolTag] = cloneableTags[dateTag] =\r\n                cloneableTags[float32Tag] = cloneableTags[float64Tag] =\r\n                    cloneableTags[int8Tag] = cloneableTags[int16Tag] =\r\n                        cloneableTags[int32Tag] = cloneableTags[mapTag] =\r\n                            cloneableTags[numberTag] = cloneableTags[objectTag] =\r\n                                cloneableTags[regexpTag] = cloneableTags[setTag] =\r\n                                    cloneableTags[stringTag] = cloneableTags[symbolTag] =\r\n                                        cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\r\n                                            cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\r\n    cloneableTags[errorTag] = cloneableTags[funcTag] =\r\n        cloneableTags[weakMapTag] = false;\r\n\r\n    /** Used to map characters to HTML entities. */\r\n    var htmlEscapes = {\r\n        '&': '&amp;',\r\n        '<': '&lt;',\r\n        '>': '&gt;',\r\n        '\"': '&quot;',\r\n        \"'\": '&#39;'\r\n    };\r\n\r\n    /** Used to map HTML entities to characters. */\r\n    var htmlUnescapes = {\r\n        '&amp;': '&',\r\n        '&lt;': '<',\r\n        '&gt;': '>',\r\n        '&quot;': '\"',\r\n        '&#39;': \"'\"\r\n    };\r\n\r\n    /** Built-in method references without a dependency on `root`. */\r\n    var freeParseFloat = parseFloat,\r\n        freeParseInt = parseInt;\r\n\r\n    /** Detect free variable `global` from Node.js. */\r\n    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n    /** Detect free variable `self`. */\r\n    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n    /** Used as a reference to the global object. */\r\n    var root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n    /** Detect free variable `exports`. */\r\n    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n    /** Detect free variable `module`. */\r\n    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n    /** Detect the popular CommonJS extension `module.exports`. */\r\n    var moduleExports = freeModule && freeModule.exports === freeExports;\r\n\r\n    /** Detect free variable `process` from Node.js. */\r\n    var freeProcess = moduleExports && freeGlobal.process;\r\n\r\n    /** Used to access faster Node.js helpers. */\r\n    var nodeUtil = (function() {\r\n        try {\r\n            return freeProcess && freeProcess.binding && freeProcess.binding('util');\r\n        } catch (e) {}\r\n    }());\r\n\r\n    /* Node.js helper references. */\r\n    var nodeIsDate = nodeUtil && nodeUtil.isDate,\r\n        nodeIsMap = nodeUtil && nodeUtil.isMap,\r\n        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\r\n        nodeIsSet = nodeUtil && nodeUtil.isSet,\r\n        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\r\n\r\n    /*--------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * A faster alternative to `Function#apply`, this function invokes `func`\r\n     * with the `this` binding of `thisArg` and the arguments of `args`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to invoke.\r\n     * @param {*} thisArg The `this` binding of `func`.\r\n     * @param {Array} args The arguments to invoke `func` with.\r\n     * @returns {*} Returns the result of `func`.\r\n     */\r\n    function apply(func, thisArg, args) {\r\n        switch (args.length) {\r\n            case 0: return func.call(thisArg);\r\n            case 1: return func.call(thisArg, args[0]);\r\n            case 2: return func.call(thisArg, args[0], args[1]);\r\n            case 3: return func.call(thisArg, args[0], args[1], args[2]);\r\n        }\r\n        return func.apply(thisArg, args);\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseAggregator` for arrays.\r\n     *\r\n     * @private\r\n     * @param {Array} [array] The array to iterate over.\r\n     * @param {Function} setter The function to set `accumulator` values.\r\n     * @param {Function} iteratee The iteratee to transform keys.\r\n     * @param {Object} accumulator The initial aggregated object.\r\n     * @returns {Function} Returns `accumulator`.\r\n     */\r\n    function arrayAggregator(array, setter, iteratee, accumulator) {\r\n        var index = -1,\r\n            length = array == null ? 0 : array.length;\r\n\r\n        while (++index < length) {\r\n            var value = array[index];\r\n            setter(accumulator, value, iteratee(value), array);\r\n        }\r\n        return accumulator;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.forEach` for arrays without support for\r\n     * iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} [array] The array to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function arrayEach(array, iteratee) {\r\n        var index = -1,\r\n            length = array == null ? 0 : array.length;\r\n\r\n        while (++index < length) {\r\n            if (iteratee(array[index], index, array) === false) {\r\n                break;\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.every` for arrays without support for\r\n     * iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} [array] The array to iterate over.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\r\n     *  else `false`.\r\n     */\r\n    function arrayEvery(array, predicate) {\r\n        var index = -1,\r\n            length = array == null ? 0 : array.length;\r\n\r\n        while (++index < length) {\r\n            if (!predicate(array[index], index, array)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.filter` for arrays without support for\r\n     * iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} [array] The array to iterate over.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @returns {Array} Returns the new filtered array.\r\n     */\r\n    function arrayFilter(array, predicate) {\r\n        var index = -1,\r\n            length = array == null ? 0 : array.length,\r\n            resIndex = 0,\r\n            result = [];\r\n\r\n        while (++index < length) {\r\n            var value = array[index];\r\n            if (predicate(value, index, array)) {\r\n                result[resIndex++] = value;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.includes` for arrays without support for\r\n     * specifying an index to search from.\r\n     *\r\n     * @private\r\n     * @param {Array} [array] The array to inspect.\r\n     * @param {*} target The value to search for.\r\n     * @returns {boolean} Returns `true` if `target` is found, else `false`.\r\n     */\r\n    function arrayIncludes(array, value) {\r\n        var length = array == null ? 0 : array.length;\r\n        return !!length && baseIndexOf(array, value, 0) > -1;\r\n    }\r\n\r\n    /**\r\n     * This function is like `arrayIncludes` except that it accepts a comparator.\r\n     *\r\n     * @private\r\n     * @param {Array} [array] The array to inspect.\r\n     * @param {*} target The value to search for.\r\n     * @param {Function} comparator The comparator invoked per element.\r\n     * @returns {boolean} Returns `true` if `target` is found, else `false`.\r\n     */\r\n    function arrayIncludesWith(array, value, comparator) {\r\n        var index = -1,\r\n            length = array == null ? 0 : array.length;\r\n\r\n        while (++index < length) {\r\n            if (comparator(value, array[index])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.map` for arrays without support for iteratee\r\n     * shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} [array] The array to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Array} Returns the new mapped array.\r\n     */\r\n    function arrayMap(array, iteratee) {\r\n        var index = -1,\r\n            length = array == null ? 0 : array.length,\r\n            result = Array(length);\r\n\r\n        while (++index < length) {\r\n            result[index] = iteratee(array[index], index, array);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Appends the elements of `values` to `array`.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to modify.\r\n     * @param {Array} values The values to append.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function arrayPush(array, values) {\r\n        var index = -1,\r\n            length = values.length,\r\n            offset = array.length;\r\n\r\n        while (++index < length) {\r\n            array[offset + index] = values[index];\r\n        }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.reduce` for arrays without support for\r\n     * iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} [array] The array to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @param {*} [accumulator] The initial value.\r\n     * @param {boolean} [initAccum] Specify using the first element of `array` as\r\n     *  the initial value.\r\n     * @returns {*} Returns the accumulated value.\r\n     */\r\n    function arrayReduce(array, iteratee, accumulator, initAccum) {\r\n        var index = -1,\r\n            length = array == null ? 0 : array.length;\r\n\r\n        if (initAccum && length) {\r\n            accumulator = array[++index];\r\n        }\r\n        while (++index < length) {\r\n            accumulator = iteratee(accumulator, array[index], index, array);\r\n        }\r\n        return accumulator;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.some` for arrays without support for iteratee\r\n     * shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} [array] The array to iterate over.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\r\n     *  else `false`.\r\n     */\r\n    function arraySome(array, predicate) {\r\n        var index = -1,\r\n            length = array == null ? 0 : array.length;\r\n\r\n        while (++index < length) {\r\n            if (predicate(array[index], index, array)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the size of an ASCII `string`.\r\n     *\r\n     * @private\r\n     * @param {string} string The string inspect.\r\n     * @returns {number} Returns the string size.\r\n     */\r\n    var asciiSize = baseProperty('length');\r\n\r\n    /**\r\n     * Converts an ASCII `string` to an array.\r\n     *\r\n     * @private\r\n     * @param {string} string The string to convert.\r\n     * @returns {Array} Returns the converted array.\r\n     */\r\n    function asciiToArray(string) {\r\n        return string.split('');\r\n    }\r\n\r\n    /**\r\n     * The base implementation of methods like `_.findKey` and `_.findLastKey`,\r\n     * without support for iteratee shorthands, which iterates over `collection`\r\n     * using `eachFunc`.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {Function} eachFunc The function to iterate over `collection`.\r\n     * @returns {*} Returns the found element or its key, else `undefined`.\r\n     */\r\n    function baseFindKey(collection, predicate, eachFunc) {\r\n        var result;\r\n        eachFunc(collection, function(value, key, collection) {\r\n            if (predicate(value, key, collection)) {\r\n                result = key;\r\n                return false;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n        var length = array.length,\r\n            index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n        while ((fromRight ? index-- : ++index < length)) {\r\n            if (predicate(array[index], index, array)) {\r\n                return index;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseIndexOf(array, value, fromIndex) {\r\n        return value === value\r\n            ? strictIndexOf(array, value, fromIndex)\r\n            : baseFindIndex(array, baseIsNaN, fromIndex);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isNaN` without support for number objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     */\r\n    function baseIsNaN(value) {\r\n        return value !== value;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.property` without support for deep paths.\r\n     *\r\n     * @private\r\n     * @param {string} key The key of the property to get.\r\n     * @returns {Function} Returns the new accessor function.\r\n     */\r\n    function baseProperty(key) {\r\n        return function(object) {\r\n            return object == null ? undefined : object[key];\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.propertyOf` without support for deep paths.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Function} Returns the new accessor function.\r\n     */\r\n    function basePropertyOf(object) {\r\n        return function(key) {\r\n            return object == null ? undefined : object[key];\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.reduce` and `_.reduceRight`, without support\r\n     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @param {*} accumulator The initial value.\r\n     * @param {boolean} initAccum Specify using the first or last element of\r\n     *  `collection` as the initial value.\r\n     * @param {Function} eachFunc The function to iterate over `collection`.\r\n     * @returns {*} Returns the accumulated value.\r\n     */\r\n    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\r\n        eachFunc(collection, function(value, index, collection) {\r\n            accumulator = initAccum\r\n                ? (initAccum = false, value)\r\n                : iteratee(accumulator, value, index, collection);\r\n        });\r\n        return accumulator;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.sortBy` which uses `comparer` to define the\r\n     * sort order of `array` and replaces criteria objects with their corresponding\r\n     * values.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to sort.\r\n     * @param {Function} comparer The function to define sort order.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function baseSortBy(array, comparer) {\r\n        var length = array.length;\r\n\r\n        array.sort(comparer);\r\n        while (length--) {\r\n            array[length] = array[length].value;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.times` without support for iteratee shorthands\r\n     * or max array length checks.\r\n     *\r\n     * @private\r\n     * @param {number} n The number of times to invoke `iteratee`.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Array} Returns the array of results.\r\n     */\r\n    function baseTimes(n, iteratee) {\r\n        var index = -1,\r\n            result = Array(n);\r\n\r\n        while (++index < n) {\r\n            result[index] = iteratee(index);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.unary` without support for storing metadata.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to cap arguments for.\r\n     * @returns {Function} Returns the new capped function.\r\n     */\r\n    function baseUnary(func) {\r\n        return function(value) {\r\n            return func(value);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.values` and `_.valuesIn` which creates an\r\n     * array of `object` property values corresponding to the property names\r\n     * of `props`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Array} props The property names to get values for.\r\n     * @returns {Object} Returns the array of property values.\r\n     */\r\n    function baseValues(object, props) {\r\n        return arrayMap(props, function(key) {\r\n            return object[key];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a `cache` value for `key` exists.\r\n     *\r\n     * @private\r\n     * @param {Object} cache The cache to query.\r\n     * @param {string} key The key of the entry to check.\r\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n     */\r\n    function cacheHas(cache, key) {\r\n        return cache.has(key);\r\n    }\r\n\r\n    /**\r\n     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\r\n     * that is not found in the character symbols.\r\n     *\r\n     * @private\r\n     * @param {Array} strSymbols The string symbols to inspect.\r\n     * @param {Array} chrSymbols The character symbols to find.\r\n     * @returns {number} Returns the index of the first unmatched string symbol.\r\n     */\r\n    function charsStartIndex(strSymbols, chrSymbols) {\r\n        var index = -1,\r\n            length = strSymbols.length;\r\n\r\n        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\r\n     * that is not found in the character symbols.\r\n     *\r\n     * @private\r\n     * @param {Array} strSymbols The string symbols to inspect.\r\n     * @param {Array} chrSymbols The character symbols to find.\r\n     * @returns {number} Returns the index of the last unmatched string symbol.\r\n     */\r\n    function charsEndIndex(strSymbols, chrSymbols) {\r\n        var index = strSymbols.length;\r\n\r\n        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of `placeholder` occurrences in `array`.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} placeholder The placeholder to search for.\r\n     * @returns {number} Returns the placeholder count.\r\n     */\r\n    function countHolders(array, placeholder) {\r\n        var length = array.length,\r\n            result = 0;\r\n\r\n        while (length--) {\r\n            if (array[length] === placeholder) {\r\n                ++result;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Used by `_.escape` to convert characters to HTML entities.\r\n     *\r\n     * @private\r\n     * @param {string} chr The matched character to escape.\r\n     * @returns {string} Returns the escaped character.\r\n     */\r\n    var escapeHtmlChar = basePropertyOf(htmlEscapes);\r\n\r\n    /**\r\n     * Gets the value at `key` of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} [object] The object to query.\r\n     * @param {string} key The key of the property to get.\r\n     * @returns {*} Returns the property value.\r\n     */\r\n    function getValue(object, key) {\r\n        return object == null ? undefined : object[key];\r\n    }\r\n\r\n    /**\r\n     * Checks if `string` contains Unicode symbols.\r\n     *\r\n     * @private\r\n     * @param {string} string The string to inspect.\r\n     * @returns {boolean} Returns `true` if a symbol is found, else `false`.\r\n     */\r\n    function hasUnicode(string) {\r\n        return reHasUnicode.test(string);\r\n    }\r\n\r\n    /**\r\n     * Converts `iterator` to an array.\r\n     *\r\n     * @private\r\n     * @param {Object} iterator The iterator to convert.\r\n     * @returns {Array} Returns the converted array.\r\n     */\r\n    function iteratorToArray(iterator) {\r\n        var data,\r\n            result = [];\r\n\r\n        while (!(data = iterator.next()).done) {\r\n            result.push(data.value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Converts `map` to its key-value pairs.\r\n     *\r\n     * @private\r\n     * @param {Object} map The map to convert.\r\n     * @returns {Array} Returns the key-value pairs.\r\n     */\r\n    function mapToArray(map) {\r\n        var index = -1,\r\n            result = Array(map.size);\r\n\r\n        map.forEach(function(value, key) {\r\n            result[++index] = [key, value];\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a unary function that invokes `func` with its argument transformed.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to wrap.\r\n     * @param {Function} transform The argument transform.\r\n     * @returns {Function} Returns the new function.\r\n     */\r\n    function overArg(func, transform) {\r\n        return function(arg) {\r\n            return func(transform(arg));\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces all `placeholder` elements in `array` with an internal placeholder\r\n     * and returns an array of their indexes.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to modify.\r\n     * @param {*} placeholder The placeholder to replace.\r\n     * @returns {Array} Returns the new array of placeholder indexes.\r\n     */\r\n    function replaceHolders(array, placeholder) {\r\n        var index = -1,\r\n            length = array.length,\r\n            resIndex = 0,\r\n            result = [];\r\n\r\n        while (++index < length) {\r\n            var value = array[index];\r\n            if (value === placeholder || value === PLACEHOLDER) {\r\n                array[index] = PLACEHOLDER;\r\n                result[resIndex++] = index;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the value at `key`, unless `key` is \"__proto__\".\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {string} key The key of the property to get.\r\n     * @returns {*} Returns the property value.\r\n     */\r\n    function safeGet(object, key) {\r\n        return key == '__proto__'\r\n            ? undefined\r\n            : object[key];\r\n    }\r\n\r\n    /**\r\n     * Converts `set` to an array of its values.\r\n     *\r\n     * @private\r\n     * @param {Object} set The set to convert.\r\n     * @returns {Array} Returns the values.\r\n     */\r\n    function setToArray(set) {\r\n        var index = -1,\r\n            result = Array(set.size);\r\n\r\n        set.forEach(function(value) {\r\n            result[++index] = value;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.indexOf` which performs strict equality\r\n     * comparisons of values, i.e. `===`.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function strictIndexOf(array, value, fromIndex) {\r\n        var index = fromIndex - 1,\r\n            length = array.length;\r\n\r\n        while (++index < length) {\r\n            if (array[index] === value) {\r\n                return index;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of symbols in `string`.\r\n     *\r\n     * @private\r\n     * @param {string} string The string to inspect.\r\n     * @returns {number} Returns the string size.\r\n     */\r\n    function stringSize(string) {\r\n        return hasUnicode(string)\r\n            ? unicodeSize(string)\r\n            : asciiSize(string);\r\n    }\r\n\r\n    /**\r\n     * Converts `string` to an array.\r\n     *\r\n     * @private\r\n     * @param {string} string The string to convert.\r\n     * @returns {Array} Returns the converted array.\r\n     */\r\n    function stringToArray(string) {\r\n        return hasUnicode(string)\r\n            ? unicodeToArray(string)\r\n            : asciiToArray(string);\r\n    }\r\n\r\n    /**\r\n     * Used by `_.unescape` to convert HTML entities to characters.\r\n     *\r\n     * @private\r\n     * @param {string} chr The matched character to unescape.\r\n     * @returns {string} Returns the unescaped character.\r\n     */\r\n    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\r\n\r\n    /**\r\n     * Gets the size of a Unicode `string`.\r\n     *\r\n     * @private\r\n     * @param {string} string The string inspect.\r\n     * @returns {number} Returns the string size.\r\n     */\r\n    function unicodeSize(string) {\r\n        var result = reUnicode.lastIndex = 0;\r\n        while (reUnicode.test(string)) {\r\n            ++result;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Converts a Unicode `string` to an array.\r\n     *\r\n     * @private\r\n     * @param {string} string The string to convert.\r\n     * @returns {Array} Returns the converted array.\r\n     */\r\n    function unicodeToArray(string) {\r\n        return string.match(reUnicode) || [];\r\n    }\r\n\r\n    /*--------------------------------------------------------------------------*/\r\n\r\n    /** Used for built-in method references. */\r\n    var arrayProto = Array.prototype,\r\n        funcProto = Function.prototype,\r\n        objectProto = Object.prototype;\r\n\r\n    /** Used to detect overreaching core-js shims. */\r\n    var coreJsData = root['__core-js_shared__'];\r\n\r\n    /** Used to resolve the decompiled source of functions. */\r\n    var funcToString = funcProto.toString;\r\n\r\n    /** Used to check objects for own properties. */\r\n    var hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n    /** Used to generate unique IDs. */\r\n    var idCounter = 0;\r\n\r\n    /** Used to detect methods masquerading as native. */\r\n    var maskSrcKey = (function() {\r\n        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\r\n        return uid ? ('Symbol(src)_1.' + uid) : '';\r\n    }());\r\n\r\n    /**\r\n     * Used to resolve the\r\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n     * of values.\r\n     */\r\n    var nativeObjectToString = objectProto.toString;\r\n\r\n    /** Used to infer the `Object` constructor. */\r\n    var objectCtorString = funcToString.call(Object);\r\n\r\n    /** Used to restore the original `_` reference in `_.noConflict`. */\r\n    var oldDash = root._;\r\n\r\n    /** Used to detect if a method is native. */\r\n    var reIsNative = RegExp('^' +\r\n        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\r\n            .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\r\n    );\r\n\r\n    /** Built-in value references. */\r\n    var Buffer = moduleExports ? root.Buffer : undefined,\r\n        Symbol = root.Symbol,\r\n        Uint8Array = root.Uint8Array,\r\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\r\n        getPrototype = overArg(Object.getPrototypeOf, Object),\r\n        objectCreate = Object.create,\r\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\r\n        splice = arrayProto.splice,\r\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\r\n        symIterator = Symbol ? Symbol.iterator : undefined,\r\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\r\n\r\n    var defineProperty = (function() {\r\n        try {\r\n            var func = getNative(Object, 'defineProperty');\r\n            func({}, '', {});\r\n            return func;\r\n        } catch (e) {}\r\n    }());\r\n\r\n    /* Built-in method references for those with the same name as other `lodash` methods. */\r\n    var nativeCeil = Math.ceil,\r\n        nativeFloor = Math.floor,\r\n        nativeGetSymbols = Object.getOwnPropertySymbols,\r\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\r\n        nativeIsFinite = root.isFinite,\r\n        nativeKeys = overArg(Object.keys, Object),\r\n        nativeMax = Math.max,\r\n        nativeMin = Math.min,\r\n        nativeNow = Date.now,\r\n        nativeRandom = Math.random,\r\n        nativeReverse = arrayProto.reverse;\r\n\r\n    /* Built-in method references that are verified to be native. */\r\n    var DataView = getNative(root, 'DataView'),\r\n        Map = getNative(root, 'Map'),\r\n        Promise = getNative(root, 'Promise'),\r\n        Set = getNative(root, 'Set'),\r\n        WeakMap = getNative(root, 'WeakMap'),\r\n        nativeCreate = getNative(Object, 'create');\r\n\r\n    /** Used to store function metadata. */\r\n    var metaMap = WeakMap && new WeakMap;\r\n\r\n    /** Used to lookup unminified function names. */\r\n    var realNames = {};\r\n\r\n    /** Used to detect maps, sets, and weakmaps. */\r\n    var dataViewCtorString = toSource(DataView),\r\n        mapCtorString = toSource(Map),\r\n        promiseCtorString = toSource(Promise),\r\n        setCtorString = toSource(Set),\r\n        weakMapCtorString = toSource(WeakMap);\r\n\r\n    /** Used to convert symbols to primitives and strings. */\r\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\r\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\r\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a `lodash` object which wraps `value` to enable implicit method\r\n     * chain sequences. Methods that operate on and return arrays, collections,\r\n     * and functions can be chained together. Methods that retrieve a single value\r\n     * or may return a primitive value will automatically end the chain sequence\r\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\r\n     * with `_#value`.\r\n     *\r\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\r\n     * enabled using `_.chain`.\r\n     *\r\n     * The execution of chained methods is lazy, that is, it's deferred until\r\n     * `_#value` is implicitly or explicitly called.\r\n     *\r\n     * Lazy evaluation allows several methods to support shortcut fusion.\r\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\r\n     * the creation of intermediate arrays and can greatly reduce the number of\r\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\r\n     * fusion if the section is applied to an array and iteratees accept only\r\n     * one argument. The heuristic for whether a section qualifies for shortcut\r\n     * fusion is subject to change.\r\n     *\r\n     * Chaining is supported in custom builds as long as the `_#value` method is\r\n     * directly or indirectly included in the build.\r\n     *\r\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\r\n     *\r\n     * The wrapper `Array` methods are:\r\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\r\n     *\r\n     * The wrapper `String` methods are:\r\n     * `replace` and `split`\r\n     *\r\n     * The wrapper methods that support shortcut fusion are:\r\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\r\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\r\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\r\n     *\r\n     * The chainable wrapper methods are:\r\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\r\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\r\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\r\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\r\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\r\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\r\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\r\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\r\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\r\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\r\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\r\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\r\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\r\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\r\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\r\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\r\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\r\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\r\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\r\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\r\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\r\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\r\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\r\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\r\n     *\r\n     * The wrapper methods that are **not** chainable by default are:\r\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\r\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\r\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\r\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\r\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\r\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\r\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\r\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\r\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\r\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\r\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\r\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\r\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\r\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\r\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\r\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\r\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\r\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\r\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\r\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\r\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\r\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\r\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\r\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\r\n     * `upperFirst`, `value`, and `words`\r\n     *\r\n     * @name _\r\n     * @constructor\r\n     * @category Seq\r\n     * @param {*} value The value to wrap in a `lodash` instance.\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * var wrapped = _([1, 2, 3]);\r\n     *\r\n     * // Returns an unwrapped value.\r\n     * wrapped.reduce(_.add);\r\n     * // => 6\r\n     *\r\n     * // Returns a wrapped value.\r\n     * var squares = wrapped.map(square);\r\n     *\r\n     * _.isArray(squares);\r\n     * // => false\r\n     *\r\n     * _.isArray(squares.value());\r\n     * // => true\r\n     */\r\n    function lodash(value) {\r\n        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\r\n            if (value instanceof LodashWrapper) {\r\n                return value;\r\n            }\r\n            if (hasOwnProperty.call(value, '__wrapped__')) {\r\n                return wrapperClone(value);\r\n            }\r\n        }\r\n        return new LodashWrapper(value);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.create` without support for assigning\r\n     * properties to the created object.\r\n     *\r\n     * @private\r\n     * @param {Object} proto The object to inherit from.\r\n     * @returns {Object} Returns the new object.\r\n     */\r\n    var baseCreate = (function() {\r\n        function object() {}\r\n        return function(proto) {\r\n            if (!isObject(proto)) {\r\n                return {};\r\n            }\r\n            if (objectCreate) {\r\n                return objectCreate(proto);\r\n            }\r\n            object.prototype = proto;\r\n            var result = new object;\r\n            object.prototype = undefined;\r\n            return result;\r\n        };\r\n    }());\r\n\r\n    /**\r\n     * The function whose prototype chain sequence wrappers inherit from.\r\n     *\r\n     * @private\r\n     */\r\n    function baseLodash() {\r\n        // No operation performed.\r\n    }\r\n\r\n    /**\r\n     * The base constructor for creating `lodash` wrapper objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to wrap.\r\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\r\n     */\r\n    function LodashWrapper(value, chainAll) {\r\n        this.__wrapped__ = value;\r\n        this.__actions__ = [];\r\n        this.__chain__ = !!chainAll;\r\n        this.__index__ = 0;\r\n        this.__values__ = undefined;\r\n    }\r\n\r\n    // Ensure wrappers are instances of `baseLodash`.\r\n    lodash.prototype = baseLodash.prototype;\r\n    lodash.prototype.constructor = lodash;\r\n\r\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\r\n    LodashWrapper.prototype.constructor = LodashWrapper;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {*} value The value to wrap.\r\n     */\r\n    function LazyWrapper(value) {\r\n        this.__wrapped__ = value;\r\n        this.__actions__ = [];\r\n        this.__dir__ = 1;\r\n        this.__filtered__ = false;\r\n        this.__iteratees__ = [];\r\n        this.__takeCount__ = MAX_ARRAY_LENGTH;\r\n        this.__views__ = [];\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of the lazy wrapper object.\r\n     *\r\n     * @private\r\n     * @name clone\r\n     * @memberOf LazyWrapper\r\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\r\n     */\r\n    function lazyClone() {\r\n        var result = new LazyWrapper(this.__wrapped__);\r\n        result.__actions__ = copyArray(this.__actions__);\r\n        result.__dir__ = this.__dir__;\r\n        result.__filtered__ = this.__filtered__;\r\n        result.__iteratees__ = copyArray(this.__iteratees__);\r\n        result.__takeCount__ = this.__takeCount__;\r\n        result.__views__ = copyArray(this.__views__);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Reverses the direction of lazy iteration.\r\n     *\r\n     * @private\r\n     * @name reverse\r\n     * @memberOf LazyWrapper\r\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\r\n     */\r\n    function lazyReverse() {\r\n        if (this.__filtered__) {\r\n            var result = new LazyWrapper(this);\r\n            result.__dir__ = -1;\r\n            result.__filtered__ = true;\r\n        } else {\r\n            result = this.clone();\r\n            result.__dir__ *= -1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Extracts the unwrapped value from its lazy wrapper.\r\n     *\r\n     * @private\r\n     * @name value\r\n     * @memberOf LazyWrapper\r\n     * @returns {*} Returns the unwrapped value.\r\n     */\r\n    function lazyValue() {\r\n        var array = this.__wrapped__.value(),\r\n            dir = this.__dir__,\r\n            isArr = isArray(array),\r\n            isRight = dir < 0,\r\n            arrLength = isArr ? array.length : 0,\r\n            view = getView(0, arrLength, this.__views__),\r\n            start = view.start,\r\n            end = view.end,\r\n            length = end - start,\r\n            index = isRight ? end : (start - 1),\r\n            iteratees = this.__iteratees__,\r\n            iterLength = iteratees.length,\r\n            resIndex = 0,\r\n            takeCount = nativeMin(length, this.__takeCount__);\r\n\r\n        if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\r\n            return baseWrapperValue(array, this.__actions__);\r\n        }\r\n        var result = [];\r\n\r\n        outer:\r\n            while (length-- && resIndex < takeCount) {\r\n                index += dir;\r\n\r\n                var iterIndex = -1,\r\n                    value = array[index];\r\n\r\n                while (++iterIndex < iterLength) {\r\n                    var data = iteratees[iterIndex],\r\n                        iteratee = data.iteratee,\r\n                        type = data.type,\r\n                        computed = iteratee(value);\r\n\r\n                    if (type == LAZY_MAP_FLAG) {\r\n                        value = computed;\r\n                    } else if (!computed) {\r\n                        if (type == LAZY_FILTER_FLAG) {\r\n                            continue outer;\r\n                        } else {\r\n                            break outer;\r\n                        }\r\n                    }\r\n                }\r\n                result[resIndex++] = value;\r\n            }\r\n        return result;\r\n    }\r\n\r\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\r\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\r\n    LazyWrapper.prototype.constructor = LazyWrapper;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a hash object.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {Array} [entries] The key-value pairs to cache.\r\n     */\r\n    function Hash(entries) {\r\n        var index = -1,\r\n            length = entries == null ? 0 : entries.length;\r\n\r\n        this.clear();\r\n        while (++index < length) {\r\n            var entry = entries[index];\r\n            this.set(entry[0], entry[1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all key-value entries from the hash.\r\n     *\r\n     * @private\r\n     * @name clear\r\n     * @memberOf Hash\r\n     */\r\n    function hashClear() {\r\n        this.__data__ = nativeCreate ? nativeCreate(null) : {};\r\n        this.size = 0;\r\n    }\r\n\r\n    /**\r\n     * Removes `key` and its value from the hash.\r\n     *\r\n     * @private\r\n     * @name delete\r\n     * @memberOf Hash\r\n     * @param {Object} hash The hash to modify.\r\n     * @param {string} key The key of the value to remove.\r\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n     */\r\n    function hashDelete(key) {\r\n        var result = this.has(key) && delete this.__data__[key];\r\n        this.size -= result ? 1 : 0;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the hash value for `key`.\r\n     *\r\n     * @private\r\n     * @name get\r\n     * @memberOf Hash\r\n     * @param {string} key The key of the value to get.\r\n     * @returns {*} Returns the entry value.\r\n     */\r\n    function hashGet(key) {\r\n        var data = this.__data__;\r\n        if (nativeCreate) {\r\n            var result = data[key];\r\n            return result === HASH_UNDEFINED ? undefined : result;\r\n        }\r\n        return hasOwnProperty.call(data, key) ? data[key] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Checks if a hash value for `key` exists.\r\n     *\r\n     * @private\r\n     * @name has\r\n     * @memberOf Hash\r\n     * @param {string} key The key of the entry to check.\r\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n     */\r\n    function hashHas(key) {\r\n        var data = this.__data__;\r\n        return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\r\n    }\r\n\r\n    /**\r\n     * Sets the hash `key` to `value`.\r\n     *\r\n     * @private\r\n     * @name set\r\n     * @memberOf Hash\r\n     * @param {string} key The key of the value to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns the hash instance.\r\n     */\r\n    function hashSet(key, value) {\r\n        var data = this.__data__;\r\n        this.size += this.has(key) ? 0 : 1;\r\n        data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\r\n        return this;\r\n    }\r\n\r\n    // Add methods to `Hash`.\r\n    Hash.prototype.clear = hashClear;\r\n    Hash.prototype['delete'] = hashDelete;\r\n    Hash.prototype.get = hashGet;\r\n    Hash.prototype.has = hashHas;\r\n    Hash.prototype.set = hashSet;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates an list cache object.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {Array} [entries] The key-value pairs to cache.\r\n     */\r\n    function ListCache(entries) {\r\n        var index = -1,\r\n            length = entries == null ? 0 : entries.length;\r\n\r\n        this.clear();\r\n        while (++index < length) {\r\n            var entry = entries[index];\r\n            this.set(entry[0], entry[1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all key-value entries from the list cache.\r\n     *\r\n     * @private\r\n     * @name clear\r\n     * @memberOf ListCache\r\n     */\r\n    function listCacheClear() {\r\n        this.__data__ = [];\r\n        this.size = 0;\r\n    }\r\n\r\n    /**\r\n     * Removes `key` and its value from the list cache.\r\n     *\r\n     * @private\r\n     * @name delete\r\n     * @memberOf ListCache\r\n     * @param {string} key The key of the value to remove.\r\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n     */\r\n    function listCacheDelete(key) {\r\n        var data = this.__data__,\r\n            index = assocIndexOf(data, key);\r\n\r\n        if (index < 0) {\r\n            return false;\r\n        }\r\n        var lastIndex = data.length - 1;\r\n        if (index == lastIndex) {\r\n            data.pop();\r\n        } else {\r\n            splice.call(data, index, 1);\r\n        }\r\n        --this.size;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the list cache value for `key`.\r\n     *\r\n     * @private\r\n     * @name get\r\n     * @memberOf ListCache\r\n     * @param {string} key The key of the value to get.\r\n     * @returns {*} Returns the entry value.\r\n     */\r\n    function listCacheGet(key) {\r\n        var data = this.__data__,\r\n            index = assocIndexOf(data, key);\r\n\r\n        return index < 0 ? undefined : data[index][1];\r\n    }\r\n\r\n    /**\r\n     * Checks if a list cache value for `key` exists.\r\n     *\r\n     * @private\r\n     * @name has\r\n     * @memberOf ListCache\r\n     * @param {string} key The key of the entry to check.\r\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n     */\r\n    function listCacheHas(key) {\r\n        return assocIndexOf(this.__data__, key) > -1;\r\n    }\r\n\r\n    /**\r\n     * Sets the list cache `key` to `value`.\r\n     *\r\n     * @private\r\n     * @name set\r\n     * @memberOf ListCache\r\n     * @param {string} key The key of the value to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns the list cache instance.\r\n     */\r\n    function listCacheSet(key, value) {\r\n        var data = this.__data__,\r\n            index = assocIndexOf(data, key);\r\n\r\n        if (index < 0) {\r\n            ++this.size;\r\n            data.push([key, value]);\r\n        } else {\r\n            data[index][1] = value;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // Add methods to `ListCache`.\r\n    ListCache.prototype.clear = listCacheClear;\r\n    ListCache.prototype['delete'] = listCacheDelete;\r\n    ListCache.prototype.get = listCacheGet;\r\n    ListCache.prototype.has = listCacheHas;\r\n    ListCache.prototype.set = listCacheSet;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a map cache object to store key-value pairs.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {Array} [entries] The key-value pairs to cache.\r\n     */\r\n    function MapCache(entries) {\r\n        var index = -1,\r\n            length = entries == null ? 0 : entries.length;\r\n\r\n        this.clear();\r\n        while (++index < length) {\r\n            var entry = entries[index];\r\n            this.set(entry[0], entry[1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all key-value entries from the map.\r\n     *\r\n     * @private\r\n     * @name clear\r\n     * @memberOf MapCache\r\n     */\r\n    function mapCacheClear() {\r\n        this.size = 0;\r\n        this.__data__ = {\r\n            'hash': new Hash,\r\n            'map': new (Map || ListCache),\r\n            'string': new Hash\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Removes `key` and its value from the map.\r\n     *\r\n     * @private\r\n     * @name delete\r\n     * @memberOf MapCache\r\n     * @param {string} key The key of the value to remove.\r\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n     */\r\n    function mapCacheDelete(key) {\r\n        var result = getMapData(this, key)['delete'](key);\r\n        this.size -= result ? 1 : 0;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the map value for `key`.\r\n     *\r\n     * @private\r\n     * @name get\r\n     * @memberOf MapCache\r\n     * @param {string} key The key of the value to get.\r\n     * @returns {*} Returns the entry value.\r\n     */\r\n    function mapCacheGet(key) {\r\n        return getMapData(this, key).get(key);\r\n    }\r\n\r\n    /**\r\n     * Checks if a map value for `key` exists.\r\n     *\r\n     * @private\r\n     * @name has\r\n     * @memberOf MapCache\r\n     * @param {string} key The key of the entry to check.\r\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n     */\r\n    function mapCacheHas(key) {\r\n        return getMapData(this, key).has(key);\r\n    }\r\n\r\n    /**\r\n     * Sets the map `key` to `value`.\r\n     *\r\n     * @private\r\n     * @name set\r\n     * @memberOf MapCache\r\n     * @param {string} key The key of the value to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns the map cache instance.\r\n     */\r\n    function mapCacheSet(key, value) {\r\n        var data = getMapData(this, key),\r\n            size = data.size;\r\n\r\n        data.set(key, value);\r\n        this.size += data.size == size ? 0 : 1;\r\n        return this;\r\n    }\r\n\r\n    // Add methods to `MapCache`.\r\n    MapCache.prototype.clear = mapCacheClear;\r\n    MapCache.prototype['delete'] = mapCacheDelete;\r\n    MapCache.prototype.get = mapCacheGet;\r\n    MapCache.prototype.has = mapCacheHas;\r\n    MapCache.prototype.set = mapCacheSet;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     *\r\n     * Creates an array cache object to store unique values.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {Array} [values] The values to cache.\r\n     */\r\n    function SetCache(values) {\r\n        var index = -1,\r\n            length = values == null ? 0 : values.length;\r\n\r\n        this.__data__ = new MapCache;\r\n        while (++index < length) {\r\n            this.add(values[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds `value` to the array cache.\r\n     *\r\n     * @private\r\n     * @name add\r\n     * @memberOf SetCache\r\n     * @alias push\r\n     * @param {*} value The value to cache.\r\n     * @returns {Object} Returns the cache instance.\r\n     */\r\n    function setCacheAdd(value) {\r\n        this.__data__.set(value, HASH_UNDEFINED);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is in the array cache.\r\n     *\r\n     * @private\r\n     * @name has\r\n     * @memberOf SetCache\r\n     * @param {*} value The value to search for.\r\n     * @returns {number} Returns `true` if `value` is found, else `false`.\r\n     */\r\n    function setCacheHas(value) {\r\n        return this.__data__.has(value);\r\n    }\r\n\r\n    // Add methods to `SetCache`.\r\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\r\n    SetCache.prototype.has = setCacheHas;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a stack cache object to store key-value pairs.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {Array} [entries] The key-value pairs to cache.\r\n     */\r\n    function Stack(entries) {\r\n        var data = this.__data__ = new ListCache(entries);\r\n        this.size = data.size;\r\n    }\r\n\r\n    /**\r\n     * Removes all key-value entries from the stack.\r\n     *\r\n     * @private\r\n     * @name clear\r\n     * @memberOf Stack\r\n     */\r\n    function stackClear() {\r\n        this.__data__ = new ListCache;\r\n        this.size = 0;\r\n    }\r\n\r\n    /**\r\n     * Removes `key` and its value from the stack.\r\n     *\r\n     * @private\r\n     * @name delete\r\n     * @memberOf Stack\r\n     * @param {string} key The key of the value to remove.\r\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n     */\r\n    function stackDelete(key) {\r\n        var data = this.__data__,\r\n            result = data['delete'](key);\r\n\r\n        this.size = data.size;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the stack value for `key`.\r\n     *\r\n     * @private\r\n     * @name get\r\n     * @memberOf Stack\r\n     * @param {string} key The key of the value to get.\r\n     * @returns {*} Returns the entry value.\r\n     */\r\n    function stackGet(key) {\r\n        return this.__data__.get(key);\r\n    }\r\n\r\n    /**\r\n     * Checks if a stack value for `key` exists.\r\n     *\r\n     * @private\r\n     * @name has\r\n     * @memberOf Stack\r\n     * @param {string} key The key of the entry to check.\r\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n     */\r\n    function stackHas(key) {\r\n        return this.__data__.has(key);\r\n    }\r\n\r\n    /**\r\n     * Sets the stack `key` to `value`.\r\n     *\r\n     * @private\r\n     * @name set\r\n     * @memberOf Stack\r\n     * @param {string} key The key of the value to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns the stack cache instance.\r\n     */\r\n    function stackSet(key, value) {\r\n        var data = this.__data__;\r\n        if (data instanceof ListCache) {\r\n            var pairs = data.__data__;\r\n            if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\r\n                pairs.push([key, value]);\r\n                this.size = ++data.size;\r\n                return this;\r\n            }\r\n            data = this.__data__ = new MapCache(pairs);\r\n        }\r\n        data.set(key, value);\r\n        this.size = data.size;\r\n        return this;\r\n    }\r\n\r\n    // Add methods to `Stack`.\r\n    Stack.prototype.clear = stackClear;\r\n    Stack.prototype['delete'] = stackDelete;\r\n    Stack.prototype.get = stackGet;\r\n    Stack.prototype.has = stackHas;\r\n    Stack.prototype.set = stackSet;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates an array of the enumerable property names of the array-like `value`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to query.\r\n     * @param {boolean} inherited Specify returning inherited property names.\r\n     * @returns {Array} Returns the array of property names.\r\n     */\r\n    function arrayLikeKeys(value, inherited) {\r\n        var isArr = isArray(value),\r\n            isArg = !isArr && isArguments(value),\r\n            isBuff = !isArr && !isArg && isBuffer(value),\r\n            isType = !isArr && !isArg && !isBuff && isTypedArray(value),\r\n            skipIndexes = isArr || isArg || isBuff || isType,\r\n            result = skipIndexes ? baseTimes(value.length, String) : [],\r\n            length = result.length;\r\n\r\n        for (var key in value) {\r\n            if ((inherited || hasOwnProperty.call(value, key)) &&\r\n                !(skipIndexes && (\r\n                    // Safari 9 has enumerable `arguments.length` in strict mode.\r\n                    key == 'length' ||\r\n                    // Node.js 0.10 has enumerable non-index properties on buffers.\r\n                    (isBuff && (key == 'offset' || key == 'parent')) ||\r\n                    // PhantomJS 2 has enumerable non-index properties on typed arrays.\r\n                    (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\r\n                    // Skip index properties.\r\n                    isIndex(key, length)\r\n                ))) {\r\n                result.push(key);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * This function is like `assignValue` except that it doesn't assign\r\n     * `undefined` values.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {string} key The key of the property to assign.\r\n     * @param {*} value The value to assign.\r\n     */\r\n    function assignMergeValue(object, key, value) {\r\n        if ((value !== undefined && !eq(object[key], value)) ||\r\n            (value === undefined && !(key in object))) {\r\n            baseAssignValue(object, key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\r\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {string} key The key of the property to assign.\r\n     * @param {*} value The value to assign.\r\n     */\r\n    function assignValue(object, key, value) {\r\n        var objValue = object[key];\r\n        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\r\n            (value === undefined && !(key in object))) {\r\n            baseAssignValue(object, key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} key The key to search for.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function assocIndexOf(array, key) {\r\n        var length = array.length;\r\n        while (length--) {\r\n            if (eq(array[length][0], key)) {\r\n                return length;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\r\n     * by `iteratee` and values set by `setter`.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} setter The function to set `accumulator` values.\r\n     * @param {Function} iteratee The iteratee to transform keys.\r\n     * @param {Object} accumulator The initial aggregated object.\r\n     * @returns {Function} Returns `accumulator`.\r\n     */\r\n    function baseAggregator(collection, setter, iteratee, accumulator) {\r\n        baseEach(collection, function(value, key, collection) {\r\n            setter(accumulator, value, iteratee(value), collection);\r\n        });\r\n        return accumulator;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.assign` without support for multiple sources\r\n     * or `customizer` functions.\r\n     *\r\n     * @private\r\n     * @param {Object} object The destination object.\r\n     * @param {Object} source The source object.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseAssign(object, source) {\r\n        return object && copyObject(source, keys(source), object);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.assignIn` without support for multiple sources\r\n     * or `customizer` functions.\r\n     *\r\n     * @private\r\n     * @param {Object} object The destination object.\r\n     * @param {Object} source The source object.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseAssignIn(object, source) {\r\n        return object && copyObject(source, keysIn(source), object);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `assignValue` and `assignMergeValue` without\r\n     * value checks.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {string} key The key of the property to assign.\r\n     * @param {*} value The value to assign.\r\n     */\r\n    function baseAssignValue(object, key, value) {\r\n        if (key == '__proto__' && defineProperty) {\r\n            defineProperty(object, key, {\r\n                'configurable': true,\r\n                'enumerable': true,\r\n                'value': value,\r\n                'writable': true\r\n            });\r\n        } else {\r\n            object[key] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.at` without support for individual paths.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {string[]} paths The property paths to pick.\r\n     * @returns {Array} Returns the picked elements.\r\n     */\r\n    function baseAt(object, paths) {\r\n        var index = -1,\r\n            length = paths.length,\r\n            result = Array(length),\r\n            skip = object == null;\r\n\r\n        while (++index < length) {\r\n            result[index] = skip ? undefined : get(object, paths[index]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {number} number The number to clamp.\r\n     * @param {number} [lower] The lower bound.\r\n     * @param {number} upper The upper bound.\r\n     * @returns {number} Returns the clamped number.\r\n     */\r\n    function baseClamp(number, lower, upper) {\r\n        if (number === number) {\r\n            if (upper !== undefined) {\r\n                number = number <= upper ? number : upper;\r\n            }\r\n            if (lower !== undefined) {\r\n                number = number >= lower ? number : lower;\r\n            }\r\n        }\r\n        return number;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\r\n     * traversed objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to clone.\r\n     * @param {boolean} bitmask The bitmask flags.\r\n     *  1 - Deep clone\r\n     *  2 - Flatten inherited properties\r\n     *  4 - Clone symbols\r\n     * @param {Function} [customizer] The function to customize cloning.\r\n     * @param {string} [key] The key of `value`.\r\n     * @param {Object} [object] The parent object of `value`.\r\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\r\n     * @returns {*} Returns the cloned value.\r\n     */\r\n    function baseClone(value, bitmask, customizer, key, object, stack) {\r\n        var result,\r\n            isDeep = bitmask & CLONE_DEEP_FLAG,\r\n            isFlat = bitmask & CLONE_FLAT_FLAG,\r\n            isFull = bitmask & CLONE_SYMBOLS_FLAG;\r\n\r\n        if (customizer) {\r\n            result = object ? customizer(value, key, object, stack) : customizer(value);\r\n        }\r\n        if (result !== undefined) {\r\n            return result;\r\n        }\r\n        if (!isObject(value)) {\r\n            return value;\r\n        }\r\n        var isArr = isArray(value);\r\n        if (isArr) {\r\n            result = initCloneArray(value);\r\n            if (!isDeep) {\r\n                return copyArray(value, result);\r\n            }\r\n        } else {\r\n            var tag = getTag(value),\r\n                isFunc = tag == funcTag || tag == genTag;\r\n\r\n            if (isBuffer(value)) {\r\n                return cloneBuffer(value, isDeep);\r\n            }\r\n            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\r\n                result = (isFlat || isFunc) ? {} : initCloneObject(value);\r\n                if (!isDeep) {\r\n                    return isFlat\r\n                        ? copySymbolsIn(value, baseAssignIn(result, value))\r\n                        : copySymbols(value, baseAssign(result, value));\r\n                }\r\n            } else {\r\n                if (!cloneableTags[tag]) {\r\n                    return object ? value : {};\r\n                }\r\n                result = initCloneByTag(value, tag, isDeep);\r\n            }\r\n        }\r\n        // Check for circular references and return its corresponding clone.\r\n        stack || (stack = new Stack);\r\n        var stacked = stack.get(value);\r\n        if (stacked) {\r\n            return stacked;\r\n        }\r\n        stack.set(value, result);\r\n\r\n        if (isSet(value)) {\r\n            value.forEach(function(subValue) {\r\n                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\r\n            });\r\n\r\n            return result;\r\n        }\r\n\r\n        if (isMap(value)) {\r\n            value.forEach(function(subValue, key) {\r\n                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\r\n            });\r\n\r\n            return result;\r\n        }\r\n\r\n        var keysFunc = isFull\r\n            ? (isFlat ? getAllKeysIn : getAllKeys)\r\n            : (isFlat ? keysIn : keys);\r\n\r\n        var props = isArr ? undefined : keysFunc(value);\r\n        arrayEach(props || value, function(subValue, key) {\r\n            if (props) {\r\n                key = subValue;\r\n                subValue = value[key];\r\n            }\r\n            // Recursively populate clone (susceptible to call stack limits).\r\n            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\r\n     * to provide to `func`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to delay.\r\n     * @param {number} wait The number of milliseconds to delay invocation.\r\n     * @param {Array} args The arguments to provide to `func`.\r\n     * @returns {number|Object} Returns the timer id or timeout object.\r\n     */\r\n    function baseDelay(func, wait, args) {\r\n        if (typeof func != 'function') {\r\n            throw new TypeError(FUNC_ERROR_TEXT);\r\n        }\r\n        return setTimeout(function() { func.apply(undefined, args); }, wait);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of methods like `_.difference` without support\r\n     * for excluding multiple arrays or iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Array} values The values to exclude.\r\n     * @param {Function} [iteratee] The iteratee invoked per element.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     */\r\n    function baseDifference(array, values, iteratee, comparator) {\r\n        var index = -1,\r\n            includes = arrayIncludes,\r\n            isCommon = true,\r\n            length = array.length,\r\n            result = [],\r\n            valuesLength = values.length;\r\n\r\n        if (!length) {\r\n            return result;\r\n        }\r\n        if (iteratee) {\r\n            values = arrayMap(values, baseUnary(iteratee));\r\n        }\r\n        if (comparator) {\r\n            includes = arrayIncludesWith;\r\n            isCommon = false;\r\n        }\r\n        else if (values.length >= LARGE_ARRAY_SIZE) {\r\n            includes = cacheHas;\r\n            isCommon = false;\r\n            values = new SetCache(values);\r\n        }\r\n        outer:\r\n            while (++index < length) {\r\n                var value = array[index],\r\n                    computed = iteratee == null ? value : iteratee(value);\r\n\r\n                value = (comparator || value !== 0) ? value : 0;\r\n                if (isCommon && computed === computed) {\r\n                    var valuesIndex = valuesLength;\r\n                    while (valuesIndex--) {\r\n                        if (values[valuesIndex] === computed) {\r\n                            continue outer;\r\n                        }\r\n                    }\r\n                    result.push(value);\r\n                }\r\n                else if (!includes(values, computed, comparator)) {\r\n                    result.push(value);\r\n                }\r\n            }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Array|Object} Returns `collection`.\r\n     */\r\n    var baseEach = createBaseEach(baseForOwn);\r\n\r\n    /**\r\n     * The base implementation of `_.every` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\r\n     *  else `false`\r\n     */\r\n    function baseEvery(collection, predicate) {\r\n        var result = true;\r\n        baseEach(collection, function(value, index, collection) {\r\n            result = !!predicate(value, index, collection);\r\n            return result;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\r\n     * `comparator` to determine the extremum value.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to iterate over.\r\n     * @param {Function} iteratee The iteratee invoked per iteration.\r\n     * @param {Function} comparator The comparator used to compare values.\r\n     * @returns {*} Returns the extremum value.\r\n     */\r\n    function baseExtremum(array, iteratee, comparator) {\r\n        var index = -1,\r\n            length = array.length;\r\n\r\n        while (++index < length) {\r\n            var value = array[index],\r\n                current = iteratee(value);\r\n\r\n            if (current != null && (computed === undefined\r\n                    ? (current === current && !isSymbol(current))\r\n                    : comparator(current, computed)\r\n            )) {\r\n                var computed = current,\r\n                    result = value;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.filter` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @returns {Array} Returns the new filtered array.\r\n     */\r\n    function baseFilter(collection, predicate) {\r\n        var result = [];\r\n        baseEach(collection, function(value, index, collection) {\r\n            if (predicate(value, index, collection)) {\r\n                result.push(value);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.flatten` with support for restricting flattening.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to flatten.\r\n     * @param {number} depth The maximum recursion depth.\r\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\r\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\r\n     * @param {Array} [result=[]] The initial result value.\r\n     * @returns {Array} Returns the new flattened array.\r\n     */\r\n    function baseFlatten(array, depth, predicate, isStrict, result) {\r\n        var index = -1,\r\n            length = array.length;\r\n\r\n        predicate || (predicate = isFlattenable);\r\n        result || (result = []);\r\n\r\n        while (++index < length) {\r\n            var value = array[index];\r\n            if (depth > 0 && predicate(value)) {\r\n                if (depth > 1) {\r\n                    // Recursively flatten arrays (susceptible to call stack limits).\r\n                    baseFlatten(value, depth - 1, predicate, isStrict, result);\r\n                } else {\r\n                    arrayPush(result, value);\r\n                }\r\n            } else if (!isStrict) {\r\n                result[result.length] = value;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `baseForOwn` which iterates over `object`\r\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\r\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @param {Function} keysFunc The function to get the keys of `object`.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    var baseFor = createBaseFor();\r\n\r\n    /**\r\n     * This function is like `baseFor` except that it iterates over properties\r\n     * in the opposite order.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @param {Function} keysFunc The function to get the keys of `object`.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    var baseForRight = createBaseFor(true);\r\n\r\n    /**\r\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseForOwn(object, iteratee) {\r\n        return object && baseFor(object, iteratee, keys);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseForOwnRight(object, iteratee) {\r\n        return object && baseForRight(object, iteratee, keys);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.functions` which creates an array of\r\n     * `object` function property names filtered from `props`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Array} props The property names to filter.\r\n     * @returns {Array} Returns the function names.\r\n     */\r\n    function baseFunctions(object, props) {\r\n        return arrayFilter(props, function(key) {\r\n            return isFunction(object[key]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.get` without support for default values.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @returns {*} Returns the resolved value.\r\n     */\r\n    function baseGet(object, path) {\r\n        path = castPath(path, object);\r\n\r\n        var index = 0,\r\n            length = path.length;\r\n\r\n        while (object != null && index < length) {\r\n            object = object[toKey(path[index++])];\r\n        }\r\n        return (index && index == length) ? object : undefined;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\r\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\r\n     * symbols of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Function} keysFunc The function to get the keys of `object`.\r\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\r\n     * @returns {Array} Returns the array of property names and symbols.\r\n     */\r\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\r\n        var result = keysFunc(object);\r\n        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `getTag` without fallbacks for buggy environments.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to query.\r\n     * @returns {string} Returns the `toStringTag`.\r\n     */\r\n    function baseGetTag(value) {\r\n        if (value == null) {\r\n            return value === undefined ? undefinedTag : nullTag;\r\n        }\r\n        return (symToStringTag && symToStringTag in Object(value))\r\n            ? getRawTag(value)\r\n            : objectToString(value);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.gt` which doesn't coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\r\n     *  else `false`.\r\n     */\r\n    function baseGt(value, other) {\r\n        return value > other;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.has` without support for deep paths.\r\n     *\r\n     * @private\r\n     * @param {Object} [object] The object to query.\r\n     * @param {Array|string} key The key to check.\r\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\r\n     */\r\n    function baseHas(object, key) {\r\n        return object != null && hasOwnProperty.call(object, key);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.hasIn` without support for deep paths.\r\n     *\r\n     * @private\r\n     * @param {Object} [object] The object to query.\r\n     * @param {Array|string} key The key to check.\r\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\r\n     */\r\n    function baseHasIn(object, key) {\r\n        return object != null && key in Object(object);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of methods like `_.intersection`, without support\r\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\r\n     *\r\n     * @private\r\n     * @param {Array} arrays The arrays to inspect.\r\n     * @param {Function} [iteratee] The iteratee invoked per element.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new array of shared values.\r\n     */\r\n    function baseIntersection(arrays, iteratee, comparator) {\r\n        var includes = comparator ? arrayIncludesWith : arrayIncludes,\r\n            length = arrays[0].length,\r\n            othLength = arrays.length,\r\n            othIndex = othLength,\r\n            caches = Array(othLength),\r\n            maxLength = Infinity,\r\n            result = [];\r\n\r\n        while (othIndex--) {\r\n            var array = arrays[othIndex];\r\n            if (othIndex && iteratee) {\r\n                array = arrayMap(array, baseUnary(iteratee));\r\n            }\r\n            maxLength = nativeMin(array.length, maxLength);\r\n            caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\r\n                ? new SetCache(othIndex && array)\r\n                : undefined;\r\n        }\r\n        array = arrays[0];\r\n\r\n        var index = -1,\r\n            seen = caches[0];\r\n\r\n        outer:\r\n            while (++index < length && result.length < maxLength) {\r\n                var value = array[index],\r\n                    computed = iteratee ? iteratee(value) : value;\r\n\r\n                value = (comparator || value !== 0) ? value : 0;\r\n                if (!(seen\r\n                        ? cacheHas(seen, computed)\r\n                        : includes(result, computed, comparator)\r\n                )) {\r\n                    othIndex = othLength;\r\n                    while (--othIndex) {\r\n                        var cache = caches[othIndex];\r\n                        if (!(cache\r\n                            ? cacheHas(cache, computed)\r\n                            : includes(arrays[othIndex], computed, comparator))\r\n                        ) {\r\n                            continue outer;\r\n                        }\r\n                    }\r\n                    if (seen) {\r\n                        seen.push(computed);\r\n                    }\r\n                    result.push(value);\r\n                }\r\n            }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\r\n     * `object` with values transformed by `iteratee` and set by `setter`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} setter The function to set `accumulator` values.\r\n     * @param {Function} iteratee The iteratee to transform values.\r\n     * @param {Object} accumulator The initial inverted object.\r\n     * @returns {Function} Returns `accumulator`.\r\n     */\r\n    function baseInverter(object, setter, iteratee, accumulator) {\r\n        baseForOwn(object, function(value, key, object) {\r\n            setter(accumulator, iteratee(value), key, object);\r\n        });\r\n        return accumulator;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.invoke` without support for individual\r\n     * method arguments.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the method to invoke.\r\n     * @param {Array} args The arguments to invoke the method with.\r\n     * @returns {*} Returns the result of the invoked method.\r\n     */\r\n    function baseInvoke(object, path, args) {\r\n        path = castPath(path, object);\r\n        object = parent(object, path);\r\n        var func = object == null ? object : object[toKey(last(path))];\r\n        return func == null ? undefined : apply(func, object, args);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isArguments`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n     */\r\n    function baseIsArguments(value) {\r\n        return isObjectLike(value) && baseGetTag(value) == argsTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isDate` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\r\n     */\r\n    function baseIsDate(value) {\r\n        return isObjectLike(value) && baseGetTag(value) == dateTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isEqual` which supports partial comparisons\r\n     * and tracks traversed objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @param {boolean} bitmask The bitmask flags.\r\n     *  1 - Unordered comparison\r\n     *  2 - Partial comparison\r\n     * @param {Function} [customizer] The function to customize comparisons.\r\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\r\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n     */\r\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\r\n        if (value === other) {\r\n            return true;\r\n        }\r\n        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\r\n            return value !== value && other !== other;\r\n        }\r\n        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\r\n     * deep comparisons and tracks traversed objects enabling objects with circular\r\n     * references to be compared.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to compare.\r\n     * @param {Object} other The other object to compare.\r\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n     * @param {Function} customizer The function to customize comparisons.\r\n     * @param {Function} equalFunc The function to determine equivalents of values.\r\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\r\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n     */\r\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\r\n        var objIsArr = isArray(object),\r\n            othIsArr = isArray(other),\r\n            objTag = objIsArr ? arrayTag : getTag(object),\r\n            othTag = othIsArr ? arrayTag : getTag(other);\r\n\r\n        objTag = objTag == argsTag ? objectTag : objTag;\r\n        othTag = othTag == argsTag ? objectTag : othTag;\r\n\r\n        var objIsObj = objTag == objectTag,\r\n            othIsObj = othTag == objectTag,\r\n            isSameTag = objTag == othTag;\r\n\r\n        if (isSameTag && isBuffer(object)) {\r\n            if (!isBuffer(other)) {\r\n                return false;\r\n            }\r\n            objIsArr = true;\r\n            objIsObj = false;\r\n        }\r\n        if (isSameTag && !objIsObj) {\r\n            stack || (stack = new Stack);\r\n            return (objIsArr || isTypedArray(object))\r\n                ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\r\n                : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\r\n        }\r\n        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\r\n            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\r\n                othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\r\n\r\n            if (objIsWrapped || othIsWrapped) {\r\n                var objUnwrapped = objIsWrapped ? object.value() : object,\r\n                    othUnwrapped = othIsWrapped ? other.value() : other;\r\n\r\n                stack || (stack = new Stack);\r\n                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\r\n            }\r\n        }\r\n        if (!isSameTag) {\r\n            return false;\r\n        }\r\n        stack || (stack = new Stack);\r\n        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isMap` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\r\n     */\r\n    function baseIsMap(value) {\r\n        return isObjectLike(value) && getTag(value) == mapTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Object} source The object of property values to match.\r\n     * @param {Array} matchData The property names, values, and compare flags to match.\r\n     * @param {Function} [customizer] The function to customize comparisons.\r\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\r\n     */\r\n    function baseIsMatch(object, source, matchData, customizer) {\r\n        var index = matchData.length,\r\n            length = index,\r\n            noCustomizer = !customizer;\r\n\r\n        if (object == null) {\r\n            return !length;\r\n        }\r\n        object = Object(object);\r\n        while (index--) {\r\n            var data = matchData[index];\r\n            if ((noCustomizer && data[2])\r\n                ? data[1] !== object[data[0]]\r\n                : !(data[0] in object)\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n        while (++index < length) {\r\n            data = matchData[index];\r\n            var key = data[0],\r\n                objValue = object[key],\r\n                srcValue = data[1];\r\n\r\n            if (noCustomizer && data[2]) {\r\n                if (objValue === undefined && !(key in object)) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                var stack = new Stack;\r\n                if (customizer) {\r\n                    var result = customizer(objValue, srcValue, key, object, source, stack);\r\n                }\r\n                if (!(result === undefined\r\n                        ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\r\n                        : result\r\n                )) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isNative` without bad shim checks.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a native function,\r\n     *  else `false`.\r\n     */\r\n    function baseIsNative(value) {\r\n        if (!isObject(value) || isMasked(value)) {\r\n            return false;\r\n        }\r\n        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\r\n        return pattern.test(toSource(value));\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\r\n     */\r\n    function baseIsRegExp(value) {\r\n        return isObjectLike(value) && baseGetTag(value) == regexpTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isSet` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\r\n     */\r\n    function baseIsSet(value) {\r\n        return isObjectLike(value) && getTag(value) == setTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n     */\r\n    function baseIsTypedArray(value) {\r\n        return isObjectLike(value) &&\r\n            isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.iteratee`.\r\n     *\r\n     * @private\r\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\r\n     * @returns {Function} Returns the iteratee.\r\n     */\r\n    function baseIteratee(value) {\r\n        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\r\n        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\r\n        if (typeof value == 'function') {\r\n            return value;\r\n        }\r\n        if (value == null) {\r\n            return identity;\r\n        }\r\n        if (typeof value == 'object') {\r\n            return isArray(value)\r\n                ? baseMatchesProperty(value[0], value[1])\r\n                : baseMatches(value);\r\n        }\r\n        return property(value);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     */\r\n    function baseKeys(object) {\r\n        if (!isPrototype(object)) {\r\n            return nativeKeys(object);\r\n        }\r\n        var result = [];\r\n        for (var key in Object(object)) {\r\n            if (hasOwnProperty.call(object, key) && key != 'constructor') {\r\n                result.push(key);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     */\r\n    function baseKeysIn(object) {\r\n        if (!isObject(object)) {\r\n            return nativeKeysIn(object);\r\n        }\r\n        var isProto = isPrototype(object),\r\n            result = [];\r\n\r\n        for (var key in object) {\r\n            if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\r\n                result.push(key);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.lt` which doesn't coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\r\n     *  else `false`.\r\n     */\r\n    function baseLt(value, other) {\r\n        return value < other;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.map` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Array} Returns the new mapped array.\r\n     */\r\n    function baseMap(collection, iteratee) {\r\n        var index = -1,\r\n            result = isArrayLike(collection) ? Array(collection.length) : [];\r\n\r\n        baseEach(collection, function(value, key, collection) {\r\n            result[++index] = iteratee(value, key, collection);\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.matches` which doesn't clone `source`.\r\n     *\r\n     * @private\r\n     * @param {Object} source The object of property values to match.\r\n     * @returns {Function} Returns the new spec function.\r\n     */\r\n    function baseMatches(source) {\r\n        var matchData = getMatchData(source);\r\n        if (matchData.length == 1 && matchData[0][2]) {\r\n            return matchesStrictComparable(matchData[0][0], matchData[0][1]);\r\n        }\r\n        return function(object) {\r\n            return object === source || baseIsMatch(object, source, matchData);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\r\n     *\r\n     * @private\r\n     * @param {string} path The path of the property to get.\r\n     * @param {*} srcValue The value to match.\r\n     * @returns {Function} Returns the new spec function.\r\n     */\r\n    function baseMatchesProperty(path, srcValue) {\r\n        if (isKey(path) && isStrictComparable(srcValue)) {\r\n            return matchesStrictComparable(toKey(path), srcValue);\r\n        }\r\n        return function(object) {\r\n            var objValue = get(object, path);\r\n            return (objValue === undefined && objValue === srcValue)\r\n                ? hasIn(object, path)\r\n                : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.merge` without support for multiple sources.\r\n     *\r\n     * @private\r\n     * @param {Object} object The destination object.\r\n     * @param {Object} source The source object.\r\n     * @param {number} srcIndex The index of `source`.\r\n     * @param {Function} [customizer] The function to customize merged values.\r\n     * @param {Object} [stack] Tracks traversed source values and their merged\r\n     *  counterparts.\r\n     */\r\n    function baseMerge(object, source, srcIndex, customizer, stack) {\r\n        if (object === source) {\r\n            return;\r\n        }\r\n        baseFor(source, function(srcValue, key) {\r\n            if (isObject(srcValue)) {\r\n                stack || (stack = new Stack);\r\n                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\r\n            }\r\n            else {\r\n                var newValue = customizer\r\n                    ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\r\n                    : undefined;\r\n\r\n                if (newValue === undefined) {\r\n                    newValue = srcValue;\r\n                }\r\n                assignMergeValue(object, key, newValue);\r\n            }\r\n        }, keysIn);\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseMerge` for arrays and objects which performs\r\n     * deep merges and tracks traversed objects enabling objects with circular\r\n     * references to be merged.\r\n     *\r\n     * @private\r\n     * @param {Object} object The destination object.\r\n     * @param {Object} source The source object.\r\n     * @param {string} key The key of the value to merge.\r\n     * @param {number} srcIndex The index of `source`.\r\n     * @param {Function} mergeFunc The function to merge values.\r\n     * @param {Function} [customizer] The function to customize assigned values.\r\n     * @param {Object} [stack] Tracks traversed source values and their merged\r\n     *  counterparts.\r\n     */\r\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\r\n        var objValue = safeGet(object, key),\r\n            srcValue = safeGet(source, key),\r\n            stacked = stack.get(srcValue);\r\n\r\n        if (stacked) {\r\n            assignMergeValue(object, key, stacked);\r\n            return;\r\n        }\r\n        var newValue = customizer\r\n            ? customizer(objValue, srcValue, (key + ''), object, source, stack)\r\n            : undefined;\r\n\r\n        var isCommon = newValue === undefined;\r\n\r\n        if (isCommon) {\r\n            var isArr = isArray(srcValue),\r\n                isBuff = !isArr && isBuffer(srcValue),\r\n                isTyped = !isArr && !isBuff && isTypedArray(srcValue);\r\n\r\n            newValue = srcValue;\r\n            if (isArr || isBuff || isTyped) {\r\n                if (isArray(objValue)) {\r\n                    newValue = objValue;\r\n                }\r\n                else if (isArrayLikeObject(objValue)) {\r\n                    newValue = copyArray(objValue);\r\n                }\r\n                else if (isBuff) {\r\n                    isCommon = false;\r\n                    newValue = cloneBuffer(srcValue, true);\r\n                }\r\n                else if (isTyped) {\r\n                    isCommon = false;\r\n                    newValue = cloneTypedArray(srcValue, true);\r\n                }\r\n                else {\r\n                    newValue = [];\r\n                }\r\n            }\r\n            else if (isPlainObject(srcValue) || isArguments(srcValue)) {\r\n                newValue = objValue;\r\n                if (isArguments(objValue)) {\r\n                    newValue = toPlainObject(objValue);\r\n                }\r\n                else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\r\n                    newValue = initCloneObject(srcValue);\r\n                }\r\n            }\r\n            else {\r\n                isCommon = false;\r\n            }\r\n        }\r\n        if (isCommon) {\r\n            // Recursively merge objects and arrays (susceptible to call stack limits).\r\n            stack.set(srcValue, newValue);\r\n            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\r\n            stack['delete'](srcValue);\r\n        }\r\n        assignMergeValue(object, key, newValue);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.orderBy` without param guards.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\r\n     * @param {string[]} orders The sort orders of `iteratees`.\r\n     * @returns {Array} Returns the new sorted array.\r\n     */\r\n    function baseOrderBy(collection, iteratees, orders) {\r\n        var index = -1;\r\n        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\r\n\r\n        var result = baseMap(collection, function(value, key, collection) {\r\n            var criteria = arrayMap(iteratees, function(iteratee) {\r\n                return iteratee(value);\r\n            });\r\n            return { 'criteria': criteria, 'index': ++index, 'value': value };\r\n        });\r\n\r\n        return baseSortBy(result, function(object, other) {\r\n            return compareMultiple(object, other, orders);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.pick` without support for individual\r\n     * property identifiers.\r\n     *\r\n     * @private\r\n     * @param {Object} object The source object.\r\n     * @param {string[]} paths The property paths to pick.\r\n     * @returns {Object} Returns the new object.\r\n     */\r\n    function basePick(object, paths) {\r\n        return basePickBy(object, paths, function(value, path) {\r\n            return hasIn(object, path);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Object} object The source object.\r\n     * @param {string[]} paths The property paths to pick.\r\n     * @param {Function} predicate The function invoked per property.\r\n     * @returns {Object} Returns the new object.\r\n     */\r\n    function basePickBy(object, paths, predicate) {\r\n        var index = -1,\r\n            length = paths.length,\r\n            result = {};\r\n\r\n        while (++index < length) {\r\n            var path = paths[index],\r\n                value = baseGet(object, path);\r\n\r\n            if (predicate(value, path)) {\r\n                baseSet(result, castPath(path, object), value);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseProperty` which supports deep paths.\r\n     *\r\n     * @private\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @returns {Function} Returns the new accessor function.\r\n     */\r\n    function basePropertyDeep(path) {\r\n        return function(object) {\r\n            return baseGet(object, path);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.random` without support for returning\r\n     * floating-point numbers.\r\n     *\r\n     * @private\r\n     * @param {number} lower The lower bound.\r\n     * @param {number} upper The upper bound.\r\n     * @returns {number} Returns the random number.\r\n     */\r\n    function baseRandom(lower, upper) {\r\n        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\r\n     * coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {number} start The start of the range.\r\n     * @param {number} end The end of the range.\r\n     * @param {number} step The value to increment or decrement by.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {Array} Returns the range of numbers.\r\n     */\r\n    function baseRange(start, end, step, fromRight) {\r\n        var index = -1,\r\n            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\r\n            result = Array(length);\r\n\r\n        while (length--) {\r\n            result[fromRight ? length : ++index] = start;\r\n            start += step;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to apply a rest parameter to.\r\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\r\n     * @returns {Function} Returns the new function.\r\n     */\r\n    function baseRest(func, start) {\r\n        return setToString(overRest(func, start, identity), func + '');\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.set`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The path of the property to set.\r\n     * @param {*} value The value to set.\r\n     * @param {Function} [customizer] The function to customize path creation.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseSet(object, path, value, customizer) {\r\n        if (!isObject(object)) {\r\n            return object;\r\n        }\r\n        path = castPath(path, object);\r\n\r\n        var index = -1,\r\n            length = path.length,\r\n            lastIndex = length - 1,\r\n            nested = object;\r\n\r\n        while (nested != null && ++index < length) {\r\n            var key = toKey(path[index]),\r\n                newValue = value;\r\n\r\n            if (index != lastIndex) {\r\n                var objValue = nested[key];\r\n                newValue = customizer ? customizer(objValue, key, nested) : undefined;\r\n                if (newValue === undefined) {\r\n                    newValue = isObject(objValue)\r\n                        ? objValue\r\n                        : (isIndex(path[index + 1]) ? [] : {});\r\n                }\r\n            }\r\n            assignValue(nested, key, newValue);\r\n            nested = nested[key];\r\n        }\r\n        return object;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `setData` without support for hot loop shorting.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to associate metadata with.\r\n     * @param {*} data The metadata.\r\n     * @returns {Function} Returns `func`.\r\n     */\r\n    var baseSetData = !metaMap ? identity : function(func, data) {\r\n        metaMap.set(func, data);\r\n        return func;\r\n    };\r\n\r\n    /**\r\n     * The base implementation of `setToString` without support for hot loop shorting.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to modify.\r\n     * @param {Function} string The `toString` result.\r\n     * @returns {Function} Returns `func`.\r\n     */\r\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\r\n        return defineProperty(func, 'toString', {\r\n            'configurable': true,\r\n            'enumerable': false,\r\n            'value': constant(string),\r\n            'writable': true\r\n        });\r\n    };\r\n\r\n    /**\r\n     * The base implementation of `_.slice` without an iteratee call guard.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to slice.\r\n     * @param {number} [start=0] The start position.\r\n     * @param {number} [end=array.length] The end position.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     */\r\n    function baseSlice(array, start, end) {\r\n        var index = -1,\r\n            length = array.length;\r\n\r\n        if (start < 0) {\r\n            start = -start > length ? 0 : (length + start);\r\n        }\r\n        end = end > length ? length : end;\r\n        if (end < 0) {\r\n            end += length;\r\n        }\r\n        length = start > end ? 0 : ((end - start) >>> 0);\r\n        start >>>= 0;\r\n\r\n        var result = Array(length);\r\n        while (++index < length) {\r\n            result[index] = array[index + start];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.some` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\r\n     *  else `false`.\r\n     */\r\n    function baseSome(collection, predicate) {\r\n        var result;\r\n\r\n        baseEach(collection, function(value, index, collection) {\r\n            result = predicate(value, index, collection);\r\n            return !result;\r\n        });\r\n        return !!result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.toString` which doesn't convert nullish\r\n     * values to empty strings.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to process.\r\n     * @returns {string} Returns the string.\r\n     */\r\n    function baseToString(value) {\r\n        // Exit early for strings to avoid a performance hit in some environments.\r\n        if (typeof value == 'string') {\r\n            return value;\r\n        }\r\n        if (isArray(value)) {\r\n            // Recursively convert values (susceptible to call stack limits).\r\n            return arrayMap(value, baseToString) + '';\r\n        }\r\n        if (isSymbol(value)) {\r\n            return symbolToString ? symbolToString.call(value) : '';\r\n        }\r\n        var result = (value + '');\r\n        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [iteratee] The iteratee invoked per element.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new duplicate free array.\r\n     */\r\n    function baseUniq(array, iteratee, comparator) {\r\n        var index = -1,\r\n            includes = arrayIncludes,\r\n            length = array.length,\r\n            isCommon = true,\r\n            result = [],\r\n            seen = result;\r\n\r\n        if (comparator) {\r\n            isCommon = false;\r\n            includes = arrayIncludesWith;\r\n        }\r\n        else if (length >= LARGE_ARRAY_SIZE) {\r\n            var set = iteratee ? null : createSet(array);\r\n            if (set) {\r\n                return setToArray(set);\r\n            }\r\n            isCommon = false;\r\n            includes = cacheHas;\r\n            seen = new SetCache;\r\n        }\r\n        else {\r\n            seen = iteratee ? [] : result;\r\n        }\r\n        outer:\r\n            while (++index < length) {\r\n                var value = array[index],\r\n                    computed = iteratee ? iteratee(value) : value;\r\n\r\n                value = (comparator || value !== 0) ? value : 0;\r\n                if (isCommon && computed === computed) {\r\n                    var seenIndex = seen.length;\r\n                    while (seenIndex--) {\r\n                        if (seen[seenIndex] === computed) {\r\n                            continue outer;\r\n                        }\r\n                    }\r\n                    if (iteratee) {\r\n                        seen.push(computed);\r\n                    }\r\n                    result.push(value);\r\n                }\r\n                else if (!includes(seen, computed, comparator)) {\r\n                    if (seen !== result) {\r\n                        seen.push(computed);\r\n                    }\r\n                    result.push(value);\r\n                }\r\n            }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.unset`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The property path to unset.\r\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\r\n     */\r\n    function baseUnset(object, path) {\r\n        path = castPath(path, object);\r\n        object = parent(object, path);\r\n        return object == null || delete object[toKey(last(path))];\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `wrapperValue` which returns the result of\r\n     * performing a sequence of actions on the unwrapped `value`, where each\r\n     * successive action is supplied the return value of the previous.\r\n     *\r\n     * @private\r\n     * @param {*} value The unwrapped value.\r\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\r\n     * @returns {*} Returns the resolved value.\r\n     */\r\n    function baseWrapperValue(value, actions) {\r\n        var result = value;\r\n        if (result instanceof LazyWrapper) {\r\n            result = result.value();\r\n        }\r\n        return arrayReduce(actions, function(result, action) {\r\n            return action.func.apply(action.thisArg, arrayPush([result], action.args));\r\n        }, result);\r\n    }\r\n\r\n    /**\r\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\r\n     *\r\n     * @private\r\n     * @param {Array} props The property identifiers.\r\n     * @param {Array} values The property values.\r\n     * @param {Function} assignFunc The function to assign values.\r\n     * @returns {Object} Returns the new object.\r\n     */\r\n    function baseZipObject(props, values, assignFunc) {\r\n        var index = -1,\r\n            length = props.length,\r\n            valsLength = values.length,\r\n            result = {};\r\n\r\n        while (++index < length) {\r\n            var value = index < valsLength ? values[index] : undefined;\r\n            assignFunc(result, props[index], value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Casts `value` to an empty array if it's not an array like object.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to inspect.\r\n     * @returns {Array|Object} Returns the cast array-like object.\r\n     */\r\n    function castArrayLikeObject(value) {\r\n        return isArrayLikeObject(value) ? value : [];\r\n    }\r\n\r\n    /**\r\n     * Casts `value` to a path array if it's not one.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to inspect.\r\n     * @param {Object} [object] The object to query keys on.\r\n     * @returns {Array} Returns the cast property path array.\r\n     */\r\n    function castPath(value, object) {\r\n        if (isArray(value)) {\r\n            return value;\r\n        }\r\n        return isKey(value, object) ? [value] : stringToPath(toString(value));\r\n    }\r\n\r\n    /**\r\n     * Casts `array` to a slice if it's needed.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {number} start The start position.\r\n     * @param {number} [end=array.length] The end position.\r\n     * @returns {Array} Returns the cast slice.\r\n     */\r\n    function castSlice(array, start, end) {\r\n        var length = array.length;\r\n        end = end === undefined ? length : end;\r\n        return (!start && end >= length) ? array : baseSlice(array, start, end);\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of  `buffer`.\r\n     *\r\n     * @private\r\n     * @param {Buffer} buffer The buffer to clone.\r\n     * @param {boolean} [isDeep] Specify a deep clone.\r\n     * @returns {Buffer} Returns the cloned buffer.\r\n     */\r\n    function cloneBuffer(buffer, isDeep) {\r\n        if (isDeep) {\r\n            return buffer.slice();\r\n        }\r\n        var length = buffer.length,\r\n            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\r\n\r\n        buffer.copy(result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of `arrayBuffer`.\r\n     *\r\n     * @private\r\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\r\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\r\n     */\r\n    function cloneArrayBuffer(arrayBuffer) {\r\n        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\r\n        new Uint8Array(result).set(new Uint8Array(arrayBuffer));\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of `dataView`.\r\n     *\r\n     * @private\r\n     * @param {Object} dataView The data view to clone.\r\n     * @param {boolean} [isDeep] Specify a deep clone.\r\n     * @returns {Object} Returns the cloned data view.\r\n     */\r\n    function cloneDataView(dataView, isDeep) {\r\n        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\r\n        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of `regexp`.\r\n     *\r\n     * @private\r\n     * @param {Object} regexp The regexp to clone.\r\n     * @returns {Object} Returns the cloned regexp.\r\n     */\r\n    function cloneRegExp(regexp) {\r\n        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\r\n        result.lastIndex = regexp.lastIndex;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of the `symbol` object.\r\n     *\r\n     * @private\r\n     * @param {Object} symbol The symbol object to clone.\r\n     * @returns {Object} Returns the cloned symbol object.\r\n     */\r\n    function cloneSymbol(symbol) {\r\n        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of `typedArray`.\r\n     *\r\n     * @private\r\n     * @param {Object} typedArray The typed array to clone.\r\n     * @param {boolean} [isDeep] Specify a deep clone.\r\n     * @returns {Object} Returns the cloned typed array.\r\n     */\r\n    function cloneTypedArray(typedArray, isDeep) {\r\n        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\r\n        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\r\n    }\r\n\r\n    /**\r\n     * Compares values to sort them in ascending order.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {number} Returns the sort order indicator for `value`.\r\n     */\r\n    function compareAscending(value, other) {\r\n        if (value !== other) {\r\n            var valIsDefined = value !== undefined,\r\n                valIsNull = value === null,\r\n                valIsReflexive = value === value,\r\n                valIsSymbol = isSymbol(value);\r\n\r\n            var othIsDefined = other !== undefined,\r\n                othIsNull = other === null,\r\n                othIsReflexive = other === other,\r\n                othIsSymbol = isSymbol(other);\r\n\r\n            if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\r\n                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\r\n                (valIsNull && othIsDefined && othIsReflexive) ||\r\n                (!valIsDefined && othIsReflexive) ||\r\n                !valIsReflexive) {\r\n                return 1;\r\n            }\r\n            if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\r\n                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\r\n                (othIsNull && valIsDefined && valIsReflexive) ||\r\n                (!othIsDefined && valIsReflexive) ||\r\n                !othIsReflexive) {\r\n                return -1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Used by `_.orderBy` to compare multiple properties of a value to another\r\n     * and stable sort them.\r\n     *\r\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\r\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\r\n     * of corresponding values.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to compare.\r\n     * @param {Object} other The other object to compare.\r\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\r\n     * @returns {number} Returns the sort order indicator for `object`.\r\n     */\r\n    function compareMultiple(object, other, orders) {\r\n        var index = -1,\r\n            objCriteria = object.criteria,\r\n            othCriteria = other.criteria,\r\n            length = objCriteria.length,\r\n            ordersLength = orders.length;\r\n\r\n        while (++index < length) {\r\n            var result = compareAscending(objCriteria[index], othCriteria[index]);\r\n            if (result) {\r\n                if (index >= ordersLength) {\r\n                    return result;\r\n                }\r\n                var order = orders[index];\r\n                return result * (order == 'desc' ? -1 : 1);\r\n            }\r\n        }\r\n        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\r\n        // that causes it, under certain circumstances, to provide the same value for\r\n        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\r\n        // for more details.\r\n        //\r\n        // This also ensures a stable sort in V8 and other engines.\r\n        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\r\n        return object.index - other.index;\r\n    }\r\n\r\n    /**\r\n     * Creates an array that is the composition of partially applied arguments,\r\n     * placeholders, and provided arguments into a single array of arguments.\r\n     *\r\n     * @private\r\n     * @param {Array} args The provided arguments.\r\n     * @param {Array} partials The arguments to prepend to those provided.\r\n     * @param {Array} holders The `partials` placeholder indexes.\r\n     * @params {boolean} [isCurried] Specify composing for a curried function.\r\n     * @returns {Array} Returns the new array of composed arguments.\r\n     */\r\n    function composeArgs(args, partials, holders, isCurried) {\r\n        var argsIndex = -1,\r\n            argsLength = args.length,\r\n            holdersLength = holders.length,\r\n            leftIndex = -1,\r\n            leftLength = partials.length,\r\n            rangeLength = nativeMax(argsLength - holdersLength, 0),\r\n            result = Array(leftLength + rangeLength),\r\n            isUncurried = !isCurried;\r\n\r\n        while (++leftIndex < leftLength) {\r\n            result[leftIndex] = partials[leftIndex];\r\n        }\r\n        while (++argsIndex < holdersLength) {\r\n            if (isUncurried || argsIndex < argsLength) {\r\n                result[holders[argsIndex]] = args[argsIndex];\r\n            }\r\n        }\r\n        while (rangeLength--) {\r\n            result[leftIndex++] = args[argsIndex++];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * This function is like `composeArgs` except that the arguments composition\r\n     * is tailored for `_.partialRight`.\r\n     *\r\n     * @private\r\n     * @param {Array} args The provided arguments.\r\n     * @param {Array} partials The arguments to append to those provided.\r\n     * @param {Array} holders The `partials` placeholder indexes.\r\n     * @params {boolean} [isCurried] Specify composing for a curried function.\r\n     * @returns {Array} Returns the new array of composed arguments.\r\n     */\r\n    function composeArgsRight(args, partials, holders, isCurried) {\r\n        var argsIndex = -1,\r\n            argsLength = args.length,\r\n            holdersIndex = -1,\r\n            holdersLength = holders.length,\r\n            rightIndex = -1,\r\n            rightLength = partials.length,\r\n            rangeLength = nativeMax(argsLength - holdersLength, 0),\r\n            result = Array(rangeLength + rightLength),\r\n            isUncurried = !isCurried;\r\n\r\n        while (++argsIndex < rangeLength) {\r\n            result[argsIndex] = args[argsIndex];\r\n        }\r\n        var offset = argsIndex;\r\n        while (++rightIndex < rightLength) {\r\n            result[offset + rightIndex] = partials[rightIndex];\r\n        }\r\n        while (++holdersIndex < holdersLength) {\r\n            if (isUncurried || argsIndex < argsLength) {\r\n                result[offset + holders[holdersIndex]] = args[argsIndex++];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copies the values of `source` to `array`.\r\n     *\r\n     * @private\r\n     * @param {Array} source The array to copy values from.\r\n     * @param {Array} [array=[]] The array to copy values to.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function copyArray(source, array) {\r\n        var index = -1,\r\n            length = source.length;\r\n\r\n        array || (array = Array(length));\r\n        while (++index < length) {\r\n            array[index] = source[index];\r\n        }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Copies properties of `source` to `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} source The object to copy properties from.\r\n     * @param {Array} props The property identifiers to copy.\r\n     * @param {Object} [object={}] The object to copy properties to.\r\n     * @param {Function} [customizer] The function to customize copied values.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function copyObject(source, props, object, customizer) {\r\n        var isNew = !object;\r\n        object || (object = {});\r\n\r\n        var index = -1,\r\n            length = props.length;\r\n\r\n        while (++index < length) {\r\n            var key = props[index];\r\n\r\n            var newValue = customizer\r\n                ? customizer(object[key], source[key], key, object, source)\r\n                : undefined;\r\n\r\n            if (newValue === undefined) {\r\n                newValue = source[key];\r\n            }\r\n            if (isNew) {\r\n                baseAssignValue(object, key, newValue);\r\n            } else {\r\n                assignValue(object, key, newValue);\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n\r\n    /**\r\n     * Copies own symbols of `source` to `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} source The object to copy symbols from.\r\n     * @param {Object} [object={}] The object to copy symbols to.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function copySymbols(source, object) {\r\n        return copyObject(source, getSymbols(source), object);\r\n    }\r\n\r\n    /**\r\n     * Copies own and inherited symbols of `source` to `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} source The object to copy symbols from.\r\n     * @param {Object} [object={}] The object to copy symbols to.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function copySymbolsIn(source, object) {\r\n        return copyObject(source, getSymbolsIn(source), object);\r\n    }\r\n\r\n    /**\r\n     * Creates a function like `_.groupBy`.\r\n     *\r\n     * @private\r\n     * @param {Function} setter The function to set accumulator values.\r\n     * @param {Function} [initializer] The accumulator object initializer.\r\n     * @returns {Function} Returns the new aggregator function.\r\n     */\r\n    function createAggregator(setter, initializer) {\r\n        return function(collection, iteratee) {\r\n            var func = isArray(collection) ? arrayAggregator : baseAggregator,\r\n                accumulator = initializer ? initializer() : {};\r\n\r\n            return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a function like `_.assign`.\r\n     *\r\n     * @private\r\n     * @param {Function} assigner The function to assign values.\r\n     * @returns {Function} Returns the new assigner function.\r\n     */\r\n    function createAssigner(assigner) {\r\n        return baseRest(function(object, sources) {\r\n            var index = -1,\r\n                length = sources.length,\r\n                customizer = length > 1 ? sources[length - 1] : undefined,\r\n                guard = length > 2 ? sources[2] : undefined;\r\n\r\n            customizer = (assigner.length > 3 && typeof customizer == 'function')\r\n                ? (length--, customizer)\r\n                : undefined;\r\n\r\n            if (guard && isIterateeCall(sources[0], sources[1], guard)) {\r\n                customizer = length < 3 ? undefined : customizer;\r\n                length = 1;\r\n            }\r\n            object = Object(object);\r\n            while (++index < length) {\r\n                var source = sources[index];\r\n                if (source) {\r\n                    assigner(object, source, index, customizer);\r\n                }\r\n            }\r\n            return object;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a `baseEach` or `baseEachRight` function.\r\n     *\r\n     * @private\r\n     * @param {Function} eachFunc The function to iterate over a collection.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {Function} Returns the new base function.\r\n     */\r\n    function createBaseEach(eachFunc, fromRight) {\r\n        return function(collection, iteratee) {\r\n            if (collection == null) {\r\n                return collection;\r\n            }\r\n            if (!isArrayLike(collection)) {\r\n                return eachFunc(collection, iteratee);\r\n            }\r\n            var length = collection.length,\r\n                index = fromRight ? length : -1,\r\n                iterable = Object(collection);\r\n\r\n            while ((fromRight ? index-- : ++index < length)) {\r\n                if (iteratee(iterable[index], index, iterable) === false) {\r\n                    break;\r\n                }\r\n            }\r\n            return collection;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\r\n     *\r\n     * @private\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {Function} Returns the new base function.\r\n     */\r\n    function createBaseFor(fromRight) {\r\n        return function(object, iteratee, keysFunc) {\r\n            var index = -1,\r\n                iterable = Object(object),\r\n                props = keysFunc(object),\r\n                length = props.length;\r\n\r\n            while (length--) {\r\n                var key = props[fromRight ? length : ++index];\r\n                if (iteratee(iterable[key], key, iterable) === false) {\r\n                    break;\r\n                }\r\n            }\r\n            return object;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that wraps `func` to invoke it with the optional `this`\r\n     * binding of `thisArg`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to wrap.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @param {*} [thisArg] The `this` binding of `func`.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createBind(func, bitmask, thisArg) {\r\n        var isBind = bitmask & WRAP_BIND_FLAG,\r\n            Ctor = createCtor(func);\r\n\r\n        function wrapper() {\r\n            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\r\n            return fn.apply(isBind ? thisArg : this, arguments);\r\n        }\r\n        return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Creates a function that produces an instance of `Ctor` regardless of\r\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\r\n     *\r\n     * @private\r\n     * @param {Function} Ctor The constructor to wrap.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createCtor(Ctor) {\r\n        return function() {\r\n            // Use a `switch` statement to work with class constructors. See\r\n            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\r\n            // for more details.\r\n            var args = arguments;\r\n            switch (args.length) {\r\n                case 0: return new Ctor;\r\n                case 1: return new Ctor(args[0]);\r\n                case 2: return new Ctor(args[0], args[1]);\r\n                case 3: return new Ctor(args[0], args[1], args[2]);\r\n                case 4: return new Ctor(args[0], args[1], args[2], args[3]);\r\n                case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\r\n                case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\r\n                case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\r\n            }\r\n            var thisBinding = baseCreate(Ctor.prototype),\r\n                result = Ctor.apply(thisBinding, args);\r\n\r\n            // Mimic the constructor's `return` behavior.\r\n            // See https://es5.github.io/#x13.2.2 for more details.\r\n            return isObject(result) ? result : thisBinding;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that wraps `func` to enable currying.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to wrap.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @param {number} arity The arity of `func`.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createCurry(func, bitmask, arity) {\r\n        var Ctor = createCtor(func);\r\n\r\n        function wrapper() {\r\n            var length = arguments.length,\r\n                args = Array(length),\r\n                index = length,\r\n                placeholder = getHolder(wrapper);\r\n\r\n            while (index--) {\r\n                args[index] = arguments[index];\r\n            }\r\n            var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\r\n                ? []\r\n                : replaceHolders(args, placeholder);\r\n\r\n            length -= holders.length;\r\n            if (length < arity) {\r\n                return createRecurry(\r\n                    func, bitmask, createHybrid, wrapper.placeholder, undefined,\r\n                    args, holders, undefined, undefined, arity - length);\r\n            }\r\n            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\r\n            return apply(fn, this, args);\r\n        }\r\n        return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Creates a `_.find` or `_.findLast` function.\r\n     *\r\n     * @private\r\n     * @param {Function} findIndexFunc The function to find the collection index.\r\n     * @returns {Function} Returns the new find function.\r\n     */\r\n    function createFind(findIndexFunc) {\r\n        return function(collection, predicate, fromIndex) {\r\n            var iterable = Object(collection);\r\n            if (!isArrayLike(collection)) {\r\n                var iteratee = baseIteratee(predicate, 3);\r\n                collection = keys(collection);\r\n                predicate = function(key) { return iteratee(iterable[key], key, iterable); };\r\n            }\r\n            var index = findIndexFunc(collection, predicate, fromIndex);\r\n            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that wraps `func` to invoke it with optional `this`\r\n     * binding of `thisArg`, partial application, and currying.\r\n     *\r\n     * @private\r\n     * @param {Function|string} func The function or method name to wrap.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @param {*} [thisArg] The `this` binding of `func`.\r\n     * @param {Array} [partials] The arguments to prepend to those provided to\r\n     *  the new function.\r\n     * @param {Array} [holders] The `partials` placeholder indexes.\r\n     * @param {Array} [partialsRight] The arguments to append to those provided\r\n     *  to the new function.\r\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\r\n     * @param {Array} [argPos] The argument positions of the new function.\r\n     * @param {number} [ary] The arity cap of `func`.\r\n     * @param {number} [arity] The arity of `func`.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\r\n        var isAry = bitmask & WRAP_ARY_FLAG,\r\n            isBind = bitmask & WRAP_BIND_FLAG,\r\n            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\r\n            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\r\n            isFlip = bitmask & WRAP_FLIP_FLAG,\r\n            Ctor = isBindKey ? undefined : createCtor(func);\r\n\r\n        function wrapper() {\r\n            var length = arguments.length,\r\n                args = Array(length),\r\n                index = length;\r\n\r\n            while (index--) {\r\n                args[index] = arguments[index];\r\n            }\r\n            if (isCurried) {\r\n                var placeholder = getHolder(wrapper),\r\n                    holdersCount = countHolders(args, placeholder);\r\n            }\r\n            if (partials) {\r\n                args = composeArgs(args, partials, holders, isCurried);\r\n            }\r\n            if (partialsRight) {\r\n                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\r\n            }\r\n            length -= holdersCount;\r\n            if (isCurried && length < arity) {\r\n                var newHolders = replaceHolders(args, placeholder);\r\n                return createRecurry(\r\n                    func, bitmask, createHybrid, wrapper.placeholder, thisArg,\r\n                    args, newHolders, argPos, ary, arity - length\r\n                );\r\n            }\r\n            var thisBinding = isBind ? thisArg : this,\r\n                fn = isBindKey ? thisBinding[func] : func;\r\n\r\n            length = args.length;\r\n            if (argPos) {\r\n                args = reorder(args, argPos);\r\n            } else if (isFlip && length > 1) {\r\n                args.reverse();\r\n            }\r\n            if (isAry && ary < length) {\r\n                args.length = ary;\r\n            }\r\n            if (this && this !== root && this instanceof wrapper) {\r\n                fn = Ctor || createCtor(fn);\r\n            }\r\n            return fn.apply(thisBinding, args);\r\n        }\r\n        return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Creates a function like `_.invertBy`.\r\n     *\r\n     * @private\r\n     * @param {Function} setter The function to set accumulator values.\r\n     * @param {Function} toIteratee The function to resolve iteratees.\r\n     * @returns {Function} Returns the new inverter function.\r\n     */\r\n    function createInverter(setter, toIteratee) {\r\n        return function(object, iteratee) {\r\n            return baseInverter(object, setter, toIteratee(iteratee), {});\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that wraps `func` to invoke it with the `this` binding\r\n     * of `thisArg` and `partials` prepended to the arguments it receives.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to wrap.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @param {*} thisArg The `this` binding of `func`.\r\n     * @param {Array} partials The arguments to prepend to those provided to\r\n     *  the new function.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createPartial(func, bitmask, thisArg, partials) {\r\n        var isBind = bitmask & WRAP_BIND_FLAG,\r\n            Ctor = createCtor(func);\r\n\r\n        function wrapper() {\r\n            var argsIndex = -1,\r\n                argsLength = arguments.length,\r\n                leftIndex = -1,\r\n                leftLength = partials.length,\r\n                args = Array(leftLength + argsLength),\r\n                fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\r\n\r\n            while (++leftIndex < leftLength) {\r\n                args[leftIndex] = partials[leftIndex];\r\n            }\r\n            while (argsLength--) {\r\n                args[leftIndex++] = arguments[++argsIndex];\r\n            }\r\n            return apply(fn, isBind ? thisArg : this, args);\r\n        }\r\n        return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Creates a `_.range` or `_.rangeRight` function.\r\n     *\r\n     * @private\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {Function} Returns the new range function.\r\n     */\r\n    function createRange(fromRight) {\r\n        return function(start, end, step) {\r\n            if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\r\n                end = step = undefined;\r\n            }\r\n            // Ensure the sign of `-0` is preserved.\r\n            start = toFinite(start);\r\n            if (end === undefined) {\r\n                end = start;\r\n                start = 0;\r\n            } else {\r\n                end = toFinite(end);\r\n            }\r\n            step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\r\n            return baseRange(start, end, step, fromRight);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that wraps `func` to continue currying.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to wrap.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\r\n     * @param {*} placeholder The placeholder value.\r\n     * @param {*} [thisArg] The `this` binding of `func`.\r\n     * @param {Array} [partials] The arguments to prepend to those provided to\r\n     *  the new function.\r\n     * @param {Array} [holders] The `partials` placeholder indexes.\r\n     * @param {Array} [argPos] The argument positions of the new function.\r\n     * @param {number} [ary] The arity cap of `func`.\r\n     * @param {number} [arity] The arity of `func`.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\r\n        var isCurry = bitmask & WRAP_CURRY_FLAG,\r\n            newHolders = isCurry ? holders : undefined,\r\n            newHoldersRight = isCurry ? undefined : holders,\r\n            newPartials = isCurry ? partials : undefined,\r\n            newPartialsRight = isCurry ? undefined : partials;\r\n\r\n        bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\r\n        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\r\n\r\n        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\r\n            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\r\n        }\r\n        var newData = [\r\n            func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\r\n            newHoldersRight, argPos, ary, arity\r\n        ];\r\n\r\n        var result = wrapFunc.apply(undefined, newData);\r\n        if (isLaziable(func)) {\r\n            setData(result, newData);\r\n        }\r\n        result.placeholder = placeholder;\r\n        return setWrapToString(result, func, bitmask);\r\n    }\r\n\r\n    /**\r\n     * Creates a set object of `values`.\r\n     *\r\n     * @private\r\n     * @param {Array} values The values to add to the set.\r\n     * @returns {Object} Returns the new set.\r\n     */\r\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\r\n        return new Set(values);\r\n    };\r\n\r\n    /**\r\n     * Creates a function that either curries or invokes `func` with optional\r\n     * `this` binding and partially applied arguments.\r\n     *\r\n     * @private\r\n     * @param {Function|string} func The function or method name to wrap.\r\n     * @param {number} bitmask The bitmask flags.\r\n     *    1 - `_.bind`\r\n     *    2 - `_.bindKey`\r\n     *    4 - `_.curry` or `_.curryRight` of a bound function\r\n     *    8 - `_.curry`\r\n     *   16 - `_.curryRight`\r\n     *   32 - `_.partial`\r\n     *   64 - `_.partialRight`\r\n     *  128 - `_.rearg`\r\n     *  256 - `_.ary`\r\n     *  512 - `_.flip`\r\n     * @param {*} [thisArg] The `this` binding of `func`.\r\n     * @param {Array} [partials] The arguments to be partially applied.\r\n     * @param {Array} [holders] The `partials` placeholder indexes.\r\n     * @param {Array} [argPos] The argument positions of the new function.\r\n     * @param {number} [ary] The arity cap of `func`.\r\n     * @param {number} [arity] The arity of `func`.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\r\n        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\r\n        if (!isBindKey && typeof func != 'function') {\r\n            throw new TypeError(FUNC_ERROR_TEXT);\r\n        }\r\n        var length = partials ? partials.length : 0;\r\n        if (!length) {\r\n            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\r\n            partials = holders = undefined;\r\n        }\r\n        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\r\n        arity = arity === undefined ? arity : toInteger(arity);\r\n        length -= holders ? holders.length : 0;\r\n\r\n        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\r\n            var partialsRight = partials,\r\n                holdersRight = holders;\r\n\r\n            partials = holders = undefined;\r\n        }\r\n        var data = isBindKey ? undefined : getData(func);\r\n\r\n        var newData = [\r\n            func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\r\n            argPos, ary, arity\r\n        ];\r\n\r\n        if (data) {\r\n            mergeData(newData, data);\r\n        }\r\n        func = newData[0];\r\n        bitmask = newData[1];\r\n        thisArg = newData[2];\r\n        partials = newData[3];\r\n        holders = newData[4];\r\n        arity = newData[9] = newData[9] === undefined\r\n            ? (isBindKey ? 0 : func.length)\r\n            : nativeMax(newData[9] - length, 0);\r\n\r\n        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\r\n            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\r\n        }\r\n        if (!bitmask || bitmask == WRAP_BIND_FLAG) {\r\n            var result = createBind(func, bitmask, thisArg);\r\n        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\r\n            result = createCurry(func, bitmask, arity);\r\n        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\r\n            result = createPartial(func, bitmask, thisArg, partials);\r\n        } else {\r\n            result = createHybrid.apply(undefined, newData);\r\n        }\r\n        var setter = data ? baseSetData : setData;\r\n        return setWrapToString(setter(result, newData), func, bitmask);\r\n    }\r\n\r\n    /**\r\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\r\n     * objects into destination objects that are passed thru.\r\n     *\r\n     * @private\r\n     * @param {*} objValue The destination value.\r\n     * @param {*} srcValue The source value.\r\n     * @param {string} key The key of the property to merge.\r\n     * @param {Object} object The parent object of `objValue`.\r\n     * @param {Object} source The parent object of `srcValue`.\r\n     * @param {Object} [stack] Tracks traversed source values and their merged\r\n     *  counterparts.\r\n     * @returns {*} Returns the value to assign.\r\n     */\r\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\r\n        if (isObject(objValue) && isObject(srcValue)) {\r\n            // Recursively merge objects and arrays (susceptible to call stack limits).\r\n            stack.set(srcValue, objValue);\r\n            baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\r\n            stack['delete'](srcValue);\r\n        }\r\n        return objValue;\r\n    }\r\n\r\n    /**\r\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\r\n     * objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to inspect.\r\n     * @param {string} key The key of the property to inspect.\r\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\r\n     */\r\n    function customOmitClone(value) {\r\n        return isPlainObject(value) ? undefined : value;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\r\n     * partial deep comparisons.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to compare.\r\n     * @param {Array} other The other array to compare.\r\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n     * @param {Function} customizer The function to customize comparisons.\r\n     * @param {Function} equalFunc The function to determine equivalents of values.\r\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\r\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\r\n     */\r\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\r\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n            arrLength = array.length,\r\n            othLength = other.length;\r\n\r\n        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\r\n            return false;\r\n        }\r\n        // Assume cyclic values are equal.\r\n        var stacked = stack.get(array);\r\n        if (stacked && stack.get(other)) {\r\n            return stacked == other;\r\n        }\r\n        var index = -1,\r\n            result = true,\r\n            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\r\n\r\n        stack.set(array, other);\r\n        stack.set(other, array);\r\n\r\n        // Ignore non-index properties.\r\n        while (++index < arrLength) {\r\n            var arrValue = array[index],\r\n                othValue = other[index];\r\n\r\n            if (customizer) {\r\n                var compared = isPartial\r\n                    ? customizer(othValue, arrValue, index, other, array, stack)\r\n                    : customizer(arrValue, othValue, index, array, other, stack);\r\n            }\r\n            if (compared !== undefined) {\r\n                if (compared) {\r\n                    continue;\r\n                }\r\n                result = false;\r\n                break;\r\n            }\r\n            // Recursively compare arrays (susceptible to call stack limits).\r\n            if (seen) {\r\n                if (!arraySome(other, function(othValue, othIndex) {\r\n                    if (!cacheHas(seen, othIndex) &&\r\n                        (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\r\n                        return seen.push(othIndex);\r\n                    }\r\n                })) {\r\n                    result = false;\r\n                    break;\r\n                }\r\n            } else if (!(\r\n                arrValue === othValue ||\r\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\r\n            )) {\r\n                result = false;\r\n                break;\r\n            }\r\n        }\r\n        stack['delete'](array);\r\n        stack['delete'](other);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\r\n     * the same `toStringTag`.\r\n     *\r\n     * **Note:** This function only supports comparing values with tags of\r\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to compare.\r\n     * @param {Object} other The other object to compare.\r\n     * @param {string} tag The `toStringTag` of the objects to compare.\r\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n     * @param {Function} customizer The function to customize comparisons.\r\n     * @param {Function} equalFunc The function to determine equivalents of values.\r\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n     */\r\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\r\n        switch (tag) {\r\n            case dataViewTag:\r\n                if ((object.byteLength != other.byteLength) ||\r\n                    (object.byteOffset != other.byteOffset)) {\r\n                    return false;\r\n                }\r\n                object = object.buffer;\r\n                other = other.buffer;\r\n\r\n            case arrayBufferTag:\r\n                if ((object.byteLength != other.byteLength) ||\r\n                    !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\r\n                    return false;\r\n                }\r\n                return true;\r\n\r\n            case boolTag:\r\n            case dateTag:\r\n            case numberTag:\r\n                // Coerce booleans to `1` or `0` and dates to milliseconds.\r\n                // Invalid dates are coerced to `NaN`.\r\n                return eq(+object, +other);\r\n\r\n            case errorTag:\r\n                return object.name == other.name && object.message == other.message;\r\n\r\n            case regexpTag:\r\n            case stringTag:\r\n                // Coerce regexes to strings and treat strings, primitives and objects,\r\n                // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\r\n                // for more details.\r\n                return object == (other + '');\r\n\r\n            case mapTag:\r\n                var convert = mapToArray;\r\n\r\n            case setTag:\r\n                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\r\n                convert || (convert = setToArray);\r\n\r\n                if (object.size != other.size && !isPartial) {\r\n                    return false;\r\n                }\r\n                // Assume cyclic values are equal.\r\n                var stacked = stack.get(object);\r\n                if (stacked) {\r\n                    return stacked == other;\r\n                }\r\n                bitmask |= COMPARE_UNORDERED_FLAG;\r\n\r\n                // Recursively compare objects (susceptible to call stack limits).\r\n                stack.set(object, other);\r\n                var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\r\n                stack['delete'](object);\r\n                return result;\r\n\r\n            case symbolTag:\r\n                if (symbolValueOf) {\r\n                    return symbolValueOf.call(object) == symbolValueOf.call(other);\r\n                }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseIsEqualDeep` for objects with support for\r\n     * partial deep comparisons.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to compare.\r\n     * @param {Object} other The other object to compare.\r\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n     * @param {Function} customizer The function to customize comparisons.\r\n     * @param {Function} equalFunc The function to determine equivalents of values.\r\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n     */\r\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\r\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n            objProps = getAllKeys(object),\r\n            objLength = objProps.length,\r\n            othProps = getAllKeys(other),\r\n            othLength = othProps.length;\r\n\r\n        if (objLength != othLength && !isPartial) {\r\n            return false;\r\n        }\r\n        var index = objLength;\r\n        while (index--) {\r\n            var key = objProps[index];\r\n            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\r\n                return false;\r\n            }\r\n        }\r\n        // Assume cyclic values are equal.\r\n        var stacked = stack.get(object);\r\n        if (stacked && stack.get(other)) {\r\n            return stacked == other;\r\n        }\r\n        var result = true;\r\n        stack.set(object, other);\r\n        stack.set(other, object);\r\n\r\n        var skipCtor = isPartial;\r\n        while (++index < objLength) {\r\n            key = objProps[index];\r\n            var objValue = object[key],\r\n                othValue = other[key];\r\n\r\n            if (customizer) {\r\n                var compared = isPartial\r\n                    ? customizer(othValue, objValue, key, other, object, stack)\r\n                    : customizer(objValue, othValue, key, object, other, stack);\r\n            }\r\n            // Recursively compare objects (susceptible to call stack limits).\r\n            if (!(compared === undefined\r\n                    ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\r\n                    : compared\r\n            )) {\r\n                result = false;\r\n                break;\r\n            }\r\n            skipCtor || (skipCtor = key == 'constructor');\r\n        }\r\n        if (result && !skipCtor) {\r\n            var objCtor = object.constructor,\r\n                othCtor = other.constructor;\r\n\r\n            // Non `Object` object instances with different constructors are not equal.\r\n            if (objCtor != othCtor &&\r\n                ('constructor' in object && 'constructor' in other) &&\r\n                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\r\n                    typeof othCtor == 'function' && othCtor instanceof othCtor)) {\r\n                result = false;\r\n            }\r\n        }\r\n        stack['delete'](object);\r\n        stack['delete'](other);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseRest` which flattens the rest array.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to apply a rest parameter to.\r\n     * @returns {Function} Returns the new function.\r\n     */\r\n    function flatRest(func) {\r\n        return setToString(overRest(func, undefined, flatten), func + '');\r\n    }\r\n\r\n    /**\r\n     * Creates an array of own enumerable property names and symbols of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names and symbols.\r\n     */\r\n    function getAllKeys(object) {\r\n        return baseGetAllKeys(object, keys, getSymbols);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of own and inherited enumerable property names and\r\n     * symbols of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names and symbols.\r\n     */\r\n    function getAllKeysIn(object) {\r\n        return baseGetAllKeys(object, keysIn, getSymbolsIn);\r\n    }\r\n\r\n    /**\r\n     * Gets metadata for `func`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to query.\r\n     * @returns {*} Returns the metadata for `func`.\r\n     */\r\n    var getData = !metaMap ? noop : function(func) {\r\n        return metaMap.get(func);\r\n    };\r\n\r\n    /**\r\n     * Gets the name of `func`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to query.\r\n     * @returns {string} Returns the function name.\r\n     */\r\n    function getFuncName(func) {\r\n        var result = (func.name + ''),\r\n            array = realNames[result],\r\n            length = hasOwnProperty.call(realNames, result) ? array.length : 0;\r\n\r\n        while (length--) {\r\n            var data = array[length],\r\n                otherFunc = data.func;\r\n            if (otherFunc == null || otherFunc == func) {\r\n                return data.name;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the argument placeholder value for `func`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to inspect.\r\n     * @returns {*} Returns the placeholder value.\r\n     */\r\n    function getHolder(func) {\r\n        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\r\n        return object.placeholder;\r\n    }\r\n\r\n    /**\r\n     * Gets the data for `map`.\r\n     *\r\n     * @private\r\n     * @param {Object} map The map to query.\r\n     * @param {string} key The reference key.\r\n     * @returns {*} Returns the map data.\r\n     */\r\n    function getMapData(map, key) {\r\n        var data = map.__data__;\r\n        return isKeyable(key)\r\n            ? data[typeof key == 'string' ? 'string' : 'hash']\r\n            : data.map;\r\n    }\r\n\r\n    /**\r\n     * Gets the property names, values, and compare flags of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the match data of `object`.\r\n     */\r\n    function getMatchData(object) {\r\n        var result = keys(object),\r\n            length = result.length;\r\n\r\n        while (length--) {\r\n            var key = result[length],\r\n                value = object[key];\r\n\r\n            result[length] = [key, value, isStrictComparable(value)];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the native function at `key` of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {string} key The key of the method to get.\r\n     * @returns {*} Returns the function if it's native, else `undefined`.\r\n     */\r\n    function getNative(object, key) {\r\n        var value = getValue(object, key);\r\n        return baseIsNative(value) ? value : undefined;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to query.\r\n     * @returns {string} Returns the raw `toStringTag`.\r\n     */\r\n    function getRawTag(value) {\r\n        var isOwn = hasOwnProperty.call(value, symToStringTag),\r\n            tag = value[symToStringTag];\r\n\r\n        try {\r\n            value[symToStringTag] = undefined;\r\n            var unmasked = true;\r\n        } catch (e) {}\r\n\r\n        var result = nativeObjectToString.call(value);\r\n        if (unmasked) {\r\n            if (isOwn) {\r\n                value[symToStringTag] = tag;\r\n            } else {\r\n                delete value[symToStringTag];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an array of the own enumerable symbols of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of symbols.\r\n     */\r\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\r\n        if (object == null) {\r\n            return [];\r\n        }\r\n        object = Object(object);\r\n        return arrayFilter(nativeGetSymbols(object), function(symbol) {\r\n            return propertyIsEnumerable.call(object, symbol);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates an array of the own and inherited enumerable symbols of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of symbols.\r\n     */\r\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\r\n        var result = [];\r\n        while (object) {\r\n            arrayPush(result, getSymbols(object));\r\n            object = getPrototype(object);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Gets the `toStringTag` of `value`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to query.\r\n     * @returns {string} Returns the `toStringTag`.\r\n     */\r\n    var getTag = baseGetTag;\r\n\r\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\r\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\r\n        (Map && getTag(new Map) != mapTag) ||\r\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\r\n        (Set && getTag(new Set) != setTag) ||\r\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\r\n        getTag = function(value) {\r\n            var result = baseGetTag(value),\r\n                Ctor = result == objectTag ? value.constructor : undefined,\r\n                ctorString = Ctor ? toSource(Ctor) : '';\r\n\r\n            if (ctorString) {\r\n                switch (ctorString) {\r\n                    case dataViewCtorString: return dataViewTag;\r\n                    case mapCtorString: return mapTag;\r\n                    case promiseCtorString: return promiseTag;\r\n                    case setCtorString: return setTag;\r\n                    case weakMapCtorString: return weakMapTag;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\r\n     *\r\n     * @private\r\n     * @param {number} start The start of the view.\r\n     * @param {number} end The end of the view.\r\n     * @param {Array} transforms The transformations to apply to the view.\r\n     * @returns {Object} Returns an object containing the `start` and `end`\r\n     *  positions of the view.\r\n     */\r\n    function getView(start, end, transforms) {\r\n        var index = -1,\r\n            length = transforms.length;\r\n\r\n        while (++index < length) {\r\n            var data = transforms[index],\r\n                size = data.size;\r\n\r\n            switch (data.type) {\r\n                case 'drop':      start += size; break;\r\n                case 'dropRight': end -= size; break;\r\n                case 'take':      end = nativeMin(end, start + size); break;\r\n                case 'takeRight': start = nativeMax(start, end - size); break;\r\n            }\r\n        }\r\n        return { 'start': start, 'end': end };\r\n    }\r\n\r\n    /**\r\n     * Extracts wrapper details from the `source` body comment.\r\n     *\r\n     * @private\r\n     * @param {string} source The source to inspect.\r\n     * @returns {Array} Returns the wrapper details.\r\n     */\r\n    function getWrapDetails(source) {\r\n        var match = source.match(reWrapDetails);\r\n        return match ? match[1].split(reSplitDetails) : [];\r\n    }\r\n\r\n    /**\r\n     * Checks if `path` exists on `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path to check.\r\n     * @param {Function} hasFunc The function to check properties.\r\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\r\n     */\r\n    function hasPath(object, path, hasFunc) {\r\n        path = castPath(path, object);\r\n\r\n        var index = -1,\r\n            length = path.length,\r\n            result = false;\r\n\r\n        while (++index < length) {\r\n            var key = toKey(path[index]);\r\n            if (!(result = object != null && hasFunc(object, key))) {\r\n                break;\r\n            }\r\n            object = object[key];\r\n        }\r\n        if (result || ++index != length) {\r\n            return result;\r\n        }\r\n        length = object == null ? 0 : object.length;\r\n        return !!length && isLength(length) && isIndex(key, length) &&\r\n            (isArray(object) || isArguments(object));\r\n    }\r\n\r\n    /**\r\n     * Initializes an array clone.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to clone.\r\n     * @returns {Array} Returns the initialized clone.\r\n     */\r\n    function initCloneArray(array) {\r\n        var length = array.length,\r\n            result = new array.constructor(length);\r\n\r\n        // Add properties assigned by `RegExp#exec`.\r\n        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\r\n            result.index = array.index;\r\n            result.input = array.input;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Initializes an object clone.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to clone.\r\n     * @returns {Object} Returns the initialized clone.\r\n     */\r\n    function initCloneObject(object) {\r\n        return (typeof object.constructor == 'function' && !isPrototype(object))\r\n            ? baseCreate(getPrototype(object))\r\n            : {};\r\n    }\r\n\r\n    /**\r\n     * Initializes an object clone based on its `toStringTag`.\r\n     *\r\n     * **Note:** This function only supports cloning values with tags of\r\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to clone.\r\n     * @param {string} tag The `toStringTag` of the object to clone.\r\n     * @param {boolean} [isDeep] Specify a deep clone.\r\n     * @returns {Object} Returns the initialized clone.\r\n     */\r\n    function initCloneByTag(object, tag, isDeep) {\r\n        var Ctor = object.constructor;\r\n        switch (tag) {\r\n            case arrayBufferTag:\r\n                return cloneArrayBuffer(object);\r\n\r\n            case boolTag:\r\n            case dateTag:\r\n                return new Ctor(+object);\r\n\r\n            case dataViewTag:\r\n                return cloneDataView(object, isDeep);\r\n\r\n            case float32Tag: case float64Tag:\r\n            case int8Tag: case int16Tag: case int32Tag:\r\n            case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\r\n                return cloneTypedArray(object, isDeep);\r\n\r\n            case mapTag:\r\n                return new Ctor;\r\n\r\n            case numberTag:\r\n            case stringTag:\r\n                return new Ctor(object);\r\n\r\n            case regexpTag:\r\n                return cloneRegExp(object);\r\n\r\n            case setTag:\r\n                return new Ctor;\r\n\r\n            case symbolTag:\r\n                return cloneSymbol(object);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\r\n     *\r\n     * @private\r\n     * @param {string} source The source to modify.\r\n     * @returns {Array} details The details to insert.\r\n     * @returns {string} Returns the modified source.\r\n     */\r\n    function insertWrapDetails(source, details) {\r\n        var length = details.length;\r\n        if (!length) {\r\n            return source;\r\n        }\r\n        var lastIndex = length - 1;\r\n        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\r\n        details = details.join(length > 2 ? ', ' : ' ');\r\n        return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a flattenable `arguments` object or array.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\r\n     */\r\n    function isFlattenable(value) {\r\n        return isArray(value) || isArguments(value) ||\r\n            !!(spreadableSymbol && value && value[spreadableSymbol]);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a valid array-like index.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n     */\r\n    function isIndex(value, length) {\r\n        var type = typeof value;\r\n        length = length == null ? MAX_SAFE_INTEGER : length;\r\n\r\n        return !!length &&\r\n            (type == 'number' ||\r\n                (type != 'symbol' && reIsUint.test(value))) &&\r\n            (value > -1 && value % 1 == 0 && value < length);\r\n    }\r\n\r\n    /**\r\n     * Checks if the given arguments are from an iteratee call.\r\n     *\r\n     * @private\r\n     * @param {*} value The potential iteratee value argument.\r\n     * @param {*} index The potential iteratee index or key argument.\r\n     * @param {*} object The potential iteratee object argument.\r\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\r\n     *  else `false`.\r\n     */\r\n    function isIterateeCall(value, index, object) {\r\n        if (!isObject(object)) {\r\n            return false;\r\n        }\r\n        var type = typeof index;\r\n        if (type == 'number'\r\n            ? (isArrayLike(object) && isIndex(index, object.length))\r\n            : (type == 'string' && index in object)\r\n        ) {\r\n            return eq(object[index], value);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a property name and not a property path.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @param {Object} [object] The object to query keys on.\r\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\r\n     */\r\n    function isKey(value, object) {\r\n        if (isArray(value)) {\r\n            return false;\r\n        }\r\n        var type = typeof value;\r\n        if (type == 'number' || type == 'symbol' || type == 'boolean' ||\r\n            value == null || isSymbol(value)) {\r\n            return true;\r\n        }\r\n        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\r\n            (object != null && value in Object(object));\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is suitable for use as unique object key.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\r\n     */\r\n    function isKeyable(value) {\r\n        var type = typeof value;\r\n        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\r\n            ? (value !== '__proto__')\r\n            : (value === null);\r\n    }\r\n\r\n    /**\r\n     * Checks if `func` has a lazy counterpart.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to check.\r\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\r\n     *  else `false`.\r\n     */\r\n    function isLaziable(func) {\r\n        var funcName = getFuncName(func),\r\n            other = lodash[funcName];\r\n\r\n        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\r\n            return false;\r\n        }\r\n        if (func === other) {\r\n            return true;\r\n        }\r\n        var data = getData(other);\r\n        return !!data && func === data[0];\r\n    }\r\n\r\n    /**\r\n     * Checks if `func` has its source masked.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to check.\r\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\r\n     */\r\n    function isMasked(func) {\r\n        return !!maskSrcKey && (maskSrcKey in func);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is likely a prototype object.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n     */\r\n    function isPrototype(value) {\r\n        var Ctor = value && value.constructor,\r\n            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\r\n\r\n        return value === proto;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\r\n     *  equality comparisons, else `false`.\r\n     */\r\n    function isStrictComparable(value) {\r\n        return value === value && !isObject(value);\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `matchesProperty` for source values suitable\r\n     * for strict equality comparisons, i.e. `===`.\r\n     *\r\n     * @private\r\n     * @param {string} key The key of the property to get.\r\n     * @param {*} srcValue The value to match.\r\n     * @returns {Function} Returns the new spec function.\r\n     */\r\n    function matchesStrictComparable(key, srcValue) {\r\n        return function(object) {\r\n            if (object == null) {\r\n                return false;\r\n            }\r\n            return object[key] === srcValue &&\r\n                (srcValue !== undefined || (key in Object(object)));\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.memoize` which clears the memoized function's\r\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to have its output memoized.\r\n     * @returns {Function} Returns the new memoized function.\r\n     */\r\n    function memoizeCapped(func) {\r\n        var result = memoize(func, function(key) {\r\n            if (cache.size === MAX_MEMOIZE_SIZE) {\r\n                cache.clear();\r\n            }\r\n            return key;\r\n        });\r\n\r\n        var cache = result.cache;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Merges the function metadata of `source` into `data`.\r\n     *\r\n     * Merging metadata reduces the number of wrappers used to invoke a function.\r\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\r\n     * may be applied regardless of execution order. Methods like `_.ary` and\r\n     * `_.rearg` modify function arguments, making the order in which they are\r\n     * executed important, preventing the merging of metadata. However, we make\r\n     * an exception for a safe combined case where curried functions have `_.ary`\r\n     * and or `_.rearg` applied.\r\n     *\r\n     * @private\r\n     * @param {Array} data The destination metadata.\r\n     * @param {Array} source The source metadata.\r\n     * @returns {Array} Returns `data`.\r\n     */\r\n    function mergeData(data, source) {\r\n        var bitmask = data[1],\r\n            srcBitmask = source[1],\r\n            newBitmask = bitmask | srcBitmask,\r\n            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\r\n\r\n        var isCombo =\r\n            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\r\n            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\r\n            ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\r\n\r\n        // Exit early if metadata can't be merged.\r\n        if (!(isCommon || isCombo)) {\r\n            return data;\r\n        }\r\n        // Use source `thisArg` if available.\r\n        if (srcBitmask & WRAP_BIND_FLAG) {\r\n            data[2] = source[2];\r\n            // Set when currying a bound function.\r\n            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\r\n        }\r\n        // Compose partial arguments.\r\n        var value = source[3];\r\n        if (value) {\r\n            var partials = data[3];\r\n            data[3] = partials ? composeArgs(partials, value, source[4]) : value;\r\n            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\r\n        }\r\n        // Compose partial right arguments.\r\n        value = source[5];\r\n        if (value) {\r\n            partials = data[5];\r\n            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\r\n            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\r\n        }\r\n        // Use source `argPos` if available.\r\n        value = source[7];\r\n        if (value) {\r\n            data[7] = value;\r\n        }\r\n        // Use source `ary` if it's smaller.\r\n        if (srcBitmask & WRAP_ARY_FLAG) {\r\n            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\r\n        }\r\n        // Use source `arity` if one is not provided.\r\n        if (data[9] == null) {\r\n            data[9] = source[9];\r\n        }\r\n        // Use source `func` and merge bitmasks.\r\n        data[0] = source[0];\r\n        data[1] = newBitmask;\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * This function is like\r\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n     * except that it includes inherited enumerable properties.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     */\r\n    function nativeKeysIn(object) {\r\n        var result = [];\r\n        if (object != null) {\r\n            for (var key in Object(object)) {\r\n                result.push(key);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a string using `Object.prototype.toString`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to convert.\r\n     * @returns {string} Returns the converted string.\r\n     */\r\n    function objectToString(value) {\r\n        return nativeObjectToString.call(value);\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseRest` which transforms the rest array.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to apply a rest parameter to.\r\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\r\n     * @param {Function} transform The rest array transform.\r\n     * @returns {Function} Returns the new function.\r\n     */\r\n    function overRest(func, start, transform) {\r\n        start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\r\n        return function() {\r\n            var args = arguments,\r\n                index = -1,\r\n                length = nativeMax(args.length - start, 0),\r\n                array = Array(length);\r\n\r\n            while (++index < length) {\r\n                array[index] = args[start + index];\r\n            }\r\n            index = -1;\r\n            var otherArgs = Array(start + 1);\r\n            while (++index < start) {\r\n                otherArgs[index] = args[index];\r\n            }\r\n            otherArgs[start] = transform(array);\r\n            return apply(func, this, otherArgs);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the parent value at `path` of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Array} path The path to get the parent value of.\r\n     * @returns {*} Returns the parent value.\r\n     */\r\n    function parent(object, path) {\r\n        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n    }\r\n\r\n    /**\r\n     * Reorder `array` according to the specified indexes where the element at\r\n     * the first index is assigned as the first element, the element at\r\n     * the second index is assigned as the second element, and so on.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to reorder.\r\n     * @param {Array} indexes The arranged array indexes.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function reorder(array, indexes) {\r\n        var arrLength = array.length,\r\n            length = nativeMin(indexes.length, arrLength),\r\n            oldArray = copyArray(array);\r\n\r\n        while (length--) {\r\n            var index = indexes[length];\r\n            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Sets metadata for `func`.\r\n     *\r\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\r\n     * period of time, it will trip its breaker and transition to an identity\r\n     * function to avoid garbage collection pauses in V8. See\r\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\r\n     * for more details.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to associate metadata with.\r\n     * @param {*} data The metadata.\r\n     * @returns {Function} Returns `func`.\r\n     */\r\n    var setData = shortOut(baseSetData);\r\n\r\n    /**\r\n     * Sets the `toString` method of `func` to return `string`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to modify.\r\n     * @param {Function} string The `toString` result.\r\n     * @returns {Function} Returns `func`.\r\n     */\r\n    var setToString = shortOut(baseSetToString);\r\n\r\n    /**\r\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\r\n     * with wrapper details in a comment at the top of the source body.\r\n     *\r\n     * @private\r\n     * @param {Function} wrapper The function to modify.\r\n     * @param {Function} reference The reference function.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @returns {Function} Returns `wrapper`.\r\n     */\r\n    function setWrapToString(wrapper, reference, bitmask) {\r\n        var source = (reference + '');\r\n        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\r\n    }\r\n\r\n    /**\r\n     * Creates a function that'll short out and invoke `identity` instead\r\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\r\n     * milliseconds.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new shortable function.\r\n     */\r\n    function shortOut(func) {\r\n        var count = 0,\r\n            lastCalled = 0;\r\n\r\n        return function() {\r\n            var stamp = nativeNow(),\r\n                remaining = HOT_SPAN - (stamp - lastCalled);\r\n\r\n            lastCalled = stamp;\r\n            if (remaining > 0) {\r\n                if (++count >= HOT_COUNT) {\r\n                    return arguments[0];\r\n                }\r\n            } else {\r\n                count = 0;\r\n            }\r\n            return func.apply(undefined, arguments);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Converts `string` to a property path array.\r\n     *\r\n     * @private\r\n     * @param {string} string The string to convert.\r\n     * @returns {Array} Returns the property path array.\r\n     */\r\n    var stringToPath = memoizeCapped(function(string) {\r\n        var result = [];\r\n        if (string.charCodeAt(0) === 46 /* . */) {\r\n            result.push('');\r\n        }\r\n        string.replace(rePropName, function(match, number, quote, subString) {\r\n            result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\r\n        });\r\n        return result;\r\n    });\r\n\r\n    /**\r\n     * Converts `value` to a string key if it's not a string or symbol.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to inspect.\r\n     * @returns {string|symbol} Returns the key.\r\n     */\r\n    function toKey(value) {\r\n        if (typeof value == 'string' || isSymbol(value)) {\r\n            return value;\r\n        }\r\n        var result = (value + '');\r\n        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\r\n    }\r\n\r\n    /**\r\n     * Converts `func` to its source code.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to convert.\r\n     * @returns {string} Returns the source code.\r\n     */\r\n    function toSource(func) {\r\n        if (func != null) {\r\n            try {\r\n                return funcToString.call(func);\r\n            } catch (e) {}\r\n            try {\r\n                return (func + '');\r\n            } catch (e) {}\r\n        }\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Updates wrapper `details` based on `bitmask` flags.\r\n     *\r\n     * @private\r\n     * @returns {Array} details The details to modify.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @returns {Array} Returns `details`.\r\n     */\r\n    function updateWrapDetails(details, bitmask) {\r\n        arrayEach(wrapFlags, function(pair) {\r\n            var value = '_.' + pair[0];\r\n            if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\r\n                details.push(value);\r\n            }\r\n        });\r\n        return details.sort();\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of `wrapper`.\r\n     *\r\n     * @private\r\n     * @param {Object} wrapper The wrapper to clone.\r\n     * @returns {Object} Returns the cloned wrapper.\r\n     */\r\n    function wrapperClone(wrapper) {\r\n        if (wrapper instanceof LazyWrapper) {\r\n            return wrapper.clone();\r\n        }\r\n        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\r\n        result.__actions__ = copyArray(wrapper.__actions__);\r\n        result.__index__  = wrapper.__index__;\r\n        result.__values__ = wrapper.__values__;\r\n        return result;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates an array of elements split into groups the length of `size`.\r\n     * If `array` can't be split evenly, the final chunk will be the remaining\r\n     * elements.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to process.\r\n     * @param {number} [size=1] The length of each chunk\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the new array of chunks.\r\n     * @example\r\n     *\r\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\r\n     * // => [['a', 'b'], ['c', 'd']]\r\n     *\r\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\r\n     * // => [['a', 'b', 'c'], ['d']]\r\n     */\r\n    function chunk(array, size, guard) {\r\n        if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\r\n            size = 1;\r\n        } else {\r\n            size = nativeMax(toInteger(size), 0);\r\n        }\r\n        var length = array == null ? 0 : array.length;\r\n        if (!length || size < 1) {\r\n            return [];\r\n        }\r\n        var index = 0,\r\n            resIndex = 0,\r\n            result = Array(nativeCeil(length / size));\r\n\r\n        while (index < length) {\r\n            result[resIndex++] = baseSlice(array, index, (index += size));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an array with all falsey values removed. The values `false`, `null`,\r\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to compact.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @example\r\n     *\r\n     * _.compact([0, 1, false, 2, '', 3]);\r\n     * // => [1, 2, 3]\r\n     */\r\n    function compact(array) {\r\n        var index = -1,\r\n            length = array == null ? 0 : array.length,\r\n            resIndex = 0,\r\n            result = [];\r\n\r\n        while (++index < length) {\r\n            var value = array[index];\r\n            if (value) {\r\n                result[resIndex++] = value;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new array concatenating `array` with any additional arrays\r\n     * and/or values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to concatenate.\r\n     * @param {...*} [values] The values to concatenate.\r\n     * @returns {Array} Returns the new concatenated array.\r\n     * @example\r\n     *\r\n     * var array = [1];\r\n     * var other = _.concat(array, 2, [3], [[4]]);\r\n     *\r\n     * console.log(other);\r\n     * // => [1, 2, 3, [4]]\r\n     *\r\n     * console.log(array);\r\n     * // => [1]\r\n     */\r\n    function concat() {\r\n        var length = arguments.length;\r\n        if (!length) {\r\n            return [];\r\n        }\r\n        var args = Array(length - 1),\r\n            array = arguments[0],\r\n            index = length;\r\n\r\n        while (index--) {\r\n            args[index - 1] = arguments[index];\r\n        }\r\n        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of `array` values not included in the other given arrays\r\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons. The order and references of result values are\r\n     * determined by the first array.\r\n     *\r\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {...Array} [values] The values to exclude.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @see _.without, _.xor\r\n     * @example\r\n     *\r\n     * _.difference([2, 1], [2, 3]);\r\n     * // => [1]\r\n     */\r\n    var difference = baseRest(function(array, values) {\r\n        return isArrayLikeObject(array)\r\n            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\r\n            : [];\r\n    });\r\n\r\n    /**\r\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.5.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to drop.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.drop([1, 2, 3]);\r\n     * // => [2, 3]\r\n     *\r\n     * _.drop([1, 2, 3], 2);\r\n     * // => [3]\r\n     *\r\n     * _.drop([1, 2, 3], 5);\r\n     * // => []\r\n     *\r\n     * _.drop([1, 2, 3], 0);\r\n     * // => [1, 2, 3]\r\n     */\r\n    function drop(array, n, guard) {\r\n        var length = array == null ? 0 : array.length;\r\n        if (!length) {\r\n            return [];\r\n        }\r\n        n = (guard || n === undefined) ? 1 : toInteger(n);\r\n        return baseSlice(array, n < 0 ? 0 : n, length);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.find` except that it returns the index of the first\r\n     * element `predicate` returns truthy for instead of the element itself.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @returns {number} Returns the index of the found element, else `-1`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': false },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': true }\r\n     * ];\r\n     *\r\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\r\n     * // => 0\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\r\n     * // => 1\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.findIndex(users, ['active', false]);\r\n     * // => 0\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.findIndex(users, 'active');\r\n     * // => 2\r\n     */\r\n    function findIndex(array, predicate, fromIndex) {\r\n        var length = array == null ? 0 : array.length;\r\n        if (!length) {\r\n            return -1;\r\n        }\r\n        var index = fromIndex == null ? 0 : toInteger(fromIndex);\r\n        if (index < 0) {\r\n            index = nativeMax(length + index, 0);\r\n        }\r\n        return baseFindIndex(array, baseIteratee(predicate, 3), index);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.findIndex` except that it iterates over elements\r\n     * of `collection` from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param {number} [fromIndex=array.length-1] The index to search from.\r\n     * @returns {number} Returns the index of the found element, else `-1`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': true },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': false }\r\n     * ];\r\n     *\r\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\r\n     * // => 2\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\r\n     * // => 0\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.findLastIndex(users, ['active', false]);\r\n     * // => 2\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.findLastIndex(users, 'active');\r\n     * // => 0\r\n     */\r\n    function findLastIndex(array, predicate, fromIndex) {\r\n        var length = array == null ? 0 : array.length;\r\n        if (!length) {\r\n            return -1;\r\n        }\r\n        var index = length - 1;\r\n        if (fromIndex !== undefined) {\r\n            index = toInteger(fromIndex);\r\n            index = fromIndex < 0\r\n                ? nativeMax(length + index, 0)\r\n                : nativeMin(index, length - 1);\r\n        }\r\n        return baseFindIndex(array, baseIteratee(predicate, 3), index, true);\r\n    }\r\n\r\n    /**\r\n     * Flattens `array` a single level deep.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to flatten.\r\n     * @returns {Array} Returns the new flattened array.\r\n     * @example\r\n     *\r\n     * _.flatten([1, [2, [3, [4]], 5]]);\r\n     * // => [1, 2, [3, [4]], 5]\r\n     */\r\n    function flatten(array) {\r\n        var length = array == null ? 0 : array.length;\r\n        return length ? baseFlatten(array, 1) : [];\r\n    }\r\n\r\n    /**\r\n     * Recursively flattens `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to flatten.\r\n     * @returns {Array} Returns the new flattened array.\r\n     * @example\r\n     *\r\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\r\n     * // => [1, 2, 3, 4, 5]\r\n     */\r\n    function flattenDeep(array) {\r\n        var length = array == null ? 0 : array.length;\r\n        return length ? baseFlatten(array, INFINITY) : [];\r\n    }\r\n\r\n    /**\r\n     * Gets the first element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @alias first\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {*} Returns the first element of `array`.\r\n     * @example\r\n     *\r\n     * _.head([1, 2, 3]);\r\n     * // => 1\r\n     *\r\n     * _.head([]);\r\n     * // => undefined\r\n     */\r\n    function head(array) {\r\n        return (array && array.length) ? array[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets the index at which the first occurrence of `value` is found in `array`\r\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\r\n     * offset from the end of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     * @example\r\n     *\r\n     * _.indexOf([1, 2, 1, 2], 2);\r\n     * // => 1\r\n     *\r\n     * // Search from the `fromIndex`.\r\n     * _.indexOf([1, 2, 1, 2], 2, 2);\r\n     * // => 3\r\n     */\r\n    function indexOf(array, value, fromIndex) {\r\n        var length = array == null ? 0 : array.length;\r\n        if (!length) {\r\n            return -1;\r\n        }\r\n        var index = fromIndex == null ? 0 : toInteger(fromIndex);\r\n        if (index < 0) {\r\n            index = nativeMax(length + index, 0);\r\n        }\r\n        return baseIndexOf(array, value, index);\r\n    }\r\n\r\n    /**\r\n     * Gets all but the last element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.initial([1, 2, 3]);\r\n     * // => [1, 2]\r\n     */\r\n    function initial(array) {\r\n        var length = array == null ? 0 : array.length;\r\n        return length ? baseSlice(array, 0, -1) : [];\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unique values that are included in all given arrays\r\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons. The order and references of result values are\r\n     * determined by the first array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @returns {Array} Returns the new array of intersecting values.\r\n     * @example\r\n     *\r\n     * _.intersection([2, 1], [2, 3]);\r\n     * // => [2]\r\n     */\r\n    var intersection = baseRest(function(arrays) {\r\n        var mapped = arrayMap(arrays, castArrayLikeObject);\r\n        return (mapped.length && mapped[0] === arrays[0])\r\n            ? baseIntersection(mapped)\r\n            : [];\r\n    });\r\n\r\n    /**\r\n     * Gets the last element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {*} Returns the last element of `array`.\r\n     * @example\r\n     *\r\n     * _.last([1, 2, 3]);\r\n     * // => 3\r\n     */\r\n    function last(array) {\r\n        var length = array == null ? 0 : array.length;\r\n        return length ? array[length - 1] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Reverses `array` so that the first element becomes the last, the second\r\n     * element becomes the second to last, and so on.\r\n     *\r\n     * **Note:** This method mutates `array` and is based on\r\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @returns {Array} Returns `array`.\r\n     * @example\r\n     *\r\n     * var array = [1, 2, 3];\r\n     *\r\n     * _.reverse(array);\r\n     * // => [3, 2, 1]\r\n     *\r\n     * console.log(array);\r\n     * // => [3, 2, 1]\r\n     */\r\n    function reverse(array) {\r\n        return array == null ? array : nativeReverse.call(array);\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\r\n     *\r\n     * **Note:** This method is used instead of\r\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\r\n     * returned.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to slice.\r\n     * @param {number} [start=0] The start position.\r\n     * @param {number} [end=array.length] The end position.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     */\r\n    function slice(array, start, end) {\r\n        var length = array == null ? 0 : array.length;\r\n        if (!length) {\r\n            return [];\r\n        }\r\n        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\r\n            start = 0;\r\n            end = length;\r\n        }\r\n        else {\r\n            start = start == null ? 0 : toInteger(start);\r\n            end = end === undefined ? length : toInteger(end);\r\n        }\r\n        return baseSlice(array, start, end);\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` with `n` elements taken from the beginning.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to take.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.take([1, 2, 3]);\r\n     * // => [1]\r\n     *\r\n     * _.take([1, 2, 3], 2);\r\n     * // => [1, 2]\r\n     *\r\n     * _.take([1, 2, 3], 5);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * _.take([1, 2, 3], 0);\r\n     * // => []\r\n     */\r\n    function take(array, n, guard) {\r\n        if (!(array && array.length)) {\r\n            return [];\r\n        }\r\n        n = (guard || n === undefined) ? 1 : toInteger(n);\r\n        return baseSlice(array, 0, n < 0 ? 0 : n);\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` with `n` elements taken from the end.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to take.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.takeRight([1, 2, 3]);\r\n     * // => [3]\r\n     *\r\n     * _.takeRight([1, 2, 3], 2);\r\n     * // => [2, 3]\r\n     *\r\n     * _.takeRight([1, 2, 3], 5);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * _.takeRight([1, 2, 3], 0);\r\n     * // => []\r\n     */\r\n    function takeRight(array, n, guard) {\r\n        var length = array == null ? 0 : array.length;\r\n        if (!length) {\r\n            return [];\r\n        }\r\n        n = (guard || n === undefined) ? 1 : toInteger(n);\r\n        n = length - n;\r\n        return baseSlice(array, n < 0 ? 0 : n, length);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unique values, in order, from all given arrays using\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @returns {Array} Returns the new array of combined values.\r\n     * @example\r\n     *\r\n     * _.union([2], [1, 2]);\r\n     * // => [2, 1]\r\n     */\r\n    var union = baseRest(function(arrays) {\r\n        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\r\n    });\r\n\r\n    /**\r\n     * Creates a duplicate-free version of an array, using\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons, in which only the first occurrence of each element\r\n     * is kept. The order of result values is determined by the order they occur\r\n     * in the array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @returns {Array} Returns the new duplicate free array.\r\n     * @example\r\n     *\r\n     * _.uniq([2, 1, 2]);\r\n     * // => [2, 1]\r\n     */\r\n    function uniq(array) {\r\n        return (array && array.length) ? baseUniq(array) : [];\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\r\n     * invoked for each element in `array` to generate the criterion by which\r\n     * uniqueness is computed. The order of result values is determined by the\r\n     * order they occur in the array. The iteratee is invoked with one argument:\r\n     * (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {Array} Returns the new duplicate free array.\r\n     * @example\r\n     *\r\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\r\n     * // => [2.1, 1.2]\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\r\n     * // => [{ 'x': 1 }, { 'x': 2 }]\r\n     */\r\n    function uniqBy(array, iteratee) {\r\n        return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.zip` except that it accepts an array of grouped\r\n     * elements and creates an array regrouping the elements to their pre-zip\r\n     * configuration.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.2.0\r\n     * @category Array\r\n     * @param {Array} array The array of grouped elements to process.\r\n     * @returns {Array} Returns the new array of regrouped elements.\r\n     * @example\r\n     *\r\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\r\n     * // => [['a', 1, true], ['b', 2, false]]\r\n     *\r\n     * _.unzip(zipped);\r\n     * // => [['a', 'b'], [1, 2], [true, false]]\r\n     */\r\n    function unzip(array) {\r\n        if (!(array && array.length)) {\r\n            return [];\r\n        }\r\n        var length = 0;\r\n        array = arrayFilter(array, function(group) {\r\n            if (isArrayLikeObject(group)) {\r\n                length = nativeMax(group.length, length);\r\n                return true;\r\n            }\r\n        });\r\n        return baseTimes(length, function(index) {\r\n            return arrayMap(array, baseProperty(index));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an array excluding all given values using\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * **Note:** Unlike `_.pull`, this method returns a new array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {...*} [values] The values to exclude.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @see _.difference, _.xor\r\n     * @example\r\n     *\r\n     * _.without([2, 1, 2, 3], 1, 2);\r\n     * // => [3]\r\n     */\r\n    var without = baseRest(function(array, values) {\r\n        return isArrayLikeObject(array)\r\n            ? baseDifference(array, values)\r\n            : [];\r\n    });\r\n\r\n    /**\r\n     * Creates an array of grouped elements, the first of which contains the\r\n     * first elements of the given arrays, the second of which contains the\r\n     * second elements of the given arrays, and so on.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to process.\r\n     * @returns {Array} Returns the new array of grouped elements.\r\n     * @example\r\n     *\r\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\r\n     * // => [['a', 1, true], ['b', 2, false]]\r\n     */\r\n    var zip = baseRest(unzip);\r\n\r\n    /**\r\n     * This method is like `_.fromPairs` except that it accepts two arrays,\r\n     * one of property identifiers and one of corresponding values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.4.0\r\n     * @category Array\r\n     * @param {Array} [props=[]] The property identifiers.\r\n     * @param {Array} [values=[]] The property values.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * _.zipObject(['a', 'b'], [1, 2]);\r\n     * // => { 'a': 1, 'b': 2 }\r\n     */\r\n    function zipObject(props, values) {\r\n        return baseZipObject(props || [], values || [], assignValue);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\r\n     * chain sequences enabled. The result of such sequences must be unwrapped\r\n     * with `_#value`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.3.0\r\n     * @category Seq\r\n     * @param {*} value The value to wrap.\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'age': 36 },\r\n     *   { 'user': 'fred',    'age': 40 },\r\n     *   { 'user': 'pebbles', 'age': 1 }\r\n     * ];\r\n     *\r\n     * var youngest = _\r\n     *   .chain(users)\r\n     *   .sortBy('age')\r\n     *   .map(function(o) {\r\n     *     return o.user + ' is ' + o.age;\r\n     *   })\r\n     *   .head()\r\n     *   .value();\r\n     * // => 'pebbles is 1'\r\n     */\r\n    function chain(value) {\r\n        var result = lodash(value);\r\n        result.__chain__ = true;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * This method invokes `interceptor` and returns `value`. The interceptor\r\n     * is invoked with one argument; (value). The purpose of this method is to\r\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Seq\r\n     * @param {*} value The value to provide to `interceptor`.\r\n     * @param {Function} interceptor The function to invoke.\r\n     * @returns {*} Returns `value`.\r\n     * @example\r\n     *\r\n     * _([1, 2, 3])\r\n     *  .tap(function(array) {\r\n     *    // Mutate input array.\r\n     *    array.pop();\r\n     *  })\r\n     *  .reverse()\r\n     *  .value();\r\n     * // => [2, 1]\r\n     */\r\n    function tap(value, interceptor) {\r\n        interceptor(value);\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\r\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\r\n     * results in a method chain sequence.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Seq\r\n     * @param {*} value The value to provide to `interceptor`.\r\n     * @param {Function} interceptor The function to invoke.\r\n     * @returns {*} Returns the result of `interceptor`.\r\n     * @example\r\n     *\r\n     * _('  abc  ')\r\n     *  .chain()\r\n     *  .trim()\r\n     *  .thru(function(value) {\r\n     *    return [value];\r\n     *  })\r\n     *  .value();\r\n     * // => ['abc']\r\n     */\r\n    function thru(value, interceptor) {\r\n        return interceptor(value);\r\n    }\r\n\r\n    /**\r\n     * This method is the wrapper version of `_.at`.\r\n     *\r\n     * @name at\r\n     * @memberOf _\r\n     * @since 1.0.0\r\n     * @category Seq\r\n     * @param {...(string|string[])} [paths] The property paths to pick.\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\r\n     *\r\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\r\n     * // => [3, 4]\r\n     */\r\n    var wrapperAt = flatRest(function(paths) {\r\n        var length = paths.length,\r\n            start = length ? paths[0] : 0,\r\n            value = this.__wrapped__,\r\n            interceptor = function(object) { return baseAt(object, paths); };\r\n\r\n        if (length > 1 || this.__actions__.length ||\r\n            !(value instanceof LazyWrapper) || !isIndex(start)) {\r\n            return this.thru(interceptor);\r\n        }\r\n        value = value.slice(start, +start + (length ? 1 : 0));\r\n        value.__actions__.push({\r\n            'func': thru,\r\n            'args': [interceptor],\r\n            'thisArg': undefined\r\n        });\r\n        return new LodashWrapper(value, this.__chain__).thru(function(array) {\r\n            if (length && !array.length) {\r\n                array.push(undefined);\r\n            }\r\n            return array;\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\r\n     *\r\n     * @name chain\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Seq\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36 },\r\n     *   { 'user': 'fred',   'age': 40 }\r\n     * ];\r\n     *\r\n     * // A sequence without explicit chaining.\r\n     * _(users).head();\r\n     * // => { 'user': 'barney', 'age': 36 }\r\n     *\r\n     * // A sequence with explicit chaining.\r\n     * _(users)\r\n     *   .chain()\r\n     *   .head()\r\n     *   .pick('user')\r\n     *   .value();\r\n     * // => { 'user': 'barney' }\r\n     */\r\n    function wrapperChain() {\r\n        return chain(this);\r\n    }\r\n\r\n    /**\r\n     * Executes the chain sequence and returns the wrapped result.\r\n     *\r\n     * @name commit\r\n     * @memberOf _\r\n     * @since 3.2.0\r\n     * @category Seq\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var array = [1, 2];\r\n     * var wrapped = _(array).push(3);\r\n     *\r\n     * console.log(array);\r\n     * // => [1, 2]\r\n     *\r\n     * wrapped = wrapped.commit();\r\n     * console.log(array);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * wrapped.last();\r\n     * // => 3\r\n     *\r\n     * console.log(array);\r\n     * // => [1, 2, 3]\r\n     */\r\n    function wrapperCommit() {\r\n        return new LodashWrapper(this.value(), this.__chain__);\r\n    }\r\n\r\n    /**\r\n     * Gets the next value on a wrapped object following the\r\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\r\n     *\r\n     * @name next\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Seq\r\n     * @returns {Object} Returns the next iterator value.\r\n     * @example\r\n     *\r\n     * var wrapped = _([1, 2]);\r\n     *\r\n     * wrapped.next();\r\n     * // => { 'done': false, 'value': 1 }\r\n     *\r\n     * wrapped.next();\r\n     * // => { 'done': false, 'value': 2 }\r\n     *\r\n     * wrapped.next();\r\n     * // => { 'done': true, 'value': undefined }\r\n     */\r\n    function wrapperNext() {\r\n        if (this.__values__ === undefined) {\r\n            this.__values__ = toArray(this.value());\r\n        }\r\n        var done = this.__index__ >= this.__values__.length,\r\n            value = done ? undefined : this.__values__[this.__index__++];\r\n\r\n        return { 'done': done, 'value': value };\r\n    }\r\n\r\n    /**\r\n     * Enables the wrapper to be iterable.\r\n     *\r\n     * @name Symbol.iterator\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Seq\r\n     * @returns {Object} Returns the wrapper object.\r\n     * @example\r\n     *\r\n     * var wrapped = _([1, 2]);\r\n     *\r\n     * wrapped[Symbol.iterator]() === wrapped;\r\n     * // => true\r\n     *\r\n     * Array.from(wrapped);\r\n     * // => [1, 2]\r\n     */\r\n    function wrapperToIterator() {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\r\n     *\r\n     * @name plant\r\n     * @memberOf _\r\n     * @since 3.2.0\r\n     * @category Seq\r\n     * @param {*} value The value to plant.\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * var wrapped = _([1, 2]).map(square);\r\n     * var other = wrapped.plant([3, 4]);\r\n     *\r\n     * other.value();\r\n     * // => [9, 16]\r\n     *\r\n     * wrapped.value();\r\n     * // => [1, 4]\r\n     */\r\n    function wrapperPlant(value) {\r\n        var result,\r\n            parent = this;\r\n\r\n        while (parent instanceof baseLodash) {\r\n            var clone = wrapperClone(parent);\r\n            clone.__index__ = 0;\r\n            clone.__values__ = undefined;\r\n            if (result) {\r\n                previous.__wrapped__ = clone;\r\n            } else {\r\n                result = clone;\r\n            }\r\n            var previous = clone;\r\n            parent = parent.__wrapped__;\r\n        }\r\n        previous.__wrapped__ = value;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * This method is the wrapper version of `_.reverse`.\r\n     *\r\n     * **Note:** This method mutates the wrapped array.\r\n     *\r\n     * @name reverse\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Seq\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var array = [1, 2, 3];\r\n     *\r\n     * _(array).reverse().value()\r\n     * // => [3, 2, 1]\r\n     *\r\n     * console.log(array);\r\n     * // => [3, 2, 1]\r\n     */\r\n    function wrapperReverse() {\r\n        var value = this.__wrapped__;\r\n        if (value instanceof LazyWrapper) {\r\n            var wrapped = value;\r\n            if (this.__actions__.length) {\r\n                wrapped = new LazyWrapper(this);\r\n            }\r\n            wrapped = wrapped.reverse();\r\n            wrapped.__actions__.push({\r\n                'func': thru,\r\n                'args': [reverse],\r\n                'thisArg': undefined\r\n            });\r\n            return new LodashWrapper(wrapped, this.__chain__);\r\n        }\r\n        return this.thru(reverse);\r\n    }\r\n\r\n    /**\r\n     * Executes the chain sequence to resolve the unwrapped value.\r\n     *\r\n     * @name value\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @alias toJSON, valueOf\r\n     * @category Seq\r\n     * @returns {*} Returns the resolved unwrapped value.\r\n     * @example\r\n     *\r\n     * _([1, 2, 3]).value();\r\n     * // => [1, 2, 3]\r\n     */\r\n    function wrapperValue() {\r\n        return baseWrapperValue(this.__wrapped__, this.__actions__);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates an object composed of keys generated from the results of running\r\n     * each element of `collection` thru `iteratee`. The corresponding value of\r\n     * each key is the number of times the key was returned by `iteratee`. The\r\n     * iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.5.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\r\n     * @returns {Object} Returns the composed aggregate object.\r\n     * @example\r\n     *\r\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\r\n     * // => { '4': 1, '6': 2 }\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.countBy(['one', 'two', 'three'], 'length');\r\n     * // => { '3': 2, '5': 1 }\r\n     */\r\n    var countBy = createAggregator(function(result, value, key) {\r\n        if (hasOwnProperty.call(result, key)) {\r\n            ++result[key];\r\n        } else {\r\n            baseAssignValue(result, key, 1);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\r\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\r\n     * invoked with three arguments: (value, index|key, collection).\r\n     *\r\n     * **Note:** This method returns `true` for\r\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\r\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\r\n     * elements of empty collections.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.every([true, 1, null, 'yes'], Boolean);\r\n     * // => false\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': false },\r\n     *   { 'user': 'fred',   'age': 40, 'active': false }\r\n     * ];\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.every(users, { 'user': 'barney', 'active': false });\r\n     * // => false\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.every(users, ['active', false]);\r\n     * // => true\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.every(users, 'active');\r\n     * // => false\r\n     */\r\n    function every(collection, predicate, guard) {\r\n        var func = isArray(collection) ? arrayEvery : baseEvery;\r\n        if (guard && isIterateeCall(collection, predicate, guard)) {\r\n            predicate = undefined;\r\n        }\r\n        return func(collection, baseIteratee(predicate, 3));\r\n    }\r\n\r\n    /**\r\n     * Iterates over elements of `collection`, returning an array of all elements\r\n     * `predicate` returns truthy for. The predicate is invoked with three\r\n     * arguments: (value, index|key, collection).\r\n     *\r\n     * **Note:** Unlike `_.remove`, this method returns a new array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the new filtered array.\r\n     * @see _.reject\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': true },\r\n     *   { 'user': 'fred',   'age': 40, 'active': false }\r\n     * ];\r\n     *\r\n     * _.filter(users, function(o) { return !o.active; });\r\n     * // => objects for ['fred']\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.filter(users, { 'age': 36, 'active': true });\r\n     * // => objects for ['barney']\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.filter(users, ['active', false]);\r\n     * // => objects for ['fred']\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.filter(users, 'active');\r\n     * // => objects for ['barney']\r\n     */\r\n    function filter(collection, predicate) {\r\n        var func = isArray(collection) ? arrayFilter : baseFilter;\r\n        return func(collection, baseIteratee(predicate, 3));\r\n    }\r\n\r\n    /**\r\n     * Iterates over elements of `collection`, returning the first element\r\n     * `predicate` returns truthy for. The predicate is invoked with three\r\n     * arguments: (value, index|key, collection).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @returns {*} Returns the matched element, else `undefined`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'age': 36, 'active': true },\r\n     *   { 'user': 'fred',    'age': 40, 'active': false },\r\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\r\n     * ];\r\n     *\r\n     * _.find(users, function(o) { return o.age < 40; });\r\n     * // => object for 'barney'\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.find(users, { 'age': 1, 'active': true });\r\n     * // => object for 'pebbles'\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.find(users, ['active', false]);\r\n     * // => object for 'fred'\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.find(users, 'active');\r\n     * // => object for 'barney'\r\n     */\r\n    var find = createFind(findIndex);\r\n\r\n    /**\r\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\r\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\r\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n     *\r\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\r\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\r\n     * or `_.forOwn` for object iteration.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @alias each\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Array|Object} Returns `collection`.\r\n     * @see _.forEachRight\r\n     * @example\r\n     *\r\n     * _.forEach([1, 2], function(value) {\r\n     *   console.log(value);\r\n     * });\r\n     * // => Logs `1` then `2`.\r\n     *\r\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\r\n     *   console.log(key);\r\n     * });\r\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\r\n     */\r\n    function forEach(collection, iteratee) {\r\n        var func = isArray(collection) ? arrayEach : baseEach;\r\n        return func(collection, baseIteratee(iteratee, 3));\r\n    }\r\n\r\n    /**\r\n     * Creates an object composed of keys generated from the results of running\r\n     * each element of `collection` thru `iteratee`. The order of grouped values\r\n     * is determined by the order they occur in `collection`. The corresponding\r\n     * value of each key is an array of elements responsible for generating the\r\n     * key. The iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\r\n     * @returns {Object} Returns the composed aggregate object.\r\n     * @example\r\n     *\r\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\r\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.groupBy(['one', 'two', 'three'], 'length');\r\n     * // => { '3': ['one', 'two'], '5': ['three'] }\r\n     */\r\n    var groupBy = createAggregator(function(result, value, key) {\r\n        if (hasOwnProperty.call(result, key)) {\r\n            result[key].push(value);\r\n        } else {\r\n            baseAssignValue(result, key, [value]);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Creates an array of values by running each element in `collection` thru\r\n     * `iteratee`. The iteratee is invoked with three arguments:\r\n     * (value, index|key, collection).\r\n     *\r\n     * Many lodash methods are guarded to work as iteratees for methods like\r\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\r\n     *\r\n     * The guarded methods are:\r\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\r\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\r\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\r\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the new mapped array.\r\n     * @example\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * _.map([4, 8], square);\r\n     * // => [16, 64]\r\n     *\r\n     * _.map({ 'a': 4, 'b': 8 }, square);\r\n     * // => [16, 64] (iteration order is not guaranteed)\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney' },\r\n     *   { 'user': 'fred' }\r\n     * ];\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.map(users, 'user');\r\n     * // => ['barney', 'fred']\r\n     */\r\n    function map(collection, iteratee) {\r\n        var func = isArray(collection) ? arrayMap : baseMap;\r\n        return func(collection, baseIteratee(iteratee, 3));\r\n    }\r\n\r\n    /**\r\n     * Reduces `collection` to a value which is the accumulated result of running\r\n     * each element in `collection` thru `iteratee`, where each successive\r\n     * invocation is supplied the return value of the previous. If `accumulator`\r\n     * is not given, the first element of `collection` is used as the initial\r\n     * value. The iteratee is invoked with four arguments:\r\n     * (accumulator, value, index|key, collection).\r\n     *\r\n     * Many lodash methods are guarded to work as iteratees for methods like\r\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\r\n     *\r\n     * The guarded methods are:\r\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\r\n     * and `sortBy`\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [accumulator] The initial value.\r\n     * @returns {*} Returns the accumulated value.\r\n     * @see _.reduceRight\r\n     * @example\r\n     *\r\n     * _.reduce([1, 2], function(sum, n) {\r\n     *   return sum + n;\r\n     * }, 0);\r\n     * // => 3\r\n     *\r\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\r\n     *   (result[value] || (result[value] = [])).push(key);\r\n     *   return result;\r\n     * }, {});\r\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\r\n     */\r\n    function reduce(collection, iteratee, accumulator) {\r\n        var func = isArray(collection) ? arrayReduce : baseReduce,\r\n            initAccum = arguments.length < 3;\r\n\r\n        return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);\r\n    }\r\n\r\n    /**\r\n     * The opposite of `_.filter`; this method returns the elements of `collection`\r\n     * that `predicate` does **not** return truthy for.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the new filtered array.\r\n     * @see _.filter\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': false },\r\n     *   { 'user': 'fred',   'age': 40, 'active': true }\r\n     * ];\r\n     *\r\n     * _.reject(users, function(o) { return !o.active; });\r\n     * // => objects for ['fred']\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.reject(users, { 'age': 40, 'active': true });\r\n     * // => objects for ['barney']\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.reject(users, ['active', false]);\r\n     * // => objects for ['fred']\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.reject(users, 'active');\r\n     * // => objects for ['barney']\r\n     */\r\n    function reject(collection, predicate) {\r\n        var func = isArray(collection) ? arrayFilter : baseFilter;\r\n        return func(collection, negate(baseIteratee(predicate, 3)));\r\n    }\r\n\r\n    /**\r\n     * Gets the size of `collection` by returning its length for array-like\r\n     * values or the number of own enumerable string keyed properties for objects.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @returns {number} Returns the collection size.\r\n     * @example\r\n     *\r\n     * _.size([1, 2, 3]);\r\n     * // => 3\r\n     *\r\n     * _.size({ 'a': 1, 'b': 2 });\r\n     * // => 2\r\n     *\r\n     * _.size('pebbles');\r\n     * // => 7\r\n     */\r\n    function size(collection) {\r\n        if (collection == null) {\r\n            return 0;\r\n        }\r\n        if (isArrayLike(collection)) {\r\n            return isString(collection) ? stringSize(collection) : collection.length;\r\n        }\r\n        var tag = getTag(collection);\r\n        if (tag == mapTag || tag == setTag) {\r\n            return collection.size;\r\n        }\r\n        return baseKeys(collection).length;\r\n    }\r\n\r\n    /**\r\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\r\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\r\n     * invoked with three arguments: (value, index|key, collection).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.some([null, 0, 'yes', false], Boolean);\r\n     * // => true\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'active': true },\r\n     *   { 'user': 'fred',   'active': false }\r\n     * ];\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.some(users, { 'user': 'barney', 'active': false });\r\n     * // => false\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.some(users, ['active', false]);\r\n     * // => true\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.some(users, 'active');\r\n     * // => true\r\n     */\r\n    function some(collection, predicate, guard) {\r\n        var func = isArray(collection) ? arraySome : baseSome;\r\n        if (guard && isIterateeCall(collection, predicate, guard)) {\r\n            predicate = undefined;\r\n        }\r\n        return func(collection, baseIteratee(predicate, 3));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of elements, sorted in ascending order by the results of\r\n     * running each element in a collection thru each iteratee. This method\r\n     * performs a stable sort, that is, it preserves the original sort order of\r\n     * equal elements. The iteratees are invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\r\n     *  The iteratees to sort by.\r\n     * @returns {Array} Returns the new sorted array.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'fred',   'age': 48 },\r\n     *   { 'user': 'barney', 'age': 36 },\r\n     *   { 'user': 'fred',   'age': 40 },\r\n     *   { 'user': 'barney', 'age': 34 }\r\n     * ];\r\n     *\r\n     * _.sortBy(users, [function(o) { return o.user; }]);\r\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\r\n     *\r\n     * _.sortBy(users, ['user', 'age']);\r\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\r\n     */\r\n    var sortBy = baseRest(function(collection, iteratees) {\r\n        if (collection == null) {\r\n            return [];\r\n        }\r\n        var length = iteratees.length;\r\n        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\r\n            iteratees = [];\r\n        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\r\n            iteratees = [iteratees[0]];\r\n        }\r\n        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\r\n    });\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Gets the timestamp of the number of milliseconds that have elapsed since\r\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.4.0\r\n     * @category Date\r\n     * @returns {number} Returns the timestamp.\r\n     * @example\r\n     *\r\n     * _.defer(function(stamp) {\r\n     *   console.log(_.now() - stamp);\r\n     * }, _.now());\r\n     * // => Logs the number of milliseconds it took for the deferred invocation.\r\n     */\r\n    var now = function() {\r\n        return root.Date.now();\r\n    };\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * The opposite of `_.before`; this method creates a function that invokes\r\n     * `func` once it's called `n` or more times.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {number} n The number of calls before `func` is invoked.\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new restricted function.\r\n     * @example\r\n     *\r\n     * var saves = ['profile', 'settings'];\r\n     *\r\n     * var done = _.after(saves.length, function() {\r\n     *   console.log('done saving!');\r\n     * });\r\n     *\r\n     * _.forEach(saves, function(type) {\r\n     *   asyncSave({ 'type': type, 'complete': done });\r\n     * });\r\n     * // => Logs 'done saving!' after the two async saves have completed.\r\n     */\r\n    function after(n, func) {\r\n        if (typeof func != 'function') {\r\n            throw new TypeError(FUNC_ERROR_TEXT);\r\n        }\r\n        n = toInteger(n);\r\n        return function() {\r\n            if (--n < 1) {\r\n                return func.apply(this, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `func`, with the `this` binding and arguments\r\n     * of the created function, while it's called less than `n` times. Subsequent\r\n     * calls to the created function return the result of the last `func` invocation.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Function\r\n     * @param {number} n The number of calls at which `func` is no longer invoked.\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new restricted function.\r\n     * @example\r\n     *\r\n     * jQuery(element).on('click', _.before(5, addContactToList));\r\n     * // => Allows adding up to 4 contacts to the list.\r\n     */\r\n    function before(n, func) {\r\n        var result;\r\n        if (typeof func != 'function') {\r\n            throw new TypeError(FUNC_ERROR_TEXT);\r\n        }\r\n        n = toInteger(n);\r\n        return function() {\r\n            if (--n > 0) {\r\n                result = func.apply(this, arguments);\r\n            }\r\n            if (n <= 1) {\r\n                func = undefined;\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\r\n     * and `partials` prepended to the arguments it receives.\r\n     *\r\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\r\n     * may be used as a placeholder for partially applied arguments.\r\n     *\r\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\r\n     * property of bound functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to bind.\r\n     * @param {*} thisArg The `this` binding of `func`.\r\n     * @param {...*} [partials] The arguments to be partially applied.\r\n     * @returns {Function} Returns the new bound function.\r\n     * @example\r\n     *\r\n     * function greet(greeting, punctuation) {\r\n     *   return greeting + ' ' + this.user + punctuation;\r\n     * }\r\n     *\r\n     * var object = { 'user': 'fred' };\r\n     *\r\n     * var bound = _.bind(greet, object, 'hi');\r\n     * bound('!');\r\n     * // => 'hi fred!'\r\n     *\r\n     * // Bound with placeholders.\r\n     * var bound = _.bind(greet, object, _, '!');\r\n     * bound('hi');\r\n     * // => 'hi fred!'\r\n     */\r\n    var bind = baseRest(function(func, thisArg, partials) {\r\n        var bitmask = WRAP_BIND_FLAG;\r\n        if (partials.length) {\r\n            var holders = replaceHolders(partials, getHolder(bind));\r\n            bitmask |= WRAP_PARTIAL_FLAG;\r\n        }\r\n        return createWrap(func, bitmask, thisArg, partials, holders);\r\n    });\r\n\r\n    /**\r\n     * Creates a debounced function that delays invoking `func` until after `wait`\r\n     * milliseconds have elapsed since the last time the debounced function was\r\n     * invoked. The debounced function comes with a `cancel` method to cancel\r\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\r\n     * Provide `options` to indicate whether `func` should be invoked on the\r\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\r\n     * with the last arguments provided to the debounced function. Subsequent\r\n     * calls to the debounced function return the result of the last `func`\r\n     * invocation.\r\n     *\r\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\r\n     * invoked on the trailing edge of the timeout only if the debounced function\r\n     * is invoked more than once during the `wait` timeout.\r\n     *\r\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\r\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\r\n     *\r\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\r\n     * for details over the differences between `_.debounce` and `_.throttle`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to debounce.\r\n     * @param {number} [wait=0] The number of milliseconds to delay.\r\n     * @param {Object} [options={}] The options object.\r\n     * @param {boolean} [options.leading=false]\r\n     *  Specify invoking on the leading edge of the timeout.\r\n     * @param {number} [options.maxWait]\r\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\r\n     * @param {boolean} [options.trailing=true]\r\n     *  Specify invoking on the trailing edge of the timeout.\r\n     * @returns {Function} Returns the new debounced function.\r\n     * @example\r\n     *\r\n     * // Avoid costly calculations while the window size is in flux.\r\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\r\n     *\r\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\r\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\r\n     *   'leading': true,\r\n     *   'trailing': false\r\n     * }));\r\n     *\r\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\r\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\r\n     * var source = new EventSource('/stream');\r\n     * jQuery(source).on('message', debounced);\r\n     *\r\n     * // Cancel the trailing debounced invocation.\r\n     * jQuery(window).on('popstate', debounced.cancel);\r\n     */\r\n    function debounce(func, wait, options) {\r\n        var lastArgs,\r\n            lastThis,\r\n            maxWait,\r\n            result,\r\n            timerId,\r\n            lastCallTime,\r\n            lastInvokeTime = 0,\r\n            leading = false,\r\n            maxing = false,\r\n            trailing = true;\r\n\r\n        if (typeof func != 'function') {\r\n            throw new TypeError(FUNC_ERROR_TEXT);\r\n        }\r\n        wait = toNumber(wait) || 0;\r\n        if (isObject(options)) {\r\n            leading = !!options.leading;\r\n            maxing = 'maxWait' in options;\r\n            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\r\n            trailing = 'trailing' in options ? !!options.trailing : trailing;\r\n        }\r\n\r\n        function invokeFunc(time) {\r\n            var args = lastArgs,\r\n                thisArg = lastThis;\r\n\r\n            lastArgs = lastThis = undefined;\r\n            lastInvokeTime = time;\r\n            result = func.apply(thisArg, args);\r\n            return result;\r\n        }\r\n\r\n        function leadingEdge(time) {\r\n            // Reset any `maxWait` timer.\r\n            lastInvokeTime = time;\r\n            // Start the timer for the trailing edge.\r\n            timerId = setTimeout(timerExpired, wait);\r\n            // Invoke the leading edge.\r\n            return leading ? invokeFunc(time) : result;\r\n        }\r\n\r\n        function remainingWait(time) {\r\n            var timeSinceLastCall = time - lastCallTime,\r\n                timeSinceLastInvoke = time - lastInvokeTime,\r\n                timeWaiting = wait - timeSinceLastCall;\r\n\r\n            return maxing\r\n                ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\r\n                : timeWaiting;\r\n        }\r\n\r\n        function shouldInvoke(time) {\r\n            var timeSinceLastCall = time - lastCallTime,\r\n                timeSinceLastInvoke = time - lastInvokeTime;\r\n\r\n            // Either this is the first call, activity has stopped and we're at the\r\n            // trailing edge, the system time has gone backwards and we're treating\r\n            // it as the trailing edge, or we've hit the `maxWait` limit.\r\n            return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\r\n                (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\r\n        }\r\n\r\n        function timerExpired() {\r\n            var time = now();\r\n            if (shouldInvoke(time)) {\r\n                return trailingEdge(time);\r\n            }\r\n            // Restart the timer.\r\n            timerId = setTimeout(timerExpired, remainingWait(time));\r\n        }\r\n\r\n        function trailingEdge(time) {\r\n            timerId = undefined;\r\n\r\n            // Only invoke if we have `lastArgs` which means `func` has been\r\n            // debounced at least once.\r\n            if (trailing && lastArgs) {\r\n                return invokeFunc(time);\r\n            }\r\n            lastArgs = lastThis = undefined;\r\n            return result;\r\n        }\r\n\r\n        function cancel() {\r\n            if (timerId !== undefined) {\r\n                clearTimeout(timerId);\r\n            }\r\n            lastInvokeTime = 0;\r\n            lastArgs = lastCallTime = lastThis = timerId = undefined;\r\n        }\r\n\r\n        function flush() {\r\n            return timerId === undefined ? result : trailingEdge(now());\r\n        }\r\n\r\n        function debounced() {\r\n            var time = now(),\r\n                isInvoking = shouldInvoke(time);\r\n\r\n            lastArgs = arguments;\r\n            lastThis = this;\r\n            lastCallTime = time;\r\n\r\n            if (isInvoking) {\r\n                if (timerId === undefined) {\r\n                    return leadingEdge(lastCallTime);\r\n                }\r\n                if (maxing) {\r\n                    // Handle invocations in a tight loop.\r\n                    timerId = setTimeout(timerExpired, wait);\r\n                    return invokeFunc(lastCallTime);\r\n                }\r\n            }\r\n            if (timerId === undefined) {\r\n                timerId = setTimeout(timerExpired, wait);\r\n            }\r\n            return result;\r\n        }\r\n        debounced.cancel = cancel;\r\n        debounced.flush = flush;\r\n        return debounced;\r\n    }\r\n\r\n    /**\r\n     * Defers invoking the `func` until the current call stack has cleared. Any\r\n     * additional arguments are provided to `func` when it's invoked.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to defer.\r\n     * @param {...*} [args] The arguments to invoke `func` with.\r\n     * @returns {number} Returns the timer id.\r\n     * @example\r\n     *\r\n     * _.defer(function(text) {\r\n     *   console.log(text);\r\n     * }, 'deferred');\r\n     * // => Logs 'deferred' after one millisecond.\r\n     */\r\n    var defer = baseRest(function(func, args) {\r\n        return baseDelay(func, 1, args);\r\n    });\r\n\r\n    /**\r\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\r\n     * provided to `func` when it's invoked.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to delay.\r\n     * @param {number} wait The number of milliseconds to delay invocation.\r\n     * @param {...*} [args] The arguments to invoke `func` with.\r\n     * @returns {number} Returns the timer id.\r\n     * @example\r\n     *\r\n     * _.delay(function(text) {\r\n     *   console.log(text);\r\n     * }, 1000, 'later');\r\n     * // => Logs 'later' after one second.\r\n     */\r\n    var delay = baseRest(function(func, wait, args) {\r\n        return baseDelay(func, toNumber(wait) || 0, args);\r\n    });\r\n\r\n    /**\r\n     * Creates a function that memoizes the result of `func`. If `resolver` is\r\n     * provided, it determines the cache key for storing the result based on the\r\n     * arguments provided to the memoized function. By default, the first argument\r\n     * provided to the memoized function is used as the map cache key. The `func`\r\n     * is invoked with the `this` binding of the memoized function.\r\n     *\r\n     * **Note:** The cache is exposed as the `cache` property on the memoized\r\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\r\n     * constructor with one whose instances implement the\r\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\r\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to have its output memoized.\r\n     * @param {Function} [resolver] The function to resolve the cache key.\r\n     * @returns {Function} Returns the new memoized function.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': 2 };\r\n     * var other = { 'c': 3, 'd': 4 };\r\n     *\r\n     * var values = _.memoize(_.values);\r\n     * values(object);\r\n     * // => [1, 2]\r\n     *\r\n     * values(other);\r\n     * // => [3, 4]\r\n     *\r\n     * object.a = 2;\r\n     * values(object);\r\n     * // => [1, 2]\r\n     *\r\n     * // Modify the result cache.\r\n     * values.cache.set(object, ['a', 'b']);\r\n     * values(object);\r\n     * // => ['a', 'b']\r\n     *\r\n     * // Replace `_.memoize.Cache`.\r\n     * _.memoize.Cache = WeakMap;\r\n     */\r\n    function memoize(func, resolver) {\r\n        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\r\n            throw new TypeError(FUNC_ERROR_TEXT);\r\n        }\r\n        var memoized = function() {\r\n            var args = arguments,\r\n                key = resolver ? resolver.apply(this, args) : args[0],\r\n                cache = memoized.cache;\r\n\r\n            if (cache.has(key)) {\r\n                return cache.get(key);\r\n            }\r\n            var result = func.apply(this, args);\r\n            memoized.cache = cache.set(key, result) || cache;\r\n            return result;\r\n        };\r\n        memoized.cache = new (memoize.Cache || MapCache);\r\n        return memoized;\r\n    }\r\n\r\n    // Expose `MapCache`.\r\n    memoize.Cache = MapCache;\r\n\r\n    /**\r\n     * Creates a function that negates the result of the predicate `func`. The\r\n     * `func` predicate is invoked with the `this` binding and arguments of the\r\n     * created function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Function\r\n     * @param {Function} predicate The predicate to negate.\r\n     * @returns {Function} Returns the new negated function.\r\n     * @example\r\n     *\r\n     * function isEven(n) {\r\n     *   return n % 2 == 0;\r\n     * }\r\n     *\r\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\r\n     * // => [1, 3, 5]\r\n     */\r\n    function negate(predicate) {\r\n        if (typeof predicate != 'function') {\r\n            throw new TypeError(FUNC_ERROR_TEXT);\r\n        }\r\n        return function() {\r\n            var args = arguments;\r\n            switch (args.length) {\r\n                case 0: return !predicate.call(this);\r\n                case 1: return !predicate.call(this, args[0]);\r\n                case 2: return !predicate.call(this, args[0], args[1]);\r\n                case 3: return !predicate.call(this, args[0], args[1], args[2]);\r\n            }\r\n            return !predicate.apply(this, args);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\r\n     * to the function return the value of the first invocation. The `func` is\r\n     * invoked with the `this` binding and arguments of the created function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new restricted function.\r\n     * @example\r\n     *\r\n     * var initialize = _.once(createApplication);\r\n     * initialize();\r\n     * initialize();\r\n     * // => `createApplication` is invoked once\r\n     */\r\n    function once(func) {\r\n        return before(2, func);\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with the `this` binding of the\r\n     * created function and arguments from `start` and beyond provided as\r\n     * an array.\r\n     *\r\n     * **Note:** This method is based on the\r\n     * [rest parameter](https://mdn.io/rest_parameters).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Function\r\n     * @param {Function} func The function to apply a rest parameter to.\r\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var say = _.rest(function(what, names) {\r\n     *   return what + ' ' + _.initial(names).join(', ') +\r\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\r\n     * });\r\n     *\r\n     * say('hello', 'fred', 'barney', 'pebbles');\r\n     * // => 'hello fred, barney, & pebbles'\r\n     */\r\n    function rest(func, start) {\r\n        if (typeof func != 'function') {\r\n            throw new TypeError(FUNC_ERROR_TEXT);\r\n        }\r\n        start = start === undefined ? start : toInteger(start);\r\n        return baseRest(func, start);\r\n    }\r\n\r\n    /**\r\n     * Creates a throttled function that only invokes `func` at most once per\r\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\r\n     * method to cancel delayed `func` invocations and a `flush` method to\r\n     * immediately invoke them. Provide `options` to indicate whether `func`\r\n     * should be invoked on the leading and/or trailing edge of the `wait`\r\n     * timeout. The `func` is invoked with the last arguments provided to the\r\n     * throttled function. Subsequent calls to the throttled function return the\r\n     * result of the last `func` invocation.\r\n     *\r\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\r\n     * invoked on the trailing edge of the timeout only if the throttled function\r\n     * is invoked more than once during the `wait` timeout.\r\n     *\r\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\r\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\r\n     *\r\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\r\n     * for details over the differences between `_.throttle` and `_.debounce`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to throttle.\r\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\r\n     * @param {Object} [options={}] The options object.\r\n     * @param {boolean} [options.leading=true]\r\n     *  Specify invoking on the leading edge of the timeout.\r\n     * @param {boolean} [options.trailing=true]\r\n     *  Specify invoking on the trailing edge of the timeout.\r\n     * @returns {Function} Returns the new throttled function.\r\n     * @example\r\n     *\r\n     * // Avoid excessively updating the position while scrolling.\r\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\r\n     *\r\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\r\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\r\n     * jQuery(element).on('click', throttled);\r\n     *\r\n     * // Cancel the trailing throttled invocation.\r\n     * jQuery(window).on('popstate', throttled.cancel);\r\n     */\r\n    function throttle(func, wait, options) {\r\n        var leading = true,\r\n            trailing = true;\r\n\r\n        if (typeof func != 'function') {\r\n            throw new TypeError(FUNC_ERROR_TEXT);\r\n        }\r\n        if (isObject(options)) {\r\n            leading = 'leading' in options ? !!options.leading : leading;\r\n            trailing = 'trailing' in options ? !!options.trailing : trailing;\r\n        }\r\n        return debounce(func, wait, {\r\n            'leading': leading,\r\n            'maxWait': wait,\r\n            'trailing': trailing\r\n        });\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a shallow clone of `value`.\r\n     *\r\n     * **Note:** This method is loosely based on the\r\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\r\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\r\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\r\n     * arrays. The own enumerable properties of `arguments` objects are cloned\r\n     * as plain objects. An empty object is returned for uncloneable values such\r\n     * as error objects, functions, DOM nodes, and WeakMaps.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to clone.\r\n     * @returns {*} Returns the cloned value.\r\n     * @see _.cloneDeep\r\n     * @example\r\n     *\r\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\r\n     *\r\n     * var shallow = _.clone(objects);\r\n     * console.log(shallow[0] === objects[0]);\r\n     * // => true\r\n     */\r\n    function clone(value) {\r\n        return baseClone(value, CLONE_SYMBOLS_FLAG);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.clone` except that it recursively clones `value`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to recursively clone.\r\n     * @returns {*} Returns the deep cloned value.\r\n     * @see _.clone\r\n     * @example\r\n     *\r\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\r\n     *\r\n     * var deep = _.cloneDeep(objects);\r\n     * console.log(deep[0] === objects[0]);\r\n     * // => false\r\n     */\r\n    function cloneDeep(value) {\r\n        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\r\n    }\r\n\r\n    /**\r\n     * Performs a\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * comparison between two values to determine if they are equivalent.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1 };\r\n     * var other = { 'a': 1 };\r\n     *\r\n     * _.eq(object, object);\r\n     * // => true\r\n     *\r\n     * _.eq(object, other);\r\n     * // => false\r\n     *\r\n     * _.eq('a', 'a');\r\n     * // => true\r\n     *\r\n     * _.eq('a', Object('a'));\r\n     * // => false\r\n     *\r\n     * _.eq(NaN, NaN);\r\n     * // => true\r\n     */\r\n    function eq(value, other) {\r\n        return value === other || (value !== value && other !== other);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is likely an `arguments` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.isArguments(function() { return arguments; }());\r\n     * // => true\r\n     *\r\n     * _.isArguments([1, 2, 3]);\r\n     * // => false\r\n     */\r\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\r\n        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\r\n            !propertyIsEnumerable.call(value, 'callee');\r\n    };\r\n\r\n    /**\r\n     * Checks if `value` is classified as an `Array` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n     * @example\r\n     *\r\n     * _.isArray([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isArray(document.body.children);\r\n     * // => false\r\n     *\r\n     * _.isArray('abc');\r\n     * // => false\r\n     *\r\n     * _.isArray(_.noop);\r\n     * // => false\r\n     */\r\n    var isArray = Array.isArray;\r\n\r\n    /**\r\n     * Checks if `value` is array-like. A value is considered array-like if it's\r\n     * not a function and has a `value.length` that's an integer greater than or\r\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n     * @example\r\n     *\r\n     * _.isArrayLike([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isArrayLike(document.body.children);\r\n     * // => true\r\n     *\r\n     * _.isArrayLike('abc');\r\n     * // => true\r\n     *\r\n     * _.isArrayLike(_.noop);\r\n     * // => false\r\n     */\r\n    function isArrayLike(value) {\r\n        return value != null && isLength(value.length) && !isFunction(value);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.isArrayLike` except that it also checks if `value`\r\n     * is an object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.isArrayLikeObject([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isArrayLikeObject(document.body.children);\r\n     * // => true\r\n     *\r\n     * _.isArrayLikeObject('abc');\r\n     * // => false\r\n     *\r\n     * _.isArrayLikeObject(_.noop);\r\n     * // => false\r\n     */\r\n    function isArrayLikeObject(value) {\r\n        return isObjectLike(value) && isArrayLike(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a boolean primitive or object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\r\n     * @example\r\n     *\r\n     * _.isBoolean(false);\r\n     * // => true\r\n     *\r\n     * _.isBoolean(null);\r\n     * // => false\r\n     */\r\n    function isBoolean(value) {\r\n        return value === true || value === false ||\r\n            (isObjectLike(value) && baseGetTag(value) == boolTag);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a buffer.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.3.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n     * @example\r\n     *\r\n     * _.isBuffer(new Buffer(2));\r\n     * // => true\r\n     *\r\n     * _.isBuffer(new Uint8Array(2));\r\n     * // => false\r\n     */\r\n    var isBuffer = nativeIsBuffer || stubFalse;\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Date` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\r\n     * @example\r\n     *\r\n     * _.isDate(new Date);\r\n     * // => true\r\n     *\r\n     * _.isDate('Mon April 23 2012');\r\n     * // => false\r\n     */\r\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\r\n\r\n    /**\r\n     * Checks if `value` is an empty object, collection, map, or set.\r\n     *\r\n     * Objects are considered empty if they have no own enumerable string keyed\r\n     * properties.\r\n     *\r\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\r\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\r\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\r\n     * @example\r\n     *\r\n     * _.isEmpty(null);\r\n     * // => true\r\n     *\r\n     * _.isEmpty(true);\r\n     * // => true\r\n     *\r\n     * _.isEmpty(1);\r\n     * // => true\r\n     *\r\n     * _.isEmpty([1, 2, 3]);\r\n     * // => false\r\n     *\r\n     * _.isEmpty({ 'a': 1 });\r\n     * // => false\r\n     */\r\n    function isEmpty(value) {\r\n        if (value == null) {\r\n            return true;\r\n        }\r\n        if (isArrayLike(value) &&\r\n            (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\r\n                isBuffer(value) || isTypedArray(value) || isArguments(value))) {\r\n            return !value.length;\r\n        }\r\n        var tag = getTag(value);\r\n        if (tag == mapTag || tag == setTag) {\r\n            return !value.size;\r\n        }\r\n        if (isPrototype(value)) {\r\n            return !baseKeys(value).length;\r\n        }\r\n        for (var key in value) {\r\n            if (hasOwnProperty.call(value, key)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Performs a deep comparison between two values to determine if they are\r\n     * equivalent.\r\n     *\r\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\r\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\r\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\r\n     * by their own, not inherited, enumerable properties. Functions and DOM\r\n     * nodes are compared by strict equality, i.e. `===`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1 };\r\n     * var other = { 'a': 1 };\r\n     *\r\n     * _.isEqual(object, other);\r\n     * // => true\r\n     *\r\n     * object === other;\r\n     * // => false\r\n     */\r\n    function isEqual(value, other) {\r\n        return baseIsEqual(value, other);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a finite primitive number.\r\n     *\r\n     * **Note:** This method is based on\r\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\r\n     * @example\r\n     *\r\n     * _.isFinite(3);\r\n     * // => true\r\n     *\r\n     * _.isFinite(Number.MIN_VALUE);\r\n     * // => true\r\n     *\r\n     * _.isFinite(Infinity);\r\n     * // => false\r\n     *\r\n     * _.isFinite('3');\r\n     * // => false\r\n     */\r\n    function isFinite(value) {\r\n        return typeof value == 'number' && nativeIsFinite(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Function` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n     * @example\r\n     *\r\n     * _.isFunction(_);\r\n     * // => true\r\n     *\r\n     * _.isFunction(/abc/);\r\n     * // => false\r\n     */\r\n    function isFunction(value) {\r\n        if (!isObject(value)) {\r\n            return false;\r\n        }\r\n        // The use of `Object#toString` avoids issues with the `typeof` operator\r\n        // in Safari 9 which returns 'object' for typed arrays and other constructors.\r\n        var tag = baseGetTag(value);\r\n        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a valid array-like length.\r\n     *\r\n     * **Note:** This method is loosely based on\r\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n     * @example\r\n     *\r\n     * _.isLength(3);\r\n     * // => true\r\n     *\r\n     * _.isLength(Number.MIN_VALUE);\r\n     * // => false\r\n     *\r\n     * _.isLength(Infinity);\r\n     * // => false\r\n     *\r\n     * _.isLength('3');\r\n     * // => false\r\n     */\r\n    function isLength(value) {\r\n        return typeof value == 'number' &&\r\n            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is the\r\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n     * @example\r\n     *\r\n     * _.isObject({});\r\n     * // => true\r\n     *\r\n     * _.isObject([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isObject(_.noop);\r\n     * // => true\r\n     *\r\n     * _.isObject(null);\r\n     * // => false\r\n     */\r\n    function isObject(value) {\r\n        var type = typeof value;\r\n        return value != null && (type == 'object' || type == 'function');\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n     * and has a `typeof` result of \"object\".\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n     * @example\r\n     *\r\n     * _.isObjectLike({});\r\n     * // => true\r\n     *\r\n     * _.isObjectLike([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isObjectLike(_.noop);\r\n     * // => false\r\n     *\r\n     * _.isObjectLike(null);\r\n     * // => false\r\n     */\r\n    function isObjectLike(value) {\r\n        return value != null && typeof value == 'object';\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Map` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.3.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\r\n     * @example\r\n     *\r\n     * _.isMap(new Map);\r\n     * // => true\r\n     *\r\n     * _.isMap(new WeakMap);\r\n     * // => false\r\n     */\r\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\r\n\r\n    /**\r\n     * Checks if `value` is `NaN`.\r\n     *\r\n     * **Note:** This method is based on\r\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\r\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\r\n     * `undefined` and other non-number values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNaN(NaN);\r\n     * // => true\r\n     *\r\n     * _.isNaN(new Number(NaN));\r\n     * // => true\r\n     *\r\n     * isNaN(undefined);\r\n     * // => true\r\n     *\r\n     * _.isNaN(undefined);\r\n     * // => false\r\n     */\r\n    function isNaN(value) {\r\n        // An `NaN` primitive is the only value that is not equal to itself.\r\n        // Perform the `toStringTag` check first to avoid errors with some\r\n        // ActiveX objects in IE.\r\n        return isNumber(value) && value != +value;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is `null`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNull(null);\r\n     * // => true\r\n     *\r\n     * _.isNull(void 0);\r\n     * // => false\r\n     */\r\n    function isNull(value) {\r\n        return value === null;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Number` primitive or object.\r\n     *\r\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\r\n     * classified as numbers, use the `_.isFinite` method.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNumber(3);\r\n     * // => true\r\n     *\r\n     * _.isNumber(Number.MIN_VALUE);\r\n     * // => true\r\n     *\r\n     * _.isNumber(Infinity);\r\n     * // => true\r\n     *\r\n     * _.isNumber('3');\r\n     * // => false\r\n     */\r\n    function isNumber(value) {\r\n        return typeof value == 'number' ||\r\n            (isObjectLike(value) && baseGetTag(value) == numberTag);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a plain object, that is, an object created by the\r\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.8.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     * }\r\n     *\r\n     * _.isPlainObject(new Foo);\r\n     * // => false\r\n     *\r\n     * _.isPlainObject([1, 2, 3]);\r\n     * // => false\r\n     *\r\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\r\n     * // => true\r\n     *\r\n     * _.isPlainObject(Object.create(null));\r\n     * // => true\r\n     */\r\n    function isPlainObject(value) {\r\n        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\r\n            return false;\r\n        }\r\n        var proto = getPrototype(value);\r\n        if (proto === null) {\r\n            return true;\r\n        }\r\n        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\r\n        return typeof Ctor == 'function' && Ctor instanceof Ctor &&\r\n            funcToString.call(Ctor) == objectCtorString;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `RegExp` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\r\n     * @example\r\n     *\r\n     * _.isRegExp(/abc/);\r\n     * // => true\r\n     *\r\n     * _.isRegExp('/abc/');\r\n     * // => false\r\n     */\r\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Set` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.3.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSet(new Set);\r\n     * // => true\r\n     *\r\n     * _.isSet(new WeakSet);\r\n     * // => false\r\n     */\r\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `String` primitive or object.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\r\n     * @example\r\n     *\r\n     * _.isString('abc');\r\n     * // => true\r\n     *\r\n     * _.isString(1);\r\n     * // => false\r\n     */\r\n    function isString(value) {\r\n        return typeof value == 'string' ||\r\n            (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Symbol` primitive or object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSymbol(Symbol.iterator);\r\n     * // => true\r\n     *\r\n     * _.isSymbol('abc');\r\n     * // => false\r\n     */\r\n    function isSymbol(value) {\r\n        return typeof value == 'symbol' ||\r\n            (isObjectLike(value) && baseGetTag(value) == symbolTag);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a typed array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n     * @example\r\n     *\r\n     * _.isTypedArray(new Uint8Array);\r\n     * // => true\r\n     *\r\n     * _.isTypedArray([]);\r\n     * // => false\r\n     */\r\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\r\n\r\n    /**\r\n     * Checks if `value` is `undefined`.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\r\n     * @example\r\n     *\r\n     * _.isUndefined(void 0);\r\n     * // => true\r\n     *\r\n     * _.isUndefined(null);\r\n     * // => false\r\n     */\r\n    function isUndefined(value) {\r\n        return value === undefined;\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to an array.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {Array} Returns the converted array.\r\n     * @example\r\n     *\r\n     * _.toArray({ 'a': 1, 'b': 2 });\r\n     * // => [1, 2]\r\n     *\r\n     * _.toArray('abc');\r\n     * // => ['a', 'b', 'c']\r\n     *\r\n     * _.toArray(1);\r\n     * // => []\r\n     *\r\n     * _.toArray(null);\r\n     * // => []\r\n     */\r\n    function toArray(value) {\r\n        if (!value) {\r\n            return [];\r\n        }\r\n        if (isArrayLike(value)) {\r\n            return isString(value) ? stringToArray(value) : copyArray(value);\r\n        }\r\n        if (symIterator && value[symIterator]) {\r\n            return iteratorToArray(value[symIterator]());\r\n        }\r\n        var tag = getTag(value),\r\n            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\r\n\r\n        return func(value);\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a finite number.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.12.0\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {number} Returns the converted number.\r\n     * @example\r\n     *\r\n     * _.toFinite(3.2);\r\n     * // => 3.2\r\n     *\r\n     * _.toFinite(Number.MIN_VALUE);\r\n     * // => 5e-324\r\n     *\r\n     * _.toFinite(Infinity);\r\n     * // => 1.7976931348623157e+308\r\n     *\r\n     * _.toFinite('3.2');\r\n     * // => 3.2\r\n     */\r\n    function toFinite(value) {\r\n        if (!value) {\r\n            return value === 0 ? value : 0;\r\n        }\r\n        value = toNumber(value);\r\n        if (value === INFINITY || value === -INFINITY) {\r\n            var sign = (value < 0 ? -1 : 1);\r\n            return sign * MAX_INTEGER;\r\n        }\r\n        return value === value ? value : 0;\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to an integer.\r\n     *\r\n     * **Note:** This method is loosely based on\r\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {number} Returns the converted integer.\r\n     * @example\r\n     *\r\n     * _.toInteger(3.2);\r\n     * // => 3\r\n     *\r\n     * _.toInteger(Number.MIN_VALUE);\r\n     * // => 0\r\n     *\r\n     * _.toInteger(Infinity);\r\n     * // => 1.7976931348623157e+308\r\n     *\r\n     * _.toInteger('3.2');\r\n     * // => 3\r\n     */\r\n    function toInteger(value) {\r\n        var result = toFinite(value),\r\n            remainder = result % 1;\r\n\r\n        return result === result ? (remainder ? result - remainder : result) : 0;\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a number.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to process.\r\n     * @returns {number} Returns the number.\r\n     * @example\r\n     *\r\n     * _.toNumber(3.2);\r\n     * // => 3.2\r\n     *\r\n     * _.toNumber(Number.MIN_VALUE);\r\n     * // => 5e-324\r\n     *\r\n     * _.toNumber(Infinity);\r\n     * // => Infinity\r\n     *\r\n     * _.toNumber('3.2');\r\n     * // => 3.2\r\n     */\r\n    function toNumber(value) {\r\n        if (typeof value == 'number') {\r\n            return value;\r\n        }\r\n        if (isSymbol(value)) {\r\n            return NAN;\r\n        }\r\n        if (isObject(value)) {\r\n            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\r\n            value = isObject(other) ? (other + '') : other;\r\n        }\r\n        if (typeof value != 'string') {\r\n            return value === 0 ? value : +value;\r\n        }\r\n        value = value.replace(reTrim, '');\r\n        var isBinary = reIsBinary.test(value);\r\n        return (isBinary || reIsOctal.test(value))\r\n            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n            : (reIsBadHex.test(value) ? NAN : +value);\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a plain object flattening inherited enumerable string\r\n     * keyed properties of `value` to own properties of the plain object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {Object} Returns the converted plain object.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.assign({ 'a': 1 }, new Foo);\r\n     * // => { 'a': 1, 'b': 2 }\r\n     *\r\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\r\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\r\n     */\r\n    function toPlainObject(value) {\r\n        return copyObject(value, keysIn(value));\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a string. An empty string is returned for `null`\r\n     * and `undefined` values. The sign of `-0` is preserved.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {string} Returns the converted string.\r\n     * @example\r\n     *\r\n     * _.toString(null);\r\n     * // => ''\r\n     *\r\n     * _.toString(-0);\r\n     * // => '-0'\r\n     *\r\n     * _.toString([1, 2, 3]);\r\n     * // => '1,2,3'\r\n     */\r\n    function toString(value) {\r\n        return value == null ? '' : baseToString(value);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * This method is like `_.assign` except that it iterates over own and\r\n     * inherited source properties.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @alias extend\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.assign\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     * }\r\n     *\r\n     * function Bar() {\r\n     *   this.c = 3;\r\n     * }\r\n     *\r\n     * Foo.prototype.b = 2;\r\n     * Bar.prototype.d = 4;\r\n     *\r\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\r\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\r\n     */\r\n    var assignIn = createAssigner(function(object, source) {\r\n        copyObject(source, keysIn(source), object);\r\n    });\r\n\r\n    /**\r\n     * Creates an object that inherits from the `prototype` object. If a\r\n     * `properties` object is given, its own enumerable string keyed properties\r\n     * are assigned to the created object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.3.0\r\n     * @category Object\r\n     * @param {Object} prototype The object to inherit from.\r\n     * @param {Object} [properties] The properties to assign to the object.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * function Shape() {\r\n     *   this.x = 0;\r\n     *   this.y = 0;\r\n     * }\r\n     *\r\n     * function Circle() {\r\n     *   Shape.call(this);\r\n     * }\r\n     *\r\n     * Circle.prototype = _.create(Shape.prototype, {\r\n     *   'constructor': Circle\r\n     * });\r\n     *\r\n     * var circle = new Circle;\r\n     * circle instanceof Circle;\r\n     * // => true\r\n     *\r\n     * circle instanceof Shape;\r\n     * // => true\r\n     */\r\n    function create(prototype, properties) {\r\n        var result = baseCreate(prototype);\r\n        return properties == null ? result : baseAssign(result, properties);\r\n    }\r\n\r\n    /**\r\n     * Assigns own and inherited enumerable string keyed properties of source\r\n     * objects to the destination object for all destination properties that\r\n     * resolve to `undefined`. Source objects are applied from left to right.\r\n     * Once a property is set, additional values of the same property are ignored.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.defaultsDeep\r\n     * @example\r\n     *\r\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\r\n     * // => { 'a': 1, 'b': 2 }\r\n     */\r\n    var defaults = baseRest(function(object, sources) {\r\n        object = Object(object);\r\n\r\n        var index = -1;\r\n        var length = sources.length;\r\n        var guard = length > 2 ? sources[2] : undefined;\r\n\r\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\r\n            length = 1;\r\n        }\r\n\r\n        while (++index < length) {\r\n            var source = sources[index];\r\n            var props = keysIn(source);\r\n            var propsIndex = -1;\r\n            var propsLength = props.length;\r\n\r\n            while (++propsIndex < propsLength) {\r\n                var key = props[propsIndex];\r\n                var value = object[key];\r\n\r\n                if (value === undefined ||\r\n                    (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\r\n                    object[key] = source[key];\r\n                }\r\n            }\r\n        }\r\n\r\n        return object;\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.defaults` except that it recursively assigns\r\n     * default properties.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.10.0\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.defaults\r\n     * @example\r\n     *\r\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\r\n     * // => { 'a': { 'b': 2, 'c': 3 } }\r\n     */\r\n    var defaultsDeep = baseRest(function(args) {\r\n        args.push(undefined, customDefaultsMerge);\r\n        return apply(mergeWith, undefined, args);\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.find` except that it returns the key of the first\r\n     * element `predicate` returns truthy for instead of the element itself.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.1.0\r\n     * @category Object\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {string|undefined} Returns the key of the matched element,\r\n     *  else `undefined`.\r\n     * @example\r\n     *\r\n     * var users = {\r\n     *   'barney':  { 'age': 36, 'active': true },\r\n     *   'fred':    { 'age': 40, 'active': false },\r\n     *   'pebbles': { 'age': 1,  'active': true }\r\n     * };\r\n     *\r\n     * _.findKey(users, function(o) { return o.age < 40; });\r\n     * // => 'barney' (iteration order is not guaranteed)\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.findKey(users, { 'age': 1, 'active': true });\r\n     * // => 'pebbles'\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.findKey(users, ['active', false]);\r\n     * // => 'fred'\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.findKey(users, 'active');\r\n     * // => 'barney'\r\n     */\r\n    function findKey(object, predicate) {\r\n        return baseFindKey(object, baseIteratee(predicate, 3), baseForOwn);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.findKey` except that it iterates over elements of\r\n     * a collection in the opposite order.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {string|undefined} Returns the key of the matched element,\r\n     *  else `undefined`.\r\n     * @example\r\n     *\r\n     * var users = {\r\n     *   'barney':  { 'age': 36, 'active': true },\r\n     *   'fred':    { 'age': 40, 'active': false },\r\n     *   'pebbles': { 'age': 1,  'active': true }\r\n     * };\r\n     *\r\n     * _.findLastKey(users, function(o) { return o.age < 40; });\r\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.findLastKey(users, { 'age': 36, 'active': true });\r\n     * // => 'barney'\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.findLastKey(users, ['active', false]);\r\n     * // => 'fred'\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.findLastKey(users, 'active');\r\n     * // => 'pebbles'\r\n     */\r\n    function findLastKey(object, predicate) {\r\n        return baseFindKey(object, baseIteratee(predicate, 3), baseForOwnRight);\r\n    }\r\n\r\n    /**\r\n     * Gets the value at `path` of `object`. If the resolved value is\r\n     * `undefined`, the `defaultValue` is returned in its place.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.7.0\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\r\n     * @returns {*} Returns the resolved value.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\r\n     *\r\n     * _.get(object, 'a[0].b.c');\r\n     * // => 3\r\n     *\r\n     * _.get(object, ['a', '0', 'b', 'c']);\r\n     * // => 3\r\n     *\r\n     * _.get(object, 'a.b.c', 'default');\r\n     * // => 'default'\r\n     */\r\n    function get(object, path, defaultValue) {\r\n        var result = object == null ? undefined : baseGet(object, path);\r\n        return result === undefined ? defaultValue : result;\r\n    }\r\n\r\n    /**\r\n     * Checks if `path` is a direct property of `object`.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path to check.\r\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': { 'b': 2 } };\r\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\r\n     *\r\n     * _.has(object, 'a');\r\n     * // => true\r\n     *\r\n     * _.has(object, 'a.b');\r\n     * // => true\r\n     *\r\n     * _.has(object, ['a', 'b']);\r\n     * // => true\r\n     *\r\n     * _.has(other, 'a');\r\n     * // => false\r\n     */\r\n    function has(object, path) {\r\n        return object != null && hasPath(object, path, baseHas);\r\n    }\r\n\r\n    /**\r\n     * Checks if `path` is a direct or inherited property of `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path to check.\r\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\r\n     * @example\r\n     *\r\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\r\n     *\r\n     * _.hasIn(object, 'a');\r\n     * // => true\r\n     *\r\n     * _.hasIn(object, 'a.b');\r\n     * // => true\r\n     *\r\n     * _.hasIn(object, ['a', 'b']);\r\n     * // => true\r\n     *\r\n     * _.hasIn(object, 'b');\r\n     * // => false\r\n     */\r\n    function hasIn(object, path) {\r\n        return object != null && hasPath(object, path, baseHasIn);\r\n    }\r\n\r\n    /**\r\n     * Creates an object composed of the inverted keys and values of `object`.\r\n     * If `object` contains duplicate values, subsequent values overwrite\r\n     * property assignments of previous values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.7.0\r\n     * @category Object\r\n     * @param {Object} object The object to invert.\r\n     * @returns {Object} Returns the new inverted object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\r\n     *\r\n     * _.invert(object);\r\n     * // => { '1': 'c', '2': 'b' }\r\n     */\r\n    var invert = createInverter(function(result, value, key) {\r\n        if (value != null &&\r\n            typeof value.toString != 'function') {\r\n            value = nativeObjectToString.call(value);\r\n        }\r\n\r\n        result[value] = key;\r\n    }, constant(identity));\r\n\r\n    /**\r\n     * This method is like `_.invert` except that the inverted object is generated\r\n     * from the results of running each element of `object` thru `iteratee`. The\r\n     * corresponding inverted value of each inverted key is an array of keys\r\n     * responsible for generating the inverted value. The iteratee is invoked\r\n     * with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.1.0\r\n     * @category Object\r\n     * @param {Object} object The object to invert.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {Object} Returns the new inverted object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\r\n     *\r\n     * _.invertBy(object);\r\n     * // => { '1': ['a', 'c'], '2': ['b'] }\r\n     *\r\n     * _.invertBy(object, function(value) {\r\n     *   return 'group' + value;\r\n     * });\r\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\r\n     */\r\n    var invertBy = createInverter(function(result, value, key) {\r\n        if (value != null &&\r\n            typeof value.toString != 'function') {\r\n            value = nativeObjectToString.call(value);\r\n        }\r\n\r\n        if (hasOwnProperty.call(result, value)) {\r\n            result[value].push(key);\r\n        } else {\r\n            result[value] = [key];\r\n        }\r\n    }, baseIteratee);\r\n\r\n    /**\r\n     * Creates an array of the own enumerable property names of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects. See the\r\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n     * for more details.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.keys(new Foo);\r\n     * // => ['a', 'b'] (iteration order is not guaranteed)\r\n     *\r\n     * _.keys('hi');\r\n     * // => ['0', '1']\r\n     */\r\n    function keys(object) {\r\n        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of the own and inherited enumerable property names of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.keysIn(new Foo);\r\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\r\n     */\r\n    function keysIn(object) {\r\n        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.assign` except that it recursively merges own and\r\n     * inherited enumerable string keyed properties of source objects into the\r\n     * destination object. Source properties that resolve to `undefined` are\r\n     * skipped if a destination value exists. Array and plain object properties\r\n     * are merged recursively. Other objects and value types are overridden by\r\n     * assignment. Source objects are applied from left to right. Subsequent\r\n     * sources overwrite property assignments of previous sources.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.5.0\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var object = {\r\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\r\n     * };\r\n     *\r\n     * var other = {\r\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\r\n     * };\r\n     *\r\n     * _.merge(object, other);\r\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\r\n     */\r\n    var merge = createAssigner(function(object, source, srcIndex) {\r\n        baseMerge(object, source, srcIndex);\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.merge` except that it accepts `customizer` which\r\n     * is invoked to produce the merged values of the destination and source\r\n     * properties. If `customizer` returns `undefined`, merging is handled by the\r\n     * method instead. The `customizer` is invoked with six arguments:\r\n     * (objValue, srcValue, key, object, source, stack).\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} sources The source objects.\r\n     * @param {Function} customizer The function to customize assigned values.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * function customizer(objValue, srcValue) {\r\n     *   if (_.isArray(objValue)) {\r\n     *     return objValue.concat(srcValue);\r\n     *   }\r\n     * }\r\n     *\r\n     * var object = { 'a': [1], 'b': [2] };\r\n     * var other = { 'a': [3], 'b': [4] };\r\n     *\r\n     * _.mergeWith(object, other, customizer);\r\n     * // => { 'a': [1, 3], 'b': [2, 4] }\r\n     */\r\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\r\n        baseMerge(object, source, srcIndex, customizer);\r\n    });\r\n\r\n    /**\r\n     * The opposite of `_.pick`; this method creates an object composed of the\r\n     * own and inherited enumerable property paths of `object` that are not omitted.\r\n     *\r\n     * **Note:** This method is considerably slower than `_.pick`.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The source object.\r\n     * @param {...(string|string[])} [paths] The property paths to omit.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\r\n     *\r\n     * _.omit(object, ['a', 'c']);\r\n     * // => { 'b': '2' }\r\n     */\r\n    var omit = flatRest(function(object, paths) {\r\n        var result = {};\r\n        if (object == null) {\r\n            return result;\r\n        }\r\n        var isDeep = false;\r\n        paths = arrayMap(paths, function(path) {\r\n            path = castPath(path, object);\r\n            isDeep || (isDeep = path.length > 1);\r\n            return path;\r\n        });\r\n        copyObject(object, getAllKeysIn(object), result);\r\n        if (isDeep) {\r\n            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\r\n        }\r\n        var length = paths.length;\r\n        while (length--) {\r\n            baseUnset(result, paths[length]);\r\n        }\r\n        return result;\r\n    });\r\n\r\n    /**\r\n     * The opposite of `_.pickBy`; this method creates an object composed of\r\n     * the own and inherited enumerable string keyed properties of `object` that\r\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\r\n     * arguments: (value, key).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The source object.\r\n     * @param {Function} [predicate=_.identity] The function invoked per property.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\r\n     *\r\n     * _.omitBy(object, _.isNumber);\r\n     * // => { 'b': '2' }\r\n     */\r\n    function omitBy(object, predicate) {\r\n        return pickBy(object, negate(baseIteratee(predicate)));\r\n    }\r\n\r\n    /**\r\n     * Creates an object composed of the picked `object` properties.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The source object.\r\n     * @param {...(string|string[])} [paths] The property paths to pick.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\r\n     *\r\n     * _.pick(object, ['a', 'c']);\r\n     * // => { 'a': 1, 'c': 3 }\r\n     */\r\n    var pick = flatRest(function(object, paths) {\r\n        return object == null ? {} : basePick(object, paths);\r\n    });\r\n\r\n    /**\r\n     * Creates an object composed of the `object` properties `predicate` returns\r\n     * truthy for. The predicate is invoked with two arguments: (value, key).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The source object.\r\n     * @param {Function} [predicate=_.identity] The function invoked per property.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\r\n     *\r\n     * _.pickBy(object, _.isNumber);\r\n     * // => { 'a': 1, 'c': 3 }\r\n     */\r\n    function pickBy(object, predicate) {\r\n        if (object == null) {\r\n            return {};\r\n        }\r\n        var props = arrayMap(getAllKeysIn(object), function(prop) {\r\n            return [prop];\r\n        });\r\n        predicate = baseIteratee(predicate);\r\n        return basePickBy(object, props, function(value, path) {\r\n            return predicate(value, path[0]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.get` except that if the resolved value is a\r\n     * function it's invoked with the `this` binding of its parent object and\r\n     * its result is returned.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the property to resolve.\r\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\r\n     * @returns {*} Returns the resolved value.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\r\n     *\r\n     * _.result(object, 'a[0].b.c1');\r\n     * // => 3\r\n     *\r\n     * _.result(object, 'a[0].b.c2');\r\n     * // => 4\r\n     *\r\n     * _.result(object, 'a[0].b.c3', 'default');\r\n     * // => 'default'\r\n     *\r\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\r\n     * // => 'default'\r\n     */\r\n    function result(object, path, defaultValue) {\r\n        path = castPath(path, object);\r\n\r\n        var index = -1,\r\n            length = path.length;\r\n\r\n        // Ensure the loop is entered when path is empty.\r\n        if (!length) {\r\n            length = 1;\r\n            object = undefined;\r\n        }\r\n        while (++index < length) {\r\n            var value = object == null ? undefined : object[toKey(path[index])];\r\n            if (value === undefined) {\r\n                index = length;\r\n                value = defaultValue;\r\n            }\r\n            object = isFunction(value) ? value.call(object) : value;\r\n        }\r\n        return object;\r\n    }\r\n\r\n    /**\r\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\r\n     * it's created. Arrays are created for missing index properties while objects\r\n     * are created for all other missing properties. Use `_.setWith` to customize\r\n     * `path` creation.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.7.0\r\n     * @category Object\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The path of the property to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\r\n     *\r\n     * _.set(object, 'a[0].b.c', 4);\r\n     * console.log(object.a[0].b.c);\r\n     * // => 4\r\n     *\r\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\r\n     * console.log(object.x[0].y.z);\r\n     * // => 5\r\n     */\r\n    function set(object, path, value) {\r\n        return object == null ? object : baseSet(object, path, value);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of the own enumerable string keyed property values of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property values.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.values(new Foo);\r\n     * // => [1, 2] (iteration order is not guaranteed)\r\n     *\r\n     * _.values('hi');\r\n     * // => ['h', 'i']\r\n     */\r\n    function values(object) {\r\n        return object == null ? [] : baseValues(object, keys(object));\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Number\r\n     * @param {number} number The number to clamp.\r\n     * @param {number} [lower] The lower bound.\r\n     * @param {number} upper The upper bound.\r\n     * @returns {number} Returns the clamped number.\r\n     * @example\r\n     *\r\n     * _.clamp(-10, -5, 5);\r\n     * // => -5\r\n     *\r\n     * _.clamp(10, -5, 5);\r\n     * // => 5\r\n     */\r\n    function clamp(number, lower, upper) {\r\n        if (upper === undefined) {\r\n            upper = lower;\r\n            lower = undefined;\r\n        }\r\n        if (upper !== undefined) {\r\n            upper = toNumber(upper);\r\n            upper = upper === upper ? upper : 0;\r\n        }\r\n        if (lower !== undefined) {\r\n            lower = toNumber(lower);\r\n            lower = lower === lower ? lower : 0;\r\n        }\r\n        return baseClamp(toNumber(number), lower, upper);\r\n    }\r\n\r\n    /**\r\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\r\n     * If only one argument is provided a number between `0` and the given number\r\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\r\n     * floats, a floating-point number is returned instead of an integer.\r\n     *\r\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\r\n     * floating-point values which can produce unexpected results.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.7.0\r\n     * @category Number\r\n     * @param {number} [lower=0] The lower bound.\r\n     * @param {number} [upper=1] The upper bound.\r\n     * @param {boolean} [floating] Specify returning a floating-point number.\r\n     * @returns {number} Returns the random number.\r\n     * @example\r\n     *\r\n     * _.random(0, 5);\r\n     * // => an integer between 0 and 5\r\n     *\r\n     * _.random(5);\r\n     * // => also an integer between 0 and 5\r\n     *\r\n     * _.random(5, true);\r\n     * // => a floating-point number between 0 and 5\r\n     *\r\n     * _.random(1.2, 5.2);\r\n     * // => a floating-point number between 1.2 and 5.2\r\n     */\r\n    function random(lower, upper, floating) {\r\n        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\r\n            upper = floating = undefined;\r\n        }\r\n        if (floating === undefined) {\r\n            if (typeof upper == 'boolean') {\r\n                floating = upper;\r\n                upper = undefined;\r\n            }\r\n            else if (typeof lower == 'boolean') {\r\n                floating = lower;\r\n                lower = undefined;\r\n            }\r\n        }\r\n        if (lower === undefined && upper === undefined) {\r\n            lower = 0;\r\n            upper = 1;\r\n        }\r\n        else {\r\n            lower = toFinite(lower);\r\n            if (upper === undefined) {\r\n                upper = lower;\r\n                lower = 0;\r\n            } else {\r\n                upper = toFinite(upper);\r\n            }\r\n        }\r\n        if (lower > upper) {\r\n            var temp = lower;\r\n            lower = upper;\r\n            upper = temp;\r\n        }\r\n        if (floating || lower % 1 || upper % 1) {\r\n            var rand = nativeRandom();\r\n            return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\r\n        }\r\n        return baseRandom(lower, upper);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\r\n     * corresponding HTML entities.\r\n     *\r\n     * **Note:** No other characters are escaped. To escape additional\r\n     * characters use a third-party library like [_he_](https://mths.be/he).\r\n     *\r\n     * Though the \">\" character is escaped for symmetry, characters like\r\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\r\n     * unless they're part of a tag or unquoted attribute value. See\r\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\r\n     * (under \"semi-related fun fact\") for more details.\r\n     *\r\n     * When working with HTML you should always\r\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\r\n     * XSS vectors.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to escape.\r\n     * @returns {string} Returns the escaped string.\r\n     * @example\r\n     *\r\n     * _.escape('fred, barney, & pebbles');\r\n     * // => 'fred, barney, &amp; pebbles'\r\n     */\r\n    function escape(string) {\r\n        string = toString(string);\r\n        return (string && reHasUnescapedHtml.test(string))\r\n            ? string.replace(reUnescapedHtml, escapeHtmlChar)\r\n            : string;\r\n    }\r\n\r\n    /**\r\n     * Removes leading and trailing whitespace or specified characters from `string`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to trim.\r\n     * @param {string} [chars=whitespace] The characters to trim.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {string} Returns the trimmed string.\r\n     * @example\r\n     *\r\n     * _.trim('  abc  ');\r\n     * // => 'abc'\r\n     *\r\n     * _.trim('-_-abc-_-', '_-');\r\n     * // => 'abc'\r\n     *\r\n     * _.map(['  foo  ', '  bar  '], _.trim);\r\n     * // => ['foo', 'bar']\r\n     */\r\n    function trim(string, chars, guard) {\r\n        string = toString(string);\r\n        if (string && (guard || chars === undefined)) {\r\n            return string.replace(reTrim, '');\r\n        }\r\n        if (!string || !(chars = baseToString(chars))) {\r\n            return string;\r\n        }\r\n        var strSymbols = stringToArray(string),\r\n            chrSymbols = stringToArray(chars),\r\n            start = charsStartIndex(strSymbols, chrSymbols),\r\n            end = charsEndIndex(strSymbols, chrSymbols) + 1;\r\n\r\n        return castSlice(strSymbols, start, end).join('');\r\n    }\r\n\r\n    /**\r\n     * The inverse of `_.escape`; this method converts the HTML entities\r\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\r\n     * their corresponding characters.\r\n     *\r\n     * **Note:** No other HTML entities are unescaped. To unescape additional\r\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.6.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to unescape.\r\n     * @returns {string} Returns the unescaped string.\r\n     * @example\r\n     *\r\n     * _.unescape('fred, barney, &amp; pebbles');\r\n     * // => 'fred, barney, & pebbles'\r\n     */\r\n    function unescape(string) {\r\n        string = toString(string);\r\n        return (string && reHasEscapedHtml.test(string))\r\n            ? string.replace(reEscapedHtml, unescapeHtmlChar)\r\n            : string;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a function that returns `value`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.4.0\r\n     * @category Util\r\n     * @param {*} value The value to return from the new function.\r\n     * @returns {Function} Returns the new constant function.\r\n     * @example\r\n     *\r\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\r\n     *\r\n     * console.log(objects);\r\n     * // => [{ 'a': 1 }, { 'a': 1 }]\r\n     *\r\n     * console.log(objects[0] === objects[1]);\r\n     * // => true\r\n     */\r\n    function constant(value) {\r\n        return function() {\r\n            return value;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * This method returns the first argument it receives.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {*} value Any value.\r\n     * @returns {*} Returns `value`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1 };\r\n     *\r\n     * console.log(_.identity(object) === object);\r\n     * // => true\r\n     */\r\n    function identity(value) {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with the arguments of the created\r\n     * function. If `func` is a property name, the created function returns the\r\n     * property value for a given element. If `func` is an array or object, the\r\n     * created function returns `true` for elements that contain the equivalent\r\n     * source properties, otherwise it returns `false`.\r\n     *\r\n     * @static\r\n     * @since 4.0.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {*} [func=_.identity] The value to convert to a callback.\r\n     * @returns {Function} Returns the callback.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': true },\r\n     *   { 'user': 'fred',   'age': 40, 'active': false }\r\n     * ];\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\r\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.filter(users, _.iteratee(['user', 'fred']));\r\n     * // => [{ 'user': 'fred', 'age': 40 }]\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.map(users, _.iteratee('user'));\r\n     * // => ['barney', 'fred']\r\n     *\r\n     * // Create custom iteratee shorthands.\r\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\r\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\r\n     *     return func.test(string);\r\n     *   };\r\n     * });\r\n     *\r\n     * _.filter(['abc', 'def'], /ef/);\r\n     * // => ['def']\r\n     */\r\n    function iteratee(func) {\r\n        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\r\n    }\r\n\r\n    /**\r\n     * Creates a function that performs a partial deep comparison between a given\r\n     * object and `source`, returning `true` if the given object has equivalent\r\n     * property values, else `false`.\r\n     *\r\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\r\n     * partially applied.\r\n     *\r\n     * Partial comparisons will match empty array and empty object `source`\r\n     * values against any array or object value, respectively. See `_.isEqual`\r\n     * for a list of supported value comparisons.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Util\r\n     * @param {Object} source The object of property values to match.\r\n     * @returns {Function} Returns the new spec function.\r\n     * @example\r\n     *\r\n     * var objects = [\r\n     *   { 'a': 1, 'b': 2, 'c': 3 },\r\n     *   { 'a': 4, 'b': 5, 'c': 6 }\r\n     * ];\r\n     *\r\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\r\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\r\n     */\r\n    function matches(source) {\r\n        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\r\n    }\r\n\r\n    /**\r\n     * Adds all own enumerable string keyed function properties of a source\r\n     * object to the destination object. If `object` is a function, then methods\r\n     * are added to its prototype as well.\r\n     *\r\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\r\n     * avoid conflicts caused by modifying the original.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {Function|Object} [object=lodash] The destination object.\r\n     * @param {Object} source The object of functions to add.\r\n     * @param {Object} [options={}] The options object.\r\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\r\n     * @returns {Function|Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * function vowels(string) {\r\n     *   return _.filter(string, function(v) {\r\n     *     return /[aeiou]/i.test(v);\r\n     *   });\r\n     * }\r\n     *\r\n     * _.mixin({ 'vowels': vowels });\r\n     * _.vowels('fred');\r\n     * // => ['e']\r\n     *\r\n     * _('fred').vowels().value();\r\n     * // => ['e']\r\n     *\r\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\r\n     * _('fred').vowels();\r\n     * // => ['e']\r\n     */\r\n    function mixin(object, source, options) {\r\n        var props = keys(source),\r\n            methodNames = baseFunctions(source, props);\r\n\r\n        if (options == null &&\r\n            !(isObject(source) && (methodNames.length || !props.length))) {\r\n            options = source;\r\n            source = object;\r\n            object = this;\r\n            methodNames = baseFunctions(source, keys(source));\r\n        }\r\n        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\r\n            isFunc = isFunction(object);\r\n\r\n        arrayEach(methodNames, function(methodName) {\r\n            var func = source[methodName];\r\n            object[methodName] = func;\r\n            if (isFunc) {\r\n                object.prototype[methodName] = function() {\r\n                    var chainAll = this.__chain__;\r\n                    if (chain || chainAll) {\r\n                        var result = object(this.__wrapped__),\r\n                            actions = result.__actions__ = copyArray(this.__actions__);\r\n\r\n                        actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\r\n                        result.__chain__ = chainAll;\r\n                        return result;\r\n                    }\r\n                    return func.apply(object, arrayPush([this.value()], arguments));\r\n                };\r\n            }\r\n        });\r\n\r\n        return object;\r\n    }\r\n\r\n    /**\r\n     * Reverts the `_` variable to its previous value and returns a reference to\r\n     * the `lodash` function.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @returns {Function} Returns the `lodash` function.\r\n     * @example\r\n     *\r\n     * var lodash = _.noConflict();\r\n     */\r\n    function noConflict() {\r\n        if (root._ === this) {\r\n            root._ = oldDash;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This method returns `undefined`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.3.0\r\n     * @category Util\r\n     * @example\r\n     *\r\n     * _.times(2, _.noop);\r\n     * // => [undefined, undefined]\r\n     */\r\n    function noop() {\r\n        // No operation performed.\r\n    }\r\n\r\n    /**\r\n     * Creates a function that returns the value at `path` of a given object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.4.0\r\n     * @category Util\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @returns {Function} Returns the new accessor function.\r\n     * @example\r\n     *\r\n     * var objects = [\r\n     *   { 'a': { 'b': 2 } },\r\n     *   { 'a': { 'b': 1 } }\r\n     * ];\r\n     *\r\n     * _.map(objects, _.property('a.b'));\r\n     * // => [2, 1]\r\n     *\r\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\r\n     * // => [1, 2]\r\n     */\r\n    function property(path) {\r\n        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of numbers (positive and/or negative) progressing from\r\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\r\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\r\n     * it's set to `start` with `start` then set to `0`.\r\n     *\r\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\r\n     * floating-point values which can produce unexpected results.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {number} [start=0] The start of the range.\r\n     * @param {number} end The end of the range.\r\n     * @param {number} [step=1] The value to increment or decrement by.\r\n     * @returns {Array} Returns the range of numbers.\r\n     * @see _.inRange, _.rangeRight\r\n     * @example\r\n     *\r\n     * _.range(4);\r\n     * // => [0, 1, 2, 3]\r\n     *\r\n     * _.range(-4);\r\n     * // => [0, -1, -2, -3]\r\n     *\r\n     * _.range(1, 5);\r\n     * // => [1, 2, 3, 4]\r\n     *\r\n     * _.range(0, 20, 5);\r\n     * // => [0, 5, 10, 15]\r\n     *\r\n     * _.range(0, -4, -1);\r\n     * // => [0, -1, -2, -3]\r\n     *\r\n     * _.range(1, 4, 0);\r\n     * // => [1, 1, 1]\r\n     *\r\n     * _.range(0);\r\n     * // => []\r\n     */\r\n    var range = createRange();\r\n\r\n    /**\r\n     * This method returns a new empty array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.13.0\r\n     * @category Util\r\n     * @returns {Array} Returns the new empty array.\r\n     * @example\r\n     *\r\n     * var arrays = _.times(2, _.stubArray);\r\n     *\r\n     * console.log(arrays);\r\n     * // => [[], []]\r\n     *\r\n     * console.log(arrays[0] === arrays[1]);\r\n     * // => false\r\n     */\r\n    function stubArray() {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * This method returns `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.13.0\r\n     * @category Util\r\n     * @returns {boolean} Returns `false`.\r\n     * @example\r\n     *\r\n     * _.times(2, _.stubFalse);\r\n     * // => [false, false]\r\n     */\r\n    function stubFalse() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {string} [prefix=''] The value to prefix the ID with.\r\n     * @returns {string} Returns the unique ID.\r\n     * @example\r\n     *\r\n     * _.uniqueId('contact_');\r\n     * // => 'contact_104'\r\n     *\r\n     * _.uniqueId();\r\n     * // => '105'\r\n     */\r\n    function uniqueId(prefix) {\r\n        var id = ++idCounter;\r\n        return toString(prefix) + id;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\r\n     * `undefined` is returned.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Math\r\n     * @param {Array} array The array to iterate over.\r\n     * @returns {*} Returns the maximum value.\r\n     * @example\r\n     *\r\n     * _.max([4, 2, 8, 6]);\r\n     * // => 8\r\n     *\r\n     * _.max([]);\r\n     * // => undefined\r\n     */\r\n    function max(array) {\r\n        return (array && array.length)\r\n            ? baseExtremum(array, identity, baseGt)\r\n            : undefined;\r\n    }\r\n\r\n    /**\r\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\r\n     * `undefined` is returned.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Math\r\n     * @param {Array} array The array to iterate over.\r\n     * @returns {*} Returns the minimum value.\r\n     * @example\r\n     *\r\n     * _.min([4, 2, 8, 6]);\r\n     * // => 2\r\n     *\r\n     * _.min([]);\r\n     * // => undefined\r\n     */\r\n    function min(array) {\r\n        return (array && array.length)\r\n            ? baseExtremum(array, identity, baseLt)\r\n            : undefined;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    // Add methods that return wrapped values in chain sequences.\r\n    lodash.after = after;\r\n    lodash.assignIn = assignIn;\r\n    lodash.before = before;\r\n    lodash.bind = bind;\r\n    lodash.chain = chain;\r\n    lodash.chunk = chunk;\r\n    lodash.compact = compact;\r\n    lodash.concat = concat;\r\n    lodash.countBy = countBy;\r\n    lodash.create = create;\r\n    lodash.debounce = debounce;\r\n    lodash.defaults = defaults;\r\n    lodash.defaultsDeep = defaultsDeep;\r\n    lodash.defer = defer;\r\n    lodash.delay = delay;\r\n    lodash.difference = difference;\r\n    lodash.drop = drop;\r\n    lodash.filter = filter;\r\n    lodash.flatten = flatten;\r\n    lodash.flattenDeep = flattenDeep;\r\n    lodash.groupBy = groupBy;\r\n    lodash.initial = initial;\r\n    lodash.intersection = intersection;\r\n    lodash.invert = invert;\r\n    lodash.invertBy = invertBy;\r\n    lodash.iteratee = iteratee;\r\n    lodash.keys = keys;\r\n    lodash.map = map;\r\n    lodash.matches = matches;\r\n    lodash.merge = merge;\r\n    lodash.mixin = mixin;\r\n    lodash.negate = negate;\r\n    lodash.omit = omit;\r\n    lodash.omitBy = omitBy;\r\n    lodash.once = once;\r\n    lodash.pick = pick;\r\n    lodash.pickBy = pickBy;\r\n    lodash.range = range;\r\n    lodash.reject = reject;\r\n    lodash.rest = rest;\r\n    lodash.set = set;\r\n    lodash.slice = slice;\r\n    lodash.sortBy = sortBy;\r\n    lodash.take = take;\r\n    lodash.takeRight = takeRight;\r\n    lodash.tap = tap;\r\n    lodash.throttle = throttle;\r\n    lodash.thru = thru;\r\n    lodash.toArray = toArray;\r\n    lodash.union = union;\r\n    lodash.uniq = uniq;\r\n    lodash.uniqBy = uniqBy;\r\n    lodash.unzip = unzip;\r\n    lodash.values = values;\r\n    lodash.without = without;\r\n    lodash.zip = zip;\r\n    lodash.zipObject = zipObject;\r\n\r\n    // Add aliases.\r\n    lodash.extend = assignIn;\r\n\r\n    // Add methods to `lodash.prototype`.\r\n    mixin(lodash, lodash);\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    // Add methods that return unwrapped values in chain sequences.\r\n    lodash.clamp = clamp;\r\n    lodash.clone = clone;\r\n    lodash.cloneDeep = cloneDeep;\r\n    lodash.escape = escape;\r\n    lodash.every = every;\r\n    lodash.find = find;\r\n    lodash.findIndex = findIndex;\r\n    lodash.findKey = findKey;\r\n    lodash.findLastIndex = findLastIndex;\r\n    lodash.findLastKey = findLastKey;\r\n    lodash.forEach = forEach;\r\n    lodash.get = get;\r\n    lodash.has = has;\r\n    lodash.head = head;\r\n    lodash.identity = identity;\r\n    lodash.indexOf = indexOf;\r\n    lodash.isArguments = isArguments;\r\n    lodash.isArray = isArray;\r\n    lodash.isArrayLike = isArrayLike;\r\n    lodash.isBoolean = isBoolean;\r\n    lodash.isDate = isDate;\r\n    lodash.isEmpty = isEmpty;\r\n    lodash.isEqual = isEqual;\r\n    lodash.isFinite = isFinite;\r\n    lodash.isFunction = isFunction;\r\n    lodash.isNaN = isNaN;\r\n    lodash.isNull = isNull;\r\n    lodash.isNumber = isNumber;\r\n    lodash.isObject = isObject;\r\n    lodash.isPlainObject = isPlainObject;\r\n    lodash.isRegExp = isRegExp;\r\n    lodash.isString = isString;\r\n    lodash.isUndefined = isUndefined;\r\n    lodash.last = last;\r\n    lodash.max = max;\r\n    lodash.min = min;\r\n    lodash.noConflict = noConflict;\r\n    lodash.noop = noop;\r\n    lodash.random = random;\r\n    lodash.reduce = reduce;\r\n    lodash.result = result;\r\n    lodash.size = size;\r\n    lodash.some = some;\r\n    lodash.trim = trim;\r\n    lodash.unescape = unescape;\r\n    lodash.uniqueId = uniqueId;\r\n\r\n    // Add aliases.\r\n    lodash.each = forEach;\r\n    lodash.first = head;\r\n\r\n    mixin(lodash, (function() {\r\n        var source = {};\r\n        baseForOwn(lodash, function(func, methodName) {\r\n            if (!hasOwnProperty.call(lodash.prototype, methodName)) {\r\n                source[methodName] = func;\r\n            }\r\n        });\r\n        return source;\r\n    }()), { 'chain': false });\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * The semantic version number.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @type {string}\r\n     */\r\n    lodash.VERSION = VERSION;\r\n\r\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\r\n    arrayEach(['drop', 'take'], function(methodName, index) {\r\n        LazyWrapper.prototype[methodName] = function(n) {\r\n            n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\r\n\r\n            var result = (this.__filtered__ && !index)\r\n                ? new LazyWrapper(this)\r\n                : this.clone();\r\n\r\n            if (result.__filtered__) {\r\n                result.__takeCount__ = nativeMin(n, result.__takeCount__);\r\n            } else {\r\n                result.__views__.push({\r\n                    'size': nativeMin(n, MAX_ARRAY_LENGTH),\r\n                    'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\r\n                });\r\n            }\r\n            return result;\r\n        };\r\n\r\n        LazyWrapper.prototype[methodName + 'Right'] = function(n) {\r\n            return this.reverse()[methodName](n).reverse();\r\n        };\r\n    });\r\n\r\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\r\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\r\n        var type = index + 1,\r\n            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\r\n\r\n        LazyWrapper.prototype[methodName] = function(iteratee) {\r\n            var result = this.clone();\r\n            result.__iteratees__.push({\r\n                'iteratee': getIteratee(iteratee, 3),\r\n                'type': type\r\n            });\r\n            result.__filtered__ = result.__filtered__ || isFilter;\r\n            return result;\r\n        };\r\n    });\r\n\r\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\r\n    arrayEach(['head', 'last'], function(methodName, index) {\r\n        var takeName = 'take' + (index ? 'Right' : '');\r\n\r\n        LazyWrapper.prototype[methodName] = function() {\r\n            return this[takeName](1).value()[0];\r\n        };\r\n    });\r\n\r\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\r\n    arrayEach(['initial', 'tail'], function(methodName, index) {\r\n        var dropName = 'drop' + (index ? '' : 'Right');\r\n\r\n        LazyWrapper.prototype[methodName] = function() {\r\n            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\r\n        };\r\n    });\r\n\r\n    LazyWrapper.prototype.compact = function() {\r\n        return this.filter(identity);\r\n    };\r\n\r\n    LazyWrapper.prototype.find = function(predicate) {\r\n        return this.filter(predicate).head();\r\n    };\r\n\r\n    LazyWrapper.prototype.findLast = function(predicate) {\r\n        return this.reverse().find(predicate);\r\n    };\r\n\r\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\r\n        if (typeof path == 'function') {\r\n            return new LazyWrapper(this);\r\n        }\r\n        return this.map(function(value) {\r\n            return baseInvoke(value, path, args);\r\n        });\r\n    });\r\n\r\n    LazyWrapper.prototype.reject = function(predicate) {\r\n        return this.filter(negate(getIteratee(predicate)));\r\n    };\r\n\r\n    LazyWrapper.prototype.slice = function(start, end) {\r\n        start = toInteger(start);\r\n\r\n        var result = this;\r\n        if (result.__filtered__ && (start > 0 || end < 0)) {\r\n            return new LazyWrapper(result);\r\n        }\r\n        if (start < 0) {\r\n            result = result.takeRight(-start);\r\n        } else if (start) {\r\n            result = result.drop(start);\r\n        }\r\n        if (end !== undefined) {\r\n            end = toInteger(end);\r\n            result = end < 0 ? result.dropRight(-end) : result.take(end - start);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\r\n        return this.reverse().takeWhile(predicate).reverse();\r\n    };\r\n\r\n    LazyWrapper.prototype.toArray = function() {\r\n        return this.take(MAX_ARRAY_LENGTH);\r\n    };\r\n\r\n    // Add `LazyWrapper` methods to `lodash.prototype`.\r\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\r\n        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\r\n            isTaker = /^(?:head|last)$/.test(methodName),\r\n            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\r\n            retUnwrapped = isTaker || /^find/.test(methodName);\r\n\r\n        if (!lodashFunc) {\r\n            return;\r\n        }\r\n        lodash.prototype[methodName] = function() {\r\n            var value = this.__wrapped__,\r\n                args = isTaker ? [1] : arguments,\r\n                isLazy = value instanceof LazyWrapper,\r\n                iteratee = args[0],\r\n                useLazy = isLazy || isArray(value);\r\n\r\n            var interceptor = function(value) {\r\n                var result = lodashFunc.apply(lodash, arrayPush([value], args));\r\n                return (isTaker && chainAll) ? result[0] : result;\r\n            };\r\n\r\n            if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\r\n                // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\r\n                isLazy = useLazy = false;\r\n            }\r\n            var chainAll = this.__chain__,\r\n                isHybrid = !!this.__actions__.length,\r\n                isUnwrapped = retUnwrapped && !chainAll,\r\n                onlyLazy = isLazy && !isHybrid;\r\n\r\n            if (!retUnwrapped && useLazy) {\r\n                value = onlyLazy ? value : new LazyWrapper(this);\r\n                var result = func.apply(value, args);\r\n                result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\r\n                return new LodashWrapper(result, chainAll);\r\n            }\r\n            if (isUnwrapped && onlyLazy) {\r\n                return func.apply(this, args);\r\n            }\r\n            result = this.thru(interceptor);\r\n            return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\r\n        };\r\n    });\r\n\r\n    // Add `Array` methods to `lodash.prototype`.\r\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\r\n        var func = arrayProto[methodName],\r\n            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\r\n            retUnwrapped = /^(?:pop|shift)$/.test(methodName);\r\n\r\n        lodash.prototype[methodName] = function() {\r\n            var args = arguments;\r\n            if (retUnwrapped && !this.__chain__) {\r\n                var value = this.value();\r\n                return func.apply(isArray(value) ? value : [], args);\r\n            }\r\n            return this[chainName](function(value) {\r\n                return func.apply(isArray(value) ? value : [], args);\r\n            });\r\n        };\r\n    });\r\n\r\n    // Map minified method names to their real names.\r\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\r\n        var lodashFunc = lodash[methodName];\r\n        if (lodashFunc) {\r\n            var key = (lodashFunc.name + ''),\r\n                names = realNames[key] || (realNames[key] = []);\r\n\r\n            names.push({ 'name': methodName, 'func': lodashFunc });\r\n        }\r\n    });\r\n\r\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\r\n        'name': 'wrapper',\r\n        'func': undefined\r\n    }];\r\n\r\n    // Add methods to `LazyWrapper`.\r\n    LazyWrapper.prototype.clone = lazyClone;\r\n    LazyWrapper.prototype.reverse = lazyReverse;\r\n    LazyWrapper.prototype.value = lazyValue;\r\n\r\n    // Add lazy aliases.\r\n    lodash.prototype.first = lodash.prototype.head;\r\n\r\n    if (symIterator) {\r\n        lodash.prototype[symIterator] = wrapperToIterator;\r\n    }\r\n\r\n    /*--------------------------------------------------------------------------*/\r\n\r\n    // Some AMD build optimizers, like r.js, check for condition patterns like:\r\n    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\r\n        // Expose Lodash on the global object to prevent errors when Lodash is\r\n        // loaded by a script tag in the presence of an AMD loader.\r\n        // See http://requirejs.org/docs/errors.html#mismatch for more details.\r\n        // Use `_.noConflict` to remove Lodash from the global object.\r\n        root._ = lodash;\r\n\r\n        // Define as an anonymous module so, through path mapping, it can be\r\n        // referenced as the \"underscore\" module.\r\n        define(function() {\r\n            return lodash;\r\n        });\r\n    }\r\n    // Check for `exports` after `define` in case a build optimizer adds it.\r\n    else if (freeModule) {\r\n        // Export for Node.js.\r\n        (freeModule.exports = lodash)._ = lodash;\r\n        // Export for CommonJS support.\r\n        freeExports._ = lodash;\r\n    }\r\n    else {\r\n        // Export to the global object.\r\n        BI._ = lodash;\r\n    }\r\n}.call(this));\r\n"

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(setImmediate) {/**
 * 基本函数
 * Create By GUY 2014\11\17
 *
 */
!function (undefined) {
  var traverse = function traverse(func, context) {
    return function (value, key, obj) {
      return func.call(context, key, value, obj);
    };
  };

  var _apply = function _apply(name) {
    return function () {
      return BI._[name].apply(BI._, arguments);
    };
  };

  var _applyFunc = function _applyFunc(name) {
    return function () {
      var args = Array.prototype.slice.call(arguments, 0);
      args[1] = BI._.isFunction(args[1]) ? traverse(args[1], args[2]) : args[1];
      return BI._[name].apply(BI._, args);
    };
  }; // Utility


  BI._.extend(BI, {
    assert: function assert(v, is) {
      if (this.isFunction(is)) {
        if (!is(v)) {
          throw new Error(v + " error");
        } else {
          return true;
        }
      }

      if (!this.isArray(is)) {
        is = [is];
      }

      if (!this.deepContains(is, v)) {
        throw new Error(v + " error");
      }

      return true;
    },
    warn: function warn(message) {
      console.warn(message);
    },
    UUID: function UUID() {
      var f = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
      var str = "";

      for (var i = 0; i < 16; i++) {
        var r = parseInt(f.length * Math.random(), 10);
        str += f[r];
      }

      return str;
    },
    isWidget: function isWidget(widget) {
      return widget instanceof BI.Widget;
    },
    createWidgets: function createWidgets(items, options, context) {
      if (!BI.isArray(items)) {
        throw new Error("items必须是数组", items);
      }

      if (BI.isWidget(options)) {
        context = options;
        options = {};
      } else {
        options || (options = {});
      }

      return BI.map(BI.flatten(items), function (i, item) {
        return BI.createWidget(item, BI.deepClone(options), context);
      });
    },
    createItems: function createItems(data, innerAttr, outerAttr) {
      innerAttr = BI.isArray(innerAttr) ? innerAttr : BI.makeArray(BI.flatten(data).length, innerAttr || {});
      outerAttr = BI.isArray(outerAttr) ? outerAttr : BI.makeArray(BI.flatten(data).length, outerAttr || {});
      return BI.map(data, function (i, item) {
        if (BI.isArray(item)) {
          return BI.createItems(item, innerAttr, outerAttr);
        }

        if (item instanceof BI.Widget) {
          return BI.extend({}, innerAttr.shift(), outerAttr.shift(), {
            type: null,
            el: item
          });
        }

        if (innerAttr[0] instanceof BI.Widget) {
          outerAttr.shift();
          return BI.extend({}, item, {
            el: innerAttr.shift()
          });
        }

        if (item.el instanceof BI.Widget) {
          innerAttr.shift();
          return BI.extend({}, outerAttr.shift(), {
            type: null
          }, item);
        }

        if (item.el) {
          return BI.extend({}, outerAttr.shift(), item, {
            el: BI.extend({}, innerAttr.shift(), item.el)
          });
        }

        return BI.extend({}, outerAttr.shift(), {
          el: BI.extend({}, innerAttr.shift(), item)
        });
      });
    },
    // 用容器包装items
    packageItems: function packageItems(items, layouts) {
      for (var i = layouts.length - 1; i >= 0; i--) {
        items = BI.map(items, function (k, it) {
          return BI.extend({}, layouts[i], {
            items: [BI.extend({}, layouts[i].el, {
              el: it
            })]
          });
        });
      }

      return items;
    },
    formatEL: function formatEL(obj) {
      if (obj && !obj.type && obj.el) {
        return obj;
      }

      return {
        el: obj
      };
    },
    // 剥开EL
    stripEL: function stripEL(obj) {
      return obj.type && obj || obj.el || obj;
    },
    trans2Element: function trans2Element(widgets) {
      return BI.map(widgets, function (i, wi) {
        return wi.element;
      });
    }
  }); // 集合相关方法


  BI._.each(["where", "findWhere", "invoke", "pluck", "shuffle", "sample", "toArray", "size"], function (name) {
    BI[name] = _apply(name);
  });

  BI._.each(["get", "set", "each", "map", "reduce", "reduceRight", "find", "filter", "reject", "every", "all", "some", "any", "max", "min", "sortBy", "groupBy", "indexBy", "countBy", "partition", "clamp"], function (name) {
    if (name === "any") {
      BI[name] = _applyFunc("some");
    } else {
      BI[name] = _applyFunc(name);
    }
  });

  BI._.extend(BI, {
    // 数数
    count: function count(from, to, predicate) {
      var t;

      if (predicate) {
        for (t = from; t < to; t++) {
          predicate(t);
        }
      }

      return to - from;
    },
    // 倒数
    inverse: function inverse(from, to, predicate) {
      return BI.count(to, from, predicate);
    },
    firstKey: function firstKey(obj) {
      var res = undefined;
      BI.any(obj, function (key, value) {
        res = key;
        return true;
      });
      return res;
    },
    lastKey: function lastKey(obj) {
      var res = undefined;
      BI.each(obj, function (key, value) {
        res = key;
        return true;
      });
      return res;
    },
    firstObject: function firstObject(obj) {
      var res = undefined;
      BI.any(obj, function (key, value) {
        res = value;
        return true;
      });
      return res;
    },
    lastObject: function lastObject(obj) {
      var res = undefined;
      BI.each(obj, function (key, value) {
        res = value;
        return true;
      });
      return res;
    },
    concat: function concat(obj1, obj2) {
      if (BI.isKey(obj1)) {
        return BI.map([].slice.apply(arguments), function (idx, v) {
          return v;
        }).join("");
      }

      if (BI.isArray(obj1)) {
        return BI._.concat.apply([], arguments);
      }

      if (BI.isObject(obj1)) {
        return BI._.extend.apply({}, arguments);
      }
    },
    backEach: function backEach(obj, predicate, context) {
      predicate = BI.iteratee(predicate, context);

      for (var index = obj.length - 1; index >= 0; index--) {
        predicate(index, obj[index], obj);
      }

      return false;
    },
    backAny: function backAny(obj, predicate, context) {
      predicate = BI.iteratee(predicate, context);

      for (var index = obj.length - 1; index >= 0; index--) {
        if (predicate(index, obj[index], obj)) {
          return true;
        }
      }

      return false;
    },
    backEvery: function backEvery(obj, predicate, context) {
      predicate = BI.iteratee(predicate, context);

      for (var index = obj.length - 1; index >= 0; index--) {
        if (!predicate(index, obj[index], obj)) {
          return false;
        }
      }

      return true;
    },
    backFindKey: function backFindKey(obj, predicate, context) {
      predicate = BI.iteratee(predicate, context);

      var keys = BI._.keys(obj),
          key;

      for (var i = keys.length - 1; i >= 0; i--) {
        key = keys[i];

        if (predicate(obj[key], key, obj)) {
          return key;
        }
      }
    },
    backFind: function backFind(obj, predicate, context) {
      var key;

      if (BI.isArray(obj)) {
        key = BI.findLastIndex(obj, predicate, context);
      } else {
        key = BI.backFindKey(obj, predicate, context);
      }

      if (key !== void 0 && key !== -1) {
        return obj[key];
      }
    },
    remove: function remove(obj, target, context) {
      var isFunction = BI.isFunction(target);
      target = isFunction || BI.isArray(target) ? target : [target];
      var i;

      if (BI.isArray(obj)) {
        for (i = 0; i < obj.length; i++) {
          if (isFunction && (target === obj[i] || target.apply(context, [i, obj[i]]) === true) || !isFunction && BI.contains(target, obj[i])) {
            obj.splice(i--, 1);
          }
        }
      } else {
        BI.each(obj, function (i, v) {
          if (isFunction && (target === obj[i] || target.apply(context, [i, obj[i]]) === true) || !isFunction && BI.contains(target, obj[i])) {
            delete obj[i];
          }
        });
      }
    },
    removeAt: function removeAt(obj, index) {
      index = BI.isArray(index) ? index : [index];
      var isArray = BI.isArray(obj),
          i;

      for (i = 0; i < index.length; i++) {
        if (isArray) {
          obj[index[i]] = "$deleteIndex";
        } else {
          delete obj[index[i]];
        }
      }

      if (isArray) {
        BI.remove(obj, "$deleteIndex");
      }
    },
    string2Array: function string2Array(str) {
      return str.split("&-&");
    },
    array2String: function array2String(array) {
      return array.join("&-&");
    },
    abc2Int: function abc2Int(str) {
      var idx = 0,
          start = "A",
          str = str.toUpperCase();

      for (var i = 0, len = str.length; i < len; ++i) {
        idx = str.charAt(i).charCodeAt(0) - start.charCodeAt(0) + 26 * idx + 1;

        if (idx > (2147483646 - str.charAt(i).charCodeAt(0) + start.charCodeAt(0)) / 26) {
          return 0;
        }
      }

      return idx;
    },
    int2Abc: function int2Abc(num) {
      var DIGITS = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
      var idx = num,
          str = "";

      if (num === 0) {
        return "";
      }

      while (idx !== 0) {
        var t = idx % 26;

        if (t === 0) {
          t = 26;
        }

        str = DIGITS[t - 1] + str;
        idx = (idx - t) / 26;
      }

      return str;
    }
  }); // 数组相关的方法


  BI._.each(["first", "initial", "last", "rest", "compact", "flatten", "without", "union", "intersection", "difference", "zip", "unzip", "object", "indexOf", "lastIndexOf", "sortedIndex", "range", "take", "takeRight", "uniqBy"], function (name) {
    BI[name] = _apply(name);
  });

  BI._.each(["findIndex", "findLastIndex"], function (name) {
    BI[name] = _applyFunc(name);
  });

  BI._.extend(BI, {
    // 构建一个长度为length的数组
    makeArray: function makeArray(length, value) {
      var res = [];

      for (var i = 0; i < length; i++) {
        if (BI.isNull(value)) {
          res.push(i);
        } else {
          res.push(BI.deepClone(value));
        }
      }

      return res;
    },
    makeObject: function makeObject(array, value) {
      var map = {};

      for (var i = 0; i < array.length; i++) {
        if (BI.isNull(value)) {
          map[array[i]] = array[i];
        } else if (BI.isFunction(value)) {
          map[array[i]] = value(i, array[i]);
        } else {
          map[array[i]] = BI.deepClone(value);
        }
      }

      return map;
    },
    makeArrayByArray: function makeArrayByArray(array, value) {
      var res = [];

      if (!array) {
        return res;
      }

      for (var i = 0, len = array.length; i < len; i++) {
        if (BI.isArray(array[i])) {
          res.push(BI.makeArrayByArray(array[i], value));
        } else {
          res.push(BI.deepClone(value));
        }
      }

      return res;
    },
    uniq: function uniq(array, isSorted, iteratee, context) {
      if (array == null) {
        return [];
      }

      if (!BI._.isBoolean(isSorted)) {
        context = iteratee;
        iteratee = isSorted;
        isSorted = false;
      }

      iteratee && (iteratee = traverse(iteratee, context));
      return BI._.uniq.call(BI._, array, isSorted, iteratee, context);
    }
  }); // 对象相关方法


  BI._.each(["keys", "allKeys", "values", "pairs", "invert", "create", "functions", "extend", "extendOwn", "defaults", "clone", "property", "propertyOf", "matcher", "isEqual", "isMatch", "isEmpty", "isElement", "isNumber", "isString", "isArray", "isObject", "isPlainObject", "isArguments", "isFunction", "isFinite", "isBoolean", "isDate", "isRegExp", "isError", "isNaN", "isUndefined", "zipObject", "cloneDeep"], function (name) {
    BI[name] = _apply(name);
  });

  BI._.each(["mapObject", "findKey", "pick", "omit", "tap"], function (name) {
    BI[name] = _applyFunc(name);
  });

  BI._.extend(BI, {
    inherit: function inherit(sp, overrides) {
      var sb = function sb() {
        return sp.apply(this, arguments);
      };

      var F = function F() {},
          spp = sp.prototype;

      F.prototype = spp;
      sb.prototype = new F();
      sb.superclass = spp;

      BI._.extend(sb.prototype, overrides, {
        superclass: sp
      });

      return sb;
    },
    init: function init() {
      // 先把准备环境准备好
      while (BI.prepares && BI.prepares.length > 0) {
        BI.prepares.shift()();
      }

      while (_global.___fineuiExposedFunction && _global.___fineuiExposedFunction.length > 0) {
        _global.___fineuiExposedFunction.shift()();
      }

      BI.initialized = true;
    },
    has: function has(obj, keys) {
      if (BI.isArray(keys)) {
        if (keys.length === 0) {
          return false;
        }

        return BI.every(keys, function (i, key) {
          return BI._.has(obj, key);
        });
      }

      return BI._.has.apply(BI._, arguments);
    },
    freeze: function freeze(value) {
      // 在ES5中，如果这个方法的参数不是一个对象（一个原始值），那么它会导致 TypeError
      // 在ES2015中，非对象参数将被视为要被冻结的普通对象，并被简单地返回
      if (Object.freeze && BI.isObject(value)) {
        return Object.freeze(value);
      }

      return value;
    },
    // 数字和字符串可以作为key
    isKey: function isKey(key) {
      return BI.isNumber(key) || BI.isString(key) && key.length > 0;
    },
    // 忽略大小写的等于
    isCapitalEqual: function isCapitalEqual(a, b) {
      a = BI.isNull(a) ? a : ("" + a).toLowerCase();
      b = BI.isNull(b) ? b : ("" + b).toLowerCase();
      return BI.isEqual(a, b);
    },
    isWidthOrHeight: function isWidthOrHeight(w) {
      if (typeof w === "number") {
        return w >= 0;
      } else if (typeof w === "string") {
        return /^\d{1,3}(\.\d)?%$/.test(w) || w === "auto" || /^\d+(\.\d+)?px$/.test(w) || /^calc/.test(w);
      }
    },
    isNotNull: function isNotNull(obj) {
      return !BI.isNull(obj);
    },
    isNull: function isNull(obj) {
      return typeof obj === "undefined" || obj === null;
    },
    isEmptyArray: function isEmptyArray(arr) {
      return BI.isArray(arr) && BI.isEmpty(arr);
    },
    isNotEmptyArray: function isNotEmptyArray(arr) {
      return BI.isArray(arr) && !BI.isEmpty(arr);
    },
    isEmptyObject: function isEmptyObject(obj) {
      return BI.isEqual(obj, {});
    },
    isNotEmptyObject: function isNotEmptyObject(obj) {
      return BI.isPlainObject(obj) && !BI.isEmptyObject(obj);
    },
    isEmptyString: function isEmptyString(obj) {
      return BI.isString(obj) && obj.length === 0;
    },
    isNotEmptyString: function isNotEmptyString(obj) {
      return BI.isString(obj) && !BI.isEmptyString(obj);
    },
    isWindow: function isWindow(obj) {
      return obj != null && obj == obj.window;
    },
    isPromise: function isPromise(obj) {
      return !!obj && (BI.isObject(obj) || BI.isFunction(obj)) && BI.isFunction(obj.then);
    }
  }); // deep方法


  BI._.extend(BI, {
    deepClone: BI._.cloneDeep,
    deepExtend: BI._.merge,
    isDeepMatch: function isDeepMatch(object, attrs) {
      var keys = BI.keys(attrs),
          length = keys.length;

      if (object == null) {
        return !length;
      }

      var obj = Object(object);

      for (var i = 0; i < length; i++) {
        var key = keys[i];

        if (!BI.isEqual(attrs[key], obj[key]) || !(key in obj)) {
          return false;
        }
      }

      return true;
    },
    contains: function contains(obj, target, fromIndex) {
      if (!BI._.isArrayLike(obj)) obj = BI._.values(obj);
      return BI._.indexOf(obj, target, typeof fromIndex === "number" && fromIndex) >= 0;
    },
    deepContains: function deepContains(obj, copy) {
      if (BI.isObject(copy)) {
        return BI.any(obj, function (i, v) {
          if (BI.isEqual(v, copy)) {
            return true;
          }
        });
      }

      return BI.contains(obj, copy);
    },
    deepIndexOf: function deepIndexOf(obj, target) {
      for (var i = 0; i < obj.length; i++) {
        if (BI.isEqual(target, obj[i])) {
          return i;
        }
      }

      return -1;
    },
    deepRemove: function deepRemove(obj, target) {
      var done = false;
      var i;

      if (BI.isArray(obj)) {
        for (i = 0; i < obj.length; i++) {
          if (BI.isEqual(target, obj[i])) {
            obj.splice(i--, 1);
            done = true;
          }
        }
      } else {
        BI.each(obj, function (i, v) {
          if (BI.isEqual(target, obj[i])) {
            delete obj[i];
            done = true;
          }
        });
      }

      return done;
    },
    deepWithout: function deepWithout(obj, target) {
      if (BI.isArray(obj)) {
        var result = [];

        for (var i = 0; i < obj.length; i++) {
          if (!BI.isEqual(target, obj[i])) {
            result.push(obj[i]);
          }
        }

        return result;
      }

      var result = {};
      BI.each(obj, function (i, v) {
        if (!BI.isEqual(target, obj[i])) {
          result[i] = v;
        }
      });
      return result;
    },
    deepUnique: function deepUnique(array) {
      var result = [];
      BI.each(array, function (i, item) {
        if (!BI.deepContains(result, item)) {
          result.push(item);
        }
      });
      return result;
    },
    // 比较两个对象得出不一样的key值
    deepDiff: function deepDiff(object, other) {
      object || (object = {});
      other || (other = {});
      var result = [];
      var used = [];

      for (var b in object) {
        if (this.has(object, b)) {
          if (!this.isEqual(object[b], other[b])) {
            result.push(b);
          }

          used.push(b);
        }
      }

      for (var b in other) {
        if (this.has(other, b) && !BI.contains(used, b)) {
          result.push(b);
        }
      }

      return result;
    }
  }); // 通用方法


  BI._.each(["uniqueId", "result", "chain", "iteratee", "escape", "unescape", "before", "after", "chunk"], function (name) {
    BI[name] = function () {
      return BI._[name].apply(BI._, arguments);
    };
  }); // 事件相关方法


  BI._.each(["bind", "once", "partial", "debounce", "throttle", "delay", "defer", "wrap"], function (name) {
    BI[name] = function () {
      return BI._[name].apply(BI._, arguments);
    };
  });

  BI._.extend(BI, {
    nextTick: function () {
      var callbacks = [];
      var pending = false;
      var timerFunc = void 0;

      function nextTickHandler() {
        pending = false;
        var copies = callbacks.slice(0);
        callbacks.length = 0;

        for (var i = 0; i < copies.length; i++) {
          copies[i]();
        }
      }

      if (typeof Promise !== "undefined") {
        var p = Promise.resolve();

        timerFunc = function timerFunc() {
          p.then(nextTickHandler);
        };
      } else if (typeof MutationObserver !== "undefined") {
        var counter = 1;
        var observer = new MutationObserver(nextTickHandler);
        var textNode = document.createTextNode(String(counter));
        observer.observe(textNode, {
          characterData: true
        });

        timerFunc = function timerFunc() {
          counter = (counter + 1) % 2;
          textNode.data = String(counter);
        };
      } else if (typeof setImmediate !== "undefined") {
        timerFunc = function timerFunc() {
          setImmediate(nextTickHandler);
        };
      } else {
        // Fallback to setTimeout.
        timerFunc = function timerFunc() {
          setTimeout(nextTickHandler, 0);
        };
      }

      return function queueNextTick(cb) {
        var _resolve = void 0;

        var args = [].slice.call(arguments, 1);
        callbacks.push(function () {
          if (cb) {
            try {
              cb.apply(null, args);
            } catch (e) {
              console.error(e);
            }
          } else if (_resolve) {
            _resolve.apply(null, args);
          }
        });

        if (!pending) {
          pending = true;
          timerFunc();
        } // $flow-disable-line


        if (!cb && typeof Promise !== 'undefined') {
          return new Promise(function (resolve, reject) {
            _resolve = resolve;
          });
        }
      };
    }()
  }); // 数字相关方法


  BI._.each(["random"], function (name) {
    BI[name] = _apply(name);
  });

  BI._.extend(BI, {
    parseInt: function (_parseInt) {
      function parseInt(_x) {
        return _parseInt.apply(this, arguments);
      }

      parseInt.toString = function () {
        return _parseInt.toString();
      };

      return parseInt;
    }(function (number) {
      var radix = 10;

      if (/^0x/g.test(number)) {
        radix = 16;
      }

      try {
        return parseInt(number, radix);
      } catch (e) {
        throw new Error(number + "parse int error");
        return NaN;
      }
    }),
    parseSafeInt: function parseSafeInt(value) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      return value ? this.clamp(this.parseInt(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
    },
    parseFloat: function (_parseFloat) {
      function parseFloat(_x2) {
        return _parseFloat.apply(this, arguments);
      }

      parseFloat.toString = function () {
        return _parseFloat.toString();
      };

      return parseFloat;
    }(function (number) {
      try {
        return parseFloat(number);
      } catch (e) {
        throw new Error(number + "parse float error");
        return NaN;
      }
    }),
    isNaturalNumber: function isNaturalNumber(number) {
      if (/^\d+$/.test(number)) {
        return true;
      }

      return false;
    },
    isPositiveInteger: function isPositiveInteger(number) {
      if (/^\+?[1-9][0-9]*$/.test(number)) {
        return true;
      }

      return false;
    },
    isNegativeInteger: function isNegativeInteger(number) {
      if (/^\-[1-9][0-9]*$/.test(number)) {
        return true;
      }

      return false;
    },
    isInteger: function isInteger(number) {
      if (/^\-?\d+$/.test(number)) {
        return true;
      }

      return false;
    },
    isNumeric: function isNumeric(number) {
      return !isNaN(parseFloat(number)) && isFinite(number);
    },
    isFloat: function isFloat(number) {
      if (/^([+-]?)\d*\.\d+$/.test(number)) {
        return true;
      }

      return false;
    },
    isOdd: function isOdd(number) {
      if (!BI.isInteger(number)) {
        return false;
      }

      return (number & 1) === 1;
    },
    isEven: function isEven(number) {
      if (!BI.isInteger(number)) {
        return false;
      }

      return (number & 1) === 0;
    },
    sum: function sum(array, iteratee, context) {
      var sum = 0;
      BI.each(array, function (i, item) {
        if (iteratee) {
          sum += Number(iteratee.apply(context, [i, item]));
        } else {
          sum += Number(item);
        }
      });
      return sum;
    },
    average: function average(array, iteratee, context) {
      var sum = BI.sum(array, iteratee, context);
      return sum / array.length;
    }
  }); // 字符串相关方法


  BI._.extend(BI, {
    trim: function trim() {
      return BI._.trim.apply(BI._, arguments);
    },
    toUpperCase: function toUpperCase(string) {
      return (string + "").toLocaleUpperCase();
    },
    toLowerCase: function toLowerCase(string) {
      return (string + "").toLocaleLowerCase();
    },
    isEndWithBlank: function isEndWithBlank(string) {
      return /(\s|\u00A0)$/.test(string);
    },
    isLiteral: function isLiteral(exp) {
      var literalValueRE = /^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/;
      return literalValueRE.test(exp);
    },
    stripQuotes: function stripQuotes(str) {
      var a = str.charCodeAt(0);
      var b = str.charCodeAt(str.length - 1);
      return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;
    },
    // background-color => backgroundColor
    camelize: function camelize(str) {
      return str.replace(/-(.)/g, function (_, character) {
        return character.toUpperCase();
      });
    },
    // backgroundColor => background-color
    hyphenate: function hyphenate(str) {
      return str.replace(/([A-Z])/g, "-$1").toLowerCase();
    },
    isNotEmptyString: function isNotEmptyString(str) {
      return BI.isString(str) && !BI.isEmpty(str);
    },
    isEmptyString: function isEmptyString(str) {
      return BI.isString(str) && BI.isEmpty(str);
    },

    /**
     * 通用加密方法
     */
    encrypt: function encrypt(type, text, key) {
      switch (type) {
        case BI.CRYPT_TYPE.AES:
        default:
          return BI.aesEncrypt(text, key);
      }
    },

    /**
     * 通用解密方法
     * @param type 解密方式
     * @param text 文本
     * @param key 种子
     * @return {*}
     */
    decrypt: function decrypt(type, text, key) {
      switch (type) {
        case BI.CRYPT_TYPE.AES:
        default:
          return BI.aesDecrypt(text, key);
      }
    },

    /**
     * 对字符串中的'和\做编码处理
     * @static
     * @param {String} string 要做编码处理的字符串
     * @return {String} 编码后的字符串
     */
    escape: function escape(string) {
      return string.replace(/('|\\)/g, "\\$1");
    },

    /**
     * 让字符串通过指定字符做补齐的函数
     *
     *      var s = BI.leftPad('123', 5, '0');//s的值为：'00123'
     *
     * @static
     * @param {String} val 原始值
     * @param {Number} size 总共需要的位数
     * @param {String} ch 用于补齐的字符
     * @return {String}  补齐后的字符串
     */
    leftPad: function leftPad(val, size, ch) {
      var result = String(val);

      if (!ch) {
        ch = " ";
      }

      while (result.length < size) {
        result = ch + result;
      }

      return result.toString();
    },

    /**
     * 对字符串做替换的函数
     *
     *      var cls = 'my-class', text = 'Some text';
     *      var res = BI.format('<div class="{0}">{1}</div>', cls, text);
     *      //res的值为：'<div class="my-class">Some text</div>';
     *
     * @static
     * @param {String} format 要做替换的字符串，替换字符串1，替换字符串2...
     * @return {String} 做了替换后的字符串
     */
    format: function format(_format) {
      var args = Array.prototype.slice.call(arguments, 1);
      return _format.replace(/\{(\d+)\}/g, function (m, i) {
        return args[i];
      });
    }
  }); // 日期相关方法


  BI._.extend(BI, {
    /**
     * 是否是闰年
     * @param year
     * @returns {boolean}
     */
    isLeapYear: function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    },

    /**
     * 检测是否在有效期
     *
     * @param YY 年
     * @param MM 月
     * @param DD 日
     * @param minDate '1900-01-01'
     * @param maxDate '2099-12-31'
     * @returns {Array} 若无效返回无效状态,数组第一位为无效属性,第二位缺省为超下限,1为超上限
     */
    checkDateVoid: function checkDateVoid(YY, MM, DD, minDate, maxDate) {
      var back = [];
      YY = YY | 0;
      MM = MM | 0;
      DD = DD | 0;
      minDate = BI.isString(minDate) ? minDate.match(/\d+/g) : minDate;
      maxDate = BI.isString(maxDate) ? maxDate.match(/\d+/g) : maxDate;

      if (YY < minDate[0]) {
        back = ["y"];
      } else if (YY > maxDate[0]) {
        back = ["y", 1];
      } else if (YY >= minDate[0] && YY <= maxDate[0]) {
        if (YY == minDate[0]) {
          if (MM < minDate[1]) {
            back = ["m"];
          } else if (MM == minDate[1]) {
            if (DD < minDate[2]) {
              back = ["d"];
            }
          }
        }

        if (YY == maxDate[0]) {
          if (MM > maxDate[1]) {
            back = ["m", 1];
          } else if (MM == maxDate[1]) {
            if (DD > maxDate[2]) {
              back = ["d", 1];
            }
          }
        }
      }

      return back;
    },
    checkDateLegal: function checkDateLegal(str) {
      var ar = str.match(/\d+/g);
      var YY = ar[0] | 0,
          MM = ar[1] | 0,
          DD = ar[2] | 0;

      if (ar.length <= 1) {
        return true;
      }

      if (ar.length <= 2) {
        return MM >= 1 && MM <= 12;
      }

      var MD = BI.Date._MD.slice(0);

      MD[1] = BI.isLeapYear(YY) ? 29 : 28;
      return MM >= 1 && MM <= 12 && DD <= MD[MM - 1];
    },
    parseDateTime: function parseDateTime(str, fmt) {
      var today = BI.getDate();
      var y = 0;
      var m = 0;
      var d = 1; // wei : 对于fmt为‘YYYYMM’或者‘YYYYMMdd’的格式，str的值为类似'201111'的形式，因为年月之间没有分隔符，所以正则表达式分割无效，导致bug7376。

      var a = str.split(/\W+/);

      if (fmt.toLowerCase() == "%y%x" || fmt.toLowerCase() == "%y%x%d") {
        var yearlength = 4;
        var otherlength = 2;
        a[0] = str.substring(0, yearlength);
        a[1] = str.substring(yearlength, yearlength + otherlength);
        a[2] = str.substring(yearlength + otherlength, yearlength + otherlength * 2);
      }

      var b = fmt.match(/%./g);
      var i = 0,
          j = 0;
      var hr = 0;
      var min = 0;
      var sec = 0;

      for (i = 0; i < a.length; ++i) {
        switch (b[i]) {
          case "%d":
          case "%e":
            d = parseInt(a[i], 10);
            break;

          case "%X":
            m = parseInt(a[i], 10) - 1;
            break;

          case "%x":
            m = parseInt(a[i], 10) - 1;
            break;

          case "%Y":
          case "%y":
            y = parseInt(a[i], 10);
            y < 100 && (y += y > 29 ? 1900 : 2000);
            break;

          case "%b":
          case "%B":
            for (j = 0; j < 12; ++j) {
              if (BI.getMonthName(j).substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) {
                m = j;
                break;
              }
            }

            break;

          case "%H":
          case "%I":
          case "%k":
          case "%l":
            hr = parseInt(a[i], 10);
            break;

          case "%P":
          case "%p":
            if (/pm/i.test(a[i]) && hr < 12) {
              hr += 12;
            } else if (/am/i.test(a[i]) && hr >= 12) {
              hr -= 12;
            }

            break;

          case "%Q":
          case "%q":
            m = (parseInt(a[i], 10) - 1) * 3;
            break;

          case "%M":
            min = parseInt(a[i], 10);
            break;

          case "%S":
            sec = parseInt(a[i], 10);
            break;
        }
      } //    if (!a[i]) {
      //        continue;
      //	}


      if (isNaN(y)) {
        y = today.getFullYear();
      }

      if (isNaN(m)) {
        m = today.getMonth();
      }

      if (isNaN(d)) {
        d = today.getDate();
      }

      if (isNaN(hr)) {
        hr = today.getHours();
      }

      if (isNaN(min)) {
        min = today.getMinutes();
      }

      if (isNaN(sec)) {
        sec = today.getSeconds();
      }

      if (y != 0) {
        return BI.getDate(y, m, d, hr, min, sec);
      }

      y = 0;
      m = -1;
      d = 0;

      for (i = 0; i < a.length; ++i) {
        if (a[i].search(/[a-zA-Z]+/) != -1) {
          var t = -1;

          for (j = 0; j < 12; ++j) {
            if (BI.getMonthName(j).substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) {
              t = j;
              break;
            }
          }

          if (t != -1) {
            if (m != -1) {
              d = m + 1;
            }

            m = t;
          }
        } else if (parseInt(a[i], 10) <= 12 && m == -1) {
          m = a[i] - 1;
        } else if (parseInt(a[i], 10) > 31 && y == 0) {
          y = parseInt(a[i], 10);
          y < 100 && (y += y > 29 ? 1900 : 2000);
        } else if (d == 0) {
          d = a[i];
        }
      }

      if (y == 0) {
        y = today.getFullYear();
      }

      if (m === -1) {
        m = today.getMonth();
      }

      if (m != -1 && d != 0) {
        return BI.getDate(y, m, d, hr, min, sec);
      }

      return today;
    },
    getDate: function getDate() {
      var length = arguments.length;
      var args = arguments;
      var dt;

      switch (length) {
        // new Date()
        case 0:
          dt = new Date();
          break;
        // new Date(long)

        case 1:
          dt = new Date(args[0]);
          break;
        // new Date(year, month)

        case 2:
          dt = new Date(args[0], args[1]);
          break;
        // new Date(year, month, day)

        case 3:
          dt = new Date(args[0], args[1], args[2]);
          break;
        // new Date(year, month, day, hour)

        case 4:
          dt = new Date(args[0], args[1], args[2], args[3]);
          break;
        // new Date(year, month, day, hour, minute)

        case 5:
          dt = new Date(args[0], args[1], args[2], args[3], args[4]);
          break;
        // new Date(year, month, day, hour, minute, second)

        case 6:
          dt = new Date(args[0], args[1], args[2], args[3], args[4], args[5]);
          break;
        // new Date(year, month, day, hour, minute, second, millisecond)

        case 7:
          dt = new Date(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          break;

        default:
          dt = new Date();
          break;
      }

      if (BI.isNotNull(BI.timeZone) && (arguments.length === 0 || arguments.length === 1 && BI.isNumber(arguments[0]))) {
        var localTime = dt.getTime(); // BI-33791 1901年以前的东8区标准是GMT+0805, 统一无论是什么时间，都以整的0800这样的为基准

        var localOffset = dt.getTimezoneOffset() * 60000; // 获得当地时间偏移的毫秒数

        var utc = localTime + localOffset; // utc即GMT时间标准时区

        return new Date(utc + BI.timeZone); // + Pool.timeZone.offset);
      }

      return dt;
    },
    getTime: function getTime() {
      var length = arguments.length;
      var args = arguments;
      var dt;

      switch (length) {
        // new Date()
        case 0:
          dt = new Date();
          break;
        // new Date(long)

        case 1:
          dt = new Date(args[0]);
          break;
        // new Date(year, month)

        case 2:
          dt = new Date(args[0], args[1]);
          break;
        // new Date(year, month, day)

        case 3:
          dt = new Date(args[0], args[1], args[2]);
          break;
        // new Date(year, month, day, hour)

        case 4:
          dt = new Date(args[0], args[1], args[2], args[3]);
          break;
        // new Date(year, month, day, hour, minute)

        case 5:
          dt = new Date(args[0], args[1], args[2], args[3], args[4]);
          break;
        // new Date(year, month, day, hour, minute, second)

        case 6:
          dt = new Date(args[0], args[1], args[2], args[3], args[4], args[5]);
          break;
        // new Date(year, month, day, hour, minute, second, millisecond)

        case 7:
          dt = new Date(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          break;

        default:
          dt = new Date();
          break;
      }

      if (BI.isNotNull(BI.timeZone)) {
        // BI-33791 1901年以前的东8区标准是GMT+0805, 统一无论是什么时间，都以整的0800这样的为基准
        return dt.getTime() - BI.timeZone - new Date().getTimezoneOffset() * 60000;
      }

      return dt.getTime();
    }
  });
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(104).setImmediate))

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function registerImmediate(handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function onGlobalMessage(event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function registerImmediate(handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function registerImmediate(handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function registerImmediate(handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function registerImmediate(handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(27), __webpack_require__(103)))

/***/ }),
/* 144 */
/***/ (function(module, exports) {

!function () {
  function extend() {
    var target = arguments[0] || {},
        length = arguments.length,
        i = 1,
        options,
        name,
        src,
        copy;

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name]; // Prevent never-ending loop

          if (target === copy) {
            continue;
          }

          if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }

    return target;
  }
  /**
   * 客户端观察者，主要处理事件的添加、删除、执行等
   * @class BI.OB
   * @abstract
   */


  var OB = function OB(config) {
    this._constructor(config);
  };

  BI._.extend(OB.prototype, {
    props: {},
    init: null,
    destroyed: null,
    _constructor: function _constructor(config) {
      this._initProps(config);

      this._init();

      this._initRef();
    },
    _defaultConfig: function _defaultConfig(config) {
      return {};
    },
    _initProps: function _initProps(config) {
      var props = this.props;

      if (BI.isFunction(this.props)) {
        props = this.props(config);
      }

      var defaultProps = extend(this._defaultConfig(config), props);
      var modifiedDefaultProps = config && config.type && BI.OB.configFunctions[config.type + ".props"] ? BI.reduce(BI.OB.configFunctions[config.type + ".props"], function (value, conf, index) {
        return extend(conf, value.fn(defaultProps, config, value.opt));
      }, {}) : null;
      this.options = extend(defaultProps, modifiedDefaultProps, config);
    },
    _init: function _init() {
      this._initListeners();

      this.init && this.init();
    },
    _initListeners: function _initListeners() {
      var self = this;

      if (this.options.listeners != null) {
        BI._.each(this.options.listeners, function (lis, eventName) {
          if (BI._.isFunction(lis)) {
            self.on(eventName, lis);
            return;
          }

          if (BI._.isArray(lis)) {
            BI._.each(lis, function (l) {
              self.on(eventName, l);
            });

            return;
          }

          (lis.target ? lis.target : self)[lis.once ? "once" : "on"](lis.eventName, BI._.bind(lis.action, self));
        });

        delete this.options.listeners;
      }
    },
    // 获得一个当前对象的引用
    _initRef: function _initRef() {
      var o = this.options;

      if (o.__ref) {
        BI.isFunction(o.__ref) ? o.__ref.call(this, this) : o.__ref.current = this;
      }

      if (o.ref) {
        BI.isFunction(o.ref) ? o.ref.call(this, this) : o.ref.current = this;
      }
    },
    //释放当前对象
    _purgeRef: function _purgeRef() {
      var o = this.options;

      if (o.__ref) {
        BI.isFunction(o.__ref) ? o.__ref.call(null, null) : o.__ref.current = null;
        o.__ref = null;
      }

      if (o.ref) {
        BI.isFunction(o.ref) ? o.ref.call(null, null) : o.ref.current = null;
        o.ref = null;
      }
    },
    _getEvents: function _getEvents() {
      if (!BI._.isObject(this.events)) {
        this.events = {};
      }

      return this.events;
    },

    /**
     * 给观察者绑定一个事件
     * @param {String} eventName 事件的名字
     * @param {Function} fn 事件对应的执行函数
     */
    on: function on(eventName, fn) {
      var self = this;
      eventName = eventName.toLowerCase();

      var fns = this._getEvents()[eventName];

      if (!BI._.isArray(fns)) {
        fns = [];
        this._getEvents()[eventName] = fns;
      }

      fns.push(fn);
      return function () {
        self.un(eventName, fn);
      };
    },

    /**
     * 给观察者绑定一个只执行一次的事件
     * @param {String} eventName 事件的名字
     * @param {Function} fn 事件对应的执行函数
     */
    once: function once(eventName, fn) {
      var proxy = function proxy() {
        fn.apply(this, arguments);
        this.un(eventName, proxy);
      };

      this.on(eventName, proxy);
    },

    /**
     * 解除观察者绑定的指定事件
     * @param {String} eventName 要解除绑定事件的名字
     * @param {Function} fn 事件对应的执行函数，该参数是可选的，没有该参数时，将解除绑定所有同名字的事件
     */
    un: function un(eventName, fn) {
      eventName = eventName.toLowerCase();
      /* alex:如果fn是null,就是把eventName上面所有方法都un掉*/

      if (fn == null) {
        delete this._getEvents()[eventName];
      } else {
        var fns = this._getEvents()[eventName];

        if (BI._.isArray(fns)) {
          var newFns = [];

          BI._.each(fns, function (ifn) {
            if (ifn != fn) {
              newFns.push(ifn);
            }
          });

          this._getEvents()[eventName] = newFns;
        }
      }
    },

    /**
     * 清除观察者的所有事件绑定
     */
    purgeListeners: function purgeListeners() {
      /* alex:清空events*/
      this.events = {};
    },

    /**
     * 触发绑定过的事件
     *
     * @param {String} eventName 要触发的事件的名字
     * @returns {Boolean} 如果事件函数返回false，则返回false并中断其他同名事件的执行，否则执行所有的同名事件并返回true
     */
    fireEvent: function fireEvent() {
      var eventName = arguments[0].toLowerCase();

      var fns = this._getEvents()[eventName];

      if (BI.isArray(fns)) {
        if (BI.isArguments(arguments[1])) {
          for (var i = 0; i < fns.length; i++) {
            if (fns[i].apply(this, arguments[1]) === false) {
              return false;
            }
          }
        } else {
          var args = Array.prototype.slice.call(arguments, 1);

          for (var i = 0; i < fns.length; i++) {
            if (fns[i].apply(this, args) === false) {
              return false;
            }
          }
        }
      }

      return true;
    },
    destroy: function destroy() {
      this.destroyed && this.destroyed();

      this._purgeRef();

      this.purgeListeners();
    }
  });

  BI.OB = BI.OB || OB;
}();

/***/ }),
/* 145 */
/***/ (function(module, exports) {

(function () {
  var moduleInjection = {},
      moduleInjectionMap = {
    components: {},
    constants: {},
    stores: {},
    services: {},
    models: {},
    providers: {}
  };

  BI.module = BI.module || function (xtype, cls) {
    if (moduleInjection[xtype] != null) {
      _global.console && console.error("module： [" + xtype + "] 已经注册过了");
    } else {
      if (BI.isFunction(cls)) {
        cls = cls();
      }

      for (var k in moduleInjectionMap) {
        if (cls[k]) {
          for (var key in cls[k]) {
            if (!moduleInjectionMap[k]) {
              continue;
            }

            if (!moduleInjectionMap[k][key]) {
              moduleInjectionMap[k][key] = [];
            }

            moduleInjectionMap[k][key].push({
              version: cls[k][key],
              moduleId: xtype
            });
          }
        }
      }

      moduleInjection[xtype] = cls;
    }

    return function () {
      return BI.Modules.getModule(xtype);
    };
  };

  var constantInjection = {};

  BI.constant = BI.constant || function (xtype, cls) {
    if (constantInjection[xtype] != null) {
      _global.console && console.error("constant: [" + xtype + "]已经注册过了");
    } else {
      constantInjection[xtype] = cls;
    }

    return function () {
      return BI.Constants.getConstant(xtype);
    };
  };

  var modelInjection = {};

  BI.model = BI.model || function (xtype, cls) {
    if (modelInjection[xtype] != null) {
      _global.console && console.error("model: [" + xtype + "] 已经注册过了");
    } else {
      modelInjection[xtype] = cls;
    }

    return function (config) {
      return BI.Models.getModel(xtype, config);
    };
  };

  var storeInjection = {};

  BI.store = BI.store || function (xtype, cls) {
    if (storeInjection[xtype] != null) {
      _global.console && console.error("store: [" + xtype + "] 已经注册过了");
    } else {
      storeInjection[xtype] = cls;
    }

    return function (config) {
      return BI.Stores.getStore(xtype, config);
    };
  };

  var serviceInjection = {};

  BI.service = BI.service || function (xtype, cls) {
    if (serviceInjection[xtype] != null) {
      _global.console && console.error("service: [" + xtype + "] 已经注册过了");
    }

    serviceInjection[xtype] = cls;
    return function (config) {
      return BI.Services.getService(xtype, config);
    };
  };

  var providerInjection = {};

  BI.provider = BI.provider || function (xtype, cls) {
    if (providerInjection[xtype] != null) {
      _global.console && console.error("provider: [" + xtype + "] 已经注册过了");
    } else {
      providerInjection[xtype] = cls;
    }

    return function (config) {
      return BI.Providers.getProvider(xtype, config);
    };
  };

  var configFunctions = BI.OB.configFunctions = {};

  var runConfigFunction = function runConfigFunction(type, configFn) {
    if (!type || !configFunctions[type]) {
      return false;
    }

    var queue = [];

    if (configFn) {
      queue = configFunctions[type].filter(function (conf) {
        return conf.fn === configFn;
      });
      configFunctions[type] = configFunctions[type].filter(function (conf) {
        return conf.fn !== configFn;
      });
    } else {
      queue = configFunctions[type];
      delete configFunctions[type];
    }

    var dependencies = BI.Providers.getProvider("bi.provider.system").getDependencies();
    var modules = moduleInjectionMap.components[type] || moduleInjectionMap.constants[type] || moduleInjectionMap.services[type] || moduleInjectionMap.stores[type] || moduleInjectionMap.models[type] || moduleInjectionMap.providers[type];

    for (var i = 0; i < queue.length; i++) {
      var conf = queue[i];
      var version = conf.opt.version;
      var fn = conf.fn;

      if (modules && version) {
        var findVersion = false;

        for (var j = 0; j < modules.length; j++) {
          var module = modules[j];

          if (module && dependencies[module.moduleId] && module.version === version) {
            var minVersion = dependencies[module.moduleId].minVersion,
                maxVersion = dependencies[module.moduleId].maxVersion;

            if (minVersion && (moduleInjection[module.moduleId].version || version) < minVersion) {
              findVersion = true;
              break;
            }

            if (maxVersion && (moduleInjection[module.moduleId].version || version) > maxVersion) {
              findVersion = true;
              break;
            }
          }
        }

        if (findVersion === true) {
          _global.console && console.error("moduleId: [" + module.moduleId + "] 接口: [" + type + "] 接口版本: [" + version + "] 已过期，版本要求为：", dependencies[module.moduleId], "=>", moduleInjection[module.moduleId]);
          continue;
        }
      }

      if (constantInjection[type]) {
        constantInjection[type] = fn(constantInjection[type]);
        continue;
      }

      if (providerInjection[type]) {
        if (!providers[type]) {
          providers[type] = new providerInjection[type]();
        }

        if (providerInstance[type]) {
          delete providerInstance[type];
        }

        fn(providers[type]);
        continue;
      }

      BI.Plugin.configWidget(type, fn, conf.opt);
    }
  };

  BI.config = BI.config || function (type, configFn, opt) {
    if (BI.isFunction(type)) {
      opt = configFn;
      configFn = type;
      type = "bi.provider.system";
    }

    opt = opt || {}; // 系统配置直接执行

    if ("bi.provider.system" === type) {
      if (!providers[type]) {
        providers[type] = new providerInjection[type]();
      } // 如果config被重新配置的话，需要删除掉之前的实例


      if (providerInstance[type]) {
        delete providerInstance[type];
      }

      return configFn(providers[type]);
    }

    if (!configFunctions[type]) {
      configFunctions[type] = [];
    }

    configFunctions[type].push({
      fn: configFn,
      opt: opt
    });

    if (opt.immediately) {
      return runConfigFunction(type, configFn);
    }
  };

  BI.getReference = BI.getReference || function (type, fn) {
    return BI.Plugin.registerObject(type, fn);
  };

  var actions = {};
  var globalAction = [];

  BI.action = BI.action || function (type, actionFn) {
    if (BI.isFunction(type)) {
      globalAction.push(type);
      return function () {
        BI.remove(globalAction, function (idx) {
          return globalAction.indexOf(actionFn) === idx;
        });
      };
    }

    if (!actions[type]) {
      actions[type] = [];
    }

    actions[type].push(actionFn);
    return function () {
      BI.remove(actions[type], function (idx) {
        return actions[type].indexOf(actionFn) === idx;
      });

      if (actions[type].length === 0) {
        delete actions[type];
      }
    };
  };

  var points = {};

  BI.point = BI.point || function (type, action, pointFn, after) {
    if (!points[type]) {
      points[type] = {};
    }

    if (!points[type][action]) {
      points[type][action] = {};
    }

    if (!points[type][action][after ? "after" : "before"]) {
      points[type][action][after ? "after" : "before"] = [];
    }

    points[type][action][after ? "after" : "before"].push(pointFn);
  };

  BI.Modules = BI.Modules || {
    getModule: function getModule(type) {
      if (!moduleInjection[type]) {
        _global.console && console.error("module: [" + type + "] 未定义");
      }

      return moduleInjection[type];
    },
    getAllModules: function getAllModules() {
      return moduleInjection;
    }
  };
  BI.Constants = BI.Constants || {
    getConstant: function getConstant(type) {
      if (BI.isNull(constantInjection[type])) {
        _global.console && console.error("constant: [" + type + "] 未定义");
      }

      runConfigFunction(type);
      return BI.isFunction(constantInjection[type]) ? constantInjection[type]() : constantInjection[type];
    }
  };

  var callPoint = function callPoint(inst, types) {
    types = BI.isArray(types) ? types : [types];
    BI.each(types, function (idx, type) {
      if (points[type]) {
        for (var action in points[type]) {
          var bfns = points[type][action].before;

          if (bfns) {
            BI.aspect.before(inst, action, function (bfns) {
              return function () {
                for (var i = 0, len = bfns.length; i < len; i++) {
                  try {
                    bfns[i].apply(inst, arguments);
                  } catch (e) {
                    _global.console && console.error(e);
                  }
                }
              };
            }(bfns));
          }

          var afns = points[type][action].after;

          if (afns) {
            BI.aspect.after(inst, action, function (afns) {
              return function () {
                for (var i = 0, len = afns.length; i < len; i++) {
                  try {
                    afns[i].apply(inst, arguments);
                  } catch (e) {
                    _global.console && console.error(e);
                  }
                }
              };
            }(afns));
          }
        }
      }
    });
  };

  BI.Models = BI.Models || {
    getModel: function getModel(type, config) {
      if (!modelInjection[type]) {
        _global.console && console.error("model: [" + type + "] 未定义");
      }

      runConfigFunction(type);
      var inst = new modelInjection[type](config);
      inst._constructor && inst._constructor(config);
      inst.mixins && callPoint(inst, inst.mixins);
      callPoint(inst, type);
      return inst;
    }
  };
  var stores = {};
  BI.Stores = BI.Stores || {
    getStore: function getStore(type, config) {
      if (!storeInjection[type]) {
        _global.console && console.error("store: [" + type + "] 未定义");
      }

      if (stores[type]) {
        return stores[type];
      }

      var inst = stores[type] = new storeInjection[type](config);
      inst._constructor && inst._constructor(config, function () {
        delete stores[type];
      });
      callPoint(inst, type);
      return inst;
    }
  };
  var services = {};
  BI.Services = BI.Services || {
    getService: function getService(type, config) {
      if (!serviceInjection[type]) {
        _global.console && console.error("service: [" + type + "] 未定义");
      }

      if (services[type]) {
        return services[type];
      }

      services[type] = new serviceInjection[type](config);
      callPoint(services[type], type);
      return services[type];
    }
  };
  var providers = {},
      providerInstance = {};
  BI.Providers = BI.Providers || {
    getProvider: function getProvider(type, config) {
      if (!providerInjection[type]) {
        _global.console && console.error("provider: [" + type + "] 未定义");
      }

      runConfigFunction(type);

      if (!providers[type]) {
        providers[type] = new providerInjection[type]();
      }

      if (!providerInstance[type] && providers[type].$get) {
        providerInstance[type] = new (providers[type].$get())(config);
      }

      return providerInstance[type];
    }
  };
  BI.Actions = BI.Actions || {
    runAction: function runAction(type, event, config) {
      BI.each(actions[type], function (i, act) {
        try {
          act(event, config);
        } catch (e) {
          _global.console && console.error(e);
        }
      });
    },
    runGlobalAction: function runGlobalAction() {
      var args = [].slice.call(arguments);
      BI.each(globalAction, function (i, act) {
        try {
          act.apply(null, args);
        } catch (e) {
          _global.console && console.error(e);
        }
      });
    }
  };
  var kv = {};

  BI.shortcut = BI.component = BI.shortcut || function (xtype, cls) {
    if (kv[xtype] != null) {
      _global.console && console.error("组件： [" + xtype + "] 已经注册过了");
    }

    if (cls) {
      cls["xtype"] = xtype;
    }

    kv[xtype] = cls;
  }; // 根据配置属性生成widget


  var createWidget = function createWidget(config, context, lazy) {
    var cls = BI.isFunction(config.type) ? config.type : kv[config.type];

    if (!cls) {
      throw new Error("组件： [" + config.type + "] 未定义");
    }

    var pushed = false;
    var widget = new cls();
    widget._context = BI.Widget.context || context;

    if (!BI.Widget.context && context) {
      pushed = true;
      BI.Widget.pushContext(context);
    }

    callPoint(widget, config.type);

    widget._initProps(config);

    widget._initRoot();

    widget._constructed(); // if (!lazy || config.element || config.root) {


    widget._lazyConstructor(); // }


    pushed && BI.Widget.popContext();
    return widget;
  };

  BI.createWidget = BI.createWidget || function (item, options, context, lazy) {
    item || (item = {});

    if (BI.isWidget(options)) {
      context = options;
      options = {};
    } else {
      options || (options = {});
    }

    var el, w;

    if (item.type || options.type) {
      el = BI.extend({}, options, item);
    } else if (item.el && (item.el.type || options.type)) {
      el = BI.extend({}, options, item.el);
    }

    if (el) {
      var elType = el.type && el.type.xtype || el.type;
      runConfigFunction(elType);
    } // 先把准备环境准备好


    BI.init();

    if (BI.isEmpty(item) && BI.isEmpty(options)) {
      return BI.createWidget({
        type: "bi.layout"
      });
    }

    if (BI.isWidget(item)) {
      return item;
    }

    if (el) {
      w = BI.Plugin.getWidget(elType, el);
      var wType = w.type && w.type.xtype || w.type;

      if (wType === elType) {
        if (BI.Plugin.hasObject(elType)) {
          if (!w.listeners || BI.isArray(w.listeners)) {
            w.listeners = (w.listeners || []).concat([{
              eventName: BI.Events.MOUNT,
              action: function action() {
                BI.Plugin.getObject(elType, this);
              }
            }]);
          } else {
            w.listeners[BI.Events.MOUNT] = [function () {
              BI.Plugin.getObject(elType, this);
            }].concat(w.listeners[BI.Events.MOUNT] || []);
          }
        }

        return createWidget(w, context, lazy);
      }

      return BI.createWidget(w, options, context, lazy);
    }

    if (BI.isWidget(item.el)) {
      return item.el;
    }

    throw new Error("组件：无法根据item创建组件", item);
  };

  BI._lazyCreateWidget = BI._lazyCreateWidget || function (item, options, context) {
    return BI.createWidget(item, options, context, true);
  };

  BI.createElement = BI.createElement || function () {
    var widget = BI.createWidget.apply(this, arguments);
    return widget.element;
  };

  BI.getResource = BI.getResource || function (type, config) {
    if (BI.isNotNull(constantInjection[type])) {
      return BI.Constants.getConstant(type);
    }

    if (modelInjection[type]) {
      return BI.Models.getModel(type, config);
    }

    if (storeInjection[type]) {
      return BI.Stores.getStore(type, config);
    }

    if (serviceInjection[type]) {
      return BI.Services.getService(type, config);
    }

    if (providerInjection[type]) {
      return BI.Providers.getProvider(type, config);
    }

    throw new Error("未知类型: [" + type + "] 未定义");
  };
})();

/***/ }),
/* 146 */
/***/ (function(module, exports) {

/**
 * 事件集合
 * @class BI.Events
 */
BI._.extend(BI, {
  Events: {
    /**
     * @static
     * @property keydown事件
     */
    KEYDOWN: "_KEYDOWN",

    /**
     * @static
     * @property 回撤事件
     */
    BACKSPACE: "_BACKSPACE",

    /**
     * @static
     * @property 空格事件
     */
    SPACE: "_SPACE",

    /**
     * @static
     * @property 回车事件
     */
    ENTER: "_ENTER",

    /**
     * @static
     * @property 确定事件
     */
    CONFIRM: "_CONFIRM",

    /**
     * @static
     * @property 错误事件
     */
    ERROR: "_ERROR",

    /**
     * @static
     * @property 暂停事件
     */
    PAUSE: "_PAUSE",

    /**
     * @static
     * @property destroy事件
     */
    DESTROY: "_DESTROY",

    /**
     * @static
     * @property 挂载事件
     */
    MOUNT: "_MOUNT",

    /**
     * @static
     * @property 取消挂载事件
     */
    UNMOUNT: "_UNMOUNT",

    /**
     * @static
     * @property 清除选择
     */
    CLEAR: "_CLEAR",

    /**
     * @static
     * @property 添加数据
     */
    ADD: "_ADD",

    /**
     * @static
     * @property 正在编辑状态事件
     */
    EDITING: "_EDITING",

    /**
     * @static
     * @property 空状态事件
     */
    EMPTY: "_EMPTY",

    /**
     * @static
     * @property 显示隐藏事件
     */
    VIEW: "_VIEW",

    /**
     * @static
     * @property 窗体改变大小
     */
    RESIZE: "_RESIZE",

    /**
     * @static
     * @property 编辑前事件
     */
    BEFOREEDIT: "_BEFOREEDIT",

    /**
     * @static
     * @property 编辑后事件
     */
    AFTEREDIT: "_AFTEREDIT",

    /**
     * @static
     * @property 开始编辑事件
     */
    STARTEDIT: "_STARTEDIT",

    /**
     * @static
     * @property 停止编辑事件
     */
    STOPEDIT: "_STOPEDIT",

    /**
     * @static
     * @property 值改变事件
     */
    CHANGE: "_CHANGE",

    /**
     * @static
     * @property 下拉弹出菜单事件
     */
    EXPAND: "_EXPAND",

    /**
     * @static
     * @property 关闭下拉菜单事件
     */
    COLLAPSE: "_COLLAPSE",

    /**
     * @static
     * @property 下拉菜单切换展开收起事件
     */
    TOGGLE: "_TOGGLE",

    /**
     * @static
     * @property 回调事件
     */
    CALLBACK: "_CALLBACK",

    /**
     * @static
     * @property 点击事件
     */
    CLICK: "_CLICK",

    /**
     * @static
     * @property 状态改变事件，一般是用在复选按钮和单选按钮
     */
    STATECHANGE: "_STATECHANGE",

    /**
     * @static
     * @property 状态改变前事件
     */
    BEFORESTATECHANGE: "_BEFORESTATECHANGE",

    /**
     * @static
     * @property 初始化事件
     */
    INIT: "_INIT",

    /**
     * @static
     * @property 初始化后事件
     */
    AFTERINIT: "_AFTERINIT",

    /**
     * @static
     * @property 滚动条滚动事件
     */
    SCROLL: "_SCROLL",

    /**
     * @static
     * @property 开始加载事件
     */
    STARTLOAD: "_STARTLOAD",

    /**
     * @static
     * @property 加载后事件
     */
    AFTERLOAD: "_AFTERLOAD",

    /**
     * @static
     * @property 提交前事件
     */
    BS: "beforesubmit",

    /**
     * @static
     * @property 提交后事件
     */
    AS: "aftersubmit",

    /**
     * @static
     * @property 提交完成事件
     */
    SC: "submitcomplete",

    /**
     * @static
     * @property 提交失败事件
     */
    SF: "submitfailure",

    /**
     * @static
     * @property 提交成功事件
     */
    SS: "submitsuccess",

    /**
     * @static
     * @property 校验提交前事件
     */
    BVW: "beforeverifywrite",

    /**
     * @static
     * @property 校验提交后事件
     */
    AVW: "afterverifywrite",

    /**
     * @static
     * @property 校验后事件
     */
    AV: "afterverify",

    /**
     * @static
     * @property 填报前事件
     */
    BW: "beforewrite",

    /**
     * @static
     * @property 填报后事件
     */
    AW: "afterwrite",

    /**
     * @static
     * @property 填报成功事件
     */
    WS: "writesuccess",

    /**
     * @static
     * @property 填报失败事件
     */
    WF: "writefailure",

    /**
     * @static
     * @property 添加行前事件
     */
    BA: "beforeappend",

    /**
     * @static
     * @property 添加行后事件
     */
    AA: "afterappend",

    /**
     * @static
     * @property 删除行前事件
     */
    BD: "beforedelete",

    /**
     * @static
     * @property 删除行后事件
     */
    AD: "beforedelete",

    /**
     * @static
     * @property 未提交离开事件
     */
    UC: "unloadcheck",

    /**
     * @static
     * @property PDF导出前事件
     */
    BTOPDF: "beforetopdf",

    /**
     * @static
     * @property PDF导出后事件
     */
    ATOPDF: "aftertopdf",

    /**
     * @static
     * @property Excel导出前事件
     */
    BTOEXCEL: "beforetoexcel",

    /**
     * @static
     * @property Excel导出后事件
     */
    ATOEXCEL: "aftertoexcel",

    /**
     * @static
     * @property Word导出前事件
     */
    BTOWORD: "beforetoword",

    /**
     * @static
     * @property Word导出后事件
     */
    ATOWORD: "aftertoword",

    /**
     * @static
     * @property 图片导出前事件
     */
    BTOIMAGE: "beforetoimage",

    /**
     * @static
     * @property 图片导出后事件
     */
    ATOIMAGE: "aftertoimage",

    /**
     * @static
     * @property HTML导出前事件
     */
    BTOHTML: "beforetohtml",

    /**
     * @static
     * @property HTML导出后事件
     */
    ATOHTML: "aftertohtml",

    /**
     * @static
     * @property Excel导入前事件
     */
    BIMEXCEL: "beforeimportexcel",

    /**
     * @static
     * @property Excel导出后事件
     */
    AIMEXCEL: "afterimportexcel",

    /**
     * @static
     * @property PDF打印前事件
     */
    BPDFPRINT: "beforepdfprint",

    /**
     * @static
     * @property PDF打印后事件
     */
    APDFPRINT: "afterpdfprint",

    /**
     * @static
     * @property Flash打印前事件
     */
    BFLASHPRINT: "beforeflashprint",

    /**
     * @static
     * @property Flash打印后事件
     */
    AFLASHPRINT: "afterflashprint",

    /**
     * @static
     * @property Applet打印前事件
     */
    BAPPLETPRINT: "beforeappletprint",

    /**
     * @static
     * @property Applet打印后事件
     */
    AAPPLETPRINT: "afterappletprint",

    /**
     * @static
     * @property 服务器打印前事件
     */
    BSEVERPRINT: "beforeserverprint",

    /**
     * @static
     * @property 服务器打印后事件
     */
    ASERVERPRINT: "afterserverprint",

    /**
     * @static
     * @property 邮件发送前事件
     */
    BEMAIL: "beforeemail",

    /**
     * @static
     * @property 邮件发送后事件
     */
    AEMAIL: "afteremail"
  }
});

/***/ }),
/* 147 */
/***/ (function(module, exports) {

/**
 * 常量
 */
BI._.extend(BI, {
  MAX: 0xfffffffffffffff,
  MIN: -0xfffffffffffffff,
  EVENT_RESPONSE_TIME: 200,
  EVENT_BLUR: true,
  zIndex_layer: 1e5,
  zIndex_popover: 1e6,
  zIndex_popup: 1e7,
  zIndex_masker: 1e8,
  zIndex_tip: 1e9,
  emptyStr: "",
  pixUnit: "px",
  pixRatio: 1,
  // 一定返回最终的单位
  pixFormat: function pixFormat(pix, border) {
    if (!BI.isNumber(pix)) {
      return pix;
    }

    if (BI.pixUnit === "px") {
      return pix / BI.pixRatio - (border || 0) + BI.pixUnit;
    }

    var length = pix / BI.pixRatio + BI.pixUnit;

    if (border > 0) {
      return "calc(".concat(length, " - ").concat(border + "px", ")");
    }

    return length;
  },
  toPix: function toPix(pix, border) {
    if (!BI.isNumber(pix)) {
      return pix;
    }

    if (BI.pixUnit === "px") {
      return pix - (border || 0) * BI.pixRatio;
    }

    if (border > 0) {
      return "calc(".concat(pix / BI.pixRatio + BI.pixUnit, " - ").concat(border + "px", ")");
    }

    return pix;
  },
  emptyFn: function emptyFn() {},
  empty: null,
  Key: {
    48: "0",
    49: "1",
    50: "2",
    51: "3",
    52: "4",
    53: "5",
    54: "6",
    55: "7",
    56: "8",
    57: "9",
    65: "a",
    66: "b",
    67: "c",
    68: "d",
    69: "e",
    70: "f",
    71: "g",
    72: "h",
    73: "i",
    74: "j",
    75: "k",
    76: "l",
    77: "m",
    78: "n",
    79: "o",
    80: "p",
    81: "q",
    82: "r",
    83: "s",
    84: "t",
    85: "u",
    86: "v",
    87: "w",
    88: "x",
    89: "y",
    90: "z",
    96: "0",
    97: "1",
    98: "2",
    99: "3",
    100: "4",
    101: "5",
    102: "6",
    103: "7",
    104: "8",
    105: "9",
    106: "*",
    107: "+",
    109: "-",
    110: ".",
    111: "/"
  },
  KeyCode: {
    BACKSPACE: 8,
    COMMA: 188,
    DELETE: 46,
    DOWN: 40,
    END: 35,
    ENTER: 13,
    ESCAPE: 27,
    HOME: 36,
    LEFT: 37,
    NUMPAD_ADD: 107,
    NUMPAD_DECIMAL: 110,
    NUMPAD_DIVIDE: 111,
    NUMPAD_ENTER: 108,
    NUMPAD_MULTIPLY: 106,
    NUMPAD_SUBTRACT: 109,
    PAGE_DOWN: 34,
    PAGE_UP: 33,
    PERIOD: 190,
    RIGHT: 39,
    SPACE: 32,
    TAB: 9,
    UP: 38
  },
  Status: {
    SUCCESS: 1,
    WRONG: 2,
    START: 3,
    END: 4,
    WAITING: 5,
    READY: 6,
    RUNNING: 7,
    OUTOFBOUNDS: 8,
    NULL: -1
  },
  Direction: {
    Top: "top",
    Bottom: "bottom",
    Left: "left",
    Right: "right",
    Custom: "custom"
  },
  Axis: {
    Vertical: "vertical",
    Horizontal: "horizontal"
  },
  Selection: {
    Default: -2,
    None: -1,
    Single: 0,
    Multi: 1,
    All: 2
  },
  HorizontalAlign: {
    Left: "left",
    Right: "right",
    Center: "center",
    Stretch: "stretch"
  },
  VerticalAlign: {
    Middle: "middle",
    Top: "top",
    Bottom: "bottom",
    Stretch: "stretch"
  },
  StartOfWeek: 1,
  BlankSplitChar: "\u200B \u200B"
});

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

(function () {
  var _global;

  if (typeof window !== "undefined") {
    _global = window;
  } else if (typeof global !== "undefined") {
    _global = global;
  } else if (typeof self !== "undefined") {
    _global = self;
  } else {
    _global = this;
  }

  if (!_global.BI) {
    _global.BI = {};
  }

  function isEmpty(value) {
    // 判断是否为空值
    var result = value === "" || value === null || value === undefined;
    return result;
  } // 判断是否是无效的日期


  function isInvalidDate(date) {
    return date == "Invalid Date" || date == "NaN";
  }
  /**
   * CHART-1400
   * 使用数值计算的方式来获取任意数值的科学技术表示值。
   * 科学计数格式
   */


  function _eFormat(text, fmt) {
    text = +text;
    return eFormat(text, fmt);
    /**
     * 科学计数格式具体计算过程
     * @param num
     * @param format {String}有两种形式，
     *      1、"0.00E00"这样的字符串表示正常的科学计数表示，只不过规定了数值精确到百分位，
     *         而数量级的绝对值如果是10以下的时候在前面补零。
     *      2、 "##0.0E0"这样的字符串则规定用科学计数法表示之后的数值的整数部分是三位，精确到十分位，
     *         数量级没有规定，因为没见过实数里有用科学计数法表示之后E的后面会小于一位的情况（0无所谓）。
     * @returns {*}
     */

    function eFormat(num, format) {
      var neg = num < 0 ? (num *= -1, "-") : "",
          magnitudeNeg = "";
      var funcName = num > 0 && num < 1 ? "floor" : "ceil"; // -0.9999->-1
      // 数量级

      var magnitude = Math[funcName](Math.log(num) / Math.log(10));

      if (!isFinite(magnitude)) {
        return format.replace(/#/ig, "").replace(/\.e/ig, "E");
      }

      num = num / Math.pow(10, magnitude); // 让num转化成[1, 10)区间上的数

      if (num > 0 && num < 1) {
        num *= 10;
        magnitude -= 1;
      } // 计算出format中需要显示的整数部分的位数，然后更新这个数值，也更新数量级


      var integerLen = getInteger(magnitude, format);
      integerLen > 1 && (magnitude -= integerLen - 1, num *= Math.pow(10, integerLen - 1));
      magnitude < 0 && (magnitudeNeg = "-", magnitude *= -1); // 获取科学计数法精确到的位数

      var precision = getPrecision(format); // 判断num经过四舍五入之后是否有进位

      var isValueCarry = isValueCarried(num);
      num *= Math.pow(10, precision);
      num = Math.round(num); // 如果出现进位的情况，将num除以10

      isValueCarry && (num /= 10, magnitude += magnitudeNeg === "-" ? -1 : 1);
      num /= Math.pow(10, precision); // 小数部分保留precision位

      num = num.toFixed(precision); // 格式化指数的部分

      magnitude = formatExponential(format, magnitude, magnitudeNeg);
      return neg + num + "E" + magnitude;
    } // 获取format格式规定的数量级的形式


    function formatExponential(format, num, magnitudeNeg) {
      num += "";

      if (!/e/ig.test(format)) {
        return num;
      }

      format = format.split(/e/ig)[1];

      while (num.length < format.length) {
        num = "0" + num;
      } // 如果magnitudeNeg是一个"-"，而且num正好全是0，那么就别显示负号了


      var isAllZero = true;

      for (var i = 0, len = num.length; i < len; i++) {
        if (!isAllZero) {
          continue;
        }

        isAllZero = num.charAt(i) === "0";
      }

      magnitudeNeg = isAllZero ? "" : magnitudeNeg;
      return magnitudeNeg + num;
    } // 获取format规定的科学计数法精确到的位数


    function getPrecision(format) {
      if (!/e/ig.test(format)) {
        return 0;
      }

      var arr = format.split(/e/ig)[0].split(".");
      return arr.length > 1 ? arr[1].length : 0;
    } // 获取数值科学计数法表示之后整数的位数
    // 这边我们还需要考虑#和0的问题


    function getInteger(magnitude, format) {
      if (!/e/ig.test(format)) {
        return 0;
      } // return format.split(/e/ig)[0].split(".")[0].length;


      var formatLeft = format.split(/e/ig)[0].split(".")[0],
          i,
          f,
          len = formatLeft.length;
      var valueLeftLen = 0;

      for (i = 0; i < len; i++) {
        f = formatLeft.charAt(i); // "#"所在的位置到末尾长度小于等于值的整数部分长度，那么这个#才可以占位

        if (f == 0 || f == "#" && len - i <= magnitude + 1) {
          valueLeftLen++;
        }
      }

      return valueLeftLen;
    } // 判断num通过round函数之后是否有进位


    function isValueCarried(num) {
      var roundNum = Math.round(num);
      num = (num + "").split(".")[0];
      roundNum = (roundNum + "").split(".")[0];
      return num.length !== roundNum.length;
    }
  } //'#.##'之类的格式处理 1.324e-18 这种的科学数字


  function _dealNumberPrecision(text, fright) {
    if (/[eE]/.test(text)) {
      var precision = 0,
          i = 0,
          ch;

      if (/[%‰]$/.test(fright)) {
        precision = /[%]$/.test(fright) ? 2 : 3;
      }

      for (var len = fright.length; i < len; i++) {
        if ((ch = fright.charAt(i)) == "0" || ch == "#") {
          precision++;
        }
      }

      return Number(text).toFixed(precision);
    }

    return text;
  }
  /**
   * 数字格式
   */


  function _numberFormat(text, format) {
    var text = text + ""; //在调用数字格式的时候如果text里没有任何数字则不处理

    if (!/[0-9]/.test(text) || !format) {
      return text;
    } // 数字格式，区分正负数


    var numMod = format.indexOf(";");

    if (numMod > -1) {
      if (text >= 0) {
        return _numberFormat(text + "", format.substring(0, numMod));
      }

      return _numberFormat(-text + "", format.substr(numMod + 1));
    } else {
      // 兼容格式处理负数的情况(copy:fr-jquery.format.js)
      if (+text < 0 && format.charAt(0) !== "-") {
        return _numberFormat(-text + "", "-" + format);
      }
    }

    var fp = format.split("."),
        fleft = fp[0] || "",
        fright = fp[1] || "";
    text = _dealNumberPrecision(text, fright);
    var tp = text.split("."),
        tleft = tp[0] || "",
        tright = tp[1] || ""; // 百分比,千分比的小数点移位处理

    if (/[%‰]$/.test(format)) {
      var paddingZero = /[%]$/.test(format) ? "00" : "000";
      tright += paddingZero;
      tleft += tright.substr(0, paddingZero.length);
      tleft = tleft.replace(/^0+/gi, "");
      tright = tright.substr(paddingZero.length).replace(/0+$/gi, "");
    }

    var right = _dealWithRight(tright, fright);

    if (right.leftPlus) {
      // 小数点后有进位
      tleft = parseInt(tleft) + 1 + "";
      tleft = isNaN(tleft) ? "1" : tleft;
    }

    right = right.num;

    var left = _dealWithLeft(tleft, fleft);

    if (!/[0-9]/.test(left)) {
      left = left + "0";
    }

    if (!/[0-9]/.test(right)) {
      return left + right;
    } else {
      return left + "." + right;
    }
  }
  /**
   * 处理小数点右边小数部分
   * @param tright 右边内容
   * @param fright 右边格式
   * @returns {JSON} 返回处理结果和整数部分是否需要进位
   * @private
   */


  function _dealWithRight(tright, fright) {
    var right = "",
        j = 0,
        i = 0;

    for (var len = fright.length; i < len; i++) {
      var ch = fright.charAt(i);
      var c = tright.charAt(j);

      switch (ch) {
        case "0":
          if (isEmpty(c)) {
            c = "0";
          }

          right += c;
          j++;
          break;

        case "#":
          right += c;
          j++;
          break;

        default:
          right += ch;
          break;
      }
    }

    var rll = tright.substr(j);
    var result = {};

    if (!isEmpty(rll) && rll.charAt(0) > 4) {
      // 有多余字符，需要四舍五入
      result.leftPlus = true;
      var numReg = right.match(/^[0-9]+/);

      if (numReg) {
        var num = numReg[0];
        var orilen = num.length;
        var newnum = parseInt(num) + 1 + ""; // 进位到整数部分

        if (newnum.length > orilen) {
          newnum = newnum.substr(1);
        } else {
          newnum = BI.leftPad(newnum, orilen, "0");
          result.leftPlus = false;
        }

        right = right.replace(/^[0-9]+/, newnum);
      }
    }

    result.num = right;
    return result;
  }
  /**
   * 处理小数点左边整数部分
   * @param tleft 左边内容
   * @param fleft 左边格式
   * @returns {string} 返回处理结果
   * @private
   */


  function _dealWithLeft(tleft, fleft) {
    var left = "";
    var j = tleft.length - 1;
    var combo = -1,
        last = -1;
    var i = fleft.length - 1;

    for (; i >= 0; i--) {
      var ch = fleft.charAt(i);
      var c = tleft.charAt(j);

      switch (ch) {
        case "0":
          if (isEmpty(c)) {
            c = "0";
          }

          last = -1;
          left = c + left;
          j--;
          break;

        case "#":
          last = i;
          left = c + left;
          j--;
          break;

        case ",":
          if (!isEmpty(c)) {
            // 计算一个,分隔区间的长度
            var com = fleft.match(/,[#0]+/);

            if (com) {
              combo = com[0].length - 1;
            }

            left = "," + left;
          }

          break;

        default:
          left = ch + left;
          break;
      }
    }

    if (last > -1) {
      // 处理剩余字符
      var tll = tleft.substr(0, j + 1);
      left = left.substr(0, last) + tll + left.substr(last);
    }

    if (combo > 0) {
      // 处理,分隔区间
      var res = left.match(/[0-9]+,/);

      if (res) {
        res = res[0];
        var newstr = "",
            n = res.length - 1 - combo;

        for (; n >= 0; n = n - combo) {
          newstr = res.substr(n, combo) + "," + newstr;
        }

        var lres = res.substr(0, n + combo);

        if (!isEmpty(lres)) {
          newstr = lres + "," + newstr;
        }
      }

      left = left.replace(/[0-9]+,/, newstr);
    }

    return left;
  }

  BI.cjkEncode = function (text) {
    // alex:如果非字符串,返回其本身(cjkEncode(234) 返回 ""是不对的)
    if (typeof text !== "string") {
      return text;
    }

    var newText = "";

    for (var i = 0; i < text.length; i++) {
      var code = text.charCodeAt(i);

      if (code >= 128 || code === 91 || code === 93) {
        // 91 is "[", 93 is "]".
        newText += "[" + code.toString(16) + "]";
      } else {
        newText += text.charAt(i);
      }
    }

    return newText;
  };
  /**
   * 将cjkEncode处理过的字符串转化为原始字符串
   *
   * @static
   * @param text 需要做解码的字符串
   * @return {String} 解码后的字符串
   */


  BI.cjkDecode = function (text) {
    if (text == null) {
      return "";
    } // 查找没有 "[", 直接返回.  kunsnat:数字的时候, 不支持indexOf方法, 也是直接返回.


    if (!isNaN(text) || text.indexOf("[") == -1) {
      return text;
    }

    var newText = "";

    for (var i = 0; i < text.length; i++) {
      var ch = text.charAt(i);

      if (ch == "[") {
        var rightIdx = text.indexOf("]", i + 1);

        if (rightIdx > i + 1) {
          var subText = text.substring(i + 1, rightIdx); // james：主要是考虑[CDATA[]]这样的值的出现

          if (subText.length > 0) {
            ch = String.fromCharCode(eval("0x" + subText));
          }

          i = rightIdx;
        }
      }

      newText += ch;
    }

    return newText;
  }; // replace the html special tags


  var SPECIAL_TAGS = {
    "&": "&amp;",
    "\"": "&quot;",
    "<": "&lt;",
    ">": "&gt;",
    "\x20": "&nbsp;",
    "\n": "&#10;"
  };

  BI.htmlEncode = function (text) {
    return BI.isNull(text) ? "" : BI.replaceAll(text + "", BI.keys(SPECIAL_TAGS).join("|"), function (v) {
      return SPECIAL_TAGS[v] ? SPECIAL_TAGS[v] : v;
    });
  }; // html decode


  BI.htmlDecode = function (text) {
    return BI.isNull(text) ? "" : BI.replaceAll(text + "", BI.values(SPECIAL_TAGS).join("|"), function (v) {
      switch (v) {
        case "&amp;":
          return "&";

        case "&quot;":
          return "\"";

        case "&lt;":
          return "<";

        case "&gt;":
          return ">";

        case "&nbsp;":
          return " ";

        case "&#10;":
          return "\n";

        default:
          return v;
      }
    });
  };

  BI.cjkEncodeDO = function (o) {
    if (BI.isPlainObject(o)) {
      var result = {};

      BI._.each(o, function (v, k) {
        if (!(typeof v === "string")) {
          v = BI.jsonEncode(v);
        } // wei:bug 43338，如果key是中文，cjkencode后o的长度就加了1，ie9以下版本死循环，所以新建对象result。


        k = BI.cjkEncode(k);
        result[k] = BI.cjkEncode(v);
      });

      return result;
    }

    return o;
  };

  BI.jsonEncode = function (o) {
    // james:这个Encode是抄的EXT的
    var useHasOwn = !!{}.hasOwnProperty; // crashes Safari in some instances
    // var validRE = /^("(\\.|[^"\\\n\r])*?"|[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t])+?$/;

    var m = {
      "\b": "\\b",
      "\t": "\\t",
      "\n": "\\n",
      "\f": "\\f",
      "\r": "\\r",
      "\"": "\\\"",
      "\\": "\\\\"
    };

    var encodeString = function encodeString(s) {
      if (/["\\\x00-\x1f]/.test(s)) {
        return "\"" + s.replace(/([\x00-\x1f\\"])/g, function (a, b) {
          var c = m[b];

          if (c) {
            return c;
          }

          c = b.charCodeAt();
          return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
        }) + "\"";
      }

      return "\"" + s + "\"";
    };

    var encodeArray = function encodeArray(o) {
      var a = ["["],
          b,
          i,
          l = o.length,
          v;

      for (i = 0; i < l; i += 1) {
        v = o[i];

        switch (_typeof(v)) {
          case "undefined":
          case "function":
          case "unknown":
            break;

          default:
            if (b) {
              a.push(",");
            }

            a.push(v === null ? "null" : BI.jsonEncode(v));
            b = true;
        }
      }

      a.push("]");
      return a.join("");
    };

    if (typeof o === "undefined" || o === null) {
      return "null";
    } else if (BI.isArray(o)) {
      return encodeArray(o);
    } else if (o instanceof Date) {
      /*
       * alex:原来只是把年月日时分秒简单地拼成一个String,无法decode
       * 现在这么处理就可以decode了,但是JS.jsonDecode和Java.JSONObject也要跟着改一下
       */
      return BI.jsonEncode({
        __time__: o.getTime()
      });
    } else if (typeof o === "string") {
      return encodeString(o);
    } else if (typeof o === "number") {
      return isFinite(o) ? String(o) : "null";
    } else if (typeof o === "boolean") {
      return String(o);
    } else if (BI.isFunction(o)) {
      return String(o);
    }

    var a = ["{"],
        b,
        i,
        v;

    for (i in o) {
      if (!useHasOwn || o.hasOwnProperty(i)) {
        v = o[i];

        switch (_typeof(v)) {
          case "undefined":
          case "unknown":
            break;

          default:
            if (b) {
              a.push(",");
            }

            a.push(BI.jsonEncode(i), ":", v === null ? "null" : BI.jsonEncode(v));
            b = true;
        }
      }
    }

    a.push("}");
    return a.join("");
  };

  BI.jsonDecode = function (text) {
    try {
      // 注意0啊
      // var jo = $.parseJSON(text) || {};
      var jo = BI.$ ? BI.$.parseJSON(text) : _global.JSON.parse(text);

      if (jo == null) {
        jo = {};
      }
    } catch (e) {
      /*
       * richie:浏览器只支持标准的JSON字符串转换，而jQuery会默认调用浏览器的window.JSON.parse()函数进行解析
       * 比如：var str = "{'a':'b'}",这种形式的字符串转换为JSON就会抛异常
       */
      try {
        jo = new Function("return " + text)() || {};
      } catch (e) {// do nothing
      }

      if (jo == null) {
        jo = [];
      }
    }

    if (!_hasDateInJson(text)) {
      return jo;
    }

    function _hasDateInJson(json) {
      if (!json || typeof json !== "string") {
        return false;
      }

      return json.indexOf("__time__") != -1;
    }

    return function (o) {
      if (typeof o === "string") {
        return o;
      }

      if (o && o.__time__ != null) {
        return new Date(o.__time__);
      }

      for (var a in o) {
        if (o[a] == o || _typeof(o[a]) === "object" || BI._.isFunction(o[a])) {
          break;
        }

        o[a] = arguments.callee(o[a]);
      }

      return o;
    }(jo);
  };
  /**
   * 获取编码后的url
   * @param urlTemplate url模板
   * @param param 参数
   * @returns {*|String}
   * @example
   * BI.getEncodeURL("design/{tableName}/{fieldName}",{tableName: "A", fieldName: "a"}) //  design/A/a
   */


  BI.getEncodeURL = function (urlTemplate, param) {
    return BI.replaceAll(urlTemplate, "\\{(.*?)\\}", function (ori, str) {
      return BI.encodeURIComponent(BI.isObject(param) ? param[str] : param);
    });
  };

  BI.encodeURIComponent = function (url) {
    BI.specialCharsMap = BI.specialCharsMap || {};
    url = url || "";
    url = BI.replaceAll(url + "", BI.keys(BI.specialCharsMap || []).join("|"), function (str) {
      switch (str) {
        case "\\":
          return BI.specialCharsMap["\\\\"] || str;

        default:
          return BI.specialCharsMap[str] || str;
      }
    });
    return _global.encodeURIComponent(url);
  };

  BI.decodeURIComponent = function (url) {
    var reserveSpecialCharsMap = {};
    BI.each(BI.specialCharsMap, function (initialChar, encodeChar) {
      reserveSpecialCharsMap[encodeChar] = initialChar === "\\\\" ? "\\" : initialChar;
    });
    url = url || "";
    url = BI.replaceAll(url + "", BI.keys(reserveSpecialCharsMap || []).join("|"), function (str) {
      return reserveSpecialCharsMap[str] || str;
    });
    return _global.decodeURIComponent(url);
  };

  BI.contentFormat = function (cv, fmt) {
    if (isEmpty(cv)) {
      // 原值为空，返回空字符
      return "";
    }

    var text = cv.toString();

    if (isEmpty(fmt)) {
      // 格式为空，返回原字符
      return text;
    }

    if (fmt.match(/^T/)) {
      // T - 文本格式
      return text;
    } else if (fmt.match(/^D/)) {
      // D - 日期(时间)格式
      if (!(cv instanceof Date)) {
        if (typeof cv === "number") {
          // 毫秒数类型
          cv = new Date(cv);
        } else {
          //字符串类型转化为date类型
          cv = new Date(Date.parse(("" + cv).replace(/-|\./g, "/")));
        }
      }

      if (!isInvalidDate(cv) && !BI.isNull(cv)) {
        var needTrim = fmt.match(/^DT/);
        text = BI.date2Str(cv, fmt.substring(needTrim ? 2 : 1));
      }
    } else if (fmt.match(/E/)) {
      // 科学计数格式
      text = _eFormat(text, fmt);
    } else {
      // 数字格式
      text = _numberFormat(text, fmt);
    } // ¤ - 货币格式


    text = text.replace(/¤/g, "￥");
    return text;
  };
  /**
   * 将Java提供的日期格式字符串装换为JS识别的日期格式字符串
   * @class FR.parseFmt
   * @param fmt 日期格式
   * @returns {String}
   */


  BI.parseFmt = function (fmt) {
    if (!fmt) {
      return "";
    } //日期


    fmt = String(fmt) //年
    .replace(/y{4,}/g, "%Y") //yyyy的时候替换为Y
    .replace(/y{2}/g, "%y") //yy的时候替换为y
    //月
    .replace(/M{4,}/g, "%b") //MMMM的时候替换为b，八
    .replace(/M{3}/g, "%B") //MMM的时候替换为M，八月
    .replace(/M{2}/g, "%X") //MM的时候替换为X，08
    .replace(/M{1}/g, "%x") //M的时候替换为x，8
    .replace(/a{1}/g, "%p"); //天

    if (new RegExp("d{2,}", "g").test(fmt)) {
      fmt = fmt.replace(/d{2,}/g, "%d"); //dd的时候替换为d
    } else {
      fmt = fmt.replace(/d{1}/g, "%e"); //d的时候替换为j
    } //时


    if (new RegExp("h{2,}", "g").test(fmt)) {
      //12小时制
      fmt = fmt.replace(/h{2,}/g, "%I");
    } else {
      fmt = fmt.replace(/h{1}/g, "%I");
    }

    if (new RegExp("H{2,}", "g").test(fmt)) {
      //24小时制
      fmt = fmt.replace(/H{2,}/g, "%H");
    } else {
      fmt = fmt.replace(/H{1}/g, "%H");
    }

    fmt = fmt.replace(/m{2,}/g, "%M") //分
    //秒
    .replace(/s{2,}/g, "%S");
    return fmt;
  };
  /**
   * 把字符串按照对应的格式转化成日期对象
   *
   *      @example
   *      var result = BI.str2Date('2013-12-12', 'yyyy-MM-dd');//Thu Dec 12 2013 00:00:00 GMT+0800
   *
   * @class BI.str2Date
   * @param str 字符串
   * @param format 日期格式
   * @returns {*}
   */


  BI.str2Date = function (str, format) {
    if (typeof str != "string" || typeof format != "string") {
      return null;
    }

    var fmt = BI.parseFmt(format);
    return BI.parseDateTime(str, fmt);
  };
  /**
   * 把日期对象按照指定格式转化成字符串
   *
   *      @example
   *      var date = new Date('Thu Dec 12 2013 00:00:00 GMT+0800');
   *      var result = BI.date2Str(date, 'yyyy-MM-dd');//2013-12-12
   *
   * @class BI.date2Str
   * @param date 日期
   * @param format 日期格式
   * @returns {String}
   */


  BI.date2Str = function (date, format) {
    if (!date) {
      return "";
    } // O(len(format))


    var len = format.length,
        result = "";

    if (len > 0) {
      var flagch = format.charAt(0),
          start = 0,
          str = flagch;

      for (var i = 1; i < len; i++) {
        var ch = format.charAt(i);

        if (flagch !== ch) {
          result += compileJFmt({
            char: flagch,
            str: str,
            len: i - start
          }, date);
          flagch = ch;
          start = i;
          str = flagch;
        } else {
          str += ch;
        }
      }

      result += compileJFmt({
        char: flagch,
        str: str,
        len: len - start
      }, date);
    }

    return result;

    function compileJFmt(jfmt, date) {
      var str = jfmt.str,
          len = jfmt.len,
          ch = jfmt["char"];

      switch (ch) {
        case "E":
          // 星期
          str = BI.getFullDayName(date.getDay());
          break;

        case "y":
          // 年
          if (len <= 3) {
            str = (date.getFullYear() + "").slice(2, 4);
          } else {
            str = date.getFullYear();
          }

          break;

        case "M":
          // 月
          if (len > 2) {
            str = BI.getMonthName(date.getMonth());
          } else if (len < 2) {
            str = date.getMonth() + 1;
          } else {
            str = BI.leftPad(date.getMonth() + 1 + "", 2, "0");
          }

          break;

        case "d":
          // 日
          if (len > 1) {
            str = BI.leftPad(date.getDate() + "", 2, "0");
          } else {
            str = date.getDate();
          }

          break;

        case "h":
          // 时(12)
          var hour = date.getHours() % 12;

          if (hour === 0) {
            hour = 12;
          }

          if (len > 1) {
            str = BI.leftPad(hour + "", 2, "0");
          } else {
            str = hour;
          }

          break;

        case "H":
          // 时(24)
          if (len > 1) {
            str = BI.leftPad(date.getHours() + "", 2, "0");
          } else {
            str = date.getHours();
          }

          break;

        case "m":
          if (len > 1) {
            str = BI.leftPad(date.getMinutes() + "", 2, "0");
          } else {
            str = date.getMinutes();
          }

          break;

        case "s":
          if (len > 1) {
            str = BI.leftPad(date.getSeconds() + "", 2, "0");
          } else {
            str = date.getSeconds();
          }

          break;

        case "a":
          str = date.getHours() < 12 ? "am" : "pm";
          break;

        case "z":
          str = BI.getTimezone(date);
          break;

        default:
          str = jfmt.str;
          break;
      }

      return str;
    }
  };

  BI.object2Number = function (value) {
    if (value == null) {
      return 0;
    }

    if (typeof value === "number") {
      return value;
    }

    var str = value + "";

    if (str.indexOf(".") === -1) {
      return parseInt(str);
    }

    return parseFloat(str);
  };

  BI.object2Date = function (obj) {
    if (obj == null) {
      return new Date();
    }

    if (obj instanceof Date) {
      return obj;
    } else if (typeof obj === "number") {
      return new Date(obj);
    }

    var str = obj + "";
    str = str.replace(/-/g, "/");
    var dt = new Date(str);

    if (!isInvalidDate(dt)) {
      return dt;
    }

    return new Date();
  };

  BI.object2Time = function (obj) {
    if (obj == null) {
      return new Date();
    }

    if (obj instanceof Date) {
      return obj;
    }

    var str = obj + "";
    str = str.replace(/-/g, "/");
    var dt = new Date(str);

    if (!isInvalidDate(dt)) {
      return dt;
    }

    if (str.indexOf("/") === -1 && str.indexOf(":") !== -1) {
      dt = new Date("1970/01/01 " + str);

      if (!isInvalidDate(dt)) {
        return dt;
      }
    }

    dt = BI.parseDateTime(str, "HH:mm:ss");

    if (!isInvalidDate(dt)) {
      return dt;
    }

    return new Date();
  };
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(27)))

/***/ }),
/* 149 */
/***/ (function(module, exports) {

/**
 * 对数组对象的扩展
 * @class Array
 */
BI._.extend(BI, {
  pushArray: function pushArray(sArray, array) {
    for (var i = 0; i < array.length; i++) {
      sArray.push(array[i]);
    }
  },
  pushDistinct: function pushDistinct(sArray, obj) {
    if (!BI.contains(sArray, obj)) {
      sArray.push(obj);
    }
  },
  pushDistinctArray: function pushDistinctArray(sArray, array) {
    for (var i = 0, len = array.length; i < len; i++) {
      BI.pushDistinct(sArray, array[i]);
    }
  }
});

/***/ }),
/* 150 */
/***/ (function(module, exports) {

/** Constants used for time computations */
BI.Date = BI.Date || {};
BI.Date.SECOND = 1000;
BI.Date.MINUTE = 60 * BI.Date.SECOND;
BI.Date.HOUR = 60 * BI.Date.MINUTE;
BI.Date.DAY = 24 * BI.Date.HOUR;
BI.Date.WEEK = 7 * BI.Date.DAY; // Monday first, etc.

BI.Date._FD = 1; // short month names

BI.Date._SMN = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
/** Adds the number of days array to the Date object. */

BI.Date._MD = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 实际上无论周几作为一周的第一天，周初周末都是在-6-0间做偏移，用一个数组就可以

BI.Date._OFFSET = [0, -1, -2, -3, -4, -5, -6];

BI._.extend(BI, {
  /**
   * 获取时区
   * @returns {String}
   */
  getTimezone: function getTimezone(date) {
    return date.toString().replace(/^.* (?:\((.*)\)|([A-Z]{1,4})(?:[\-+][0-9]{4})?(?: -?\d+)?)$/, "$1$2").replace(/[^A-Z]/g, "");
  },

  /** Returns the number of days in the current month */
  getMonthDays: function getMonthDays(date, month) {
    var year = date.getFullYear();

    if (typeof month === "undefined") {
      month = date.getMonth();
    }

    if (0 == year % 4 && (0 != year % 100 || 0 == year % 400) && month == 1) {
      return 29;
    }

    return BI.Date._MD[month];
  },

  /**
   * 获取每月的最后一天
   * @returns {Date}
   */
  getLastDateOfMonth: function getLastDateOfMonth(date) {
    return BI.getDate(date.getFullYear(), date.getMonth(), BI.getMonthDays(date));
  },

  /** Returns the number of day in the year. */
  getDayOfYear: function getDayOfYear(date) {
    var now = BI.getDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
    var then = BI.getDate(date.getFullYear(), 0, 0, 0, 0, 0);
    var time = now - then;
    return Math.floor(time / BI.Date.DAY);
  },

  /** Returns the number of the week in year, as defined in ISO 8601. */
  getWeekNumber: function getWeekNumber(date) {
    var d = BI.getDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
    var week = d.getDay();
    var startOfWeek = BI.StartOfWeek % 7;
    var middleDay = (startOfWeek + 3) % 7;
    middleDay = middleDay || 7; // 偏移到周周首之前需要多少天

    var offsetWeekStartCount = week < startOfWeek ? 7 + week - startOfWeek : week - startOfWeek;
    var offsetWeekMiddleCount = middleDay < startOfWeek ? 7 + middleDay - startOfWeek : middleDay - startOfWeek;
    d.setDate(d.getDate() - offsetWeekStartCount + offsetWeekMiddleCount);
    var ms = d.valueOf();
    d.setMonth(0);
    d.setDate(1);
    return Math.floor((ms - d.valueOf()) / (7 * 864e5)) + 1;
  },
  getQuarter: function getQuarter(date) {
    return Math.floor(date.getMonth() / 3) + 1;
  },
  // 离当前时间多少天的时间
  getOffsetDate: function getOffsetDate(date, offset) {
    return BI.getDate(BI.getTime(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()) + offset * 864e5);
  },
  getOffsetQuarter: function getOffsetQuarter(date, n) {
    var dt = BI.getDate(BI.getTime(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));
    var day = dt.getDate();
    var monthDay = BI.getMonthDays(BI.getDate(dt.getFullYear(), dt.getMonth() + BI.parseInt(n) * 3, 1));

    if (day > monthDay) {
      day = monthDay;
    }

    dt.setDate(day);
    dt.setMonth(dt.getMonth() + parseInt(n) * 3);
    return dt;
  },
  // 得到本季度的起始月份
  getQuarterStartMonth: function getQuarterStartMonth(date) {
    var quarterStartMonth = 0;
    var nowMonth = date.getMonth();

    if (nowMonth < 3) {
      quarterStartMonth = 0;
    }

    if (2 < nowMonth && nowMonth < 6) {
      quarterStartMonth = 3;
    }

    if (5 < nowMonth && nowMonth < 9) {
      quarterStartMonth = 6;
    }

    if (nowMonth > 8) {
      quarterStartMonth = 9;
    }

    return quarterStartMonth;
  },
  // 获得本季度的起始日期
  getQuarterStartDate: function getQuarterStartDate(date) {
    return BI.getDate(date.getFullYear(), BI.getQuarterStartMonth(date), 1);
  },
  // 得到本季度的结束日期
  getQuarterEndDate: function getQuarterEndDate(date) {
    var quarterEndMonth = BI.getQuarterStartMonth(date) + 2;
    return BI.getDate(date.getFullYear(), quarterEndMonth, BI.getMonthDays(date, quarterEndMonth));
  },
  // 指定日期n个月之前或之后的日期
  getOffsetMonth: function getOffsetMonth(date, n) {
    var dt = BI.getDate(BI.getTime(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));
    var day = dt.getDate();
    var monthDay = BI.getMonthDays(BI.getDate(dt.getFullYear(), dt.getMonth() + parseInt(n), 1));

    if (day > monthDay) {
      day = monthDay;
    }

    dt.setDate(day);
    dt.setMonth(dt.getMonth() + parseInt(n));
    return dt;
  },
  // 获得本周的起始日期
  getWeekStartDate: function getWeekStartDate(date) {
    var w = date.getDay();
    var startOfWeek = BI.StartOfWeek % 7;
    return BI.getOffsetDate(date, BI.Date._OFFSET[w < startOfWeek ? 7 + w - startOfWeek : w - startOfWeek]);
  },
  // 得到本周的结束日期
  getWeekEndDate: function getWeekEndDate(date) {
    var w = date.getDay();
    var startOfWeek = BI.StartOfWeek % 7;
    return BI.getOffsetDate(date, BI.Date._OFFSET[w < startOfWeek ? 7 + w - startOfWeek : w - startOfWeek] + 6);
  },
  getFullDayName: function getFullDayName(index) {
    return [BI.i18nText("BI-Basic_Sunday"), BI.i18nText("BI-Basic_Monday"), BI.i18nText("BI-Basic_Tuesday"), BI.i18nText("BI-Basic_Wednesday"), BI.i18nText("BI-Basic_Thursday"), BI.i18nText("BI-Basic_Friday"), BI.i18nText("BI-Basic_Saturday"), BI.i18nText("BI-Basic_Sunday")][index];
  },
  getShortDayName: function getShortDayName(index) {
    return [BI.i18nText("BI-Basic_Simple_Sunday"), BI.i18nText("BI-Basic_Simple_Monday"), BI.i18nText("BI-Basic_Simple_Tuesday"), BI.i18nText("BI-Basic_Simple_Wednesday"), BI.i18nText("BI-Basic_Simple_Thursday"), BI.i18nText("BI-Basic_Simple_Friday"), BI.i18nText("BI-Basic_Simple_Saturday"), BI.i18nText("BI-Basic_Simple_Sunday")][index];
  },
  getMonthName: function getMonthName(index) {
    return [BI.i18nText("BI-Basic_January"), BI.i18nText("BI-Basic_February"), BI.i18nText("BI-Basic_March"), BI.i18nText("BI-Basic_April"), BI.i18nText("BI-Basic_May"), BI.i18nText("BI-Basic_June"), BI.i18nText("BI-Basic_July"), BI.i18nText("BI-Basic_August"), BI.i18nText("BI-Basic_September"), BI.i18nText("BI-Basic_October"), BI.i18nText("BI-Basic_November"), BI.i18nText("BI-Basic_December")][index];
  },
  getQuarterName: function getQuarterName(index) {
    return ["", BI.i18nText("BI-Quarter_1"), BI.i18nText("BI-Quarter_2"), BI.i18nText("BI-Quarter_3"), BI.i18nText("BI-Quarter_4")][index];
  },
  // 格式化打印日期
  print: function print(date, str) {
    var m = date.getMonth();
    var d = date.getDate();
    var y = date.getFullYear();
    var yWith4number = y + "";

    while (yWith4number.length < 4) {
      yWith4number = "0" + yWith4number;
    }

    var wn = BI.getWeekNumber(date);
    var qr = BI.getQuarter(date);
    var w = date.getDay();
    var s = {};
    var hr = date.getHours();
    var pm = hr >= 12;
    var ir = pm ? hr - 12 : hr;
    var dy = BI.getDayOfYear(date);

    if (ir == 0) {
      ir = 12;
    }

    var min = date.getMinutes();
    var sec = date.getSeconds();
    s["%a"] = BI.getShortDayName(w); // abbreviated weekday name [FIXME: I18N]

    s["%A"] = BI.getFullDayName(w); // full weekday name

    s["%b"] = BI.Date._SMN[m]; // abbreviated month name [FIXME: I18N]

    s["%B"] = BI.getMonthName(m); // full month name
    // FIXME: %c : preferred date and time representation for the current locale

    s["%C"] = 1 + Math.floor(y / 100); // the century number

    s["%d"] = d < 10 ? "0" + d : d; // the day of the month (range 01 to 31)

    s["%e"] = d; // the day of the month (range 1 to 31)
    // FIXME: %D : american date style: %m/%d/%y
    // FIXME: %E, %F, %G, %g, %h (man strftime)

    s["%H"] = hr < 10 ? "0" + hr : hr; // hour, range 00 to 23 (24h format)

    s["%I"] = ir < 10 ? "0" + ir : ir; // hour, range 01 to 12 (12h format)

    s["%j"] = dy < 100 ? dy < 10 ? "00" + dy : "0" + dy : dy; // day of the year (range 001 to 366)

    s["%k"] = hr + ""; // hour, range 0 to 23 (24h format)

    s["%l"] = ir + ""; // hour, range 1 to 12 (12h format)

    s["%X"] = m < 9 ? "0" + (1 + m) : 1 + m; // month, range 01 to 12

    s["%x"] = m + 1; // month, range 1 to 12

    s["%M"] = min < 10 ? "0" + min : min; // minute, range 00 to 59

    s["%n"] = "\n"; // a newline character

    s["%p"] = pm ? "PM" : "AM";
    s["%P"] = pm ? "pm" : "am"; // FIXME: %r : the time in am/pm notation %I:%M:%S %p
    // FIXME: %R : the time in 24-hour notation %H:%M

    s["%s"] = Math.floor(date.getTime() / 1000);
    s["%S"] = sec < 10 ? "0" + sec : sec; // seconds, range 00 to 59

    s["%t"] = "\t"; // a tab character
    // FIXME: %T : the time in 24-hour notation (%H:%M:%S)

    s["%U"] = s["%W"] = s["%V"] = wn < 10 ? "0" + wn : wn;
    s["%u"] = w + 1; // the day of the week (range 1 to 7, 1 = MON)

    s["%w"] = w; // the day of the week (range 0 to 6, 0 = SUN)
    // FIXME: %x : preferred date representation for the current locale without the time
    // FIXME: %X : preferred time representation for the current locale without the date

    s["%y"] = yWith4number.substr(2, 2); // year without the century (range 00 to 99)

    s["%Y"] = yWith4number; // year with the century

    s["%%"] = "%"; // a literal '%' character

    s["%q"] = "0" + qr;
    s["%Q"] = qr;
    var re = /%./g;

    BI.isKhtml = BI.isKhtml || function () {
      if (!_global.navigator) {
        return false;
      }

      return /Konqueror|Safari|KHTML/i.test(navigator.userAgent);
    }; // 包含年周的格式化，ISO8601标准周的计数会影响年


    if ((str.indexOf("%Y") !== -1 || str.indexOf("%y") !== -1) && (str.indexOf("%W") !== -1 || str.indexOf("%U") !== -1 || str.indexOf("%V") !== -1)) {
      switch (wn) {
        // 如果周数是1，但是当前却在12月，表示此周数为下一年的
        case 1:
          if (m === 11) {
            s["%y"] = parseInt(s["%y"]) + 1;
            s["%Y"] = parseInt(s["%Y"]) + 1;
          }

          break;
        // 如果周数是53，但是当前却在1月，表示此周数为上一年的

        case 53:
          if (m === 0) {
            s["%y"] = parseInt(s["%y"]) - 1;
            s["%Y"] = parseInt(s["%Y"]) - 1;
          }

          break;

        default:
          break;
      }
    }

    if (!BI.isKhtml()) {
      return str.replace(re, function (par) {
        return s[par] || par;
      });
    }

    var a = str.match(re);

    for (var i = 0; i < a.length; i++) {
      var tmp = s[a[i]];

      if (tmp) {
        re = new RegExp(a[i], "g");
        str = str.replace(re, tmp);
      }
    }

    return str;
  }
});

/***/ }),
/* 151 */
/***/ (function(module, exports) {

/**
 * 基本的函数
 * Created by GUY on 2015/6/24.
 */
BI.Func = BI.Func || {};

BI._.extend(BI.Func, {
  /**
   * 创建唯一的名字
   * @param array
   * @param name
   * @returns {*}
   */
  createDistinctName: function createDistinctName(array, name) {
    var src = name,
        idx = 1;
    name = name || "";

    while (true) {
      if (BI.every(array, function (i, item) {
        return BI.isKey(item) ? item !== name : item.name !== name;
      })) {
        break;
      }

      name = src + idx++;
    }

    return name;
  },

  /**
   * 获取字符宽度
   * @param str
   * @return {number}
   */
  getGBWidth: function getGBWidth(str) {
    str = str + "";
    str = str.replace(/[^\x00-\xff]/g, "xx");
    return Math.ceil(str.length / 2);
  },

  /**
   * 获取搜索结果
   * @param items
   * @param keyword
   * @param param  搜索哪个属性
   */
  getSearchResult: function getSearchResult(items, keyword, param) {
    var isArray = BI.isArray(items);
    items = isArray ? BI.flatten(items) : items;
    param || (param = "text");

    if (!BI.isKey(keyword)) {
      return {
        find: items,
        match: isArray ? [] : {}
      };
    }

    var t, text, py;
    keyword = BI.toUpperCase(keyword);
    var matched = isArray ? [] : {},
        find = isArray ? [] : {};
    BI.each(items, function (i, item) {
      // 兼容item为null的处理
      if (BI.isNull(item)) {
        return;
      }

      t = BI.stripEL(item);
      text = BI.find([t[param], t.text, t.value, t.name, t], function (index, val) {
        return BI.isNotNull(val);
      });
      if (BI.isNull(text) || BI.isObject(text)) return;
      py = BI.makeFirstPY(text, {
        splitChar: "\u200B"
      });
      text = BI.toUpperCase(text);
      py = BI.toUpperCase(py);
      var pidx;

      if (text.indexOf(keyword) > -1) {
        if (text === keyword) {
          isArray ? matched.push(item) : matched[i] = item;
        } else {
          isArray ? find.push(item) : find[i] = item;
        } // BI-56386 这边两个pid / text.length是为了防止截取的首字符串不是完整的，但光这样做还不够，即时错位了，也不能说明就不符合条件

      } else if (pidx = py.indexOf(keyword), pidx > -1) {
        if (text === keyword || keyword.length === text.length) {
          isArray ? matched.push(item) : matched[i] = item;
        } else {
          isArray ? find.push(item) : find[i] = item;
        }
      }
    });
    return {
      match: matched,
      find: find
    };
  },

  /**
   * 获取按GB2312排序的结果
   * @param items
   * @param key
   * @return {any[]}
   */
  getSortedResult: function getSortedResult(items, key) {
    var getTextOfItem = BI.isFunction(key) ? key : function (item, key) {
      if (BI.isNotNull(key)) {
        return item[key];
      }

      if (BI.isNotNull(item.text)) {
        return item.text;
      }

      if (BI.isNotNull(item.value)) {
        return item.value;
      }

      return item;
    };
    return items.sort(function (item1, item2) {
      var str1 = getTextOfItem(item1, key);
      var str2 = getTextOfItem(item2, key);

      if (BI.isNull(str1) && BI.isNull(str2)) {
        return 0;
      }

      if (BI.isNull(str1)) {
        return -1;
      }

      if (BI.isNull(str2)) {
        return 1;
      }

      if (str1 === str2) {
        return 0;
      }

      var len1 = str1.length,
          len2 = str2.length;

      for (var i = 0; i < len1 && i < len2; i++) {
        var char1 = str1[i];
        var char2 = str2[i];

        if (char1 !== char2) {
          // 找不到的字符都往后面放
          return (BI.isNull(BI.CODE_INDEX[char1]) ? BI.MAX : BI.CODE_INDEX[char1]) - (BI.isNull(BI.CODE_INDEX[char2]) ? BI.MAX : BI.CODE_INDEX[char2]);
        }
      }

      return len1 - len2;
    });
  }
});

BI._.extend(BI, {
  beforeFunc: function beforeFunc(sFunc, func) {
    var __self = sFunc;
    return function () {
      if (func.apply(sFunc, arguments) === false) {
        return false;
      }

      return __self.apply(sFunc, arguments);
    };
  },
  afterFunc: function afterFunc(sFunc, func) {
    var __self = sFunc;
    return function () {
      var ret = __self.apply(sFunc, arguments);

      if (ret === false) {
        return false;
      }

      func.apply(sFunc, arguments);
      return ret;
    };
  }
});

/***/ }),
/* 152 */
/***/ (function(module, exports) {

BI._.extend(BI, {
  // 给Number类型增加一个add方法，调用起来更加方便。
  add: function add(num, arg) {
    return accAdd(arg, num);
    /**
     ** 加法函数，用来得到精确的加法结果
     ** 说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。
     ** 调用：accAdd(arg1,arg2)
     ** 返回值：arg1加上arg2的精确结果
     **/

    function accAdd(arg1, arg2) {
      var r1, r2, m, c;

      try {
        r1 = arg1.toString().split(".")[1].length;
      } catch (e) {
        r1 = 0;
      }

      try {
        r2 = arg2.toString().split(".")[1].length;
      } catch (e) {
        r2 = 0;
      }

      c = Math.abs(r1 - r2);
      m = Math.pow(10, Math.max(r1, r2));

      if (c > 0) {
        var cm = Math.pow(10, c);

        if (r1 > r2) {
          arg1 = Number(arg1.toString().replace(".", ""));
          arg2 = Number(arg2.toString().replace(".", "")) * cm;
        } else {
          arg1 = Number(arg1.toString().replace(".", "")) * cm;
          arg2 = Number(arg2.toString().replace(".", ""));
        }
      } else {
        arg1 = Number(arg1.toString().replace(".", ""));
        arg2 = Number(arg2.toString().replace(".", ""));
      }

      return (arg1 + arg2) / m;
    }
  },
  // 给Number类型增加一个sub方法，调用起来更加方便。
  sub: function sub(num, arg) {
    return accSub(num, arg);
    /**
     ** 减法函数，用来得到精确的减法结果
     ** 说明：javascript的减法结果会有误差，在两个浮点数相减的时候会比较明显。这个函数返回较为精确的减法结果。
     ** 调用：accSub(arg1,arg2)
     ** 返回值：arg1加上arg2的精确结果
     **/

    function accSub(arg1, arg2) {
      var r1, r2, m, n;

      try {
        r1 = arg1.toString().split(".")[1].length;
      } catch (e) {
        r1 = 0;
      }

      try {
        r2 = arg2.toString().split(".")[1].length;
      } catch (e) {
        r2 = 0;
      }

      m = Math.pow(10, Math.max(r1, r2)); // last modify by deeka //动态控制精度长度

      n = r1 >= r2 ? r1 : r2;
      return ((arg1 * m - arg2 * m) / m).toFixed(n);
    }
  },
  // 给Number类型增加一个mul方法，调用起来更加方便。
  mul: function mul(num, arg) {
    return accMul(arg, num);
    /**
     ** 乘法函数，用来得到精确的乘法结果
     ** 说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。
     ** 调用：accMul(arg1,arg2)
     ** 返回值：arg1乘以 arg2的精确结果
     **/

    function accMul(arg1, arg2) {
      var m = 0,
          s1 = arg1.toString(),
          s2 = arg2.toString();

      try {
        m += s1.split(".")[1].length;
      } catch (e) {}

      try {
        m += s2.split(".")[1].length;
      } catch (e) {}

      return Number(s1.replace(".", "")) * Number(s2.replace(".", "")) / Math.pow(10, m);
    }
  },
  // 给Number类型增加一个div方法，调用起来更加方便。
  div: function div(num, arg) {
    return accDivide(num, arg);
    /**
     * Return digits length of a number
     * @param {*number} num Input number
     */

    function digitLength(num) {
      // Get digit length of e
      var eSplit = num.toString().split(/[eE]/);
      var len = (eSplit[0].split(".")[1] || "").length - +(eSplit[1] || 0);
      return len > 0 ? len : 0;
    }
    /**
     * 把小数转成整数，支持科学计数法。如果是小数则放大成整数
     * @param {*number} num 输入数
     */


    function float2Fixed(num) {
      if (num.toString().indexOf("e") === -1) {
        return Number(num.toString().replace(".", ""));
      }

      var dLen = digitLength(num);
      return dLen > 0 ? num * Math.pow(10, dLen) : num;
    }
    /**
     * 精确乘法
     */


    function times(num1, num2) {
      var others = [];

      for (var _i = 2; _i < arguments.length; _i++) {
        others[_i - 2] = arguments[_i];
      }

      if (others.length > 0) {
        return times.apply(void 0, [times(num1, num2), others[0]].concat(others.slice(1)));
      }

      var num1Changed = float2Fixed(num1);
      var num2Changed = float2Fixed(num2);
      var baseNum = digitLength(num1) + digitLength(num2);
      var leftValue = num1Changed * num2Changed;
      return leftValue / Math.pow(10, baseNum);
    }
    /**
     * 精确除法
     */


    function accDivide(num1, num2) {
      var others = [];

      for (var _i = 2; _i < arguments.length; _i++) {
        others[_i - 2] = arguments[_i];
      }

      if (others.length > 0) {
        return accDivide.apply(void 0, [accDivide(num1, num2), others[0]].concat(others.slice(1)));
      }

      var num1Changed = float2Fixed(num1);
      var num2Changed = float2Fixed(num2);
      return times(num1Changed / num2Changed, Math.pow(10, digitLength(num2) - digitLength(num1)));
    }
  }
});

/***/ }),
/* 153 */
/***/ (function(module, exports) {

/**
 * 对字符串对象的扩展
 * @class String
 */
BI._.extend(BI, {
  /**
   * 判断字符串是否已指定的字符串开始
   * @param str source字符串
   * @param {String} startTag   指定的开始字符串
   * @return {Boolean}  如果字符串以指定字符串开始则返回true，否则返回false
   */
  startWith: function startWith(str, startTag) {
    str = str || "";

    if (startTag == null || startTag == "" || str.length === 0 || startTag.length > str.length) {
      return false;
    }

    return str.substr(0, startTag.length) == startTag;
  },

  /**
   * 判断字符串是否以指定的字符串结束
   * @param str source字符串
   * @param {String} endTag 指定的字符串
   * @return {Boolean}  如果字符串以指定字符串结束则返回true，否则返回false
   */
  endWith: function endWith(str, endTag) {
    if (endTag == null || endTag == "" || str.length === 0 || endTag.length > str.length) {
      return false;
    }

    return str.substring(str.length - endTag.length) == endTag;
  },

  /**
   * 获取url中指定名字的参数
   * @param str source字符串
   * @param {String} name 参数的名字
   * @return {String} 参数的值
   */
  getQuery: function getQuery(str, name) {
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
    var r = str.substr(str.indexOf("?") + 1).match(reg);

    if (r) {
      return unescape(r[2]);
    }

    return null;
  },

  /**
   * 给url加上给定的参数
   * @param str source字符串
   * @param {Object} paras 参数对象，是一个键值对对象
   * @return {String} 添加了给定参数的url
   */
  appendQuery: function appendQuery(str, paras) {
    if (!paras) {
      return str;
    }

    var src = str; // 没有问号说明还没有参数

    if (src.indexOf("?") === -1) {
      src += "?";
    } // 如果以问号结尾，说明没有其他参数


    if (BI.endWith(src, "?") !== false) {} else {
      src += "&";
    }

    BI._.each(paras, function (value, name) {
      if (typeof name === "string") {
        src += name + "=" + value + "&";
      }
    });

    src = src.substr(0, src.length - 1);
    return src;
  },

  /**
   * 将所有符合第一个字符串所表示的字符串替换成为第二个字符串
   * @param str source字符串
   * @param {String} s1 要替换的字符串的正则表达式
   * @param {String} s2 替换的结果字符串
   * @returns {String} 替换后的字符串
   */
  replaceAll: function replaceAll(str, s1, s2) {
    return BI.isString(str) ? str.replace(new RegExp(s1, "gm"), s2) : str;
  },

  /**
   * 总是让字符串以指定的字符开头
   * @param str source字符串
   * @param {String} start 指定的字符
   * @returns {String} 以指定字符开头的字符串
   */
  perfectStart: function perfectStart(str, start) {
    if (BI.startWith(str, start)) {
      return str;
    }

    return start + str;
  },

  /**
   * 获取字符串中某字符串的所有项位置数组
   * @param str source字符串
   * @param {String} sub 子字符串
   * @return {Number[]} 子字符串在父字符串中出现的所有位置组成的数组
   */
  allIndexOf: function allIndexOf(str, sub) {
    if (typeof sub !== "string") {
      return [];
    }

    var location = [];
    var offset = 0;

    while (str.length > 0) {
      var loc = str.indexOf(sub);

      if (loc === -1) {
        break;
      }

      location.push(offset + loc);
      str = str.substring(loc + sub.length, str.length);
      offset += loc + sub.length;
    }

    return location;
  }
});

/***/ }),
/* 154 */
/***/ (function(module, exports) {

/**
 * 汉字拼音索引
 */
!function () {
  var _ChineseFirstPY = ""; // 此处收录了375个多音字,数据来自于http://www.51windows.net/pages/pinyin.asp

  var oMultiDiff = {
    19969: "DZ",
    19975: "WM",
    19988: "QJ",
    20048: "YL",
    20056: "SC",
    20060: "NM",
    20094: "QG",
    20127: "QJ",
    20167: "QC",
    20193: "YG",
    20250: "KH",
    20256: "ZC",
    20282: "SC",
    20285: "QJG",
    20291: "TD",
    20314: "YD",
    20315: "BF",
    20340: "NE",
    20375: "TD",
    20389: "YJ",
    20391: "CZ",
    20415: "PB",
    20446: "YS",
    20447: "SQ",
    20504: "TC",
    20608: "KG",
    20854: "QJ",
    20857: "ZC",
    20911: "PF",
    20985: "AW",
    21032: "PB",
    21048: "XQ",
    21049: "SC",
    21089: "YS",
    21119: "JC",
    21242: "SB",
    21273: "SC",
    21305: "YP",
    21306: "QO",
    21330: "ZC",
    21333: "SDC",
    21345: "QK",
    21378: "CA",
    21397: "SC",
    21414: "XS",
    21442: "SC",
    21477: "JG",
    21480: "TD",
    21484: "ZS",
    21494: "YX",
    21505: "YX",
    21512: "HG",
    21523: "XH",
    21537: "PB",
    21542: "PF",
    21549: "KH",
    21571: "E",
    21574: "DA",
    21588: "TD",
    21589: "O",
    21618: "ZC",
    21621: "KHA",
    21632: "ZJ",
    21654: "KG",
    21679: "LKG",
    21683: "KH",
    21710: "A",
    21719: "YH",
    21734: "WOE",
    21769: "A",
    21780: "WN",
    21804: "XH",
    21834: "A",
    21899: "ZD",
    21903: "RN",
    21908: "WO",
    21939: "ZC",
    21956: "SA",
    21964: "YA",
    21970: "TD",
    22003: "A",
    22031: "JG",
    22040: "XS",
    22060: "ZC",
    22066: "ZC",
    22079: "MH",
    22129: "XJ",
    22179: "XA",
    22237: "NJ",
    22244: "TD",
    22280: "JQ",
    22300: "YH",
    22313: "XW",
    22331: "YQ",
    22343: "YJ",
    22351: "PH",
    22395: "DC",
    22412: "TD",
    22484: "PB",
    22500: "PB",
    22534: "ZD",
    22549: "DH",
    22561: "PB",
    22612: "TD",
    22771: "KQ",
    22831: "HB",
    22841: "JG",
    22855: "QJ",
    22865: "XQ",
    23013: "ML",
    23081: "WM",
    23487: "SX",
    23558: "QJ",
    23561: "YW",
    23586: "YW",
    23614: "YW",
    23615: "SN",
    23631: "PB",
    23646: "ZS",
    23663: "ZT",
    23673: "YG",
    23762: "TD",
    23769: "ZS",
    23780: "QJ",
    23884: "QK",
    24055: "XH",
    24113: "DC",
    24162: "ZC",
    24191: "GA",
    24273: "QJ",
    24324: "NL",
    24377: "TD",
    24378: "QJ",
    24439: "PF",
    24554: "ZS",
    24683: "TD",
    24694: "WE",
    24733: "LK",
    24925: "TN",
    25094: "ZG",
    25100: "XQ",
    25103: "XH",
    25153: "PB",
    25170: "PB",
    25179: "KG",
    25203: "PB",
    25240: "ZS",
    25282: "FB",
    25303: "NA",
    25324: "KG",
    25341: "ZY",
    25373: "WZ",
    25375: "XJ",
    25384: "A",
    25457: "A",
    25528: "SD",
    25530: "SC",
    25552: "TD",
    25774: "ZC",
    25874: "ZC",
    26044: "YW",
    26080: "WM",
    26292: "PB",
    26333: "PB",
    26355: "ZY",
    26366: "CZ",
    26397: "ZC",
    26399: "QJ",
    26415: "ZS",
    26451: "SB",
    26526: "ZC",
    26552: "JG",
    26561: "TD",
    26588: "JG",
    26597: "CZ",
    26629: "ZS",
    26638: "YL",
    26646: "XQ",
    26653: "KG",
    26657: "XJ",
    26727: "HG",
    26894: "ZC",
    26937: "ZS",
    26946: "ZC",
    26999: "KJ",
    27099: "KJ",
    27449: "YQ",
    27481: "XS",
    27542: "ZS",
    27663: "ZS",
    27748: "TS",
    27784: "SC",
    27788: "ZD",
    27795: "TD",
    27812: "O",
    27850: "PB",
    27852: "MB",
    27895: "SL",
    27898: "PL",
    27973: "QJ",
    27981: "KH",
    27986: "HX",
    27994: "XJ",
    28044: "YC",
    28065: "WG",
    28177: "SM",
    28267: "QJ",
    28291: "KH",
    28337: "ZQ",
    28463: "TL",
    28548: "DC",
    28601: "TD",
    28689: "PB",
    28805: "JG",
    28820: "QG",
    28846: "PB",
    28952: "TD",
    28975: "ZC",
    29100: "A",
    29325: "QJ",
    29575: "SL",
    29602: "FB",
    30010: "TD",
    30044: "CX",
    30058: "PF",
    30091: "YSP",
    30111: "YN",
    30229: "XJ",
    30427: "SC",
    30465: "SX",
    30631: "YQ",
    30655: "QJ",
    30684: "QJG",
    30707: "SD",
    30729: "XH",
    30796: "LG",
    30917: "PB",
    31074: "NM",
    31085: "JZ",
    31109: "SC",
    31181: "ZC",
    31192: "MLB",
    31293: "JQ",
    31400: "YX",
    31584: "YJ",
    31896: "ZN",
    31909: "ZY",
    31995: "XJ",
    32321: "PF",
    32327: "ZY",
    32418: "HG",
    32420: "XQ",
    32421: "HG",
    32438: "LG",
    32473: "GJ",
    32488: "TD",
    32521: "QJ",
    32527: "PB",
    32562: "ZSQ",
    32564: "JZ",
    32735: "ZD",
    32793: "PB",
    33071: "PF",
    33098: "XL",
    33100: "YA",
    33152: "PB",
    33261: "CX",
    33324: "BP",
    33333: "TD",
    33406: "YA",
    33426: "WM",
    33432: "PB",
    33445: "JG",
    33486: "ZN",
    33493: "TS",
    33507: "QJ",
    33540: "QJ",
    33544: "ZC",
    33564: "XQ",
    33617: "YT",
    33632: "QJ",
    33636: "XH",
    33637: "YX",
    33694: "WG",
    33705: "PF",
    33728: "YW",
    33882: "SR",
    34067: "WM",
    34074: "YW",
    34121: "QJ",
    34255: "ZC",
    34259: "XL",
    34425: "JH",
    34430: "XH",
    34485: "KH",
    34503: "YS",
    34532: "HG",
    34552: "XS",
    34558: "YE",
    34593: "ZL",
    34660: "YQ",
    34892: "XH",
    34928: "SC",
    34999: "QJ",
    35048: "PB",
    35059: "SC",
    35098: "ZC",
    35203: "TQ",
    35265: "JX",
    35299: "JX",
    35782: "SZ",
    35828: "YS",
    35830: "E",
    35843: "TD",
    35895: "YG",
    35977: "MH",
    36158: "JG",
    36228: "QJ",
    36426: "XQ",
    36466: "DC",
    36710: "CJ",
    36711: "ZYG",
    36767: "PB",
    36866: "SK",
    36951: "YW",
    37034: "YX",
    37063: "XH",
    37218: "ZC",
    37325: "ZC",
    38063: "PB",
    38079: "TD",
    38085: "QY",
    38107: "DC",
    38116: "TD",
    38123: "YD",
    38224: "HG",
    38241: "XTC",
    38271: "ZC",
    38415: "YE",
    38426: "KH",
    38461: "YD",
    38463: "AE",
    38466: "PB",
    38477: "XJ",
    38518: "YT",
    38551: "WK",
    38585: "ZC",
    38704: "XS",
    38739: "LJ",
    38761: "GJ",
    38808: "SQ",
    39048: "JG",
    39049: "XJ",
    39052: "HG",
    39076: "CZ",
    39271: "XT",
    39534: "TD",
    39552: "TD",
    39584: "PB",
    39647: "SB",
    39730: "LG",
    39748: "TPB",
    40109: "ZQ",
    40479: "ND",
    40516: "HG",
    40536: "HG",
    40583: "QJ",
    40765: "YQ",
    40784: "QJ",
    40840: "YK",
    40863: "QJG"
  };

  var _checkPYCh = function _checkPYCh(ch) {
    var uni = ch.charCodeAt(0); // 如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数

    if (uni > 40869 || uni < 19968) {
      return ch;
    } // dealWithOthers(ch);


    return oMultiDiff[uni] ? oMultiDiff[uni] : _ChineseFirstPY.charAt(uni - 19968);
  };

  var _mkPYRslt = function _mkPYRslt(arr, options) {
    var ignoreMulti = options.ignoreMulti;
    var splitChar = options.splitChar;
    var arrRslt = [""],
        k,
        multiLen = 0;

    for (var i = 0, len = arr.length; i < len; i++) {
      var str = arr[i];
      var strlen = str.length; // 多音字过多的情况下，指数增长会造成浏览器卡死，超过20完全卡死，18勉强能用，考虑到不同性能最好是16或者14
      // 超过14个多音字之后，后面的都用第一个拼音

      if (strlen == 1 || multiLen > 14 || ignoreMulti) {
        var tmpStr = str.substring(0, 1);

        for (k = 0; k < arrRslt.length; k++) {
          arrRslt[k] += tmpStr;
        }
      } else {
        var tmpArr = arrRslt.slice(0);
        arrRslt = [];
        multiLen++;

        for (k = 0; k < strlen; k++) {
          // 复制一个相同的arrRslt
          var tmp = tmpArr.slice(0); // 把当前字符str[k]添加到每个元素末尾

          for (var j = 0; j < tmp.length; j++) {
            tmp[j] += str.charAt(k);
          } // 把复制并修改后的数组连接到arrRslt上


          arrRslt = arrRslt.concat(tmp);
        }
      }
    } // BI-56386 这边直接将所有多音字组合拼接是有风险的，因为丢失了每一组的起始索引信息, 外部使用indexOf等方法会造成错位
    // 一旦错位就可能认为不符合条件， 但实际上还是有可能符合条件的，故此处以一个无法搜索的不可见字符作为连接


    return arrRslt.join(splitChar || "").toLowerCase();
  };

  BI._.extend(BI, {
    makeFirstPY: function makeFirstPY(str, options) {
      options = options || {};

      if (typeof str !== "string") {
        return "" + str;
      }

      var arrResult = []; // 保存中间结果的数组

      for (var i = 0, len = str.length; i < len; i++) {
        // 获得unicode码
        var ch = str.charAt(i); // 检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理

        arrResult.push(_checkPYCh(ch));
      } // 处理arrResult,返回所有可能的拼音首字母串数组


      return _mkPYRslt(arrResult, options);
    }
  });
}();

/***/ }),
/* 155 */
/***/ (function(module, exports) {

BI.DOM = BI.DOM || {};
BI.extend(BI.DOM, {
  isColor: function isColor(color) {
    return color && (this.isRGBColor(color) || this.isHexColor(color));
  },
  isRGBColor: function isRGBColor(color) {
    if (!color) {
      return false;
    }

    return color.substr(0, 3) === "rgb";
  },
  isHexColor: function isHexColor(color) {
    if (!color) {
      return false;
    }

    return color[0] === "#" && color.length === 7;
  },
  isDarkColor: function isDarkColor(hex) {
    if (!hex || !this.isHexColor(hex)) {
      return false;
    }

    var rgb = this.rgb2json(this.hex2rgb(hex));
    var grayLevel = Math.round(rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114);

    if (grayLevel < 192
    /** 网上给的是140**/
    ) {
      return true;
    }

    return false;
  },
  // 获取对比颜色
  getContrastColor: function getContrastColor(color) {
    if (!color || !this.isColor(color)) {
      return "";
    }

    if (this.isDarkColor(color)) {
      return "#FFFFFF";
    }

    return "#3D4D66";
  },
  rgb2hex: function rgb2hex(rgbColour) {
    if (!rgbColour || rgbColour.substr(0, 3) != "rgb") {
      return "";
    }

    var rgbValues = rgbColour.match(/\d+(\.\d+)?/g);
    var red = BI.parseInt(rgbValues[0]);
    var green = BI.parseInt(rgbValues[1]);
    var blue = BI.parseInt(rgbValues[2]);
    var hexColour = "#" + this.int2hex(red) + this.int2hex(green) + this.int2hex(blue);
    return hexColour;
  },
  _hue2rgb: function _hue2rgb(m1, m2, h) {
    h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
    if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;
    if (h * 2 < 1) return m2;
    if (h * 3 < 2) return m1 + (m2 - m1) * (0.66666 - h) * 6;
    return m1;
  },
  hsl2rgb: function hsl2rgb(hsl) {
    var m1, m2, r, g, b;
    var h = hsl[0],
        s = hsl[1],
        l = hsl[2];
    m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
    m1 = l * 2 - m2;
    return [this._hue2rgb(m1, m2, h + 0.33333), this._hue2rgb(m1, m2, h), this._hue2rgb(m1, m2, h - 0.33333)];
  },
  rgb2hsl: function rgb2hsl(rgb) {
    var min, max, delta, h, s, l;
    var r = rgb[0],
        g = rgb[1],
        b = rgb[2];
    min = Math.min(r, Math.min(g, b));
    max = Math.max(r, Math.max(g, b));
    delta = max - min;
    l = (min + max) / 2;
    s = 0;

    if (l > 0 && l < 1) {
      s = delta / (l < 0.5 ? 2 * l : 2 - 2 * l);
    }

    h = 0;

    if (delta > 0) {
      if (max == r && max != g) h += (g - b) / delta;
      if (max == g && max != b) h += 2 + (b - r) / delta;
      if (max == b && max != r) h += 4 + (r - g) / delta;
      h /= 6;
    }

    return [h, s, l];
  },
  rgb2json: function rgb2json(rgbColour) {
    if (!rgbColour) {
      return {};
    }

    if (!this.isRGBColor(rgbColour)) {
      return {};
    }

    var rgbValues = rgbColour.match(/\d+(\.\d+)?/g);
    return {
      r: BI.parseInt(rgbValues[0]),
      g: BI.parseInt(rgbValues[1]),
      b: BI.parseInt(rgbValues[2])
    };
  },
  rgba2json: function rgba2json(rgbColour) {
    if (!rgbColour) {
      return {};
    }

    var rgbValues = rgbColour.match(/\d+(\.\d+)?/g);
    return {
      r: BI.parseInt(rgbValues[0]),
      g: BI.parseInt(rgbValues[1]),
      b: BI.parseInt(rgbValues[2]),
      a: BI.parseFloat(rgbValues[3])
    };
  },
  json2rgb: function json2rgb(rgb) {
    if (!BI.isKey(rgb.r) || !BI.isKey(rgb.g) || !BI.isKey(rgb.b)) {
      return "";
    }

    return "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
  },
  json2rgba: function json2rgba(rgba) {
    if (!BI.isKey(rgba.r) || !BI.isKey(rgba.g) || !BI.isKey(rgba.b)) {
      return "";
    }

    return "rgba(" + rgba.r + "," + rgba.g + "," + rgba.b + "," + rgba.a + ")";
  },
  int2hex: function int2hex(strNum) {
    var hexdig = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
    return hexdig[strNum >>> 4] + "" + hexdig[strNum & 15];
  },
  hex2rgb: function hex2rgb(color) {
    if (!color) {
      return "";
    }

    if (!this.isHexColor(color)) {
      return color;
    }

    var tempValue = "rgb(",
        colorArray;

    if (color.length === 7) {
      colorArray = [BI.parseInt("0x" + color.substring(1, 3)), BI.parseInt("0x" + color.substring(3, 5)), BI.parseInt("0x" + color.substring(5, 7))];
    } else if (color.length === 4) {
      colorArray = [BI.parseInt("0x" + color.substring(1, 2)), BI.parseInt("0x" + color.substring(2, 3)), BI.parseInt("0x" + color.substring(3, 4))];
    }

    tempValue += colorArray[0] + ",";
    tempValue += colorArray[1] + ",";
    tempValue += colorArray[2] + ")";
    return tempValue;
  },
  rgba2rgb: function rgba2rgb(rgbColor, bgColor) {
    if (BI.isNull(bgColor)) {
      bgColor = 1;
    }

    if (rgbColor.substr(0, 4) != "rgba") {
      return "";
    }

    var rgbValues = rgbColor.match(/\d+(\.\d+)?/g);

    if (rgbValues.length < 4) {
      return "";
    }

    var R = BI.parseFloat(rgbValues[0]);
    var G = BI.parseFloat(rgbValues[1]);
    var B = BI.parseFloat(rgbValues[2]);
    var A = BI.parseFloat(rgbValues[3]);
    return "rgb(" + Math.floor(255 * (bgColor * (1 - A)) + R * A) + "," + Math.floor(255 * (bgColor * (1 - A)) + G * A) + "," + Math.floor(255 * (bgColor * (1 - A)) + B * A) + ")";
  }
});

/***/ }),
/* 156 */
/***/ (function(module, exports) {

!function () {
  var i18nStore = {};
  var i18nFormatters = {};

  BI._.extend(BI, {
    changeI18n: function changeI18n(i18n) {
      if (i18n) {
        i18nStore = i18n;
      }
    },
    addI18n: function addI18n(i18n) {
      BI.extend(i18nStore, i18n);
    },
    i18nText: function i18nText(key) {
      var localeText = i18nStore[key] || BI.i18n && BI.i18n[key] || "";

      if (!localeText) {
        localeText = key;
      }

      var len = arguments.length;

      if (len > 1) {
        if (localeText.indexOf("{R1") > -1) {
          for (var i = 1; i < len; i++) {
            var reg = new RegExp("{R".concat(i, ",(.*?)}"), "g");
            var result = reg.exec(localeText);

            if (result) {
              var formatName = result[1];
              localeText = BI.replaceAll(localeText, reg, i18nFormatters[formatName](key, arguments[i]));
            } else {
              localeText = BI.replaceAll(localeText, "{R".concat(i, "}"), arguments[i] + "");
            }
          }
        } else {
          var args = Array.prototype.slice.call(arguments);
          var count = 1;
          return BI.replaceAll(localeText, "\\{\\s*\\}", function () {
            return args[count++] + "";
          });
        }
      }

      return localeText;
    },
    addI18nFormatter: function addI18nFormatter(formatName, fn) {
      i18nFormatters[formatName] = fn;
    }
  });
}();

/***/ }),
/* 157 */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),
/* 158 */
/***/ (function(module, exports) {

/**
 * Widget超类
 * @class BI.Widget
 * @extends BI.OB
 *
 * @cfg {JSON} options 配置属性
 */
!function () {
  var cancelAnimationFrame = _global.cancelAnimationFrame || _global.webkitCancelAnimationFrame || _global.mozCancelAnimationFrame || _global.oCancelAnimationFrame || _global.msCancelAnimationFrame || _global.clearTimeout;
  var requestAnimationFrame = _global.requestAnimationFrame || _global.webkitRequestAnimationFrame || _global.mozRequestAnimationFrame || _global.oRequestAnimationFrame || _global.msRequestAnimationFrame || _global.setTimeout;

  function callLifeHook(self, life) {
    var hooks = [],
        hook;
    hook = self[life];

    if (hook) {
      hooks = hooks.concat(BI.isArray(hook) ? hook : [hook]);
    }

    hook = self.options[life];

    if (hook) {
      hooks = hooks.concat(BI.isArray(hook) ? hook : [hook]);
    }

    BI.each(hooks, function (i, hook) {
      hook.call(self);
    });
  }

  BI.Widget = BI.Widget || BI.inherit(BI.OB, {
    _defaultConfig: function _defaultConfig() {
      return BI.extend(BI.Widget.superclass._defaultConfig.apply(this), {
        root: false,
        tagName: "div",
        attributes: null,
        data: null,
        key: null,
        tag: null,
        disabled: false,
        invisible: false,
        animation: "",
        animationDuring: 0,
        invalid: false,
        baseCls: "",
        extraCls: "",
        cls: "",
        css: null // vdom: false

      });
    },
    _constructor: function _constructor() {},
    // 覆盖父类的_constructor方法，widget不走ob的生命周期
    _constructed: function _constructed() {
      if (this.setup) {
        pushTarget(this);
        var delegate = this.setup(this.options);

        if (BI.isPlainObject(delegate)) {
          // 如果setup返回一个json，即对外暴露的方法
          BI.extend(this, delegate);
        } else {
          this.render = delegate;
        }

        popTarget();
      }
    },
    _lazyConstructor: function _lazyConstructor() {
      if (!this.__constructed) {
        this.__constructed = true;

        this._init();

        this._initRef();
      }
    },
    // 生命周期函数
    beforeInit: null,
    beforeRender: null,
    beforeCreate: null,
    created: null,
    render: null,
    beforeMount: null,
    mounted: null,
    // 不想重写mounted时用
    _mounted: null,
    shouldUpdate: null,
    update: null,
    beforeUpdate: null,
    updated: null,
    beforeDestroy: null,
    destroyed: null,
    // 不想重写destroyed时用
    _destroyed: null,
    _init: function _init() {
      BI.Widget.superclass._init.apply(this, arguments);

      this._initVisual();

      this._initState();

      this._initRender();
    },
    _initRender: function _initRender() {
      var self = this;
      var initCallbackCalled = false;
      var renderCallbackCalled = false;

      function init() {
        // 加个保险
        if (initCallbackCalled === true) {
          _global.console && console.error("组件： 请检查beforeInit内部的写法，callback只能执行一次");
          return;
        }

        initCallbackCalled = true;

        function render() {
          // 加个保险
          if (renderCallbackCalled === true) {
            _global.console && console.error("组件： 请检查beforeRender内部的写法，callback只能执行一次");
            return;
          }

          renderCallbackCalled = true;

          self._render();

          self.__afterRender();
        }

        if (self.options.beforeRender || self.beforeRender) {
          self.__async = true;
          var beforeRenderResult = (self.options.beforeRender || self.beforeRender).call(self, render);

          if (beforeRenderResult instanceof Promise) {
            beforeRenderResult.then(render).catch(function (e) {
              _global.console && console.error(e);
              render();
            });
          }
        } else {
          self._render();

          self.__afterRender();
        }
      }

      if (this.options.beforeInit || this.beforeInit) {
        this.__asking = true;
        var beforeInitResult = (this.options.beforeInit || this.beforeInit).call(this, init);

        if (beforeInitResult instanceof Promise) {
          beforeInitResult.then(init).catch(function (e) {
            _global.console && console.error(e);
            init();
          });
        }
      } else {
        init();
      }
    },
    __afterRender: function __afterRender() {
      pushTarget(this);
      var async = this.__async;
      this.__async = false;

      if (async && this._isMounted) {
        callLifeHook(this, "beforeMount");

        this._mount();

        callLifeHook(this, "mounted");
        this.fireEvent(BI.Events.MOUNT);
      } else {
        this._mount();
      }

      popTarget();
    },
    _render: function _render() {
      this.__asking = false;
      pushTarget(this);
      callLifeHook(this, "beforeCreate");

      this._initElement();

      this._initEffects();

      callLifeHook(this, "created");
      popTarget();
    },
    _initCurrent: function _initCurrent() {
      var self = this,
          o = this.options;

      this._initElementWidth();

      this._initElementHeight();

      if (o._baseCls || o.baseCls || o.extraCls) {
        this.element.addClass((o._baseCls || "") + " " + (o.baseCls || "") + " " + (o.extraCls || ""));
      }

      if (o.cls) {
        if (BI.isFunction(o.cls)) {
          var cls = this.__watch(o.cls, function (context, newValue) {
            self.element.removeClass(cls).addClass(cls = newValue);
          });

          this.element.addClass(cls);
        } else {
          this.element.addClass(o.cls);
        }
      } // if (o.key != null) {
      //     this.element.attr("key", o.key);
      // }


      if (o.attributes) {
        this.element.attr(o.attributes);
      }

      if (o.data) {
        this.element.data(o.data);
      }

      if (o.css) {
        if (BI.isFunction(o.css)) {
          var css = this.__watch(o.css, function (context, newValue) {
            for (var k in css) {
              if (BI.isNull(newValue[k])) {
                newValue[k] = "";
              }
            }

            self.element.css(css = newValue);
          });

          this.element.css(css);
        } else {
          this.element.css(o.css);
        }
      }
    },
    __watch: function __watch(getter, handler, options) {
      var self = this;

      if (_global.Fix) {
        this._watchers = this._watchers || [];
        var watcher = new Fix.Watcher(null, function () {
          return getter.call(self, self);
        }, handler && function (v) {
          handler.call(self, self, v);
        } || BI.emptyFn, BI.extend({
          deep: true
        }, options));

        this._watchers.push(function unwatchFn() {
          watcher.teardown();
        });

        return watcher.value;
      } else {
        return getter();
      }
    },

    /**
     * 初始化根节点
     * @private
     */
    _initRoot: function _initRoot() {
      var o = this.options;
      this.widgetName = o.widgetName || BI.uniqueId("widget");
      this._isRoot = o.root;
      this._children = {};

      if (BI.isWidget(o.element)) {
        this.element = this.options.element.element;
        this._parent = o.element;

        this._parent.addWidget(this.widgetName, this);
      } else if (o.element) {
        this.element = BI.Widget._renderEngine.createElement(this);
        this._isRoot = true;
      } else {
        this.element = BI.Widget._renderEngine.createElement(this);
      }

      this.element._isWidget = true; // var widgets = this.element.data("__widgets") || [];
      // widgets.push(this);
      // this.element.data("__widgets", widgets);

      this._initCurrent();
    },
    _initElementWidth: function _initElementWidth() {
      var o = this.options;

      if (BI.isWidthOrHeight(o.width)) {
        this.element.css("width", BI.pixFormat(o.width));
      }
    },
    _initElementHeight: function _initElementHeight() {
      var o = this.options;

      if (BI.isWidthOrHeight(o.height)) {
        this.element.css("height", BI.pixFormat(o.height));
      }
    },
    _initVisual: function _initVisual() {
      var self = this,
          o = this.options;

      if (o.invisible) {
        var invisible = o.invisible = BI.isFunction(o.invisible) ? this.__watch(o.invisible, function (context, newValue) {
          self.setVisible(!newValue);
        }) : o.invisible;

        if (invisible) {
          // 用display属性做显示和隐藏，否则jquery会在显示时将display设为block会覆盖掉display:flex属性
          this.__setElementVisible(false);
        }
      }
    },
    _initEffects: function _initEffects() {
      var self = this,
          o = this.options;

      if (o.disabled || o.invalid) {
        if (this.options.disabled) {
          var disabled = o.disabled = BI.isFunction(o.disabled) ? this.__watch(o.disabled, function (context, newValue) {
            self.setEnable(!newValue);
          }) : o.disabled;

          if (disabled) {
            this.setEnable(false);
          }
        }

        if (this.options.invalid) {
          var invalid = o.invalid = BI.isFunction(o.invalid) ? this.__watch(o.invalid, function (context, newValue) {
            self.setValid(!newValue);
          }) : o.invalid;

          if (invalid) {
            this.setValid(false);
          }
        }
      }

      if (o.effect) {
        if (BI.isArray(o.effect)) {
          if (BI.isArray(o.effect[0])) {
            BI.each(o.effect, function (i, effect) {
              self.__watch(effect[0], effect[1]);
            });
          } else {
            self.__watch(o.effect[0], o.effect[1]);
          }
        } else {
          this.__watch(o.effect);
        }
      }
    },
    _initState: function _initState() {
      this._isMounted = false;
      this._isDestroyed = false;
    },
    __initWatch: function __initWatch() {// initWatch拦截的方法
    },
    _initElement: function _initElement() {
      var self = this;
      this.__isMounting = true; // 当开启worker模式时，可以通过$render来实现另一种效果

      var workerMode = BI.Providers.getProvider("bi.provider.system").getWorkerMode();
      var render = BI.isFunction(this.options.render) ? this.options.render : workerMode ? this.$render || this.render : this.render;
      var els = render && render.call(this);
      els = this.options.configRender ? this.options.configRender.call(this, els) : els;
      els = BI.Plugin.getRender(this.options.type, els);

      if (BI.isPlainObject(els)) {
        els = [els];
      }

      this.__initWatch();

      if (BI.isArray(els)) {
        BI.each(els, function (i, el) {
          if (el) {
            BI._lazyCreateWidget(el, {
              element: self
            });
          }
        });
      }
    },
    _setParent: function _setParent(parent) {
      this._parent = parent;
    },

    /**
     *
     * @param force 是否强制挂载子节点
     * @param deep 子节点是否也是按照当前force处理
     * @param lifeHook 生命周期钩子触不触发，默认触发
     * @param predicate 递归每个widget的回调
     * @param layer 组件层级
     * @returns {boolean}
     * @private
     */
    _mount: function _mount(force, deep, lifeHook, predicate, layer) {
      var self = this;

      if (!force && (this._isMounted || !this.isVisible() || this.__asking === true || !(this._isRoot === true || this._parent && this._parent._isMounted === true))) {
        return false;
      }

      layer = layer || 0;
      lifeHook !== false && !this.__async && callLifeHook(this, "beforeMount");
      this._isMounted = true;
      this.__isMounting = false;

      for (var key in this._children) {
        var child = this._children[key];
        child._mount && child._mount(deep ? force : false, deep, lifeHook, predicate, layer + 1);
      }

      if (this._parent) {
        if (!this._parent.isEnabled()) {
          this._setEnable(false);
        }

        if (!this._parent.isValid()) {
          this._setValid(false);
        }
      }

      this._mountChildren && this._mountChildren();

      if (layer === 0) {
        // mounted里面会执行scrollTo之类的方法，如果放宏任务里会闪
        // setTimeout(function () {
        self.__afterMount(lifeHook, predicate); // }, 0);

      }

      return true;
    },
    __afterMount: function __afterMount(lifeHook, predicate) {
      if (this._isMounted) {
        for (var key in this._children) {
          var child = this._children[key];
          child.__afterMount && child.__afterMount(lifeHook, predicate);
        }

        if (lifeHook !== false && !this.__async) {
          callLifeHook(this, "_mounted");
          callLifeHook(this, "mounted");
          this.fireEvent(BI.Events.MOUNT);
        }

        predicate && predicate(this);
      }
    },
    _mountChildren: null,
    _update: function _update(nextProps, shouldUpdate) {
      callLifeHook(this, "beforeUpdate");

      if (shouldUpdate) {
        var res = this.update && this.update(nextProps, shouldUpdate);
      }

      callLifeHook(this, "updated");
      return res;
    },
    isMounted: function isMounted() {
      return this._isMounted;
    },
    isDestroyed: function isDestroyed() {
      return this._isDestroyed;
    },
    setWidth: function setWidth(w) {
      this.options.width = w;

      this._initElementWidth();
    },
    setHeight: function setHeight(h) {
      this.options.height = h;

      this._initElementHeight();
    },
    _setEnable: function _setEnable(enable) {
      if (enable === true) {
        this.options._disabled = false;
      } else if (enable === false) {
        this.options._disabled = true;
      } // 递归将所有子组件使能


      BI.each(this._children, function (i, child) {
        !child._manualSetEnable && child._setEnable && child._setEnable(enable);
      });
    },
    _setValid: function _setValid(valid) {
      if (valid === true) {
        this.options._invalid = false;
      } else if (valid === false) {
        this.options._invalid = true;
      } // 递归将所有子组件使有效


      BI.each(this._children, function (i, child) {
        !child._manualSetValid && child._setValid && child._setValid(valid);
      });
    },
    _setVisible: function _setVisible(visible) {
      if (visible === true) {
        this.options.invisible = false;
      } else if (visible === false) {
        this.options.invisible = true;
      }
    },
    setEnable: function setEnable(enable) {
      this._manualSetEnable = true;
      this.options.disabled = !enable;

      this._setEnable(enable);

      if (enable === true) {
        this.element.removeClass("base-disabled disabled");
      } else if (enable === false) {
        this.element.addClass("base-disabled disabled");
      }
    },
    __setElementVisible: function __setElementVisible(visible) {
      this.element.css("display", visible ? "" : "none");
    },
    _innerSetVisible: function _innerSetVisible(visible) {
      var self = this,
          o = this.options;
      var lastVisible = !o.invisible;

      this._setVisible(visible);

      if (visible === true) {
        // 用this.element.show()会把display属性改成block
        this.__setElementVisible(true);

        this._mount();

        if (o.animation && !lastVisible) {
          this.element.removeClass(o.animation + "-leave").removeClass(o.animation + "-leave-active").addClass(o.animation + "-enter");

          if (this._requestAnimationFrame) {
            cancelAnimationFrame(this._requestAnimationFrame);
          }

          this._requestAnimationFrame = function () {
            self.element.addClass(o.animation + "-enter-active");
          };

          requestAnimationFrame(this._requestAnimationFrame);

          if (this._animationDuring) {
            clearTimeout(this._animationDuring);
          }

          this._animationDuring = setTimeout(function () {
            self.element.removeClass(o.animation + "-enter").removeClass(o.animation + "-enter-active");
          }, o.animationDuring);
        }
      } else if (visible === false) {
        if (o.animation && lastVisible) {
          this.element.removeClass(o.animation + "-enter").removeClass(o.animation + "-enter-active").addClass(o.animation + "-leave");

          if (this._requestAnimationFrame) {
            cancelAnimationFrame(this._requestAnimationFrame);
          }

          this._requestAnimationFrame = function () {
            self.element.addClass(o.animation + "-leave-active");
          };

          requestAnimationFrame(this._requestAnimationFrame);

          if (this._animationDuring) {
            clearTimeout(this._animationDuring);
          }

          this._animationDuring = setTimeout(function () {
            self.element.removeClass(o.animation + "-leave").removeClass(o.animation + "-leave-active");

            self.__setElementVisible(false);
          }, o.animationDuring);
        } else {
          this.__setElementVisible(false);
        }
      }
    },
    setVisible: function setVisible(visible) {
      this._innerSetVisible(visible);

      this.fireEvent(BI.Events.VIEW, visible);
    },
    setValid: function setValid(valid) {
      this._manualSetValid = true;
      this.options.invalid = !valid;

      this._setValid(valid);

      if (valid === true) {
        this.element.removeClass("base-invalid invalid");
      } else if (valid === false) {
        this.element.addClass("base-invalid invalid");
      }
    },
    doBehavior: function doBehavior() {
      var args = arguments; // 递归将所有子组件使有效

      BI.each(this._children, function (i, child) {
        child.doBehavior && child.doBehavior.apply(child, args);
      });
    },
    getWidth: function getWidth() {
      return this.options.width;
    },
    getHeight: function getHeight() {
      return this.options.height;
    },
    addWidget: function addWidget(name, widget) {
      var self = this;

      if (name instanceof BI.Widget) {
        widget = name;
        name = widget.getName();
      }

      if (BI.isKey(name)) {
        name = name + "";
      }

      name = name || widget.getName() || BI.uniqueId("widget");

      if (this._children[name]) {
        throw new Error("组件：组件名已存在，不能进行添加");
      }

      widget._setParent && widget._setParent(this);
      widget.on(BI.Events.DESTROY, function () {
        BI.remove(self._children, this);
      });
      return this._children[name] = widget;
    },
    getWidgetByName: function getWidgetByName(name) {
      if (!BI.isKey(name) || name === this.getName()) {
        return this;
      }

      name = name + "";
      var widget = void 0,
          other = {};
      BI.any(this._children, function (i, wi) {
        if (i === name) {
          widget = wi;
          return true;
        }

        other[i] = wi;
      });

      if (!widget) {
        BI.any(other, function (i, wi) {
          return widget = wi.getWidgetByName(i);
        });
      }

      return widget;
    },
    removeWidget: function removeWidget(nameOrWidget) {
      if (BI.isWidget(nameOrWidget)) {
        BI.remove(this._children, nameOrWidget);
      } else {
        delete this._children[nameOrWidget];
      }
    },
    hasWidget: function hasWidget(name) {
      return this._children[name] != null;
    },
    getName: function getName() {
      return this.widgetName;
    },
    setTag: function setTag(tag) {
      this.options.tag = tag;
    },
    getTag: function getTag() {
      return this.options.tag;
    },
    attr: function attr(key, value) {
      var self = this;

      if (BI.isPlainObject(key)) {
        BI.each(key, function (k, v) {
          self.attr(k, v);
        });
        return;
      }

      if (BI.isNotNull(value)) {
        return this.options[key] = value;
      }

      return this.options[key];
    },
    css: function css(name, value) {
      return this.element.css(name, value);
    },
    getText: function getText() {},
    setText: function setText(text) {},
    getValue: function getValue() {},
    setValue: function setValue(value) {},
    isEnabled: function isEnabled() {
      return this.options.disabled === true ? false : !this.options._disabled;
    },
    isValid: function isValid() {
      return this.options.invalid === true ? false : !this.options._invalid;
    },
    isVisible: function isVisible() {
      return !this.options.invisible;
    },
    disable: function disable() {
      this.setEnable(false);
    },
    enable: function enable() {
      this.setEnable(true);
    },
    valid: function valid() {
      this.setValid(true);
    },
    invalid: function invalid() {
      this.setValid(false);
    },
    invisible: function invisible() {
      this.setVisible(false);
    },
    visible: function visible() {
      this.setVisible(true);
    },
    __d: function __d() {
      BI.each(this._children, function (i, widget) {
        widget && widget._unMount && widget._unMount();
      });
      this._children = {};
    },
    // 主要是因为_destroy已经提供了protected方法
    __destroy: function __destroy() {
      callLifeHook(this, "beforeDestroy");
      this.beforeDestroy = null;

      this.__d();

      this._parent = null;
      this._isMounted = false;
      callLifeHook(this, "_destroyed");
      callLifeHook(this, "destroyed");
      this.destroyed = null;
      this._isDestroyed = true; // this._purgeRef();  // 清除ref的时机还是要仔细考虑一下
    },
    _unMount: function _unMount() {
      this._assetMounted();

      this.__destroy();

      this.fireEvent(BI.Events.UNMOUNT);
      this.purgeListeners();
    },
    _assetMounted: function _assetMounted() {
      if (!this.isVisible()) {
        this._setVisible(true);

        this._mount(false, false, false);

        this._setVisible(false);
      }
    },
    _empty: function _empty() {
      this._assetMounted();

      BI.each(this._children, function (i, widget) {
        widget && widget._unMount && widget._unMount();
      });
      this._children = {};
      this.element.empty();
    },
    isolate: function isolate() {
      if (this._parent) {
        this._parent.removeWidget(this);
      }

      BI.DOM.hang([this]);
    },
    empty: function empty() {
      this._empty();
    },
    // 默认的reset方法就是干掉重来
    reset: function reset() {
      // 还在异步状态的不需要执行reset
      if (this.__async === true || this.__asking === true) {
        return;
      } // if (this.options.vdom) {
      //     var vnode = this._renderVNode();
      //     BI.patchVNode(this.vnode, vnode);
      //     this.vnode = vnode;
      //     return;
      // }
      // this._isMounted = false;
      // this.purgeListeners();
      // 去掉组件绑定的watcher


      BI.each(this._watchers, function (i, unwatches) {
        unwatches = BI.isArray(unwatches) ? unwatches : [unwatches];
        BI.each(unwatches, function (j, unwatch) {
          unwatch();
        });
      });
      this._watchers && (this._watchers = []);

      this._assetMounted();

      this.__d();

      this.element.empty();
      this.element.unbind();

      this._initCurrent();

      this._init(); // this._initRef();

    },
    _destroy: function _destroy() {
      this._assetMounted();

      this.__destroy();

      this.element.destroy();
      this.purgeListeners();
    },
    destroy: function destroy() {
      var self = this,
          o = this.options;

      this._assetMounted();

      this.__destroy();

      if (o.animation) {
        this._innerSetVisible(false);

        setTimeout(function () {
          self.element.destroy();
        }, o.animationDuring);
      } else {
        this.element.destroy();
      }

      this.fireEvent(BI.Events.UNMOUNT);
      this.fireEvent(BI.Events.DESTROY);

      this._purgeRef();

      this.purgeListeners();
    }
  });
  var context = null,
      current = null;
  var contextStack = [],
      currentStack = [];

  BI.Widget.pushContext = function (_context) {
    if (context) contextStack.push(context);
    BI.Widget.context = context = _context;
  };

  BI.Widget.popContext = function () {
    BI.Widget.context = context = contextStack.pop();
  };

  BI.Widget.execWithContext = function (context, execFunc) {
    BI.Widget.pushContext(context);

    try {
      execFunc();
    } catch (e) {
      throw e;
    } finally {
      BI.Widget.popContext();
    }
  };

  function pushTarget(_current) {
    if (current) currentStack.push(current);
    BI.Widget.current = current = _current;
  }

  function popTarget() {
    BI.Widget.current = current = currentStack.pop();
  }

  BI.useStore = function (_store) {
    if (current && current.store) {
      return current.store;
    }

    if (current && current.$storeDelegate) {
      return current.$storeDelegate;
    }

    if (current) {
      var currentStore = current._store;
      var delegate = {},
          origin;

      if (_global.Proxy) {
        var proxy = new Proxy(delegate, {
          get: function get(target, key) {
            return Reflect.get(origin, key);
          },
          set: function set(target, key, value) {
            return Reflect.set(origin, key, value);
          }
        });

        current._store = function () {
          origin = (_store || currentStore).apply(this, arguments);
          delegate.$delegate = origin;
          return origin;
        };

        return current.$storeDelegate = proxy;
      }

      current._store = function () {
        var st = (_store || currentStore).apply(this, arguments);

        BI.extend(delegate, st);
        return st;
      };

      return current.$storeDelegate = delegate;
    }
  };

  BI.useContext = function (inject) {
    // 通过组件找最近的store
    var vm = BI.Widget.findStore(BI.Widget.current || BI.Widget.context);

    if (vm) {
      if (inject) {
        if (vm.$$computed && inject in vm.$$computed) {
          return vm;
        }

        if (vm.$$state && inject in vm.$$state) {
          return vm;
        }

        if (vm.$$model && inject in vm.$$model) {
          return vm;
        }

        while (vm) {
          if (vm.$$context && inject in vm.$$context) {
            return vm;
          }

          vm = vm._parent;
        }

        return null;
      }
    }

    return vm;
  };

  BI.watch = function (vm, watch, handler) {
    // 必须要保证组件当前环境存在
    if (BI.Widget.current) {
      if (vm instanceof BI.Model) {
        var watchers = [];

        if (BI.isKey(watch)) {
          var k = watch;
          watch = {};
          watch[k] = handler;
        }

        for (var key in watch) {
          var innerHandler = watch[key];

          if (BI.isArray(handler)) {
            for (var i = 0; i < handler.length; i++) {
              watchers.push(Fix.watch(vm.model, key, innerHandler, {
                store: vm
              }));
            }
          } else {
            watchers.push(Fix.watch(vm.model, key, innerHandler, {
              store: vm
            }));
          }
        } // vm中一定有_widget


        BI.Widget.current._watchers || (BI.Widget.current._watchers = []);
        BI.Widget.current._watchers = BI.Widget.current._watchers.concat(watchers);
        return;
      }

      handler = watch;
      watch = vm;
      BI.Widget.current.$watchDelayCallbacks || (BI.Widget.current.$watchDelayCallbacks = []);
      BI.Widget.current.$watchDelayCallbacks.push([watch, handler]);
    }
  };

  BI.onBeforeMount = function (beforeMount) {
    if (current) {
      if (current.__isMounting) {
        beforeMount();
        return;
      }

      if (!current.beforeMount) {
        current.beforeMount = [];
      } else if (!BI.isArray(current.beforeMount)) {
        current.beforeMount = [current.beforeMount];
      }

      current.beforeMount.push(beforeMount);
    }
  };

  BI.onMounted = function (mounted) {
    if (current) {
      if (current._isMounted && !this.__async) {
        mounted();
        return;
      }

      if (!current.mounted) {
        current.mounted = [];
      } else if (!BI.isArray(current.mounted)) {
        current.mounted = [current.mounted];
      }

      current.mounted.push(mounted);
    }
  };

  BI.onBeforeUnmount = function (beforeDestroy) {
    if (current) {
      if (!current.beforeDestroy) {
        current.beforeDestroy = [];
      } else if (!BI.isArray(current.beforeDestroy)) {
        current.beforeDestroy = [current.beforeDestroy];
      }

      current.beforeDestroy.push(beforeDestroy);
    }
  };

  BI.onUnmounted = function (destroyed) {
    if (current) {
      if (!current.destroyed) {
        current.destroyed = [];
      } else if (!BI.isArray(current.destroyed)) {
        current.destroyed = [current.destroyed];
      }

      current.destroyed.push(destroyed);
    }
  };

  BI.Widget.registerRenderEngine = function (engine) {
    BI.Widget._renderEngine = engine;
  };

  BI.Widget.registerRenderEngine({
    createElement: function createElement(widget) {
      if (BI.isWidget(widget)) {
        var o = widget.options;

        if (o.element) {
          return BI.$(o.element);
        }

        if (o.tagName) {
          return BI.$(document.createElement(o.tagName));
        }

        return BI.$(document.createDocumentFragment());
      }

      return BI.$(widget);
    },
    createFragment: function createFragment() {
      return document.createDocumentFragment();
    }
  });

  BI.mount = function (widget, container, predicate, hydrate) {
    if (hydrate === true) {
      // 将widget的element元素都挂载好，并建立相互关系
      widget.element.data("__widgets", [widget]);

      var res = widget._mount(true, false, false, function (w) {
        BI.each(w._children, function (i, child) {
          var ws = child.element.data("__widgets");

          if (!ws) {
            ws = [];
          }

          ws.push(child);
          child.element.data("__widgets", ws);
        });
        predicate && predicate.apply(this, arguments);
      }); // 将新的dom树属性（事件等）patch到已存在的dom上


      var c = BI.Widget._renderEngine.createElement;
      BI.DOM.patchProps(widget.element, c(c(container).children()[0]));

      var triggerLifeHook = function triggerLifeHook(w) {
        w.beforeMount && w.beforeMount();
        w.mounted && w.mounted();
        BI.each(w._children, function (i, child) {
          triggerLifeHook(child);
        });
      }; // 最后触发组件树生命周期函数


      triggerLifeHook(widget);
      return res;
    }

    if (container) {
      BI.Widget._renderEngine.createElement(container).append(widget.element);
    }

    return widget._mount(true, false, false, predicate);
  };
}();

/***/ }),
/* 159 */
/***/ (function(module, exports) {

BI.Plugin = BI.Plugin || {};
!function () {
  var _WidgetsPlugin = {};
  var _ObjectPlugin = {};
  var _ConfigPlugin = {};
  var _ConfigRenderPlugin = {};
  var _GlobalWidgetConfigFns = [];
  var __GlobalObjectConfigFns = [];
  BI.defaults(BI.Plugin, {
    getWidget: function getWidget(type, options) {
      if (_GlobalWidgetConfigFns.length > 0) {
        var fns = _GlobalWidgetConfigFns.slice(0);

        for (var i = fns.length - 1; i >= 0; i--) {
          fns[i](type, options);
        }
      }

      var res;

      if (_ConfigPlugin[type]) {
        for (var i = _ConfigPlugin[type].length - 1; i >= 0; i--) {
          if (res = _ConfigPlugin[type][i](options)) {
            options = res;
          }
        }
      } // Deprecated


      if (_WidgetsPlugin[type]) {
        for (var i = _WidgetsPlugin[type].length - 1; i >= 0; i--) {
          if (res = _WidgetsPlugin[type][i](options)) {
            return res;
          }
        }
      }

      return options;
    },
    config: function config(widgetConfigFn, objectConfigFn) {
      _GlobalWidgetConfigFns = _GlobalWidgetConfigFns.concat(BI._.isArray(widgetConfigFn) ? widgetConfigFn : [widgetConfigFn]);
      __GlobalObjectConfigFns = __GlobalObjectConfigFns.concat(BI._.isArray(objectConfigFn) ? objectConfigFn : [objectConfigFn]);
    },
    configWidget: function configWidget(type, fn, opt) {
      // opt.single: true 最后一次注册有效
      if (!_ConfigPlugin[type] || opt && opt.single) {
        _ConfigPlugin[type] = [];
      }

      _ConfigPlugin[type].push(fn);
    },
    getRender: function getRender(type, rendered) {
      var res;

      if (_ConfigRenderPlugin[type]) {
        for (var i = _ConfigRenderPlugin[type].length - 1; i >= 0; i--) {
          if (res = _ConfigRenderPlugin[type][i](rendered)) {
            rendered = res;
          }
        }
      }

      return rendered;
    },
    configRender: function configRender(type, fn) {
      if (!_ConfigRenderPlugin[type]) {
        _ConfigRenderPlugin[type] = [];
      }

      _ConfigRenderPlugin[type].push(fn);
    },
    // Deprecated
    registerWidget: function registerWidget(type, fn) {
      if (!_WidgetsPlugin[type]) {
        _WidgetsPlugin[type] = [];
      }

      if (_WidgetsPlugin[type].length > 0) {
        console.log("组件已经注册过了!");
      }

      _WidgetsPlugin[type].push(fn);
    },
    // Deprecated
    relieveWidget: function relieveWidget(type) {
      delete _WidgetsPlugin[type];
    },
    getObject: function getObject(type, object) {
      if (__GlobalObjectConfigFns.length > 0) {
        var fns = __GlobalObjectConfigFns.slice(0);

        for (var i = fns.length - 1; i >= 0; i--) {
          fns[i](type, object);
        }
      }

      if (_ObjectPlugin[type]) {
        var res;

        for (var i = 0, len = _ObjectPlugin[type].length; i < len; i++) {
          if (res = _ObjectPlugin[type][i](object)) {
            object = res;
          }
        }
      }

      return res || object;
    },
    hasObject: function hasObject(type) {
      return __GlobalObjectConfigFns.length > 0 || !!_ObjectPlugin[type];
    },
    registerObject: function registerObject(type, fn) {
      if (!_ObjectPlugin[type]) {
        _ObjectPlugin[type] = [];
      }

      if (_ObjectPlugin[type].length > 0) {
        console.log("对象已经注册过了!");
      }

      _ObjectPlugin[type].push(fn);
    },
    relieveObject: function relieveObject(type) {
      delete _ObjectPlugin[type];
    }
  });
}();

/***/ }),
/* 160 */
/***/ (function(module, exports) {

/**
 * guy
 * 由一个元素切换到另一个元素的行为
 * @class BI.Action
 * @extends BI.OB
 * @abstract
 */
BI.Action = BI.inherit(BI.OB, {
  props: function props() {
    return {
      src: null,
      tar: null
    };
  },
  actionPerformed: function actionPerformed(src, tar, callback) {},
  actionBack: function actionBack(tar, src, callback) {}
});
BI.ActionFactory = {
  createAction: function createAction(key, options) {
    var action;

    switch (key) {
      case "show":
        action = BI.ShowAction;
        break;
    }

    return new action(options);
  }
};

/***/ }),
/* 161 */
/***/ (function(module, exports) {

/**
 * guy
 * 由一个元素切换到另一个元素的行为
 * @class BI.ShowAction
 * @extends BI.Action
 */
BI.ShowAction = BI.inherit(BI.Action, {
  actionPerformed: function actionPerformed(src, tar, callback) {
    tar = tar || this.options.tar;
    tar.setVisible(true);
    callback && callback();
  },
  actionBack: function actionBack(tar, src, callback) {
    tar = tar || this.options.tar;
    tar.setVisible(false);
    callback && callback();
  }
});

/***/ }),
/* 162 */
/***/ (function(module, exports) {

BI.BehaviorFactory = {
  createBehavior: function createBehavior(key, options) {
    var behavior;

    switch (key) {
      case "highlight":
        behavior = BI.HighlightBehavior;
        break;

      case "redmark":
        behavior = BI.RedMarkBehavior;
        break;
    }

    return new behavior(options);
  }
};
/**
 * guy
 * 行为控件
 * @class BI.Behavior
 * @extends BI.OB
 */

BI.Behavior = BI.inherit(BI.OB, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Behavior.superclass._defaultConfig.apply(this, arguments), {
      rule: function rule() {
        return true;
      }
    });
  },
  doBehavior: function doBehavior() {}
});

/***/ }),
/* 163 */
/***/ (function(module, exports) {

/**
 * guy
 *
 * @class BI.HighlightBehavior
 * @extends BI.Behavior
 */
BI.HighlightBehavior = BI.inherit(BI.Behavior, {
  doBehavior: function doBehavior(items) {
    var args = Array.prototype.slice.call(arguments, 1),
        o = this.options;
    BI.each(items, function (i, item) {
      if (item instanceof BI.Single) {
        var doBe = function doBe(run) {
          if (run === true) {
            item.doHighLight && item.doHighLight.apply(item, args);
          } else {
            item.unHighLight && item.unHighLight.apply(item, args);
          }
        };

        var rule = o.rule(item.getValue(), item);

        if (BI.isFunction(rule)) {
          rule(doBe);
        } else {
          doBe(rule);
        }
      } else {
        item.doBehavior && item.doBehavior.apply(item, args);
      }
    });
  }
});

/***/ }),
/* 164 */
/***/ (function(module, exports) {

/**
 * guy
 * 标红行为
 * @class BI.RedMarkBehavior
 * @extends BI.Behavior
 */
BI.RedMarkBehavior = BI.inherit(BI.Behavior, {
  doBehavior: function doBehavior(items) {
    var args = Array.prototype.slice.call(arguments, 1),
        o = this.options;
    BI.each(items, function (i, item) {
      if (item instanceof BI.Single) {
        if (o.rule(item.getValue(), item)) {
          item.doRedMark && item.doRedMark.apply(item, args);
        } else {
          item.doRedMark && item.unRedMark.apply(item, args);
        }
      } else {
        item.doBehavior && item.doBehavior.apply(item, args);
      }
    });
  }
});

/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);

BI.Element = _element__WEBPACK_IMPORTED_MODULE_0__["Element"];
BI.Element.renderEngine = {
  createElement: function createElement(widget) {
    // eslint-disable-next-line no-undef
    if (BI.isWidget(widget)) {
      var o = widget.options;

      if (o.element instanceof _element__WEBPACK_IMPORTED_MODULE_0__["Element"]) {
        return o.element;
      }

      if (typeof o.element === 'string' && o.element !== 'body') {
        o.root = false;
        return new _element__WEBPACK_IMPORTED_MODULE_0__["Element"](widget);
      }

      if (o.root === true) {
        return new _element__WEBPACK_IMPORTED_MODULE_0__["Element"]();
      }
    } // eslint-disable-next-line no-undef


    if (BI.isString(widget)) {
      return new _element__WEBPACK_IMPORTED_MODULE_0__["Element"](widget);
    }

    return new _element__WEBPACK_IMPORTED_MODULE_0__["Element"](widget);
  },
  createFragment: function createFragment() {
    return new _element__WEBPACK_IMPORTED_MODULE_0__["Element"]();
  }
};

/***/ }),
/* 166 */
/***/ (function(module, exports) {

BI.Fragment = function () {};

BI.h = function (type, props, children) {
  if (children != null) {
    if (!BI.isArray(children)) {
      children = [children];
    }
  } else {
    children = [];
  }

  if (arguments.length > 3) {
    for (var i = 3; i < arguments.length; i++) {
      if (BI.isArray(arguments[i])) {
        children = children.concat(arguments[i]);
      } else {
        children.push(arguments[i]);
      }
    }
  }

  if (type === BI.Fragment) {
    return children;
  }

  if (BI.isFunction(type)) {
    type = type.xtype || type;
  }

  if (type === "el") {
    return BI.extend({
      el: children[0]
    }, props);
  }

  if (type === "left") {
    return BI.extend({
      left: children
    }, props);
  }

  if (type === "right") {
    return BI.extend({
      right: children
    }, props);
  }

  if (children.length === 1) {
    if (BI.isKey(children[0])) {
      return BI.extend({
        type: type
      }, {
        text: children[0]
      }, props);
    }

    if (BI.isFunction(children[0])) {
      return BI.extend({
        type: type
      }, {
        items: children[0]
      }, props);
    }
  }

  return BI.extend({
    type: type
  }, children.length > 0 ? {
    items: children
  } : {}, props);
};

/***/ }),
/* 167 */
/***/ (function(module, exports) {

/**
 * guy
 * 检测某个Widget的EventChange事件然后去show某个card
 * @type {*|void|Object}
 * @class BI.ShowListener
 * @extends BI.OB
 */
BI.ShowListener = BI.inherit(BI.OB, {
  props: function props() {
    return {
      eventObj: BI.createWidget(),
      cardLayout: null,
      cardNameCreator: function cardNameCreator(v) {
        return v;
      },
      cardCreator: BI.emptyFn,
      afterCardCreated: BI.emptyFn,
      afterCardShow: BI.emptyFn
    };
  },
  init: function init() {
    var self = this,
        o = this.options;

    if (o.eventObj) {
      o.eventObj.on(BI.Controller.EVENT_CHANGE, function (type, v, ob) {
        if (type === BI.Events.CLICK) {
          v = v || o.eventObj.getValue();
          v = BI.isArray(v) ? v.length > 1 ? v.toString() : v[0] : v;

          if (BI.isNull(v)) {
            throw new Error("不能为null");
          }

          var cardName = o.cardNameCreator(v);

          if (!o.cardLayout.isCardExisted(cardName)) {
            var card = o.cardCreator(cardName);
            o.cardLayout.addCardByName(cardName, card);
            o.afterCardCreated(cardName);
          }

          o.cardLayout.showCardByName(cardName);
          BI.nextTick(function () {
            o.afterCardShow(cardName);
            self.fireEvent(BI.ShowListener.EVENT_CHANGE, cardName);
          });
        }
      });
    }
  }
});
BI.ShowListener.EVENT_CHANGE = "EVENT_CHANGE";

/***/ }),
/* 168 */
/***/ (function(module, exports) {

/**
 * style加载管理器
 *
 * Created by GUY on 2015/9/7.
 * @class
 */
BI.StyleLoaderManager = BI.inherit(BI.OB, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.StyleLoaderManager.superclass._defaultConfig.apply(this, arguments), {});
  },
  _init: function _init() {
    BI.StyleLoaderManager.superclass._init.apply(this, arguments);

    this.stylesManager = {};
  },
  loadStyle: function loadStyle(name, styleString) {
    if (!_global.document) {
      return;
    }

    var d = document,
        styles = d.createElement("style");
    d.getElementsByTagName("head")[0].appendChild(styles);
    styles.setAttribute("type", "text/css");

    if (styles.styleSheet) {
      styles.styleSheet.cssText = styleString;
    } else {
      styles.appendChild(document.createTextNode(styleString));
    }

    this.stylesManager[name] = styles;
    return this;
  },
  get: function get(name) {
    return this.stylesManager[name];
  },
  has: function has(name) {
    return this.stylesManager[name] != null;
  },
  removeStyle: function removeStyle(name) {
    if (!this.has(name)) {
      return this;
    }

    this.stylesManager[name].parentNode.removeChild(this.stylesManager[name]);
    delete this.stylesManager[name];
    return this;
  }
});

/***/ }),
/* 169 */
/***/ (function(module, exports) {

/**
 * @class BI.Logic
 * @extends BI.OB
 */
BI.Logic = BI.inherit(BI.OB, {
  createLogic: function createLogic() {
    return this.options || {};
  }
});
BI.LogicFactory = {
  Type: {
    Vertical: "vertical",
    Horizontal: "horizontal",
    Table: "table",
    HorizontalFill: "horizontal_fill"
  },
  createLogic: function createLogic(key, options) {
    var logic;

    switch (key) {
      case BI.LogicFactory.Type.Vertical:
        logic = BI.VerticalLayoutLogic;
        break;

      case BI.LogicFactory.Type.Horizontal:
        logic = BI.HorizontalLayoutLogic;
        break;

      case BI.LogicFactory.Type.Table:
        logic = BI.TableLayoutLogic;
        break;

      case BI.LogicFactory.Type.HorizontalFill:
        logic = BI.HorizontalFillLayoutLogic;
        break;

      default:
        logic = BI.Logic;
        break;
    }

    return new logic(options).createLogic();
  },
  createLogicTypeByDirection: function createLogicTypeByDirection(direction) {
    switch (direction) {
      case BI.Direction.Top:
      case BI.Direction.Bottom:
      case BI.Direction.Custom:
        return BI.LogicFactory.Type.Vertical;

      case BI.Direction.Left:
      case BI.Direction.Right:
        return BI.LogicFactory.Type.Horizontal;
    }
  },
  createLogicItemsByDirection: function createLogicItemsByDirection(direction) {
    var layout;
    var items = Array.prototype.slice.call(arguments, 1);
    items = BI.map(items, function (i, item) {
      if (BI.isWidget(item)) {
        return {
          el: item,
          width: item.options.width,
          height: item.options.height
        };
      }

      return item;
    });

    switch (direction) {
      case BI.Direction.Bottom:
        layout = BI.LogicFactory.Type.Vertical;
        items.reverse();
        break;

      case BI.Direction.Right:
        layout = BI.LogicFactory.Type.Horizontal;
        items.reverse();
        break;

      case BI.Direction.Custom:
        items = items.slice(1);
        break;
    }

    return items;
  }
};

/***/ }),
/* 170 */
/***/ (function(module, exports) {

/**
 * guy
 * 上下布局逻辑
 * 上下布局的时候要考虑到是动态布局还是静态布局
 *
 * @class BI.VerticalLayoutLogic
 * @extends BI.Logic
 */
BI.VerticalLayoutLogic = BI.inherit(BI.Logic, {
  props: function props() {
    return {
      dynamic: false,
      scrollable: null,
      scrolly: false,
      scrollx: false,
      items: [],
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      innerVgap: 0,
      innerHgap: 0
    };
  },
  createLogic: function createLogic() {
    var layout,
        o = this.options;

    if (o.dynamic) {
      layout = "bi.vertical";
    } else {
      layout = "bi.vtape";
    }

    return BI._.pickBy({
      type: layout,
      scrollable: o.scrollable,
      scrolly: o.scrolly,
      scrollx: o.scrollx,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      items: o.items,
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      rowSize: o.rowSize
    }, BI.isNotNull);
  }
});
/**
 * guy
 * 左右布局逻辑
 * 左右布局的时候要考虑到是动态布局还是静态布局
 *
 * @class BI.HorizontalLayoutLogic
 * @extends BI.Logic
 */

BI.HorizontalLayoutLogic = BI.inherit(BI.Logic, {
  props: function props() {
    return {
      dynamic: false,
      scrollable: null,
      scrolly: false,
      scrollx: false,
      items: [],
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      innerVgap: 0,
      innerHgap: 0
    };
  },
  createLogic: function createLogic() {
    var layout,
        o = this.options;

    if (o.dynamic) {
      layout = "bi.vertical_adapt";
    } else {
      layout = "bi.htape";
    }

    return BI._.pickBy({
      type: layout,
      scrollable: o.scrollable,
      scrolly: o.scrolly,
      scrollx: o.scrollx,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      items: o.items,
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      rowSize: o.rowSize
    }, BI.isNotNull);
  }
});
/**
 * guy
 * 表格布局逻辑
 * 表格布局的时候要考虑到是动态布局还是静态布局
 *
 * @class BI.TableLayoutLogic
 * @extends BI.OB
 */

BI.TableLayoutLogic = BI.inherit(BI.Logic, {
  props: function props() {
    return {
      dynamic: false,
      scrollable: null,
      scrolly: false,
      scrollx: false,
      columns: 0,
      rows: 0,
      columnSize: [],
      rowSize: [],
      hgap: 0,
      vgap: 0,
      items: []
    };
  },
  createLogic: function createLogic() {
    var layout,
        o = this.options;

    if (o.dynamic) {
      layout = "bi.table";
    } else {
      layout = "bi.window";
    }

    return BI._.pickBy({
      type: layout,
      scrollable: o.scrollable,
      scrolly: o.scrolly,
      scrollx: o.scrollx,
      columns: o.columns,
      rows: o.rows,
      hgap: o.hgap,
      vgap: o.vgap,
      items: o.items,
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      rowSize: o.rowSize
    }, BI.isNotNull);
  }
});
/**
 * guy
 * 左右充满布局逻辑
 *
 * @class BI.HorizontalFillLayoutLogic
 * @extends BI.Logic
 */

BI.HorizontalFillLayoutLogic = BI.inherit(BI.Logic, {
  props: function props() {
    return {
      dynamic: false,
      scrollable: null,
      scrolly: false,
      scrollx: false,
      items: [],
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      innerVgap: 0,
      innerHgap: 0
    };
  },
  createLogic: function createLogic() {
    var layout,
        o = this.options;
    var columnSize = [];
    BI.each(o.items, function (i, item) {
      columnSize.push(item.width || 0);
    });

    if (o.dynamic) {
      layout = "bi.horizontal_fill";
    } else {
      layout = "bi.htape";
    }

    return BI._.pickBy({
      type: layout,
      scrollable: o.scrollable,
      scrolly: o.scrolly,
      scrollx: o.scrollx,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      items: o.items,
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: columnSize,
      rowSize: o.rowSize
    }, BI.isNotNull);
  }
});

/***/ }),
/* 171 */
/***/ (function(module, exports) {

!function () {
  /*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */

  /**
   * CryptoJS core components.
   */
  BI.CRYPT_TYPE = BI.CRYPT_TYPE || {};
  BI.CRYPT_TYPE.AES = "aes";

  var CryptoJS = CryptoJS || function (Math, undefined) {
    /**
     * CryptoJS namespace.
     */
    var C = {};
    /**
     * Library namespace.
     */

    var C_lib = C.lib = {};
    /**
     * Base object for prototypal inheritance.
     */

    var Base = C_lib.Base = function () {
      function F() {}

      return {
        /**
         * Creates a new object that inherits from this object.
         *
         * @param {Object} overrides Properties to copy into the new object.
         *
         * @return {Object} The new object.
         *
         * @static
         *
         * @example
         *
         *     var MyType = CryptoJS.lib.Base.extend({
         *         field: 'value',
         *
         *         method: function () {
         *         }
         *     });
         */
        extend: function extend(overrides) {
          // Spawn
          F.prototype = this;
          var subtype = new F(); // Augment

          if (overrides) {
            subtype.mixIn(overrides);
          } // Create default initializer


          if (!subtype.hasOwnProperty('init')) {
            subtype.init = function () {
              subtype.$super.init.apply(this, arguments);
            };
          } // Initializer's prototype is the subtype object


          subtype.init.prototype = subtype; // Reference supertype

          subtype.$super = this;
          return subtype;
        },

        /**
         * Extends this object and runs the init method.
         * Arguments to create() will be passed to init().
         *
         * @return {Object} The new object.
         *
         * @static
         *
         * @example
         *
         *     var instance = MyType.create();
         */
        create: function create() {
          var instance = this.extend();
          instance.init.apply(instance, arguments);
          return instance;
        },

        /**
         * Initializes a newly created object.
         * Override this method to add some logic when your objects are created.
         *
         * @example
         *
         *     var MyType = CryptoJS.lib.Base.extend({
         *         init: function () {
         *             // ...
         *         }
         *     });
         */
        init: function init() {},

        /**
         * Copies properties into this object.
         *
         * @param {Object} properties The properties to mix in.
         *
         * @example
         *
         *     MyType.mixIn({
         *         field: 'value'
         *     });
         */
        mixIn: function mixIn(properties) {
          for (var propertyName in properties) {
            if (properties.hasOwnProperty(propertyName)) {
              this[propertyName] = properties[propertyName];
            }
          } // IE won't copy toString using the loop above


          if (properties.hasOwnProperty('toString')) {
            this.toString = properties.toString;
          }
        },

        /**
         * Creates a copy of this object.
         *
         * @return {Object} The clone.
         *
         * @example
         *
         *     var clone = instance.clone();
         */
        clone: function clone() {
          return this.init.prototype.extend(this);
        }
      };
    }();
    /**
     * An array of 32-bit words.
     *
     * @property {Array} words The array of 32-bit words.
     * @property {number} sigBytes The number of significant bytes in this word array.
     */


    var WordArray = C_lib.WordArray = Base.extend({
      /**
       * Initializes a newly created word array.
       *
       * @param {Array} words (Optional) An array of 32-bit words.
       * @param {number} sigBytes (Optional) The number of significant bytes in the words.
       *
       * @example
       *
       *     var wordArray = CryptoJS.lib.WordArray.create();
       *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
       *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
       */
      init: function init(words, sigBytes) {
        words = this.words = words || [];

        if (sigBytes != undefined) {
          this.sigBytes = sigBytes;
        } else {
          this.sigBytes = words.length * 4;
        }
      },

      /**
       * Converts this word array to a string.
       *
       * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
       *
       * @return {string} The stringified word array.
       *
       * @example
       *
       *     var string = wordArray + '';
       *     var string = wordArray.toString();
       *     var string = wordArray.toString(CryptoJS.enc.Utf8);
       */
      toString: function toString(encoder) {
        return (encoder || Hex).stringify(this);
      },

      /**
       * Concatenates a word array to this word array.
       *
       * @param {WordArray} wordArray The word array to append.
       *
       * @return {WordArray} This word array.
       *
       * @example
       *
       *     wordArray1.concat(wordArray2);
       */
      concat: function concat(wordArray) {
        // Shortcuts
        var thisWords = this.words;
        var thatWords = wordArray.words;
        var thisSigBytes = this.sigBytes;
        var thatSigBytes = wordArray.sigBytes; // Clamp excess bits

        this.clamp(); // Concat

        if (thisSigBytes % 4) {
          // Copy one byte at a time
          for (var i = 0; i < thatSigBytes; i++) {
            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
          }
        } else if (thatWords.length > 0xffff) {
          // Copy one word at a time
          for (var i = 0; i < thatSigBytes; i += 4) {
            thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
          }
        } else {
          // Copy all words at once
          thisWords.push.apply(thisWords, thatWords);
        }

        this.sigBytes += thatSigBytes; // Chainable

        return this;
      },

      /**
       * Removes insignificant bits.
       *
       * @example
       *
       *     wordArray.clamp();
       */
      clamp: function clamp() {
        // Shortcuts
        var words = this.words;
        var sigBytes = this.sigBytes; // Clamp

        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
        words.length = Math.ceil(sigBytes / 4);
      },

      /**
       * Creates a copy of this word array.
       *
       * @return {WordArray} The clone.
       *
       * @example
       *
       *     var clone = wordArray.clone();
       */
      clone: function clone() {
        var clone = Base.clone.call(this);
        clone.words = this.words.slice(0);
        return clone;
      },

      /**
       * Creates a word array filled with random bytes.
       *
       * @param {number} nBytes The number of random bytes to generate.
       *
       * @return {WordArray} The random word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.lib.WordArray.random(16);
       */
      random: function random(nBytes) {
        var words = [];

        for (var i = 0; i < nBytes; i += 4) {
          words.push(Math.random() * 0x100000000 | 0);
        }

        return new WordArray.init(words, nBytes);
      }
    });
    /**
     * Encoder namespace.
     */

    var C_enc = C.enc = {};
    /**
     * Hex encoding strategy.
     */

    var Hex = C_enc.Hex = {
      /**
       * Converts a word array to a hex string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @return {string} The hex string.
       *
       * @static
       *
       * @example
       *
       *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
       */
      stringify: function stringify(wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes; // Convert

        var hexChars = [];

        for (var i = 0; i < sigBytes; i++) {
          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
          hexChars.push((bite >>> 4).toString(16));
          hexChars.push((bite & 0x0f).toString(16));
        }

        return hexChars.join('');
      },

      /**
       * Converts a hex string to a word array.
       *
       * @param {string} hexStr The hex string.
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
       */
      parse: function parse(hexStr) {
        // Shortcut
        var hexStrLength = hexStr.length; // Convert

        var words = [];

        for (var i = 0; i < hexStrLength; i += 2) {
          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
        }

        return new WordArray.init(words, hexStrLength / 2);
      }
    };
    /**
     * Latin1 encoding strategy.
     */

    var Latin1 = C_enc.Latin1 = {
      /**
       * Converts a word array to a Latin1 string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @return {string} The Latin1 string.
       *
       * @static
       *
       * @example
       *
       *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
       */
      stringify: function stringify(wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes; // Convert

        var latin1Chars = [];

        for (var i = 0; i < sigBytes; i++) {
          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
          latin1Chars.push(String.fromCharCode(bite));
        }

        return latin1Chars.join('');
      },

      /**
       * Converts a Latin1 string to a word array.
       *
       * @param {string} latin1Str The Latin1 string.
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
       */
      parse: function parse(latin1Str) {
        // Shortcut
        var latin1StrLength = latin1Str.length; // Convert

        var words = [];

        for (var i = 0; i < latin1StrLength; i++) {
          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
        }

        return new WordArray.init(words, latin1StrLength);
      }
    };
    /**
     * UTF-8 encoding strategy.
     */

    var Utf8 = C_enc.Utf8 = {
      /**
       * Converts a word array to a UTF-8 string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @return {string} The UTF-8 string.
       *
       * @static
       *
       * @example
       *
       *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
       */
      stringify: function stringify(wordArray) {
        try {
          return decodeURIComponent(escape(Latin1.stringify(wordArray)));
        } catch (e) {
          throw new Error('Malformed UTF-8 data');
        }
      },

      /**
       * Converts a UTF-8 string to a word array.
       *
       * @param {string} utf8Str The UTF-8 string.
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
       */
      parse: function parse(utf8Str) {
        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
      }
    };
    /**
     * Abstract buffered block algorithm template.
     *
     * The property blockSize must be implemented in a concrete subtype.
     *
     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
     */

    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
      /**
       * Resets this block algorithm's data buffer to its initial state.
       *
       * @example
       *
       *     bufferedBlockAlgorithm.reset();
       */
      reset: function reset() {
        // Initial values
        this._data = new WordArray.init();
        this._nDataBytes = 0;
      },

      /**
       * Adds new data to this block algorithm's buffer.
       *
       * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
       *
       * @example
       *
       *     bufferedBlockAlgorithm._append('data');
       *     bufferedBlockAlgorithm._append(wordArray);
       */
      _append: function _append(data) {
        // Convert string to WordArray, else assume WordArray already
        if (typeof data == 'string') {
          data = Utf8.parse(data);
        } // Append


        this._data.concat(data);

        this._nDataBytes += data.sigBytes;
      },

      /**
       * Processes available data blocks.
       *
       * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
       *
       * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
       *
       * @return {WordArray} The processed data.
       *
       * @example
       *
       *     var processedData = bufferedBlockAlgorithm._process();
       *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
       */
      _process: function _process(doFlush) {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;
        var dataSigBytes = data.sigBytes;
        var blockSize = this.blockSize;
        var blockSizeBytes = blockSize * 4; // Count blocks ready

        var nBlocksReady = dataSigBytes / blockSizeBytes;

        if (doFlush) {
          // Round up to include partial blocks
          nBlocksReady = Math.ceil(nBlocksReady);
        } else {
          // Round down to include only full blocks,
          // less the number of blocks that must remain in the buffer
          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
        } // Count words ready


        var nWordsReady = nBlocksReady * blockSize; // Count bytes ready

        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks

        if (nWordsReady) {
          for (var offset = 0; offset < nWordsReady; offset += blockSize) {
            // Perform concrete-algorithm logic
            this._doProcessBlock(dataWords, offset);
          } // Remove processed words


          var processedWords = dataWords.splice(0, nWordsReady);
          data.sigBytes -= nBytesReady;
        } // Return processed words


        return new WordArray.init(processedWords, nBytesReady);
      },

      /**
       * Creates a copy of this object.
       *
       * @return {Object} The clone.
       *
       * @example
       *
       *     var clone = bufferedBlockAlgorithm.clone();
       */
      clone: function clone() {
        var clone = Base.clone.call(this);
        clone._data = this._data.clone();
        return clone;
      },
      _minBufferSize: 0
    });
    /**
     * Abstract hasher template.
     *
     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
     */

    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
      /**
       * Configuration options.
       */
      cfg: Base.extend(),

      /**
       * Initializes a newly created hasher.
       *
       * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
       *
       * @example
       *
       *     var hasher = CryptoJS.algo.SHA256.create();
       */
      init: function init(cfg) {
        // Apply config defaults
        this.cfg = this.cfg.extend(cfg); // Set initial values

        this.reset();
      },

      /**
       * Resets this hasher to its initial state.
       *
       * @example
       *
       *     hasher.reset();
       */
      reset: function reset() {
        // Reset data buffer
        BufferedBlockAlgorithm.reset.call(this); // Perform concrete-hasher logic

        this._doReset();
      },

      /**
       * Updates this hasher with a message.
       *
       * @param {WordArray|string} messageUpdate The message to append.
       *
       * @return {Hasher} This hasher.
       *
       * @example
       *
       *     hasher.update('message');
       *     hasher.update(wordArray);
       */
      update: function update(messageUpdate) {
        // Append
        this._append(messageUpdate); // Update the hash


        this._process(); // Chainable


        return this;
      },

      /**
       * Finalizes the hash computation.
       * Note that the finalize operation is effectively a destructive, read-once operation.
       *
       * @param {WordArray|string} messageUpdate (Optional) A final message update.
       *
       * @return {WordArray} The hash.
       *
       * @example
       *
       *     var hash = hasher.finalize();
       *     var hash = hasher.finalize('message');
       *     var hash = hasher.finalize(wordArray);
       */
      finalize: function finalize(messageUpdate) {
        // Final message update
        if (messageUpdate) {
          this._append(messageUpdate);
        } // Perform concrete-hasher logic


        var hash = this._doFinalize();

        return hash;
      },
      blockSize: 512 / 32,

      /**
       * Creates a shortcut function to a hasher's object interface.
       *
       * @param {Hasher} hasher The hasher to create a helper for.
       *
       * @return {Function} The shortcut function.
       *
       * @static
       *
       * @example
       *
       *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
       */
      _createHelper: function _createHelper(hasher) {
        return function (message, cfg) {
          return new hasher.init(cfg).finalize(message);
        };
      },

      /**
       * Creates a shortcut function to the HMAC's object interface.
       *
       * @param {Hasher} hasher The hasher to use in this HMAC helper.
       *
       * @return {Function} The shortcut function.
       *
       * @static
       *
       * @example
       *
       *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
       */
      _createHmacHelper: function _createHmacHelper(hasher) {
        return function (message, key) {
          return new C_algo.HMAC.init(hasher, key).finalize(message);
        };
      }
    });
    /**
     * Algorithm namespace.
     */

    var C_algo = C.algo = {};
    return C;
  }(Math);
  /*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var C_enc = C.enc;
    /**
     * Base64 encoding strategy.
     */

    var Base64 = C_enc.Base64 = {
      /**
       * Converts a word array to a Base64 string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @return {string} The Base64 string.
       *
       * @static
       *
       * @example
       *
       *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
       */
      stringify: function stringify(wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes;
        var map = this._map; // Clamp excess bits

        wordArray.clamp(); // Convert

        var base64Chars = [];

        for (var i = 0; i < sigBytes; i += 3) {
          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
          var triplet = byte1 << 16 | byte2 << 8 | byte3;

          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
          }
        } // Add padding


        var paddingChar = map.charAt(64);

        if (paddingChar) {
          while (base64Chars.length % 4) {
            base64Chars.push(paddingChar);
          }
        }

        return base64Chars.join('');
      },

      /**
       * Converts a Base64 string to a word array.
       *
       * @param {string} base64Str The Base64 string.
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
       */
      parse: function parse(base64Str) {
        // Shortcuts
        var base64StrLength = base64Str.length;
        var map = this._map; // Ignore padding

        var paddingChar = map.charAt(64);

        if (paddingChar) {
          var paddingIndex = base64Str.indexOf(paddingChar);

          if (paddingIndex != -1) {
            base64StrLength = paddingIndex;
          }
        } // Convert


        var words = [];
        var nBytes = 0;

        for (var i = 0; i < base64StrLength; i++) {
          if (i % 4) {
            var bits1 = map.indexOf(base64Str.charAt(i - 1)) << i % 4 * 2;
            var bits2 = map.indexOf(base64Str.charAt(i)) >>> 6 - i % 4 * 2;
            words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
            nBytes++;
          }
        }

        return WordArray.create(words, nBytes);
      },
      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
    };
  })();
  /*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */


  (function (Math) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_algo = C.algo; // Constants table

    var T = []; // Compute constants

    (function () {
      for (var i = 0; i < 64; i++) {
        T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
      }
    })();
    /**
     * MD5 hash algorithm.
     */


    var MD5 = C_algo.MD5 = Hasher.extend({
      _doReset: function _doReset() {
        this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
      },
      _doProcessBlock: function _doProcessBlock(M, offset) {
        // Swap endian
        for (var i = 0; i < 16; i++) {
          // Shortcuts
          var offset_i = offset + i;
          var M_offset_i = M[offset_i];
          M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
        } // Shortcuts


        var H = this._hash.words;
        var M_offset_0 = M[offset + 0];
        var M_offset_1 = M[offset + 1];
        var M_offset_2 = M[offset + 2];
        var M_offset_3 = M[offset + 3];
        var M_offset_4 = M[offset + 4];
        var M_offset_5 = M[offset + 5];
        var M_offset_6 = M[offset + 6];
        var M_offset_7 = M[offset + 7];
        var M_offset_8 = M[offset + 8];
        var M_offset_9 = M[offset + 9];
        var M_offset_10 = M[offset + 10];
        var M_offset_11 = M[offset + 11];
        var M_offset_12 = M[offset + 12];
        var M_offset_13 = M[offset + 13];
        var M_offset_14 = M[offset + 14];
        var M_offset_15 = M[offset + 15]; // Working varialbes

        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3]; // Computation

        a = FF(a, b, c, d, M_offset_0, 7, T[0]);
        d = FF(d, a, b, c, M_offset_1, 12, T[1]);
        c = FF(c, d, a, b, M_offset_2, 17, T[2]);
        b = FF(b, c, d, a, M_offset_3, 22, T[3]);
        a = FF(a, b, c, d, M_offset_4, 7, T[4]);
        d = FF(d, a, b, c, M_offset_5, 12, T[5]);
        c = FF(c, d, a, b, M_offset_6, 17, T[6]);
        b = FF(b, c, d, a, M_offset_7, 22, T[7]);
        a = FF(a, b, c, d, M_offset_8, 7, T[8]);
        d = FF(d, a, b, c, M_offset_9, 12, T[9]);
        c = FF(c, d, a, b, M_offset_10, 17, T[10]);
        b = FF(b, c, d, a, M_offset_11, 22, T[11]);
        a = FF(a, b, c, d, M_offset_12, 7, T[12]);
        d = FF(d, a, b, c, M_offset_13, 12, T[13]);
        c = FF(c, d, a, b, M_offset_14, 17, T[14]);
        b = FF(b, c, d, a, M_offset_15, 22, T[15]);
        a = GG(a, b, c, d, M_offset_1, 5, T[16]);
        d = GG(d, a, b, c, M_offset_6, 9, T[17]);
        c = GG(c, d, a, b, M_offset_11, 14, T[18]);
        b = GG(b, c, d, a, M_offset_0, 20, T[19]);
        a = GG(a, b, c, d, M_offset_5, 5, T[20]);
        d = GG(d, a, b, c, M_offset_10, 9, T[21]);
        c = GG(c, d, a, b, M_offset_15, 14, T[22]);
        b = GG(b, c, d, a, M_offset_4, 20, T[23]);
        a = GG(a, b, c, d, M_offset_9, 5, T[24]);
        d = GG(d, a, b, c, M_offset_14, 9, T[25]);
        c = GG(c, d, a, b, M_offset_3, 14, T[26]);
        b = GG(b, c, d, a, M_offset_8, 20, T[27]);
        a = GG(a, b, c, d, M_offset_13, 5, T[28]);
        d = GG(d, a, b, c, M_offset_2, 9, T[29]);
        c = GG(c, d, a, b, M_offset_7, 14, T[30]);
        b = GG(b, c, d, a, M_offset_12, 20, T[31]);
        a = HH(a, b, c, d, M_offset_5, 4, T[32]);
        d = HH(d, a, b, c, M_offset_8, 11, T[33]);
        c = HH(c, d, a, b, M_offset_11, 16, T[34]);
        b = HH(b, c, d, a, M_offset_14, 23, T[35]);
        a = HH(a, b, c, d, M_offset_1, 4, T[36]);
        d = HH(d, a, b, c, M_offset_4, 11, T[37]);
        c = HH(c, d, a, b, M_offset_7, 16, T[38]);
        b = HH(b, c, d, a, M_offset_10, 23, T[39]);
        a = HH(a, b, c, d, M_offset_13, 4, T[40]);
        d = HH(d, a, b, c, M_offset_0, 11, T[41]);
        c = HH(c, d, a, b, M_offset_3, 16, T[42]);
        b = HH(b, c, d, a, M_offset_6, 23, T[43]);
        a = HH(a, b, c, d, M_offset_9, 4, T[44]);
        d = HH(d, a, b, c, M_offset_12, 11, T[45]);
        c = HH(c, d, a, b, M_offset_15, 16, T[46]);
        b = HH(b, c, d, a, M_offset_2, 23, T[47]);
        a = II(a, b, c, d, M_offset_0, 6, T[48]);
        d = II(d, a, b, c, M_offset_7, 10, T[49]);
        c = II(c, d, a, b, M_offset_14, 15, T[50]);
        b = II(b, c, d, a, M_offset_5, 21, T[51]);
        a = II(a, b, c, d, M_offset_12, 6, T[52]);
        d = II(d, a, b, c, M_offset_3, 10, T[53]);
        c = II(c, d, a, b, M_offset_10, 15, T[54]);
        b = II(b, c, d, a, M_offset_1, 21, T[55]);
        a = II(a, b, c, d, M_offset_8, 6, T[56]);
        d = II(d, a, b, c, M_offset_15, 10, T[57]);
        c = II(c, d, a, b, M_offset_6, 15, T[58]);
        b = II(b, c, d, a, M_offset_13, 21, T[59]);
        a = II(a, b, c, d, M_offset_4, 6, T[60]);
        d = II(d, a, b, c, M_offset_11, 10, T[61]);
        c = II(c, d, a, b, M_offset_2, 15, T[62]);
        b = II(b, c, d, a, M_offset_9, 21, T[63]); // Intermediate hash value

        H[0] = H[0] + a | 0;
        H[1] = H[1] + b | 0;
        H[2] = H[2] + c | 0;
        H[3] = H[3] + d | 0;
      },
      _doFinalize: function _doFinalize() {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;
        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8; // Add padding

        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
        var nBitsTotalL = nBitsTotal;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
        data.sigBytes = (dataWords.length + 1) * 4; // Hash final blocks

        this._process(); // Shortcuts


        var hash = this._hash;
        var H = hash.words; // Swap endian

        for (var i = 0; i < 4; i++) {
          // Shortcut
          var H_i = H[i];
          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
        } // Return final computed hash


        return hash;
      },
      clone: function clone() {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();
        return clone;
      }
    });

    function FF(a, b, c, d, x, s, t) {
      var n = a + (b & c | ~b & d) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }

    function GG(a, b, c, d, x, s, t) {
      var n = a + (b & d | c & ~d) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }

    function HH(a, b, c, d, x, s, t) {
      var n = a + (b ^ c ^ d) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }

    function II(a, b, c, d, x, s, t) {
      var n = a + (c ^ (b | ~d)) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }
    /**
     * Shortcut function to the hasher's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     *
     * @return {WordArray} The hash.
     *
     * @static
     *
     * @example
     *
     *     var hash = CryptoJS.MD5('message');
     *     var hash = CryptoJS.MD5(wordArray);
     */


    C.MD5 = Hasher._createHelper(MD5);
    /**
     * Shortcut function to the HMAC's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     * @param {WordArray|string} key The secret key.
     *
     * @return {WordArray} The HMAC.
     *
     * @static
     *
     * @example
     *
     *     var hmac = CryptoJS.HmacMD5(message, key);
     */

    C.HmacMD5 = Hasher._createHmacHelper(MD5);
  })(Math);
  /*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var C_algo = C.algo;
    var MD5 = C_algo.MD5;
    /**
     * This key derivation function is meant to conform with EVP_BytesToKey.
     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
     */

    var EvpKDF = C_algo.EvpKDF = Base.extend({
      /**
       * Configuration options.
       *
       * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
       * @property {Hasher} hasher The hash algorithm to use. Default: MD5
       * @property {number} iterations The number of iterations to perform. Default: 1
       */
      cfg: Base.extend({
        keySize: 128 / 32,
        hasher: MD5,
        iterations: 1
      }),

      /**
       * Initializes a newly created key derivation function.
       *
       * @param {Object} cfg (Optional) The configuration options to use for the derivation.
       *
       * @example
       *
       *     var kdf = CryptoJS.algo.EvpKDF.create();
       *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
       *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
       */
      init: function init(cfg) {
        this.cfg = this.cfg.extend(cfg);
      },

      /**
       * Derives a key from a password.
       *
       * @param {WordArray|string} password The password.
       * @param {WordArray|string} salt A salt.
       *
       * @return {WordArray} The derived key.
       *
       * @example
       *
       *     var key = kdf.compute(password, salt);
       */
      compute: function compute(password, salt) {
        // Shortcut
        var cfg = this.cfg; // Init hasher

        var hasher = cfg.hasher.create(); // Initial values

        var derivedKey = WordArray.create(); // Shortcuts

        var derivedKeyWords = derivedKey.words;
        var keySize = cfg.keySize;
        var iterations = cfg.iterations; // Generate key

        while (derivedKeyWords.length < keySize) {
          if (block) {
            hasher.update(block);
          }

          var block = hasher.update(password).finalize(salt);
          hasher.reset(); // Iterations

          for (var i = 1; i < iterations; i++) {
            block = hasher.finalize(block);
            hasher.reset();
          }

          derivedKey.concat(block);
        }

        derivedKey.sigBytes = keySize * 4;
        return derivedKey;
      }
    });
    /**
     * Derives a key from a password.
     *
     * @param {WordArray|string} password The password.
     * @param {WordArray|string} salt A salt.
     * @param {Object} cfg (Optional) The configuration options to use for this computation.
     *
     * @return {WordArray} The derived key.
     *
     * @static
     *
     * @example
     *
     *     var key = CryptoJS.EvpKDF(password, salt);
     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
     */

    C.EvpKDF = function (password, salt, cfg) {
      return EvpKDF.create(cfg).compute(password, salt);
    };
  })();
  /*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */

  /**
   * Cipher core components.
   */


  CryptoJS.lib.Cipher || function (undefined) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
    var C_enc = C.enc;
    var Utf8 = C_enc.Utf8;
    var Base64 = C_enc.Base64;
    var C_algo = C.algo;
    var EvpKDF = C_algo.EvpKDF;
    /**
     * Abstract base cipher template.
     *
     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
     */

    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
      /**
       * Configuration options.
       *
       * @property {WordArray} iv The IV to use for this operation.
       */
      cfg: Base.extend(),

      /**
       * Creates this cipher in encryption mode.
       *
       * @param {WordArray} key The key.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {Cipher} A cipher instance.
       *
       * @static
       *
       * @example
       *
       *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
       */
      createEncryptor: function createEncryptor(key, cfg) {
        return this.create(this._ENC_XFORM_MODE, key, cfg);
      },

      /**
       * Creates this cipher in decryption mode.
       *
       * @param {WordArray} key The key.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {Cipher} A cipher instance.
       *
       * @static
       *
       * @example
       *
       *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
       */
      createDecryptor: function createDecryptor(key, cfg) {
        return this.create(this._DEC_XFORM_MODE, key, cfg);
      },

      /**
       * Initializes a newly created cipher.
       *
       * @param {number} xformMode Either the encryption or decryption transormation mode constant.
       * @param {WordArray} key The key.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @example
       *
       *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
       */
      init: function init(xformMode, key, cfg) {
        // Apply config defaults
        this.cfg = this.cfg.extend(cfg); // Store transform mode and key

        this._xformMode = xformMode;
        this._key = key; // Set initial values

        this.reset();
      },

      /**
       * Resets this cipher to its initial state.
       *
       * @example
       *
       *     cipher.reset();
       */
      reset: function reset() {
        // Reset data buffer
        BufferedBlockAlgorithm.reset.call(this); // Perform concrete-cipher logic

        this._doReset();
      },

      /**
       * Adds data to be encrypted or decrypted.
       *
       * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
       *
       * @return {WordArray} The data after processing.
       *
       * @example
       *
       *     var encrypted = cipher.process('data');
       *     var encrypted = cipher.process(wordArray);
       */
      process: function process(dataUpdate) {
        // Append
        this._append(dataUpdate); // Process available blocks


        return this._process();
      },

      /**
       * Finalizes the encryption or decryption process.
       * Note that the finalize operation is effectively a destructive, read-once operation.
       *
       * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
       *
       * @return {WordArray} The data after final processing.
       *
       * @example
       *
       *     var encrypted = cipher.finalize();
       *     var encrypted = cipher.finalize('data');
       *     var encrypted = cipher.finalize(wordArray);
       */
      finalize: function finalize(dataUpdate) {
        // Final data update
        if (dataUpdate) {
          this._append(dataUpdate);
        } // Perform concrete-cipher logic


        var finalProcessedData = this._doFinalize();

        return finalProcessedData;
      },
      keySize: 128 / 32,
      ivSize: 128 / 32,
      _ENC_XFORM_MODE: 1,
      _DEC_XFORM_MODE: 2,

      /**
       * Creates shortcut functions to a cipher's object interface.
       *
       * @param {Cipher} cipher The cipher to create a helper for.
       *
       * @return {Object} An object with encrypt and decrypt shortcut functions.
       *
       * @static
       *
       * @example
       *
       *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
       */
      _createHelper: function () {
        function selectCipherStrategy(key) {
          if (typeof key == 'string') {
            return PasswordBasedCipher;
          } else {
            return SerializableCipher;
          }
        }

        return function (cipher) {
          return {
            encrypt: function encrypt(message, key, cfg) {
              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
            },
            decrypt: function decrypt(ciphertext, key, cfg) {
              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
            }
          };
        };
      }()
    });
    /**
     * Abstract base stream cipher template.
     *
     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
     */

    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
      _doFinalize: function _doFinalize() {
        // Process partial blocks
        var finalProcessedBlocks = this._process(!!'flush');

        return finalProcessedBlocks;
      },
      blockSize: 1
    });
    /**
     * Mode namespace.
     */

    var C_mode = C.mode = {};
    /**
     * Abstract base block cipher mode template.
     */

    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
      /**
       * Creates this mode for encryption.
       *
       * @param {Cipher} cipher A block cipher instance.
       * @param {Array} iv The IV words.
       *
       * @static
       *
       * @example
       *
       *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
       */
      createEncryptor: function createEncryptor(cipher, iv) {
        return this.Encryptor.create(cipher, iv);
      },

      /**
       * Creates this mode for decryption.
       *
       * @param {Cipher} cipher A block cipher instance.
       * @param {Array} iv The IV words.
       *
       * @static
       *
       * @example
       *
       *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
       */
      createDecryptor: function createDecryptor(cipher, iv) {
        return this.Decryptor.create(cipher, iv);
      },

      /**
       * Initializes a newly created mode.
       *
       * @param {Cipher} cipher A block cipher instance.
       * @param {Array} iv The IV words.
       *
       * @example
       *
       *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
       */
      init: function init(cipher, iv) {
        this._cipher = cipher;
        this._iv = iv;
      }
    });
    /**
     * Cipher Block Chaining mode.
     */

    var CBC = C_mode.CBC = function () {
      /**
       * Abstract base CBC mode.
       */
      var CBC = BlockCipherMode.extend();
      /**
       * CBC encryptor.
       */

      CBC.Encryptor = CBC.extend({
        /**
         * Processes the data block at offset.
         *
         * @param {Array} words The data words to operate on.
         * @param {number} offset The offset where the block starts.
         *
         * @example
         *
         *     mode.processBlock(data.words, offset);
         */
        processBlock: function processBlock(words, offset) {
          // Shortcuts
          var cipher = this._cipher;
          var blockSize = cipher.blockSize; // XOR and encrypt

          xorBlock.call(this, words, offset, blockSize);
          cipher.encryptBlock(words, offset); // Remember this block to use with next block

          this._prevBlock = words.slice(offset, offset + blockSize);
        }
      });
      /**
       * CBC decryptor.
       */

      CBC.Decryptor = CBC.extend({
        /**
         * Processes the data block at offset.
         *
         * @param {Array} words The data words to operate on.
         * @param {number} offset The offset where the block starts.
         *
         * @example
         *
         *     mode.processBlock(data.words, offset);
         */
        processBlock: function processBlock(words, offset) {
          // Shortcuts
          var cipher = this._cipher;
          var blockSize = cipher.blockSize; // Remember this block to use with next block

          var thisBlock = words.slice(offset, offset + blockSize); // Decrypt and XOR

          cipher.decryptBlock(words, offset);
          xorBlock.call(this, words, offset, blockSize); // This block becomes the previous block

          this._prevBlock = thisBlock;
        }
      });

      function xorBlock(words, offset, blockSize) {
        // Shortcut
        var iv = this._iv; // Choose mixing block

        if (iv) {
          var block = iv; // Remove IV for subsequent blocks

          this._iv = undefined;
        } else {
          var block = this._prevBlock;
        } // XOR blocks


        for (var i = 0; i < blockSize; i++) {
          words[offset + i] ^= block[i];
        }
      }

      return CBC;
    }();
    /**
     * Padding namespace.
     */


    var C_pad = C.pad = {};
    /**
     * PKCS #5/7 padding strategy.
     */

    var Pkcs7 = C_pad.Pkcs7 = {
      /**
       * Pads data using the algorithm defined in PKCS #5/7.
       *
       * @param {WordArray} data The data to pad.
       * @param {number} blockSize The multiple that the data should be padded to.
       *
       * @static
       *
       * @example
       *
       *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
       */
      pad: function pad(data, blockSize) {
        // Shortcut
        var blockSizeBytes = blockSize * 4; // Count padding bytes

        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Create padding word

        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes; // Create padding

        var paddingWords = [];

        for (var i = 0; i < nPaddingBytes; i += 4) {
          paddingWords.push(paddingWord);
        }

        var padding = WordArray.create(paddingWords, nPaddingBytes); // Add padding

        data.concat(padding);
      },

      /**
       * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
       *
       * @param {WordArray} data The data to unpad.
       *
       * @static
       *
       * @example
       *
       *     CryptoJS.pad.Pkcs7.unpad(wordArray);
       */
      unpad: function unpad(data) {
        // Get number of padding bytes from last byte
        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding

        data.sigBytes -= nPaddingBytes;
      }
    };
    /**
     * Abstract base block cipher template.
     *
     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
     */

    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
      /**
       * Configuration options.
       *
       * @property {Mode} mode The block mode to use. Default: CBC
       * @property {Padding} padding The padding strategy to use. Default: Pkcs7
       */
      cfg: Cipher.cfg.extend({
        mode: CBC,
        padding: Pkcs7
      }),
      reset: function reset() {
        // Reset cipher
        Cipher.reset.call(this); // Shortcuts

        var cfg = this.cfg;
        var iv = cfg.iv;
        var mode = cfg.mode; // Reset block mode

        if (this._xformMode == this._ENC_XFORM_MODE) {
          var modeCreator = mode.createEncryptor;
        } else
          /* if (this._xformMode == this._DEC_XFORM_MODE) */
          {
            var modeCreator = mode.createDecryptor; // Keep at least one block in the buffer for unpadding

            this._minBufferSize = 1;
          }

        this._mode = modeCreator.call(mode, this, iv && iv.words);
      },
      _doProcessBlock: function _doProcessBlock(words, offset) {
        this._mode.processBlock(words, offset);
      },
      _doFinalize: function _doFinalize() {
        // Shortcut
        var padding = this.cfg.padding; // Finalize

        if (this._xformMode == this._ENC_XFORM_MODE) {
          // Pad data
          padding.pad(this._data, this.blockSize); // Process final blocks

          var finalProcessedBlocks = this._process(!!'flush');
        } else
          /* if (this._xformMode == this._DEC_XFORM_MODE) */
          {
            // Process final blocks
            var finalProcessedBlocks = this._process(!!'flush'); // Unpad data


            padding.unpad(finalProcessedBlocks);
          }

        return finalProcessedBlocks;
      },
      blockSize: 128 / 32
    });
    /**
     * A collection of cipher parameters.
     *
     * @property {WordArray} ciphertext The raw ciphertext.
     * @property {WordArray} key The key to this ciphertext.
     * @property {WordArray} iv The IV used in the ciphering operation.
     * @property {WordArray} salt The salt used with a key derivation function.
     * @property {Cipher} algorithm The cipher algorithm.
     * @property {Mode} mode The block mode used in the ciphering operation.
     * @property {Padding} padding The padding scheme used in the ciphering operation.
     * @property {number} blockSize The block size of the cipher.
     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
     */

    var CipherParams = C_lib.CipherParams = Base.extend({
      /**
       * Initializes a newly created cipher params object.
       *
       * @param {Object} cipherParams An object with any of the possible cipher parameters.
       *
       * @example
       *
       *     var cipherParams = CryptoJS.lib.CipherParams.create({
       *         ciphertext: ciphertextWordArray,
       *         key: keyWordArray,
       *         iv: ivWordArray,
       *         salt: saltWordArray,
       *         algorithm: CryptoJS.algo.AES,
       *         mode: CryptoJS.mode.CBC,
       *         padding: CryptoJS.pad.PKCS7,
       *         blockSize: 4,
       *         formatter: CryptoJS.format.OpenSSL
       *     });
       */
      init: function init(cipherParams) {
        this.mixIn(cipherParams);
      },

      /**
       * Converts this cipher params object to a string.
       *
       * @param {Format} formatter (Optional) The formatting strategy to use.
       *
       * @return {string} The stringified cipher params.
       *
       * @throws Error If neither the formatter nor the default formatter is set.
       *
       * @example
       *
       *     var string = cipherParams + '';
       *     var string = cipherParams.toString();
       *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
       */
      toString: function toString(formatter) {
        return (formatter || this.formatter).stringify(this);
      }
    });
    /**
     * Format namespace.
     */

    var C_format = C.format = {};
    /**
     * OpenSSL formatting strategy.
     */

    var OpenSSLFormatter = C_format.OpenSSL = {
      /**
       * Converts a cipher params object to an OpenSSL-compatible string.
       *
       * @param {CipherParams} cipherParams The cipher params object.
       *
       * @return {string} The OpenSSL-compatible string.
       *
       * @static
       *
       * @example
       *
       *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
       */
      stringify: function stringify(cipherParams) {
        // Shortcuts
        var ciphertext = cipherParams.ciphertext;
        var salt = cipherParams.salt; // Format

        if (salt) {
          var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
        } else {
          var wordArray = ciphertext;
        }

        return wordArray.toString(Base64);
      },

      /**
       * Converts an OpenSSL-compatible string to a cipher params object.
       *
       * @param {string} openSSLStr The OpenSSL-compatible string.
       *
       * @return {CipherParams} The cipher params object.
       *
       * @static
       *
       * @example
       *
       *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
       */
      parse: function parse(openSSLStr) {
        // Parse base64
        var ciphertext = Base64.parse(openSSLStr); // Shortcut

        var ciphertextWords = ciphertext.words; // Test for salt

        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
          // Extract salt
          var salt = WordArray.create(ciphertextWords.slice(2, 4)); // Remove salt from ciphertext

          ciphertextWords.splice(0, 4);
          ciphertext.sigBytes -= 16;
        }

        return CipherParams.create({
          ciphertext: ciphertext,
          salt: salt
        });
      }
    };
    /**
     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
     */

    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
      /**
       * Configuration options.
       *
       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
       */
      cfg: Base.extend({
        format: OpenSSLFormatter
      }),

      /**
       * Encrypts a message.
       *
       * @param {Cipher} cipher The cipher algorithm to use.
       * @param {WordArray|string} message The message to encrypt.
       * @param {WordArray} key The key.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {CipherParams} A cipher params object.
       *
       * @static
       *
       * @example
       *
       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
       */
      encrypt: function encrypt(cipher, message, key, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg); // Encrypt

        var encryptor = cipher.createEncryptor(key, cfg);
        var ciphertext = encryptor.finalize(message); // Shortcut

        var cipherCfg = encryptor.cfg; // Create and return serializable cipher params

        return CipherParams.create({
          ciphertext: ciphertext,
          key: key,
          iv: cipherCfg.iv,
          algorithm: cipher,
          mode: cipherCfg.mode,
          padding: cipherCfg.padding,
          blockSize: cipher.blockSize,
          formatter: cfg.format
        });
      },

      /**
       * Decrypts serialized ciphertext.
       *
       * @param {Cipher} cipher The cipher algorithm to use.
       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
       * @param {WordArray} key The key.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {WordArray} The plaintext.
       *
       * @static
       *
       * @example
       *
       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
       */
      decrypt: function decrypt(cipher, ciphertext, key, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg); // Convert string to CipherParams

        ciphertext = this._parse(ciphertext, cfg.format); // Decrypt

        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
        return plaintext;
      },

      /**
       * Converts serialized ciphertext to CipherParams,
       * else assumed CipherParams already and returns ciphertext unchanged.
       *
       * @param {CipherParams|string} ciphertext The ciphertext.
       * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
       *
       * @return {CipherParams} The unserialized ciphertext.
       *
       * @static
       *
       * @example
       *
       *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
       */
      _parse: function _parse(ciphertext, format) {
        if (typeof ciphertext == 'string') {
          return format.parse(ciphertext, this);
        } else {
          return ciphertext;
        }
      }
    });
    /**
     * Key derivation function namespace.
     */

    var C_kdf = C.kdf = {};
    /**
     * OpenSSL key derivation function.
     */

    var OpenSSLKdf = C_kdf.OpenSSL = {
      /**
       * Derives a key and IV from a password.
       *
       * @param {string} password The password to derive from.
       * @param {number} keySize The size in words of the key to generate.
       * @param {number} ivSize The size in words of the IV to generate.
       * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
       *
       * @return {CipherParams} A cipher params object with the key, IV, and salt.
       *
       * @static
       *
       * @example
       *
       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
       */
      execute: function execute(password, keySize, ivSize, salt) {
        // Generate random salt
        if (!salt) {
          salt = WordArray.random(64 / 8);
        } // Derive key and IV


        var key = EvpKDF.create({
          keySize: keySize + ivSize
        }).compute(password, salt); // Separate key and IV

        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
        key.sigBytes = keySize * 4; // Return params

        return CipherParams.create({
          key: key,
          iv: iv,
          salt: salt
        });
      }
    };
    /**
     * A serializable cipher wrapper that derives the key from a password,
     * and returns ciphertext as a serializable cipher params object.
     */

    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
      /**
       * Configuration options.
       *
       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
       */
      cfg: SerializableCipher.cfg.extend({
        kdf: OpenSSLKdf
      }),

      /**
       * Encrypts a message using a password.
       *
       * @param {Cipher} cipher The cipher algorithm to use.
       * @param {WordArray|string} message The message to encrypt.
       * @param {string} password The password.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {CipherParams} A cipher params object.
       *
       * @static
       *
       * @example
       *
       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
       */
      encrypt: function encrypt(cipher, message, password, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg); // Derive key and other params

        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); // Add IV to config

        cfg.iv = derivedParams.iv; // Encrypt

        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); // Mix in derived params

        ciphertext.mixIn(derivedParams);
        return ciphertext;
      },

      /**
       * Decrypts serialized ciphertext using a password.
       *
       * @param {Cipher} cipher The cipher algorithm to use.
       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
       * @param {string} password The password.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {WordArray} The plaintext.
       *
       * @static
       *
       * @example
       *
       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
       */
      decrypt: function decrypt(cipher, ciphertext, password, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg); // Convert string to CipherParams

        ciphertext = this._parse(ciphertext, cfg.format); // Derive key and other params

        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); // Add IV to config

        cfg.iv = derivedParams.iv; // Decrypt

        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
        return plaintext;
      }
    });
  }();
  /*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */

  /**
   * Electronic Codebook block mode.
   */

  CryptoJS.mode.ECB = function () {
    var ECB = CryptoJS.lib.BlockCipherMode.extend();
    ECB.Encryptor = ECB.extend({
      processBlock: function processBlock(words, offset) {
        this._cipher.encryptBlock(words, offset);
      }
    });
    ECB.Decryptor = ECB.extend({
      processBlock: function processBlock(words, offset) {
        this._cipher.decryptBlock(words, offset);
      }
    });
    return ECB;
  }();
  /*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var BlockCipher = C_lib.BlockCipher;
    var C_algo = C.algo; // Lookup tables

    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX_0 = [];
    var SUB_MIX_1 = [];
    var SUB_MIX_2 = [];
    var SUB_MIX_3 = [];
    var INV_SUB_MIX_0 = [];
    var INV_SUB_MIX_1 = [];
    var INV_SUB_MIX_2 = [];
    var INV_SUB_MIX_3 = []; // Compute lookup tables

    (function () {
      // Compute double table
      var d = [];

      for (var i = 0; i < 256; i++) {
        if (i < 128) {
          d[i] = i << 1;
        } else {
          d[i] = i << 1 ^ 0x11b;
        }
      } // Walk GF(2^8)


      var x = 0;
      var xi = 0;

      for (var i = 0; i < 256; i++) {
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x; // Compute multiplication

        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4]; // Compute sub bytes, mix columns tables

        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX_0[x] = t << 24 | t >>> 8;
        SUB_MIX_1[x] = t << 16 | t >>> 16;
        SUB_MIX_2[x] = t << 8 | t >>> 24;
        SUB_MIX_3[x] = t; // Compute inv sub bytes, inv mix columns tables

        var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
        INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
        INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
        INV_SUB_MIX_3[sx] = t; // Compute next counter

        if (!x) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }
    })(); // Precomputed Rcon lookup


    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
    /**
     * AES block cipher algorithm.
     */

    var AES = C_algo.AES = BlockCipher.extend({
      _doReset: function _doReset() {
        // Shortcuts
        var key = this._key;
        var keyWords = key.words;
        var keySize = key.sigBytes / 4; // Compute number of rounds

        var nRounds = this._nRounds = keySize + 6; // Compute number of key schedule rows

        var ksRows = (nRounds + 1) * 4; // Compute key schedule

        var keySchedule = this._keySchedule = [];

        for (var ksRow = 0; ksRow < ksRows; ksRow++) {
          if (ksRow < keySize) {
            keySchedule[ksRow] = keyWords[ksRow];
          } else {
            var t = keySchedule[ksRow - 1];

            if (!(ksRow % keySize)) {
              // Rot word
              t = t << 8 | t >>> 24; // Sub word

              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff]; // Mix Rcon

              t ^= RCON[ksRow / keySize | 0] << 24;
            } else if (keySize > 6 && ksRow % keySize == 4) {
              // Sub word
              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
            }

            keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
          }
        } // Compute inv key schedule


        var invKeySchedule = this._invKeySchedule = [];

        for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
          var ksRow = ksRows - invKsRow;

          if (invKsRow % 4) {
            var t = keySchedule[ksRow];
          } else {
            var t = keySchedule[ksRow - 4];
          }

          if (invKsRow < 4 || ksRow <= 4) {
            invKeySchedule[invKsRow] = t;
          } else {
            invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
          }
        }
      },
      encryptBlock: function encryptBlock(M, offset) {
        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
      },
      decryptBlock: function decryptBlock(M, offset) {
        // Swap 2nd and 4th rows
        var t = M[offset + 1];
        M[offset + 1] = M[offset + 3];
        M[offset + 3] = t;

        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX); // Inv swap 2nd and 4th rows


        var t = M[offset + 1];
        M[offset + 1] = M[offset + 3];
        M[offset + 3] = t;
      },
      _doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
        // Shortcut
        var nRounds = this._nRounds; // Get input, add round key

        var s0 = M[offset] ^ keySchedule[0];
        var s1 = M[offset + 1] ^ keySchedule[1];
        var s2 = M[offset + 2] ^ keySchedule[2];
        var s3 = M[offset + 3] ^ keySchedule[3]; // Key schedule row counter

        var ksRow = 4; // Rounds

        for (var round = 1; round < nRounds; round++) {
          // Shift rows, sub bytes, mix columns, add round key
          var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
          var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
          var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
          var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++]; // Update state

          s0 = t0;
          s1 = t1;
          s2 = t2;
          s3 = t3;
        } // Shift rows, sub bytes, add round key


        var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
        var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
        var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
        var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]; // Set output

        M[offset] = t0;
        M[offset + 1] = t1;
        M[offset + 2] = t2;
        M[offset + 3] = t3;
      },
      keySize: 256 / 32
    });
    /**
     * Shortcut functions to the cipher's object interface.
     *
     * @example
     *
     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
     */

    C.AES = BlockCipher._createHelper(AES);
  })();

  BI._.extend(BI, {
    /**
     * aes加密方法
     * aes-128-ecb
     *
     * @example
     *
     *     var ciphertext = BI.aesEncrypt(text, key);
     */
    aesEncrypt: function aesEncrypt(text, key) {
      key = CryptoJS.enc.Utf8.parse(key);
      var cipher = CryptoJS.AES.encrypt(text, key, {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
      });
      var base64Cipher = cipher.ciphertext.toString(CryptoJS.enc.Base64);
      return base64Cipher;
    },

    /**
     * aes解密方法
     * @param {String} text 
     * @param {String} key 
     */
    aesDecrypt: function aesDecrypt(text, key) {
      key = CryptoJS.enc.Utf8.parse(key);
      var decipher = CryptoJS.AES.decrypt(text, key, {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
      });
      return CryptoJS.enc.Utf8.stringify(decipher);
    }
  });
}();

/***/ }),
/* 172 */
/***/ (function(module, exports) {

!function () {
  function aspect(type) {
    return function (target, methodName, advice) {
      var exist = target[methodName],
          dispatcher;

      if (!exist || exist.target != target) {
        dispatcher = target[methodName] = function () {
          // before methods
          var beforeArr = dispatcher.before;
          var args = arguments,
              next;

          for (var l = beforeArr.length; l--;) {
            next = beforeArr[l].advice.apply(this, args);

            if (next === false) {
              return false;
            }

            args = next || args;
          } // target method


          var rs = dispatcher.method.apply(this, args); // after methods

          var afterArr = dispatcher.after;

          for (var i = 0, ii = afterArr.length; i < ii; i++) {
            next = afterArr[i].advice.call(this, rs, args);

            if (rs === false) {
              return false;
            }

            args = next || args;
          }

          return rs;
        };

        dispatcher.before = [];
        dispatcher.after = [];

        if (exist) {
          dispatcher.method = exist;
        }

        dispatcher.target = target;
      }

      var aspectArr = (dispatcher || exist)[type];
      var obj = {
        advice: advice,
        _index: aspectArr.length,
        remove: function remove() {
          aspectArr.splice(this._index, 1);
        }
      };
      aspectArr.push(obj);
      return obj;
    };
  }

  BI.aspect = {
    before: aspect("before"),
    after: aspect("after")
  };
  return BI.aspect;
}();

/***/ }),
/* 173 */
/***/ (function(module, exports) {

!function () {
  var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; // private method for UTF-8 encoding

  var _utf8_encode = function _utf8_encode(string) {
    string = string.replace(/\r\n/g, "\n");
    var utftext = "";

    for (var n = 0; n < string.length; n++) {
      var c = string.charCodeAt(n);

      if (c < 128) {
        utftext += String.fromCharCode(c);
      } else if (c > 127 && c < 2048) {
        utftext += String.fromCharCode(c >> 6 | 192);
        utftext += String.fromCharCode(c & 63 | 128);
      } else {
        utftext += String.fromCharCode(c >> 12 | 224);
        utftext += String.fromCharCode(c >> 6 & 63 | 128);
        utftext += String.fromCharCode(c & 63 | 128);
      }
    }

    return utftext;
  }; // private method for UTF-8 decoding


  var _utf8_decode = function _utf8_decode(utftext) {
    var string = "";
    var i = 0;
    var c = 0,
        c3 = 0,
        c2 = 0;

    while (i < utftext.length) {
      c = utftext.charCodeAt(i);

      if (c < 128) {
        string += String.fromCharCode(c);
        i++;
      } else if (c > 191 && c < 224) {
        c2 = utftext.charCodeAt(i + 1);
        string += String.fromCharCode((c & 31) << 6 | c2 & 63);
        i += 2;
      } else {
        c2 = utftext.charCodeAt(i + 1);
        c3 = utftext.charCodeAt(i + 2);
        string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        i += 3;
      }
    }

    return string;
  };

  BI._.extend(BI, {
    encode: function encode(input) {
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;
      input = _utf8_encode(input);

      while (i < input.length) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = (chr1 & 3) << 4 | chr2 >> 4;
        enc3 = (chr2 & 15) << 2 | chr3 >> 6;
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
          enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
          enc4 = 64;
        }

        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
      }

      return output;
    },
    // public method for decoding
    decode: function decode(input) {
      var output = "";
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

      while (i < input.length) {
        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;
        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
          output = output + String.fromCharCode(chr2);
        }

        if (enc4 != 64) {
          output = output + String.fromCharCode(chr3);
        }
      }

      output = _utf8_decode(output);
      return output;
    }
  });
}();

/***/ }),
/* 174 */
/***/ (function(module, exports) {

BI.Cache = {
  _prefix: "bi",
  setUsername: function setUsername(username) {
    localStorage.setItem(BI.Cache._prefix + ".username", (username + "" || "").toUpperCase());
  },
  getUsername: function getUsername() {
    return localStorage.getItem(BI.Cache._prefix + ".username") || "";
  },
  _getKeyPrefix: function _getKeyPrefix() {
    return BI.Cache.getUsername() + "." + BI.Cache._prefix + ".";
  },
  _generateKey: function _generateKey(key) {
    return BI.Cache._getKeyPrefix() + (key || "");
  },
  getItem: function getItem(key) {
    return localStorage.getItem(BI.Cache._generateKey(key));
  },
  setItem: function setItem(key, value) {
    localStorage.setItem(BI.Cache._generateKey(key), value);
  },
  removeItem: function removeItem(key) {
    localStorage.removeItem(BI.Cache._generateKey(key));
  },
  clear: function clear() {
    for (var i = localStorage.length; i >= 0; i--) {
      var key = localStorage.key(i);

      if (key) {
        if (key.indexOf(BI.Cache._getKeyPrefix()) === 0) {
          localStorage.removeItem(key);
        }
      }
    }
  },
  keys: function keys() {
    var result = [];

    for (var i = localStorage.length; i >= 0; i--) {
      var key = localStorage.key(i);

      if (key) {
        var prefix = BI.Cache._getKeyPrefix();

        if (key.indexOf(prefix) === 0) {
          result[result.length] = key.substring(prefix.length);
        }
      }
    }

    return result;
  },
  addCookie: function addCookie(name, value, path, expiresHours) {
    var cookieString = name + "=" + encodeURI(value); // 判断是否设置过期时间

    if (expiresHours && expiresHours > 0) {
      var date = new Date(); // expires是标准GMT格式时间，应该使用时间戳作为起始时间

      date.setTime(date.getTime() + expiresHours * 3600 * 1000);
      cookieString = cookieString + "; expires=" + date.toUTCString();
    }

    if (path) {
      cookieString = cookieString + "; path=" + path;
    }

    document.cookie = cookieString;
  },
  getCookie: function getCookie(name) {
    var arr,
        reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");

    if (arr = document.cookie.match(reg)) {
      return decodeURI(arr[2]);
    }

    return null;
  },
  deleteCookie: function deleteCookie(name, path) {
    var date = new Date();
    date.setTime(date.getTime() - 10000);
    var cookieString = name + "=v; expires=" + date.toUTCString();

    if (path) {
      cookieString = cookieString + "; path=" + path;
    }

    document.cookie = cookieString;
  }
};

/***/ }),
/* 175 */
/***/ (function(module, exports) {

BI.CellSizeAndPositionManager = function (cellCount, cellSizeGetter, estimatedCellSize) {
  this._cellSizeGetter = cellSizeGetter;
  this._cellCount = cellCount;
  this._estimatedCellSize = estimatedCellSize;
  this._cellSizeAndPositionData = {};
  this._lastMeasuredIndex = -1;
};

BI.CellSizeAndPositionManager.prototype = {
  constructor: BI.CellSizeAndPositionManager,
  configure: function configure(cellCount, estimatedCellSize) {
    this._cellCount = cellCount;
    this._estimatedCellSize = estimatedCellSize;
  },
  getCellCount: function getCellCount() {
    return this._cellCount;
  },
  getEstimatedCellSize: function getEstimatedCellSize() {
    return this._estimatedCellSize;
  },
  getLastMeasuredIndex: function getLastMeasuredIndex() {
    return this._lastMeasuredIndex;
  },
  getSizeAndPositionOfCell: function getSizeAndPositionOfCell(index) {
    if (index < 0 || index >= this._cellCount) {
      return;
    }

    if (index > this._lastMeasuredIndex) {
      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
      var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;

      for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {
        var size = this._cellSizeGetter(i);

        if (size == null || isNaN(size)) {
          continue;
        }

        this._cellSizeAndPositionData[i] = {
          offset: offset,
          size: size
        };
        offset += size;
      }

      this._lastMeasuredIndex = index;
    }

    return this._cellSizeAndPositionData[index];
  },
  getSizeAndPositionOfLastMeasuredCell: function getSizeAndPositionOfLastMeasuredCell() {
    return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {
      offset: 0,
      size: 0
    };
  },
  getTotalSize: function getTotalSize() {
    var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
    return lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size + (this._cellCount - this._lastMeasuredIndex - 1) * this._estimatedCellSize;
  },
  getUpdatedOffsetForIndex: function getUpdatedOffsetForIndex(align, containerSize, currentOffset, targetIndex) {
    var datum = this.getSizeAndPositionOfCell(targetIndex);
    var maxOffset = datum.offset;
    var minOffset = maxOffset - containerSize + datum.size;
    var idealOffset;

    switch (align) {
      case "start":
        idealOffset = maxOffset;
        break;

      case "end":
        idealOffset = minOffset;
        break;

      case "center":
        idealOffset = maxOffset - (containerSize - datum.size) / 2;
        break;

      default:
        idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));
        break;
    }

    var totalSize = this.getTotalSize();
    return Math.max(0, Math.min(totalSize - containerSize, idealOffset));
  },
  getVisibleCellRange: function getVisibleCellRange(containerSize, offset) {
    var totalSize = this.getTotalSize();

    if (totalSize === 0) {
      return {};
    }

    var maxOffset = offset + containerSize;

    var start = this._findNearestCell(offset);

    var datum = this.getSizeAndPositionOfCell(start);
    offset = datum.offset + datum.size;
    var stop = start;

    while (offset < maxOffset && stop < this._cellCount - 1) {
      stop++;
      offset += this.getSizeAndPositionOfCell(stop).size;
    }

    return {
      start: start,
      stop: stop
    };
  },
  resetCell: function resetCell(index) {
    this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);
  },
  _binarySearch: function _binarySearch(high, low, offset) {
    var middle;
    var currentOffset;

    while (low <= high) {
      middle = low + Math.floor((high - low) / 2);
      currentOffset = this.getSizeAndPositionOfCell(middle).offset;

      if (currentOffset === offset) {
        return middle;
      } else if (currentOffset < offset) {
        low = middle + 1;
      } else if (currentOffset > offset) {
        high = middle - 1;
      }
    }

    if (low > 0) {
      return low - 1;
    }
  },
  _exponentialSearch: function _exponentialSearch(index, offset) {
    var interval = 1;

    while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {
      index += interval;
      interval *= 2;
    }

    return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);
  },
  _findNearestCell: function _findNearestCell(offset) {
    if (isNaN(offset)) {
      return;
    }

    offset = Math.max(0, offset);
    var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
    var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);

    if (lastMeasuredCellSizeAndPosition.offset >= offset) {
      return this._binarySearch(lastMeasuredIndex, 0, offset);
    }

    return this._exponentialSearch(lastMeasuredIndex, offset);
  }
};

BI.ScalingCellSizeAndPositionManager = function (cellCount, cellSizeGetter, estimatedCellSize, maxScrollSize) {
  this._cellSizeAndPositionManager = new BI.CellSizeAndPositionManager(cellCount, cellSizeGetter, estimatedCellSize);
  this._maxScrollSize = maxScrollSize || 10000000;
};

BI.ScalingCellSizeAndPositionManager.prototype = {
  constructor: BI.ScalingCellSizeAndPositionManager,
  configure: function configure() {
    this._cellSizeAndPositionManager.configure.apply(this._cellSizeAndPositionManager, arguments);
  },
  getCellCount: function getCellCount() {
    return this._cellSizeAndPositionManager.getCellCount();
  },
  getEstimatedCellSize: function getEstimatedCellSize() {
    return this._cellSizeAndPositionManager.getEstimatedCellSize();
  },
  getLastMeasuredIndex: function getLastMeasuredIndex() {
    return this._cellSizeAndPositionManager.getLastMeasuredIndex();
  },
  getOffsetAdjustment: function getOffsetAdjustment(containerSize, offset) {
    var totalSize = this._cellSizeAndPositionManager.getTotalSize();

    var safeTotalSize = this.getTotalSize();

    var offsetPercentage = this._getOffsetPercentage(containerSize, offset, safeTotalSize);

    return Math.round(offsetPercentage * (safeTotalSize - totalSize));
  },
  getSizeAndPositionOfCell: function getSizeAndPositionOfCell(index) {
    return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);
  },
  getSizeAndPositionOfLastMeasuredCell: function getSizeAndPositionOfLastMeasuredCell() {
    return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();
  },
  getTotalSize: function getTotalSize() {
    return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());
  },
  getUpdatedOffsetForIndex: function getUpdatedOffsetForIndex(align, containerSize, currentOffset, targetIndex) {
    currentOffset = this._safeOffsetToOffset(containerSize, currentOffset);

    var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex(align, containerSize, currentOffset, targetIndex);

    return this._offsetToSafeOffset(containerSize, offset);
  },
  getVisibleCellRange: function getVisibleCellRange(containerSize, offset) {
    offset = this._safeOffsetToOffset(containerSize, offset);
    return this._cellSizeAndPositionManager.getVisibleCellRange(containerSize, offset);
  },
  resetCell: function resetCell(index) {
    this._cellSizeAndPositionManager.resetCell(index);
  },
  _getOffsetPercentage: function _getOffsetPercentage(containerSize, offset, totalSize) {
    return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);
  },
  _offsetToSafeOffset: function _offsetToSafeOffset(containerSize, offset) {
    var totalSize = this._cellSizeAndPositionManager.getTotalSize();

    var safeTotalSize = this.getTotalSize();

    if (totalSize === safeTotalSize) {
      return offset;
    }

    var offsetPercentage = this._getOffsetPercentage(containerSize, offset, totalSize);

    return Math.round(offsetPercentage * (safeTotalSize - containerSize));
  },
  _safeOffsetToOffset: function _safeOffsetToOffset(containerSize, offset) {
    var totalSize = this._cellSizeAndPositionManager.getTotalSize();

    var safeTotalSize = this.getTotalSize();

    if (totalSize === safeTotalSize) {
      return offset;
    }

    var offsetPercentage = this._getOffsetPercentage(containerSize, offset, safeTotalSize);

    return Math.round(offsetPercentage * (totalSize - containerSize));
  }
};

/***/ }),
/* 176 */
/***/ (function(module, exports) {

(function () {
  function defaultComparator(a, b) {
    return a < b;
  }

  BI.Heap = function (items, comparator) {
    this._items = items || [];
    this._size = this._items.length;
    this._comparator = comparator || defaultComparator;

    this._heapify();
  };

  BI.Heap.prototype = {
    constructor: BI.Heap,
    empty: function empty() {
      return this._size === 0;
    },
    pop: function pop() {
      if (this._size === 0) {
        return;
      }

      var elt = this._items[0];

      var lastElt = this._items.pop();

      this._size--;

      if (this._size > 0) {
        this._items[0] = lastElt;

        this._sinkDown(0);
      }

      return elt;
    },
    push: function push(item) {
      this._items[this._size++] = item;

      this._bubbleUp(this._size - 1);
    },
    size: function size() {
      return this._size;
    },
    peek: function peek() {
      if (this._size === 0) {
        return;
      }

      return this._items[0];
    },
    _heapify: function _heapify() {
      for (var index = Math.floor((this._size + 1) / 2); index >= 0; index--) {
        this._sinkDown(index);
      }
    },
    _bubbleUp: function _bubbleUp(index) {
      var elt = this._items[index];

      while (index > 0) {
        var parentIndex = Math.floor((index + 1) / 2) - 1;
        var parentElt = this._items[parentIndex]; // if parentElt < elt, stop

        if (this._comparator(parentElt, elt)) {
          return;
        } // swap


        this._items[parentIndex] = elt;
        this._items[index] = parentElt;
        index = parentIndex;
      }
    },
    _sinkDown: function _sinkDown(index) {
      var elt = this._items[index];

      while (true) {
        var leftChildIndex = 2 * (index + 1) - 1;
        var rightChildIndex = 2 * (index + 1);
        var swapIndex = -1;

        if (leftChildIndex < this._size) {
          var leftChild = this._items[leftChildIndex];

          if (this._comparator(leftChild, elt)) {
            swapIndex = leftChildIndex;
          }
        }

        if (rightChildIndex < this._size) {
          var rightChild = this._items[rightChildIndex];

          if (this._comparator(rightChild, elt)) {
            if (swapIndex === -1 || this._comparator(rightChild, this._items[swapIndex])) {
              swapIndex = rightChildIndex;
            }
          }
        } // if we don't have a swap, stop


        if (swapIndex === -1) {
          return;
        }

        this._items[index] = this._items[swapIndex];
        this._items[swapIndex] = elt;
        index = swapIndex;
      }
    }
  };
})();

/***/ }),
/* 177 */
/***/ (function(module, exports) {

!function () {
  BI.LinkHashMap = function () {
    this.array = [];
    this.map = {};
  };

  BI.LinkHashMap.prototype = {
    constructor: BI.LinkHashMap,
    has: function has(key) {
      if (key in this.map) {
        return true;
      }

      return false;
    },
    add: function add(key, value) {
      if (typeof key === "undefined") {
        return;
      }

      if (key in this.map) {
        this.map[key] = value;
      } else {
        this.array.push(key);
        this.map[key] = value;
      }
    },
    remove: function remove(key) {
      if (key in this.map) {
        delete this.map[key];

        for (var i = 0; i < this.array.length; i++) {
          if (this.array[i] == key) {
            this.array.splice(i, 1);
            break;
          }
        }
      }
    },
    size: function size() {
      return this.array.length;
    },
    each: function each(fn, scope) {
      var scope = scope || window;
      var fn = fn || null;

      if (fn == null || typeof fn !== "function") {
        return;
      }

      for (var i = 0; i < this.array.length; i++) {
        var key = this.array[i];
        var value = this.map[key];
        var re = fn.call(scope, key, value, i, this.array, this.map);

        if (re == false) {
          break;
        }
      }
    },
    get: function get(key) {
      return this.map[key];
    },
    toArray: function toArray() {
      var array = [];
      this.each(function (key, value) {
        array.push(value);
      });
      return array;
    }
  };
}();

/***/ }),
/* 178 */
/***/ (function(module, exports) {

!function () {
  BI.LRU = function (limit) {
    this.size = 0;
    this.limit = limit;
    this.head = this.tail = undefined;
    this._keymap = {};
  };

  var p = BI.LRU.prototype;

  p.put = function (key, value) {
    var removed;

    if (this.size === this.limit) {
      removed = this.shift();
    }

    var entry = this.get(key, true);

    if (!entry) {
      entry = {
        key: key
      };
      this._keymap[key] = entry;

      if (this.tail) {
        this.tail.newer = entry;
        entry.older = this.tail;
      } else {
        this.head = entry;
      }

      this.tail = entry;
      this.size++;
    }

    entry.value = value;
    return removed;
  };

  p.shift = function () {
    var entry = this.head;

    if (entry) {
      this.head = this.head.newer;
      this.head.older = undefined;
      entry.newer = entry.older = undefined;
      this._keymap[entry.key] = undefined;
      this.size--;
    }

    return entry;
  };

  p.get = function (key, returnEntry) {
    var entry = this._keymap[key];
    if (entry === undefined) return;

    if (entry === this.tail) {
      return returnEntry ? entry : entry.value;
    } // HEAD--------------TAIL
    //   <.older   .newer>
    //  <--- add direction --
    //   A  B  C  <D>  E


    if (entry.newer) {
      if (entry === this.head) {
        this.head = entry.newer;
      }

      entry.newer.older = entry.older; // C <-- E.
    }

    if (entry.older) {
      entry.older.newer = entry.newer; // C. --> E
    }

    entry.newer = undefined; // D --x

    entry.older = this.tail; // D. --> E

    if (this.tail) {
      this.tail.newer = entry; // E. <-- D
    }

    this.tail = entry;
    return returnEntry ? entry : entry.value;
  };

  p.has = function (key) {
    return this._keymap[key] != null;
  };
}();

/***/ }),
/* 179 */
/***/ (function(module, exports) {

// 线段树
(function () {
  var parent = function parent(node) {
    return Math.floor(node / 2);
  };

  var Int32Array = _global.Int32Array || function (size) {
    var xs = [];

    for (var i = size - 1; i >= 0; --i) {
      xs[i] = 0;
    }

    return xs;
  };

  var ceilLog2 = function ceilLog2(x) {
    var y = 1;

    while (y < x) {
      y *= 2;
    }

    return y;
  };

  BI.PrefixIntervalTree = function (xs) {
    this._size = xs.length;
    this._half = ceilLog2(this._size); // _heap是一个_size两倍以上的堆

    this._heap = new Int32Array(2 * this._half);
    var i; // 初始化 >= _size 的堆空间, 即叶子节点

    for (i = 0; i < this._size; ++i) {
      this._heap[this._half + i] = xs[i];
    } // 初始化 < _size 的堆空间, 即非叶子节点，根节点包含整个区间


    for (i = this._half - 1; i > 0; --i) {
      this._heap[i] = this._heap[2 * i] + this._heap[2 * i + 1];
    }
  };

  BI.PrefixIntervalTree.prototype = {
    constructor: BI.PrefixIntervalTree,
    // 往_half之后的空间set值，需要更新其所有祖先节点的值
    set: function set(index, value) {
      var node = this._half + index;
      this._heap[node] = value;
      node = parent(node);

      for (; node !== 0; node = parent(node)) {
        this._heap[node] = this._heap[2 * node] + this._heap[2 * node + 1];
      }
    },
    get: function get(index) {
      var node = this._half + index;
      return this._heap[node];
    },
    getSize: function getSize() {
      return this._size;
    },

    /**
     * get(0) + get(1) + ... + get(end - 1).
     */
    sumUntil: function sumUntil(end) {
      if (end === 0) {
        return 0;
      }

      var node = this._half + end - 1;
      var sum = this._heap[node];

      for (; node !== 1; node = parent(node)) {
        if (node % 2 === 1) {
          sum += this._heap[node - 1];
        }
      }

      return sum;
    },

    /**
     * get(0) + get(1) + ... + get(inclusiveEnd).
     */
    sumTo: function sumTo(inclusiveEnd) {
      return this.sumUntil(inclusiveEnd + 1);
    },

    /**
     * sum get(begin) + get(begin + 1) + ... + get(end - 1).
     */
    sum: function sum(begin, end) {
      return this.sumUntil(end) - this.sumUntil(begin);
    },

    /**
     * Returns the smallest i such that 0 <= i <= size and sumUntil(i) <= t, or
     * -1 if no such i exists.
     */
    greatestLowerBound: function greatestLowerBound(t) {
      if (t < 0) {
        return -1;
      }

      var node = 1;

      if (this._heap[node] <= t) {
        return this._size;
      }

      while (node < this._half) {
        var leftSum = this._heap[2 * node];

        if (t < leftSum) {
          node = 2 * node;
        } else {
          node = 2 * node + 1;
          t -= leftSum;
        }
      }

      return node - this._half;
    },

    /**
     * Returns the smallest i such that 0 <= i <= size and sumUntil(i) < t, or
     * -1 if no such i exists.
     */
    greatestStrictLowerBound: function greatestStrictLowerBound(t) {
      if (t <= 0) {
        return -1;
      }

      var node = 1;

      if (this._heap[node] < t) {
        return this._size;
      }

      while (node < this._half) {
        var leftSum = this._heap[2 * node];

        if (t <= leftSum) {
          node = 2 * node;
        } else {
          node = 2 * node + 1;
          t -= leftSum;
        }
      }

      return node - this._half;
    },

    /**
     * Returns the smallest i such that 0 <= i <= size and t <= sumUntil(i), or
     * size + 1 if no such i exists.
     */
    leastUpperBound: function leastUpperBound(t) {
      return this.greatestStrictLowerBound(t) + 1;
    },

    /**
     * Returns the smallest i such that 0 <= i <= size and t < sumUntil(i), or
     * size + 1 if no such i exists.
     */
    leastStrictUpperBound: function leastStrictUpperBound(t) {
      return this.greatestLowerBound(t) + 1;
    }
  };

  BI.PrefixIntervalTree.uniform = function (size, initialValue) {
    var xs = [];

    for (var i = size - 1; i >= 0; --i) {
      xs[i] = initialValue;
    }

    return new BI.PrefixIntervalTree(xs);
  };

  BI.PrefixIntervalTree.empty = function (size) {
    return BI.PrefixIntervalTree.uniform(size, 0);
  };
})();

/***/ }),
/* 180 */
/***/ (function(module, exports) {

!function () {
  BI.Queue = function (capacity) {
    this.capacity = capacity;
    this.array = [];
  };

  BI.Queue.prototype = {
    constructor: BI.Queue,
    contains: function contains(v) {
      return BI.contains(this.array, v);
    },
    indexOf: function indexOf(v) {
      return BI.contains(this.array, v);
    },
    getElementByIndex: function getElementByIndex(index) {
      return this.array[index];
    },
    push: function push(v) {
      this.array.push(v);

      if (this.capacity && this.array.length > this.capacity) {
        this.array.shift();
      }
    },
    pop: function pop() {
      this.array.pop();
    },
    shift: function shift() {
      this.array.shift();
    },
    unshift: function unshift(v) {
      this.array.unshift(v);

      if (this.capacity && this.array.length > this.capacity) {
        this.array.pop();
      }
    },
    remove: function remove(v) {
      BI.remove(this.array, v);
    },
    splice: function splice() {
      this.array.splice.apply(this.array, arguments);
    },
    slice: function slice() {
      this.array.slice.apply(this.array, arguments);
    },
    size: function size() {
      return this.array.length;
    },
    each: function each(fn, scope) {
      var scope = scope || window;
      var fn = fn || null;

      if (fn == null || typeof fn !== "function") {
        return;
      }

      for (var i = 0; i < this.array.length; i++) {
        var re = fn.call(scope, i, this.array[i], this.array);

        if (re == false) {
          break;
        }
      }
    },
    toArray: function toArray() {
      return this.array;
    },
    fromArray: function fromArray(array) {
      var self = this;
      BI.each(array, function (i, v) {
        self.push(v);
      });
    },
    clear: function clear() {
      this.array.length = 0;
    }
  };
}();

/***/ }),
/* 181 */
/***/ (function(module, exports) {

!function () {
  var Section = function Section(height, width, x, y) {
    this.height = height;
    this.width = width;
    this.x = x;
    this.y = y;
    this._indexMap = {};
    this._indices = [];
  };

  Section.prototype = {
    constructor: Section,
    addCellIndex: function addCellIndex(index) {
      if (!this._indexMap[index]) {
        this._indexMap[index] = true;

        this._indices.push(index);
      }
    },
    getCellIndices: function getCellIndices() {
      return this._indices;
    }
  };
  var SECTION_SIZE = 100;

  BI.SectionManager = function (sectionSize) {
    this._sectionSize = sectionSize || SECTION_SIZE;
    this._cellMetadata = [];
    this._sections = {};
  };

  BI.SectionManager.prototype = {
    constructor: BI.SectionManager,
    getCellIndices: function getCellIndices(height, width, x, y) {
      var indices = {};
      BI.each(this.getSections(height, width, x, y), function (i, section) {
        BI.each(section.getCellIndices(), function (j, index) {
          indices[index] = index;
        });
      });
      return BI.map(BI.keys(indices), function (i, index) {
        return indices[index];
      });
    },
    getCellMetadata: function getCellMetadata(index) {
      return this._cellMetadata[index];
    },
    getSections: function getSections(height, width, x, y) {
      var sectionXStart = Math.floor(x / this._sectionSize);
      var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);
      var sectionYStart = Math.floor(y / this._sectionSize);
      var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);
      var sections = [];

      for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {
        for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {
          var key = sectionX + "." + sectionY;

          if (!this._sections[key]) {
            this._sections[key] = new Section(this._sectionSize, this._sectionSize, sectionX * this._sectionSize, sectionY * this._sectionSize);
          }

          sections.push(this._sections[key]);
        }
      }

      return sections;
    },
    getTotalSectionCount: function getTotalSectionCount() {
      return BI.size(this._sections);
    },
    registerCell: function registerCell(cellMetadatum, index) {
      this._cellMetadata[index] = cellMetadatum;
      BI.each(this.getSections(cellMetadatum.height, cellMetadatum.width, cellMetadatum.x, cellMetadatum.y), function (i, section) {
        section.addCellIndex(index);
      });
    }
  };
}();

/***/ }),
/* 182 */
/***/ (function(module, exports) {

(function () {
  BI.Tree = function () {
    this.root = new BI.Node(BI.UUID());
  };

  BI.Tree.prototype = {
    constructor: BI.Tree,
    addNode: function addNode(node, newNode, index) {
      if (BI.isNull(newNode)) {
        this.root.addChild(node, index);
      } else if (BI.isNull(node)) {
        this.root.addChild(newNode, index);
      } else {
        node.addChild(newNode, index);
      }
    },
    isRoot: function isRoot(node) {
      return node === this.root;
    },
    getRoot: function getRoot() {
      return this.root;
    },
    clear: function clear() {
      this.root.clear();
    },
    initTree: function initTree(nodes) {
      var self = this;
      this.clear();
      var queue = [];
      BI.each(nodes, function (i, node) {
        var n = new BI.Node(node);
        n.set("data", node);
        self.addNode(n);
        queue.push(n);
      });

      while (!BI.isEmpty(queue)) {
        var parent = queue.shift();
        var node = parent.get("data");
        BI.each(node.children, function (i, child) {
          var n = new BI.Node(child);
          n.set("data", child);
          queue.push(n);
          self.addNode(parent, n);
        });
      }
    },
    _toJSON: function _toJSON(node) {
      var self = this;
      var children = [];
      BI.each(node.getChildren(), function (i, child) {
        children.push(self._toJSON(child));
      });
      return BI.extend({
        id: node.id
      }, BI.deepClone(node.get("data")), children.length > 0 ? {
        children: children
      } : {});
    },
    toJSON: function toJSON(node) {
      var self = this,
          result = [];
      BI.each((node || this.root).getChildren(), function (i, child) {
        result.push(self._toJSON(child));
      });
      return result;
    },
    _toJSONWithNode: function _toJSONWithNode(node) {
      var self = this;
      var children = [];
      BI.each(node.getChildren(), function (i, child) {
        children.push(self._toJSONWithNode(child));
      });
      return BI.extend({
        id: node.id
      }, BI.deepClone(node.get("data")), {
        node: node
      }, children.length > 0 ? {
        children: children
      } : {});
    },
    toJSONWithNode: function toJSONWithNode(node) {
      var self = this,
          result = [];
      BI.each((node || this.root).getChildren(), function (i, child) {
        result.push(self._toJSONWithNode(child));
      });
      return result;
    },
    search: function search(root, target, param) {
      if (!(root instanceof BI.Node)) {
        return arguments.callee.apply(this, [this.root, root, target]);
      }

      var self = this,
          next = null;

      if (BI.isNull(target)) {
        return null;
      }

      if (BI.isEqual(root[param || "id"], target)) {
        return root;
      }

      BI.any(root.getChildren(), function (i, child) {
        next = self.search(child, target, param);

        if (null !== next) {
          return true;
        }
      });
      return next;
    },
    _traverse: function _traverse(node, callback) {
      var queue = [];
      queue.push(node);

      while (!BI.isEmpty(queue)) {
        var temp = queue.shift();
        var b = callback && callback(temp);

        if (b === false) {
          break;
        }

        if (b === true) {
          continue;
        }

        if (temp != null) {
          queue = queue.concat(temp.getChildren());
        }
      }
    },
    traverse: function traverse(callback) {
      this._traverse(this.root, callback);
    },
    _recursion: function _recursion(node, route, callback) {
      var self = this;
      return BI.every(node.getChildren(), function (i, child) {
        var next = BI.clone(route);
        next.push(child.id);
        var b = callback && callback(child, next);

        if (b === false) {
          return false;
        }

        if (b === true) {
          return true;
        }

        return self._recursion(child, next, callback);
      });
    },
    recursion: function recursion(callback) {
      this._recursion(this.root, [], callback);
    },
    inOrderTraverse: function inOrderTraverse(callback) {
      this._inOrderTraverse(this.root, callback);
    },
    // 中序遍历(递归)
    _inOrderTraverse: function _inOrderTraverse(node, callback) {
      if (node != null) {
        this._inOrderTraverse(node.getLeft());

        callback && callback(node);

        this._inOrderTraverse(node.getRight());
      }
    },
    // 中序遍历(非递归)
    nrInOrderTraverse: function nrInOrderTraverse(callback) {
      var stack = [];
      var node = this.root;

      while (node != null || !BI.isEmpty(stack)) {
        while (node != null) {
          stack.push(node);
          node = node.getLeft();
        }

        node = stack.pop();
        callback && callback(node);
        node = node.getRight();
      }
    },
    preOrderTraverse: function preOrderTraverse(callback) {
      this._preOrderTraverse(this.root, callback);
    },
    // 先序遍历(递归)
    _preOrderTraverse: function _preOrderTraverse(node, callback) {
      if (node != null) {
        callback && callback(node);

        this._preOrderTraverse(node.getLeft());

        this._preOrderTraverse(node.getRight());
      }
    },
    // 先序遍历（非递归）
    nrPreOrderTraverse: function nrPreOrderTraverse(callback) {
      var stack = [];
      var node = this.root;

      while (node != null || !BI.isEmpty(stack)) {
        while (node != null) {
          callback && callback(node);
          stack.push(node);
          node = node.getLeft();
        }

        node = stack.pop();
        node = node.getRight();
      }
    },
    postOrderTraverse: function postOrderTraverse(callback) {
      this._postOrderTraverse(this.root, callback);
    },
    // 后序遍历(递归)
    _postOrderTraverse: function _postOrderTraverse(node, callback) {
      if (node != null) {
        this._postOrderTraverse(node.getLeft());

        this._postOrderTraverse(node.getRight());

        callback && callback(node);
      }
    },
    // 后续遍历(非递归)
    nrPostOrderTraverse: function nrPostOrderTraverse(callback) {
      var stack = [];
      var node = this.root;
      var preNode = null; // 表示最近一次访问的节点

      while (node != null || !BI.isEmpty(stack)) {
        while (node != null) {
          stack.push(node);
          node = node.getLeft();
        }

        node = BI.last(stack);

        if (node.getRight() == null || node.getRight() == preNode) {
          callback && callback(node);
          node = stack.pop();
          preNode = node;
          node = null;
        } else {
          node = node.getRight();
        }
      }
    }
  };

  BI.Node = function (id) {
    if (BI.isObject(id)) {
      BI.extend(this, id);
    } else {
      this.id = id;
    }

    this.clear.apply(this, arguments);
  };

  BI.Node.prototype = {
    constructor: BI.Node,
    set: function set(key, value) {
      if (BI.isObject(key)) {
        BI.extend(this, key);
        return;
      }

      this[key] = value;
    },
    get: function get(key) {
      return this[key];
    },
    isLeaf: function isLeaf() {
      return BI.isEmpty(this.children);
    },
    getChildren: function getChildren() {
      return this.children;
    },
    getChildrenLength: function getChildrenLength() {
      return this.children.length;
    },
    getFirstChild: function getFirstChild() {
      return BI.first(this.children);
    },
    getLastChild: function getLastChild() {
      return BI.last(this.children);
    },
    setLeft: function setLeft(left) {
      this.left = left;
    },
    getLeft: function getLeft() {
      return this.left;
    },
    setRight: function setRight(right) {
      this.right = right;
    },
    getRight: function getRight() {
      return this.right;
    },
    setParent: function setParent(parent) {
      this.parent = parent;
    },
    getParent: function getParent() {
      return this.parent;
    },
    getChild: function getChild(index) {
      return this.children[index];
    },
    getChildIndex: function getChildIndex(id) {
      return BI.findIndex(this.children, function (i, ch) {
        return ch.get("id") === id;
      });
    },
    removeChild: function removeChild(id) {
      this.removeChildByIndex(this.getChildIndex(id));
    },
    removeChildByIndex: function removeChildByIndex(index) {
      var before = this.getChild(index - 1);
      var behind = this.getChild(index + 1);

      if (before != null) {
        before.setRight(behind || null);
      }

      if (behind != null) {
        behind.setLeft(before || null);
      }

      this.children.splice(index, 1);
    },
    removeAllChilds: function removeAllChilds() {
      this.children = [];
    },
    addChild: function addChild(child, index) {
      var cur = null;

      if (BI.isUndefined(index)) {
        cur = this.children.length - 1;
      } else {
        cur = index - 1;
      }

      child.setParent(this);

      if (cur >= 0) {
        this.getChild(cur) && this.getChild(cur).setRight(child);
        child.setLeft(this.getChild(cur));
      }

      if (BI.isUndefined(index)) {
        this.children.push(child);
      } else {
        this.children.splice(index, 0, child);
      }
    },
    equals: function equals(obj) {
      return this === obj || this.id === obj.id;
    },
    clear: function clear() {
      this.parent = null;
      this.left = null;
      this.right = null;
      this.children = [];
    }
  };
  BI.extend(BI.Tree, {
    transformToArrayFormat: function transformToArrayFormat(nodes, pId, childKey) {
      if (!nodes) return [];
      var r = [];
      childKey = childKey || "children";

      if (BI.isArray(nodes)) {
        for (var i = 0, l = nodes.length; i < l; i++) {
          var node = BI.clone(nodes[i]);
          node.pId = node.pId == null ? pId : node.pId;
          delete node.children;
          r.push(node);

          if (nodes[i][childKey]) {
            r = r.concat(BI.Tree.transformToArrayFormat(nodes[i][childKey], node.id));
          }
        }
      } else {
        var newNodes = BI.clone(nodes);
        newNodes.pId = newNodes.pId == null ? pId : newNodes.pId;
        delete newNodes.children;
        r.push(newNodes);

        if (nodes[childKey]) {
          r = r.concat(BI.Tree.transformToArrayFormat(nodes[childKey], newNodes.id));
        }
      }

      return r;
    },
    arrayFormat: function arrayFormat(nodes, pId) {
      if (!nodes) {
        return [];
      }

      var r = [];

      if (BI.isArray(nodes)) {
        for (var i = 0, l = nodes.length; i < l; i++) {
          var node = nodes[i];
          node.pId = node.pId == null ? pId : node.pId;
          r.push(node);

          if (nodes[i]["children"]) {
            r = r.concat(BI.Tree.arrayFormat(nodes[i]["children"], node.id));
          }
        }
      } else {
        var newNodes = nodes;
        newNodes.pId = newNodes.pId == null ? pId : newNodes.pId;
        r.push(newNodes);

        if (nodes["children"]) {
          r = r.concat(BI.Tree.arrayFormat(nodes["children"], newNodes.id));
        }
      }

      return r;
    },
    transformToTreeFormat: function transformToTreeFormat(sNodes) {
      var i, l;

      if (!sNodes) {
        return [];
      }

      if (BI.isArray(sNodes)) {
        var r = [];
        var tmpMap = {};

        for (i = 0, l = sNodes.length; i < l; i++) {
          if (BI.isNull(sNodes[i].id)) {
            return sNodes;
          }

          tmpMap[sNodes[i].id] = BI.clone(sNodes[i]);
        }

        for (i = 0, l = sNodes.length; i < l; i++) {
          if (tmpMap[sNodes[i].pId] && sNodes[i].id !== sNodes[i].pId) {
            if (!tmpMap[sNodes[i].pId].children) {
              tmpMap[sNodes[i].pId].children = [];
            }

            tmpMap[sNodes[i].pId].children.push(tmpMap[sNodes[i].id]);
          } else {
            r.push(tmpMap[sNodes[i].id]);
          }

          delete tmpMap[sNodes[i].id].pId;
        }

        return r;
      }

      return [sNodes];
    },
    treeFormat: function treeFormat(sNodes) {
      var i, l;

      if (!sNodes) {
        return [];
      }

      if (BI.isArray(sNodes)) {
        var r = [];
        var tmpMap = {};

        for (i = 0, l = sNodes.length; i < l; i++) {
          if (BI.isNull(sNodes[i].id)) {
            return sNodes;
          }

          tmpMap[sNodes[i].id] = sNodes[i];
        }

        for (i = 0, l = sNodes.length; i < l; i++) {
          if (tmpMap[sNodes[i].pId] && sNodes[i].id !== sNodes[i].pId) {
            if (!tmpMap[sNodes[i].pId].children) {
              tmpMap[sNodes[i].pId].children = [];
            }

            tmpMap[sNodes[i].pId].children.push(tmpMap[sNodes[i].id]);
          } else {
            r.push(tmpMap[sNodes[i].id]);
          }
        }

        return r;
      }

      return [sNodes];
    },
    traversal: function traversal(array, callback, pNode) {
      if (BI.isNull(array)) {
        return;
      }

      var self = this;
      BI.some(array, function (i, item) {
        if (callback(i, item, pNode) === false) {
          return true;
        }

        self.traversal(item.children, callback, item);
      });
    }
  });
})();

/***/ }),
/* 183 */
/***/ (function(module, exports) {

// 向量操作
BI.Vector = function (x, y) {
  this.x = x;
  this.y = y;
};

BI.Vector.prototype = {
  constructor: BI.Vector,
  cross: function cross(v) {
    return this.x * v.y - this.y * v.x;
  },
  length: function length(v) {
    return Math.sqrt(this.x * v.x + this.y * v.y);
  }
};

BI.Region = function (x, y, w, h) {
  this.x = x;
  this.y = y;
  this.w = w;
  this.h = h;
};

BI.Region.prototype = {
  constructor: BI.Region,
  // 判断两个区域是否相交，若相交，则要么顶点互相包含，要么矩形边界（或对角线）相交
  isIntersects: function isIntersects(obj) {
    if (this.isPointInside(obj.x, obj.y) || this.isPointInside(obj.x + obj.w, obj.y) || this.isPointInside(obj.x, obj.y + obj.h) || this.isPointInside(obj.x + obj.w, obj.y + obj.h)) {
      return true;
    } else if (obj.isPointInside(this.x, this.y) || obj.isPointInside(this.x + this.w, this.y) || obj.isPointInside(this.x, this.y + this.h) || obj.isPointInside(this.x + this.w, this.y + this.h)) {
      return true;
    } else if (obj.x != null && obj.y != null) // 判断矩形对角线相交 |v1 X v2||v1 X v3| < 0
      {
        var vector1 = new BI.Vector(this.w, this.h); // 矩形对角线向量

        var vector2 = new BI.Vector(obj.x - this.x, obj.y - this.y);
        var vector3 = new BI.Vector(vector2.x + obj.w, vector2.y + obj.h);

        if (vector1.cross(vector2) * vector1.cross(vector3) < 0) {
          return true;
        }
      }

    return false;
  },
  // 判断一个点是否在这个区域内部
  isPointInside: function isPointInside(x, y) {
    if (this.x == null || this.y == null) {
      return false;
    }

    if (x >= this.x && x <= this.x + this.w && y >= this.y && y <= this.y + this.h) {
      return true;
    }

    return false;
  },
  // 返回区域的重心，因为是矩形所以返回中点
  getPosition: function getPosition() {
    var pos = [];
    pos.push(this.x + this.w / 2);
    pos.push(this.y + this.h / 2);
    return pos;
  }
};

/***/ }),
/* 184 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2021/6/30
 */
// 系统参数常量
!function () {
  var system = {
    dependencies: {},
    layoutOptimize: false,
    responsiveMode: false,
    workerMode: false,
    size: {
      // 尺寸
      // 通用尺寸
      TOOL_BAR_HEIGHT: 24,
      LIST_ITEM_HEIGHT: 24,
      TRIGGER_HEIGHT: 24,
      TOAST_TOP: 10,
      H_GAP_SIZE: "M",
      V_GAP_SIZE: "S"
    },
    loadingCreator: function loadingCreator(config) {
      var loadingSize = (config ? config.loadingSize : "small") || "small";
      var isIE = BI.isIE();

      function getSize(v) {
        return Math.ceil(v / (loadingSize === "small" ? 2 : 1));
      }

      return {
        type: "bi.horizontal",
        cls: "bi-loading-widget" + (isIE ? " wave-loading hack" : ""),
        height: getSize(60),
        width: getSize(60),
        hgap: getSize(10),
        vgap: 2.5,
        items: isIE ? [] : [{
          type: "bi.layout",
          cls: "animate-rect rect1",
          height: getSize(50),
          width: getSize(5)
        }, {
          type: "bi.layout",
          cls: "animate-rect rect2",
          height: getSize(50),
          width: getSize(5)
        }, {
          type: "bi.layout",
          cls: "animate-rect rect3",
          height: getSize(50),
          width: getSize(5)
        }]
      };
    }
  }; // 具体尺寸还没定，先写着

  var sizeMap = {
    "S": 10,
    "M": 20,
    "L": 24
  };

  function provider() {
    this.SYSTEM = system;

    this.setSize = function (opt) {
      BI.deepExtend(system, {
        size: opt
      });
    };

    this.setResponsiveMode = function (mode) {
      system.responsiveMode = !!mode;
    };

    this.setWorkerMode = function (mode) {
      system.workerMode = !!mode;
    };

    this.setLayoutOptimize = function (layoutOptimize) {
      system.layoutOptimize = layoutOptimize;
    };

    this.addDependency = function (moduleId, minVersion, maxVersion) {
      system.dependencies[moduleId] = {
        min: minVersion,
        max: maxVersion
      };
    };

    this.addDependencies = function (moduleConfig) {
      BI.extend(system.dependencies, moduleConfig);
    };

    this.setLoadingCreator = function (creator) {
      system.loadingCreator = creator;
    };

    this.$get = function () {
      return BI.inherit(BI.OB, {
        getSize: function getSize() {
          var size = system.size;
          var H_GAP_SIZE = sizeMap[size.H_GAP_SIZE];
          var V_GAP_SIZE = sizeMap[size.V_GAP_SIZE];
          return BI.extend({}, size, {
            H_GAP_SIZE: H_GAP_SIZE,
            V_GAP_SIZE: V_GAP_SIZE
          });
        },
        getResponsiveMode: function getResponsiveMode() {
          return system.responsiveMode;
        },
        getWorkerMode: function getWorkerMode() {
          return system.workerMode;
        },
        getLayoutOptimize: function getLayoutOptimize() {
          return system.layoutOptimize;
        },
        getDependencies: function getDependencies() {
          return system.dependencies;
        },
        getLoading: function getLoading(config) {
          return system.loadingCreator(config);
        }
      });
    };
  }

  BI.provider("bi.provider.system", provider);
}();
BI.prepares.push(function () {
  BI.SIZE_CONSANTS = BI.Providers.getProvider("bi.provider.system").getSize(); // 不再增加线型的配置了,之后不维护前置版本直接删掉，都用实线连接线

  BI.STYLE_CONSTANTS = {};
  BI.STYLE_CONSTANTS.LINK_LINE_TYPE = BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT === 24 ? "dashed" : "solid";
});

/***/ }),
/* 185 */
/***/ (function(module, exports) {

BI.EventListener = {
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent("on" + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent("on" + eventType, callback);
        }
      };
    }
  },
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }

    return {
      remove: BI.emptyFn
    };
  },
  registerDefault: function registerDefault() {}
};

/***/ }),
/* 186 */
/***/ (function(module, exports) {

!function () {
  var cancelAnimationFrame = _global.cancelAnimationFrame || _global.webkitCancelAnimationFrame || _global.mozCancelAnimationFrame || _global.oCancelAnimationFrame || _global.msCancelAnimationFrame || _global.clearTimeout;
  var requestAnimationFrame = _global.requestAnimationFrame || _global.webkitRequestAnimationFrame || _global.mozRequestAnimationFrame || _global.oRequestAnimationFrame || _global.msRequestAnimationFrame || _global.setTimeout;

  BI.MouseMoveTracker = function (onMove, onMoveEnd, domNode) {
    this._isDragging = false;
    this._animationFrameID = null;
    this._domNode = domNode;
    this._onMove = onMove;
    this._onMoveEnd = onMoveEnd;
    this._onMouseMove = BI.bind(this._onMouseMove, this);
    this._onMouseUp = BI.bind(this._onMouseUp, this);
    this._didMouseMove = BI.bind(this._didMouseMove, this);
  };

  BI.MouseMoveTracker.prototype = {
    constructor: BI.MouseMoveTracker,
    captureMouseMoves: function captureMouseMoves(
    /* object*/
    event) {
      if (!this._eventMoveToken && !this._eventUpToken) {
        this._eventMoveToken = BI.EventListener.listen(this._domNode, "mousemove", this._onMouseMove);
        this._eventUpToken = BI.EventListener.listen(this._domNode, "mouseup", this._onMouseUp);
      }

      if (!this._isDragging) {
        this._deltaX = 0;
        this._deltaY = 0;
        this._isDragging = true;
        this._x = event.clientX;
        this._y = event.clientY;
      } // event.preventDefault ? event.preventDefault() : (event.returnValue = false);

    },
    releaseMouseMoves: function releaseMouseMoves() {
      if (this._eventMoveToken && this._eventUpToken) {
        this._eventMoveToken.remove();

        this._eventMoveToken = null;

        this._eventUpToken.remove();

        this._eventUpToken = null;
      }

      if (this._animationFrameID !== null) {
        cancelAnimationFrame(this._animationFrameID);
        this._animationFrameID = null;
      }

      if (this._isDragging) {
        this._isDragging = false;
        this._x = null;
        this._y = null;
      }
    },
    isDragging: function isDragging()
    /* boolean*/
    {
      return this._isDragging;
    },
    _onMouseMove: function _onMouseMove(
    /* object*/
    event) {
      var x = event.clientX;
      var y = event.clientY;
      this._deltaX += x - this._x;
      this._deltaY += y - this._y;

      if (this._animationFrameID === null) {
        // The mouse may move faster then the animation frame does.
        // Use `requestAnimationFrame` to avoid over-updating.
        this._animationFrameID = requestAnimationFrame(this._didMouseMove);
      }

      this._x = x;
      this._y = y;
      event.preventDefault ? event.preventDefault() : event.returnValue = false;
    },
    _didMouseMove: function _didMouseMove() {
      this._animationFrameID = null;

      this._onMove(this._deltaX, this._deltaY);

      this._deltaX = 0;
      this._deltaY = 0;
    },
    _onMouseUp: function _onMouseUp() {
      if (this._animationFrameID) {
        this._didMouseMove();
      }

      this._onMoveEnd();
    }
  };
}();

/***/ }),
/* 187 */
/***/ (function(module, exports) {

!function () {
  var PIXEL_STEP = 10;
  var LINE_HEIGHT = 40;
  var PAGE_HEIGHT = 800;
  var requestAnimationFrame = _global.requestAnimationFrame || _global.webkitRequestAnimationFrame || _global.mozRequestAnimationFrame || _global.oRequestAnimationFrame || _global.msRequestAnimationFrame || _global.setTimeout;

  function normalizeWheel(
  /* object*/
  event)
  /* object*/
  {
    var sX = 0,
        sY = 0,
        // spinX, spinY
    pX = 0,
        pY = 0; // pixelX, pixelY
    // Legacy

    if ("detail" in event) {
      sY = event.detail;
    }

    if ("wheelDelta" in event) {
      sY = -event.wheelDelta / 120;
    }

    if ("wheelDeltaY" in event) {
      sY = -event.wheelDeltaY / 120;
    }

    if ("wheelDeltaX" in event) {
      sX = -event.wheelDeltaX / 120;
    } // side scrolling on FF with DOMMouseScroll


    if ("axis" in event && event.axis === event.HORIZONTAL_AXIS) {
      sX = sY;
      sY = 0;
    }

    pX = sX * PIXEL_STEP;
    pY = sY * PIXEL_STEP;

    if ("deltaY" in event) {
      pY = event.deltaY;
    }

    if ("deltaX" in event) {
      pX = event.deltaX;
    }

    if ((pX || pY) && event.deltaMode) {
      if (event.deltaMode === 1) {
        // delta in LINE units
        pX *= LINE_HEIGHT;
        pY *= LINE_HEIGHT;
      } else {
        // delta in PAGE units
        pX *= PAGE_HEIGHT;
        pY *= PAGE_HEIGHT;
      }
    } // Fall-back if spin cannot be determined


    if (pX && !sX) {
      sX = pX < 1 ? -1 : 1;
    }

    if (pY && !sY) {
      sY = pY < 1 ? -1 : 1;
    }

    return {
      spinX: sX,
      spinY: sY,
      pixelX: pX,
      pixelY: pY
    };
  }

  BI.WheelHandler = function (onWheel, handleScrollX, handleScrollY, stopPropagation) {
    this._animationFrameID = null;
    this._deltaX = 0;
    this._deltaY = 0;
    this._didWheel = BI.bind(this._didWheel, this);

    if (typeof handleScrollX !== "function") {
      handleScrollX = handleScrollX ? function () {
        return true;
      } : function () {
        return false;
      };
    }

    if (typeof handleScrollY !== "function") {
      handleScrollY = handleScrollY ? function () {
        return true;
      } : function () {
        return false;
      };
    }

    if (typeof stopPropagation !== "function") {
      stopPropagation = stopPropagation ? function () {
        return true;
      } : function () {
        return false;
      };
    }

    this._handleScrollX = handleScrollX;
    this._handleScrollY = handleScrollY;
    this._stopPropagation = stopPropagation;
    this._onWheelCallback = onWheel;
    this.onWheel = BI.bind(this.onWheel, this);
  };

  BI.WheelHandler.prototype = {
    constructor: BI.WheelHandler,
    onWheel: function onWheel(
    /* object*/
    event) {
      var normalizedEvent = normalizeWheel(event);
      var deltaX = this._deltaX + normalizedEvent.pixelX;
      var deltaY = this._deltaY + normalizedEvent.pixelY;

      var handleScrollX = this._handleScrollX(deltaX, deltaY);

      var handleScrollY = this._handleScrollY(deltaY, deltaX);

      if (!handleScrollX && !handleScrollY) {
        return;
      }

      this._deltaX += handleScrollX ? normalizedEvent.pixelX : 0;
      this._deltaY += handleScrollY ? normalizedEvent.pixelY : 0;
      event.preventDefault ? event.preventDefault() : event.returnValue = false;
      var changed;

      if (this._deltaX !== 0 || this._deltaY !== 0) {
        if (this._stopPropagation()) {
          event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
        }

        changed = true;
      }

      if (changed === true && this._animationFrameID === null) {
        this._animationFrameID = requestAnimationFrame(this._didWheel);
      }
    },
    _didWheel: function _didWheel() {
      this._animationFrameID = null;

      this._onWheelCallback(this._deltaX, this._deltaY);

      this._deltaX = 0;
      this._deltaY = 0;
    }
  };
}();

/***/ }),
/* 188 */
/***/ (function(module, exports) {

BI.version = "2.0";

/***/ }),
/* 189 */
/***/ (function(module, exports) {

!function () {
  BI.useInWorker = function () {
    function createWatcher(model, keyOrFn, cb, options) {
      if (BI.isPlainObject(cb)) {
        options = cb;
        cb = cb.handler;
      }

      options = options || {};
      return Fix.watch(model, keyOrFn, cb, BI.extend(options, {
        store: model
      }));
    }

    var models = {},
        watches = {};
    addEventListener("message", function (e) {
      var data = e.data;

      switch (data.eventType) {
        case "action":
          models[data.name][data.action].apply(models[data.name], data.args);
          break;

        case "destroy":
          BI.each(watches[data.name], function (i, unwatches) {
            unwatches = BI.isArray(unwatches) ? unwatches : [unwatches];
            BI.each(unwatches, function (j, unwatch) {
              unwatch();
            });
          });
          delete models[data.name];
          delete watches[data.name];
          break;

        case "create":
          var store = models[data.name] = BI.Models.getModel(data.type, data.options);
          watches[data.name] = [];
          BI.each(data.watches, function (i, key) {
            watches[data.name].push(createWatcher(store.model, key, function (newValue, oldValue) {
              postMessage(BI.extend({}, data, {
                eventType: "watch",
                currentWatchType: key
              }, {
                args: [newValue, oldValue]
              }));
            }));
          });
          postMessage(BI.extend({}, data, {
            eventType: "create"
          }, {
            msg: store.model
          }));
          break;

        default:
          break;
      }
    }, false);
  };
}();

/***/ }),
/* 190 */
/***/ (function(module, exports) {

/**
 * 布局容器类
 * @class BI.Layout
 * @extends BI.Widget
 *
 * @cfg {JSON} options 配置属性
 * @cfg {Boolean} [options.scrollable=false] 子组件超出容器边界之后是否会出现滚动条
 * @cfg {Boolean} [options.scrollx=false] 子组件超出容器边界之后是否会出现横向滚动条
 * @cfg {Boolean} [options.scrolly=false] 子组件超出容器边界之后是否会出现纵向滚动条
 */
BI.Layout = BI.inherit(BI.Widget, {
  props: function props() {
    return {
      scrollable: null,
      // true, false, null
      scrollx: false,
      // true, false
      scrolly: false,
      // true, false
      items: [],
      innerHgap: 0,
      innerVgap: 0
    };
  },
  render: function render() {
    var self = this,
        o = this.options;

    this._init4Margin();

    this._init4Scroll();

    if (BI.isFunction(o.columnSize)) {
      var columnSizeFn = o.columnSize;
      o.columnSize = this.__watch(columnSizeFn, function (context, newValue) {
        o.columnSize = newValue;
        self.resize();
      });
    }

    if (BI.isFunction(o.rowSize)) {
      var rowSizeFn = o.rowSize;
      o.rowSize = this.__watch(rowSizeFn, function (context, newValue) {
        o.rowSize = newValue;
        self.resize();
      });
    }
  },
  _init4Margin: function _init4Margin() {
    if (this.options.top) {
      this.element.css("top", BI.pixFormat(this.options.top));
    }

    if (this.options.left) {
      this.element.css("left", BI.pixFormat(this.options.left));
    }

    if (this.options.bottom) {
      this.element.css("bottom", BI.pixFormat(this.options.bottom));
    }

    if (this.options.right) {
      this.element.css("right", BI.pixFormat(this.options.right));
    }
  },
  _init4Scroll: function _init4Scroll() {
    switch (this.options.scrollable) {
      case true:
      case "xy":
        this.element.css("overflow", "auto");
        return;

      case false:
        this.element.css("overflow", "hidden");
        return;

      case "x":
        this.element.css({
          "overflow-x": "auto",
          "overflow-y": "hidden"
        });
        return;

      case "y":
        this.element.css({
          "overflow-x": "hidden",
          "overflow-y": "auto"
        });
        return;

      default:
        break;
    }

    if (this.options.scrollx) {
      this.element.css({
        "overflow-x": "auto",
        "overflow-y": "hidden"
      });
      return;
    }

    if (this.options.scrolly) {
      this.element.css({
        "overflow-x": "hidden",
        "overflow-y": "auto"
      });
    }
  },
  appendFragment: function appendFragment(frag) {
    this.element.append(frag);
  },
  _mountChildren: function _mountChildren() {
    var self = this;

    var frag = BI.Widget._renderEngine.createFragment();

    var hasChild = false;

    for (var key in this._children) {
      var child = this._children[key];

      if (child.element !== self.element) {
        frag.appendChild(child.element[0]);
        hasChild = true;
      }
    }

    if (hasChild === true) {
      this.appendFragment(frag);
    }
  },
  _getChildName: function _getChildName(index) {
    return "" + index;
  },
  _addElement: function _addElement(i, item, context, widget) {
    var self = this,
        w;

    if (widget) {
      return widget;
    }

    if (!this.hasWidget(this._getChildName(i))) {
      w = BI._lazyCreateWidget(item, context);
      w.on(BI.Events.DESTROY, function () {
        BI.each(self._children, function (name, child) {
          if (child === w) {
            delete self._children[name];
            self.removeItemAt(name | 0);
          }
        });
      });
      this.addWidget(this._getChildName(i), w);
    } else {
      w = this.getWidgetByName(this._getChildName(i));
    }

    return w;
  },
  _newElement: function _newElement(i, item, context) {
    var self = this;

    var w = BI._lazyCreateWidget(item, context);

    w.on(BI.Events.DESTROY, function () {
      BI.each(self._children, function (name, child) {
        if (child === w) {
          delete self._children[name];
          self.removeItemAt(name | 0);
        }
      });
    });
    return this._addElement(i, item, context, w);
  },
  _getOptions: function _getOptions(item) {
    if (item instanceof BI.Widget) {
      item = item.options;
    }

    item = BI.stripEL(item);

    if (item instanceof BI.Widget) {
      item = item.options;
    }

    return item;
  },
  _compare: function _compare(item1, item2) {
    var self = this;
    return eq(item1, item2); // 不比较函数

    function eq(a, b, aStack, bStack) {
      if (a === b) {
        return a !== 0 || 1 / a === 1 / b;
      }

      if (a == null || b == null) {
        return a === b;
      }

      var className = Object.prototype.toString.call(a);

      switch (className) {
        case "[object RegExp]":
        case "[object String]":
          return "" + a === "" + b;

        case "[object Number]":
          if (+a !== +a) {
            return +b !== +b;
          }

          return +a === 0 ? 1 / +a === 1 / b : +a === +b;

        case "[object Date]":
        case "[object Boolean]":
          return +a === +b;
      }

      var areArrays = className === "[object Array]";

      if (!areArrays) {
        if (BI.isFunction(a) && BI.isFunction(b)) {
          return true;
        }

        a = self._getOptions(a);
        b = self._getOptions(b);
      }

      aStack = aStack || [];
      bStack = bStack || [];
      var length = aStack.length;

      while (length--) {
        if (aStack[length] === a) {
          return bStack[length] === b;
        }
      }

      aStack.push(a);
      bStack.push(b);

      if (areArrays) {
        length = a.length;

        if (length !== b.length) {
          return false;
        }

        while (length--) {
          if (!eq(a[length], b[length], aStack, bStack)) {
            return false;
          }
        }
      } else {
        var keys = BI._.keys(a),
            key;

        length = keys.length;

        if (BI._.keys(b).length !== length) {
          return false;
        }

        while (length--) {
          key = keys[length];

          if (!(BI._.has(b, key) && eq(a[key], b[key], aStack, bStack))) {
            return false;
          }
        }
      }

      aStack.pop();
      bStack.pop();
      return true;
    }
  },
  _getWrapper: function _getWrapper() {
    return this.element;
  },
  // 不依赖于this.options.items进行更新
  _updateItemAt: function _updateItemAt(oldIndex, newIndex, item) {
    var del = this._children[this._getChildName(oldIndex)];

    var w = this._newElement(newIndex, item); // 需要有个地方临时存一下新建的组件，否则如果直接使用newIndex的话，newIndex位置的元素可能会被用到


    this._children[this._getChildName(newIndex) + "-temp"] = w;
    var nextSibling = del.element.next();

    if (nextSibling.length > 0) {
      BI.Widget._renderEngine.createElement(nextSibling).before(w.element);
    } else {
      w.element.appendTo(this._getWrapper());
    }

    del._destroy();

    w._mount();

    return true;
  },
  _addItemAt: function _addItemAt(index, item) {
    for (var i = this.options.items.length; i > index; i--) {
      this._children[this._getChildName(i)] = this._children[this._getChildName(i - 1)];
    }

    delete this._children[this._getChildName(index)];
    this.options.items.splice(index, 0, item);
  },
  _removeItemAt: function _removeItemAt(index) {
    for (var i = index; i < this.options.items.length - 1; i++) {
      this._children[this._getChildName(i)] = this._children[this._getChildName(i + 1)];
    }

    delete this._children[this._getChildName(this.options.items.length - 1)];
    this.options.items.splice(index, 1);
  },
  _clearGap: function _clearGap(w) {
    w.element.css({
      "margin-top": "",
      "margin-bottom": "",
      "margin-left": "",
      "margin-right": ""
    });
  },
  _optimiseGap: function _optimiseGap(gap) {
    return gap > 0 && gap < 1 ? (gap * 100).toFixed(1) + "%" : BI.pixFormat(gap);
  },
  _optimiseItemLgap: function _optimiseItemLgap(item) {
    if (BI.Providers.getProvider("bi.provider.system").getLayoutOptimize()) {
      return (!item.type && item.el ? (item._lgap || 0) + (item.lgap || 0) : item._lgap) || 0;
    }

    return (item._lgap || 0) + (item.lgap || 0);
  },
  _optimiseItemRgap: function _optimiseItemRgap(item) {
    if (BI.Providers.getProvider("bi.provider.system").getLayoutOptimize()) {
      return (!item.type && item.el ? (item._rgap || 0) + (item.rgap || 0) : item._rgap) || 0;
    }

    return (item._rgap || 0) + (item.rgap || 0);
  },
  _optimiseItemTgap: function _optimiseItemTgap(item) {
    if (BI.Providers.getProvider("bi.provider.system").getLayoutOptimize()) {
      return (!item.type && item.el ? (item._tgap || 0) + (item.tgap || 0) : item._tgap) || 0;
    }

    return (item._tgap || 0) + (item.tgap || 0);
  },
  _optimiseItemBgap: function _optimiseItemBgap(item) {
    if (BI.Providers.getProvider("bi.provider.system").getLayoutOptimize()) {
      return (!item.type && item.el ? (item._bgap || 0) + (item.bgap || 0) : item._bgap) || 0;
    }

    return (item._bgap || 0) + (item.bgap || 0);
  },
  _optimiseItemHgap: function _optimiseItemHgap(item) {
    if (BI.Providers.getProvider("bi.provider.system").getLayoutOptimize()) {
      return (!item.type && item.el ? (item._hgap || 0) + (item.hgap || 0) : item._hgap) || 0;
    }

    return (item._hgap || 0) + (item.hgap || 0);
  },
  _optimiseItemVgap: function _optimiseItemVgap(item) {
    if (BI.Providers.getProvider("bi.provider.system").getLayoutOptimize()) {
      return (!item.type && item.el ? (item._vgap || 0) + (item.vgap || 0) : item._vgap) || 0;
    }

    return (item._vgap || 0) + (item.vgap || 0);
  },
  _handleGap: function _handleGap(w, item, hIndex, vIndex) {
    var o = this.options;
    var innerLgap, innerRgap, innerTgap, innerBgap;

    if (BI.isNull(vIndex)) {
      innerTgap = innerBgap = o.innerVgap;
      innerLgap = hIndex === 0 ? o.innerHgap : 0;
      innerRgap = hIndex === o.items.length - 1 ? o.innerHgap : 0;
    } else {
      innerLgap = innerRgap = o.innerHgap;
      innerTgap = vIndex === 0 ? o.innerVgap : 0;
      innerBgap = vIndex === o.items.length - 1 ? o.innerVgap : 0;
    }

    if (o.vgap + o.tgap + innerTgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item) !== 0) {
      var top = (BI.isNull(vIndex) || vIndex === 0 ? o.vgap : 0) + o.tgap + innerTgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item);

      w.element.css({
        "margin-top": this._optimiseGap(top)
      });
    }

    if (o.hgap + o.lgap + innerLgap + this._optimiseItemLgap(item) + this._optimiseItemHgap(item) !== 0) {
      var left = (BI.isNull(hIndex) || hIndex === 0 ? o.hgap : 0) + o.lgap + innerLgap + this._optimiseItemLgap(item) + this._optimiseItemHgap(item);

      w.element.css({
        "margin-left": this._optimiseGap(left)
      });
    }

    if (o.hgap + o.rgap + innerRgap + this._optimiseItemRgap(item) + this._optimiseItemHgap(item) !== 0) {
      var right = o.hgap + o.rgap + innerRgap + this._optimiseItemRgap(item) + this._optimiseItemHgap(item);

      w.element.css({
        "margin-right": this._optimiseGap(right)
      });
    }

    if (o.vgap + o.bgap + innerBgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item) !== 0) {
      var bottom = o.vgap + o.bgap + innerBgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item);

      w.element.css({
        "margin-bottom": this._optimiseGap(bottom)
      });
    }
  },
  // 横向换纵向
  _handleReverseGap: function _handleReverseGap(w, item, index) {
    var o = this.options;
    var innerLgap, innerRgap, innerTgap, innerBgap;
    innerLgap = innerRgap = o.innerHgap;
    innerTgap = index === 0 ? o.innerVgap : 0;
    innerBgap = index === o.items.length - 1 ? o.innerVgap : 0;

    if (o.vgap + o.tgap + innerTgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item) !== 0) {
      var top = (index === 0 ? o.vgap : 0) + (index === 0 ? o.tgap : 0) + innerTgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item);

      w.element.css({
        "margin-top": this._optimiseGap(top)
      });
    }

    if (o.hgap + o.lgap + innerLgap + this._optimiseItemLgap(item) + this._optimiseItemHgap(item) !== 0) {
      var left = o.hgap + o.lgap + innerLgap + this._optimiseItemLgap(item) + this._optimiseItemHgap(item);

      w.element.css({
        "margin-left": this._optimiseGap(left)
      });
    }

    if (o.hgap + o.rgap + innerRgap + this._optimiseItemRgap(item) + this._optimiseItemHgap(item) !== 0) {
      var right = o.hgap + o.rgap + innerRgap + this._optimiseItemRgap(item) + this._optimiseItemHgap(item);

      w.element.css({
        "margin-right": this._optimiseGap(right)
      });
    } // 这里的代码是关键


    if (o.vgap + o.hgap + o.bgap + innerBgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item) !== 0) {
      var bottom = (index === o.items.length - 1 ? o.vgap : o.hgap) + (index === o.items.length - 1 ? o.bgap : 0) + innerBgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item);

      w.element.css({
        "margin-bottom": this._optimiseGap(bottom)
      });
    }
  },

  /**
   * 添加一个子组件到容器中
   * @param {JSON/BI.Widget} item 子组件
   */
  addItem: function addItem(item) {
    return this.addItemAt(this.options.items.length, item);
  },
  prependItem: function prependItem(item) {
    return this.addItemAt(0, item);
  },
  addItemAt: function addItemAt(index, item) {
    if (index < 0 || index > this.options.items.length) {
      return;
    }

    this._addItemAt(index, item);

    var w = this._addElement(index, item); // addItemAt 还是用之前的找上个兄弟节点向后插入的方式


    if (index > 0) {
      this._children[this._getChildName(index - 1)].element.after(w.element);
    } else {
      w.element.prependTo(this._getWrapper());
    }

    w._mount();

    return w;
  },
  removeItemAt: function removeItemAt(indexes) {
    indexes = BI.isArray(indexes) ? indexes : [indexes];
    var deleted = [];
    var newItems = [],
        newChildren = {};

    for (var i = 0, len = this.options.items.length; i < len; i++) {
      var child = this._children[this._getChildName(i)];

      if (BI.contains(indexes, i)) {
        child && deleted.push(child);
      } else {
        newChildren[this._getChildName(newItems.length)] = child;
        newItems.push(this.options.items[i]);
      }
    }

    this.options.items = newItems;
    this._children = newChildren;
    BI.each(deleted, function (i, c) {
      c._destroy();
    });
  },
  shouldUpdateItem: function shouldUpdateItem(index, item) {
    var child = this._children[this._getChildName(index)];

    if (!child || !child.shouldUpdate) {
      return null;
    }

    return child.shouldUpdate(this._getOptions(item));
  },
  addItems: function addItems(items, context) {
    var self = this,
        o = this.options;

    var fragment = BI.Widget._renderEngine.createFragment();

    var added = [];
    BI.each(items, function (i, item) {
      var w = self._addElement(o.items.length, item, context);

      self._children[self._getChildName(o.items.length)] = w;
      o.items.push(item);
      added.push(w);
      fragment.appendChild(w.element[0]);
    });

    if (this._isMounted) {
      this._getWrapper().append(fragment);

      BI.each(added, function (i, w) {
        w._mount();
      });
    }
  },
  prependItems: function prependItems(items, context) {
    items = items || [];

    var fragment = BI.Widget._renderEngine.createFragment();

    var added = [];

    for (var i = items.length - 1; i >= 0; i--) {
      this._addItemAt(0, items[i]);

      var w = this._addElement(0, items[i], context);

      this._children[this._getChildName(0)] = w;
      this.options.items.unshift(items[i]);
      added.push(w);
      fragment.appendChild(w.element[0]);
    }

    if (this._isMounted) {
      this._getWrapper().prepend(fragment);

      BI.each(added, function (i, w) {
        w._mount();
      });
    }
  },
  getValue: function getValue() {
    var self = this,
        value = [],
        child;
    BI.each(this.options.items, function (i) {
      if (child = self._children[self._getChildName(i)]) {
        var v = child.getValue();
        v = BI.isArray(v) ? v : [v];
        value = value.concat(v);
      }
    });
    return value;
  },
  setValue: function setValue(v) {
    var self = this,
        child;
    BI.each(this.options.items, function (i) {
      if (child = self._children[self._getChildName(i)]) {
        child.setValue(v);
      }
    });
  },
  setText: function setText(v) {
    var self = this,
        child;
    BI.each(this.options.items, function (i) {
      if (child = self._children[self._getChildName(i)]) {
        child.setText(v);
      }
    });
  },
  patchItem: function patchItem(oldVnode, vnode, oldIndex, newIndex) {
    var shouldUpdate = this.shouldUpdateItem(oldIndex, vnode);

    var child = this._children[this._getChildName(oldIndex)];

    if (shouldUpdate) {
      this._children[this._getChildName(newIndex) + "-temp"] = child;
      return child._update(this._getOptions(vnode), shouldUpdate);
    }

    if (shouldUpdate === null && !this._compare(oldVnode, vnode)) {
      // if (child.update) {
      //     return child.update(this._getOptions(vnode));
      // }
      return this._updateItemAt(oldIndex, newIndex, vnode);
    }
  },
  updateChildren: function updateChildren(oldCh, newCh, context) {
    var self = this;
    var oldStartIdx = 0,
        newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var before;
    var updated;
    var children = {};
    BI.each(oldCh, function (i, child) {
      child = self._getOptions(child);
      var key = child.key == null ? i : child.key;

      if (BI.isKey(key)) {
        children[key] = self._children[self._getChildName(i)];
      }
    });

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (BI.isNull(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx];
      } else if (BI.isNull(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode, oldStartIdx, newStartIdx)) {
        var willUpdate = this.patchItem(oldStartVnode, newStartVnode, oldStartIdx, newStartIdx);
        updated = willUpdate || updated;
        children[oldStartVnode.key == null ? oldStartIdx : oldStartVnode.key] = willUpdate ? this._children[this._getChildName(newStartIdx) + "-temp"] : this._children[this._getChildName(oldStartIdx)];
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode, oldEndIdx, newEndIdx)) {
        var willUpdate = this.patchItem(oldEndVnode, newEndVnode, oldEndIdx, newEndIdx);
        updated = willUpdate || updated;
        children[oldEndVnode.key == null ? oldEndIdx : oldEndVnode.key] = willUpdate ? this._children[this._getChildName(newEndIdx) + "-temp"] : this._children[this._getChildName(oldEndIdx)];
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        var willUpdate = this.patchItem(oldStartVnode, newEndVnode, oldStartIdx, newStartIdx);
        updated = willUpdate || updated;
        children[oldStartVnode.key == null ? oldStartIdx : oldStartVnode.key] = willUpdate ? this._children[this._getChildName(newStartIdx) + "-temp"] : this._children[this._getChildName(oldStartIdx)];
        insertBefore(oldStartVnode, oldEndVnode, true);
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        var willUpdate = this.patchItem(oldEndVnode, newStartVnode, oldEndIdx, newEndIdx);
        updated = willUpdate || updated;
        children[oldEndVnode.key == null ? oldEndIdx : oldEndVnode.key] = willUpdate ? this._children[this._getChildName(newEndIdx) + "-temp"] : this._children[this._getChildName(oldEndIdx)];
        insertBefore(oldEndVnode, oldStartVnode);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        var sameOldVnode = findOldVnode(oldCh, newStartVnode, oldStartIdx, oldEndIdx);

        if (BI.isNull(sameOldVnode[0])) {
          //  不存在就把新的放到左边
          var node = addNode(newStartVnode, newStartIdx, context);
          insertBefore(node, oldStartVnode);
        } else {
          //  如果新节点在旧节点区间中存在就复用一下
          var sameOldIndex = sameOldVnode[1];
          var willUpdate = self.patchItem(sameOldVnode[0], newStartVnode, sameOldIndex, newStartIdx);
          updated = willUpdate || updated;
          children[sameOldVnode[0].key == null ? newStartIdx : sameOldVnode[0].key] = willUpdate ? this._children[this._getChildName(newStartIdx) + "-temp"] : self._children[self._getChildName(sameOldIndex)];
          oldCh[sameOldIndex] = undefined;
          insertBefore(sameOldVnode[0], oldStartVnode);
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      before = BI.isNull(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1];
      addVnodes(before, newCh, newStartIdx, newEndIdx, context);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }

    this._children = {};
    BI.each(newCh, function (i, child) {
      var node = self._getOptions(child);

      var key = node.key == null ? i : node.key;
      children[key]._setParent && children[key]._setParent(self);

      children[key]._mount();

      self._children[self._getChildName(i)] = children[key];
    });

    function sameVnode(vnode1, vnode2, oldIndex, newIndex) {
      vnode1 = self._getOptions(vnode1);
      vnode2 = self._getOptions(vnode2);

      if (BI.isKey(vnode1.key)) {
        return vnode1.key === vnode2.key;
      }

      if (oldIndex >= 0) {
        return oldIndex === newIndex;
      }
    }

    function addNode(vnode, index, context) {
      var opt = self._getOptions(vnode);

      var key = opt.key == null ? index : opt.key;
      return children[key] = self._newElement(index, vnode, context);
    }

    function addVnodes(before, vnodes, startIdx, endIdx, context) {
      for (; startIdx <= endIdx; ++startIdx) {
        var node = addNode(vnodes[startIdx], startIdx, context);
        insertBefore(node, before, false, startIdx);
      }
    }

    function removeVnodes(vnodes, startIdx, endIdx) {
      for (; startIdx <= endIdx; ++startIdx) {
        var ch = vnodes[startIdx];

        if (BI.isNotNull(ch)) {
          var node = self._getOptions(ch);

          var key = node.key == null ? startIdx : node.key;

          children[key]._destroy();
        }
      }
    }

    function insertBefore(insert, before, isNext, index) {
      insert = self._getOptions(insert);
      before = before && self._getOptions(before);
      var insertKey = BI.isKey(insert.key) ? insert.key : index;

      if (before && children[before.key]) {
        var beforeKey = BI.isKey(before.key) ? before.key : index;
        var next;

        if (isNext) {
          next = children[beforeKey].element.next();
        } else {
          next = children[beforeKey].element;
        }

        if (next.length > 0) {
          next.before(children[insertKey].element);
        } else {
          self._getWrapper().append(children[insertKey].element);
        }
      } else {
        self._getWrapper().append(children[insertKey].element);
      }
    }

    function findOldVnode(vnodes, vNode, beginIdx, endIdx) {
      var i, found, findIndex;

      for (i = beginIdx; i <= endIdx; ++i) {
        if (vnodes[i] && sameVnode(vnodes[i], vNode)) {
          found = vnodes[i];
          findIndex = i;
        }
      }

      return [found, findIndex];
    }

    return updated;
  },
  forceUpdate: function forceUpdate(opt) {
    if (this._isMounted) {
      BI.each(this._children, function (i, c) {
        c.destroy();
      });
      this._children = {};
      this._isMounted = false;
    }

    this.options.items = opt.items;
    this.stroke(opt.items);

    this._mount();
  },
  update: function update(opt) {
    var o = this.options;
    var items = opt.items || [];
    var context = opt.context;
    var oldItems = o.items;
    this.options.items = items;
    return this.updateChildren(oldItems, items, context);
  },
  stroke: function stroke(items, options) {
    options = options || {};
    var self = this;
    BI.each(items, function (i, item) {
      if (item) {
        self._addElement(i, item, options.context);
      }
    });
  },
  getRowColumnCls: function getRowColumnCls(rowIndex, colIndex, lastRowIndex, lastColIndex) {
    var cls = "";

    if (rowIndex === 0) {
      cls += " first-row";
    } else if (rowIndex === lastRowIndex) {
      cls += " last-row";
    }

    if (colIndex === 0) {
      cls += " first-col";
    } else if (colIndex === lastColIndex) {
      cls += " last-col";
    }

    BI.isOdd(rowIndex + 1) ? cls += " odd-row" : cls += " even-row";
    BI.isOdd(colIndex + 1) ? cls += " odd-col" : cls += " even-col";
    cls += " center-element";
    return cls;
  },
  removeWidget: function removeWidget(nameOrWidget) {
    var removeIndex,
        self = this;

    if (BI.isWidget(nameOrWidget)) {
      BI.each(this._children, function (name, child) {
        if (child === nameOrWidget) {
          removeIndex = name;
        }
      });
    } else {
      removeIndex = nameOrWidget;
    }

    if (removeIndex) {
      this._removeItemAt(removeIndex | 0);
    }
  },
  empty: function empty() {
    BI.Layout.superclass.empty.apply(this, arguments);
    this.options.items = [];
  },
  destroy: function destroy() {
    BI.Layout.superclass.destroy.apply(this, arguments);
    this.options.items = [];
  },
  populate: function populate(items, options) {
    items = items || [];
    options = options || {};

    if (this._isMounted) {
      this.update({
        items: items,
        context: options.context
      });
      return;
    }

    this.options.items = items;
    this.stroke(items, options);
  },
  resize: function resize() {
    this.stroke(this.options.items);
  }
});
BI.shortcut("bi.layout", BI.Layout);

/***/ }),
/* 191 */
/***/ (function(module, exports) {

/**
 * absolute实现的居中布局
 * @class BI.AbsoluteCenterLayout
 * @extends BI.Layout
 */
BI.AbsoluteCenterLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.AbsoluteCenterLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs-c-a",
      hgap: 0,
      lgap: 0,
      rgap: 0,
      vgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.AbsoluteCenterLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.AbsoluteCenterLayout.superclass._addElement.apply(this, arguments);

    w.element.css({
      position: "absolute",
      left: this._optimiseGap(o.hgap + o.lgap + this._optimiseItemLgap(item) + this._optimiseItemHgap(item)),
      right: this._optimiseGap(o.hgap + o.rgap + this._optimiseItemRgap(item) + this._optimiseItemHgap(item)),
      top: this._optimiseGap(o.vgap + o.tgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item)),
      bottom: this._optimiseGap(o.vgap + o.bgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item)),
      margin: "auto"
    });
    return w;
  },
  populate: function populate(items) {
    BI.AbsoluteCenterLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.absolute_center_adapt", BI.AbsoluteCenterLayout);

/***/ }),
/* 192 */
/***/ (function(module, exports) {

/**
 * absolute实现的居中布局
 * @class BI.AbsoluteHorizontalLayout
 * @extends BI.Layout
 */
BI.AbsoluteHorizontalLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.AbsoluteHorizontalLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs-h-a",
      horizontalAlign: BI.HorizontalAlign.Center,
      rowSize: [],
      hgap: 0,
      lgap: 0,
      rgap: 0,
      vgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    BI.AbsoluteHorizontalLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.vtape",
      horizontalAlign: o.horizontalAlign,
      rowSize: o.rowSize,
      items: o.items,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate.apply(this, arguments);
  }
});
BI.shortcut("bi.absolute_horizontal_adapt", BI.AbsoluteHorizontalLayout);

/***/ }),
/* 193 */
/***/ (function(module, exports) {

BI.AbsoluteLeftRightVerticalAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.AbsoluteLeftRightVerticalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs-lr-v-a",
      verticalAlign: BI.VerticalAlign.Middle,
      items: {},
      llgap: 0,
      lrgap: 0,
      lhgap: 0,
      ltgap: 0,
      lbgap: 0,
      lvgap: 0,
      rlgap: 0,
      rrgap: 0,
      rhgap: 0,
      rtgap: 0,
      rbgap: 0,
      rvgap: 0
    });
  },
  render: function render() {
    var o = this.options,
        self = this;
    BI.AbsoluteLeftRightVerticalAdaptLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.htape",
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      verticalAlign: o.verticalAlign,
      items: this._formatItems(o.items),
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable
    };
  },
  _formatItems: function _formatItems(items) {
    var self = this,
        o = this.options;
    var left, right;

    if (BI.isArray(items)) {
      BI.each(items, function (i, item) {
        if (item.left) {
          left = item.left;
        }

        if (item.right) {
          right = item.right;
        }
      });
    }

    var leftItems = left || items.left || [];
    var rightItems = right || items.right || [];
    leftItems = BI.map(leftItems, function (i, item) {
      var json = {
        el: BI.stripEL(item),
        width: item.width
      };

      if (o.lvgap + o.ltgap + self._optimiseItemTgap(item) + self._optimiseItemVgap(item) !== 0) {
        json.tgap = o.lvgap + o.ltgap + self._optimiseItemTgap(item) + self._optimiseItemVgap(item);
      }

      if (o.lhgap + o.llgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item) !== 0) {
        json.lgap = (i === 0 ? o.lhgap : 0) + o.llgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item);
      }

      if (o.lhgap + o.lrgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item) !== 0) {
        json.rgap = o.lhgap + o.lrgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item);
      }

      if (o.lvgap + o.lbgap + self._optimiseItemBgap(item) + self._optimiseItemVgap(item) !== 0) {
        json.bgap = o.lvgap + o.lbgap + self._optimiseItemBgap(item) + self._optimiseItemVgap(item);
      }

      return json;
    });
    rightItems = BI.map(rightItems, function (i, item) {
      var json = {
        el: BI.stripEL(item),
        width: item.width
      };

      if (o.rvgap + o.rtgap + self._optimiseItemTgap(item) + self._optimiseItemVgap(item) !== 0) {
        json.tgap = o.rvgap + o.rtgap + self._optimiseItemTgap(item) + self._optimiseItemVgap(item);
      }

      if (o.rhgap + o.rlgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item) !== 0) {
        json.lgap = (i === 0 ? o.rhgap : 0) + o.rlgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item);
      }

      if (o.rhgap + o.rrgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item) !== 0) {
        json.rgap = o.rhgap + o.rrgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item);
      }

      if (o.rvgap + o.rbgap + self._optimiseItemBgap(item) + self._optimiseItemVgap(item) !== 0) {
        json.bgap = o.rvgap + o.rbgap + self._optimiseItemBgap(item) + self._optimiseItemVgap(item);
      }

      return json;
    });
    return leftItems.concat({}, rightItems);
  },
  resize: function resize() {
    this.layout.stroke(this._formatItems(this.options.items));
  },
  addItem: function addItem() {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate(this._formatItems(items));
  }
});
BI.shortcut("bi.absolute_left_right_vertical_adapt", BI.AbsoluteLeftRightVerticalAdaptLayout);
BI.AbsoluteRightVerticalAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.AbsoluteRightVerticalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs-r-v-a",
      verticalAlign: BI.VerticalAlign.Middle,
      items: [],
      lgap: 0,
      rgap: 0,
      hgap: 0,
      tgap: 0,
      bgap: 0,
      vgap: 0
    });
  },
  render: function render() {
    var o = this.options,
        self = this;
    BI.AbsoluteRightVerticalAdaptLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.htape",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      verticalAlign: o.verticalAlign,
      items: [{}].concat(o.items),
      hgap: o.hgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      vgap: o.vgap,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable
    };
  },
  resize: function resize() {
    this.layout.stroke([{}].concat(this.options.items));
  },
  addItem: function addItem() {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate([{}].concat(items));
  }
});
BI.shortcut("bi.absolute_right_vertical_adapt", BI.AbsoluteRightVerticalAdaptLayout);

/***/ }),
/* 194 */
/***/ (function(module, exports) {

/**
 * absolute实现的居中布局
 * @class BI.AbsoluteVerticalLayout
 * @extends BI.Layout
 */
BI.AbsoluteVerticalLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.AbsoluteVerticalLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs-v-a",
      verticalAlign: BI.VerticalAlign.Middle,
      columnSize: [],
      hgap: 0,
      lgap: 0,
      rgap: 0,
      vgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    BI.AbsoluteVerticalLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.htape",
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      items: o.items,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate.apply(this, arguments);
  }
});
BI.shortcut("bi.absolute_vertical_adapt", BI.AbsoluteVerticalLayout);

/***/ }),
/* 195 */
/***/ (function(module, exports) {

/**
 * 自适应水平和垂直方向都居中容器
 * @class BI.CenterAdaptLayout
 * @extends BI.Layout
 */
BI.CenterAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.CenterAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-c-a",
      horizontalAlign: BI.HorizontalAlign.Center,
      columnSize: [],
      scrollx: false,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var o = this.options,
        self = this;
    BI.CenterAdaptLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.horizontal",
      verticalAlign: BI.VerticalAlign.Middle,
      horizontalAlign: o.horizontalAlign,
      columnSize: o.columnSize,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      items: o.items,
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate.apply(this, arguments);
  }
});
BI.shortcut("bi.center_adapt", BI.CenterAdaptLayout);

/***/ }),
/* 196 */
/***/ (function(module, exports) {

/**
 * 水平方向居中容器
 * @class BI.HorizontalAdaptLayout
 * @extends BI.Layout
 */
BI.HorizontalAdaptLayout = function () {};

BI.shortcut("bi.horizontal_adapt", BI.HorizontalAdaptLayout);

/***/ }),
/* 197 */
/***/ (function(module, exports) {

/**
 * 左右分离，垂直方向居中容器
 *          items:{
                left: [{el:{type:"bi.button"}}],
                right:[{el:{type:"bi.button"}}]
            }
 * @class BI.LeftRightVerticalAdaptLayout
 * @extends BI.Layout
 */
BI.LeftRightVerticalAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.LeftRightVerticalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-lr-v-a",
      items: {},
      llgap: 0,
      lrgap: 0,
      lhgap: 0,
      ltgap: 0,
      lbgap: 0,
      lvgap: 0,
      rlgap: 0,
      rrgap: 0,
      rhgap: 0,
      rtgap: 0,
      rbgap: 0,
      rvgap: 0
    });
  },
  render: function render() {
    var o = this.options,
        self = this;
    BI.LeftRightVerticalAdaptLayout.superclass.render.apply(this, arguments);

    var leftRight = this._getLeftRight(o.items);

    var layoutArray = [];

    if (leftRight.left || "left" in o.items) {
      layoutArray.push({
        type: "bi.left",
        lgap: o.innerHgap,
        vgap: o.innerVgap,
        items: [{
          el: {
            type: "bi.vertical_adapt",
            ref: function ref(_ref) {
              self.left = _ref;
            },
            height: "100%",
            items: leftRight.left || o.items.left,
            hgap: o.lhgap,
            lgap: o.llgap,
            rgap: o.lrgap,
            tgap: o.ltgap,
            bgap: o.lbgap,
            vgap: o.lvgap
          }
        }]
      });
    }

    if (leftRight.right || "right" in o.items) {
      layoutArray.push({
        type: "bi.right",
        rgap: o.innerHgap,
        vgap: o.innerVgap,
        items: [{
          el: {
            type: "bi.vertical_adapt",
            ref: function ref(_ref) {
              self.right = _ref;
            },
            height: "100%",
            items: leftRight.right || o.items.right,
            hgap: o.rhgap,
            lgap: o.rlgap,
            rgap: o.rrgap,
            tgap: o.rtgap,
            bgap: o.rbgap,
            vgap: o.rvgap
          }
        }]
      });
    }

    return layoutArray;
  },
  _getLeftRight: function _getLeftRight(items) {
    var left, right;

    if (BI.isArray(items)) {
      BI.each(items, function (i, item) {
        if (item.left) {
          left = item.left;
        }

        if (item.right) {
          right = item.right;
        }
      });
    }

    return {
      left: left,
      right: right
    };
  },
  resize: function resize() {
    var leftRight = this._getLeftRight(this.options.items);

    this.left.stroke(leftRight.left || this.options.items.left);
    this.right.stroke(leftRight.right || this.options.items.right);
  },
  addItem: function addItem() {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    var leftRight = this._getLeftRight(items);

    this.left.populate(leftRight.left || items.left);
    this.right.populate(leftRight.right || items.right);
  }
});
BI.shortcut("bi.left_right_vertical_adapt", BI.LeftRightVerticalAdaptLayout);
BI.LeftVerticalAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.LeftRightVerticalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-l-v-a",
      items: [],
      columnSize: [],
      lgap: 0,
      rgap: 0,
      hgap: 0,
      tgap: 0,
      bgap: 0,
      vgap: 0
    });
  },
  render: function render() {
    var o = this.options,
        self = this;
    BI.LeftVerticalAdaptLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.vertical_adapt",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      items: o.items,
      columnSize: o.columnSize,
      hgap: o.hgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      vgap: o.vgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  addItem: function addItem() {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate.apply(this, arguments);
  }
});
BI.shortcut("bi.left_vertical_adapt", BI.LeftVerticalAdaptLayout);
BI.RightVerticalAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.RightVerticalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-r-v-a",
      items: [],
      columnSize: [],
      lgap: 0,
      rgap: 0,
      hgap: 0,
      tgap: 0,
      bgap: 0,
      vgap: 0
    });
  },
  render: function render() {
    var o = this.options,
        self = this;
    BI.RightVerticalAdaptLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.vertical_adapt",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      horizontalAlign: BI.HorizontalAlign.Right,
      items: o.items,
      columnSize: o.columnSize,
      hgap: o.hgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      vgap: o.vgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  addItem: function addItem() {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate(items);
  }
});
BI.shortcut("bi.right_vertical_adapt", BI.RightVerticalAdaptLayout);

/***/ }),
/* 198 */
/***/ (function(module, exports) {

/**
 * 使用display:table和display:table-cell实现的horizontal布局
 * @class BI.TableAdaptLayout
 * @extends BI.Layout
 */
BI.TableAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.TableAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-t-a",
      columnSize: [],
      verticalAlign: BI.VerticalAlign.Top,
      horizontalAlign: BI.HorizontalAlign.Left,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.TableAdaptLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    this.$table = BI.Widget._renderEngine.createElement("<div>").css({
      position: "relative",
      display: "table",
      width: o.horizontalAlign === BI.HorizontalAlign.Center || o.horizontalAlign === BI.HorizontalAlign.Stretch || this._hasFill() ? "100%" : "auto",
      height: o.verticalAlign !== BI.VerticalAlign.Top ? "100%" : "auto",
      "white-space": "nowrap"
    });
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _hasFill: function _hasFill() {
    var o = this.options;

    if (o.columnSize.length > 0) {
      return o.columnSize.indexOf("fill") >= 0;
    }

    return BI.some(o.items, function (i, item) {
      if (item.width === "fill") {
        return true;
      }
    });
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;
    var td,
        width = "";
    var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

    if (columnSize > 0) {
      width = this._optimiseGap(columnSize + (i === 0 ? o.hgap : 0) + o.hgap + o.lgap + o.rgap);
    }

    if ((BI.isNull(columnSize) || columnSize === "") && this._hasFill()) {
      width = 2;
    }

    if (!this.hasWidget(this._getChildName(i))) {
      var w = BI._lazyCreateWidget(item);

      w.element.css({
        position: "relative",
        top: "0",
        left: "0",
        margin: "0px auto"
      });
      td = BI._lazyCreateWidget({
        type: "bi.default",
        width: width,
        items: [w]
      });
      this.addWidget(this._getChildName(i), td);
    } else {
      td = this.getWidgetByName(this._getChildName(i));
      td.element.width(width);
    }

    if (o.verticalAlign === BI.VerticalAlign.Stretch) {
      var top = o.vgap + o.tgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item),
          bottom = o.vgap + o.bgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item);

      w.element.css("height", "calc(100% - " + this._optimiseGap(top + bottom) + ")");
    } // 对于表现为td的元素设置最大宽度，有几点需要注意
    // 1、由于直接对td设置最大宽度是在规范中未定义的, 所以要使用类似td:firstChild来迂回实现
    // 2、不能给多个td设置最大宽度，这样只会平分宽度
    // 3、多百分比宽度就算了


    if (columnSize > 0) {
      td.element.css({
        "max-width": width,
        "min-width": width
      });
    }

    if (i === 0) {
      td.element.addClass("first-element");
    }

    td.element.css({
      position: "relative",
      display: "table-cell",
      "vertical-align": o.verticalAlign,
      height: "100%"
    });

    this._handleGap(w, item, i);

    return td;
  },
  appendFragment: function appendFragment(frag) {
    this.$table.append(frag);
    this.element.append(this.$table);
  },
  populate: function populate(items) {
    BI.TableAdaptLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.table_adapt", BI.TableAdaptLayout);

/***/ }),
/* 199 */
/***/ (function(module, exports) {

/**
 * 垂直方向居中容器
 * @class BI.VerticalAdaptLayout
 * @extends BI.Layout
 */
BI.VerticalAdaptLayout = BI.inherit(BI.Layout, {
  props: {
    baseCls: "bi-v-a",
    horizontalAlign: BI.HorizontalAlign.Left,
    verticalAlign: BI.VerticalAlign.Middle,
    columnSize: [],
    scrollx: false,
    hgap: 0,
    vgap: 0,
    lgap: 0,
    rgap: 0,
    tgap: 0,
    bgap: 0
  },
  render: function render() {
    var self = this,
        o = this.options;
    BI.VerticalAdaptLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.horizontal",
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      items: o.items,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate.apply(this, arguments);
  }
});
BI.shortcut("bi.vertical_adapt", BI.VerticalAdaptLayout);

/***/ }),
/* 200 */
/***/ (function(module, exports) {

/**
 * 水平方向居中自适应容器
 * @class BI.HorizontalAutoLayout
 * @extends BI.Layout
 */
BI.HorizontalAutoLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.HorizontalAutoLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-h-o",
      hgap: 0,
      lgap: 0,
      rgap: 0,
      vgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.HorizontalAutoLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.HorizontalAutoLayout.superclass._addElement.apply(this, arguments);

    w.element.css({
      position: "relative",
      margin: "0px auto"
    });

    this._handleGap(w, item, null, i);

    return w;
  },
  populate: function populate(items) {
    BI.HorizontalAutoLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.horizontal_auto", BI.HorizontalAutoLayout);

/***/ }),
/* 201 */
/***/ (function(module, exports) {

/**
 * 内联布局
 * @class BI.InlineCenterAdaptLayout
 * @extends BI.Layout
 *
 * @cfg {JSON} options 配置属性
 * @cfg {Number} [hgap=0] 水平间隙
 * @cfg {Number} [vgap=0] 垂直间隙
 */
BI.InlineCenterAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.InlineCenterAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-i-c-a",
      horizontalAlign: BI.HorizontalAlign.Center,
      verticalAlign: BI.VerticalAlign.Middle,
      columnSize: [],
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.inline",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      items: o.items,
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate.apply(this.layout, arguments);
  }
});
BI.shortcut("bi.inline_center_adapt", BI.InlineCenterAdaptLayout);

/***/ }),
/* 202 */
/***/ (function(module, exports) {

/**
 * 内联布局
 * @class BI.InlineHorizontalAdaptLayout
 * @extends BI.Layout
 *
 * @cfg {JSON} options 配置属性
 * @cfg {Number} [hgap=0] 水平间隙
 * @cfg {Number} [vgap=0] 垂直间隙
 */
BI.InlineHorizontalAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.InlineHorizontalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-i-h-a",
      horizontalAlign: BI.HorizontalAlign.Center,
      verticalAlign: BI.VerticalAlign.Top,
      columnSize: [],
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.inline",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      items: o.items,
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate.apply(this.layout, arguments);
  }
});
BI.shortcut("bi.inline_horizontal_adapt", BI.InlineHorizontalAdaptLayout);

/***/ }),
/* 203 */
/***/ (function(module, exports) {

/**
 * 内联布局
 * @class BI.InlineVerticalAdaptLayout
 * @extends BI.Layout
 *
 * @cfg {JSON} options 配置属性
 * @cfg {Number} [hgap=0] 水平间隙
 * @cfg {Number} [vgap=0] 垂直间隙
 */
BI.InlineVerticalAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.InlineVerticalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-i-v-a",
      horizontalAlign: BI.HorizontalAlign.Left,
      verticalAlign: BI.VerticalAlign.Middle,
      columnSize: [],
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.inline",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      items: o.items,
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate.apply(this.layout, arguments);
  }
});
BI.shortcut("bi.inline_vertical_adapt", BI.InlineVerticalAdaptLayout);

/***/ }),
/* 204 */
/***/ (function(module, exports) {

BI.AutoVerticalTapeLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.AutoVerticalTapeLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-auto-htape",
      horizontalAlign: BI.HorizontalAlign.Stretch,
      verticalAlign: BI.VerticalAlign.Stretch,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      rowSize: [],
      items: []
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vtape",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      items: o.items,
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      rowSize: o.rowSize,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  _handleResize: function _handleResize() {
    var self = this,
        o = this.options;
    var items = o.items;
    var top = {},
        bottom = {};
    top[0] = o.innerVgap;
    bottom[items.length - 1] = o.innerVgap;
    BI.any(items, function (i, item) {
      if (BI.isEmptyObject(item)) {
        return true;
      }

      var w = self.layout.getWidgetByName(self._getChildName(i));
      var rowSize = o.rowSize.length > 0 ? o.rowSize[i] : item.height;

      if (o.rowSize.length > 0) {
        if (item.height >= 1 && o.rowSize[i] >= 1 && o.rowSize[i] !== item.height) {
          rowSize = item.height;
        }
      }

      if (BI.isNull(top[i])) {
        var preRowSize = o.rowSize.length > 0 ? o.rowSize[i - 1] : items[i - 1].height;

        if (preRowSize === "") {
          preRowSize = self.layout.getWidgetByName(self._getChildName(i - 1)).element.height();
        }

        top[i] = top[i - 1] + preRowSize + self._optimiseItemTgap(items[i - 1]) + self._optimiseItemBgap(items[i - 1]) + 2 * self._optimiseItemVgap(items[i - 1]) + o.vgap + o.tgap + o.bgap;
      }

      w.element.css({
        top: self._optimiseGap(top[i] + self._optimiseItemTgap(item) + self._optimiseItemVgap(item) + o.vgap + o.tgap)
      });

      if (rowSize === "fill") {
        return true;
      }
    });
    BI.backAny(items, function (i, item) {
      if (BI.isEmptyObject(item)) {
        return true;
      }

      var w = self.layout.getWidgetByName(self._getChildName(i));
      var rowSize = o.rowSize.length > 0 ? o.rowSize[i] : item.height;

      if (BI.isNull(bottom[i])) {
        var nextRowSize = o.rowSize.length > 0 ? o.rowSize[i + 1] : items[i + 1].height;

        if (nextRowSize === "") {
          nextRowSize = self.layout.getWidgetByName(self._getChildName(i + 1)).element.height();
        }

        bottom[i] = bottom[i + 1] + nextRowSize + self._optimiseItemTgap(items[i + 1]) + self._optimiseItemBgap(items[i + 1]) + 2 * self._optimiseItemVgap(items[i + 1]) + o.vgap + o.tgap + o.bgap;
      }

      w.element.css({
        bottom: self._optimiseGap(bottom[i] + self._optimiseItemBgap(item) + self._optimiseItemVgap(item) + o.vgap + o.bgap)
      });

      if (rowSize === "fill") {
        return true;
      }
    });
  },
  mounted: function mounted() {
    if (window.ResizeObserver) {
      this.resizeObserver = new window.ResizeObserver(this._handleResize.bind(this));
      this.resizeObserver.observe(this.element[0]);
    }

    if (window.MutationObserver) {
      this.mutationObserver = new window.MutationObserver(this._handleResize.bind(this));
      this.mutationObserver.observe(this.element[0], {
        attributes: true,
        childList: true,
        subtree: true
      });
    }

    this._handleResize();
  },
  destroyed: function destroyed() {
    this.resizeObserver && this.resizeObserver.unobserve(this.element[0]);
    this.mutationObserver && this.mutationObserver.disconnect();
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate.apply(this.layout, arguments);
  }
});
BI.shortcut("bi.vtape_auto", BI.AutoVerticalTapeLayout);

/***/ }),
/* 205 */
/***/ (function(module, exports) {

/**
 * 横向填满布局
 */
BI.HorizontalFillLayout = function () {};

BI.shortcut("bi.horizontal_fill", BI.HorizontalFillLayout);

/***/ }),
/* 206 */
/***/ (function(module, exports) {

/**
 * 纵向填满布局
 */
BI.VerticalFillLayout = function () {};

BI.shortcut("bi.vertical_fill", BI.VerticalFillLayout);

/***/ }),
/* 207 */
/***/ (function(module, exports) {

BI.FloatHorizontalFillLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FloatHorizontalFillLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-h-float-fill clearfix",
      horizontalAlign: BI.HorizontalAlign.Stretch,
      verticalAlign: BI.VerticalAlign.Stretch,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      columnSize: [],
      items: []
    });
  },
  render: function render() {
    BI.FloatHorizontalFillLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  addItem: function addItem(item) {
    // do nothing
    throw new Error("不能添加子组件");
  },
  stroke: function stroke(items) {
    var self = this,
        o = this.options;
    items = BI.compact(items);
    var rank = 0;

    function createWidget(i, item, desc) {
      if (o.verticalAlign !== BI.VerticalAlign.Stretch) {
        var w = BI._lazyCreateWidget({
          type: "bi.vertical_adapt",
          horizontalAlign: BI.HorizontalAlign.Stretch,
          verticalAlign: o.verticalAlign,
          columnSize: ["fill"],
          items: [item]
        });
      } else {
        var w = BI._lazyCreateWidget(item);
      }

      if (o.vgap + o.tgap + self._optimiseItemTgap(item) + self._optimiseItemVgap(item) !== 0) {
        w.element.css({
          "margin-top": self._optimiseGap(o.vgap + o.tgap + self._optimiseItemTgap(item) + self._optimiseItemVgap(item))
        });
      }

      if (desc) {
        if (o.hgap + o.rgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item) !== 0) {
          w.element.css({
            "margin-right": self._optimiseGap((i === o.items.length - 1 ? o.hgap : 0) + o.rgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item))
          });
        }

        if (o.hgap + o.lgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item) !== 0) {
          w.element.css({
            "margin-left": self._optimiseGap(o.hgap + o.lgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item))
          });
        }
      } else {
        if (o.hgap + o.lgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item) !== 0) {
          w.element.css({
            "margin-left": self._optimiseGap((i === 0 ? o.hgap : 0) + o.lgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item))
          });
        }

        if (o.hgap + o.rgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item) !== 0) {
          w.element.css({
            "margin-right": self._optimiseGap(o.hgap + o.rgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item))
          });
        }
      }

      if (o.vgap + o.bgap + self._optimiseItemBgap(item) + self._optimiseItemVgap(item) !== 0) {
        w.element.css({
          "margin-bottom": self._optimiseGap(o.vgap + o.bgap + self._optimiseItemBgap(item) + self._optimiseItemVgap(item))
        });
      }

      var top = o.vgap + o.tgap + self._optimiseItemTgap(item) + self._optimiseItemVgap(item),
          bottom = o.vgap + o.bgap + self._optimiseItemBgap(item) + self._optimiseItemVgap(item);

      if (o.verticalAlign === BI.VerticalAlign.Stretch && BI.isNull(item.height)) {
        w.element.css({
          height: "calc(100% - " + self._optimiseGap(top + bottom) + ")"
        });
      }

      w.element.css({
        position: "relative"
      });
      return w;
    }

    BI.any(items, function (i, item) {
      if (BI.isEmptyObject(item)) {
        return true;
      }

      var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

      if (columnSize === "fill") {
        return true;
      }

      var w = createWidget(i, item);
      self.addWidget(self._getChildName(rank++), w);
      w.element.css({
        float: "left"
      });
    });
    BI.backAny(items, function (i, item) {
      if (BI.isEmptyObject(item)) {
        return true;
      }

      var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

      if (columnSize === "fill") {
        return true;
      }

      var w = createWidget(i, item, true);
      self.addWidget(self._getChildName(rank++), w);
      w.element.css({
        float: "right"
      });
    });
    BI.each(items, function (i, item) {
      var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

      if (columnSize === "fill") {
        var w = createWidget(i, item);
        self.addWidget(self._getChildName(rank++), w);
      }
    });
  },
  resize: function resize() {// console.log("填充布局不需要resize");
  },
  update: function update(opt) {
    return this.forceUpdate(opt);
  },
  populate: function populate(items) {
    BI.FloatHorizontalFillLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.horizontal_float_fill", BI.FloatHorizontalFillLayout);

/***/ }),
/* 208 */
/***/ (function(module, exports) {

/**
 *自适应水平和垂直方向都居中容器
 * Created by GUY on 2016/12/2.
 *
 * @class BI.FlexCenterLayout
 * @extends BI.Layout
 */
BI.FlexCenterLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexCenterLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-c",
      verticalAlign: BI.VerticalAlign.Middle,
      horizontalAlign: BI.HorizontalAlign.Center,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.flex_horizontal",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      rowSize: o.rowSize,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      hgap: o.hgap,
      vgap: o.vgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      items: o.items
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate(items);
  }
});
BI.shortcut("bi.flex_center_adapt", BI.FlexCenterLayout);

/***/ }),
/* 209 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/12/2.
 *
 * @class BI.FlexHorizontalCenter
 * @extends BI.Layout
 */
BI.FlexHorizontalCenter = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexHorizontalCenter.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-h-c",
      horizontalAlign: BI.HorizontalAlign.Center,
      verticalAlign: BI.VerticalAlign.Top,
      rowSize: [],
      scrolly: false,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.flex_vertical",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      rowSize: o.rowSize,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      hgap: o.hgap,
      vgap: o.vgap,
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      items: o.items
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate(items);
  }
});
BI.shortcut("bi.flex_horizontal_adapt", BI.FlexHorizontalCenter);
BI.shortcut("bi.flex_horizontal_center_adapt", BI.FlexHorizontalCenter);

/***/ }),
/* 210 */
/***/ (function(module, exports) {

/**
 *自适应水平和垂直方向都居中容器
 * Created by GUY on 2016/12/2.
 *
 * @class BI.FlexHorizontalLayout
 * @extends BI.Layout
 */
BI.FlexHorizontalLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexHorizontalLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-h",
      verticalAlign: BI.VerticalAlign.Top,
      horizontalAlign: BI.HorizontalAlign.Left,
      // 如果只有一个子元素且想让该子元素横向撑满，设置成Stretch
      columnSize: [],
      scrollx: true,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.FlexHorizontalLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    this.element.addClass("v-" + o.verticalAlign).addClass("h-" + o.horizontalAlign);

    if (o.scrollable === true || o.scrollx === true) {
      this.element.addClass("f-scroll-x");
    }

    if (o.scrollable === true || o.scrolly === true) {
      this.element.addClass("f-scroll-y");
    }

    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _hasFill: function _hasFill() {
    var o = this.options;

    if (o.columnSize.length > 0) {
      return o.columnSize.indexOf("fill") >= 0 || o.columnSize.indexOf("auto") >= 0;
    }

    return BI.some(o.items, function (i, item) {
      if (item.width === "fill" || item.width === "auto") {
        return true;
      }
    });
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.FlexHorizontalLayout.superclass._addElement.apply(this, arguments);

    var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

    if (o.columnSize.length > 0) {
      if (item.width >= 1 && o.columnSize[i] >= 1 && o.columnSize[i] !== item.width) {
        columnSize = null;
      }
    }

    w.element.css({
      position: "relative"
    });

    if (columnSize !== "auto") {
      if (columnSize === "fill" || columnSize === "") {
        if (o.horizontalAlign !== BI.HorizontalAlign.Stretch) {
          if (o.scrollable === true || o.scrollx === true) {
            w.element.addClass("f-s-n");
          }
        } // 当既有动态宽度和自适应宽度的时候只压缩自适应


        if (columnSize === "" && this._hasFill()) {
          w.element.addClass("f-s-n");
        }
      } else {
        w.element.addClass("f-s-n");
      }
    }

    if (columnSize > 0) {
      w.element.width(this._optimiseGap(columnSize));
    }

    if (columnSize === "fill") {
      w.element.addClass("f-f");
    }

    if (columnSize === "" || columnSize === "auto") {
      w.element.addClass("f-auto");
    }

    w.element.addClass("c-e");

    if (i === 0) {
      w.element.addClass("f-c");
    }

    if (i === o.items.length - 1) {
      w.element.addClass("l-c");
    }

    this._handleGap(w, item, i);

    return w;
  },
  populate: function populate(items) {
    BI.FlexHorizontalLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.flex_horizontal", BI.FlexHorizontalLayout);

/***/ }),
/* 211 */
/***/ (function(module, exports) {

BI.FlexLeftRightVerticalAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexLeftRightVerticalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-lr-v-c",
      columnSize: [],
      items: {},
      llgap: 0,
      lrgap: 0,
      lhgap: 0,
      ltgap: 0,
      lbgap: 0,
      lvgap: 0,
      rlgap: 0,
      rrgap: 0,
      rhgap: 0,
      rtgap: 0,
      rbgap: 0,
      rvgap: 0
    });
  },
  render: function render() {
    var o = this.options,
        self = this;
    BI.FlexLeftRightVerticalAdaptLayout.superclass.render.apply(this, arguments);

    var items = this._formatItems(o.items);

    return {
      type: "bi.flex_vertical_adapt",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      columnSize: o.columnSize.slice(0, (o.items.left || []).length).concat((o.items.right || []).length > 0 ? [""] : []),
      items: items,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  _formatItems: function _formatItems(items) {
    var self = this,
        o = this.options;
    var left, right;

    if (BI.isArray(items)) {
      BI.each(items, function (i, item) {
        if (item.left) {
          left = item.left;
        }

        if (item.right) {
          right = item.right;
        }
      });
    }

    var leftItems = left || items.left || [];
    var rightItems = right || items.right || [];
    leftItems = BI.map(leftItems, function (i, item) {
      var json = {
        el: BI.stripEL(item)
      };

      if (o.lvgap + o.ltgap + self._optimiseItemTgap(item) + self._optimiseItemVgap(item) !== 0) {
        json.tgap = o.lvgap + o.ltgap + self._optimiseItemTgap(item) + self._optimiseItemVgap(item);
      }

      if (o.lhgap + o.llgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item) !== 0) {
        json.lgap = (i === 0 ? o.lhgap : 0) + o.llgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item);
      }

      if (o.lhgap + o.lrgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item) !== 0) {
        json.rgap = o.lhgap + o.lrgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item);
      }

      if (o.lvgap + o.lbgap + self._optimiseItemBgap(item) + self._optimiseItemVgap(item) !== 0) {
        json.bgap = o.lvgap + o.lbgap + self._optimiseItemBgap(item) + self._optimiseItemVgap(item);
      }

      return json;
    });
    return leftItems.concat({
      el: {
        type: "bi.flex_vertical_adapt",
        columnSize: o.columnSize.slice(leftItems.length),
        css: {
          "margin-left": "auto"
        },
        hgap: o.rhgap,
        vgap: o.rvgap,
        lgap: o.rlgap,
        rgap: o.rrgap,
        tgap: o.rtgap,
        bgap: o.rbgap,
        items: rightItems
      }
    });
  },
  resize: function resize() {
    this.layout.stroke(this._formatItems(this.options.items));
  },
  addItem: function addItem() {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate(this._formatItems(items));
  }
});
BI.shortcut("bi.flex_left_right_vertical_adapt", BI.FlexLeftRightVerticalAdaptLayout);

/***/ }),
/* 212 */
/***/ (function(module, exports) {

/**
 *自适应水平和垂直方向都居中容器
 * Created by GUY on 2016/12/2.
 *
 * @class BI.FlexVerticalCenter
 * @extends BI.Layout
 */
BI.FlexVerticalCenter = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexVerticalCenter.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-v-c",
      horizontalAlign: BI.HorizontalAlign.Left,
      verticalAlign: BI.VerticalAlign.Middle,
      columnSize: [],
      scrollx: false,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.flex_horizontal",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      verticalAlign: o.verticalAlign,
      horizontalAlign: o.horizontalAlign,
      columnSize: o.columnSize,
      rowSize: o.rowSize,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      hgap: o.hgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      items: o.items
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate(items);
  }
});
BI.shortcut("bi.flex_vertical_adapt", BI.FlexVerticalCenter);
BI.shortcut("bi.flex_vertical_center_adapt", BI.FlexVerticalCenter);

/***/ }),
/* 213 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/12/2.
 *
 * @class BI.FlexVerticalLayout
 * @extends BI.Layout
 */
BI.FlexVerticalLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexVerticalLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-v",
      horizontalAlign: BI.HorizontalAlign.Left,
      verticalAlign: BI.VerticalAlign.Top,
      rowSize: [],
      scrolly: true,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.FlexVerticalLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    this.element.addClass("h-" + o.horizontalAlign).addClass("v-" + o.verticalAlign);

    if (o.scrollable === true || o.scrollx === true) {
      this.element.addClass("f-scroll-x");
    }

    if (o.scrollable === true || o.scrolly === true) {
      this.element.addClass("f-scroll-y");
    }

    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _hasFill: function _hasFill() {
    var o = this.options;

    if (o.rowSize.length > 0) {
      return o.rowSize.indexOf("fill") >= 0 || o.rowSize.indexOf("auto") >= 0;
    }

    return BI.some(o.items, function (i, item) {
      if (item.height === "fill" || item.height === "auto") {
        return true;
      }
    });
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.FlexVerticalLayout.superclass._addElement.apply(this, arguments);

    var rowSize = o.rowSize.length > 0 ? o.rowSize[i] : item.height;

    if (o.rowSize.length > 0) {
      if (item.height >= 1 && o.rowSize[i] >= 1 && o.rowSize[i] !== item.height) {
        rowSize = null;
      }
    }

    w.element.css({
      position: "relative"
    });

    if (rowSize !== "auto") {
      if (rowSize === "fill" || rowSize === "") {
        if (o.verticalAlign !== BI.VerticalAlign.Stretch) {
          if (o.scrollable === true || o.scrolly === true) {
            w.element.addClass("f-s-n");
          }
        } // 当既有动态宽度和自适应宽度的时候只压缩自适应


        if (rowSize === "" && this._hasFill()) {
          w.element.addClass("f-s-n");
        }
      } else {
        w.element.addClass("f-s-n");
      }
    }

    if (rowSize > 0) {
      w.element.height(this._optimiseGap(rowSize));
    }

    if (rowSize === "fill") {
      w.element.addClass("f-f");
    }

    if (rowSize === "" || rowSize === "auto") {
      w.element.addClass("f-auto");
    }

    w.element.addClass("c-e");

    if (i === 0) {
      w.element.addClass("f-c");
    }

    if (i === o.items.length - 1) {
      w.element.addClass("l-c");
    }

    this._handleGap(w, item, null, i);

    return w;
  },
  populate: function populate(items) {
    BI.FlexVerticalLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.flex_vertical", BI.FlexVerticalLayout);

/***/ }),
/* 214 */
/***/ (function(module, exports) {

/**
 *自适应水平和垂直方向都居中容器
 * Created by GUY on 2016/12/2.
 *
 * @class BI.FlexWrapperCenterLayout
 * @extends BI.Layout
 */
BI.FlexWrapperCenterLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexWrapperCenterLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-s-c",
      horizontalAlign: BI.HorizontalAlign.Center,
      verticalAlign: BI.VerticalAlign.Middle,
      columnSize: [],
      scrollx: false,
      scrollable: true,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.flex_scrollable_horizontal",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      rowSize: o.rowSize,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      items: o.items
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate(items);
  }
});
BI.shortcut("bi.flex_scrollable_center_adapt", BI.FlexWrapperCenterLayout);

/***/ }),
/* 215 */
/***/ (function(module, exports) {

/**
 *自适应水平和垂直方向都居中容器
 * Created by GUY on 2016/12/2.
 *
 * @class BI.FlexVerticalCenter
 * @extends BI.Layout
 */
BI.FlexWrapperHorizontalCenter = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexWrapperHorizontalCenter.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-s-v-c",
      horizontalAlign: BI.HorizontalAlign.Center,
      verticalAlign: BI.VerticalAlign.Top,
      rowSize: [],
      scrollable: true,
      scrolly: false,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.flex_scrollable_vertical",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      rowSize: o.rowSize,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      hgap: o.hgap,
      vgap: o.vgap,
      tgap: o.tgap,
      bgap: o.bgap,
      items: o.items
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate(items);
  }
});
BI.shortcut("bi.flex_scrollable_horizontal_adapt", BI.FlexWrapperHorizontalCenter);
BI.shortcut("bi.flex_scrollable_horizontal_center_adapt", BI.FlexWrapperHorizontalCenter);

/***/ }),
/* 216 */
/***/ (function(module, exports) {

/**
 *自适应水平和垂直方向都居中容器
 * Created by GUY on 2016/12/2.
 *
 * @class BI.FlexHorizontalLayout
 * @extends BI.Layout
 */
BI.FlexWrapperHorizontalLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexWrapperHorizontalLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-s-h",
      verticalAlign: BI.VerticalAlign.Top,
      horizontalAlign: BI.HorizontalAlign.Left,
      columnSize: [],
      scrollable: null,
      scrollx: true,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.FlexWrapperHorizontalLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    this.element.addClass("v-" + o.verticalAlign).addClass("h-" + o.horizontalAlign);
    this.$wrapper = BI.Widget._renderEngine.createElement("<div>").addClass("f-s-h-w v-" + o.verticalAlign).addClass("h-" + o.horizontalAlign);
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _hasFill: function _hasFill() {
    var o = this.options;

    if (o.columnSize.length > 0) {
      return o.columnSize.indexOf("fill") >= 0 || o.columnSize.indexOf("auto") >= 0;
    }

    return BI.some(o.items, function (i, item) {
      if (item.width === "fill" || item.width === "auto") {
        return true;
      }
    });
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.FlexWrapperHorizontalLayout.superclass._addElement.apply(this, arguments);

    var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

    if (o.columnSize.length > 0) {
      if (item.width >= 1 && o.columnSize[i] >= 1 && o.columnSize[i] !== item.width) {
        columnSize = null;
      }
    }

    w.element.css({
      position: "relative"
    });

    if (columnSize !== "auto") {
      if (columnSize === "fill" || columnSize === "") {
        if (o.horizontalAlign !== BI.HorizontalAlign.Stretch) {
          if (o.scrollable === true || o.scrollx === true) {
            w.element.addClass("f-s-n");
          }
        } // 当既有动态宽度和自适应宽度的时候只压缩自适应


        if (columnSize === "" && this._hasFill()) {
          w.element.addClass("f-s-n");
        }
      } else {
        w.element.addClass("f-s-n");
      }
    }

    if (columnSize > 0) {
      w.element.width(this._optimiseGap(columnSize));
    }

    if (columnSize === "fill") {
      w.element.addClass("f-f");
      this.element.addClass("f-f");
    }

    if (columnSize === "" || columnSize === "auto") {
      w.element.addClass("f-auto");
      this.element.addClass("f-auto");
    }

    w.element.addClass("c-e");

    if (i === 0) {
      w.element.addClass("f-c");
    }

    if (i === o.items.length - 1) {
      w.element.addClass("l-c");
    }

    this._handleGap(w, item, i);

    return w;
  },
  appendFragment: function appendFragment(frag) {
    this.$wrapper.append(frag);
    this.element.append(this.$wrapper);
  },
  _getWrapper: function _getWrapper() {
    return this.$wrapper;
  },
  populate: function populate(items) {
    BI.FlexWrapperHorizontalLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.flex_scrollable_horizontal", BI.FlexWrapperHorizontalLayout);

/***/ }),
/* 217 */
/***/ (function(module, exports) {

/**
 *自适应水平和垂直方向都居中容器
 * Created by GUY on 2016/12/2.
 *
 * @class BI.FlexVerticalCenter
 * @extends BI.Layout
 */
BI.FlexWrapperVerticalCenter = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexWrapperVerticalCenter.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-s-v-c",
      horizontalAlign: BI.HorizontalAlign.Left,
      verticalAlign: BI.VerticalAlign.Middle,
      columnSize: [],
      scrollx: false,
      scrollable: true,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.flex_scrollable_horizontal",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      verticalAlign: o.verticalAlign,
      horizontalAlign: o.horizontalAlign,
      columnSize: o.columnSize,
      rowSize: o.rowSize,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      items: o.items
    };
  },
  resize: function resize() {
    this.layout.resize();
  },
  populate: function populate(items) {
    this.layout.populate(items);
  }
});
BI.shortcut("bi.flex_scrollable_vertical_adapt", BI.FlexWrapperVerticalCenter);
BI.shortcut("bi.flex_scrollable_vertical_center_adapt", BI.FlexWrapperVerticalCenter);

/***/ }),
/* 218 */
/***/ (function(module, exports) {

/**
 *自适应水平和垂直方向都居中容器
 * Created by GUY on 2016/12/2.
 *
 * @class BI.FlexWrapperVerticalLayout
 * @extends BI.Layout
 */
BI.FlexWrapperVerticalLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FlexWrapperVerticalLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-f-s-v",
      horizontalAlign: BI.HorizontalAlign.Left,
      verticalAlign: BI.VerticalAlign.Top,
      rowSize: [],
      scrollable: null,
      scrolly: true,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.FlexWrapperVerticalLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    this.element.addClass("v-" + o.verticalAlign).addClass("h-" + o.horizontalAlign);
    this.$wrapper = BI.Widget._renderEngine.createElement("<div>").addClass("f-s-v-w h-" + o.horizontalAlign).addClass("v-" + o.verticalAlign);
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _hasFill: function _hasFill() {
    var o = this.options;

    if (o.rowSize.length > 0) {
      return o.rowSize.indexOf("fill") >= 0 || o.rowSize.indexOf("auto") >= 0;
    }

    return BI.some(o.items, function (i, item) {
      if (item.height === "fill" || item.height === "auto") {
        return true;
      }
    });
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.FlexWrapperVerticalLayout.superclass._addElement.apply(this, arguments);

    var rowSize = o.rowSize.length > 0 ? o.rowSize[i] : item.height;

    if (o.rowSize.length > 0) {
      if (item.height >= 1 && o.rowSize[i] >= 1 && o.rowSize[i] !== item.height) {
        rowSize = null;
      }
    }

    w.element.css({
      position: "relative"
    });

    if (rowSize !== "auto") {
      if (rowSize === "fill" || rowSize === "") {
        if (o.verticalAlign !== BI.VerticalAlign.Stretch) {
          if (o.scrollable === true || o.scrolly === true) {
            w.element.addClass("f-s-n");
          }
        } // 当既有动态宽度和自适应宽度的时候只压缩自适应


        if (rowSize === "" && this._hasFill()) {
          w.element.addClass("f-s-n");
        }
      } else {
        w.element.addClass("f-s-n");
      }
    }

    if (rowSize > 0) {
      w.element.height(this._optimiseGap(rowSize));
    }

    if (rowSize === "fill") {
      w.element.addClass("f-f");
      this.element.addClass("f-f");
    }

    if (rowSize === "" || rowSize === "auto") {
      w.element.addClass("f-auto");
      this.element.addClass("f-auto");
    }

    w.element.addClass("c-e");

    if (i === 0) {
      w.element.addClass("f-c");
    }

    if (i === o.items.length - 1) {
      w.element.addClass("l-c");
    }

    this._handleGap(w, item, null, i);

    return w;
  },
  appendFragment: function appendFragment(frag) {
    this.$wrapper.append(frag);
    this.element.append(this.$wrapper);
  },
  _getWrapper: function _getWrapper() {
    return this.$wrapper;
  },
  populate: function populate(items) {
    BI.FlexWrapperVerticalLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.flex_scrollable_vertical", BI.FlexWrapperVerticalLayout);

/***/ }),
/* 219 */
/***/ (function(module, exports) {

/**
 * absolute实现的居中布局
 * @class BI.FloatAbsoluteCenterLayout
 * @extends BI.Layout
 */
BI.FloatAbsoluteCenterLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FloatAbsoluteCenterLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs-c-fl"
    });
  },
  render: function render() {
    BI.FloatAbsoluteCenterLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.FloatAbsoluteCenterLayout.superclass._addElement.apply(this, arguments);

    w.element.addClass("bi-abs-c-item").css({
      position: "absolute"
    });
    return w;
  },
  populate: function populate(items) {
    BI.FloatAbsoluteCenterLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.absolute_center_float", BI.FloatAbsoluteCenterLayout);

/***/ }),
/* 220 */
/***/ (function(module, exports) {

/**
 * absolute实现的居中布局
 * @class BI.FloatAbsoluteHorizontalLayout
 * @extends BI.Layout
 */
BI.FloatAbsoluteHorizontalLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FloatAbsoluteHorizontalLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs-h-fl",
      horizontalAlign: BI.HorizontalAlign.Center,
      rowSize: [],
      vgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    BI.FloatAbsoluteHorizontalLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.vtape",
      horizontalAlign: o.horizontalAlign,
      rowSize: o.rowSize,
      items: this._formatItems(o.items),
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      hgap: "50%",
      vgap: o.vgap,
      tgap: o.tgap,
      bgap: o.bgap,
      // lgap和rgap不传的话内部不会设置left和right
      lgap: o.lgap,
      rgap: o.rgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  _formatItems: function _formatItems(items) {
    var o = this.options;

    if (o.horizontalAlign === BI.HorizontalAlign.Left) {
      return items;
    }

    var cls = o.horizontalAlign === BI.HorizontalAlign.Right ? "bi-abs-r-x-item" : "bi-abs-c-x-item";
    return BI.map(items, function (i, item) {
      if (!item || BI.isEmptyObject(item)) {
        return item;
      }

      var el = BI.stripEL(item);

      if (BI.isWidget(el)) {
        el.element.addClass(cls);
      } else {
        el.cls = (el.cls || "") + cls;
      }

      return item;
    });
  },
  resize: function resize() {
    this.layout.stroke(this._formatItems(this.options.items));
  },
  populate: function populate(items) {
    this.layout.populate(this._formatItems(items));
  }
});
BI.shortcut("bi.absolute_horizontal_float", BI.FloatAbsoluteHorizontalLayout);

/***/ }),
/* 221 */
/***/ (function(module, exports) {

BI.FloatAbsoluteLeftRightVerticalAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FloatAbsoluteLeftRightVerticalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs-lr-v-fl",
      verticalAlign: BI.VerticalAlign.Middle,
      items: {},
      llgap: 0,
      lrgap: 0,
      lhgap: 0,
      ltgap: 0,
      lbgap: 0,
      lvgap: 0,
      rlgap: 0,
      rrgap: 0,
      rhgap: 0,
      rtgap: 0,
      rbgap: 0,
      rvgap: 0
    });
  },
  render: function render() {
    var o = this.options,
        self = this;
    BI.FloatAbsoluteLeftRightVerticalAdaptLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.htape",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      verticalAlign: o.verticalAlign,
      items: this._formatItems(o.items),
      vgap: "50%",
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable
    };
  },
  _formatItems: function _formatItems(items) {
    var self = this,
        o = this.options;
    var left, right;

    if (BI.isArray(items)) {
      BI.each(items, function (i, item) {
        if (item.left) {
          left = item.left;
        }

        if (item.right) {
          right = item.right;
        }
      });
    }

    var leftItems = left || items.left || [];
    var rightItems = right || items.right || [];
    leftItems = BI.map(leftItems, function (i, item) {
      var el = BI.stripEL(item);

      if (o.verticalAlign === BI.VerticalAlign.Middle) {
        if (BI.isWidget(el)) {
          el.element.addClass("bi-abs-c-y-item");
        } else {
          el.cls = (el.cls || "") + "bi-abs-c-y-item";
        }
      }

      var json = {
        el: el,
        width: item.width
      }; // if (o.lvgap + o.ltgap + (item.tgap || 0) + (item.vgap || 0) !== 0) {
      //     json.tgap = o.lvgap + o.ltgap + (item.tgap || 0) + (item.vgap || 0);
      // }

      if (o.lhgap + o.llgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item) !== 0) {
        json.lgap = (i === 0 ? o.lhgap : 0) + o.llgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item);
      }

      if (o.lhgap + o.lrgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item) !== 0) {
        json.rgap = o.lhgap + o.lrgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item);
      } // if (o.lvgap + o.lbgap + (item.bgap || 0) + (item.vgap || 0) !== 0) {
      //     json.bgap = o.lvgap + o.lbgap + (item.bgap || 0) + (item.vgap || 0);
      // }


      return json;
    });
    rightItems = BI.map(rightItems, function (i, item) {
      var el = BI.stripEL(item);

      if (o.verticalAlign === BI.VerticalAlign.Middle) {
        if (BI.isWidget(el)) {
          el.element.addClass("bi-abs-c-y-item");
        } else {
          el.cls = (el.cls || "") + "bi-abs-c-y-item";
        }
      }

      var json = {
        el: el,
        width: item.width
      }; // if (o.rvgap + o.rtgap + (item.tgap || 0) + (item.vgap || 0) !== 0) {
      //     json.tgap = o.rvgap + o.rtgap + (item.tgap || 0) + (item.vgap || 0);
      // }

      if (o.rhgap + o.rlgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item) !== 0) {
        json.lgap = (i === 0 ? o.rhgap : 0) + o.rlgap + self._optimiseItemLgap(item) + self._optimiseItemHgap(item);
      }

      if (o.rhgap + o.rrgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item) !== 0) {
        json.rgap = o.rhgap + o.rrgap + self._optimiseItemRgap(item) + self._optimiseItemHgap(item);
      } // if (o.rvgap + o.rbgap + (item.bgap || 0) + (item.vgap || 0) !== 0) {
      //     json.bgap = o.rvgap + o.rbgap + (item.bgap || 0) + (item.vgap || 0);
      // }


      return json;
    });
    return leftItems.concat({}, rightItems);
  },
  resize: function resize() {
    this.layout.stroke(this._formatItems(this.options.items));
  },
  addItem: function addItem() {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate(this._formatItems(items));
  }
});
BI.shortcut("bi.absolute_left_right_vertical_float", BI.FloatAbsoluteLeftRightVerticalAdaptLayout);
BI.FloatAbsoluteRightVerticalAdaptLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FloatAbsoluteRightVerticalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs-r-v-fl",
      verticalAlign: BI.VerticalAlign.Middle,
      items: [],
      lgap: 0,
      rgap: 0,
      hgap: 0
    });
  },
  render: function render() {
    var o = this.options,
        self = this;
    BI.FloatAbsoluteRightVerticalAdaptLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.htape",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      verticalAlign: o.verticalAlign,
      items: [{}].concat(this._formatItems(o.items)),
      hgap: o.hgap,
      lgap: o.lgap,
      rgap: o.rgap,
      vgap: "50%",
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable
    };
  },
  _formatItems: function _formatItems(items) {
    if (this.options.verticalAlign !== BI.VerticalAlign.Middle) {
      return items;
    }

    return BI.map(items, function (i, item) {
      if (!item || BI.isEmptyObject(item)) {
        return item;
      }

      var el = BI.stripEL(item);

      if (BI.isWidget(el)) {
        el.element.addClass("bi-abs-c-y-item");
      } else {
        el.cls = (el.cls || "") + "bi-abs-c-y-item";
      }

      return item;
    });
  },
  resize: function resize() {
    this.layout.stroke([{}].concat(this._formatItems(this.options.items)));
  },
  addItem: function addItem() {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate([{}].concat(this._formatItems(items)));
  }
});
BI.shortcut("bi.absolute_right_vertical_float", BI.FloatAbsoluteRightVerticalAdaptLayout);

/***/ }),
/* 222 */
/***/ (function(module, exports) {

/**
 * absolute实现的居中布局
 * @class BI.FloatAbsoluteVerticalLayout
 * @extends BI.Layout
 */
BI.FloatAbsoluteVerticalLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FloatAbsoluteVerticalLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs-h-fl",
      verticalAlign: BI.VerticalAlign.Middle,
      columnSize: [],
      hgap: 0,
      lgap: 0,
      rgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    BI.FloatAbsoluteVerticalLayout.superclass.render.apply(this, arguments);
    return {
      type: "bi.htape",
      verticalAlign: o.verticalAlign,
      columnSize: o.columnSize,
      items: this._formatItems(o.items),
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable,
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      vgap: "50%",
      hgap: o.hgap,
      lgap: o.lgap,
      rgap: o.rgap,
      // tgap和bgap不传的话内部不会设置top和bottom
      tgap: o.tgap,
      bgap: o.bgap,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap
    };
  },
  _formatItems: function _formatItems(items) {
    var o = this.options;

    if (o.verticalAlign === BI.VerticalAlign.Top) {
      return items;
    }

    var cls = o.verticalAlign === BI.VerticalAlign.Bottom ? "bi-abs-b-y-item" : "bi-abs-c-y-item";
    return BI.map(items, function (i, item) {
      if (!item || BI.isEmptyObject(item)) {
        return item;
      }

      var el = BI.stripEL(item);

      if (BI.isWidget(el)) {
        el.element.addClass(cls);
      } else {
        el.cls = (el.cls || "") + cls;
      }

      return item;
    });
  },
  resize: function resize() {
    this.layout.stroke(this._formatItems(this.options.items));
  },
  populate: function populate(items) {
    this.layout.populate(this._formatItems(items));
  }
});
BI.shortcut("bi.absolute_vertical_float", BI.FloatAbsoluteVerticalLayout);

/***/ }),
/* 223 */
/***/ (function(module, exports) {

/**
 * 浮动的水平居中布局
 */
BI.FloatHorizontalLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.InlineHorizontalAdaptLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-h-fl",
      horizontalAlign: BI.HorizontalAlign.Center,
      verticalAlign: BI.VerticalAlign.Top,
      rowSize: [],
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;

    if (o.verticalAlign === BI.VerticalAlign.Top) {
      return {
        type: "bi.vertical",
        ref: function ref(_ref) {
          self.layout = _ref;
        },
        items: this._formatItems(o.items),
        vgap: o.vgap,
        tgap: o.tgap,
        bgap: o.bgap,
        scrollx: o.scrollx,
        scrolly: o.scrolly,
        scrollable: o.scrollable
      };
    }

    return {
      type: "bi.inline",
      items: [{
        el: {
          type: "bi.vertical",
          ref: function ref(_ref) {
            self.layout = _ref;
          },
          items: this._formatItems(o.items),
          vgap: o.vgap,
          tgap: o.tgap,
          bgap: o.bgap
        }
      }],
      horizontalAlign: o.horizontalAlign,
      verticalAlign: o.verticalAlign,
      innerHgap: o.innerHgap,
      innerVgap: o.innerVgap,
      scrollx: o.scrollx,
      scrolly: o.scrolly,
      scrollable: o.scrollable
    };
  },
  _formatItems: function _formatItems(items) {
    var o = this.options;
    return BI.map(items, function (i, item) {
      return {
        el: {
          type: "bi.inline_horizontal_adapt",
          horizontalAlign: o.horizontalAlign,
          items: [item],
          hgap: o.hgap,
          lgap: o.lgap,
          rgap: o.rgap
        }
      };
    });
  },
  resize: function resize() {
    this.layout.stroke(this._formatItems(this.options.items));
  },
  populate: function populate(items) {
    this.layout.populate(this._formatItems(items));
  }
});
BI.shortcut("bi.horizontal_float", BI.FloatHorizontalLayout);

/***/ }),
/* 224 */
/***/ (function(module, exports) {

/**
 * 固定子组件上下左右的布局容器
 * @class BI.AbsoluteLayout
 * @extends BI.Layout
 */
BI.AbsoluteLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.AbsoluteLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-abs",
      hgap: null,
      vgap: null,
      lgap: null,
      rgap: null,
      tgap: null,
      bgap: null
    });
  },
  render: function render() {
    BI.AbsoluteLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.AbsoluteLayout.superclass._addElement.apply(this, arguments);

    var left = 0,
        right = 0,
        top = 0,
        bottom = 0;
    var offsets = BI.pick(item, ["top", "right", "bottom", "left"]);

    if (BI.isKey(item.inset)) {
      var insets = BI.map((item.inset + "").split(" "), function (i, str) {
        return BI.parseFloat(str);
      });

      switch (insets.length) {
        case 1:
          offsets = {
            top: insets[0],
            bottom: insets[0],
            left: insets[0],
            right: insets[0]
          };
          break;

        case 2:
          offsets = {
            top: insets[0],
            bottom: insets[0],
            left: insets[1],
            right: insets[1]
          };
          break;

        case 3:
          offsets = {
            top: insets[0],
            left: insets[1],
            right: insets[1],
            bottom: insets[2]
          };
          break;

        case 4:
        default:
          offsets = {
            top: insets[0],
            right: insets[1],
            bottom: insets[2],
            left: insets[3]
          };
          break;
      }
    }

    if (BI.isNotNull(offsets.left)) {
      w.element.css({
        left: BI.isNumber(offsets.left) ? this._optimiseGap(offsets.left) : offsets.left
      });
      left += offsets.left;
    }

    if (BI.isNotNull(offsets.right)) {
      w.element.css({
        right: BI.isNumber(offsets.right) ? this._optimiseGap(offsets.right) : offsets.right
      });
      right += offsets.right;
    }

    if (BI.isNotNull(offsets.top)) {
      w.element.css({
        top: BI.isNumber(offsets.top) ? this._optimiseGap(offsets.top) : offsets.top
      });
      top += offsets.top;
    }

    if (BI.isNotNull(offsets.bottom)) {
      w.element.css({
        bottom: BI.isNumber(offsets.bottom) ? this._optimiseGap(offsets.bottom) : offsets.bottom
      });
      bottom += offsets.bottom;
    }

    if (BI.isNotNull(o.hgap)) {
      left += o.hgap;
      w.element.css({
        left: this._optimiseGap(left)
      });
      right += o.hgap;
      w.element.css({
        right: this._optimiseGap(right)
      });
    }

    if (BI.isNotNull(o.vgap)) {
      top += o.vgap;
      w.element.css({
        top: this._optimiseGap(top)
      });
      bottom += o.vgap;
      w.element.css({
        bottom: this._optimiseGap(bottom)
      });
    }

    if (BI.isNotNull(o.lgap)) {
      left += o.lgap;
      w.element.css({
        left: this._optimiseGap(left)
      });
    }

    if (BI.isNotNull(o.rgap)) {
      right += o.rgap;
      w.element.css({
        right: this._optimiseGap(right)
      });
    }

    if (BI.isNotNull(o.tgap)) {
      top += o.tgap;
      w.element.css({
        top: this._optimiseGap(top)
      });
    }

    if (BI.isNotNull(o.bgap)) {
      bottom += o.bgap;
      w.element.css({
        bottom: this._optimiseGap(bottom)
      });
    }

    if (BI.isNotNull(item.width)) {
      w.element.css({
        width: BI.isNumber(item.width) ? this._optimiseGap(item.width) : item.width
      });
    }

    if (BI.isNotNull(item.height)) {
      w.element.css({
        height: BI.isNumber(item.height) ? this._optimiseGap(item.height) : item.height
      });
    }

    w.element.css({
      position: "absolute"
    });
    return w;
  },
  populate: function populate(items) {
    BI.AbsoluteLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.absolute", BI.AbsoluteLayout);

/***/ }),
/* 225 */
/***/ (function(module, exports) {

BI.AdaptiveLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.AdaptiveLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-adaptive",
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.AdaptiveLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.AdaptiveLayout.superclass._addElement.apply(this, arguments);

    w.element.css({
      position: "relative"
    });

    if (BI.isNotNull(item.left)) {
      w.element.css({
        left: BI.isNumber(item.left) ? this._optimiseGap(item.left) : item.left
      });
    }

    if (BI.isNotNull(item.right)) {
      w.element.css({
        right: BI.isNumber(item.right) ? this._optimiseGap(item.right) : item.right
      });
    }

    if (BI.isNotNull(item.top)) {
      w.element.css({
        top: BI.isNumber(item.top) ? this._optimiseGap(item.top) : item.top
      });
    }

    if (BI.isNotNull(item.bottom)) {
      w.element.css({
        bottom: BI.isNumber(item.bottom) ? this._optimiseGap(item.bottom) : item.bottom
      });
    }

    this._handleGap(w, item);

    if (BI.isNotNull(item.width)) {
      w.element.css({
        width: BI.isNumber(item.width) ? this._optimiseGap(item.width) : item.width
      });
    }

    if (BI.isNotNull(item.height)) {
      w.element.css({
        height: BI.isNumber(item.height) ? this._optimiseGap(item.height) : item.height
      });
    }

    return w;
  },
  populate: function populate(items) {
    BI.AbsoluteLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.adaptive", BI.AdaptiveLayout);

/***/ }),
/* 226 */
/***/ (function(module, exports) {

/**
 * 上下的高度固定/左右的宽度固定，中间的高度/宽度自适应
 *
 * @class BI.BorderLayout
 * @extends BI.Layout
 */
BI.BorderLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.BorderLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-border-layout",
      items: {}
    });
  },
  render: function render() {
    BI.BorderLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  addItem: function addItem(item) {
    // do nothing
    throw new Error("不能添加子组件");
  },
  stroke: function stroke(regions) {
    var item;
    var top = 0;
    var bottom = 0;
    var left = 0;
    var right = 0;

    if ("north" in regions) {
      item = regions["north"];

      if (item != null) {
        if (item.el) {
          if (!this.hasWidget(this._getChildName("north"))) {
            var w = BI._lazyCreateWidget(item);

            this.addWidget(this._getChildName("north"), w);
          }

          this.getWidgetByName(this._getChildName("north")).element.height(this._optimiseGap(item.height)).css({
            position: "absolute",
            top: this._optimiseGap(item.top || 0),
            left: this._optimiseGap(item.left || 0),
            right: this._optimiseGap(item.right || 0),
            bottom: "initial"
          });
        }

        top = (item.height || 0) + (item.top || 0) + (item.bottom || 0);
      }
    }

    if ("south" in regions) {
      item = regions["south"];

      if (item != null) {
        if (item.el) {
          if (!this.hasWidget(this._getChildName("south"))) {
            var w = BI._lazyCreateWidget(item);

            this.addWidget(this._getChildName("south"), w);
          }

          this.getWidgetByName(this._getChildName("south")).element.height(this._optimiseGap(item.height)).css({
            position: "absolute",
            bottom: this._optimiseGap(item.bottom || 0),
            left: this._optimiseGap(item.left || 0),
            right: this._optimiseGap(item.right || 0),
            top: "initial"
          });
        }

        bottom = (item.height || 0) + (item.top || 0) + (item.bottom || 0);
      }
    }

    if ("west" in regions) {
      item = regions["west"];

      if (item != null) {
        if (item.el) {
          if (!this.hasWidget(this._getChildName("west"))) {
            var w = BI._lazyCreateWidget(item);

            this.addWidget(this._getChildName("west"), w);
          }

          this.getWidgetByName(this._getChildName("west")).element.width(this._optimiseGap(item.width)).css({
            position: "absolute",
            left: this._optimiseGap(item.left || 0),
            top: this._optimiseGap(top),
            bottom: this._optimiseGap(bottom),
            right: "initial"
          });
        }

        left = (item.width || 0) + (item.left || 0) + (item.right || 0);
      }
    }

    if ("east" in regions) {
      item = regions["east"];

      if (item != null) {
        if (item.el) {
          if (!this.hasWidget(this._getChildName("east"))) {
            var w = BI._lazyCreateWidget(item);

            this.addWidget(this._getChildName("east"), w);
          }

          this.getWidgetByName(this._getChildName("east")).element.width(this._optimiseGap(item.width)).css({
            position: "absolute",
            right: this._optimiseGap(item.right || 0),
            top: this._optimiseGap(top),
            bottom: this._optimiseGap(bottom),
            left: "initial"
          });
        }

        right = (item.width || 0) + (item.left || 0) + (item.right || 0);
      }
    }

    if ("center" in regions) {
      item = regions["center"];

      if (item != null) {
        if (!this.hasWidget(this._getChildName("center"))) {
          var w = BI._lazyCreateWidget(item);

          this.addWidget(this._getChildName("center"), w);
        }

        this.getWidgetByName(this._getChildName("center")).element.css({
          position: "absolute",
          top: this._optimiseGap(top),
          bottom: this._optimiseGap(bottom),
          left: this._optimiseGap(left),
          right: this._optimiseGap(right)
        });
      }
    }
  },
  update: function update(opt) {
    return this.forceUpdate(opt);
  },
  populate: function populate(items) {
    BI.BorderLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.border", BI.BorderLayout);

/***/ }),
/* 227 */
/***/ (function(module, exports) {

/**
 * 卡片布局，可以做到当前只显示一个组件，其他的都隐藏
 * @class BI.CardLayout
 * @extends BI.Layout
 *
 * @cfg {JSON} options 配置属性
 * @cfg {String} options.defaultShowName 默认展示的子组件名
 */
BI.CardLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.CardLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-card-layout",
      items: []
    });
  },
  render: function render() {
    BI.CardLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  stroke: function stroke(items) {
    var self = this,
        o = this.options;
    this.showIndex = void 0;
    BI.each(items, function (i, item) {
      if (item) {
        if (!self.hasWidget(item.cardName)) {
          var w = BI._lazyCreateWidget(item);

          w.on(BI.Events.DESTROY, function () {
            var index = BI.findIndex(o.items, function (i, tItem) {
              return tItem.cardName == item.cardName;
            });

            if (index > -1) {
              o.items.splice(index, 1);
            }
          });
          self.addWidget(self._getChildName(item.cardName), w);
        } else {
          var w = self.getWidgetByName(self._getChildName(item.cardName));
        }

        w.element.css({
          position: "relative",
          top: "0",
          left: "0",
          width: "100%",
          height: "100%"
        });
        w.setVisible(false);
      }
    });
  },
  resize: function resize() {// console.log("Card布局不需要resize");
  },
  update: function update(opt) {
    return this.forceUpdate(opt);
  },
  empty: function empty() {
    BI.CardLayout.superclass.empty.apply(this, arguments);
    this.options.items = [];
  },
  populate: function populate(items) {
    BI.CardLayout.superclass.populate.apply(this, arguments);

    this._mount();

    this.options.defaultShowName && this.showCardByName(this.options.defaultShowName);
  },
  isCardExisted: function isCardExisted(cardName) {
    return BI.some(this.options.items, function (i, item) {
      return item.cardName == cardName && item.el;
    });
  },
  getCardByName: function getCardByName(cardName) {
    if (!this.isCardExisted(cardName)) {
      throw new Error("cardName不存在", cardName);
    }

    return this._children[this._getChildName(cardName)];
  },
  _deleteCardByName: function _deleteCardByName(cardName) {
    delete this._children[this._getChildName(cardName)];
    var index = BI.findIndex(this.options.items, function (i, item) {
      return item.cardName == cardName;
    });

    if (index > -1) {
      this.options.items.splice(index, 1);
    }
  },
  deleteCardByName: function deleteCardByName(cardName) {
    if (!this.isCardExisted(cardName)) {
      throw new Error("cardName不存在", cardName);
    }

    var child = this._children[this._getChildName(cardName)];

    this._deleteCardByName(cardName);

    child && child._destroy();
  },
  addCardByName: function addCardByName(cardName, cardItem) {
    if (this.isCardExisted(cardName)) {
      throw new Error("cardName 已存在", cardName);
    }

    var widget = BI._lazyCreateWidget(cardItem, this);

    widget.element.css({
      position: "relative",
      top: "0",
      left: "0",
      width: "100%",
      height: "100%"
    }).appendTo(this.element);
    widget.invisible();
    this.addWidget(this._getChildName(cardName), widget);
    this.options.items.push({
      el: cardItem,
      cardName: cardName
    });
    return widget;
  },
  showCardByName: function showCardByName(name, action, callback) {
    var self = this; // name不存在的时候全部隐藏

    var exist = this.isCardExisted(name);

    if (this.showIndex != null) {
      this.lastShowIndex = this.showIndex;
    }

    this.showIndex = name;
    var flag = false;
    BI.each(this.options.items, function (i, item) {
      var el = self._children[self._getChildName(item.cardName)];

      if (el) {
        if (name != item.cardName) {
          // 动画效果只有在全部都隐藏的时候才有意义,且只要执行一次动画操作就够了
          !flag && !exist && BI.Action && action instanceof BI.Action ? (action.actionBack(el), flag = true) : el.invisible();
        } else {
          BI.Action && action instanceof BI.Action ? action.actionPerformed(void 0, el, callback) : (el.visible(), callback && callback());
        }
      }
    });
  },
  showLastCard: function showLastCard() {
    var self = this;
    this.showIndex = this.lastShowIndex;
    BI.each(this.options.items, function (i, item) {
      self._children[self._getChildName(item.cardName)].setVisible(self.showIndex == i);
    });
  },
  setDefaultShowName: function setDefaultShowName(name) {
    this.options.defaultShowName = name;
    return this;
  },
  getDefaultShowName: function getDefaultShowName() {
    return this.options.defaultShowName;
  },
  getAllCardNames: function getAllCardNames() {
    return BI.map(this.options.items, function (i, item) {
      return item.cardName;
    });
  },
  getShowingCard: function getShowingCard() {
    if (!BI.isKey(this.showIndex)) {
      return void 0;
    }

    return this.getWidgetByName(this._getChildName(this.showIndex));
  },
  deleteAllCard: function deleteAllCard() {
    var self = this;
    BI.each(this.getAllCardNames(), function (i, name) {
      self.deleteCardByName(name);
    });
  },
  hideAllCard: function hideAllCard() {
    var self = this;
    BI.each(this.options.items, function (i, item) {
      self._children[self._getChildName(item.cardName)].invisible();
    });
  },
  isAllCardHide: function isAllCardHide() {
    var self = this;
    var flag = true;
    BI.some(this.options.items, function (i, item) {
      if (self._children[self._getChildName(item.cardName)].isVisible()) {
        flag = false;
        return false;
      }
    });
    return flag;
  },
  removeWidget: function removeWidget(nameOrWidget) {
    var removeName,
        self = this;

    if (BI.isWidget(nameOrWidget)) {
      BI.each(this._children, function (name, child) {
        if (child === nameOrWidget) {
          removeName = name;
        }
      });
    } else {
      removeName = nameOrWidget;
    }

    if (removeName) {
      this._deleteCardByName(removeName);
    }
  }
});
BI.shortcut("bi.card", BI.CardLayout);

/***/ }),
/* 228 */
/***/ (function(module, exports) {

/**
 * 默认的布局方式
 *
 * @class BI.DefaultLayout
 * @extends BI.Layout
 */
BI.DefaultLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.DefaultLayout.superclass.props.apply(this, arguments), {
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      items: []
    });
  },
  render: function render() {
    BI.DefaultLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var w = BI.DefaultLayout.superclass._addElement.apply(this, arguments);

    this._handleGap(w, item);

    return w;
  },
  populate: function populate(items) {
    BI.DefaultLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.default", BI.DefaultLayout);

/***/ }),
/* 229 */
/***/ (function(module, exports) {

/**
 * 分隔容器的控件，按照宽度和高度所占比平分整个容器
 *
 * @class BI.DivisionLayout
 * @extends BI.Layout
 */
BI.DivisionLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.DivisionLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-division",
      columns: null,
      rows: null,
      items: []
    });
  },
  render: function render() {
    BI.DivisionLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  addItem: function addItem(item) {
    // do nothing
    throw new Error("不能添加子组件");
  },
  stroke: function stroke(items) {
    var o = this.options,
        self = this;
    var rows = o.rows || o.items.length,
        columns = o.columns || (o.items[0] && o.items[0].length) | 0;
    var map = BI.makeArray(rows),
        widths = {},
        heights = {};

    function firstElement(item, cls) {
      item.addClass(cls);
      return item;
    }

    function firstObject(item, cls) {
      item.cls = (item.cls || "") + cls;
      return item;
    }

    function first(item, cls) {
      if (item instanceof BI.Widget) {
        firstElement(item.element, cls);
      } else if (item.el instanceof BI.Widget) {
        firstElement(item.el.element, cls);
      } else if (item.el) {
        firstObject(item.el, cls);
      } else {
        firstObject(item, cls);
      }
    }

    BI.each(map, function (i) {
      map[i] = BI.makeArray(columns);
    });
    BI.each(items, function (i, item) {
      if (BI.isArray(item)) {
        BI.each(item, function (j, el) {
          widths[i] = (widths[i] || 0) + item.width;
          heights[j] = (heights[j] || 0) + item.height;
          map[i][j] = el;
        });
        return;
      }

      widths[item.row] = (widths[item.row] || 0) + item.width;
      heights[item.column] = (heights[item.column] || 0) + item.height;
      map[item.row][item.column] = item;
    });

    for (var i = 0; i < rows; i++) {
      var totalW = 0;

      for (var j = 0; j < columns; j++) {
        if (!map[i][j]) {
          throw new Error("item(" + i + "" + j + ") 必须", map);
        }

        if (!this.hasWidget(this._getChildName(i + "_" + j))) {
          var w = BI._lazyCreateWidget(map[i][j]);

          this.addWidget(this._getChildName(i + "_" + j), w);
        } else {
          w = this.getWidgetByName(this._getChildName(i + "_" + j));
        }

        var left = totalW * 100 / widths[i];
        w.element.css({
          position: "absolute",
          left: left + "%"
        });

        if (j > 0) {
          var lastW = this.getWidgetByName(this._getChildName(i + "_" + (j - 1)));
          lastW.element.css({
            right: 100 - left + "%"
          });
        }

        if (j == o.columns - 1) {
          w.element.css({
            right: "0%"
          });
        }

        first(w, self.getRowColumnCls(i, j, rows - 1, columns - 1));
        totalW += map[i][j].width;
      }
    }

    for (var j = 0; j < o.columns; j++) {
      var totalH = 0;

      for (var i = 0; i < o.rows; i++) {
        var w = this.getWidgetByName(this._getChildName(i + "_" + j));
        var top = totalH * 100 / heights[j];
        w.element.css({
          top: top + "%"
        });

        if (i > 0) {
          var lastW = this.getWidgetByName(this._getChildName(i - 1 + "_" + j));
          lastW.element.css({
            bottom: 100 - top + "%"
          });
        }

        if (i == o.rows - 1) {
          w.element.css({
            bottom: "0%"
          });
        }

        totalH += map[i][j].height;
      }
    }
  },
  update: function update(opt) {
    return this.forceUpdate(opt);
  },
  populate: function populate(items) {
    BI.DivisionLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.division", BI.DivisionLayout);

/***/ }),
/* 230 */
/***/ (function(module, exports) {

/**
 * 靠左对齐的自由浮动布局
 * @class BI.FloatLeftLayout
 * @extends BI.Layout
 *
 * @cfg {JSON} options 配置属性
 * @cfg {Number} [hgap=0] 水平间隙
 * @cfg {Number} [vgap=0] 垂直间隙
 */
BI.FloatLeftLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FloatLeftLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-left clearfix",
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.FloatLeftLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;

    if (o.innerHgap !== 0) {
      this.element.css({
        paddingLeft: this._optimiseGap(o.innerHgap),
        paddingRight: this._optimiseGap(o.innerHgap)
      });
    }

    if (o.innerVgap !== 0) {
      this.element.css({
        paddingTop: this._optimiseGap(o.innerVgap),
        paddingBottom: this._optimiseGap(o.innerVgap)
      });
    }

    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.FloatLeftLayout.superclass._addElement.apply(this, arguments);

    w.element.css({
      position: "relative",
      float: "left"
    });

    if (BI.isNotNull(item.left)) {
      w.element.css({
        left: BI.isNumber(item.left) ? this._optimiseGap(item.left) : item.left
      });
    }

    if (BI.isNotNull(item.right)) {
      w.element.css({
        right: BI.isNumber(item.right) ? this._optimiseGap(item.right) : item.right
      });
    }

    if (BI.isNotNull(item.top)) {
      w.element.css({
        top: BI.isNumber(item.top) ? this._optimiseGap(item.top) : item.top
      });
    }

    if (BI.isNotNull(item.bottom)) {
      w.element.css({
        bottom: BI.isNumber(item.bottom) ? this._optimiseGap(item.bottom) : item.bottom
      });
    }

    if (o.vgap + o.tgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item) !== 0) {
      var top = o.vgap / 2 + o.tgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item);

      w.element.css({
        "margin-top": this._optimiseGap(top)
      });
    }

    if (o.hgap + o.lgap + this._optimiseItemLgap(item) + this._optimiseItemHgap(item) !== 0) {
      var left = o.hgap / 2 + o.lgap + this._optimiseItemLgap(item) + this._optimiseItemHgap(item);

      w.element.css({
        "margin-left": this._optimiseGap(left)
      });
    }

    if (o.hgap + o.rgap + this._optimiseItemRgap(item) + this._optimiseItemHgap(item) !== 0) {
      var right = o.hgap / 2 + o.rgap + this._optimiseItemRgap(item) + this._optimiseItemHgap(item);

      w.element.css({
        "margin-right": this._optimiseGap(right)
      });
    }

    if (o.vgap + o.bgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item) !== 0) {
      var bottom = o.vgap / 2 + o.bgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item);

      w.element.css({
        "margin-bottom": this._optimiseGap(bottom)
      });
    }

    return w;
  },
  populate: function populate(items) {
    BI.FloatLeftLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.left", BI.FloatLeftLayout);
/**
 * 靠右对齐的自由浮动布局
 * @class BI.FloatRightLayout
 * @extends BI.Layout
 *
 * @cfg {JSON} options 配置属性
 * @cfg {Number} [hgap=0] 水平间隙
 * @cfg {Number} [vgap=0] 垂直间隙
 */

BI.FloatRightLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FloatRightLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-right clearfix",
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.FloatRightLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;

    if (o.innerHgap !== 0) {
      this.element.css({
        paddingLeft: this._optimiseGap(o.innerHgap),
        paddingRight: this._optimiseGap(o.innerHgap)
      });
    }

    if (o.innerVgap !== 0) {
      this.element.css({
        paddingTop: this._optimiseGap(o.innerVgap),
        paddingBottom: this._optimiseGap(o.innerVgap)
      });
    }

    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.FloatRightLayout.superclass._addElement.apply(this, arguments);

    w.element.css({
      position: "relative",
      float: "right"
    });

    if (BI.isNotNull(item.left)) {
      w.element.css({
        left: BI.pixFormat(item.left)
      });
    }

    if (BI.isNotNull(item.right)) {
      w.element.css({
        right: BI.pixFormat(item.right)
      });
    }

    if (BI.isNotNull(item.top)) {
      w.element.css({
        top: BI.pixFormat(item.top)
      });
    }

    if (BI.isNotNull(item.bottom)) {
      w.element.css({
        bottom: BI.pixFormat(item.bottom)
      });
    }

    if (o.vgap + o.tgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item) !== 0) {
      var top = o.vgap / 2 + o.tgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item);

      w.element.css({
        "margin-top": this._optimiseGap(top)
      });
    }

    if (o.hgap + o.lgap + this._optimiseItemLgap(item) + this._optimiseItemHgap(item) !== 0) {
      var left = o.hgap / 2 + o.lgap + this._optimiseItemLgap(item) + this._optimiseItemHgap(item);

      w.element.css({
        "margin-left": this._optimiseGap(left)
      });
    }

    if (o.hgap + o.rgap + this._optimiseItemRgap(item) + this._optimiseItemHgap(item) !== 0) {
      var right = o.hgap / 2 + o.rgap + this._optimiseItemRgap(item) + this._optimiseItemHgap(item);

      w.element.css({
        "margin-right": this._optimiseGap(right)
      });
    }

    if (o.vgap + o.bgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item) !== 0) {
      var bottom = o.vgap / 2 + o.bgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item);

      w.element.css({
        "margin-bottom": this._optimiseGap(bottom)
      });
    }

    return w;
  },
  populate: function populate(items) {
    BI.FloatRightLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.right", BI.FloatRightLayout);

/***/ }),
/* 231 */
/***/ (function(module, exports) {

/**
 * 上下的高度固定/左右的宽度固定，中间的高度/宽度自适应
 *
 * @class BI.BorderLayout
 * @extends BI.Layout
 */
BI.GridLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.GridLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-grid",
      columns: null,
      rows: null,
      items: []
    });
  },
  render: function render() {
    BI.GridLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  addItem: function addItem() {
    // do nothing
    throw new Error("不能添加子组件");
  },
  stroke: function stroke(items) {
    var self = this,
        o = this.options;
    var rows = o.rows || o.items.length,
        columns = o.columns || (o.items[0] && o.items[0].length) | 0;
    var width = 100 / columns,
        height = 100 / rows;
    var els = [];

    for (var i = 0; i < rows; i++) {
      els[i] = [];
    }

    function firstElement(item, cls) {
      item.addClass(cls);
      return item;
    }

    function firstObject(item, cls) {
      item.cls = (item.cls || "") + cls;
      return item;
    }

    function first(item, row, col) {
      if (item instanceof BI.Widget) {
        firstElement(item.element, row, col);
      } else if (item.el instanceof BI.Widget) {
        firstElement(item.el.element, row, col);
      } else if (item.el) {
        firstObject(item.el, row, col);
      } else {
        firstObject(item, row, col);
      }
    }

    BI.each(items, function (i, item) {
      if (BI.isArray(item)) {
        BI.each(item, function (j, el) {
          els[i][j] = BI._lazyCreateWidget(el);
        });
        return;
      }

      els[item.row][item.column] = BI._lazyCreateWidget(item);
    });

    for (var i = 0; i < rows; i++) {
      for (var j = 0; j < columns; j++) {
        if (!els[i][j]) {
          els[i][j] = BI._lazyCreateWidget({
            type: "bi.layout"
          });
        }

        first(els[i][j], self.getRowColumnCls(i, j, rows - 1, columns - 1));
        els[i][j].element.css({
          position: "absolute",
          top: height * i + "%",
          left: width * j + "%",
          right: 100 - width * (j + 1) + "%",
          bottom: 100 - height * (i + 1) + "%"
        });
        this.addWidget(this._getChildName(i + "_" + j), els[i][j]);
      }
    }
  },
  resize: function resize() {// console.log("grid布局不需要resize")
  },
  update: function update(opt) {
    return this.forceUpdate(opt);
  },
  populate: function populate(items) {
    BI.GridLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.grid", BI.GridLayout);

/***/ }),
/* 232 */
/***/ (function(module, exports) {

/**
 * 水平布局
 * @class BI.HorizontalLayout
 * @extends BI.Layout
 */
BI.HorizontalLayout = function () {};

BI.shortcut("bi.horizontal", BI.HorizontalLayout);

/***/ }),
/* 233 */
/***/ (function(module, exports) {

/**
 * 内联布局
 * @class BI.InlineLayout
 * @extends BI.Layout
 *
 * @cfg {JSON} options 配置属性
 * @cfg {Number} [hgap=0] 水平间隙
 * @cfg {Number} [vgap=0] 垂直间隙
 */
BI.InlineLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.InlineLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-i",
      horizontalAlign: BI.HorizontalAlign.Left,
      verticalAlign: BI.VerticalAlign.Top,
      columnSize: [],
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      items: []
    });
  },
  render: function render() {
    BI.InlineLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    this.element.css({
      textAlign: o.horizontalAlign
    });
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.InlineLayout.superclass._addElement.apply(this, arguments);

    var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

    if (o.columnSize.length > 0) {
      if (item.width >= 1 && o.columnSize[i] >= 1 && o.columnSize[i] !== item.width) {
        columnSize = null;
      }
    }

    if (columnSize > 0) {
      w.element.width(columnSize < 1 ? (columnSize * 100).toFixed(1) + "%" : BI.pixFormat(columnSize));
    }

    w.element.css({
      position: "relative",
      "vertical-align": o.verticalAlign
    });
    w.element.addClass("i-item");

    if (columnSize === "fill" || columnSize === "") {
      var length = 0,
          gap = o.hgap + o.innerHgap;
      var fillCount = 0,
          autoCount = 0;

      for (var k = 0, len = o.columnSize.length || o.items.length; k < len; k++) {
        var cz = o.columnSize.length > 0 ? o.columnSize[k] : o.items[k].width;

        if (cz === "fill") {
          fillCount++;
          cz = 0;
        } else if (cz === "" || BI.isNull(cz)) {
          autoCount++;
          cz = 0;
        }

        gap += o.hgap + o.lgap + o.rgap + this._optimiseItemLgap(o.items[k]) + this._optimiseItemRgap(o.items[k]) + this._optimiseItemHgap(o.items[k]);
        length += cz;
      }

      length = length > 0 && length < 1 ? (length * 100).toFixed(1) + "%" : BI.pixFormat(length);
      gap = gap > 0 && gap < 1 ? (gap * 100).toFixed(1) + "%" : BI.pixFormat(gap);

      if (columnSize === "fill") {
        w.element.css("min-width", "calc((100% - " + length + " - " + gap + ")" + (fillCount > 1 ? "/" + fillCount : "") + ")");
      }

      if (o.horizontalAlign === BI.HorizontalAlign.Stretch || !(o.scrollable === true || o.scrollx === true)) {
        if (columnSize === "fill") {
          w.element.css("max-width", "calc((100% - " + length + " - " + gap + ")" + (fillCount > 1 ? "/" + fillCount : "") + ")");
        } else {
          w.element.css("max-width", "calc((100% - " + length + " - " + gap + ")" + (autoCount > 1 ? "/" + autoCount : "") + ")");
        }
      }
    }

    this._handleGap(w, item, i);

    if (o.verticalAlign === BI.VerticalAlign.Stretch && BI.isNull(item.height)) {
      var top = o.innerVgap + o.vgap + o.tgap + this._optimiseItemTgap(item) + this._optimiseItemVgap(item),
          bottom = o.innerVgap + o.vgap + o.bgap + this._optimiseItemBgap(item) + this._optimiseItemVgap(item);

      var gap = top + bottom > 0 && top + bottom < 1 ? ((top + bottom) * 100).toFixed(1) + "%" : BI.pixFormat(top + bottom);
      w.element.css("height", "calc(100% - " + gap + ")");
    }

    return w;
  },
  populate: function populate(items) {
    BI.InlineLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.inline", BI.InlineLayout);

/***/ }),
/* 234 */
/***/ (function(module, exports) {

/**
 * 靠左对齐的自由浮动布局
 * @class BI.LatticeLayout
 * @extends BI.Layout
 *
 * @cfg {JSON} options 配置属性
 * @cfg {Number} [hgap=0] 水平间隙
 * @cfg {Number} [vgap=0] 垂直间隙
 */
BI.LatticeLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.LatticeLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-lattice clearfix" // columnSize: [0.2, 0.2, 0.6],

    });
  },
  render: function render() {
    BI.LatticeLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.LatticeLayout.superclass._addElement.apply(this, arguments);

    if (o.columnSize && o.columnSize[i]) {
      var width = o.columnSize[i] / BI.sum(o.columnSize) * 100 + "%";
    } else {
      var width = 1 / this.options.items.length * 100 + "%";
    }

    w.element.css({
      position: "relative",
      float: "left",
      width: width
    });
    return w;
  },
  populate: function populate(items) {
    BI.LatticeLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.lattice", BI.LatticeLayout);

/***/ }),
/* 235 */
/***/ (function(module, exports) {

/**
 * 上下的高度固定/左右的宽度固定，中间的高度/宽度自适应
 *
 * @class BI.TableLayout
 * @extends BI.Layout
 */
BI.TableLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.TableLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-t",
      // scrolly: true,
      columnSize: [],
      rowSize: [],
      horizontalAlign: BI.HorizontalAlign.Stretch,
      verticalAlign: BI.VerticalAlign.Stretch,
      // rowSize: 30,  // or [30,30,30]
      hgap: 0,
      vgap: 0,
      items: []
    });
  },
  render: function render() {
    BI.TableLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    var columnSize = o.columnSize.length > 0 ? o.columnSize : BI.range(items[0].length).fill("");

    if (columnSize.length > 0) {
      var template = [];

      for (var i = 0; i < columnSize.length; i++) {
        if (columnSize[i] === "") {
          template.push("auto");
        } else if (columnSize[i] === "fill") {
          template.push("1fr");
        } else {
          template.push(this._optimiseGap(columnSize[i]));
        }
      }

      this.element.css({
        "grid-template-columns": template.join(" "),
        "grid-template-rows": BI.isArray(o.rowSize) ? BI.map(o.rowSize, function (i, size) {
          return self._optimiseGap(size);
        }).join(" ") : BI.range(o.items.length).fill(this._optimiseGap(o.rowSize)).join(" "),
        "grid-row-gap": this._optimiseGap(o.vgap),
        "grid-column-gap": this._optimiseGap(o.hgap)
      });
    }

    return {
      type: "bi.default",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      items: this._formatItems(items)
    };
  },
  _formatItems: function _formatItems(items) {
    var o = this.options,
        self = this;

    function firstElement(item, cls) {
      item.addClass(cls);
      return item;
    }

    function firstObject(item, cls) {
      item.cls = (item.cls || "") + cls;
      return item;
    }

    function first(item, cls) {
      if (item instanceof BI.Widget) {
        return firstElement(item.element, cls);
      } else if (item.el instanceof BI.Widget) {
        return firstElement(item.el.element, cls);
      } else if (item.el) {
        return firstObject(item.el, cls);
      } else {
        return firstObject(item, cls);
      }
    }

    function wrapLayout(item) {
      return {
        type: "bi.horizontal_fill",
        columnSize: ["fill"],
        horizontalAlign: o.horizontalAlign,
        verticalAlign: o.verticalAlign,
        items: [BI.formatEL(item)]
      };
    }

    return BI.reduce(items, function (rowItems, result, rowIndex) {
      return result.concat(BI.map(rowItems, function (colIndex, item) {
        var cls = self.getRowColumnCls(rowIndex, colIndex, items.length - 1, rowItems.length - 1);

        if (BI.isEmpty(item)) {
          return first(wrapLayout({
            type: "bi.layout"
          }), cls);
        }

        return first(wrapLayout(item), cls);
      }));
    }, []);
  },
  resize: function resize() {// console.log("table布局不需要resize");
  },
  populate: function populate(items) {
    this.layout.populate(this._formatItems(items));
  }
});
BI.shortcut("bi.table", BI.TableLayout);

/***/ }),
/* 236 */
/***/ (function(module, exports) {

/**
 * 水平tape布局
 * @class BI.HTapeLayout
 * @extends BI.Layout
 */
BI.HTapeLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.HTapeLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-h-tape",
      verticalAlign: BI.VerticalAlign.Top,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      columnSize: [],
      items: []
    });
  },
  render: function render() {
    BI.HTapeLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  addItem: function addItem(item) {
    // do nothing
    throw new Error("不能添加子组件");
  },
  stroke: function stroke(items) {
    var self = this,
        o = this.options;
    items = BI.compact(items);
    BI.each(items, function (i, item) {
      if (BI.isEmptyObject(item)) {
        return;
      }

      if (!self.hasWidget(self._getChildName(i))) {
        var w = BI._lazyCreateWidget(item);

        self.addWidget(self._getChildName(i), w);
      } else {
        w = self.getWidgetByName(self._getChildName(i));
      }

      var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

      if (o.columnSize.length > 0) {
        if (item.width >= 1 && o.columnSize[i] >= 1 && o.columnSize[i] !== item.width) {
          columnSize = item.width;
        }
      }

      w.element.css({
        position: "absolute",
        top: self._optimiseGap(self._optimiseItemTgap(item) + self._optimiseItemVgap(item) + o.innerVgap + o.vgap + o.tgap),
        bottom: self._optimiseGap(self._optimiseItemBgap(item) + self._optimiseItemVgap(item) + o.innerVgap + o.vgap + o.bgap),
        width: BI.isNumber(columnSize) ? self._optimiseGap(columnSize) : ""
      });

      if (o.verticalAlign === BI.VerticalAlign.Middle) {
        w.element.css({
          marginTop: "auto",
          marginBottom: "auto"
        });
      } else if (o.verticalAlign === BI.VerticalAlign.Bottom) {
        w.element.css({
          marginTop: "auto"
        });
      }
    });
    var left = {},
        right = {};
    left[0] = o.innerHgap;
    right[items.length - 1] = o.innerHgap;
    BI.any(items, function (i, item) {
      if (BI.isEmptyObject(item)) {
        return true;
      }

      var w = self.getWidgetByName(self._getChildName(i));
      var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

      if (o.columnSize.length > 0) {
        if (item.width >= 1 && o.columnSize[i] >= 1 && o.columnSize[i] !== item.width) {
          columnSize = item.width;
        }
      }

      if (BI.isNull(left[i])) {
        var preColumnSize = o.columnSize.length > 0 ? o.columnSize[i - 1] : items[i - 1].width;
        left[i] = left[i - 1] + preColumnSize + self._optimiseItemLgap(items[i - 1]) + self._optimiseItemRgap(items[i - 1]) + 2 * self._optimiseItemHgap(items[i - 1]) + o.hgap + o.lgap + o.rgap;
      }

      w.element.css({
        left: self._optimiseGap(left[i] + self._optimiseItemLgap(item) + self._optimiseItemHgap(item) + o.hgap + o.lgap)
      });

      if (BI.isNull(columnSize) || columnSize === "" || columnSize === "fill") {
        return true;
      }
    });
    BI.backAny(items, function (i, item) {
      if (BI.isEmptyObject(item)) {
        return true;
      }

      var w = self.getWidgetByName(self._getChildName(i));
      var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

      if (BI.isNull(right[i])) {
        var nextColumnSize = o.columnSize.length > 0 ? o.columnSize[i + 1] : items[i + 1].width;
        right[i] = right[i + 1] + nextColumnSize + self._optimiseItemLgap(items[i + 1]) + self._optimiseItemRgap(items[i + 1]) + 2 * self._optimiseItemHgap(items[i + 1]) + o.hgap + o.lgap + o.rgap;
      }

      w.element.css({
        right: self._optimiseGap(right[i] + self._optimiseItemRgap(item) + self._optimiseItemHgap(item) + o.hgap + o.rgap)
      });

      if (BI.isNull(columnSize) || columnSize === "" || columnSize === "fill") {
        return true;
      }
    });
  },
  update: function update(opt) {
    return this.forceUpdate(opt);
  },
  populate: function populate(items) {
    BI.HTapeLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.htape", BI.HTapeLayout);
/**
 * 垂直tape布局
 * @class BI.VTapeLayout
 * @extends BI.Layout
 */

BI.VTapeLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.VTapeLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-v-tape",
      horizontalAlign: BI.HorizontalAlign.Left,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      rowSize: [],
      items: []
    });
  },
  render: function render() {
    BI.VTapeLayout.superclass.render.apply(this, arguments);
    this.populate(this.options.items);
  },
  addItem: function addItem(item) {
    // do nothing
    throw new Error("不能添加子组件");
  },
  stroke: function stroke(items) {
    var self = this,
        o = this.options;
    items = BI.compact(items);
    BI.each(items, function (i, item) {
      if (BI.isEmptyObject(item)) {
        return;
      }

      if (!self.hasWidget(self._getChildName(i))) {
        var w = BI._lazyCreateWidget(item);

        self.addWidget(self._getChildName(i), w);
      } else {
        w = self.getWidgetByName(self._getChildName(i));
      }

      var rowSize = o.rowSize.length > 0 ? o.rowSize[i] : item.height;

      if (o.rowSize.length > 0) {
        if (item.height >= 1 && o.rowSize[i] >= 1 && o.rowSize[i] !== item.height) {
          rowSize = item.height;
        }
      }

      w.element.css({
        position: "absolute",
        left: self._optimiseGap(self._optimiseItemLgap(item) + self._optimiseItemHgap(item) + o.innerHgap + o.hgap + o.lgap),
        right: self._optimiseGap(self._optimiseItemRgap(item) + self._optimiseItemHgap(item) + o.innerHgap + o.hgap + o.rgap),
        height: BI.isNumber(rowSize) ? self._optimiseGap(rowSize) : ""
      });

      if (o.horizontalAlign === BI.HorizontalAlign.Center) {
        w.element.css({
          marginLeft: "auto",
          marginRight: "auto"
        });
      } else if (o.horizontalAlign === BI.HorizontalAlign.Right) {
        w.element.css({
          marginLeft: "auto"
        });
      }
    });
    var top = {},
        bottom = {};
    top[0] = o.innerVgap;
    bottom[items.length - 1] = o.innerVgap;
    BI.any(items, function (i, item) {
      if (BI.isEmptyObject(item)) {
        return true;
      }

      var w = self.getWidgetByName(self._getChildName(i));
      var rowSize = o.rowSize.length > 0 ? o.rowSize[i] : item.height;

      if (o.rowSize.length > 0) {
        if (item.height >= 1 && o.rowSize[i] >= 1 && o.rowSize[i] !== item.height) {
          rowSize = item.height;
        }
      }

      if (BI.isNull(top[i])) {
        var preRowSize = o.rowSize.length > 0 ? o.rowSize[i - 1] : items[i - 1].height;
        top[i] = top[i - 1] + preRowSize + self._optimiseItemTgap(items[i - 1]) + self._optimiseItemBgap(items[i - 1]) + 2 * self._optimiseItemVgap(items[i - 1]) + o.vgap + o.tgap + o.bgap;
      }

      w.element.css({
        top: self._optimiseGap(top[i] + self._optimiseItemTgap(item) + self._optimiseItemVgap(item) + o.vgap + o.tgap)
      });

      if (BI.isNull(rowSize) || rowSize === "" || rowSize === "fill") {
        return true;
      }
    });
    BI.backAny(items, function (i, item) {
      if (BI.isEmptyObject(item)) {
        return true;
      }

      var w = self.getWidgetByName(self._getChildName(i));
      var rowSize = o.rowSize.length > 0 ? o.rowSize[i] : item.height;

      if (BI.isNull(bottom[i])) {
        var nextRowSize = o.rowSize.length > 0 ? o.rowSize[i + 1] : items[i + 1].height;
        bottom[i] = bottom[i + 1] + nextRowSize + self._optimiseItemTgap(items[i + 1]) + self._optimiseItemBgap(items[i + 1]) + 2 * self._optimiseItemVgap(items[i + 1]) + o.vgap + o.tgap + o.bgap;
      }

      w.element.css({
        bottom: self._optimiseGap(bottom[i] + self._optimiseItemBgap(item) + self._optimiseItemVgap(item) + o.vgap + o.bgap)
      });

      if (BI.isNull(rowSize) || rowSize === "" || rowSize === "fill") {
        return true;
      }
    });
  },
  update: function update(opt) {
    return this.forceUpdate(opt);
  },
  populate: function populate(items) {
    BI.VTapeLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.vtape", BI.VTapeLayout);

/***/ }),
/* 237 */
/***/ (function(module, exports) {

/**
 * td布局
 * @class BI.TdLayout
 * @extends BI.Layout
 */
BI.TdLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.TdLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-td",
      columnSize: [],
      rowSize: [],
      verticalAlign: BI.VerticalAlign.Middle,
      horizontalAlign: BI.HorizontalAlign.Stretch,
      hgap: 0,
      vgap: 0,
      tgap: 0,
      bgap: 0,
      lgap: 0,
      rgap: 0,
      items: []
    });
  },
  render: function render() {
    BI.TdLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    this.$table = BI.Widget._renderEngine.createElement("<table>").attr({
      cellspacing: 0,
      cellpadding: 0
    }).css({
      position: "relative",
      width: o.horizontalAlign === BI.HorizontalAlign.Center || o.horizontalAlign === BI.HorizontalAlign.Stretch ? "100%" : "auto",
      height: o.verticalAlign !== BI.VerticalAlign.Top ? "100%" : "auto",
      "border-spacing": "0px",
      border: "none",
      "border-collapse": "separate"
    });
    this.rows = 0;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(idx, arr) {
    var o = this.options;

    function firstElement(item, row, col) {
      if (row === 0) {
        item.addClass("first-row");
      }

      if (col === 0) {
        item.addClass("first-col");
      }

      item.addClass(BI.isOdd(row + 1) ? "odd-row" : "even-row");
      item.addClass(BI.isOdd(col + 1) ? "odd-col" : "even-col");
      item.addClass("center-element");
    }

    function firstObject(item, row, col) {
      var cls = "";

      if (row === 0) {
        cls += " first-row";
      }

      if (col === 0) {
        cls += " first-col";
      }

      BI.isOdd(row + 1) ? cls += " odd-row" : cls += " even-row";
      BI.isOdd(col + 1) ? cls += " odd-col" : cls += " even-col";
      item.cls = (item.cls || "") + cls + " center-element";
    }

    function first(item, row, col) {
      if (item instanceof BI.Widget) {
        firstElement(item.element, row, col);
      } else if (item.el instanceof BI.Widget) {
        firstElement(item.el.element, row, col);
      } else if (item.el) {
        firstObject(item.el, row, col);
      } else {
        firstObject(item, row, col);
      }
    }

    var height = BI.isNumber(o.rowSize) ? this._optimiseGap(o.rowSize) : o.rowSize[idx] === "" ? this._optimiseGap(1) : this._optimiseGap(o.rowSize[idx]);

    var tr = BI._lazyCreateWidget({
      type: "bi.default",
      tagName: "tr",
      height: height,
      css: {
        "max-height": height,
        "min-height": height
      }
    });

    for (var i = 0; i < arr.length; i++) {
      var hasFill = function hasFill() {
        if (o.columnSize.length > 0) {
          return o.columnSize.indexOf("fill") >= 0;
        }

        return BI.some(arr, function (i, item) {
          if (item.width === "fill") {
            return true;
          }
        });
      };

      var w = BI._lazyCreateWidget(arr[i]);

      if (o.verticalAlign === BI.VerticalAlign.Stretch) {
        var top = o.vgap + o.tgap + this._optimiseItemTgap(arr[i]) + this._optimiseItemVgap(arr[i]),
            bottom = o.vgap + o.bgap + this._optimiseItemBgap(arr[i]) + this._optimiseItemVgap(arr[i]);

        w.element.css("height", "calc(100% - " + this._optimiseGap(top + bottom) + ")");
      }

      w.element.css({
        position: "relative",
        top: "0",
        left: "0",
        margin: "0px auto"
      });
      var item = arr[i];

      this._handleGap(w, item, i);

      first(w, this.rows++, i);
      var width = "";
      var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

      if (columnSize > 0) {
        width = this._optimiseGap(columnSize + (i === 0 ? o.hgap : 0) + o.hgap + o.lgap + o.rgap);
      }

      if ((BI.isNull(columnSize) || columnSize === "") && hasFill()) {
        width = 2;
      }

      var td = BI._lazyCreateWidget({
        type: "bi.default",
        width: width,
        tagName: "td",
        items: [w]
      }); // 对于表现为td的元素设置最大宽度，有几点需要注意
      // 1、由于直接对td设置最大宽度是在规范中未定义的, 所以要使用类似td:firstChild来迂回实现
      // 2、不能给多个td设置最大宽度，这样只会平分宽度
      // 3、多百分比宽度就算了


      if (columnSize > 0) {
        td.element.css({
          "max-width": width,
          "min-width": width
        });
      }

      td.element.css({
        position: "relative",
        "vertical-align": o.verticalAlign,
        margin: "0",
        padding: "0",
        border: "none"
      });
      tr.addItem(td);
    }

    this.addWidget(this._getChildName(idx), tr);
    return tr;
  },
  appendFragment: function appendFragment(frag) {
    this.$table.append(frag);
    this.element.append(this.$table);
  },
  resize: function resize() {// console.log("td布局不需要resize");
  },
  update: function update(opt) {
    return this.forceUpdate(opt);
  },
  populate: function populate(items) {
    BI.TdLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.td", BI.TdLayout);

/***/ }),
/* 238 */
/***/ (function(module, exports) {

/**
 * 垂直布局
 * @class BI.VerticalLayout
 * @extends BI.Layout
 */
BI.VerticalLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.VerticalLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-v",
      horizontalAlign: BI.HorizontalAlign.Stretch,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      scrolly: true
    });
  },
  render: function render() {
    BI.VerticalLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.VerticalLayout.superclass._addElement.apply(this, arguments);

    w.element.css({
      position: "relative"
    });

    this._handleGap(w, item, null, i);

    if (o.horizontalAlign === BI.HorizontalAlign.Center) {
      w.element.css({
        marginLeft: "auto",
        marginRight: "auto"
      });
    } else if (o.horizontalAlign === BI.HorizontalAlign.Right) {
      w.element.css({
        marginLeft: "auto"
      });
    }

    return w;
  },
  populate: function populate(items) {
    BI.VerticalLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.vertical", BI.VerticalLayout);

/***/ }),
/* 239 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.WindowLayout
 * @extends BI.Layout
 */
BI.WindowLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.WindowLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-window",
      columns: 3,
      rows: 2,
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      columnSize: [],
      rowSize: [],
      items: []
    });
  },
  render: function render() {
    BI.WindowLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
  },
  addItem: function addItem(item) {
    // do nothing
    throw new Error("不能添加子组件");
  },
  stroke: function stroke(items) {
    var o = this.options,
        self = this;

    if (BI.isNumber(o.rowSize)) {
      o.rowSize = BI.makeArray(o.items.length, 1 / o.items.length);
    }

    if (BI.isNumber(o.columnSize)) {
      o.columnSize = BI.makeArray(o.items[0].length, 1 / o.items[0].length);
    }

    function firstElement(item, cls) {
      item.addClass(cls);
      return item;
    }

    function firstObject(item, cls) {
      item.cls = (item.cls || "") + cls;
      return item;
    }

    function first(item, row, col) {
      if (item instanceof BI.Widget) {
        firstElement(item.element, row, col);
      } else if (item.el instanceof BI.Widget) {
        firstElement(item.el.element, row, col);
      } else if (item.el) {
        firstObject(item.el, row, col);
      } else {
        firstObject(item, row, col);
      }
    }

    for (var i = 0; i < o.rows; i++) {
      for (var j = 0; j < o.columns; j++) {
        if (!o.items[i][j]) {
          throw new Error("构造错误", o.items);
        }

        if (!this.hasWidget(this._getChildName(i + "_" + j))) {
          var w = BI._lazyCreateWidget(o.items[i][j]);

          w.element.css({
            position: "absolute"
          });
          this.addWidget(this._getChildName(i + "_" + j), w);
        }
      }
    }

    var left = {},
        right = {},
        top = {},
        bottom = {};
    left[0] = 0;
    top[0] = 0;
    right[o.columns - 1] = 0;
    bottom[o.rows - 1] = 0; // 从上到下

    for (var i = 0; i < o.rows; i++) {
      for (var j = 0; j < o.columns; j++) {
        var wi = this.getWidgetByName(this._getChildName(i + "_" + j));

        if (BI.isNull(top[i])) {
          top[i] = top[i - 1] + (o.rowSize[i - 1] < 1 ? o.rowSize[i - 1] : o.rowSize[i - 1] + o.vgap + o.bgap);
        }

        var t = this._optimiseGap(top[i] + o.vgap + o.tgap),
            h = "";

        if (BI.isNumber(o.rowSize[i])) {
          h = this._optimiseGap(o.rowSize[i]);
        }

        wi.element.css({
          top: t,
          height: h
        });
        first(wi, self.getRowColumnCls(i, j, o.rows - 1, o.columns - 1));
      }

      if (!BI.isNumber(o.rowSize[i])) {
        break;
      }
    } // 从下到上


    for (var i = o.rows - 1; i >= 0; i--) {
      for (var j = 0; j < o.columns; j++) {
        var wi = this.getWidgetByName(this._getChildName(i + "_" + j));

        if (BI.isNull(bottom[i])) {
          bottom[i] = bottom[i + 1] + (o.rowSize[i + 1] < 1 ? o.rowSize[i + 1] : o.rowSize[i + 1] + o.vgap + o.tgap);
        }

        var b = this._optimiseGap(bottom[i] + o.vgap + o.bgap),
            h = "";

        if (BI.isNumber(o.rowSize[i])) {
          h = this._optimiseGap(o.rowSize[i]);
        }

        wi.element.css({
          bottom: b,
          height: h
        });
        first(wi, self.getRowColumnCls(i, j, o.rows - 1, o.columns - 1));
      }

      if (!BI.isNumber(o.rowSize[i])) {
        break;
      }
    } // 从左到右


    for (var j = 0; j < o.columns; j++) {
      for (var i = 0; i < o.rows; i++) {
        var wi = this.getWidgetByName(this._getChildName(i + "_" + j));

        if (BI.isNull(left[j])) {
          left[j] = left[j - 1] + (o.columnSize[j - 1] < 1 ? o.columnSize[j - 1] : o.columnSize[j - 1] + o.hgap + o.rgap);
        }

        var l = this._optimiseGap(left[j] + o.hgap + o.lgap),
            w = "";

        if (BI.isNumber(o.columnSize[j])) {
          w = this._optimiseGap(o.columnSize[j]);
        }

        wi.element.css({
          left: l,
          width: w
        });
        first(wi, self.getRowColumnCls(i, j, o.rows - 1, o.columns - 1));
      }

      if (!BI.isNumber(o.columnSize[j])) {
        break;
      }
    } // 从右到左


    for (var j = o.columns - 1; j >= 0; j--) {
      for (var i = 0; i < o.rows; i++) {
        var wi = this.getWidgetByName(this._getChildName(i + "_" + j));

        if (BI.isNull(right[j])) {
          right[j] = right[j + 1] + (o.columnSize[j + 1] < 1 ? o.columnSize[j + 1] : o.columnSize[j + 1] + o.hgap + o.lgap);
        }

        var r = this._optimiseGap(right[j] + o.hgap + o.rgap),
            w = "";

        if (BI.isNumber(o.columnSize[j])) {
          w = this._optimiseGap(o.columnSize[j]);
        }

        wi.element.css({
          right: r,
          width: w
        });
        first(wi, self.getRowColumnCls(i, j, o.rows - 1, o.columns - 1));
      }

      if (!BI.isNumber(o.columnSize[j])) {
        break;
      }
    }
  },
  resize: function resize() {// console.log("window布局不需要resize");
  },
  update: function update(opt) {
    return this.forceUpdate(opt);
  },
  populate: function populate(items) {
    BI.WindowLayout.superclass.populate.apply(this, arguments);

    this._mount();
  }
});
BI.shortcut("bi.window", BI.WindowLayout);

/***/ }),
/* 240 */
/***/ (function(module, exports) {

/**
 * 水平和垂直方向都居中容器, 非自适应，用于宽度高度固定的面板
 * @class BI.CenterLayout
 * @extends BI.Layout
 */
BI.CenterLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.CenterLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-center",
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.CenterLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    var list = [],
        items = o.items;
    BI.each(items, function (i) {
      list.push({
        column: i,
        row: 0,
        el: BI._lazyCreateWidget({
          type: "bi.default",
          cls: "center-element " + (i === 0 ? "first-element " : "") + (i === items.length - 1 ? "last-element" : "")
        })
      });
    });
    BI.each(items, function (i, item) {
      if (item) {
        var w = BI._lazyCreateWidget(item);

        w.element.css({
          position: "absolute",
          left: self._optimiseGap(o.hgap + o.lgap),
          right: self._optimiseGap(o.hgap + o.rgap),
          top: self._optimiseGap(o.vgap + o.tgap),
          bottom: self._optimiseGap(o.vgap + o.bgap),
          width: "auto",
          height: "auto"
        });
        list[i].el.addItem(w);
      }
    });
    return {
      type: "bi.grid",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      columns: list.length,
      rows: 1,
      items: list
    };
  },
  resize: function resize() {// console.log("center布局不需要resize");
  },
  addItem: function addItem(item) {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate.apply(this.layout, arguments);
  }
});
BI.shortcut("bi.center", BI.CenterLayout);

/***/ }),
/* 241 */
/***/ (function(module, exports) {

/**
 * 浮动布局实现的居中容器
 * @class BI.FloatCenterLayout
 * @extends BI.Layout
 */
BI.FloatCenterLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.FloatCenterLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-float-center",
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.FloatCenterLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options,
        items = o.items;
    var list = [],
        width = 100 / items.length;
    BI.each(items, function (i) {
      var widget = BI._lazyCreateWidget({
        type: "bi.default"
      });

      widget.element.addClass("center-element " + (i === 0 ? "first-element " : "") + (i === items.length - 1 ? "last-element" : "")).css({
        width: width + "%",
        height: "100%"
      });
      list.push({
        el: widget
      });
    });
    BI.each(items, function (i, item) {
      if (item) {
        var w = BI._lazyCreateWidget(item);

        w.element.css({
          position: "absolute",
          left: self._optimiseGap(o.hgap + o.lgap),
          right: self._optimiseGap(o.hgap + o.rgap),
          top: self._optimiseGap(o.vgap + o.tgap),
          bottom: self._optimiseGap(o.vgap + o.bgap),
          width: "auto",
          height: "auto"
        });
        list[i].el.addItem(w);
      }
    });
    return {
      type: "bi.left",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      items: list
    };
  },
  resize: function resize() {// console.log("floatcenter布局不需要resize");
  },
  addItem: function addItem(item) {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate.apply(this.layout, arguments);
  }
});
BI.shortcut("bi.float_center", BI.FloatCenterLayout);

/***/ }),
/* 242 */
/***/ (function(module, exports) {

/**
 * 水平和垂直方向都居中容器, 非自适应，用于宽度高度固定的面板
 * @class BI.HorizontalCenterLayout
 * @extends BI.Layout
 */
BI.HorizontalCenterLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.HorizontalCenterLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-h-center",
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.HorizontalCenterLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options,
        items = o.items;
    var list = [];
    BI.each(items, function (i) {
      list.push({
        column: i,
        row: 0,
        el: BI._lazyCreateWidget({
          type: "bi.default",
          cls: "center-element " + (i === 0 ? "first-element " : "") + (i === items.length - 1 ? "last-element" : "")
        })
      });
    });
    BI.each(items, function (i, item) {
      if (item) {
        var w = BI._lazyCreateWidget(item);

        w.element.css({
          position: "absolute",
          left: self._optimiseGap(o.hgap + o.lgap),
          right: self._optimiseGap(o.hgap + o.rgap),
          top: self._optimiseGap(o.vgap + o.tgap),
          bottom: self._optimiseGap(o.vgap + o.bgap),
          width: "auto"
        });
        list[i].el.addItem(w);
      }
    });
    return {
      type: "bi.grid",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      columns: list.length,
      rows: 1,
      items: list
    };
  },
  resize: function resize() {// console.log("horizontal_center布局不需要resize");
  },
  addItem: function addItem(item) {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate.apply(this.layout, arguments);
  }
});
BI.shortcut("bi.horizontal_center", BI.HorizontalCenterLayout);

/***/ }),
/* 243 */
/***/ (function(module, exports) {

/**
 * 垂直方向都居中容器, 非自适应，用于高度不固定的面板
 * @class BI.VerticalCenterLayout
 * @extends BI.Layout
 */
BI.VerticalCenterLayout = BI.inherit(BI.Layout, {
  props: function props() {
    return BI.extend(BI.VerticalCenterLayout.superclass.props.apply(this, arguments), {
      baseCls: "bi-v-center",
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0
    });
  },
  render: function render() {
    BI.VerticalCenterLayout.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options,
        items = o.items;
    var list = [];
    BI.each(items, function (i) {
      list.push({
        column: 0,
        row: i,
        el: BI._lazyCreateWidget({
          type: "bi.default",
          cls: "center-element " + (i === 0 ? "first-element " : "") + (i === items.length - 1 ? "last-element" : "")
        })
      });
    });
    BI.each(items, function (i, item) {
      if (item) {
        var w = BI._lazyCreateWidget(item);

        w.element.css({
          position: "absolute",
          left: self._optimiseGap(o.hgap + o.lgap),
          right: self._optimiseGap(o.hgap + o.rgap),
          top: self._optimiseGap(o.vgap + o.tgap),
          bottom: self._optimiseGap(o.vgap + o.bgap),
          height: "auto"
        });
        list[i].el.addItem(w);
      }
    });
    return {
      type: "bi.grid",
      ref: function ref(_ref) {
        self.layout = _ref;
      },
      columns: 1,
      rows: list.length,
      items: list
    };
  },
  resize: function resize() {// console.log("vertical_center布局不需要resize");
  },
  addItem: function addItem(item) {
    // do nothing
    throw new Error("不能添加子组件");
  },
  populate: function populate(items) {
    this.layout.populate.apply(this.layout, arguments);
  }
});
BI.shortcut("bi.vertical_center", BI.VerticalCenterLayout);

/***/ }),
/* 244 */
/***/ (function(module, exports) {

/**
 * 横向响应式布局
 * Created by GUY on 2016/12/2.
 *
 * @class BI.ResponsiveFlexHorizontalLayout
 * @extends BI.FlexHorizontalLayout
 */
BI.ResponsiveFlexHorizontalLayout = BI.inherit(BI.FlexHorizontalLayout, {
  // props: function () {
  //     return BI.extend(BI.ResponsiveFlexHorizontalLayout.superclass.props.apply(this, arguments), {
  //         // extraCls: "bi-responsive-f-h"
  //     });
  // },
  mounted: function mounted() {
    var self = this,
        o = this.options;

    if (o.horizontalAlign !== BI.HorizontalAlign.Center) {
      return;
    }

    var defaultResize = function defaultResize() {
      if (o.scrollable !== true && o.scrollx !== true) {
        var clientWidth = document.body.clientWidth;

        if (self.element.width() > 2 / 3 * clientWidth) {
          if (clientWidth <= 768) {
            BI.each(self._children, function (i, child) {
              self._clearGap(child);

              self._handleReverseGap(child, o.items[i], i | 0);
            });
            self.element.css("flex-direction", "column");
          }
        }
      }
    };

    var resize = function resize() {
      defaultResize();

      if (o.scrollable !== true && o.scrollx !== true) {
        var clientWidth = document.body.clientWidth;

        if (self.element.width() > 2 / 3 * clientWidth) {
          if (clientWidth > 768) {
            BI.each(self._children, function (i, child) {
              self._clearGap(child);
            });
            self.resize();
            self.element.css("flex-direction", "row");
          }
        }
      }
    };

    this.unResize = BI.Resizers.add(this.getName(), resize);
    defaultResize();
  },
  destroyed: function destroyed() {
    var _this$unResize;

    (_this$unResize = this.unResize) === null || _this$unResize === void 0 ? void 0 : _this$unResize.call(this);
  }
});
BI.shortcut("bi.responsive_flex_horizontal", BI.ResponsiveFlexHorizontalLayout);

/***/ }),
/* 245 */
/***/ (function(module, exports) {

/**
 * 横向响应式布局
 * Created by GUY on 2016/12/2.
 *
 * @class BI.ResponsiveFlexWrapperHorizontalLayout
 * @extends BI.FlexWrapperHorizontalLayout
 */
BI.ResponsiveFlexWrapperHorizontalLayout = BI.inherit(BI.FlexWrapperHorizontalLayout, {
  // props: function () {
  //     return BI.extend(BI.ResponsiveFlexWrapperHorizontalLayout.superclass.props.apply(this, arguments), {
  //         extraCls: "bi-responsive-f-h"
  //     });
  // },
  mounted: function mounted() {
    var self = this,
        o = this.options;

    if (o.horizontalAlign !== BI.HorizontalAlign.Center) {
      return;
    }

    var defaultResize = function defaultResize() {
      if (o.scrollable !== true && o.scrollx !== true) {
        var clientWidth = document.body.clientWidth;

        if (self.element.width() > 2 / 3 * clientWidth) {
          if (clientWidth <= 768) {
            BI.each(self._children, function (i, child) {
              self._clearGap(child);

              self._handleReverseGap(child, o.items[i], i | 0);
            });
            self.element.css("flex-direction", "column");
            self.$wrapper.element.css("flex-direction", "column");
          }
        }
      }
    };

    var resize = function resize() {
      defaultResize();

      if (o.scrollable !== true && o.scrollx !== true) {
        var clientWidth = document.body.clientWidth;

        if (self.element.width() > 2 / 3 * clientWidth) {
          if (clientWidth > 768) {
            BI.each(self._children, function (i, child) {
              self._clearGap(child);
            });
            self.resize();
            self.element.css("flex-direction", "row");
            self.$wrapper.element.css("flex-direction", "row");
          }
        }
      }
    };

    this.unResize = BI.Resizers.add(this.getName(), resize);
    defaultResize();
  },
  destroyed: function destroyed() {
    this.unResize();
  }
});
BI.shortcut("bi.responsive_flex_scrollable_horizontal", BI.ResponsiveFlexWrapperHorizontalLayout);

/***/ }),
/* 246 */
/***/ (function(module, exports) {

/**
 * 横向响应式布局
 * Created by GUY on 2016/12/2.
 *
 * @class BI.ResponsiveInlineLayout
 * @extends BI.InlineLayout
 */
BI.ResponsiveInlineLayout = BI.inherit(BI.InlineLayout, {
  mounted: function mounted() {
    var self = this,
        o = this.options;

    if (o.horizontalAlign !== BI.HorizontalAlign.Center) {
      return;
    }

    var defaultResize = function defaultResize() {
      if (o.scrollable !== true && o.scrollx !== true) {
        var clientWidth = document.body.clientWidth;

        if (self.element.width() > 2 / 3 * clientWidth) {
          if (clientWidth <= 768) {
            BI.each(self._children, function (i, child) {
              self._clearGap(child);

              self._handleReverseGap(child, o.items[i], i | 0);

              child.elemenet.css("display", "");
            });
          }
        }
      }
    };

    var resize = function resize() {
      defaultResize();

      if (o.scrollable !== true && o.scrollx !== true) {
        var clientWidth = document.body.clientWidth;

        if (self.element.width() > 2 / 3 * clientWidth) {
          if (clientWidth > 768) {
            BI.each(self._children, function (i, child) {
              self._clearGap(child);
            });
            self.resize();
          }
        }
      }
    };

    this.unResize = BI.Resizers.add(this.getName(), resize);
    defaultResize();
  },
  destroyed: function destroyed() {
    this.unResize();
  }
});
BI.shortcut("bi.responsive_inline", BI.ResponsiveInlineLayout);

/***/ }),
/* 247 */
/***/ (function(module, exports) {

/**
 * 横向黏性布局
 */
BI.HorizontalStickyLayout = BI.inherit(BI.FlexHorizontalLayout, {
  props: function props() {
    return BI.extend(BI.HorizontalStickyLayout.superclass.props.apply(this, arguments), {
      extraCls: "bi-h-sticky",
      scrollx: true,
      // horizontalAlign: BI.HorizontalAlign.Stretch,
      verticalAlign: BI.VerticalAlign.Stretch
    });
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.HorizontalStickyLayout.superclass._addElement.apply(this, arguments);

    var columnSize = o.columnSize.length > 0 ? o.columnSize[i] : item.width;

    if (o.columnSize.length > 0) {
      if (item.width >= 1 && o.columnSize[i] >= 1 && o.columnSize[i] !== item.width) {
        columnSize = null;
      }
    }

    if (columnSize !== "fill") {
      var fillIndex;
      BI.count(0, o.items.length, function (index) {
        if (BI.isNotNull(fillIndex)) {
          return;
        }

        if (o.columnSize[index] === "fill" || o.items[index].width === "fill") {
          fillIndex = index;
        }
      });

      if (fillIndex > i) {
        w.element.css({
          position: "sticky",
          zIndex: 1,
          left: 0
        });
      } else {
        w.element.css({
          position: "sticky",
          zIndex: 1,
          right: 0
        });
      }
    } else {
      w.element.css({
        overflow: ""
      });
    }

    return w;
  }
});
BI.shortcut("bi.horizontal_sticky", BI.HorizontalStickyLayout);

/***/ }),
/* 248 */
/***/ (function(module, exports) {

/**
 * 纵向黏性布局
 */
BI.VerticalStickyLayout = BI.inherit(BI.FlexVerticalLayout, {
  props: function props() {
    return BI.extend(BI.VerticalStickyLayout.superclass.props.apply(this, arguments), {
      extraCls: "bi-v-sticky",
      scrolly: true,
      horizontalAlign: BI.HorizontalAlign.Stretch // verticalAlign: BI.VerticalAlign.Stretch

    });
  },
  _addElement: function _addElement(i, item) {
    var o = this.options;

    var w = BI.VerticalStickyLayout.superclass._addElement.apply(this, arguments);

    var rowSize = o.rowSize.length > 0 ? o.rowSize[i] : item.height;

    if (o.rowSize.length > 0) {
      if (item.height >= 1 && o.rowSize[i] >= 1 && o.rowSize[i] !== item.height) {
        rowSize = null;
      }
    }

    if (rowSize !== "fill") {
      var fillIndex;
      BI.count(0, o.items.length, function (index) {
        if (BI.isNotNull(fillIndex)) {
          return;
        }

        if (o.rowSize[index] === "fill" || o.items[index].height === "fill") {
          fillIndex = index;
        }
      });

      if (fillIndex > i) {
        w.element.css({
          position: "sticky",
          zIndex: 1,
          top: 0
        });
      } else {
        w.element.css({
          position: "sticky",
          zIndex: 1,
          bottom: 0
        });
      }
    } else {
      w.element.css({
        overflow: ""
      });
    }

    return w;
  }
});
BI.shortcut("bi.vertical_sticky", BI.VerticalStickyLayout);

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 294 */
/***/ (function(module, exports) {

if (!_global.$ && !_global.jQuery) {
  _global.jQuery = _global.$ = BI.jQuery;
}

if (!_global._) {
  _global._ = BI._;
}

/***/ }),
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */
/***/ (function(module, exports) {

/**
 * 当没有元素时有提示信息的view
 *
 * Created by GUY on 2015/9/8.
 * @class BI.Pane
 * @extends BI.Widget
 * @abstract
 */
BI.Pane = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Pane.superclass._defaultConfig.apply(this, arguments), {
      _baseCls: "bi-pane",
      tipText: BI.i18nText("BI-No_Selected_Item"),
      loadingText: "",
      loadingSize: "small",
      overlap: true,
      onLoaded: BI.emptyFn
    });
  },
  _assertTip: function _assertTip() {
    var self = this,
        o = this.options;

    if (!this._tipText) {
      BI.createWidget({
        type: "bi.absolute_center_adapt",
        element: this,
        items: [{
          type: "bi.label",
          ref: function ref(_ref) {
            self._tipText = _ref;
          },
          cls: "bi-tips",
          text: o.tipText,
          height: 25
        }]
      });
    }
  },
  loading: function loading() {
    var self = this,
        o = this.options;
    var loadingAnimation = BI.createWidget(BI.Providers.getProvider("bi.provider.system").getLoading({
      loadingSize: o.loadingSize,
      context: this
    })); // pane在同步方式下由items决定tipText的显示与否
    // loading的异步情况下由loaded后对面板的populate的时机决定

    this.setTipVisible(false);

    if (o.overlap === true) {
      if (!BI.Layers.has(this.getName() + "-loading")) {
        BI.createWidget({
          type: "bi.center_adapt",
          cls: "loading-container",
          items: this._getLoadingTipItems(loadingAnimation),
          element: BI.Layers.make(this.getName() + "-loading", this)
        });
      }

      BI.Layers.show(self.getName() + "-loading");
    } else if (BI.isNull(this._loading)) {
      loadingAnimation.element.css("zIndex", 1);
      BI.createWidget({
        type: "bi.center_adapt",
        element: this,
        cls: "loading-container",
        items: this._getLoadingTipItems(loadingAnimation)
      });
    }

    self.fireEvent(BI.Pane.EVENT_LOADING);
    this.element.addClass("loading-status");
  },
  _getSize: function _getSize(v) {
    return Math.ceil(v / (this.options.loadingSize === "small" ? 2 : 1));
  },
  _getLoadingTipItems: function _getLoadingTipItems(loadingTip) {
    var self = this,
        o = this.options;
    var loadingTipItems = [{
      type: "bi.horizontal_adapt",
      items: [loadingTip]
    }];
    BI.isNotEmptyString(o.loadingText) && loadingTipItems.push({
      type: "bi.text",
      text: o.loadingText,
      tgap: this._getSize(10)
    });
    return [{
      type: "bi.vertical",
      ref: function ref(_ref) {
        self._loading = _ref;
      },
      items: loadingTipItems
    }];
  },
  loaded: function loaded() {
    var self = this,
        o = this.options;
    BI.Layers.remove(self.getName() + "-loading");
    this._loading && this._loading.destroy();
    o.onLoaded();
    self.fireEvent(BI.Pane.EVENT_LOADED);
    this.element.removeClass("loading-status");
  },
  check: function check() {
    this.setTipVisible(BI.isEmpty(this.options.items));
  },
  setTipVisible: function setTipVisible(b) {
    if (b === true) {
      this._assertTip();

      this._tipText && this._tipText.setVisible(true);
    } else {
      this._tipText && this._tipText.setVisible(false);
    }
  },
  setTipText: function setTipText(text) {
    this._assertTip();

    this._tipText.setText(text);
  },
  populate: function populate(items) {
    this.options.items = items || [];
    this.check();
  }
});
BI.Pane.EVENT_LOADED = "EVENT_LOADED";
BI.Pane.EVENT_LOADING = "EVENT_LOADING";
BI.shortcut("bi.pane", BI.Pane);

/***/ }),
/* 377 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/6/26.
 * @class BI.ButtonGroup
 * @extends BI.Widget
 */
BI.ButtonGroup = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ButtonGroup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-button-group",
      behaviors: {},
      items: [],
      value: "",
      chooseType: BI.Selection.Single,
      layouts: [{
        type: "bi.center",
        hgap: 0,
        vgap: 0
      }]
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    var behaviors = {};
    BI.each(o.behaviors, function (key, rule) {
      behaviors[key] = BI.BehaviorFactory.createBehavior(key, {
        rule: rule
      });
    });
    this.behaviors = behaviors;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;

    if (BI.isKey(o.value) || BI.isNotEmptyArray(o.value)) {
      this.setValue(o.value);
    }
  },
  _createBtns: function _createBtns(items) {
    var btns;
    BI.Widget.execWithContext(this, function () {
      btns = BI.createWidgets(BI.createItems(items, {
        type: "bi.text_button"
      }));
    });
    return btns;
  },
  _btnsCreator: function _btnsCreator(items) {
    var self = this,
        args = Array.prototype.slice.call(arguments),
        o = this.options;

    var buttons = this._createBtns(items);

    args[0] = buttons;
    BI.each(this.behaviors, function (i, behavior) {
      behavior.doBehavior.apply(behavior, args);
    });
    BI.each(buttons, function (i, btn) {
      btn.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
        if (type === BI.Events.CLICK) {
          switch (o.chooseType) {
            case BI.ButtonGroup.CHOOSE_TYPE_SINGLE:
              self.setValue(btn.getValue());
              break;

            case BI.ButtonGroup.CHOOSE_TYPE_NONE:
              self.setValue([]);
              break;

            default:
              break;
          }

          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
          self.fireEvent(BI.ButtonGroup.EVENT_CHANGE, value, obj);
        } else {
          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        }
      });
      btn.on(BI.Events.DESTROY, function () {
        BI.remove(self.buttons, btn);
      });
    });
    return buttons;
  },
  _packageBtns: function _packageBtns(btns) {
    var o = this.options;
    var layouts = BI.isArray(o.layouts) ? o.layouts : [o.layouts];

    for (var i = layouts.length - 1; i > 0; i--) {
      btns = BI.map(btns, function (k, it) {
        return BI.extend({}, layouts[i], {
          items: [BI.extend({}, layouts[i].el, {
            el: it
          })]
        });
      });
    }

    return btns;
  },
  _packageSimpleItems: function _packageSimpleItems(btns) {
    var o = this.options;
    return BI.map(o.items, function (i, item) {
      if (BI.stripEL(item) === item) {
        return btns[i];
      }

      return BI.extend({}, item, {
        el: btns[i]
      });
    });
  },
  _packageItems: function _packageItems(items, packBtns) {
    return BI.createItems(BI.makeArrayByArray(items, {}), BI.clone(packBtns));
  },
  _packageLayout: function _packageLayout(items) {
    var o = this.options,
        layout = BI.deepClone(BI.isArray(o.layouts) ? o.layouts[0] : o.layouts);
    var lay = BI.formatEL(layout).el;

    while (lay && lay.items && !BI.isEmpty(lay.items)) {
      lay = BI.formatEL(lay.items[0]).el;
    }

    lay.items = items;
    return layout;
  },
  // 如果是一个简单的layout
  _isSimpleLayout: function _isSimpleLayout() {
    var o = this.options;
    return BI.isArray(o.layouts) ? o.layouts.length === 1 && !BI.isArray(o.items[0]) : true;
  },
  doBehavior: function doBehavior() {
    var args = Array.prototype.slice.call(arguments);
    args.unshift(this.buttons);
    BI.each(this.behaviors, function (i, behavior) {
      behavior.doBehavior.apply(behavior, args);
    });
  },
  prependItems: function prependItems(items) {
    var btns = this._btnsCreator.apply(this, arguments);

    this.buttons = BI.concat(btns, this.buttons);

    if (this._isSimpleLayout() && this.layouts && this.layouts.prependItems) {
      this.layouts.prependItems(btns);
      return;
    }

    items = this._packageItems(items, this._packageBtns(btns));
    this.layouts.prependItems(this._packageLayout(items).items);
  },
  addItems: function addItems(items) {
    var btns = this._btnsCreator.apply(this, arguments);

    this.buttons = BI.concat(this.buttons, btns); // 如果是一个简单的layout

    if (this._isSimpleLayout() && this.layouts && this.layouts.addItems) {
      this.layouts.addItems(btns);
      return;
    }

    items = this._packageItems(items, this._packageBtns(btns));
    this.layouts.addItems(this._packageLayout(items).items);
  },
  removeItemAt: function removeItemAt(indexes) {
    BI.removeAt(this.buttons, indexes);
    this.layouts.removeItemAt(indexes);
  },
  removeItems: function removeItems(values) {
    values = BI.isArray(values) ? values : [values];
    var deleted = [];
    BI.each(this.buttons, function (i, button) {
      if (BI.deepContains(values, button.getValue())) {
        deleted.push(i);
      }
    });
    BI.removeAt(this.buttons, deleted);
    this.layouts.removeItemAt(deleted);
  },
  populate: function populate(items) {
    items = items || [];
    this.empty();
    this.options.items = items;
    this.buttons = this._btnsCreator.apply(this, arguments);

    if (this._isSimpleLayout()) {
      items = this._packageSimpleItems(this.buttons);
    } else {
      items = this._packageItems(items, this._packageBtns(this.buttons));
    }

    this.layouts = BI.createWidget(BI.extend({
      element: this
    }, this._packageLayout(items)));
  },
  setNotSelectedValue: function setNotSelectedValue(v) {
    v = BI.isArray(v) ? v : [v];
    BI.each(this.buttons, function (i, item) {
      if (BI.deepContains(v, item.getValue())) {
        item.setSelected && item.setSelected(false);
      } else {
        item.setSelected && item.setSelected(true);
      }
    });
  },
  setEnabledValue: function setEnabledValue(v) {
    v = BI.isArray(v) ? v : [v];
    BI.each(this.buttons, function (i, item) {
      if (BI.deepContains(v, item.getValue())) {
        item.setEnable(true);
      } else {
        item.setEnable(false);
      }
    });
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    BI.each(this.buttons, function (i, item) {
      if (BI.deepContains(v, item.getValue())) {
        item.setSelected && item.setSelected(true);
      } else {
        item.setSelected && item.setSelected(false);
      }
    });
  },
  setValueMap: function setValueMap(map) {
    map = map || {};
    BI.each(this.buttons, function (i, item) {
      if (BI.has(map, item.getValue())) {
        item.setSelected && item.setSelected(true);
      } else {
        item.setSelected && item.setSelected(false);
      }
    });
  },
  setAllSelected: function setAllSelected(v) {
    BI.each(this.getAllButtons(), function (i, btn) {
      (btn.setSelected || btn.setAllSelected).apply(btn, [v]);
    });
  },
  getNotSelectedValue: function getNotSelectedValue() {
    var v = [];
    BI.each(this.buttons, function (i, item) {
      if (item.isEnabled() && !(item.isSelected && item.isSelected())) {
        v.push(item.getValue());
      }
    });
    return v;
  },
  getValue: function getValue() {
    var v = [];
    BI.each(this.buttons, function (i, item) {
      if (item.isEnabled() && item.isSelected && item.isSelected()) {
        v.push(item.getValue());
      }
    });
    return v;
  },
  getAllButtons: function getAllButtons() {
    return this.buttons;
  },
  getAllLeaves: function getAllLeaves() {
    return this.buttons;
  },
  getSelectedButtons: function getSelectedButtons() {
    var btns = [];
    BI.each(this.buttons, function (i, item) {
      if (item.isSelected && item.isSelected()) {
        btns.push(item);
      }
    });
    return btns;
  },
  getNotSelectedButtons: function getNotSelectedButtons() {
    var btns = [];
    BI.each(this.buttons, function (i, item) {
      if (item.isSelected && !item.isSelected()) {
        btns.push(item);
      }
    });
    return btns;
  },
  getIndexByValue: function getIndexByValue(value) {
    var index = -1;
    BI.any(this.buttons, function (i, item) {
      if (item.isEnabled() && item.getValue() === value) {
        index = i;
        return true;
      }
    });
    return index;
  },
  getNodeById: function getNodeById(id) {
    var node;
    BI.any(this.buttons, function (i, item) {
      if (item.isEnabled() && item.options.id === id) {
        node = item;
        return true;
      }
    });
    return node;
  },
  getNodeByValue: function getNodeByValue(value) {
    var node;
    BI.any(this.buttons, function (i, item) {
      if (item.isEnabled() && item.getValue() === value) {
        node = item;
        return true;
      }
    });
    return node;
  },

  /**
   * 滚动到指定的节点
   */
  scrollToValue: function scrollToValue(value, scrollIntoViewOptions) {
    var node = this.getNodeByValue(value);

    if (node) {
      node.element[0].scrollIntoView(scrollIntoViewOptions);
    }
  },
  empty: function empty() {
    BI.ButtonGroup.superclass.empty.apply(this, arguments);
    this.options.items = [];
  },
  destroy: function destroy() {
    BI.ButtonGroup.superclass.destroy.apply(this, arguments);
    this.options.items = [];
  }
});
BI.extend(BI.ButtonGroup, {
  CHOOSE_TYPE_SINGLE: BI.Selection.Single,
  CHOOSE_TYPE_MULTI: BI.Selection.Multi,
  CHOOSE_TYPE_ALL: BI.Selection.All,
  CHOOSE_TYPE_NONE: BI.Selection.None,
  CHOOSE_TYPE_DEFAULT: BI.Selection.Default
});
BI.ButtonGroup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.button_group", BI.ButtonGroup);

/***/ }),
/* 378 */
/***/ (function(module, exports) {

/**
 * Popover弹出层，
 * @class BI.Popover
 * @extends BI.Widget
 */
BI.Drawer = BI.inherit(BI.Widget, {
  SIZE: {
    SMALL: "small",
    NORMAL: "normal",
    BIG: "big"
  },
  props: {
    baseCls: "bi-drawer bi-card",
    size: "normal",
    placement: "right",
    //  top/bottom/left/right
    header: null,
    headerHeight: 40,
    body: null,
    closable: true,
    // BI-40839 是否显示右上角的关闭按钮
    bodyHgap: 20,
    bodyTgap: 10,
    bodyBgap: 10
  },
  render: function render() {
    var self = this;
    var o = this.options;
    var items = [{
      el: {
        type: "bi.htape",
        cls: "bi-message-title bi-header-background",
        items: [{
          type: "bi.absolute",
          items: [{
            el: BI.isPlainObject(o.header) ? BI.extend({}, o.header, {
              extraCls: "bi-font-bold"
            }) : {
              type: "bi.label",
              cls: "bi-font-bold",
              height: o.headerHeight,
              text: o.header,
              title: o.header,
              textAlign: "left"
            },
            left: 20,
            top: 0,
            right: 0,
            bottom: 0
          }]
        }, {
          el: o.closable ? {
            type: "bi.icon_button",
            cls: "bi-message-close close-font",
            height: o.headerHeight,
            handler: function handler() {
              self.close();
            }
          } : {
            type: "bi.layout"
          },
          width: 56
        }],
        height: o.headerHeight
      },
      height: o.headerHeight
    }, {
      el: {
        type: "bi.vertical",
        scrolly: true,
        cls: "drawer-body",
        ref: function ref() {
          self.body = this;
        },
        items: [{
          el: o.body
        }]
      },
      hgap: o.bodyHgap,
      tgap: o.bodyTgap,
      bgap: o.bodyBgap
    }];
    return BI.extend({
      type: "bi.vtape",
      items: items
    }, this._getSuitableSize());
  },
  _getSuitableSize: function _getSuitableSize() {
    var o = this.options;
    var size = 0;

    switch (o.size) {
      case "big":
        size = 736;
        break;

      case "small":
        size = 200;
        break;

      case "normal":
      default:
        size = 378;
        break;
    }

    if (o.placement === "top" || o.placement === "bottom") {
      return {
        height: o.height || size
      };
    }

    if (o.placement === "left" || o.placement === "right") {
      return {
        width: o.width || size
      };
    }
  },
  mounted: function mounted() {
    var self = this,
        o = this.options;

    switch (o.placement) {
      case "right":
        self.element.css({
          top: 0,
          left: "100%",
          bottom: 0
        });
        break;

      case "left":
        self.element.css({
          top: 0,
          right: "100%",
          bottom: 0
        });
        break;

      case "top":
        self.element.css({
          left: 0,
          right: 0,
          bottom: "100%"
        });
        break;

      case "bottom":
        self.element.css({
          left: 0,
          right: 0,
          top: "100%"
        });
        break;

      default:
        break;
    }
  },
  show: function show(callback) {
    var self = this,
        o = this.options;
    requestAnimationFrame(function () {
      var size = self._getSuitableSize();

      switch (o.placement) {
        case "right":
          self.element.css({
            left: "calc(100% - " + size.width + "px)"
          });
          break;

        case "left":
          self.element.css({
            right: "calc(100% - " + size.width + "px)"
          });
          break;

        case "top":
          self.element.css({
            bottom: "calc(100% - " + size.height + "px)"
          });
          break;

        case "bottom":
          self.element.css({
            top: "calc(100% - " + size.height + "px)"
          });
          break;

        default:
          break;
      }

      callback && callback();
    });
  },
  hide: function hide(callback) {
    var self = this,
        o = this.options;
    requestAnimationFrame(function () {
      switch (o.placement) {
        case "right":
          self.element.css({
            left: "100%"
          });
          break;

        case "left":
          self.element.css({
            right: "100%"
          });
          break;

        case "top":
          self.element.css({
            bottom: "100%"
          });
          break;

        case "bottom":
          self.element.css({
            top: "100%"
          });
          break;

        default:
          break;
      }

      setTimeout(callback, 300);
    });
  },
  open: function open() {
    var self = this;
    this.show(function () {
      self.fireEvent(BI.Drawer.EVENT_OPEN);
    });
  },
  close: function close() {
    var self = this;
    this.hide(function () {
      self.fireEvent(BI.Drawer.EVENT_CLOSE);
    });
  },
  setZindex: function setZindex(zindex) {
    this.element.css({
      "z-index": zindex
    });
  },
  destroyed: function destroyed() {}
});
BI.shortcut("bi.drawer", BI.Drawer);
BI.Drawer.EVENT_CLOSE = "EVENT_CLOSE";
BI.Drawer.EVENT_OPEN = "EVENT_OPEN";

/***/ }),
/* 379 */
/***/ (function(module, exports) {

/**
 * Popover弹出层，
 * @class BI.Popover
 * @extends BI.Widget
 */
BI.Popover = BI.inherit(BI.Widget, {
  _constant: {
    SIZE: {
      SMALL: "small",
      NORMAL: "normal",
      BIG: "big"
    },
    MAX_HEIGHT: 600
  },
  props: function props() {
    return {
      baseCls: "bi-popover bi-card bi-border-radius",
      size: "normal",
      // small, normal, big
      logic: {
        dynamic: false
      },
      header: null,
      headerHeight: 40,
      body: null,
      footer: null,
      footerHeight: 44,
      closable: true,
      // BI-40839 是否显示右上角的关闭按钮
      bodyHgap: BI.SIZE_CONSANTS.H_GAP_SIZE,
      bodyTgap: BI.SIZE_CONSANTS.V_GAP_SIZE
    };
  },
  render: function render() {
    var self = this;
    var o = this.options;
    var c = this._constant;
    this.startX = 0;
    this.startY = 0;

    var size = this._calculateSize();

    this.tracker = new BI.MouseMoveTracker(function (deltaX, deltaY) {
      var W = BI.Widget._renderEngine.createElement("body").width();

      var H = BI.Widget._renderEngine.createElement("body").height();

      self.startX += deltaX;
      self.startY += deltaY;
      self.element.css({
        left: BI.clamp(self.startX, 0, W - self.element.width()) + "px",
        top: BI.clamp(self.startY, 0, H - self.element.height()) + "px"
      }); // BI-12134 没有什么特别好的方法

      BI.Resizers._resize({
        target: self.element[0]
      });
    }, function () {
      self.tracker.releaseMouseMoves();
    }, _global);
    var items = [{
      el: {
        type: "bi.htape",
        cls: "bi-message-title bi-header-background",
        items: [{
          el: {
            type: "bi.absolute",
            ref: function ref(_ref) {
              self.dragger = _ref;
            },
            items: [{
              el: BI.isPlainObject(o.header) ? BI.extend({}, o.header, {
                extraCls: "bi-font-bold"
              }) : {
                type: "bi.label",
                cls: "bi-font-bold",
                height: o.headerHeight,
                text: o.header,
                title: o.header,
                textAlign: "left"
              },
              top: 0,
              bottom: 0,
              left: BI.SIZE_CONSANTS.H_GAP_SIZE,
              right: o.closable ? 0 : BI.SIZE_CONSANTS.H_GAP_SIZE
            }]
          }
        }, o.closable ? {
          el: {
            type: "bi.icon_button",
            cls: "bi-message-close close-font",
            height: o.headerHeight,
            handler: function handler() {
              self.close();
            }
          },
          width: 56
        } : null],
        height: o.headerHeight
      },
      height: o.headerHeight
    }, o.logic.dynamic ? {
      el: {
        type: "bi.vertical",
        scrolly: true,
        cls: "popover-body",
        ref: function ref() {
          self.body = this;
        },
        css: {
          "max-height": this._getSuitableBodyHeight(c.MAX_HEIGHT - o.headerHeight - (o.footer ? o.footerHeight : 0) - o.bodyTgap),
          "min-height": this._getSuitableBodyHeight(size.height - o.headerHeight - (o.footer ? o.footerHeight : 0) - o.bodyTgap)
        },
        items: [{
          el: o.body
        }],
        hgap: o.bodyHgap,
        tgap: o.bodyTgap
      }
    } : {
      el: {
        type: "bi.absolute",
        items: [{
          el: o.body,
          left: o.bodyHgap,
          top: o.bodyTgap,
          right: o.bodyHgap,
          bottom: 0
        }]
      }
    }];

    if (o.footer) {
      items.push({
        el: {
          type: "bi.absolute",
          items: [{
            el: o.footer,
            left: BI.SIZE_CONSANTS.H_GAP_SIZE,
            top: 0,
            right: BI.SIZE_CONSANTS.H_GAP_SIZE,
            bottom: 0
          }],
          height: o.footerHeight
        },
        height: o.footerHeight
      });
    }

    return BI.extend({
      items: items,
      width: this._getSuitableWidth(size.width)
    }, o.logic.dynamic ? {
      type: "bi.vertical",
      scrolly: false
    } : {
      type: "bi.vtape",
      height: this._getSuitableHeight(size.height)
    });
  },
  // mounted之后绑定事件
  mounted: function mounted() {
    var self = this;
    this.dragger.element.mousedown(function (e) {
      if (self.options.draggable !== false) {
        self.startX = self.element[0].offsetLeft;
        self.startY = self.element[0].offsetTop;
        self.tracker.captureMouseMoves(e);
      }
    });
  },
  _getSuitableBodyHeight: function _getSuitableBodyHeight(height) {
    var o = this.options;
    return BI.clamp(height, 0, BI.Widget._renderEngine.createElement("body")[0].clientHeight - o.headerHeight - (o.footer ? o.footerHeight : 0) - o.bodyTgap);
  },
  _getSuitableHeight: function _getSuitableHeight(height) {
    return BI.clamp(height, 0, BI.Widget._renderEngine.createElement("body")[0].clientHeight);
  },
  _getSuitableWidth: function _getSuitableWidth(width) {
    return BI.clamp(width, 0, BI.Widget._renderEngine.createElement("body").width());
  },
  _calculateSize: function _calculateSize() {
    var o = this.options;
    var size = {};

    if (BI.isNotNull(o.size)) {
      switch (o.size) {
        case this._constant.SIZE.SMALL:
          size.width = 450;
          size.height = 200;
          size.type = "small";
          break;

        case this._constant.SIZE.BIG:
          size.width = 900;
          size.height = 500;
          size.type = "big";
          break;

        default:
          size.width = 550;
          size.height = 500;
          size.type = "default";
      }
    }

    return {
      width: o.width || size.width,
      height: o.height || size.height,
      type: size.type || "default"
    };
  },
  setDraggable: function setDraggable(b) {
    this.options.draggable = b;
  },
  hide: function hide() {},
  open: function open() {
    this.show();
    this.fireEvent(BI.Popover.EVENT_OPEN, arguments);
  },
  close: function close() {
    this.hide();
    this.fireEvent(BI.Popover.EVENT_CLOSE, arguments);
  },
  setZindex: function setZindex(zindex) {
    this.element.css({
      "z-index": zindex
    });
  }
});
BI.shortcut("bi.popover", BI.Popover);
BI.BarPopover = BI.inherit(BI.Popover, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.BarPopover.superclass._defaultConfig.apply(this, arguments), {
      btns: [BI.i18nText("BI-Basic_OK"), BI.i18nText("BI-Basic_Cancel")]
    });
  },
  beforeCreate: function beforeCreate() {
    var self = this;
    var o = this.options;
    o.footer || (o.footer = {
      type: "bi.right_vertical_adapt",
      lgap: 10,
      items: [{
        type: "bi.button",
        text: this.options.btns[1],
        value: 1,
        level: "ignore",
        handler: function handler(v) {
          self.fireEvent(BI.Popover.EVENT_CANCEL, v);
          self.close(v);
        }
      }, {
        type: "bi.button",
        text: this.options.btns[0],
        warningTitle: o.warningTitle,
        value: 0,
        handler: function handler(v) {
          self.fireEvent(BI.Popover.EVENT_CONFIRM, v);
          self.close(v);
        }
      }]
    });
  }
});
BI.shortcut("bi.bar_popover", BI.BarPopover);
BI.Popover.EVENT_CLOSE = "EVENT_CLOSE";
BI.Popover.EVENT_OPEN = "EVENT_OPEN";
BI.Popover.EVENT_CANCEL = "EVENT_CANCEL";
BI.Popover.EVENT_CONFIRM = "EVENT_CONFIRM";

/***/ }),
/* 380 */
/***/ (function(module, exports) {

/**
 * 下拉框弹出层, zIndex在1000w
 * @class BI.PopupView
 * @extends BI.Widget
 */
BI.PopupView = BI.inherit(BI.Widget, {
  _const: {
    TRIANGLE_LENGTH: 12
  },
  _defaultConfig: function _defaultConfig(props) {
    return BI.extend(BI.PopupView.superclass._defaultConfig.apply(this, arguments), {
      _baseCls: "bi-popup-view" + (props.primary ? " bi-primary" : ""),
      // 品牌色
      primary: false,
      maxWidth: "auto",
      minWidth: 100,
      // maxHeight: 200,
      minHeight: 24,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      vgap: 0,
      hgap: 0,
      innerVgap: 0,
      innerHgap: 0,
      showArrow: false,
      direction: BI.Direction.Top,
      // 工具栏的方向
      stopEvent: false,
      // 是否停止mousedown、mouseup事件
      stopPropagation: false,
      // 是否停止mousedown、mouseup向上冒泡
      logic: {
        dynamic: true
      },
      tool: false,
      // 自定义工具栏
      tabs: [],
      // 导航栏
      buttons: [],
      // toolbar栏
      el: {
        type: "bi.button_group",
        items: [],
        chooseType: 0,
        behaviors: {},
        layouts: [{
          type: "bi.vertical"
        }]
      }
    });
  },
  render: function render() {
    var self = this,
        o = this.options;

    function fn(e) {
      e.stopPropagation();
    }

    function stop(e) {
      e.stopEvent();
      return false;
    }

    this.element.css({
      "z-index": BI.zIndex_popup,
      "min-width": BI.pixFormat(o.minWidth),
      "max-width": BI.pixFormat(o.maxWidth)
    }).bind({
      click: fn
    });
    this.element.bind("mousewheel", fn);
    o.stopPropagation && this.element.bind({
      mousedown: fn,
      mouseup: fn,
      mouseover: fn
    });
    o.stopEvent && this.element.bind({
      mousedown: stop,
      mouseup: stop,
      mouseover: stop
    });
    this.tool = this._createTool();
    this.tab = this._createTab();
    this.view = this._createView();
    this.toolbar = this._createToolBar();
    this.view.on(BI.Controller.EVENT_CHANGE, function (type) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.PopupView.EVENT_CHANGE);
      }
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(o.direction), BI.extend({}, o.logic, {
      scrolly: false,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      vgap: o.vgap,
      hgap: o.hgap,
      items: BI.LogicFactory.createLogicItemsByDirection(o.direction, BI.extend({
        cls: "list-view-outer bi-card list-view-shadow" + (o.primary ? " bi-primary" : "")
      }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(o.direction), BI.extend({}, o.logic, {
        items: BI.LogicFactory.createLogicItemsByDirection(o.direction, this.tool, this.tab, this.view, this.toolbar)
      }))))
    }))));

    if (o.showArrow) {
      this.arrow = BI.createWidget({
        type: "bi.absolute",
        cls: "bi-bubble-arrow",
        items: [{
          type: "bi.layout",
          cls: "bubble-arrow"
        }]
      });
      this.arrowWrapper = BI.createWidget({
        type: "bi.absolute",
        cls: "bi-bubble-arrow-wrapper",
        items: [{
          el: this.arrow
        }]
      }); // 因为三角符号的原因位置变大了，需要占位

      this.placeholder = BI.createWidget({
        type: "bi.layout"
      });
      BI.createWidget({
        type: "bi.absolute",
        element: this,
        items: [{
          el: this.arrowWrapper,
          left: 0,
          top: 0
        }, {
          el: this.placeholder
        }]
      });
    }
  },
  _createView: function _createView() {
    var o = this.options;
    this.button_group = BI.createWidget(o.el, {
      type: "bi.button_group",
      value: o.value
    });
    this.button_group.element.css({
      "min-height": BI.pixFormat(o.minHeight),
      "padding-top": BI.pixFormat(o.innerVgap),
      "padding-bottom": BI.pixFormat(o.innerVgap),
      "padding-left": BI.pixFormat(o.innerHgap),
      "padding-right": BI.pixFormat(o.innerHgap)
    });
    return this.button_group;
  },
  _createTool: function _createTool() {
    var o = this.options;

    if (false === o.tool) {
      return;
    }

    return BI.createWidget(o.tool);
  },
  _createTab: function _createTab() {
    var o = this.options;

    if (o.tabs.length === 0) {
      return;
    }

    return BI.createWidget({
      type: "bi.center",
      cls: "list-view-tab",
      height: 25,
      items: o.tabs,
      value: o.value
    });
  },
  _createToolBar: function _createToolBar() {
    var o = this.options;

    if (o.buttons.length === 0) {
      return;
    }

    return BI.createWidget({
      type: "bi.center",
      cls: "list-view-toolbar bi-high-light bi-split-top",
      height: 24,
      items: BI.createItems(o.buttons, {
        once: false,
        shadow: true,
        isShadowShowingOnSelected: true
      })
    });
  },
  setDirection: function setDirection(direction, position) {
    var o = this.options;

    if (o.showArrow) {
      var style = {},
          wrapperStyle = {},
          placeholderStyle = {};
      var adjustXOffset = position.adjustXOffset || 0;
      var adjustYOffset = position.adjustYOffset || 0;

      var bodyBounds = BI.Widget._renderEngine.createElement("body").bounds();

      var bodyWidth = bodyBounds.width;
      var bodyHeight = bodyBounds.height;
      var popupWidth = this.element.outerWidth();
      var popupHeight = this.element.outerHeight();
      var offset = position.offset;
      var offsetStyle = position.offsetStyle;
      var middle = offsetStyle === "center" || offsetStyle === "middle";
      var minLeft = Math.max(4, offset.left + 4 + popupWidth - bodyWidth);
      var minRight = Math.max(4, popupWidth - (offset.left + 4));
      var minTop = Math.max(4, offset.top + 4 + popupHeight - bodyHeight);
      var minBottom = Math.max(4, popupHeight - (offset.top + 4));
      var maxLeft = Math.min(popupWidth - 16 - 4, offset.left + position.width - 16 - 4);
      var maxRight = Math.min(popupWidth - 16 - 4, bodyWidth - (offset.left + position.width - 16 - 4));
      var maxTop = Math.min(popupHeight - 16 - 4, offset.top + position.height - 16 - 4);
      var maxBottom = Math.min(popupHeight - 16 - 4, bodyHeight - (offset.top + position.height - 16 - 4));

      switch (direction) {
        case "bottom":
        case "bottom,right":
          direction = "bottom";
          style = {
            // 5表示留出一定的空间
            left: BI.clamp(((middle ? popupWidth : position.width) - adjustXOffset) / 2 - 8, minLeft, maxLeft)
          };
          wrapperStyle = {
            top: o.tgap + o.vgap,
            left: 0,
            right: "",
            bottom: ""
          };
          placeholderStyle = {
            left: 0,
            right: 0,
            height: this._const.TRIANGLE_LENGTH,
            top: -this._const.TRIANGLE_LENGTH,
            bottom: ""
          };
          break;

        case "bottom,left":
          direction = "bottom";
          style = {
            right: BI.clamp(((middle ? popupWidth : position.width) + adjustXOffset) / 2 - 8, minRight, maxRight)
          };
          wrapperStyle = {
            top: o.bgap + o.vgap,
            left: "",
            right: 0,
            bottom: ""
          };
          placeholderStyle = {
            left: 0,
            right: 0,
            height: this._const.TRIANGLE_LENGTH,
            top: -this._const.TRIANGLE_LENGTH,
            bottom: ""
          };
          break;

        case "top":
        case "top,right":
          direction = "top";
          style = {
            left: BI.clamp(((middle ? popupWidth : position.width) - adjustXOffset) / 2 - 8, minLeft, maxLeft)
          };
          wrapperStyle = {
            bottom: o.bgap + o.vgap,
            left: 0,
            right: "",
            top: ""
          };
          placeholderStyle = {
            left: 0,
            right: 0,
            height: this._const.TRIANGLE_LENGTH,
            top: "",
            bottom: -this._const.TRIANGLE_LENGTH
          };
          break;

        case "top,left":
          direction = "top";
          style = {
            right: BI.clamp(((middle ? popupWidth : position.width) + adjustXOffset) / 2 - 8, minRight, maxRight)
          };
          wrapperStyle = {
            bottom: o.bgap + o.vgap,
            right: 0,
            left: "",
            top: ""
          };
          placeholderStyle = {
            left: 0,
            right: 0,
            height: this._const.TRIANGLE_LENGTH,
            top: "",
            bottom: -this._const.TRIANGLE_LENGTH
          };
          break;

        case "left":
        case "left,bottom":
          direction = "left";
          style = {
            top: BI.clamp(((middle ? popupHeight : position.height) - adjustYOffset) / 2 - 8, minTop, maxTop)
          };
          wrapperStyle = {
            right: o.rgap + o.hgap,
            top: 0,
            bottom: "",
            left: ""
          };
          placeholderStyle = {
            top: 0,
            bottom: 0,
            width: this._const.TRIANGLE_LENGTH,
            right: -this._const.TRIANGLE_LENGTH,
            left: ""
          };
          break;

        case "left,top":
          direction = "left";
          style = {
            bottom: BI.clamp(((middle ? popupHeight : position.height) + adjustYOffset) / 2 - 8, minBottom, maxBottom)
          };
          wrapperStyle = {
            right: o.rgap + o.hgap,
            bottom: 0,
            top: "",
            left: ""
          };
          placeholderStyle = {
            top: 0,
            bottom: 0,
            width: this._const.TRIANGLE_LENGTH,
            right: -this._const.TRIANGLE_LENGTH,
            left: ""
          };
          break;

        case "right":
        case "right,bottom":
          direction = "right";
          style = {
            top: BI.clamp(((middle ? popupHeight : position.height) - adjustYOffset) / 2 - 8, minTop, maxTop)
          };
          wrapperStyle = {
            left: o.lgap + o.hgap,
            top: 0,
            bottom: "",
            right: ""
          };
          placeholderStyle = {
            top: 0,
            bottom: 0,
            width: this._const.TRIANGLE_LENGTH,
            left: -this._const.TRIANGLE_LENGTH,
            right: ""
          };
          break;

        case "right,top":
          direction = "right";
          style = {
            bottom: BI.clamp(((middle ? popupHeight : position.height) + adjustYOffset) / 2 - 8, minBottom, maxBottom)
          };
          wrapperStyle = {
            left: o.lgap + o.hgap,
            bottom: 0,
            top: "",
            right: ""
          };
          placeholderStyle = {
            top: 0,
            bottom: 0,
            width: this._const.TRIANGLE_LENGTH,
            left: -this._const.TRIANGLE_LENGTH,
            right: ""
          };
          break;

        case "right,innerRight":
          break;

        case "right,innerLeft":
          break;

        case "innerRight":
          break;

        case "innerLeft":
          break;

        default:
          break;
      }

      this.element.removeClass("left").removeClass("right").removeClass("top").removeClass("bottom").addClass(direction);
      this.arrow.element.css(style);
      this.arrowWrapper.element.css(wrapperStyle);
      this.placeholder.element.css(placeholderStyle);
    }
  },
  getView: function getView() {
    return this.view;
  },
  populate: function populate(items) {
    this.view.populate.apply(this.view, arguments);
  },
  resetWidth: function resetWidth(w) {
    this.options.width = w;
    this.element.width(w);
  },
  resetHeight: function resetHeight(h) {
    var tbHeight = this.toolbar ? this.toolbar.attr("height") || 24 : 0,
        tabHeight = this.tab ? this.tab.attr("height") || 24 : 0,
        toolHeight = (this.tool && this.tool.attr("height") || 24) * (this.tool && this.tool.isVisible() ? 1 : 0);
    var resetHeight = h - tbHeight - tabHeight - toolHeight - 2 * this.options.innerVgap;
    this.view.resetHeight ? this.view.resetHeight(resetHeight) : this.view.element.css({
      "max-height": BI.pixFormat(resetHeight)
    });
  },
  setValue: function setValue(selectedValues) {
    this.tab && this.tab.setValue(selectedValues);
    this.view.setValue(selectedValues);
  },
  getValue: function getValue() {
    return this.view.getValue();
  }
});
BI.PopupView.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.popup_view", BI.PopupView);

/***/ }),
/* 381 */
/***/ (function(module, exports) {

/**
 * 搜索面板
 *
 * Created by GUY on 2015/9/28.
 * @class BI.SearcherView
 * @extends BI.Pane
 */
BI.SearcherView = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SearcherView.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-searcher-view bi-card",
      tipText: BI.i18nText("BI-No_Select"),
      chooseType: BI.Selection.Single,
      matcher: {
        // 完全匹配的构造器
        type: "bi.button_group",
        behaviors: {
          redmark: function redmark() {
            return true;
          }
        },
        items: [],
        layouts: [{
          type: "bi.vertical"
        }]
      },
      searcher: {
        type: "bi.button_group",
        behaviors: {
          redmark: function redmark() {
            return true;
          }
        },
        items: [],
        layouts: [{
          type: "bi.vertical"
        }]
      }
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.matcher = BI.createWidget(o.matcher, {
      type: "bi.button_group",
      chooseType: o.chooseType,
      behaviors: {
        redmark: function redmark() {
          return true;
        }
      },
      layouts: [{
        type: "bi.vertical"
      }],
      value: o.value
    });
    this.matcher.on(BI.Controller.EVENT_CHANGE, function (type, val, ob) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.SearcherView.EVENT_CHANGE, val, ob);
      }
    });
    this.spliter = BI.createWidget({
      type: "bi.vertical",
      height: 1,
      hgap: 10,
      items: [{
        type: "bi.layout",
        height: 1,
        cls: "searcher-view-spliter bi-background"
      }]
    });
    this.searcher = BI.createWidget(o.searcher, {
      type: "bi.button_group",
      chooseType: o.chooseType,
      behaviors: {
        redmark: function redmark() {
          return true;
        }
      },
      layouts: [{
        type: "bi.vertical"
      }],
      value: o.value
    });
    this.searcher.on(BI.Controller.EVENT_CHANGE, function (type, val, ob) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.SearcherView.EVENT_CHANGE, val, ob);
      }
    });
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      items: [this.matcher, this.spliter, this.searcher]
    });
  },
  startSearch: function startSearch() {},
  stopSearch: function stopSearch() {},
  setValue: function setValue(v) {
    this.matcher.setValue(v);
    this.searcher.setValue(v);
  },
  getValue: function getValue() {
    return this.matcher.getValue().concat(this.searcher.getValue());
  },
  populate: function populate(searchResult, matchResult, keyword) {
    searchResult || (searchResult = []);
    matchResult || (matchResult = []);
    this.setTipVisible(searchResult.length + matchResult.length === 0);
    this.spliter.setVisible(BI.isNotEmptyArray(matchResult) && BI.isNotEmptyArray(searchResult));
    this.matcher.populate(matchResult, keyword);
    this.searcher.populate(searchResult, keyword);
  },
  empty: function empty() {
    this.searcher.empty();
    this.matcher.empty();
  },
  hasMatched: function hasMatched() {
    return this.matcher.getAllButtons().length > 0;
  }
});
BI.SearcherView.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.searcher_view", BI.SearcherView);

/***/ }),
/* 382 */
/***/ (function(module, exports) {

/**
 * guy
 * 这仅仅只是一个超类, 所有简单控件的基类
 * 1、类的控制，
 * 2、title的控制
 * 3、文字超过边界显示3个点
 * 4、cursor默认pointor
 * @class BI.Single
 * @extends BI.Widget
 * @abstract
 */
var delayingTooltips;
BI.Single = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.Single.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      readonly: false,
      title: null,
      warningTitle: null,
      // deprecated
      tipType: null,
      // deprecated  success或warning
      belowMouse: false,
      //  title是否跟随鼠标
      enableHover: false
    });
  },
  _showToolTip: function _showToolTip(e, opt) {
    var _this = this;

    opt || (opt = {});
    var self = this;
    var o = this.options;
    var title = this.getTitle();

    if (title instanceof Promise) {
      this.requestingTitle = title;
      title.then(function (resolvedTitle) {
        //  由于是异步的,所以无法避免Promise resolve时机问题,所以设计为:鼠标移出了则不显示,并且只显示最后一次发起的查询结果
        _this.mouseOver && _this.requestingTitle === title && showToolTip(_this._getTooltipOptions(resolvedTitle));
      });
    } else {
      showToolTip(this._getTooltipOptions(title));
    }

    function showToolTip(tooltipOpt) {
      if (BI.isKey(tooltipOpt.text) && !BI.Tooltips.has(self.getName())) {
        BI.Tooltips.show(e, self.getName(), tooltipOpt, self, opt);

        if (o.action) {
          BI.Actions.runAction(o.action, "hover", o, self);
        }

        BI.Actions.runGlobalAction("hover", o, self);
      }
    }
  },
  _hideTooltip: function _hideTooltip() {
    var self = this;
    var tooltip = BI.Tooltips.get(this.getName());

    if (BI.isNotNull(tooltip)) {
      tooltip.element.fadeOut(200, function () {
        BI.Tooltips.remove(self.getName());
      });
    }
  },
  _init: function _init() {
    var self = this,
        o = this.options;
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;

    BI.Single.superclass._init.apply(this, arguments);
  },
  _mounted: function _mounted() {
    var o = this.options;

    if (o.enableHover || BI.isKey(o.title) || BI.isKey(o.warningTitle) || BI.isFunction(o.title) || BI.isFunction(o.warningTitle)) {
      this.enableHover({
        belowMouse: o.belowMouse,
        container: o.container
      });
    }
  },
  _clearTimeOut: function _clearTimeOut() {
    if (BI.isNotNull(this.showTimeout)) {
      clearTimeout(this.showTimeout);
      this.showTimeout = null;
    }

    if (BI.isNotNull(this.hideTimeout)) {
      clearTimeout(this.hideTimeout);
      this.hideTimeout = null;
    }
  },
  _getTooltipOptions: function _getTooltipOptions(title) {
    var o = this.options;
    var tooltipOpt = {};

    if (BI.isPlainObject(title)) {
      tooltipOpt = title;
    } else {
      tooltipOpt.level = this.getTipType() || "success"; //  由于以前的用法,存在大量disabled:true搭配warningTitle的情况,所以这里做一个兼容,disabled:true的情况下,依然优先显示warningTitle,避免只设置了warningTitle而没有设置title的情况

      if (BI.isNull(o.tipType) && !this.isEnabled()) {
        tooltipOpt.text = this.getWarningTitle() || title;
      } else {
        tooltipOpt.text = tooltipOpt.level === "success" ? title : this.getWarningTitle() || title;
      }
    }

    return tooltipOpt;
  },
  enableHover: function enableHover(opt) {
    opt || (opt = {});
    var self = this;

    if (!this._hoverBinded) {
      this.element.unbind("mouseenter.title").on("mouseenter.title", function (e) {
        self._e = e;
        self.mouseOver = true;

        if (self.getTipType() === "warning" || BI.isKey(self.getWarningTitle()) && !self.isEnabled()) {
          delayingTooltips = self.getName();
          self.showTimeout = BI.delay(function () {
            if (BI.isNotNull(self.showTimeout) && delayingTooltips === self.getName()) {
              self._showToolTip(self._e || e, opt);
            }
          }, 200);
        } else if (self.getTipType() === "success" || self.isEnabled()) {
          delayingTooltips = self.getName();
          self.showTimeout = BI.delay(function () {
            if (BI.isNotNull(self.showTimeout) && delayingTooltips === self.getName()) {
              self._showToolTip(self._e || e, opt);
            }
          }, 500);
        }
      });
      this.element.unbind("mousemove.title").on("mousemove.title", function (e) {
        self._e = e;

        if (BI.isNotNull(self.showTimeout)) {
          clearTimeout(self.showTimeout);
          self.showTimeout = null;
        }

        if (BI.isNull(self.hideTimeout)) {
          self.hideTimeout = BI.delay(function () {
            if (BI.isNotNull(self.hideTimeout)) {
              self._hideTooltip();
            }
          }, 500);
        }

        self.showTimeout = BI.delay(function () {
          // DEC-5321 IE下如果回调已经进入事件队列，clearTimeout将不会起作用
          if (BI.isNotNull(self.showTimeout)) {
            if (BI.isNotNull(self.hideTimeout)) {
              clearTimeout(self.hideTimeout);
              self.hideTimeout = null;
            } // CHART-10611 在拖拽的情况下, 鼠标拖拽着元素离开了拖拽元素的容器，但是子元素在dom结构上仍然属于容器
            // 这样会认为鼠标仍然在容器中, 500ms内放开的话，会在容器之外显示鼠标停留处显示容器的title


            if (self.element.__isMouseInBounds__(self._e || e)) {
              self._showToolTip(self._e || e, opt);
            }
          }
        }, 500);
      });
      this.element.unbind("mouseleave.title").on("mouseleave.title", function (e) {
        self._e = null;
        self.mouseOver = false;

        self._clearTimeOut();

        self._hideTooltip();
      });
      this._hoverBinded = true;
    }
  },
  disabledHover: function disabledHover() {
    // 取消hover事件
    this._clearTimeOut();

    this._hideTooltip();

    this.element.unbind("mouseenter.title").unbind("mousemove.title").unbind("mouseleave.title");
    this._hoverBinded = false;
  },
  // opt: {container: '', belowMouse: false}
  setTitle: function setTitle(title, opt) {
    this.options.title = title;

    if (BI.isKey(title) || BI.isFunction(title)) {
      this.enableHover(opt);
    } else {
      this.disabledHover();
    }
  },
  setWarningTitle: function setWarningTitle(title, opt) {
    this.options.warningTitle = title;

    if (BI.isKey(title) || BI.isFunction(title)) {
      this.enableHover(opt);
    } else {
      this.disabledHover();
    }
  },
  setTipType: function setTipType(type) {
    this.options.tipType = type;
  },
  getTipType: function getTipType() {
    return this.options.tipType;
  },
  isReadOnly: function isReadOnly() {
    return !!this.options.readonly;
  },
  getTitle: function getTitle() {
    var title = this.options.title;

    if (BI.isFunction(title)) {
      return title();
    }

    return title;
  },
  getWarningTitle: function getWarningTitle() {
    var title = this.options.warningTitle;

    if (BI.isFunction(title)) {
      return title();
    }

    return title;
  },
  setValue: function setValue(val) {
    if (!this.options.readonly) {
      this.options.value = val;
      this.options.setValue && this.options.setValue(val);
    }
  },
  getValue: function getValue() {
    return this.options.value;
  },
  _destroyed: function _destroyed() {
    if (BI.isNotNull(this.showTimeout)) {
      clearTimeout(this.showTimeout);
      this.showTimeout = null;
    }

    BI.Tooltips.remove(this.getName());
  }
});
BI.shortcut("bi.single", BI.Single);

/***/ }),
/* 383 */
/***/ (function(module, exports) {

/**
 * guy 表示一行数据，通过position来定位位置的数据
 * @class BI.Text
 * @extends BI.Single
 */
!function () {
  BI.Text = BI.inherit(BI.Single, {
    props: {
      baseCls: "bi-text",
      textAlign: "left",
      whiteSpace: "normal",
      lineHeight: null,
      handler: null,
      // 如果传入handler,表示处理文字的点击事件，不是区域的
      hgap: 0,
      vgap: 0,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      py: "",
      highLight: false
    },
    render: function render() {
      var self = this,
          o = this.options;

      if (o.hgap + o.lgap > 0) {
        this.element.css({
          "padding-left": BI.pixFormat(o.hgap + o.lgap)
        });
      }

      if (o.hgap + o.rgap > 0) {
        this.element.css({
          "padding-right": BI.pixFormat(o.hgap + o.rgap)
        });
      }

      if (o.vgap + o.tgap > 0) {
        this.element.css({
          "padding-top": BI.pixFormat(o.vgap + o.tgap)
        });
      }

      if (o.vgap + o.bgap > 0) {
        this.element.css({
          "padding-bottom": BI.pixFormat(o.vgap + o.bgap)
        });
      }

      if (BI.isWidthOrHeight(o.height)) {
        this.element.css({
          lineHeight: BI.pixFormat(o.height)
        });
      }

      if (BI.isWidthOrHeight(o.lineHeight)) {
        this.element.css({
          lineHeight: BI.pixFormat(o.lineHeight)
        });
      }

      if (BI.isWidthOrHeight(o.maxWidth)) {
        this.element.css({
          maxWidth: BI.pixFormat(o.maxWidth)
        });
      }

      this.element.css({
        textAlign: o.textAlign,
        whiteSpace: this._getTextWrap(),
        textOverflow: o.whiteSpace === "nowrap" ? "ellipsis" : "",
        overflow: o.whiteSpace === "nowrap" ? "" : BI.isWidthOrHeight(o.height) ? "auto" : ""
      });

      if (o.handler && o.handler !== BI.emptyFn) {
        this.text = BI.createWidget({
          type: "bi.layout",
          tagName: "span"
        });
        this.text.element.click(function (e) {
          !o.disabled && !o.invalid && o.handler.call(self, self.getValue(), self, e);
        });
        BI.createWidget({
          type: "bi.default",
          element: this,
          items: [this.text]
        });
      } else {
        this.text = this;
      }

      var text = BI.isFunction(o.text) ? this.__watch(o.text, function (context, newValue) {
        self.setText(newValue);
      }) : o.text; // 只要不是undefined就可以显示text值，否则显示value

      if (!BI.isUndefined(text)) {
        this.setText(text);
      } else if (BI.isKey(o.value)) {
        this.setText(o.value);
      }

      if (BI.isKey(o.keyword)) {
        this.doRedMark(o.keyword);
      }

      if (o.highLight) {
        this.doHighLight();
      }
    },
    _getTextWrap: function _getTextWrap() {
      var o = this.options;

      switch (o.whiteSpace) {
        case "nowrap":
          return "pre";

        case "normal":
          return "pre-wrap";

        default:
          return o.whiteSpace;
      }
    },
    _getShowText: function _getShowText() {
      var o = this.options;
      var text = BI.isFunction(o.text) ? o.text() : o.text;
      return BI.isKey(text) ? BI.Text.formatText(text + "") : text;
    },
    _doRedMark: function _doRedMark(keyword) {
      var o = this.options; // render之后做的doRedMark,这个时候虽然标红了，但是之后text mounted执行的时候并没有keyword

      o.keyword = keyword;

      this.text.element.__textKeywordMarked__(this._getShowText(), keyword, o.py);
    },
    doRedMark: function doRedMark(keyword) {
      if (BI.isKey(keyword)) {
        this._doRedMark(keyword);
      }
    },
    unRedMark: function unRedMark() {
      var o = this.options;
      o.keyword = "";

      this.text.element.__textKeywordMarked__(this._getShowText(), "", o.py);
    },
    doHighLight: function doHighLight() {
      this.text.element.addClass("bi-high-light");
    },
    unHighLight: function unHighLight() {
      this.text.element.removeClass("bi-high-light");
    },
    setValue: function setValue(text) {
      BI.Text.superclass.setValue.apply(this, arguments);

      if (!this.isReadOnly()) {
        this.setText(text);
      }
    },
    setStyle: function setStyle(css) {
      this.text.element.css(css);
    },
    setText: function setText(text) {
      BI.Text.superclass.setText.apply(this, arguments);
      this.options.text = text;

      this._doRedMark(this.options.keyword);
    }
  });
  var formatters = [];

  BI.Text.addTextFormatter = function (formatter) {
    formatters.push(formatter);
  };

  BI.Text.formatText = function (text) {
    if (formatters.length > 0) {
      for (var i = 0, len = formatters.length; i < len; i++) {
        text = formatters[i](text);
      }
    }

    return text;
  };

  BI.shortcut("bi.text", BI.Text);
}();

/***/ }),
/* 384 */
/***/ (function(module, exports) {

/**
 * 超链接
 *
 * Created by GUY on 2015/9/9.
 * @class BI.A
 * @extends BI.Text
 * @abstract
 */
BI.A = BI.inherit(BI.Text, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.A.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-a display-block",
      href: "",
      target: "_blank",
      el: null,
      tagName: "a"
    });
  },
  render: function render() {
    var o = this.options;
    BI.A.superclass.render.apply(this, arguments);
    this.element.attr({
      href: o.href,
      target: o.target
    });

    if (o.el) {
      BI.createWidget(o.el, {
        element: this
      });
    }
  }
});
BI.shortcut("bi.a", BI.A);

/***/ }),
/* 385 */
/***/ (function(module, exports) {

/**
 * guy
 * 加载条
 * @type {*|void|Object}
 */
BI.LoadingBar = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.LoadingBar.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-loading-bar bi-tips",
      height: 30,
      handler: BI.emptyFn
    });
  },
  render: function render() {
    var self = this;
    this.loaded = BI.createWidget({
      type: "bi.text_button",
      cls: "loading-text bi-list-item-simple",
      text: BI.i18nText("BI-Load_More"),
      width: 120,
      handler: this.options.handler
    });
    this.loaded.on(BI.Controller.EVENT_CHANGE, function (type) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.loading = BI.createWidget({
      type: "bi.layout",
      width: this.options.height,
      height: this.options.height,
      cls: "loading-background cursor-default"
    });
    var loaded = BI.createWidget({
      type: "bi.center_adapt",
      items: [this.loaded]
    });
    var loading = BI.createWidget({
      type: "bi.center_adapt",
      items: [this.loading]
    });
    this.cardLayout = BI.createWidget({
      type: "bi.card",
      element: this,
      items: [{
        el: loaded,
        cardName: "loaded"
      }, {
        el: loading,
        cardName: "loading"
      }]
    });
    this.invisible();
  },
  _reset: function _reset() {
    this.visible();
    this.loaded.setText(BI.i18nText("BI-Load_More"));
    this.loaded.enable();
  },
  setLoaded: function setLoaded() {
    this._reset();

    this.cardLayout.showCardByName("loaded");
  },
  setEnd: function setEnd() {
    this.setLoaded();
    this.loaded.setText(BI.i18nText("BI-No_More_Data"));
    this.loaded.disable();
  },
  setLoading: function setLoading() {
    this._reset();

    this.cardLayout.showCardByName("loading");
  }
});
BI.shortcut("bi.loading_bar", BI.LoadingBar);

/***/ }),
/* 386 */
/***/ (function(module, exports) {

/**
 * guy
 * @class BI.BasicButton
 * @extends BI.Single
 *
 * 一般的button父级
 */
BI.BasicButton = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.BasicButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      _baseCls: (conf._baseCls || "") + " bi-basic-button" + (conf.invalid ? "" : " cursor-pointer") + (BI.isIE() && BI.getIEVersion() < 10 ? " hack" : ""),
      // el: {} // 可以通过el来创建button元素
      value: "",
      stopEvent: false,
      stopPropagation: false,
      selected: false,
      once: false,
      // 点击一次选中有效,再点无效
      forceSelected: false,
      // 点击即选中, 选中了就不会被取消,与once的区别是forceSelected不影响事件的触发
      forceNotSelected: false,
      // 无论怎么点击都不会被选中
      disableSelected: false,
      // 使能选中
      shadow: false,
      isShadowShowingOnSelected: false,
      // 选中状态下是否显示阴影
      trigger: null,
      handler: BI.emptyFn,
      bubble: null,
      debounce: true
    });
  },
  _init: function _init() {
    var self = this;
    var opts = this.options;
    opts.selected = BI.isFunction(opts.selected) ? this.__watch(opts.selected, function (context, newValue) {
      self.setSelected(newValue);
    }) : opts.selected;

    BI.BasicButton.superclass._init.apply(this, arguments);

    if (opts.shadow) {
      this._createShadow();
    }

    if (opts.level) {
      this.element.addClass("button-" + opts.level);
    }
  },
  _initRef: function _initRef() {
    var _this = this;

    if (this.options.selected === true) {
      this.setSelected(true);
    } // 延迟绑定事件，这样可以将自己绑定的事情优先执行


    BI.nextTick(function () {
      !_this.isDestroyed() && _this.bindEvent();
    });

    BI.BasicButton.superclass._initRef.apply(this, arguments);
  },
  // 默认render方法
  render: function render() {
    return this.options.el;
  },
  _createShadow: function _createShadow() {
    var self = this,
        o = this.options;

    function assertMask() {
      if (!self.$mask) {
        self.$mask = BI.createWidget(BI.isObject(o.shadow) ? o.shadow : {}, {
          type: "bi.layout",
          cls: "bi-button-mask"
        });
        self.$mask.invisible();
        BI.createWidget({
          type: "bi.absolute",
          element: self,
          items: [{
            el: self.$mask,
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
          }]
        });
      }
    }

    this.element.mouseup(function () {
      if (!self._hover && !o.isShadowShowingOnSelected) {
        assertMask();
        self.$mask.invisible();
      }
    });
    this.element.on("mouseenter." + this.getName(), function (e) {
      if (self.element.__isMouseInBounds__(e)) {
        if (self.isEnabled() && !self._hover && (o.isShadowShowingOnSelected || !self.isSelected())) {
          assertMask();
          self.$mask.visible();
        }
      }
    });
    this.element.on("mousemove." + this.getName(), function (e) {
      if (!self.element.__isMouseInBounds__(e)) {
        if (self.isEnabled() && !self._hover) {
          assertMask();
          self.$mask.invisible();
        }
      }
    });
    this.element.on("mouseleave." + this.getName(), function () {
      if (self.isEnabled() && !self._hover) {
        assertMask();
        self.$mask.invisible();
      }
    });
  },
  bindEvent: function bindEvent() {
    var self = this;
    var o = this.options,
        hand = this.handle();

    if (!hand) {
      return;
    }

    hand = hand.element;
    var triggerArr = (o.trigger || "").split(",");
    BI.each(triggerArr, function (idx, trigger) {
      switch (trigger) {
        case "mouseup":
          var mouseDown = false;
          hand.mousedown(function () {
            mouseDown = true;
          });
          hand.mouseup(function (e) {
            if (mouseDown === true) {
              clk(e);
            }

            mouseDown = false;
            ev(e);
          });
          break;

        case "mousedown":
          var mouseDown = false;
          var selected = false;
          hand.mousedown(function (e) {
            // if (e.button === 0) {
            BI.Widget._renderEngine.createElement(document).bind("mouseup." + self.getName(), function (e) {
              // if (e.button === 0) {
              if (BI.DOM.isExist(self) && !hand.__isMouseInBounds__(e) && mouseDown === true && !selected) {
                // self.setSelected(!self.isSelected());
                self._trigger();
              }

              mouseDown = false;

              BI.Widget._renderEngine.createElement(document).unbind("mouseup." + self.getName()); // }

            });

            if (mouseDown === true) {
              return;
            }

            if (self.isSelected()) {
              selected = true;
            } else {
              clk(e);
            }

            mouseDown = true;
            ev(e); // }
          });
          hand.mouseup(function (e) {
            // if (e.button === 0) {
            if (BI.DOM.isExist(self) && mouseDown === true && selected === true) {
              clk(e);
            }

            mouseDown = false;
            selected = false;

            BI.Widget._renderEngine.createElement(document).unbind("mouseup." + self.getName()); // }

          });
          break;

        case "dblclick":
          hand.dblclick(clk);
          break;

        case "lclick":
          var mouseDown = false;
          var interval;
          hand.mousedown(function (e) {
            BI.Widget._renderEngine.createElement(document).bind("mouseup." + self.getName(), function () {
              interval && clearInterval(interval);
              interval = null;
              mouseDown = false;

              BI.Widget._renderEngine.createElement(document).unbind("mouseup." + self.getName());
            });

            if (mouseDown === true) {
              return;
            }

            if (!self.isEnabled() || !self.isValid()) {
              return;
            }

            if (self.isOnce() && self.isSelected()) {
              return;
            }

            interval = setInterval(function () {
              clk(e);
            }, 180);
            mouseDown = true;
            ev(e);
          });
          break;

        default:
          if (o.stopEvent || o.stopPropagation) {
            hand.mousedown(function (e) {
              ev(e);
            });
          }

          hand.click(clk); // enter键等同于点击

          o.attributes && o.attributes.zIndex >= 0 && hand.keyup(function (e) {
            if (e.keyCode === BI.KeyCode.ENTER) {
              clk(e);
            }
          });
          break;
      }
    }); // 之后的300ms点击无效

    var onClick = o.debounce ? BI.debounce(this._doClick, BI.EVENT_RESPONSE_TIME, {
      "leading": true,
      "trailing": false
    }) : this._doClick;

    function ev(e) {
      if (o.stopEvent) {
        e.stopEvent();
      }

      if (o.stopPropagation) {
        e.stopPropagation();
      }
    }

    function clk(e) {
      ev(e);

      if (!self.isEnabled() || !self.isValid()) {
        return;
      }

      if (self.isOnce() && self.isSelected()) {
        return;
      }

      if (BI.isKey(o.bubble) || BI.isFunction(o.bubble)) {
        if (BI.isNull(self.combo)) {
          var popup;
          BI.createWidget({
            type: "bi.absolute",
            element: self,
            items: [{
              el: {
                type: "bi.bubble_combo",
                trigger: "",
                // bubble的提示不需要一直存在在界面上
                destroyWhenHide: true,
                ref: function ref() {
                  self.combo = this;
                },
                el: {
                  type: "bi.layout",
                  height: "100%"
                },
                popup: {
                  type: "bi.text_bubble_bar_popup_view",
                  text: getBubble(),
                  ref: function ref() {
                    popup = this;
                  },
                  listeners: [{
                    eventName: BI.BubblePopupBarView.EVENT_CLICK_TOOLBAR_BUTTON,
                    action: function action(v) {
                      self.combo.hideView();

                      if (v) {
                        onClick.apply(self, arguments);
                      }
                    }
                  }]
                },
                listeners: [{
                  eventName: BI.BubbleCombo.EVENT_BEFORE_POPUPVIEW,
                  action: function action() {
                    popup.populate(getBubble());
                  }
                }]
              },
              left: 0,
              right: 0,
              bottom: 0,
              top: 0
            }]
          });
        }

        if (self.combo.isViewVisible()) {
          self.combo.hideView();
        } else {
          self.combo.showView();
        }

        return;
      }

      onClick.apply(self, arguments);
    }

    function getBubble() {
      var bubble = self.options.bubble;

      if (BI.isFunction(bubble)) {
        return bubble();
      }

      return bubble;
    }
  },
  _trigger: function _trigger(e) {
    var o = this.options;

    if (!this.isEnabled()) {
      return;
    }

    if (!this.isDisableSelected()) {
      this.isForceSelected() ? this.setSelected(true) : this.isForceNotSelected() ? this.setSelected(false) : this.setSelected(!this.isSelected());
    }

    if (this.isValid()) {
      var v = this.getValue();
      o.handler.call(this, v, this, e);
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CLICK, v, this, e);
      this.fireEvent(BI.BasicButton.EVENT_CHANGE, v, this);

      if (o.action) {
        BI.Actions.runAction(o.action, "click", o, this);
      }

      BI.Actions.runGlobalAction("click", o, this);
    }
  },
  _doClick: function _doClick(e) {
    if (!this.isEnabled() || !this.isValid()) {
      return;
    }

    var isIntercepted = this.beforeClick(e); // 如果事件已经被消费掉了，就不再触发点击事件

    if (isIntercepted) {
      return;
    }

    this._trigger(e);

    if (this.isEnabled() && this.isValid()) {
      this.doClick(e);
    }
  },

  /**
   * 子类可以得写这个方法，如果返回为 true，则可以阻止 handler 的触发
   */
  beforeClick: function beforeClick() {},
  doClick: function doClick() {},
  handle: function handle() {
    return this;
  },
  hover: function hover() {
    this._hover = true;
    this.handle().element.addClass("hover");

    if (this.options.shadow) {
      this.$mask && this.$mask.setVisible(true);
    }
  },
  dishover: function dishover() {
    this._hover = false;
    this.handle().element.removeClass("hover");

    if (this.options.shadow) {
      this.$mask && this.$mask.setVisible(false);
    }
  },
  setSelected: function setSelected(b) {
    var o = this.options;
    o.selected = b;

    if (b) {
      this.handle().element.addClass("active");
    } else {
      this.handle().element.removeClass("active");
    }

    if (o.shadow && !o.isShadowShowingOnSelected) {
      this.$mask && this.$mask.setVisible(false);
    }

    this.options.setSelected && this.options.setSelected.call(this, b);
  },
  isSelected: function isSelected() {
    return this.options.selected;
  },
  isOnce: function isOnce() {
    return this.options.once;
  },
  isForceSelected: function isForceSelected() {
    return this.options.forceSelected;
  },
  isForceNotSelected: function isForceNotSelected() {
    return this.options.forceNotSelected;
  },
  isDisableSelected: function isDisableSelected() {
    return this.options.disableSelected;
  },
  setText: function setText(text) {
    this.options.text = text;
    this.options.setText && this.options.setText.call(this, text);
  },
  getText: function getText() {
    return this.options.text;
  },
  _setEnable: function _setEnable(enable) {
    BI.BasicButton.superclass._setEnable.apply(this, arguments);

    if (enable === true) {
      this.element.removeClass("base-disabled disabled");
    } else if (enable === false) {
      this.element.addClass("base-disabled disabled");
    }

    if (!enable) {
      if (this.options.shadow) {
        this.$mask && this.$mask.setVisible(false);
      }
    }
  },
  empty: function empty() {
    BI.Widget._renderEngine.createElement(document).unbind("mouseup." + this.getName());

    BI.BasicButton.superclass.empty.apply(this, arguments);
  }
});
BI.BasicButton.EVENT_CHANGE = "BasicButton.EVENT_CHANGE";
BI.shortcut("bi.basic_button", BI.BasicButton);

/***/ }),
/* 387 */
/***/ (function(module, exports) {

/**
 * 表示一个可以展开的节点, 不仅有选中状态而且有展开状态
 *
 * Created by GUY on 2015/9/9.
 * @class BI.NodeButton
 * @extends BI.BasicButton
 * @abstract
 */
BI.NodeButton = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.NodeButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      _baseCls: (conf._baseCls || "") + " bi-node",
      open: false,
      once: false
    });
  },
  _initRef: function _initRef() {
    if (this.isOpened()) {
      this.setOpened(this.isOpened());
    }

    BI.NodeButton.superclass._initRef.apply(this, arguments);
  },
  doClick: function doClick() {
    BI.NodeButton.superclass.doClick.apply(this, arguments);
    this.setOpened(!this.isOpened());
  },
  isOpened: function isOpened() {
    return !!this.options.open;
  },
  setOpened: function setOpened(b) {
    this.options.open = !!b;
  },
  triggerCollapse: function triggerCollapse() {
    if (this.isOpened()) {
      this.setOpened(false);
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.COLLAPSE, this.getValue(), this);
    }
  },
  triggerExpand: function triggerExpand() {
    if (!this.isOpened()) {
      this.setOpened(true);
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EXPAND, this.getValue(), this);
    }
  }
});
BI.shortcut("bi.node_button", BI.NodeButton);

/***/ }),
/* 388 */
/***/ (function(module, exports) {

/**
 * @class BI.IconButton
 * @extends BI.BasicButton
 * 图标的button
 */
BI.IconButton = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.IconButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      _baseCls: (conf._baseCls || "") + " bi-icon-button horizon-center",
      hgap: 0,
      vgap: 0,
      tgap: 0,
      bgap: 0,
      lgap: 0,
      rgap: 0,
      iconWidth: null,
      iconHeight: null
    });
  },
  render: function render() {
    var o = this.options;
    this.element.css({
      textAlign: "center"
    });
    this.icon = BI.createWidget({
      type: "bi.icon",
      width: o.iconWidth,
      height: o.iconHeight
    });

    if (BI.isNumber(o.height) && o.height > 0 && BI.isNull(o.iconWidth) && BI.isNull(o.iconHeight)) {
      this.element.css("lineHeight", BI.pixFormat(o.height));
      BI.createWidget({
        type: "bi.default",
        element: this,
        hgap: o.hgap,
        vgap: o.vgap,
        lgap: o.lgap,
        rgap: o.rgap,
        tgap: o.tgap,
        bgap: o.bgap,
        items: [this.icon]
      });
    } else {
      this.element.css("lineHeight", "1");
      BI.createWidget({
        element: this,
        type: "bi.center_adapt",
        hgap: o.hgap,
        vgap: o.vgap,
        lgap: o.lgap,
        rgap: o.rgap,
        tgap: o.tgap,
        bgap: o.bgap,
        items: [this.icon]
      });
    }
  },
  doClick: function doClick() {
    BI.IconButton.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.IconButton.EVENT_CHANGE, this);
    }
  }
});
BI.IconButton.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_button", BI.IconButton);

/***/ }),
/* 389 */
/***/ (function(module, exports) {

/**
 * 图片的button
 *
 * Created by GUY on 2016/1/27.
 * @class BI.ImageButton
 * @extends BI.BasicButton
 */
BI.ImageButton = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.ImageButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-image-button",
      src: "",
      iconWidth: "100%",
      iconHeight: "100%"
    });
  },
  render: function render() {
    var o = this.options;
    this.image = BI.createWidget({
      type: "bi.img",
      width: o.iconWidth,
      height: o.iconHeight,
      src: o.src
    });

    if (BI.isNumber(o.iconWidth) || BI.isNumber(o.iconHeight)) {
      BI.createWidget({
        type: "bi.center_adapt",
        element: this,
        items: [this.image]
      });
    } else {
      BI.createWidget({
        type: "bi.adaptive",
        element: this,
        items: [this.image],
        scrollable: false
      });
    }
  },
  setWidth: function setWidth(w) {
    BI.ImageButton.superclass.setWidth.apply(this, arguments);
    this.options.width = w;
  },
  setHeight: function setHeight(h) {
    BI.ImageButton.superclass.setHeight.apply(this, arguments);
    this.options.height = h;
  },
  setImageWidth: function setImageWidth(w) {
    this.image.setWidth(w);
  },
  setImageHeight: function setImageHeight(h) {
    this.image.setHeight(h);
  },
  getImageWidth: function getImageWidth() {
    return this.image.element.width();
  },
  getImageHeight: function getImageHeight() {
    return this.image.element.height();
  },
  setSrc: function setSrc(src) {
    this.options.src = src;
    this.image.setSrc(src);
  },
  getSrc: function getSrc() {
    return this.image.getSrc();
  },
  doClick: function doClick() {
    BI.ImageButton.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.ImageButton.EVENT_CHANGE, this);
    }
  }
});
BI.ImageButton.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.image_button", BI.ImageButton);

/***/ }),
/* 390 */
/***/ (function(module, exports) {

(function () {
  function isVertical(position) {
    return position === "top" || position === "bottom";
  }

  var loadingCls = "button-loading-font anim-rotate";
  /**
   * 文字类型的按钮
   * @class BI.Button
   * @extends BI.BasicButton
   *
   * @cfg {JSON} options 配置属性
   * @cfg {'common'/'success'/'warning'/'ignore'} [options.level='common'] 按钮类型，用不同颜色强调不同的场景
   */

  BI.Button = BI.inherit(BI.BasicButton, {
    _const: {
      iconWidth: 18
    },
    _defaultConfig: function _defaultConfig(props) {
      var conf = BI.Button.superclass._defaultConfig.apply(this, arguments);

      var adaptiveHeight = 0;

      if (isVertical(props.iconPosition)) {
        // 图标高度和文字高度默认相等
        adaptiveHeight += (props.textHeight || 16) * 2;
        adaptiveHeight += props.iconGap || 0;
        var tGap = props.tgap || props.vgap || 2;
        var bGap = props.bgap || props.vgap || 2;
        adaptiveHeight += tGap + bGap;
      }

      var clearMinWidth = props.block === true || props.clear === true || props.plain;
      return BI.extend(conf, {
        baseCls: (conf.baseCls || "") + " bi-button" + (BI.isIE() && BI.isIE9Below() ? " hack" : ""),
        attributes: {
          tabIndex: 1
        },
        minWidth: clearMinWidth ? 0 : 80,
        height: isVertical(props.iconPosition) ? adaptiveHeight : 24,
        shadow: props.clear !== true,
        isShadowShowingOnSelected: true,
        readonly: true,
        iconCls: "",
        level: "common",
        block: false,
        // 是否块状显示，即不显示边框，没有最小宽度的限制
        clear: false,
        // 是否去掉边框和背景
        ghost: false,
        // 是否幽灵显示, 即正常状态无背景
        loading: false,
        // 是否处于加载中
        light: false,
        // 是否使用浅色
        plain: false,
        // 是否是朴素按钮，和 clear 的区别是 plain 有悬浮效果
        textAlign: "center",
        whiteSpace: "nowrap",
        textWidth: null,
        textHeight: null,
        hgap: props.clear ? 0 : props.plain && !props.text ? 4 : 10,
        vgap: 0,
        tgap: 0,
        bgap: 0,
        lgap: 0,
        rgap: 0,
        icon: "",
        iconGap: 0,
        iconPosition: "left"
      });
    },
    render: function render() {
      var o = this.options,
          self = this; // bi.center_adapt 作用：让 hgap 不影响 iconGap。

      BI.createWidget({
        type: "bi.center_adapt",
        horizontalAlign: o.textAlign,
        element: this,
        ref: function ref(_ref) {
          self.containerRef = _ref;
        },
        hgap: o.hgap,
        vgap: o.vgap,
        items: self.generateItems()
      }); // 如果 options 对应的属性为 true 则给元素添加 class

      var classArr = ["block", "clear", "ghost", "plain", "loading", "light"];
      BI.each(classArr, function (_, clz) {
        if (BI.get(o, clz) === true) {
          self.element.addClass(clz);
        }
      });

      if (o.minWidth > 0) {
        this.element.css({
          "min-width": BI.pixFormat(o.minWidth)
        });
      }
    },
    generateItems: function generateItems(defaultRenderIcon) {
      var o = this.options; // 由于button默认情况下有个边框，所以要主动算行高

      var lineHeight,
          textHeight = o.textHeight;
      var hasBorder = false;

      if (BI.isNumber(o.height)) {
        if (!isVertical(o.iconPosition)) {
          if (!(o.clear && o.block && o.light)) {
            hasBorder = true;
          }

          lineHeight = o.height;
        } else {
          lineHeight = textHeight;
        }
      }

      if (!textHeight) {
        if (o.whiteSpace === "nowrap") {
          textHeight = lineHeight;
        }
      }

      var iconInvisible = !(o.loading || o.iconCls || o.icon || defaultRenderIcon);
      var textWidth = o.textWidth;

      if (BI.isNull(o.textWidth)) {
        textWidth = o.minWidth > 0 && o.width < o.minWidth ? o.minWidth : o.width;
        textWidth -= o.hgap * 2 + o.iconGap;
        textWidth -= iconInvisible || isVertical(o.iconPosition) ? 0 : this._const.iconWidth;
      }

      this.text = BI.createWidget({
        type: "bi.label",
        text: o.text,
        whiteSpace: o.whiteSpace,
        textAlign: o.textAlign,
        textWidth: textWidth,
        textHeight: BI.toPix(textHeight, hasBorder ? 2 : 0),
        height: BI.toPix(lineHeight, hasBorder ? 2 : 0),
        value: o.value,
        title: null
      });

      if (iconInvisible) {
        return [this.text];
      }

      this._iconRendered = true;

      if (BI.isPlainObject(o.icon) && !o.loading) {
        this.icon = BI.createWidget(o.icon);
      } else {
        this.icon = BI.createWidget({
          type: "bi.icon_label",
          cls: o.loading ? loadingCls : o.iconCls || o.icon,
          width: this._const.iconWidth,
          height: BI.toPix(lineHeight, hasBorder ? 2 : 0),
          lineHeight: BI.toPix(lineHeight, hasBorder ? 2 : 0),
          // 不设置，自定义按钮无法居中
          iconWidth: o.iconWidth,
          iconHeight: o.iconHeight,
          invisible: iconInvisible
        });
      }

      var gapContainer = {
        lgap: o.iconPosition === "left" && o.text ? o.iconGap : 0,
        rgap: o.iconPosition === "right" ? o.iconGap : 0,
        tgap: o.iconPosition === "top" ? o.iconGap : 0,
        bgap: o.iconPosition === "bottom" ? o.iconGap : 0
      };
      var items = [this.icon, BI.extend({
        el: this.text
      }, gapContainer)];

      if (o.iconPosition === "right" || o.iconPosition === "bottom") {
        items.reverse();
      }

      return [{
        type: isVertical(o.iconPosition) ? "bi.vertical" : "bi.horizontal",
        horizontalAlign: "center",
        verticalAlign: "middle",
        items: items
      }];
    },
    doClick: function doClick() {
      BI.Button.superclass.doClick.apply(this, arguments);

      if (this.isValid()) {
        this.fireEvent(BI.Button.EVENT_CHANGE, this);
      }
    },
    _setEnable: function _setEnable(enable) {
      BI.Button.superclass._setEnable.apply(this, arguments);

      if (enable === true) {
        this.element.attr("tabIndex", 1);
      } else if (enable === false) {
        this.element.removeAttr("tabIndex");
      }
    },
    beforeClick: function beforeClick() {
      return this.isLoading();
    },
    isLoading: function isLoading() {
      return this._loading === undefined ? this.options.loading : this._loading;
    },
    loading: function loading() {
      this._loading = true;
      this.element.addClass("loading");
      !this._iconRendered && this.containerRef.populate(this.generateItems(true));

      if (this.icon.loading) {
        this.icon.loading();
      } else {
        // loadingCls 可以覆盖 iconCls 所以不需要移除 iconCls
        this.icon.element.addClass(loadingCls);
        this.icon.setVisible(true);
      }
    },
    loaded: function loaded() {
      this._loading = false;
      this.element.removeClass("loading");

      if (this.icon.loaded) {
        this.icon.loaded();
      } else {
        this.icon.element.removeClass(loadingCls);
        this.icon.setVisible(!!this.options.iconCls);
      }
    },
    setText: function setText(text) {
      BI.Button.superclass.setText.apply(this, arguments);
      this.text.setText(text);
    },
    setValue: function setValue(text) {
      BI.Button.superclass.setValue.apply(this, arguments);

      if (!this.isReadOnly()) {
        this.text.setValue(text);
      }
    },
    setIcon: function setIcon(cls) {
      var o = this.options;
      !this._iconRendered && this.containerRef.populate(this.generateItems(true));

      if (this.icon && o.iconCls !== cls) {
        this.icon.element.removeClass(o.iconCls).addClass(cls);
        o.iconCls = cls;
      }
    },
    doRedMark: function doRedMark() {
      this.text.doRedMark.apply(this.text, arguments);
    },
    unRedMark: function unRedMark() {
      this.text.unRedMark.apply(this.text, arguments);
    },
    doHighLight: function doHighLight() {
      this.text.doHighLight.apply(this.text, arguments);
    },
    unHighLight: function unHighLight() {
      this.text.unHighLight.apply(this.text, arguments);
    }
  });
  BI.shortcut("bi.button", BI.Button);
  BI.Button.EVENT_CHANGE = "EVENT_CHANGE";
})();

/***/ }),
/* 391 */
/***/ (function(module, exports) {

/**
 * guy
 * 可以点击的一行文字
 * @class BI.TextButton
 * @extends BI.BasicButton
 * 文字button
 */
BI.TextButton = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.TextButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-text-button",
      textAlign: "center",
      whiteSpace: "nowrap",
      textWidth: null,
      textHeight: null,
      hgap: 0,
      lgap: 0,
      rgap: 0,
      vgap: 0,
      py: ""
    });
  },
  render: function render() {
    var o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      element: this,
      textAlign: o.textAlign,
      whiteSpace: o.whiteSpace,
      textWidth: o.textWidth,
      textHeight: o.textHeight,
      width: o.width,
      height: o.height,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
  },
  doClick: function doClick() {
    BI.TextButton.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.TextButton.EVENT_CHANGE, this.getValue(), this);
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  setText: function setText(text) {
    BI.TextButton.superclass.setText.apply(this, arguments);
    text = BI.isArray(text) ? text.join(",") : text;
    this.text.setText(text);
  },
  setStyle: function setStyle(style) {
    this.text.setStyle(style);
  },
  setValue: function setValue(text) {
    BI.TextButton.superclass.setValue.apply(this, arguments);

    if (!this.isReadOnly()) {
      text = BI.isArray(text) ? text.join(",") : text;
      this.text.setValue(text);
    }
  }
});
BI.TextButton.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.text_button", BI.TextButton);

/***/ }),
/* 392 */
/***/ (function(module, exports) {

/**
 * 带有一个占位
 *
 * Created by GUY on 2015/9/11.
 * @class BI.BlankIconIconTextItem
 * @extends BI.BasicButton
 */
BI.BlankIconIconTextItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.BlankIconIconTextItem.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-blank-icon-icon-text-item",
      iconCls1: "",
      iconCls2: "",
      blankWidth: 0,
      iconHeight: null,
      iconWidth: null,
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.blankWidth, o.leftIconWrapperWidth || o.height, o.rightIconWrapperWidth || o.height, "fill"],
      items: [{
        type: "bi.layout",
        width: o.blankWidth
      }, {
        type: "bi.icon_label",
        cls: o.iconCls1,
        width: o.leftIconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }, {
        type: "bi.icon_label",
        cls: o.iconCls2,
        width: o.rightIconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          textAlign: "left",
          hgap: o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          height: o.height
        }
      }]
    };
  },
  doClick: function doClick() {
    BI.BlankIconIconTextItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.BlankIconIconTextItem.EVENT_CHANGE, this.getValue(), this);
    }
  },
  setSelected: function setSelected(b) {
    BI.BlankIconIconTextItem.superclass.setSelected.apply(this, arguments);
    this.icon1.setSelected(b);
    this.icon2.setSelected(b);
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  }
});
BI.BlankIconIconTextItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.blank_icon_icon_text_item", BI.BlankIconIconTextItem);

/***/ }),
/* 393 */
/***/ (function(module, exports) {

/**
 * guy
 * 一个占位符和两个icon和一行数 组成的一行listitem
 *
 * Created by GUY on 2015/9/15.
 * @class BI.BlankIconTextIconItem
 * @extends BI.BasicButton
 */
BI.BlankIconTextIconItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.BlankIconTextIconItem.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-blank-icon-text-icon-item",
      iconCls1: "",
      iconCls2: "",
      blankWidth: 0,
      iconHeight: null,
      iconWidth: null,
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.blankWidth, o.leftIconWrapperWidth || o.height, "fill", o.rightIconWrapperWidth || o.height],
      items: [{
        type: "bi.layout",
        width: o.blankWidth
      }, {
        type: "bi.icon_label",
        cls: o.iconCls1,
        width: o.leftIconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          textAlign: "left",
          hgap: o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          height: o.height
        }
      }, {
        type: "bi.icon_label",
        cls: o.iconCls2,
        width: o.rightIconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }]
    };
  },
  doClick: function doClick() {
    BI.BlankIconTextIconItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.BlankIconTextIconItem.EVENT_CHANGE, this.getValue(), this);
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  }
});
BI.BlankIconTextIconItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.blank_icon_text_icon_item", BI.BlankIconTextIconItem);

/***/ }),
/* 394 */
/***/ (function(module, exports) {

/**
 * 带有一个占位
 *
 * Created by GUY on 2015/9/11.
 * @class BI.BlankIconTextItem
 * @extends BI.BasicButton
 */
BI.BlankIconTextItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.BlankIconTextItem.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-blank-icon-text-item",
      blankWidth: 0,
      iconHeight: null,
      iconWidth: null,
      iconCls: "",
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.blankWidth, o.iconWrapperWidth || o.height, "fill"],
      items: [{
        type: "bi.layout",
        width: o.blankWidth
      }, {
        type: "bi.icon_label",
        cls: o.iconCls,
        width: o.iconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          cls: "list-item-text",
          textAlign: "left",
          hgap: o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          height: o.height
        }
      }]
    };
  },
  doClick: function doClick() {
    BI.BlankIconTextItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.BlankIconTextItem.EVENT_CHANGE, this.getValue(), this);
    }
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  }
});
BI.BlankIconTextItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.blank_icon_text_item", BI.BlankIconTextItem);

/***/ }),
/* 395 */
/***/ (function(module, exports) {

/**
 * guy
 * 两个icon和一行数 组成的一行listitem
 *
 * Created by GUY on 2015/9/9.
 * @class BI.IconTextIconItem
 * @extends BI.BasicButton
 */
BI.IconTextIconItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.IconTextIconItem.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-icon-text-icon-item",
      iconCls1: "",
      iconCls2: "",
      iconHeight: null,
      iconWidth: null,
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.leftIconWrapperWidth || o.height, "fill", o.rightIconWrapperWidth || o.height],
      items: [{
        type: "bi.icon_label",
        cls: o.iconCls1,
        width: o.leftIconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          textAlign: "left",
          hgap: o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          height: o.height
        }
      }, {
        type: "bi.icon_label",
        cls: o.iconCls2,
        width: o.rightIconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }]
    };
  },
  doClick: function doClick() {
    BI.IconTextIconItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.IconTextIconItem.EVENT_CHANGE, this.getValue(), this);
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  }
});
BI.IconTextIconItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_text_icon_item", BI.IconTextIconItem);

/***/ }),
/* 396 */
/***/ (function(module, exports) {

/**
 * guy
 *
 * Created by GUY on 2015/9/9.
 * @class BI.IconTextItem
 * @extends BI.BasicButton
 */
BI.IconTextItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.IconTextItem.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-icon-text-item",
      direction: BI.Direction.Left,
      iconWrapperWidth: null,
      iconHeight: null,
      iconWidth: null,
      iconCls: "",
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.iconWrapperWidth || o.height, "fill"],
      items: [{
        type: "bi.icon_label",
        cls: o.iconCls,
        width: o.iconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          cls: "list-item-text",
          textAlign: "left",
          hgap: o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          height: o.height
        }
      }]
    };
  },
  doClick: function doClick() {
    BI.IconTextItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.IconTextItem.EVENT_CHANGE, this.getValue(), this);
    }
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  }
});
BI.IconTextItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_text_item", BI.IconTextItem);

/***/ }),
/* 397 */
/***/ (function(module, exports) {

/**
 *
 * 图标的button
 *
 * Created by GUY on 2015/9/9.
 * @class BI.TextIconItem
 * @extends BI.BasicButton
 */
BI.TextIconItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.TextIconItem.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-text-icon-item",
      iconWrapperWidth: null,
      iconHeight: null,
      iconWidth: null,
      iconCls: "",
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: ["fill", o.iconWrapperWidth || o.height],
      items: [{
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          cls: "list-item-text",
          textAlign: "left",
          hgap: o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          height: o.height
        }
      }, {
        type: "bi.icon_label",
        cls: o.iconCls,
        width: o.iconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }]
    };
  },
  doClick: function doClick() {
    BI.TextIconItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.TextIconItem.EVENT_CHANGE, this.getValue(), this);
    }
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  }
});
BI.TextIconItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.text_icon_item", BI.TextIconItem);

/***/ }),
/* 398 */
/***/ (function(module, exports) {

/**
 * guy
 * 一个button和一行数 组成的一行listitem
 *
 * Created by GUY on 2015/9/9.
 * @class BI.TextItem
 * @extends BI.BasicButton
 */
BI.TextItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.TextItem.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-text-item",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      element: this,
      textAlign: o.textAlign,
      whiteSpace: o.whiteSpace,
      textHeight: o.whiteSpace === "nowrap" ? o.height : o.textHeight,
      height: o.height,
      hgap: o.textHgap,
      vgap: o.textVgap,
      lgap: o.textLgap,
      rgap: o.textRgap,
      text: o.text,
      value: o.value,
      keyword: o.keyword,
      py: o.py
    });
  },
  doClick: function doClick() {
    BI.TextItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.TextItem.EVENT_CHANGE, this.getValue(), this);
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  }
});
BI.TextItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.text_item", BI.TextItem);

/***/ }),
/* 399 */
/***/ (function(module, exports) {

/**
 * guy
 * Created by GUY on 2015/9/9.
 * @class BI.IconTextIconNode
 * @extends BI.NodeButton
 */
BI.IconTextIconNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.IconTextIconNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-icon-text-icon-node",
      iconCls1: "close-ha-font",
      iconCls2: "close-ha-font",
      iconHeight: null,
      iconWidth: null,
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.leftIconWrapperWidth || o.height, "fill", o.rightIconWrapperWidth || o.height],
      items: [{
        type: "bi.icon_label",
        cls: o.iconCls1,
        width: o.leftIconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          textAlign: "left",
          hgap: o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          height: o.height
        }
      }, {
        type: "bi.icon_label",
        cls: o.iconCls2,
        width: o.rightIconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }]
    };
  },
  doClick: function doClick() {
    BI.IconTextIconNode.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.IconTextIconNode.EVENT_CHANGE, this.getValue(), this);
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  }
});
BI.IconTextIconNode.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_text_icon_node", BI.IconTextIconNode);

/***/ }),
/* 400 */
/***/ (function(module, exports) {

/**
 * guy
 * Created by GUY on 2015/9/9.
 * @class BI.IconTextNode
 * @extends BI.NodeButton
 */
BI.IconTextNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.IconTextNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-icon-text-node",
      cls: "close-ha-font",
      iconHeight: null,
      iconWidth: null,
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.iconWrapperWidth || o.height, "fill"],
      items: [{
        type: "bi.icon_label",
        cls: o.iconCls,
        width: o.iconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          cls: "list-item-text",
          textAlign: "left",
          hgap: o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          height: o.height
        }
      }]
    };
  },
  doClick: function doClick() {
    BI.IconTextNode.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.IconTextNode.EVENT_CHANGE, this.getValue(), this);
    }
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  }
});
BI.IconTextNode.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_text_node", BI.IconTextNode);

/***/ }),
/* 401 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/9/9.
 * @class BI.TextIconNode
 * @extends BI.NodeButton
 */
BI.TextIconNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.TextIconNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-text-icon-node",
      cls: "close-ha-font",
      iconHeight: null,
      iconWidth: null,
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: ["fill", o.iconWrapperWidth || o.height],
      items: [{
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          cls: "list-item-text",
          textAlign: "left",
          hgap: o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          height: o.height
        }
      }, {
        type: "bi.icon_label",
        cls: o.iconCls,
        width: o.iconWrapperWidth || o.height,
        height: o.height,
        iconWidth: o.iconWidth,
        iconHeight: o.iconHeight
      }]
    };
  },
  doClick: function doClick() {
    BI.TextIconNode.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.TextIconNode.EVENT_CHANGE, this.getValue(), this);
    }
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  }
});
BI.TextIconNode.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.text_icon_node", BI.TextIconNode);

/***/ }),
/* 402 */
/***/ (function(module, exports) {

/**
 * guy
 *
 * Created by GUY on 2015/9/9.
 * @class BI.TextNode
 * @extends BI.NodeButton
 */
BI.TextNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.TextNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-text-node",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  render: function render() {
    var o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      element: this,
      textAlign: o.textAlign,
      whiteSpace: o.whiteSpace,
      textHeight: o.whiteSpace === "nowrap" ? o.height : o.textHeight,
      height: o.height,
      hgap: o.textHgap,
      vgap: o.textVgap,
      lgap: o.textLgap,
      rgap: o.textRgap,
      text: o.text,
      value: o.value,
      keyword: o.keyword,
      py: o.py
    });
  },
  doClick: function doClick() {
    BI.TextNode.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.TextNode.EVENT_CHANGE, this.getValue(), this);
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  }
});
BI.TextNode.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.text_node", BI.TextNode);

/***/ }),
/* 403 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/4/15.
 * @class BI.Editor
 * @extends BI.Single
 */
BI.Editor = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.Editor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-editor bi-focus-shadow",
      hgap: 4,
      vgap: 2,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      // title,warningTitle这两个属性没用
      tipType: "warning",
      inputType: "text",
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      allowBlank: false,
      watermark: "",
      errorText: ""
    });
  },
  render: function render() {
    var self = this,
        o = this.options; // 密码输入框设置autocomplete="new-password"的情况下Firefox和chrome不会自动填充密码

    var autocomplete = o.autocomplete ? " autocomplete=" + o.autocomplete : "";
    this.editor = this.addWidget(BI.createWidget({
      type: "bi.input",
      element: "<input type='" + o.inputType + "'" + autocomplete + " />",
      root: true,
      value: o.value,
      watermark: o.watermark,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      allowBlank: o.allowBlank
    }));
    this.editor.element.css({
      width: "100%",
      height: "100%",
      border: "none",
      outline: "none",
      padding: "0",
      margin: "0"
    });
    var items = [{
      el: {
        type: "bi.absolute",
        ref: function ref(_ref) {
          self.contentWrapper = _ref;
        },
        items: [{
          el: this.editor,
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }]
      },
      left: o.hgap + o.lgap,
      right: o.hgap + o.rgap,
      top: o.vgap + o.tgap,
      bottom: o.vgap + o.bgap
    }];
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: items
    });
    this.setWaterMark(this.options.watermark);
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Input.EVENT_FOCUS, function () {
      self._checkError();

      self.element.addClass("bi-editor-focus");
      self.fireEvent(BI.Editor.EVENT_FOCUS, arguments);
    });
    this.editor.on(BI.Input.EVENT_BLUR, function () {
      self._setErrorVisible(false);

      self.element.removeClass("bi-editor-focus");
      self.fireEvent(BI.Editor.EVENT_BLUR, arguments);
    });
    this.editor.on(BI.Input.EVENT_CLICK, function () {
      self.fireEvent(BI.Editor.EVENT_CLICK, arguments);
    });
    this.editor.on(BI.Input.EVENT_CHANGE, function () {
      self.fireEvent(BI.Editor.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Input.EVENT_KEY_DOWN, function (v) {
      self.fireEvent(BI.Editor.EVENT_KEY_DOWN, arguments);
    });
    this.editor.on(BI.Input.EVENT_QUICK_DOWN, function (e) {
      // tab键就不要隐藏了
      if (e.keyCode !== BI.KeyCode.TAB && self.watermark) {
        self.watermark.invisible();
      }
    });
    this.editor.on(BI.Input.EVENT_VALID, function () {
      self._checkWaterMark();

      self._setErrorVisible(false);

      self.element.removeClass("error");
      self.fireEvent(BI.Editor.EVENT_VALID, arguments);
    });
    this.editor.on(BI.Input.EVENT_ERROR, function () {
      self._checkWaterMark();

      self.fireEvent(BI.Editor.EVENT_ERROR, arguments);

      self._setErrorVisible(self.isEditing());

      self.element.addClass("error");
    });
    this.editor.on(BI.Input.EVENT_RESTRICT, function () {
      self._checkWaterMark();

      var tip = self._setErrorVisible(true);

      tip && tip.element.fadeOut(100, function () {
        tip.element.fadeIn(100);
      });
      self.fireEvent(BI.Editor.EVENT_RESTRICT, arguments);
    });
    this.editor.on(BI.Input.EVENT_EMPTY, function () {
      self._checkWaterMark();

      self.fireEvent(BI.Editor.EVENT_EMPTY, arguments);
    });
    this.editor.on(BI.Input.EVENT_ENTER, function () {
      self.fireEvent(BI.Editor.EVENT_ENTER, arguments);
    });
    this.editor.on(BI.Input.EVENT_SPACE, function () {
      self.fireEvent(BI.Editor.EVENT_SPACE, arguments);
    });
    this.editor.on(BI.Input.EVENT_BACKSPACE, function () {
      self.fireEvent(BI.Editor.EVENT_BACKSPACE, arguments);
    });
    this.editor.on(BI.Input.EVENT_REMOVE, function () {
      self.fireEvent(BI.Editor.EVENT_REMOVE, arguments);
    });
    this.editor.on(BI.Input.EVENT_START, function () {
      self.fireEvent(BI.Editor.EVENT_START, arguments);
    });
    this.editor.on(BI.Input.EVENT_PAUSE, function () {
      self.fireEvent(BI.Editor.EVENT_PAUSE, arguments);
    });
    this.editor.on(BI.Input.EVENT_STOP, function () {
      self.fireEvent(BI.Editor.EVENT_STOP, arguments);
    });
    this.editor.on(BI.Input.EVENT_CONFIRM, function () {
      self.fireEvent(BI.Editor.EVENT_CONFIRM, arguments);
    });
    this.editor.on(BI.Input.EVENT_CHANGE_CONFIRM, function () {
      self.fireEvent(BI.Editor.EVENT_CHANGE_CONFIRM, arguments);
    });
    this.element.click(function (e) {
      e.stopPropagation();
      return false;
    });

    if (BI.isKey(this.options.value) || BI.isEmptyString(this.options.value)) {
      this._checkError();

      this._checkWaterMark();
    } else {
      this._checkWaterMark();
    }
  },
  _checkToolTip: function _checkToolTip() {
    var o = this.options;
    var errorText = o.errorText;

    if (BI.isFunction(errorText)) {
      errorText = errorText(this.editor.getValue());
    }

    if (BI.isKey(errorText)) {
      if (!this.isEnabled() || this.isValid() || BI.Bubbles.has(this.getName())) {
        this.setTitle("");
      } else {
        this.setTitle(errorText);
      }
    }
  },
  _assertWaterMark: function _assertWaterMark() {
    var self = this,
        o = this.options;

    if (BI.isNull(this.watermark)) {
      this.watermark = BI.createWidget({
        type: "bi.label",
        cls: "bi-water-mark",
        text: this.options.watermark,
        height: o.height - 2 * o.vgap - o.tgap,
        hgap: 2,
        whiteSpace: "nowrap",
        textAlign: "left"
      });
      this.watermark.element.bind({
        mousedown: function mousedown(e) {
          if (self.isEnabled()) {
            self.editor.isEditing() || self.editor.focus();
          } else {
            self.editor.isEditing() && self.editor.blur();
          }

          e.stopEvent();
        }
      });
      this.watermark.element.bind("click", function (e) {
        if (self.isEnabled()) {
          self.editor.isEditing() || self.editor.focus();
        } else {
          self.editor.isEditing() && self.editor.blur();
        }

        e.stopEvent();
      });
    }
  },
  _checkError: function _checkError() {
    this._setErrorVisible(this.isEnabled() && !this.isValid());

    this._checkToolTip();
  },
  _checkWaterMark: function _checkWaterMark() {
    var o = this.options;

    if (!this.disabledWaterMark && this.editor.getValue() === "" && BI.isKey(o.watermark)) {
      this.watermark && this.watermark.visible();
    } else {
      this.watermark && this.watermark.invisible();
    }
  },
  setErrorText: function setErrorText(text) {
    this.options.errorText = text;
  },
  getErrorText: function getErrorText() {
    return this.options.errorText;
  },
  setWaterMark: function setWaterMark(v) {
    this.options.watermark = v;

    if (BI.isNull(this.watermark)) {
      this._assertWaterMark();

      BI.createWidget({
        type: "bi.absolute",
        element: this.contentWrapper,
        items: [{
          el: this.watermark,
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }]
      });
    }

    this.watermark.setText(v);

    this._checkWaterMark();
  },
  _setErrorVisible: function _setErrorVisible(b) {
    var o = this.options;
    var errorText = o.errorText;

    if (BI.isFunction(errorText)) {
      errorText = errorText(BI.trim(this.editor.getValue()));
    }

    if (!this.disabledError && BI.isKey(errorText)) {
      BI.Bubbles[b ? "show" : "hide"](this.getName(), errorText, this, {
        adjustYOffset: o.simple ? 1 : 2
      });

      this._checkToolTip();
    }
  },
  disableError: function disableError() {
    this.disabledError = true;

    this._checkError();
  },
  enableError: function enableError() {
    this.disabledError = false;

    this._checkError();
  },
  disableWaterMark: function disableWaterMark() {
    this.disabledWaterMark = true;

    this._checkWaterMark();
  },
  enableWaterMark: function enableWaterMark() {
    this.disabledWaterMark = false;

    this._checkWaterMark();
  },
  focus: function focus() {
    this.element.addClass("text-editor-focus");
    this.editor.focus();
  },
  blur: function blur() {
    this.element.removeClass("text-editor-focus");
    this.editor.blur();
  },
  selectAll: function selectAll() {
    this.editor.selectAll();
  },
  onKeyDown: function onKeyDown(k) {
    this.editor.onKeyDown(k);
  },
  setValue: function setValue(v) {
    BI.Editor.superclass.setValue.apply(this, arguments);
    this.editor.setValue(v);

    this._checkError();

    this._checkWaterMark();
  },
  getLastValidValue: function getLastValidValue() {
    return this.editor.getLastValidValue();
  },
  getLastChangedValue: function getLastChangedValue() {
    return this.editor.getLastChangedValue();
  },
  getValue: function getValue() {
    if (!this.isValid()) {
      return BI.trim(this.editor.getLastValidValue());
    }

    return BI.trim(this.editor.getValue());
  },
  isEditing: function isEditing() {
    return this.editor.isEditing();
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  destroyed: function destroyed() {
    BI.Bubbles.remove(this.getName());
  }
});
BI.Editor.EVENT_CHANGE = "EVENT_CHANGE";
BI.Editor.EVENT_FOCUS = "EVENT_FOCUS";
BI.Editor.EVENT_BLUR = "EVENT_BLUR";
BI.Editor.EVENT_CLICK = "EVENT_CLICK";
BI.Editor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.Editor.EVENT_SPACE = "EVENT_SPACE";
BI.Editor.EVENT_BACKSPACE = "EVENT_BACKSPACE";
BI.Editor.EVENT_START = "EVENT_START";
BI.Editor.EVENT_PAUSE = "EVENT_PAUSE";
BI.Editor.EVENT_STOP = "EVENT_STOP";
BI.Editor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.Editor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.Editor.EVENT_VALID = "EVENT_VALID";
BI.Editor.EVENT_ERROR = "EVENT_ERROR";
BI.Editor.EVENT_ENTER = "EVENT_ENTER";
BI.Editor.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.Editor.EVENT_REMOVE = "EVENT_REMOVE";
BI.Editor.EVENT_EMPTY = "EVENT_EMPTY";
BI.shortcut("bi.editor", BI.Editor);

/***/ }),
/* 404 */
/***/ (function(module, exports) {

/**
 * 多文件
 *
 * Created by GUY on 2016/4/13.
 * @class BI.MultifileEditor
 * @extends BI.Single
 * @abstract
 */
BI.MultifileEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultifileEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-multifile-editor",
      multiple: false,
      maxSize: -1,
      // 1024 * 1024
      accept: "",
      url: ""
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.file = BI.createWidget({
      type: "bi.file",
      cls: "multifile-editor",
      width: "100%",
      height: "100%",
      name: o.name,
      url: o.url,
      multiple: o.multiple,
      accept: o.accept,
      maxSize: o.maxSize,
      maxLength: o.maxLength,
      title: o.title,
      errorText: o.errorText
    });
    this.file.on(BI.File.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultifileEditor.EVENT_CHANGE, arguments);
    });
    this.file.on(BI.File.EVENT_UPLOADSTART, function () {
      self.fireEvent(BI.MultifileEditor.EVENT_UPLOADSTART, arguments);
    });
    this.file.on(BI.File.EVENT_ERROR, function () {
      self.fireEvent(BI.MultifileEditor.EVENT_ERROR, arguments);
    });
    this.file.on(BI.File.EVENT_PROGRESS, function () {
      self.fireEvent(BI.MultifileEditor.EVENT_PROGRESS, arguments);
    });
    this.file.on(BI.File.EVENT_UPLOADED, function () {
      self.fireEvent(BI.MultifileEditor.EVENT_UPLOADED, arguments);
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.adaptive",
          scrollable: false,
          items: [this.file]
        },
        top: 0,
        right: 0,
        left: 0,
        bottom: 0
      }]
    });
  },
  _reset: function _reset() {
    this.file.reset();
  },
  setUrl: function setUrl(v) {
    this.file.setUrl(v);
  },
  setMaxFileLength: function setMaxFileLength(v) {
    this.file.setMaxFileLength(v);
  },
  select: function select() {
    this.file.select();
  },
  getQueue: function getQueue() {
    return this.file.getQueue();
  },
  getValue: function getValue() {
    return this.file.getValue();
  },
  upload: function upload() {
    this._reset();

    this.file.upload();
  },
  sendFiles: function sendFiles(files) {
    this._reset();

    this.file.sendFiles(files);
  },
  reset: function reset() {
    this._reset();
  }
});
BI.MultifileEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultifileEditor.EVENT_UPLOADSTART = "EVENT_UPLOADSTART";
BI.MultifileEditor.EVENT_ERROR = "EVENT_ERROR";
BI.MultifileEditor.EVENT_PROGRESS = "EVENT_PROGRESS";
BI.MultifileEditor.EVENT_UPLOADED = "EVENT_UPLOADED";
BI.shortcut("bi.multifile_editor", BI.MultifileEditor);

/***/ }),
/* 405 */
/***/ (function(module, exports) {

/**
 *
 * Created by GUY on 2016/1/18.
 * @class BI.TextAreaEditor
 * @extends BI.Single
 */
BI.TextAreaEditor = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig(conf) {
    return BI.extend(BI.TextAreaEditor.superclass._defaultConfig.apply(), {
      baseCls: "bi-textarea-editor",
      value: "",
      errorText: "",
      adjustYOffset: conf.simple ? 0 : 2,
      adjustXOffset: 0,
      offsetStyle: "left",
      validationChecker: function validationChecker() {
        return true;
      },
      scrolly: true
    });
  },
  render: function render() {
    var o = this.options,
        self = this;
    this.content = BI.createWidget({
      type: "bi.layout",
      tagName: "textarea",
      width: "100%",
      height: "100%",
      cls: "bi-textarea textarea-editor-content display-block",
      css: o.scrolly ? null : {
        overflowY: "hidden"
      }
    });
    this.content.element.css({
      resize: "none"
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.adaptive",
          items: [this.content]
        },
        left: 4,
        right: 4,
        top: 2,
        bottom: 2
      }]
    });
    this.content.element.on("input propertychange", function (e) {
      self._checkError();

      self._checkWaterMark();

      self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CHANGE, self.getValue(), self);
      self.fireEvent(BI.TextAreaEditor.EVENT_CHANGE);

      if (BI.isEmptyString(self.getValue())) {
        self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EMPTY, self.getValue(), self);
      }
    });
    this.content.element.focus(function () {
      self._checkError();

      self._focus();

      self.fireEvent(BI.TextAreaEditor.EVENT_FOCUS);

      BI.Widget._renderEngine.createElement(document).bind("mousedown." + self.getName(), function (e) {
        if (BI.DOM.isExist(self) && !self.element.__isMouseInBounds__(e)) {
          BI.Widget._renderEngine.createElement(document).unbind("mousedown." + self.getName());

          self.content.element.blur();
        }
      });
    });
    this.content.element.blur(function () {
      self._setErrorVisible(false);

      self._blur();

      if (!self._isError()) {
        self.fireEvent(BI.TextAreaEditor.EVENT_CONFIRM);
      }

      self.fireEvent(BI.TextAreaEditor.EVENT_BLUR);

      BI.Widget._renderEngine.createElement(document).unbind("mousedown." + self.getName());
    });
    this.content.element.keydown(function () {
      // 水印快速消失
      self._checkWaterMark();
    });
    this.content.element.keyup(function (e) {
      self.fireEvent(BI.TextAreaEditor.EVENT_KEY_DOWN, e.keyCode);
    });
    this.content.element.click(function (e) {
      e.stopPropagation();
    });

    if (BI.isKey(o.value)) {
      this.setValue(o.value);
    }

    if (BI.isNotNull(o.style)) {
      this.setStyle(o.style);
    }

    this._checkWaterMark();
  },
  _checkWaterMark: function _checkWaterMark() {
    var self = this,
        o = this.options;
    var val = this.getValue();

    if (BI.isNotEmptyString(val)) {
      this.watermark && this.watermark.destroy();
      this.watermark = null;
    } else {
      if (BI.isNotEmptyString(o.watermark)) {
        if (!this.watermark) {
          this.watermark = BI.createWidget({
            type: "bi.label",
            cls: "bi-water-mark textarea-watermark",
            textAlign: "left",
            whiteSpace: o.scrolly ? "normal" : "nowrap",
            text: o.watermark,
            invalid: o.invalid,
            disabled: o.disabled,
            hgap: 6,
            vgap: o.height > 24 ? 4 : 2,
            height: o.height > 24 ? "" : o.height
          });
          this.watermark.element.bind({
            mousedown: function mousedown(e) {
              if (self.isEnabled()) {
                self.focus();
              } else {
                self.blur();
              }

              e.stopEvent();
            },
            click: function click(e) {
              e.stopPropagation();
            }
          });
          BI.createWidget({
            type: "bi.absolute",
            element: this,
            items: [{
              el: this.watermark,
              left: 0,
              top: 0,
              right: 0
            }]
          });
        } else {
          this.watermark.setText(o.watermark);
          this.watermark.setValid(!o.invalid);
          this.watermark.setEnable(!o.disabled);
        }
      }
    }
  },
  _isError: function _isError() {
    return this.isEnabled() && !this.options.validationChecker(this.getValue());
  },
  _checkError: function _checkError() {
    var isError = this._isError();

    this._setErrorVisible(isError);

    this.element[isError ? "addClass" : "removeClass"]("error");
  },
  _focus: function _focus() {
    this.content.element.addClass("textarea-editor-focus");

    this._checkWaterMark();

    if (BI.isEmptyString(this.getValue())) {
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EMPTY, this.getValue(), this);
    }
  },
  _blur: function _blur() {
    this.content.element.removeClass("textarea-editor-focus");

    this._checkWaterMark();
  },
  _setErrorVisible: function _setErrorVisible(b) {
    var o = this.options;
    var errorText = o.errorText;

    if (BI.isFunction(errorText)) {
      errorText = errorText(BI.trim(this.getValue()));
    }

    if (!this.disabledError && BI.isKey(errorText)) {
      BI.Bubbles[b ? "show" : "hide"](this.getName(), errorText, this, {
        adjustYOffset: o.adjustYOffset,
        adjustXOffset: o.adjustXOffset,
        offsetStyle: o.offsetStyle
      });
    }
  },
  _defaultState: function _defaultState() {
    if (BI.isEmptyString(this.getValue())) {
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EMPTY, this.getValue(), this);
      this.fireEvent(BI.TextAreaEditor.EVENT_EMPTY);
    }
  },
  focus: function focus() {
    this._focus();

    this.content.element.focus();
  },
  blur: function blur() {
    this._blur();

    this.content.element.blur();
  },
  getValue: function getValue() {
    return this.content.element.val();
  },
  setValue: function setValue(value) {
    this.content.element.val(value);

    this._checkError();

    this._checkWaterMark();

    this._defaultState();
  },
  setStyle: function setStyle(style) {
    this.style = style;
    this.element.css(style);
    this.content.element.css(BI.extend({}, style, {
      color: style.color || BI.DOM.getContrastColor(BI.DOM.isRGBColor(style.backgroundColor) ? BI.DOM.rgb2hex(style.backgroundColor) : style.backgroundColor)
    }));
  },
  getStyle: function getStyle() {
    return this.style;
  },
  setWatermark: function setWatermark(v) {
    this.options.watermark = v;

    this._checkWaterMark();
  },
  _setValid: function _setValid(b) {
    BI.TextAreaEditor.superclass._setValid.apply(this, arguments); // this.content.setValid(b);
    // this.watermark && this.watermark.setValid(b);

  },
  _setEnable: function _setEnable(b) {
    BI.TextAreaEditor.superclass._setEnable.apply(this, [b]);

    this.content && (this.content.element[0].disabled = !b);
  }
});
BI.TextAreaEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.TextAreaEditor.EVENT_BLUR = "EVENT_BLUR";
BI.TextAreaEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.TextAreaEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.TextAreaEditor.EVENT_EMPTY = "EVENT_EMPTY";
BI.TextAreaEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.shortcut("bi.textarea_editor", BI.TextAreaEditor);

/***/ }),
/* 406 */
/***/ (function(module, exports) {

/**
 * guy 表示一行数据，通过position来定位位置的数据
 * @class BI.Html
 * @extends BI.Single
 */
BI.Html = BI.inherit(BI.Single, {
  props: {
    baseCls: "bi-html",
    textAlign: "left",
    whiteSpace: "normal",
    lineHeight: null,
    handler: null,
    // 如果传入handler,表示处理文字的点击事件，不是区域的
    hgap: 0,
    vgap: 0,
    lgap: 0,
    rgap: 0,
    tgap: 0,
    bgap: 0,
    text: "",
    highLight: false
  },
  render: function render() {
    var self = this,
        o = this.options;

    if (o.hgap + o.lgap > 0) {
      this.element.css({
        "padding-left": BI.pixFormat(o.hgap + o.lgap)
      });
    }

    if (o.hgap + o.rgap > 0) {
      this.element.css({
        "padding-right": BI.pixFormat(o.hgap + o.rgap)
      });
    }

    if (o.vgap + o.tgap > 0) {
      this.element.css({
        "padding-top": BI.pixFormat(o.vgap + o.tgap)
      });
    }

    if (o.vgap + o.bgap > 0) {
      this.element.css({
        "padding-bottom": BI.pixFormat(o.vgap + o.bgap)
      });
    }

    if (BI.isNumber(o.height)) {
      this.element.css({
        lineHeight: BI.pixFormat(o.height)
      });
    }

    if (BI.isNumber(o.lineHeight)) {
      this.element.css({
        lineHeight: BI.pixFormat(o.lineHeight)
      });
    }

    if (BI.isWidthOrHeight(o.maxWidth)) {
      this.element.css({
        maxWidth: o.maxWidth
      });
    }

    if (BI.isNumber(o.maxWidth)) {
      this.element.css({
        maxWidth: BI.pixFormat(o.maxWidth)
      });
    }

    this.element.css({
      textAlign: o.textAlign,
      whiteSpace: o.whiteSpace,
      textOverflow: o.whiteSpace === "nowrap" ? "ellipsis" : "",
      overflow: o.whiteSpace === "nowrap" ? "" : "auto"
    });

    if (o.handler) {
      this.text = BI.createWidget({
        type: "bi.layout",
        tagName: "span"
      });
      this.text.element.click(function () {
        o.handler(self.getValue());
      });
      BI.createWidget({
        type: "bi.default",
        element: this,
        items: [this.text]
      });
    } else {
      this.text = this;
    }

    if (BI.isKey(o.text)) {
      this.setText(o.text);
    } else if (BI.isKey(o.value)) {
      this.setText(o.value);
    }

    if (o.highLight) {
      this.doHighLight();
    }
  },
  doHighLight: function doHighLight() {
    this.text.element.addClass("bi-high-light");
  },
  unHighLight: function unHighLight() {
    this.text.element.removeClass("bi-high-light");
  },
  setValue: function setValue(text) {
    BI.Html.superclass.setValue.apply(this, arguments);

    if (!this.isReadOnly()) {
      this.setText(text);
    }
  },
  setStyle: function setStyle(css) {
    this.text.element.css(css);
  },
  setText: function setText(text) {
    BI.Html.superclass.setText.apply(this, arguments);
    this.options.text = text;
    this.text.element.html(text);
  }
});
BI.shortcut("bi.html", BI.Html);

/***/ }),
/* 407 */
/***/ (function(module, exports) {

/**
 * guy 图标
 * @class BI.Icon
 * @extends BI.Single
 */
BI.Icon = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.Icon.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      tagName: "i",
      baseCls: (conf.baseCls || "") + " x-icon b-font horizon-center display-block"
    });
  },
  render: function render() {
    if (BI.isIE9Below && BI.isIE9Below()) {
      this.element.addClass("hack");
    }
  }
});
BI.shortcut("bi.icon", BI.Icon);

/***/ }),
/* 408 */
/***/ (function(module, exports) {

/**
 * @class BI.Iframe
 * @extends BI.Single
 * @abstract
 * Created by GameJian on 2016/3/2.
 */
BI.Iframe = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig(config) {
    var conf = BI.Iframe.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      tagName: "iframe",
      baseCls: (conf.baseCls || "") + " bi-iframe",
      src: "",
      name: "",
      attributes: {},
      width: "100%",
      height: "100%"
    });
  },
  render: function render() {
    var self = this;
    this.element.on("load", function () {
      self.fireEvent("EVENT_LOADED");
    });
  },
  _initProps: function _initProps() {
    BI.Iframe.superclass._initProps.apply(this, arguments);

    var o = this.options;
    this.options.attributes = BI.extend({
      frameborder: 0,
      src: o.src,
      name: o.name
    }, this.options.attributes);
  },
  setSrc: function setSrc(src) {
    this.options.src = src;
    this.element.attr("src", src);
  },
  getSrc: function getSrc() {
    return this.options.src;
  },
  setName: function setName(name) {
    this.options.name = name;
    this.element.attr("name", name);
  },
  getName: function getName() {
    return this.options.name;
  }
});
BI.shortcut("bi.iframe", BI.Iframe);

/***/ }),
/* 409 */
/***/ (function(module, exports) {

/**
 * ͼƬ
 *
 * Created by GUY on 2016/1/26.
 * @class BI.Img
 * @extends BI.Single
 * @abstract
 */
BI.Img = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig(config) {
    var conf = BI.Img.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      tagName: "img",
      baseCls: (conf.baseCls || "") + " bi-img display-block",
      src: "",
      attributes: config.src ? {
        src: config.src
      } : {},
      width: "100%",
      height: "100%"
    });
  },
  _initProps: function _initProps() {
    BI.Img.superclass._initProps.apply(this, arguments);

    var o = this.options;
    this.options.attributes = BI.extend({
      src: o.src
    }, this.options.attributes);
  },
  setSrc: function setSrc(src) {
    this.options.src = src;
    this.element.attr("src", src);
  },
  getSrc: function getSrc() {
    return this.options.src;
  }
});
BI.shortcut("bi.img", BI.Img);

/***/ }),
/* 410 */
/***/ (function(module, exports) {

/**
 * guy
 * @extends BI.Single
 * @type {*|void|Object}
 */
BI.ImageCheckbox = BI.inherit(BI.IconButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.ImageCheckbox.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-image-checkbox check-box-icon",
      selected: false,
      handler: BI.emptyFn,
      width: 16,
      height: 16,
      iconWidth: 16,
      iconHeight: 16
    });
  }
});
BI.ImageCheckbox.EVENT_CHANGE = BI.IconButton.EVENT_CHANGE;
BI.shortcut("bi.image_checkbox", BI.ImageCheckbox);

/***/ }),
/* 411 */
/***/ (function(module, exports) {

/**
 * guy
 * @extends BI.Single
 * @type {*|void|Object}
 */
BI.Checkbox = BI.inherit(BI.BasicButton, {
  props: {
    baseCls: "bi-checkbox",
    selected: false,
    handler: BI.emptyFn,
    width: 14,
    height: 14,
    iconWidth: 14,
    iconHeight: 14
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.center_adapt",
      items: [{
        type: "bi.default",
        ref: function ref(_ref) {
          self.checkbox = _ref;
        },
        cls: "checkbox-content",
        width: o.iconWidth,
        height: o.iconHeight
      }]
    };
  },
  _setEnable: function _setEnable(enable) {
    BI.Checkbox.superclass._setEnable.apply(this, arguments);

    if (enable === true) {
      this.checkbox.element.removeClass("base-disabled disabled");
    } else {
      this.checkbox.element.addClass("base-disabled disabled");
    }
  },
  doClick: function doClick() {
    BI.Checkbox.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.Checkbox.EVENT_CHANGE);
    }
  },
  setSelected: function setSelected(b) {
    BI.Checkbox.superclass.setSelected.apply(this, arguments);

    if (b) {
      this.checkbox.element.addClass("bi-high-light-background");
    } else {
      this.checkbox.element.removeClass("bi-high-light-background");
    }
  }
});
BI.Checkbox.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.checkbox", BI.Checkbox);

/***/ }),
/* 412 */
/***/ (function(module, exports) {

/**
 * guy
 * @class BI.Input 一个button和一行数 组成的一行listitem
 * @extends BI.Single
 * @type {*|void|Object}
 */
BI.Input = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.Input.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-input display-block overflow-dot",
      tagName: "input",
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      // 按确定键能否退出编辑
      allowBlank: false
    });
  },
  render: function render() {
    var self = this;
    var ctrlKey = false;
    var keyCode = null;
    var inputEventValid = false;

    var _keydown = BI.debounce(function (keyCode) {
      self.onKeyDown(keyCode, ctrlKey);
      self._keydown_ = false;
    }, BI.EVENT_RESPONSE_TIME);

    var _clk = BI.debounce(BI.bind(this._click, this), BI.EVENT_RESPONSE_TIME, {
      "leading": true,
      "trailing": false
    });

    this._focusDebounce = BI.debounce(BI.bind(this._focus, this), BI.EVENT_RESPONSE_TIME, {
      "leading": true,
      "trailing": false
    });
    this._blurDebounce = BI.debounce(BI.bind(this._blur, this), BI.EVENT_RESPONSE_TIME, {
      "leading": true,
      "trailing": false
    });
    this.element.keydown(function (e) {
      inputEventValid = false;
      ctrlKey = e.ctrlKey || e.metaKey; // mac的cmd支持一下

      keyCode = e.keyCode;
      self.fireEvent(BI.Input.EVENT_QUICK_DOWN, arguments);
    }).keyup(function (e) {
      keyCode = null;

      if (!(inputEventValid && e.keyCode === BI.KeyCode.ENTER)) {
        self._keydown_ = true;

        _keydown(e.keyCode);
      }
    }).on("input propertychange", function (e) {
      // 输入内容全选并直接删光，如果按键没放开就失去焦点不会触发keyup，被focusout覆盖了
      // 其中propertychange在元素属性发生改变的时候就会触发 是为了兼容IE8
      // 通过keyCode判断会漏掉输入法点击输入(右键粘贴暂缓)
      var originalEvent = e.originalEvent;

      if (BI.isNull(originalEvent.propertyName) || originalEvent.propertyName === "value") {
        inputEventValid = true;
        self._keydown_ = true;

        _keydown(keyCode);

        keyCode = null;
      }
    }).click(function (e) {
      e.stopPropagation();

      _clk();
    }).mousedown(function (e) {
      self.element.val(self.element.val());
    }).focus(function (e) {
      // 可以不用冒泡
      self._focusDebounce();
    }).blur(function (e) {
      //  DEC-14919  IE11在浏览器重新获得焦点之后会先触发focusout再触发focus,要保持先获得焦点再失去焦点的顺序不变,因此采用blur
      self._blurDebounce();
    });

    if (BI.isKey(this.options.value) || BI.isEmptyString(this.options.value)) {
      this.setValue(this.options.value);
    }
  },
  _focus: function _focus() {
    this.element.addClass("bi-input-focus");

    this._checkValidationOnValueChange();

    this._isEditing = true;

    if (this.getValue() === "") {
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EMPTY, this.getValue(), this);
      this.fireEvent(BI.Input.EVENT_EMPTY);
    }

    this.fireEvent(BI.Input.EVENT_FOCUS);
  },
  _blur: function _blur() {
    var self = this;

    if (self._keydown_ === true) {
      BI.delay(blur, BI.EVENT_RESPONSE_TIME);
    } else {
      blur();
    }

    function blur() {
      if (!self.isValid() && self.options.quitChecker.apply(self, [BI.trim(self.getValue())]) !== false) {
        self.element.val(self._lastValidValue ? self._lastValidValue : "");

        self._checkValidationOnValueChange();

        self._defaultState();
      }

      self.element.removeClass("bi-input-focus");
      self._isEditing = false;
      self._start = false;

      if (self.isValid()) {
        var lastValidValue = self._lastValidValue;
        self._lastValidValue = self.getValue();
        self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CONFIRM, self.getValue(), self);
        self.fireEvent(BI.Input.EVENT_CONFIRM);

        if (self._lastValidValue !== lastValidValue) {
          self.fireEvent(BI.Input.EVENT_CHANGE_CONFIRM);
        }
      }

      self.fireEvent(BI.Input.EVENT_BLUR);
    }
  },
  _click: function _click() {
    if (this._isEditing !== true) {
      this.selectAll();
      this.fireEvent(BI.Input.EVENT_CLICK);
    }
  },
  onClick: function onClick() {
    this._click();
  },
  onKeyDown: function onKeyDown(keyCode, ctrlKey) {
    if (!this.isValid() || BI.trim(this._lastChangedValue) !== BI.trim(this.getValue())) {
      this._checkValidationOnValueChange();
    }

    if (this.isValid() && BI.trim(this.getValue()) !== "") {
      if (BI.trim(this.getValue()) !== this._lastValue && (!this._start || BI.isNull(this._lastValue) || this._lastValue === "") || this._pause === true && !/(\s|\u00A0)$/.test(this.getValue())) {
        this._start = true;
        this._pause = false;
        this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.STARTEDIT, this.getValue(), this);
        this.fireEvent(BI.Input.EVENT_START);
      }
    }

    if (BI.isEqual(keyCode, BI.KeyCode.ENTER)) {
      if (this.isValid() || this.options.quitChecker.apply(this, [BI.trim(this.getValue())]) !== false) {
        this.blur();
        this.fireEvent(BI.Input.EVENT_ENTER);
      } else {
        this.fireEvent(BI.Input.EVENT_RESTRICT);
      }
    }

    if (BI.isEqual(keyCode, BI.KeyCode.SPACE)) {
      this.fireEvent(BI.Input.EVENT_SPACE);
    }

    if (BI.isEqual(keyCode, BI.KeyCode.BACKSPACE) && this._lastValue === "") {
      this.fireEvent(BI.Input.EVENT_REMOVE);
    }

    if (BI.isEqual(keyCode, BI.KeyCode.BACKSPACE) || BI.isEqual(keyCode, BI.KeyCode.DELETE)) {
      this.fireEvent(BI.Input.EVENT_BACKSPACE);
    }

    this.fireEvent(BI.Input.EVENT_KEY_DOWN, arguments); // _valueChange中会更新_lastValue, 这边缓存用以后续STOP事件服务

    var lastValue = this._lastValue;

    if (BI.trim(this.getValue()) !== BI.trim(this._lastValue || "")) {
      this._valueChange();
    }

    if (BI.isEndWithBlank(this.getValue())) {
      this._pause = true;
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.PAUSE, "", this);
      this.fireEvent(BI.Input.EVENT_PAUSE);

      this._defaultState();
    } else if ((keyCode === BI.KeyCode.BACKSPACE || keyCode === BI.KeyCode.DELETE) && BI.trim(this.getValue()) === "" && lastValue !== null && BI.trim(lastValue) !== "") {
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.STOPEDIT, this.getValue(), this);
      this.fireEvent(BI.Input.EVENT_STOP);
    }
  },
  // 初始状态
  _defaultState: function _defaultState() {
    if (this.getValue() === "") {
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EMPTY, this.getValue(), this);
      this.fireEvent(BI.Input.EVENT_EMPTY);
    }

    this._lastValue = this.getValue();
    this._lastSubmitValue = null;
  },
  _valueChange: function _valueChange() {
    if (this.isValid() && BI.trim(this.getValue()) !== this._lastSubmitValue) {
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CHANGE, this.getValue(), this);
      this.fireEvent(BI.Input.EVENT_CHANGE);
      this._lastSubmitValue = BI.trim(this.getValue());
    }

    if (this.getValue() === "") {
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EMPTY, this.getValue(), this);
      this.fireEvent(BI.Input.EVENT_EMPTY);
    }

    this._lastValue = this.getValue();
  },
  _checkValidationOnValueChange: function _checkValidationOnValueChange(callback) {
    var self = this,
        o = this.options;
    var v = this.getValue();

    if (o.allowBlank === true && BI.trim(v) === "") {
      this.setValid(true);
      callback && callback();
      return;
    }

    if (BI.trim(v) === "") {
      this.setValid(false);
      callback && callback();
      return;
    }

    var checker = o.validationChecker.apply(this, [BI.trim(v)]);

    if (checker instanceof Promise) {
      checker.then(function (validate) {
        self.setValid(validate !== false);
        callback && callback();
      });
    } else {
      this.setValid(checker !== false);
      callback && callback();
    }
  },
  focus: function focus() {
    if (!this.element.is(":visible")) {
      throw new Error("input输入框在不可见下不能focus");
    }

    if (!this._isEditing === true) {
      this.element.focus();
      this.selectAll();
    }
  },
  blur: function blur() {
    if (!this.element.is(":visible")) {
      throw new Error("input输入框在不可见下不能blur");
    }

    if (this._isEditing === true) {
      this.element.blur();

      this._blurDebounce();
    }
  },
  selectAll: function selectAll() {
    if (!this.element.is(":visible")) {
      throw new Error("input输入框在不可见下不能select");
    }

    this.element.select();
    this._isEditing = true;
  },
  setValue: function setValue(textValue) {
    var self = this;
    this.element.val(textValue);
    BI.nextTick(function () {
      self._checkValidationOnValueChange(function () {
        self._defaultState();

        if (self.isValid()) {
          self._lastValidValue = self._lastSubmitValue = self.getValue();
        }
      });
    });
  },
  getValue: function getValue() {
    return this.element.val() || "";
  },
  isEditing: function isEditing() {
    return this._isEditing;
  },
  getLastValidValue: function getLastValidValue() {
    return this._lastValidValue;
  },
  getLastChangedValue: function getLastChangedValue() {
    return this._lastChangedValue;
  },
  _setValid: function _setValid() {
    BI.Input.superclass._setValid.apply(this, arguments);

    if (this.isValid()) {
      this._lastChangedValue = this.getValue();
      this.element.removeClass("bi-input-error");
      this.fireEvent(BI.Input.EVENT_VALID, BI.trim(this.getValue()), this);
    } else {
      if (this._lastChangedValue === this.getValue()) {
        this._lastChangedValue = null;
      }

      this.element.addClass("bi-input-error");
      this.fireEvent(BI.Input.EVENT_ERROR, BI.trim(this.getValue()), this);
    }
  },
  _setEnable: function _setEnable(b) {
    BI.Input.superclass._setEnable.apply(this, [b]);

    this.element[0].disabled = !b;
  }
});
BI.Input.EVENT_CHANGE = "EVENT_CHANGE";
BI.Input.EVENT_FOCUS = "EVENT_FOCUS";
BI.Input.EVENT_CLICK = "EVENT_CLICK";
BI.Input.EVENT_BLUR = "EVENT_BLUR";
BI.Input.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.Input.EVENT_QUICK_DOWN = "EVENT_QUICK_DOWN";
BI.Input.EVENT_SPACE = "EVENT_SPACE";
BI.Input.EVENT_BACKSPACE = "EVENT_BACKSPACE";
BI.Input.EVENT_START = "EVENT_START";
BI.Input.EVENT_PAUSE = "EVENT_PAUSE";
BI.Input.EVENT_STOP = "EVENT_STOP";
BI.Input.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.Input.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.Input.EVENT_REMOVE = "EVENT_REMOVE";
BI.Input.EVENT_EMPTY = "EVENT_EMPTY";
BI.Input.EVENT_VALID = "EVENT_VALID";
BI.Input.EVENT_ERROR = "EVENT_ERROR";
BI.Input.EVENT_ENTER = "EVENT_ENTER";
BI.Input.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.shortcut("bi.input", BI.Input);

/***/ }),
/* 413 */
/***/ (function(module, exports) {

/**
 * guy
 * @extends BI.Single
 * @type {*|void|Object}
 */
BI.ImageRadio = BI.inherit(BI.IconButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.ImageRadio.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-radio radio-icon",
      selected: false,
      handler: BI.emptyFn,
      width: 16,
      height: 16,
      iconWidth: 16,
      iconHeight: 16
    });
  },
  doClick: function doClick() {
    BI.ImageRadio.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.ImageRadio.EVENT_CHANGE);
    }
  }
});
BI.ImageRadio.EVENT_CHANGE = BI.IconButton.EVENT_CHANGE;
BI.shortcut("bi.image_radio", BI.ImageRadio);

/***/ }),
/* 414 */
/***/ (function(module, exports) {

/**
 * guy
 * @extends BI.Single
 * @type {*|void|Object}
 */
BI.Radio = BI.inherit(BI.BasicButton, {
  props: {
    baseCls: "bi-radio",
    selected: false,
    handler: BI.emptyFn,
    width: 16,
    height: 16,
    iconWidth: 16,
    iconHeight: 16
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.center_adapt",
      items: [{
        type: "bi.layout",
        cls: "radio-content",
        ref: function ref(_ref) {
          self.radio = _ref;
        },
        width: o.iconWidth,
        height: o.iconHeight
      }]
    };
  },
  _setEnable: function _setEnable(enable) {
    BI.Radio.superclass._setEnable.apply(this, arguments);

    if (enable === true) {
      this.radio.element.removeClass("base-disabled disabled");
    } else {
      this.radio.element.addClass("base-disabled disabled");
    }
  },
  doClick: function doClick() {
    BI.Radio.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.Radio.EVENT_CHANGE);
    }
  },
  setSelected: function setSelected(b) {
    BI.Radio.superclass.setSelected.apply(this, arguments);

    if (b) {
      this.radio.element.addClass("bi-high-light-background");
    } else {
      this.radio.element.removeClass("bi-high-light-background");
    }
  }
});
BI.Radio.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.radio", BI.Radio);

/***/ }),
/* 415 */
/***/ (function(module, exports) {

BI.Instruction = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.Link.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-instruction",
      height: 20,
      level: "error",
      textAlign: "left",
      whiteSpace: "nowrap",
      hgap: 5
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.label",
      ref: function ref(_ref) {
        self.text = _ref;
      },
      cls: "instruction-" + o.level,
      textAlign: o.textAlign,
      whiteSpace: o.whiteSpace,
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      rgap: o.rgap,
      lgap: o.lgap,
      vgap: o.vgap,
      text: o.text,
      keyword: o.keyword,
      value: o.value,
      py: o.py
    };
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  setText: function setText(v) {
    this.options.text = v;
    this.text.setText(v);
  },
  getText: function getText() {
    return this.options.text;
  },
  setStyle: function setStyle(css) {
    this.text.setStyle(css);
  },
  setValue: function setValue(v) {
    this.text.setValue(v);
  },
  getValue: function getValue() {
    this.text.getValue();
  }
});
BI.shortcut("bi.instruction", BI.Instruction);

/***/ }),
/* 416 */
/***/ (function(module, exports) {

/**
 * Created by dailer on 2019/6/19.
 */
!function () {
  BI.AbstractLabel = BI.inherit(BI.Single, {
    _defaultConfig: function _defaultConfig(props) {
      var conf = BI.AbstractLabel.superclass._defaultConfig.apply(this, arguments);

      return BI.extend(conf, {
        textAlign: "center",
        whiteSpace: "nowrap",
        // normal  or  nowrap
        textWidth: null,
        textHeight: null,
        hgap: 0,
        vgap: 0,
        lgap: 0,
        rgap: 0,
        tgap: 0,
        bgap: 0,
        highLight: false,
        handler: null,
        enableHover: props.title !== null
      });
    },
    _createJson: function _createJson() {
      var o = this.options;
      return {
        type: "bi.text",
        textAlign: o.textAlign,
        whiteSpace: o.whiteSpace,
        lineHeight: o.textHeight,
        maxWidth: "100%",
        text: o.text,
        value: o.value,
        py: o.py,
        keyword: o.keyword,
        highLight: o.highLight,
        handler: o.handler
      };
    },
    render: function render() {
      if (this.options.textAlign === "center") {
        this._createCenterEl();
      } else {
        this._createNotCenterEl();
      }
    },
    _createCenterEl: function _createCenterEl() {
      var o = this.options;

      var json = this._createJson();

      json.textAlign = "left";

      if (BI.isNumber(o.width) && o.width > 0) {
        if (BI.isNumber(o.textWidth) && o.textWidth > 0) {
          json.maxWidth = o.textWidth;

          if (BI.isNumber(o.height) && o.height > 0) {
            // 1.1
            BI.createWidget({
              type: "bi.center_adapt",
              height: o.height,
              columnSize: ["auto"],
              // important！ 让文字在flex布局下shrink为1
              scrollable: o.whiteSpace === "normal",
              element: this,
              items: [{
                el: this.text = BI.createWidget(json)
              }]
            });
            return;
          }

          BI.createWidget({
            // 1.2
            type: "bi.center_adapt",
            columnSize: ["auto"],
            // important！ 让文字在flex布局下shrink为1
            scrollable: o.whiteSpace === "normal",
            element: this,
            items: [{
              el: this.text = BI.createWidget(json)
            }]
          });
          return;
        }

        if (o.whiteSpace === "normal") {
          // 1.3
          BI.extend(json, {
            hgap: o.hgap,
            vgap: o.vgap,
            lgap: o.lgap,
            rgap: o.rgap,
            tgap: o.tgap,
            bgap: o.bgap
          });
          this.text = BI.createWidget(json);
          BI.createWidget({
            type: "bi.center_adapt",
            columnSize: ["auto"],
            // important！ 让文字在flex布局下shrink为1
            scrollable: o.whiteSpace === "normal",
            element: this,
            items: [this.text]
          });
          return;
        }

        if (BI.isNumber(o.height) && o.height > 0) {
          // 1.4
          this.element.css({
            "line-height": BI.pixFormat(o.height)
          });
          json.textAlign = o.textAlign;
          delete json.maxWidth;
          this.text = BI.createWidget(BI.extend(json, {
            element: this,
            hgap: o.hgap,
            vgap: o.vgap,
            lgap: o.lgap,
            rgap: o.rgap,
            tgap: o.tgap,
            bgap: o.bgap
          }));
          return;
        }

        BI.extend(json, {
          // 1.5
          hgap: o.hgap,
          vgap: o.vgap,
          lgap: o.lgap,
          rgap: o.rgap,
          tgap: o.tgap,
          bgap: o.bgap,
          maxWidth: "100%"
        });
        this.text = BI.createWidget(json);
        BI.createWidget({
          type: "bi.center_adapt",
          columnSize: ["auto"],
          // important！ 让文字在flex布局下shrink为1
          scrollable: o.whiteSpace === "normal",
          element: this,
          items: [this.text]
        });
        return;
      }

      if (BI.isNumber(o.textWidth) && o.textWidth > 0) {
        // 1.6
        json.maxWidth = o.textWidth;
        BI.createWidget({
          type: "bi.center_adapt",
          columnSize: ["auto"],
          // important！ 让文字在flex布局下shrink为1
          scrollable: o.whiteSpace === "normal",
          element: this,
          items: [{
            el: this.text = BI.createWidget(json)
          }]
        });
        return;
      }

      if (o.whiteSpace === "normal") {
        // 1.7
        BI.extend(json, {
          hgap: o.hgap,
          vgap: o.vgap,
          lgap: o.lgap,
          rgap: o.rgap,
          tgap: o.tgap,
          bgap: o.bgap
        });
        this.text = BI.createWidget(json);
        BI.createWidget({
          type: "bi.center_adapt",
          columnSize: ["auto"],
          // important！ 让文字在flex布局下shrink为1
          scrollable: true,
          element: this,
          items: [this.text]
        });
        return;
      }

      if (BI.isNumber(o.height) && o.height > 0) {
        // 1.8
        this.element.css({
          "line-height": BI.pixFormat(o.height)
        });
        json.textAlign = o.textAlign;
        delete json.maxWidth;
        this.text = BI.createWidget(BI.extend(json, {
          element: this,
          hgap: o.hgap,
          vgap: o.vgap,
          lgap: o.lgap,
          rgap: o.rgap,
          tgap: o.tgap,
          bgap: o.bgap
        }));
        return;
      }

      this.text = BI.createWidget(BI.extend(json, {
        hgap: o.hgap,
        vgap: o.vgap,
        lgap: o.lgap,
        rgap: o.rgap,
        tgap: o.tgap,
        bgap: o.bgap
      }));
      BI.createWidget({
        type: "bi.center_adapt",
        columnSize: ["auto"],
        // important！ 让文字在flex布局下shrink为1
        element: this,
        items: [this.text]
      });
    },
    _createNotCenterEl: function _createNotCenterEl() {
      var o = this.options;
      var adaptLayout = "bi.vertical_adapt";

      var json = this._createJson();

      if (BI.isNumber(o.width) && o.width > 0) {
        if (BI.isNumber(o.textWidth) && o.textWidth > 0) {
          json.maxWidth = o.textWidth;

          if (BI.isNumber(o.height) && o.height > 0) {
            // 2.1
            BI.createWidget({
              type: adaptLayout,
              horizontalAlign: o.textAlign,
              columnSize: ["auto"],
              // important！ 让文字在flex布局下shrink为1
              height: o.height,
              scrollable: o.whiteSpace === "normal",
              element: this,
              items: [{
                el: this.text = BI.createWidget(json)
              }]
            });
            return;
          }

          BI.createWidget({
            // 2.2
            type: adaptLayout,
            horizontalAlign: o.textAlign,
            columnSize: ["auto"],
            // important！ 让文字在flex布局下shrink为1
            scrollable: o.whiteSpace === "normal",
            hgap: o.hgap,
            vgap: o.vgap,
            lgap: o.lgap,
            rgap: o.rgap,
            tgap: o.tgap,
            bgap: o.bgap,
            element: this,
            items: [{
              el: this.text = BI.createWidget(json)
            }]
          });
          return;
        }

        if (BI.isNumber(o.height) && o.height > 0) {
          // 2.3
          if (o.whiteSpace !== "normal") {
            this.element.css({
              "line-height": BI.pixFormat(o.height - o.vgap * 2)
            });
          }

          delete json.maxWidth;
          this.text = BI.createWidget(BI.extend(json, {
            element: this,
            hgap: o.hgap,
            vgap: o.vgap,
            lgap: o.lgap,
            rgap: o.rgap,
            tgap: o.tgap,
            bgap: o.bgap
          }));
          return;
        }

        json.maxWidth = o.width - 2 * o.hgap - o.lgap - o.rgap;
        BI.createWidget({
          // 2.4
          type: adaptLayout,
          horizontalAlign: o.textAlign,
          columnSize: ["auto"],
          // important！ 让文字在flex布局下shrink为1
          scrollable: o.whiteSpace === "normal",
          hgap: o.hgap,
          vgap: o.vgap,
          lgap: o.lgap,
          rgap: o.rgap,
          tgap: o.tgap,
          bgap: o.bgap,
          element: this,
          items: [{
            el: this.text = BI.createWidget(json)
          }]
        });
        return;
      }

      if (BI.isNumber(o.textWidth) && o.textWidth > 0) {
        json.maxWidth = o.textWidth;
        BI.createWidget({
          // 2.5
          type: adaptLayout,
          horizontalAlign: o.textAlign,
          columnSize: ["auto"],
          // important！ 让文字在flex布局下shrink为1
          scrollable: o.whiteSpace === "normal",
          hgap: o.hgap,
          vgap: o.vgap,
          lgap: o.lgap,
          rgap: o.rgap,
          tgap: o.tgap,
          bgap: o.bgap,
          element: this,
          items: [{
            el: this.text = BI.createWidget(json)
          }]
        });
        return;
      }

      if (BI.isNumber(o.height) && o.height > 0) {
        if (o.whiteSpace !== "normal") {
          this.element.css({
            "line-height": BI.pixFormat(o.height - o.vgap * 2)
          });
        }

        delete json.maxWidth;
        this.text = BI.createWidget(BI.extend(json, {
          // 2.6
          element: this,
          hgap: o.hgap,
          vgap: o.vgap,
          lgap: o.lgap,
          rgap: o.rgap,
          tgap: o.tgap,
          bgap: o.bgap
        }));
        return;
      }

      this.text = BI.createWidget(BI.extend(json, {
        hgap: o.hgap,
        vgap: o.vgap,
        lgap: o.lgap,
        rgap: o.rgap,
        tgap: o.tgap,
        bgap: o.bgap
      }));
      BI.createWidget({
        type: adaptLayout,
        horizontalAlign: o.textAlign,
        columnSize: ["auto"],
        // important！ 让文字在flex布局下shrink为1
        element: this,
        scrollable: o.whiteSpace === "normal",
        items: [this.text]
      });
    },
    doRedMark: function doRedMark() {
      this.text.doRedMark.apply(this.text, arguments);
    },
    unRedMark: function unRedMark() {
      this.text.unRedMark.apply(this.text, arguments);
    },
    doHighLight: function doHighLight() {
      this.text.doHighLight.apply(this.text, arguments);
    },
    unHighLight: function unHighLight() {
      this.text.unHighLight.apply(this.text, arguments);
    },
    setText: function setText(v) {
      this.options.text = v;
      this.text.setText(v);
    },
    getText: function getText() {
      return this.options.text;
    },
    setStyle: function setStyle(css) {
      this.text.setStyle(css);
    },
    setValue: function setValue(v) {
      BI.AbstractLabel.superclass.setValue.apply(this, arguments);

      if (!this.isReadOnly()) {
        this.options.text = v;
        this.text.setValue(v);
      }
    }
  });
}();

/***/ }),
/* 417 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/6/26.
 */
BI.HtmlLabel = BI.inherit(BI.AbstractLabel, {
  props: {
    baseCls: "bi-html-label"
  },
  _createJson: function _createJson() {
    var o = this.options;
    return {
      type: "bi.html",
      textAlign: o.textAlign,
      whiteSpace: o.whiteSpace,
      lineHeight: o.textHeight,
      text: o.text,
      value: o.value,
      handler: o.handler
    };
  }
});
BI.shortcut("bi.html_label", BI.HtmlLabel);

/***/ }),
/* 418 */
/***/ (function(module, exports) {

/**
 * @class BI.IconButton
 * @extends BI.BasicButton
 * 图标标签
 */
BI.IconLabel = BI.inherit(BI.Single, {
  props: {
    baseCls: "bi-icon-label horizon-center",
    hgap: 0,
    vgap: 0,
    tgap: 0,
    bgap: 0,
    lgap: 0,
    rgap: 0,
    iconWidth: null,
    iconHeight: null,
    lineHeight: null
  },
  render: function render() {
    var o = this.options;
    this.element.css({
      textAlign: "center"
    });
    this.icon = BI.createWidget({
      type: "bi.icon",
      width: o.iconWidth,
      height: o.iconHeight
    });

    if (BI.isNumber(o.height) && o.height > 0 && BI.isNull(o.iconWidth) && BI.isNull(o.iconHeight)) {
      this.element.css("lineHeight", BI.pixFormat(o.lineHeight || o.height));
      BI.createWidget({
        type: "bi.default",
        element: this,
        hgap: o.hgap,
        vgap: o.vgap,
        lgap: o.lgap,
        rgap: o.rgap,
        tgap: o.tgap,
        bgap: o.bgap,
        items: [this.icon]
      });
    } else {
      this.element.css("lineHeight", "1");
      BI.createWidget({
        element: this,
        type: "bi.center_adapt",
        hgap: o.hgap,
        vgap: o.vgap,
        lgap: o.lgap,
        rgap: o.rgap,
        tgap: o.tgap,
        bgap: o.bgap,
        items: [this.icon]
      });
    }
  }
});
BI.shortcut("bi.icon_label", BI.IconLabel);

/***/ }),
/* 419 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/6/26.
 */
BI.Label = BI.inherit(BI.AbstractLabel, {
  props: {
    baseCls: "bi-label",
    py: "",
    keyword: ""
  },
  getTitle: function getTitle() {
    var title = this.options.title;
    var text = this.options.text;

    if (BI.isFunction(title)) {
      return title();
    }

    if (BI.isNotNull(title)) {
      return title;
    }

    if (BI.isFunction(text)) {
      return text();
    }

    return text;
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  }
});
BI.shortcut("bi.label", BI.Label);

/***/ }),
/* 420 */
/***/ (function(module, exports) {

/**
 * guy a元素
 * @class BI.Link
 * @extends BI.Text
 */
BI.Link = BI.inherit(BI.Label, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.Link.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-link display-block",
      tagName: "a",
      href: "",
      target: "_blank"
    });
  },
  _createJson: function _createJson() {
    var o = this.options;
    return {
      type: "bi.a",
      textAlign: o.textAlign,
      whiteSpace: o.whiteSpace,
      lineHeight: o.textHeight,
      text: o.text,
      keyword: o.keyword,
      value: o.value,
      py: o.py,
      href: o.href,
      target: o.target
    };
  }
});
BI.shortcut("bi.link", BI.Link);

/***/ }),
/* 421 */
/***/ (function(module, exports) {

/**
 * 没有html标签的纯文本
 */
!function () {
  BI.PureText = BI.inherit(BI.Widget, {
    props: {
      tagName: null
    },
    render: function render() {
      var self = this,
          o = this.options;
      var text = BI.isFunction(o.text) ? this.__watch(o.text, function (context, newValue) {
        self.setText(newValue);
      }) : o.text;

      if (BI.isKey(text)) {
        this.setText(text);
      } else if (BI.isKey(o.value)) {
        this.setText(o.value);
      }
    },
    _getShowText: function _getShowText() {
      var o = this.options;
      var text = BI.isFunction(o.text) ? o.text() : o.text;
      text = BI.isKey(text) ? text : o.value;

      if (!BI.isKey(text)) {
        return "";
      }

      return BI.Text.formatText(text + "");
    },
    setValue: function setValue(value) {
      this.options.value = value;
      this.setText(value);
    },
    setText: function setText(text) {
      this.options.text = BI.isNotNull(text) ? text : "";

      this.element.__textKeywordMarked__(this._getShowText());
    }
  });
  BI.shortcut("bi.pure_text", BI.PureText);
}();

/***/ }),
/* 422 */
/***/ (function(module, exports) {

/**
 * guy
 * tip提示
 * zIndex在10亿级别
 * @class BI.Tip
 * @extends BI.Single
 * @abstract
 */
BI.Tip = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.Tip.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      _baseCls: (conf._baseCls || "") + " bi-tip",
      zIndex: BI.zIndex_tip
    });
  },
  _init: function _init() {
    BI.Tip.superclass._init.apply(this, arguments);

    this.element.css({
      zIndex: this.options.zIndex
    });
  }
});

/***/ }),
/* 423 */
/***/ (function(module, exports) {

/**
 * toast提示
 *
 * Created by GUY on 2015/9/7.
 * @class BI.Toast
 * @extends BI.Tip
 */
BI.Toast = BI.inherit(BI.Tip, {
  _const: {
    closableMinWidth: 146,
    minWidth: 100,
    closableMaxWidth: 410,
    maxWidth: 400
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Toast.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-toast",
      text: "",
      level: "success",
      // success或warning
      autoClose: true,
      closable: null,
      textHeight: 20,
      vgap: 10,
      innerHgap: 4,
      hgap: 8
    });
  },
  render: function render() {
    var self = this,
        o = this.options,
        c = this._const;
    this.element.css({
      minWidth: BI.pixFormat(o.closable ? c.closableMinWidth : c.minWidth),
      maxWidth: BI.pixFormat(o.closable ? c.closableMaxWidth : c.maxWidth)
    });
    this.element.addClass("toast-" + o.level);

    function fn(e) {
      e.stopPropagation();
      e.stopEvent();
      return false;
    }

    this.element.bind({
      click: fn,
      mousedown: fn,
      mouseup: fn,
      mouseover: fn,
      mouseenter: fn,
      mouseleave: fn,
      mousemove: fn
    });
    var cls;

    switch (o.level) {
      case "success":
        cls = "toast-success-font";
        break;

      case "error":
        cls = "toast-error-font";
        break;

      case "warning":
        cls = "toast-warning-font";
        break;

      case "loading":
        cls = "toast-loading-font anim-rotate";
        break;

      case "normal":
      default:
        cls = "toast-message-font";
        break;
    }

    function hasCloseIcon() {
      return o.closable === true || o.closable === null && o.autoClose === false;
    }

    var items = [{
      type: "bi.icon_label",
      cls: cls + " toast-icon",
      height: o.textHeight
    }, {
      el: BI.isPlainObject(o.text) ? o.text : {
        type: "bi.label",
        whiteSpace: "normal",
        text: o.text,
        textHeight: o.textHeight,
        textAlign: "left"
      }
    }];
    var columnSize = ["", "fill"];

    if (hasCloseIcon()) {
      items.push({
        type: "bi.icon_button",
        cls: "close-font toast-icon",
        handler: function handler() {
          self.destroy();
        },
        height: o.textHeight
      });
      columnSize.push("");
    }

    return {
      type: "bi.horizontal",
      horizontalAlign: BI.HorizontalAlign.Stretch,
      items: items,
      hgap: o.hgap,
      vgap: o.vgap,
      innerHgap: o.innerHgap,
      columnSize: columnSize
    };
  },
  beforeDestroy: function beforeDestroy() {
    this.fireEvent(BI.Toast.EVENT_DESTORY);
  }
});
BI.Toast.EVENT_DESTORY = "EVENT_DESTORY";
BI.shortcut("bi.toast", BI.Toast);

/***/ }),
/* 424 */
/***/ (function(module, exports) {

/**
 * title提示
 *
 * Created by GUY on 2015/9/7.
 * @class BI.Tooltip
 * @extends BI.Tip
 */
BI.Tooltip = BI.inherit(BI.Tip, {
  _const: {
    hgap: 8,
    vgap: 4
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Tooltip.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-tooltip",
      text: "",
      level: "success",
      // success或warning
      stopEvent: false,
      stopPropagation: false,
      textAlign: "left"
    });
  },
  render: function render() {
    var o = this.options;
    this.element.addClass("tooltip-" + o.level);

    function fn(e) {
      o.stopPropagation && e.stopPropagation();
      o.stopEvent && e.stopEvent();
    }

    this.element.bind({
      click: fn,
      mousedown: fn,
      mouseup: fn,
      mouseover: fn,
      mouseenter: fn,
      mouseleave: fn,
      mousemove: fn
    });
    var texts = (o.text + "").split("\n");

    if (texts.length > 1) {
      BI.createWidget({
        type: "bi.vertical",
        element: this,
        hgap: this._const.hgap,
        innerVgap: this._const.vgap,
        items: BI.map(texts, function (i, text) {
          return {
            type: "bi.label",
            textAlign: o.textAlign,
            whiteSpace: "normal",
            text: text,
            textHeight: 18,
            title: null
          };
        })
      });
    } else {
      this.text = BI.createWidget({
        type: "bi.label",
        element: this,
        textAlign: o.textAlign,
        whiteSpace: "normal",
        text: o.text,
        title: null,
        textHeight: 18,
        hgap: this._const.hgap,
        vgap: this._const.vgap
      });
    }
  },
  setWidth: function setWidth(width) {
    this.element.width(BI.pixFormat(width - 2 * this._const.hgap));
  },
  setText: function setText(text) {
    this.text && this.text.setText(text);
  },
  setLevel: function setLevel(level) {
    this.element.removeClass("tooltip-success").removeClass("tooltip-warning");
    this.element.addClass("tooltip-" + level);
  }
});
BI.shortcut("bi.tooltip", BI.Tooltip);

/***/ }),
/* 425 */
/***/ (function(module, exports) {

/**
 * 下拉
 * @class BI.Trigger
 * @extends BI.Single
 * @abstract
 */
BI.Trigger = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.Trigger.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      _baseCls: (conf._baseCls || "") + " bi-trigger cursor-pointer",
      height: 24
    });
  },
  setKey: function setKey() {},
  getKey: function getKey() {}
});

/***/ }),
/* 426 */
/***/ (function(module, exports) {

/**
 * 可以改变图标的button
 *
 * Created by GUY on 2016/2/2.
 *
 * @class BI.IconChangeButton
 * @extends BI.Single
 */
BI.IconChangeButton = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.IconChangeButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-icon-change-button",
      iconCls: "",
      iconWidth: null,
      iconHeight: null,
      stopEvent: false,
      stopPropagation: false,
      selected: false,
      once: false,
      // 点击一次选中有效,再点无效
      forceSelected: false,
      // 点击即选中， 选中了就不会被取消
      forceNotSelected: false,
      // 无论怎么点击都不会被选中
      disableSelected: false,
      // 使能选中
      shadow: false,
      isShadowShowingOnSelected: false,
      // 选中状态下是否显示阴影
      trigger: null,
      handler: BI.emptyFn
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;
    o.iconCls = BI.isFunction(o.iconCls) ? this.__watch(o.iconCls, function (context, newValue) {
      self.setIcon(newValue);
    }) : o.iconCls;

    BI.IconChangeButton.superclass._init.apply(this, arguments);

    this.button = BI.createWidget({
      type: "bi.icon_button",
      element: this,
      cls: o.iconCls,
      height: o.height,
      iconWidth: o.iconWidth,
      iconHeight: o.iconHeight,
      stopEvent: o.stopEvent,
      stopPropagation: o.stopPropagation,
      selected: o.selected,
      once: o.once,
      forceSelected: o.forceSelected,
      forceNotSelected: o.forceNotSelected,
      disableSelected: o.disableSelected,
      shadow: o.shadow,
      isShadowShowingOnSelected: o.isShadowShowingOnSelected,
      trigger: o.trigger,
      handler: o.handler
    });
    this.button.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.button.on(BI.IconButton.EVENT_CHANGE, function () {
      self.fireEvent(BI.IconChangeButton.EVENT_CHANGE, arguments);
    });
  },
  isSelected: function isSelected() {
    return this.button.isSelected();
  },
  setSelected: function setSelected(b) {
    this.button.setSelected(b);
  },
  setIcon: function setIcon(cls) {
    var o = this.options;

    if (o.iconCls !== cls) {
      this.element.removeClass(o.iconCls).addClass(cls);
      o.iconCls = cls;
    }
  }
});
BI.IconChangeButton.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_change_button", BI.IconChangeButton);

/***/ }),
/* 427 */
/***/ (function(module, exports) {

/**
 *  统一的trigger图标按钮
 *
 * Created by GUY on 2015/9/16.
 * @class BI.TriggerIconButton
 * @extends BI.IconButton
 */
BI.TriggerIconButton = BI.inherit(BI.IconButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.TriggerIconButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-trigger-icon-button overflow-hidden",
      extraCls: "pull-down-font"
    });
  }
});
BI.TriggerIconButton.EVENT_CHANGE = BI.IconButton.EVENT_CHANGE;
BI.shortcut("bi.trigger_icon_button", BI.TriggerIconButton);

/***/ }),
/* 428 */
/***/ (function(module, exports) {

/**
 * guy
 * @extends BI.Single
 * @type {*|void|Object}
 */
BI.HalfIconButton = BI.inherit(BI.IconButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.HalfIconButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-half-icon-button check-half-select-icon",
      height: 16,
      width: 16,
      iconWidth: 16,
      iconHeight: 16,
      selected: false
    });
  }
});
BI.HalfIconButton.EVENT_CHANGE = BI.IconButton.EVENT_CHANGE;
BI.shortcut("bi.half_icon_button", BI.HalfIconButton);

/***/ }),
/* 429 */
/***/ (function(module, exports) {

/**
 * guy
 * @extends BI.Single
 * @type {*|void|Object}
 */
BI.HalfButton = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.HalfIconButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      selected: false,
      width: 14,
      height: 14,
      iconWidth: 14,
      iconHeight: 14
    });
  },
  render: function render() {
    var o = this.options;
    return {
      type: "bi.center_adapt",
      items: [{
        type: "bi.default",
        cls: "bi-half-button bi-high-light-border",
        width: o.iconWidth,
        height: o.iconHeight
      }]
    };
  },
  doClick: function doClick() {
    BI.HalfButton.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.HalfButton.EVENT_CHANGE);
    }
  }
});
BI.HalfButton.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.half_button", BI.HalfButton);

/***/ }),
/* 430 */
/***/ (function(module, exports) {

/**
 * guy
 * 复选框item
 * @type {*|void|Object}
 */
BI.MultiSelectItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-multi-select-item",
      attributes: {
        tabIndex: 1
      },
      height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      iconWrapperWidth: 26
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.checkbox"
    });
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.iconWrapperWidth || o.height, "fill"],
      items: [{
        type: "bi.center_adapt",
        items: [this.checkbox]
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          cls: "list-item-text",
          textAlign: "left",
          whiteSpace: "nowrap",
          textHeight: o.height,
          height: o.height,
          hgap: o.textHgap,
          rgap: o.textRgap,
          lgap: o.textLgap,
          vgap: o.textVgap,
          text: o.text,
          keyword: o.keyword,
          value: o.value,
          py: o.py
        }
      }]
    };
  },
  // _setEnable: function (enable) {
  //     BI.MultiSelectItem.superclass._setEnable.apply(this, arguments);
  //     if (enable === true) {
  //         this.element.attr("tabIndex", 1);
  //     } else if (enable === false) {
  //         this.element.removeAttr("tabIndex");
  //     }
  // },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.MultiSelectItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.MultiSelectItem.EVENT_CHANGE, this.getValue(), this);
    }
  },
  setSelected: function setSelected(v) {
    BI.MultiSelectItem.superclass.setSelected.apply(this, arguments);
    this.checkbox.setSelected(v);
  }
});
BI.MultiSelectItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_item", BI.MultiSelectItem);

/***/ }),
/* 431 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/2/2.
 *
 * @class BI.SingleSelectIconTextItem
 * @extends BI.BasicButton
 */
BI.SingleSelectIconTextItem = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectIconTextItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-single-select-icon-text-item bi-list-item-active",
      attributes: {
        tabIndex: 1
      },
      iconCls: "",
      height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.text = BI.createWidget({
      type: "bi.icon_text_item",
      element: this,
      cls: o.iconCls,
      once: o.once,
      iconWrapperWidth: o.iconWrapperWidth,
      selected: o.selected,
      height: o.height,
      iconHeight: o.iconHeight,
      iconWidth: o.iconWidth,
      textHgap: o.textHgap,
      textVgap: o.textVgap,
      textLgap: o.textLgap,
      textRgap: o.textRgap,
      text: o.text,
      keyword: o.keyword,
      value: o.value,
      py: o.py
    });
    this.text.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
  },
  _setEnable: function _setEnable(enable) {
    BI.SingleSelectIconTextItem.superclass._setEnable.apply(this, arguments);

    if (enable === true) {
      this.element.attr("tabIndex", 1);
    } else if (enable === false) {
      this.element.removeAttr("tabIndex");
    }
  },
  isSelected: function isSelected() {
    return this.text.isSelected();
  },
  setSelected: function setSelected(b) {
    this.text.setSelected(b);
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  }
});
BI.shortcut("bi.single_select_icon_text_item", BI.SingleSelectIconTextItem);

/***/ }),
/* 432 */
/***/ (function(module, exports) {

BI.SingleSelectItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-single-select-item bi-list-item-active",
      attributes: {
        tabIndex: 1
      },
      textHgap: 10,
      height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      textAlign: "left"
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      element: this,
      textAlign: o.textAlign,
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap || o.textHgap,
      vgap: o.textVgap,
      lgap: o.textLgap,
      rgap: o.textRgap,
      text: o.text,
      keyword: o.keyword,
      value: o.value,
      py: o.py
    });
  },
  _setEnable: function _setEnable(enable) {
    BI.SingleSelectItem.superclass._setEnable.apply(this, arguments);

    if (enable === true) {
      this.element.attr("tabIndex", 1);
    } else if (enable === false) {
      this.element.removeAttr("tabIndex");
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.SingleSelectItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.SingleSelectItem.EVENT_CHANGE, this.isSelected(), this);
    }
  },
  setSelected: function setSelected(v) {
    BI.SingleSelectItem.superclass.setSelected.apply(this, arguments);
  }
});
BI.SingleSelectItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_select_item", BI.SingleSelectItem);

/***/ }),
/* 433 */
/***/ (function(module, exports) {

/**
 * guy
 * 单选框item
 * @type {*|void|Object}
 */
BI.SingleSelectRadioItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectRadioItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-single-select-radio-item",
      attributes: {
        tabIndex: 1
      },
      height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      iconWrapperWidth: 16,
      textHgap: 10
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.iconWrapperWidth || o.height, "fill"],
      items: [{
        type: "bi.center_adapt",
        items: [{
          type: "bi.radio",
          ref: function ref(_ref) {
            self.radio = _ref;
          }
        }]
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          cls: "list-item-text",
          textAlign: "left",
          whiteSpace: "nowrap",
          textHeight: o.height,
          height: o.height,
          hgap: o.hgap || o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          keyword: o.keyword,
          value: o.value,
          py: o.py
        }
      }]
    };
  },
  _setEnable: function _setEnable(enable) {
    BI.SingleSelectRadioItem.superclass._setEnable.apply(this, arguments);

    if (enable === true) {
      this.element.attr("tabIndex", 1);
    } else if (enable === false) {
      this.element.removeAttr("tabIndex");
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.SingleSelectRadioItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.SingleSelectRadioItem.EVENT_CHANGE, this.isSelected(), this);
    }
  },
  setSelected: function setSelected(v) {
    BI.SingleSelectRadioItem.superclass.setSelected.apply(this, arguments);
    this.radio.setSelected(v);
  }
});
BI.SingleSelectRadioItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_select_radio_item", BI.SingleSelectRadioItem);

/***/ }),
/* 434 */
/***/ (function(module, exports) {

/**
 * Created by roy on 15/10/16.
 */
BI.ArrowNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.ArrowNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-arrow-group-node bi-list-item",
      id: "",
      pId: "",
      open: false,
      height: 24,
      iconWrapperWidth: 16
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.arrow_group_node_checkbox",
      expandIcon: o.expandIcon,
      collapseIcon: o.collapseIcon
    });
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.iconWrapperWidth || o.height, "fill"],
      items: [this.checkbox, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          textAlign: "left",
          whiteSpace: "nowrap",
          textHeight: o.height,
          height: o.height,
          hgap: o.hgap || o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          py: o.py,
          keyword: o.keyword
        }
      }]
    };
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.ArrowNode.superclass.doClick.apply(this, arguments);
    this.checkbox.setSelected(this.isOpened());
  },
  setText: function setText(text) {
    BI.ArrowNode.superclass.setText.apply(this, arguments);
    this.text.setText(text);
  },
  setOpened: function setOpened(v) {
    BI.ArrowNode.superclass.setOpened.apply(this, arguments);
    this.checkbox.setSelected(v);
  }
});
BI.shortcut("bi.arrow_group_node", BI.ArrowNode);

/***/ }),
/* 435 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 * Created by GUY on 2015/9/6.
 * @class BI.FirstPlusGroupNode
 * @extends BI.NodeButton
 */
BI.FirstPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.FirstPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-first-plus-group-node bi-list-item",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.FirstPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.first_tree_node_checkbox",
      stopPropagation: true,
      iconHeight: o.height,
      iconWidth: o.height
    });
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    this.checkbox.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        if (this.isSelected()) {
          self.triggerExpand();
        } else {
          self.triggerCollapse();
        }
      }
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      el: this.checkbox
    }, this.text);
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }))));
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.FirstPlusGroupNode.superclass.doClick.apply(this, arguments);
    this.checkbox.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.FirstPlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.checkbox)) {
      this.checkbox.setSelected(v);
    }
  }
});
BI.shortcut("bi.first_plus_group_node", BI.FirstPlusGroupNode);

/***/ }),
/* 436 */
/***/ (function(module, exports) {

/**
 * Created by User on 2016/3/31.
 */

/**
 * > + icon + 文本
 * @class BI.IconArrowNode
 * @extends BI.NodeButton
 */
BI.IconArrowNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.IconArrowNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-icon-arrow-node bi-list-item",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      open: false,
      height: 24,
      iconHeight: 12,
      iconWidth: 12,
      iconCls: "",
      iconWrapperWidth: 16
    });
  },
  _init: function _init() {
    BI.IconArrowNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.arrow_group_node_checkbox",
      expandIcon: o.expandIcon,
      collapseIcon: o.collapseIcon,
      width: 24,
      stopPropagation: true
    });
    var icon = BI.createWidget({
      type: "bi.icon_label",
      width: 24,
      cls: o.iconCls,
      iconWidth: o.iconWidth,
      iconHeight: o.iconHeight
    });
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    this.checkbox.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        if (this.isSelected()) {
          self.triggerExpand();
        } else {
          self.triggerCollapse();
        }
      }
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, {
      width: o.iconWrapperWidth,
      el: this.checkbox
    }, {
      width: 16,
      el: icon
    }, this.text);
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items,
      rgap: 5
    }))));
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.IconArrowNode.superclass.doClick.apply(this, arguments);
    this.checkbox.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.IconArrowNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.checkbox)) {
      this.checkbox.setSelected(v);
    }
  }
});
BI.shortcut("bi.icon_arrow_node", BI.IconArrowNode);

/***/ }),
/* 437 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 * Created by GUY on 2015/9/6.
 * @class BI.LastPlusGroupNode
 * @extends BI.NodeButton
 */
BI.LastPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.LastPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-last-plus-group-node bi-list-item",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.LastPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.last_tree_node_checkbox",
      stopPropagation: true,
      iconHeight: o.height,
      iconWidth: o.height
    });
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    this.checkbox.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        if (this.isSelected()) {
          self.triggerExpand();
        } else {
          self.triggerCollapse();
        }
      }
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      el: this.checkbox
    }, this.text);
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }))));
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.LastPlusGroupNode.superclass.doClick.apply(this, arguments);
    this.checkbox.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.LastPlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.checkbox)) {
      this.checkbox.setSelected(v);
    }
  }
});
BI.shortcut("bi.last_plus_group_node", BI.LastPlusGroupNode);

/***/ }),
/* 438 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 * Created by GUY on 2015/9/6.
 * @class BI.MidPlusGroupNode
 * @extends BI.NodeButton
 */
BI.MidPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MidPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-mid-plus-group-node bi-list-item",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.MidPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.mid_tree_node_checkbox",
      stopPropagation: true,
      iconHeight: o.height,
      iconWidth: o.height
    });
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    this.checkbox.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        if (this.isSelected()) {
          self.triggerExpand();
        } else {
          self.triggerCollapse();
        }
      }
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      el: this.checkbox
    }, this.text);
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }))));
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.MidPlusGroupNode.superclass.doClick.apply(this, arguments);
    this.checkbox.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.MidPlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.checkbox)) {
      this.checkbox.setSelected(v);
    }
  }
});
BI.shortcut("bi.mid_plus_group_node", BI.MidPlusGroupNode);

/***/ }),
/* 439 */
/***/ (function(module, exports) {

BI.MultiLayerIconArrowNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiLayerIconArrowNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-multilayer-icon-arrow-node bi-list-item",
      layer: 0,
      // 第几层级
      id: "",
      pId: "",
      open: false,
      height: 24,
      iconHeight: 16,
      iconWidth: 16,
      iconCls: ""
    });
  },
  _init: function _init() {
    BI.MultiLayerIconArrowNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.node = BI.createWidget({
      type: "bi.icon_arrow_node",
      iconCls: o.iconCls,
      cls: "bi-list-item-none",
      id: o.id,
      pId: o.pId,
      open: o.open,
      height: o.height,
      iconHeight: o.iconHeight,
      iconWidth: o.iconWidth,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    this.node.on(BI.Controller.EVENT_CHANGE, function (type) {
      self.setSelected(self.isSelected());
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    var items = [];
    BI.count(0, o.layer, function () {
      items.push({
        type: "bi.layout",
        width: 15,
        height: o.height
      });
    });
    items.push(this.node);
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, 15),
      items: items
    });
  },
  isOnce: function isOnce() {
    return true;
  },
  doRedMark: function doRedMark() {
    this.node.doRedMark.apply(this.node, arguments);
  },
  unRedMark: function unRedMark() {
    this.node.unRedMark.apply(this.node, arguments);
  },
  isSelected: function isSelected() {
    return this.node.isSelected();
  },
  setSelected: function setSelected(b) {
    BI.MultiLayerIconArrowNode.superclass.setSelected.apply(this, arguments);
    this.node.setSelected(b);
  },
  doClick: function doClick() {
    BI.NodeButton.superclass.doClick.apply(this, arguments);
    this.node.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.MultiLayerIconArrowNode.superclass.setOpened.apply(this, arguments);
    this.node.setOpened(v);
  }
});
BI.shortcut("bi.multilayer_icon_arrow_node", BI.MultiLayerIconArrowNode);

/***/ }),
/* 440 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 * Created by GUY on 2015/9/6.
 * @class BI.PlusGroupNode
 * @extends BI.NodeButton
 */
BI.PlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.PlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-plus-group-node bi-list-item",
      id: "",
      pId: "",
      open: false,
      height: 24
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.tree_node_checkbox",
      iconHeight: o.height,
      iconWidth: o.iconWrapperWidth || o.height
    });
    this.checkbox.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        self.setSelected(self.isSelected());
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    return {
      type: "bi.vertical_adapt",
      columnSize: [o.iconWrapperWidth || o.height, "fill"],
      items: [this.checkbox, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          textAlign: "left",
          whiteSpace: "nowrap",
          textHeight: o.height,
          height: o.height,
          hgap: o.hgap || o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          py: o.py
        }
      }]
    };
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.PlusGroupNode.superclass.doClick.apply(this, arguments);
    this.checkbox.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.PlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (this.checkbox) {
      this.checkbox.setSelected(v);
    }
  }
});
BI.shortcut("bi.plus_group_node", BI.PlusGroupNode);

/***/ }),
/* 441 */
/***/ (function(module, exports) {

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

BI.TreeNodeSwitcher = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TreeNodeSwitcher.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-tree-node-switcher",
      iconWidth: 24,
      iconHeight: 24,
      isFirstNode: false,
      isLastNode: false,
      layer: 0
    });
  },
  render: function render() {
    var _this$getIconCls = this.getIconCls(),
        _this$getIconCls2 = _slicedToArray(_this$getIconCls, 2),
        collapse = _this$getIconCls2[0],
        expand = _this$getIconCls2[1];

    return {
      type: "bi.icon_label",
      iconWidth: this.options.iconWidth,
      iconHeight: this.options.iconHeight,
      cls: this.options.open ? expand : collapse
    };
  },
  getIconCls: function getIconCls() {
    var options = this.options;

    if (options.layer === 0 && options.isFirstNode && options.isLastNode) {
      //  只有一层，并且是第一个节点，并且是最后一个节点
      return BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? ["tree-solid-collapse-icon-type1", "tree-solid-expand-icon-type1"] : ["tree-collapse-icon-type1", "tree-expand-icon-type1"];
    } else if (options.layer === 0 && options.isFirstNode) {
      //  第一层，并且是第一个节点
      return BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? ["tree-solid-collapse-icon-type1", "tree-solid-expand-icon-type1"] : ["tree-collapse-icon-type2", "tree-expand-icon-type2"];
    } else if (options.isLastNode) {
      //  最后一个节点
      return BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? ["tree-solid-collapse-icon-type1", "tree-solid-expand-icon-type1"] : ["tree-collapse-icon-type4", "tree-expand-icon-type4"];
    } else {
      //  其他情况
      return BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? ["tree-solid-collapse-icon-type1", "tree-solid-expand-icon-type1"] : ["tree-collapse-icon-type3", "tree-expand-icon-type3"];
    }
  },
  setOpened: function setOpened(b) {
    BI.TreeNodeSwitcher.superclass.setOpened.apply(this, arguments);

    var _this$getIconCls3 = this.getIconCls(),
        _this$getIconCls4 = _slicedToArray(_this$getIconCls3, 2),
        collapse = _this$getIconCls4[0],
        expand = _this$getIconCls4[1];

    if (b) {
      this.element.addClass(expand).removeClass(collapse);
    } else {
      this.element.addClass(collapse).removeClass(expand);
    }
  },
  doClick: function doClick() {
    BI.TreeNodeSwitcher.superclass.doClick.apply(this, arguments);
    this.fireEvent(BI.TreeNodeSwitcher.EVENT_CHANGE, this);
  }
});
BI.TreeNodeSwitcher.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.tree_node_switcher", BI.TreeNodeSwitcher);

/***/ }),
/* 442 */
/***/ (function(module, exports) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

BI.BasicTreeNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig(props) {
    var conf = BI.BasicTreeNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-tree-node " + (props.selectable ? "bi-list-item-active" : "bi-list-item"),
      id: "",
      pId: "",
      open: false,
      height: 24,
      readonly: true,
      isFirstNode: false,
      isLastNode: false,
      switcherIcon: {},
      selectable: true,
      disabled: false // disabled不会影响展开收起功能

    });
  },
  render: function render() {
    var _this = this;

    var self = this,
        o = this.options;

    var checkbox = _objectSpread(_objectSpread({
      type: "bi.tree_node_switcher",
      __ref: function __ref(_ref) {
        self.switcher = _ref;
      },
      iconHeight: o.height,
      iconWidth: o.iconWrapperWidth || o.height,
      open: o.open,
      isFirstNode: o.isFirstNode,
      isLastNode: o.isLastNode,
      layer: o.layer
    }, o.switcherIcon), {}, {
      stopPropagation: o.selectable,
      mounted: function mounted() {
        this.setEnable(true);
      },
      listeners: [{
        eventName: "EVENT_CHANGE",
        action: function action() {
          if (!_this.isEnabled() || o.selectable) {
            _this.isOpened() ? _this.triggerCollapse() : _this.triggerExpand();
          }
        }
      }]
    });

    return {
      type: "bi.vertical_adapt",
      columnSize: [o.iconWrapperWidth || o.height, "fill"],
      items: [{
        el: checkbox,
        lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2 //  偏移公式为每一层的偏移量为节点高度的一半

      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          textAlign: "left",
          whiteSpace: "nowrap",
          textHeight: o.height,
          height: o.height,
          hgap: o.hgap || o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          py: o.py
        }
      }]
    };
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    if (this.options.selectable) {
      return;
    }

    BI.BasicTreeNode.superclass.doClick.apply(this, arguments);
  },
  setOpened: function setOpened(v) {
    BI.BasicTreeNode.superclass.setOpened.apply(this, arguments);
    this.switcher.setOpened(v);
  },
  setValue: function setValue() {
    BI.BasicTreeNode.superclass.setValue.apply(this, arguments);
  }
});
BI.shortcut("bi.tree_node", BI.BasicTreeNode);

/***/ }),
/* 443 */
/***/ (function(module, exports) {

/**
 * Created by Windy on 2018/2/1.
 */
BI.Switch = BI.inherit(BI.BasicButton, {
  constants: {
    CIRCLE_SIZE: 12
  },
  props: {
    extraCls: "bi-switch",
    attributes: {
      tabIndex: 1
    },
    height: 20,
    width: 44,
    showTip: false
  },
  render: function render() {
    var self = this,
        o = this.options,
        c = this.constants;
    var tgap = (o.height - c.CIRCLE_SIZE) / 2;
    return {
      type: "bi.absolute",
      ref: function ref() {
        self.layout = this;
      },
      items: [{
        el: {
          type: "bi.text_button",
          cls: "circle-button"
        },
        width: 12,
        height: 12,
        top: tgap,
        left: o.selected ? 28 : 4
      }, {
        type: "bi.label",
        text: BI.i18nText("BI-Basic_Simple_Open"),
        cls: "content-tip",
        left: 8,
        top: tgap - 2,
        invisible: !(o.showTip && o.selected),
        ref: function ref(_ref) {
          self.openTip = _ref;
        }
      }, {
        type: "bi.label",
        text: BI.i18nText("BI-Basic_Simple_Close"),
        cls: "content-tip",
        right: 8,
        top: tgap - 2,
        invisible: !(o.showTip && !o.selected),
        ref: function ref(_ref2) {
          self.closeTip = _ref2;
        }
      }]
    };
  },
  _setEnable: function _setEnable(enable) {
    BI.Switch.superclass._setEnable.apply(this, arguments);

    if (enable === true) {
      this.element.attr("tabIndex", 1);
    } else if (enable === false) {
      this.element.removeAttr("tabIndex");
    }
  },
  setSelected: function setSelected(v) {
    BI.Switch.superclass.setSelected.apply(this, arguments);
    this.layout.attr("items")[0].left = v ? 28 : 4;
    this.layout.resize();
    this.options.showTip && this.openTip.setVisible(v);
    this.options.showTip && this.closeTip.setVisible(!v);
  },
  doClick: function doClick() {
    BI.Switch.superclass.doClick.apply(this, arguments);
    this.fireEvent(BI.Switch.EVENT_CHANGE, this.isSelected());
  }
});
BI.Switch.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.switch", BI.Switch);

/***/ }),
/* 444 */
/***/ (function(module, exports) {

BI.FirstTreeLeafItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.FirstTreeLeafItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-first-tree-leaf-item bi-list-item-active",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      layer: 0,
      height: 24
    });
  },
  _init: function _init() {
    BI.FirstTreeLeafItem.superclass._init.apply(this, arguments);

    var o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, o.layer === 0 ? "" : {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2,
      el: {
        type: "bi.layout",
        cls: o.pNode && o.pNode.isLastNode ? "" : this._getBaseLineCls(),
        width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2,
        height: o.height
      }
    }, {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      el: {
        type: "bi.layout",
        cls: this._getFirstLineCls(),
        width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        height: o.height
      }
    }, {
      el: this.text
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }))));
  },
  _getBaseLineCls: function _getBaseLineCls() {
    switch (BI.STYLE_CONSTANTS.LINK_LINE_TYPE) {
      case "solid":
        return "base-solid-line-conn-background";

      default:
        return "base-line-conn-background";
    }
  },
  _getFirstLineCls: function _getFirstLineCls() {
    switch (BI.STYLE_CONSTANTS.LINK_LINE_TYPE) {
      case "solid":
        return "first-solid-line-conn-background";

      default:
        return "first-line-conn-background";
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  }
});
BI.shortcut("bi.first_tree_leaf_item", BI.FirstTreeLeafItem);

/***/ }),
/* 445 */
/***/ (function(module, exports) {

BI.IconTreeLeafItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.IconTreeLeafItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-icon-tree-leaf-item bi-list-item-active",
      logic: {
        dynamic: false
      },
      height: 24,
      iconWidth: 16,
      iconHeight: 16,
      iconCls: ""
    });
  },
  _init: function _init() {
    BI.IconTreeLeafItem.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    var icon = BI.createWidget({
      type: "bi.center_adapt",
      width: 24,
      cls: o.iconCls,
      items: [{
        type: "bi.icon",
        width: o.iconWidth,
        height: o.iconHeight
      }]
    });
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, {
      width: 16,
      el: icon
    }, {
      el: this.text
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items,
      hgap: 5
    }))));
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  }
});
BI.shortcut("bi.icon_tree_leaf_item", BI.IconTreeLeafItem);

/***/ }),
/* 446 */
/***/ (function(module, exports) {

BI.LastTreeLeafItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.LastTreeLeafItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-last-tree-leaf-item bi-list-item-active",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      layer: 0,
      height: 24
    });
  },
  _init: function _init() {
    BI.LastTreeLeafItem.superclass._init.apply(this, arguments);

    var o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, o.layer === 0 ? "" : {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2,
      el: {
        type: "bi.layout",
        cls: o.pNode && o.pNode.isLastNode ? "" : this._getBaseLineCls(),
        width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2,
        height: o.height
      }
    }, {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      el: {
        type: "bi.layout",
        cls: this._getLastLineCls(),
        width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        height: o.height
      }
    }, {
      el: this.text
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }))));
  },
  _getBaseLineCls: function _getBaseLineCls() {
    switch (BI.STYLE_CONSTANTS.LINK_LINE_TYPE) {
      case "solid":
        return "base-solid-line-conn-background";

      default:
        return "base-line-conn-background";
    }
  },
  _getLastLineCls: function _getLastLineCls() {
    switch (BI.STYLE_CONSTANTS.LINK_LINE_TYPE) {
      case "solid":
        return "last-solid-line-conn-background";

      default:
        return "last-line-conn-background";
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  }
});
BI.shortcut("bi.last_tree_leaf_item", BI.LastTreeLeafItem);

/***/ }),
/* 447 */
/***/ (function(module, exports) {

BI.MidTreeLeafItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MidTreeLeafItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-mid-tree-leaf-item bi-list-item-active",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      layer: 0,
      height: 24
    });
  },
  _init: function _init() {
    BI.MidTreeLeafItem.superclass._init.apply(this, arguments);

    var o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, o.layer === 0 ? "" : {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2,
      el: {
        type: "bi.layout",
        cls: o.pNode && o.pNode.isLastNode ? "" : this._getBaseLineCls(),
        width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2,
        height: o.height
      }
    }, {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      el: {
        type: "bi.layout",
        cls: this._getMidLineCls(),
        width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        height: o.height
      }
    }, {
      el: this.text
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }))));
  },
  _getBaseLineCls: function _getBaseLineCls() {
    switch (BI.STYLE_CONSTANTS.LINK_LINE_TYPE) {
      case "solid":
        return "base-solid-line-conn-background";

      default:
        return "base-line-conn-background";
    }
  },
  _getMidLineCls: function _getMidLineCls() {
    switch (BI.STYLE_CONSTANTS.LINK_LINE_TYPE) {
      case "solid":
        return "mid-solid-line-conn-background";

      default:
        return "mid-line-conn-background";
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  }
});
BI.shortcut("bi.mid_tree_leaf_item", BI.MidTreeLeafItem);

/***/ }),
/* 448 */
/***/ (function(module, exports) {

/**
 * @class BI.MultiLayerIconTreeLeafItem
 * @extends BI.BasicButton
 */
BI.MultiLayerIconTreeLeafItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerIconTreeLeafItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-multilayer-icon-tree-leaf-item bi-list-item-active",
      layer: 0,
      height: 24,
      iconCls: "",
      iconHeight: 16,
      iconWidth: 16
    });
  },
  _init: function _init() {
    BI.MultiLayerIconTreeLeafItem.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.item = BI.createWidget({
      type: "bi.icon_tree_leaf_item",
      cls: "bi-list-item-none",
      iconCls: o.iconCls,
      id: o.id,
      pId: o.pId,
      isFront: true,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword,
      iconWidth: o.iconWidth,
      iconHeight: o.iconHeight
    });
    this.item.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        // 本身实现click功能
        return;
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    var items = [];
    BI.count(0, o.layer, function () {
      items.push({
        type: "bi.layout",
        width: 15,
        height: o.height
      });
    });
    items.push(this.item);
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, 15),
      items: items
    });
  },
  doRedMark: function doRedMark() {
    this.item.doRedMark.apply(this.item, arguments);
  },
  unRedMark: function unRedMark() {
    this.item.unRedMark.apply(this.item, arguments);
  },
  doHighLight: function doHighLight() {
    this.item.doHighLight.apply(this.item, arguments);
  },
  unHighLight: function unHighLight() {
    this.item.unHighLight.apply(this.item, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  },
  doClick: function doClick() {
    BI.MultiLayerIconTreeLeafItem.superclass.doClick.apply(this, arguments);
    this.item.setSelected(this.isSelected());
  },
  setSelected: function setSelected(v) {
    BI.MultiLayerIconTreeLeafItem.superclass.setSelected.apply(this, arguments);
    this.item.setSelected(v);
  },
  getValue: function getValue() {
    return this.options.value;
  }
});
BI.shortcut("bi.multilayer_icon_tree_leaf_item", BI.MultiLayerIconTreeLeafItem);

/***/ }),
/* 449 */
/***/ (function(module, exports) {

BI.RootTreeLeafItem = BI.inherit(BI.BasicButton, {
  props: {
    baseCls: "bi-root-tree-leaf-item bi-list-item-active",
    logic: {
      dynamic: false
    },
    id: "",
    pId: "",
    layer: 0,
    height: 24
  },
  render: function render() {
    var self = this;
    var o = this.options;
    var text = {
      type: "bi.label",
      ref: function ref(_ref) {
        self.text = _ref;
      },
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    };
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      el: {
        type: "bi.layout",
        width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        height: o.height
      }
    }, {
      el: text
    });
    return BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }));
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  }
});
BI.shortcut("bi.root_tree_leaf_item", BI.RootTreeLeafItem);

/***/ }),
/* 450 */
/***/ (function(module, exports) {

/**
 * 树叶子节点
 * Created by GUY on 2015/9/6.
 * @class BI.TreeTextLeafItem
 * @extends BI.BasicButton
 */
BI.TreeTextLeafItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TreeTextLeafItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-tree-text-leaf-item bi-list-item-active",
      id: "",
      pId: "",
      height: 24,
      hgap: 0,
      lgap: 0,
      rgap: 0
    });
  },
  _init: function _init() {
    BI.TreeTextLeafItem.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      lgap: o.lgap,
      rgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    BI.createWidget({
      type: "bi.htape",
      element: this,
      items: [{
        el: this.text
      }]
    });
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  }
});
BI.shortcut("bi.tree_text_leaf_item", BI.TreeTextLeafItem);

/***/ }),
/* 451 */
/***/ (function(module, exports) {

BI.BasicTreeItem = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.BasicTreeItem.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-tree-item bi-list-item-active",
      id: "",
      pId: "",
      height: 24,
      readonly: true,
      isFirstNode: false,
      isLastNode: false
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical_adapt",
      columnSize: ["", "fill"],
      items: [{
        el: {
          type: "bi.layout",
          height: o.height,
          width: o.height,
          cls: this.getLineCls()
        },
        lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2 //  偏移公式为每一层的偏移量为节点高度的一半

      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.text = _ref;
          },
          textAlign: "left",
          whiteSpace: "nowrap",
          textHeight: o.height,
          height: o.height,
          hgap: o.hgap || o.textHgap,
          vgap: o.textVgap,
          lgap: o.textLgap,
          rgap: o.textRgap,
          text: o.text,
          value: o.value,
          keyword: o.keyword,
          py: o.py
        }
      }]
    };
  },
  getLineCls: function getLineCls() {
    var options = this.options;

    if (options.layer === 0 && options.isFirstNode && options.isLastNode) {
      return "";
    } else if (options.layer === 0 && options.isFirstNode) {
      return BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? "tree-first-solid-line-conn-background" : "first-line-conn-background";
    } else if (options.isLastNode) {
      return BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? "tree-last-solid-line-conn-background" : "last-line-conn-background";
    } else {
      return BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? "tree-mid-solid-line-conn-background" : "mid-line-conn-background";
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  }
});
BI.shortcut("bi.tree_item", BI.BasicTreeItem);

/***/ }),
/* 452 */
/***/ (function(module, exports) {

/**
 * 专门为calendar的视觉加的button，作为私有button,不能配置任何属性，也不要用这个玩意
 */
BI.CalendarDateItem = BI.inherit(BI.BasicButton, {
  props: function props() {
    return {
      baseCls: "bi-calendar-date-item",
      height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 8
    };
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.text_item",
          cls: "bi-border-radius bi-list-item-select",
          textAlign: "center",
          text: o.text,
          value: o.value,
          ref: function ref() {
            self.text = this;
          }
        },
        left: o.lgap,
        right: o.rgap,
        top: o.tgap,
        bottom: o.bgap
      }]
    };
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  setSelected: function setSelected(b) {
    BI.CalendarDateItem.superclass.setSelected.apply(this, arguments);
    this.text.setSelected(b);
  },
  getValue: function getValue() {
    return this.text.getValue();
  }
});
BI.shortcut("bi.calendar_date_item", BI.CalendarDateItem);

/***/ }),
/* 453 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/8/28.
 * @class BI.Calendar
 * @extends BI.Widget
 */
BI.Calendar = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.Calendar.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-calendar",
      logic: {
        dynamic: false
      },
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      year: 2015,
      month: 8,
      day: 25
    });
  },
  _dateCreator: function _dateCreator(Y, M, D) {
    var self = this,
        o = this.options,
        log = {},
        De = BI.getDate();
    var mins = o.min.match(/\d+/g);
    var maxs = o.max.match(/\d+/g);
    De.setFullYear(Y, M, D);
    log.ymd = [De.getFullYear(), De.getMonth(), De.getDate()];

    var MD = BI.Date._MD.slice(0);

    MD[1] = BI.isLeapYear(log.ymd[0]) ? 29 : 28; // 日期所在月第一天

    De.setFullYear(log.ymd[0], log.ymd[1], 1); // 是周几

    log.FDay = De.getDay(); // 当前BI.StartOfWeek与周日对齐后的FDay是周几

    var offSetFDay = (7 - BI.StartOfWeek + log.FDay) % 7; // 当前月页第一天是几号

    log.PDay = MD[M === 0 ? 11 : M - 1] - offSetFDay + 1;
    log.NDay = 1;
    var items = [];
    BI.each(BI.range(42), function (i) {
      var td = {},
          YY = log.ymd[0],
          MM = log.ymd[1] + 1,
          DD; // 上个月的日期

      if (i < offSetFDay) {
        td.lastMonth = true;
        DD = i + log.PDay; // 上一年

        MM === 1 && (YY -= 1);
        MM = MM === 1 ? 12 : MM - 1;
      } else if (i >= offSetFDay && i < offSetFDay + MD[log.ymd[1]]) {
        DD = i - offSetFDay + 1;

        if (i - offSetFDay + 1 === log.ymd[2]) {
          td.currentDay = true;
        }
      } else {
        td.nextMonth = true;
        DD = log.NDay++;
        MM === 12 && (YY += 1);
        MM = MM === 12 ? 1 : MM + 1;
      }

      if (BI.checkDateVoid(YY, MM, DD, mins, maxs)[0]) {
        td.disabled = true;
      }

      td.text = DD;
      items.push(td);
    });
    return items;
  },
  _init: function _init() {
    BI.Calendar.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    var items = BI.map(this._getWeekLabel(), function (i, value) {
      return {
        type: "bi.label",
        height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        text: value
      };
    });
    var title = BI.createWidget({
      type: "bi.button_group",
      height: 44,
      items: items,
      layouts: [{
        type: "bi.center",
        hgap: 5,
        vgap: 10
      }]
    });
    this.days = BI.createWidget({
      type: "bi.button_group",
      items: BI.createItems(this._getItems(), {}),
      value: o.year + "-" + o.month + "-" + o.day,
      layouts: [BI.LogicFactory.createLogic("table", BI.extend({}, o.logic, {
        columns: 7,
        rows: 6,
        columnSize: [1 / 7, 1 / 7, 1 / 7, 1 / 7, 1 / 7, 1 / 7, 1 / 7],
        rowSize: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 8
      }))]
    });
    this.days.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic("vertical", BI.extend({}, o.logic, {
      items: BI.LogicFactory.createLogicItemsByDirection("top", title, {
        el: this.days,
        tgap: -5
      })
    }))));
  },
  _getWeekLabel: function _getWeekLabel() {
    return BI.map(BI.range(0, 7), function (idx, v) {
      return BI.getShortDayName((v + BI.StartOfWeek) % 7);
    });
  },
  isFrontDate: function isFrontDate() {
    var o = this.options,
        c = this._const;
    var Y = o.year,
        M = o.month,
        De = BI.getDate(),
        day = De.getDay();
    Y = Y | 0;
    De.setFullYear(Y, M, 1);
    var newDate = BI.getOffsetDate(De, -1 * (day + 1));
    return !!BI.checkDateVoid(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), o.min, o.max)[0];
  },
  isFinalDate: function isFinalDate() {
    var o = this.options,
        c = this._const;
    var Y = o.year,
        M = o.month,
        De = BI.getDate(),
        day = De.getDay();
    Y = Y | 0;
    De.setFullYear(Y, M, 1);
    var newDate = BI.getOffsetDate(De, 42 - day);
    return !!BI.checkDateVoid(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), o.min, o.max)[0];
  },
  _getItems: function _getItems() {
    var o = this.options;

    var days = this._dateCreator(o.year, o.month - 1, o.day);

    var items = [];
    items.push(days.slice(0, 7));
    items.push(days.slice(7, 14));
    items.push(days.slice(14, 21));
    items.push(days.slice(21, 28));
    items.push(days.slice(28, 35));
    items.push(days.slice(35, 42));
    return BI.map(items, function (i, item) {
      return BI.map(item, function (j, td) {
        var month = td.lastMonth ? o.month - 1 : td.nextMonth ? o.month + 1 : o.month;
        var year = o.year;

        if (month > 12) {
          month = 1;
          year++;
        } else if (month < 1) {
          month = 12;
          year--;
        }

        return BI.extend(td, {
          type: "bi.calendar_date_item",
          once: false,
          forceSelected: true,
          value: year + "-" + month + "-" + td.text,
          disabled: td.disabled,
          cls: td.lastMonth || td.nextMonth ? "not-current-month-day" : "",
          lgap: 2,
          rgap: 2,
          tgap: 4,
          bgap: 4 // selected: td.currentDay

        });
      });
    });
  },
  _populate: function _populate() {
    this.days.populate(this._getItems());
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;

    if (BI.isNotEmptyString(o.min)) {
      o.min = minDate;

      this._populate();
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;

    if (BI.isNotEmptyString(o.max)) {
      o.max = maxDate;

      this._populate();
    }
  },
  setValue: function setValue(ob) {
    this.days.setValue([ob.year + "-" + ob.month + "-" + ob.day]);
  },
  getValue: function getValue() {
    var date = this.days.getValue()[0].match(/\d+/g);
    return {
      year: date[0] | 0,
      month: date[1] | 0,
      day: date[2] | 0
    };
  }
});
BI.extend(BI.Calendar, {
  getPageByDateJSON: function getPageByDateJSON(json) {
    var year = BI.getDate().getFullYear();
    var month = BI.getDate().getMonth();
    var page = (json.year - year) * 12;
    page += json.month - 1 - month;
    return page;
  },
  getDateJSONByPage: function getDateJSONByPage(v) {
    var months = BI.getDate().getMonth();
    var page = v; // 对当前page做偏移,使到当前年初

    page = page + months;
    var year = BI.parseInt(page / 12);

    if (page < 0 && page % 12 !== 0) {
      year--;
    }

    var month = page >= 0 ? page % 12 : (12 + page % 12) % 12;
    return {
      year: BI.getDate().getFullYear() + year,
      month: month + 1
    };
  }
});
BI.shortcut("bi.calendar", BI.Calendar);

/***/ }),
/* 454 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/8/28.
 * @class BI.YearCalendar
 * @extends BI.Widget
 */
BI.YearCalendar = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.YearCalendar.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-year-calendar",
      behaviors: {},
      logic: {
        dynamic: false
      },
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      year: null
    });
  },
  _yearCreator: function _yearCreator(Y) {
    var o = this.options;
    Y = Y | 0;
    var start = BI.YearCalendar.getStartYear(Y);
    var items = []; // 对于年控件来说，只要传入的minDate和maxDate的year区间包含v就是合法的

    var startDate = BI.parseDateTime(o.min, "%Y-%X-%d");
    var endDate = BI.parseDateTime(o.max, "%Y-%X-%d");
    BI.each(BI.range(BI.YearCalendar.INTERVAL), function (i) {
      var td = {};

      if (BI.checkDateVoid(start + i, 1, 1, BI.print(BI.getDate(startDate.getFullYear(), 0, 1), "%Y-%X-%d"), BI.print(BI.getDate(endDate.getFullYear(), 0, 1), "%Y-%X-%d"))[0]) {
        td.disabled = true;
      }

      td.text = start + i;
      items.push(td);
    });
    return items;
  },
  _init: function _init() {
    BI.YearCalendar.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.currentYear = BI.getDate().getFullYear();
    this.years = BI.createWidget({
      type: "bi.button_group",
      behaviors: o.behaviors,
      items: BI.createItems(this._getItems(), {}),
      layouts: [BI.LogicFactory.createLogic("table", BI.extend({}, o.logic, {
        columns: 2,
        rows: 6,
        columnSize: [1 / 2, 1 / 2],
        rowSize: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
      })), {
        type: "bi.center_adapt",
        vgap: 2
      }]
    });
    this.years.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic("vertical", BI.extend({}, o.logic, {
      scrolly: true,
      vgap: 5,
      hgap: 6,
      items: BI.LogicFactory.createLogicItemsByDirection("top", this.years)
    }))));
  },
  isFrontYear: function isFrontYear() {
    var o = this.options;
    var Y = o.year;
    Y = Y | 0;
    return !!BI.checkDateVoid(BI.YearCalendar.getStartYear(Y) - 1, 1, 1, o.min, o.max)[0];
  },
  isFinalYear: function isFinalYear() {
    var o = this.options,
        c = this._const;
    var Y = o.year;
    Y = Y | 0;
    return !!BI.checkDateVoid(BI.YearCalendar.getEndYear(Y) + 1, 1, 1, o.min, o.max)[0];
  },
  _getItems: function _getItems() {
    var o = this.options;

    var years = this._yearCreator(o.year || this.currentYear); // 纵向排列年


    var len = years.length,
        tyears = BI.makeArray(len, "");
    var map = [0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11];
    BI.each(years, function (i, y) {
      tyears[i] = years[map[i]];
    });
    var items = [];
    items.push(tyears.slice(0, 2));
    items.push(tyears.slice(2, 4));
    items.push(tyears.slice(4, 6));
    items.push(tyears.slice(6, 8));
    items.push(tyears.slice(8, 10));
    items.push(tyears.slice(10, 12));
    return BI.map(items, function (i, item) {
      return BI.map(item, function (j, td) {
        return BI.extend(td, {
          type: "bi.text_item",
          cls: "bi-list-item-select bi-border-radius",
          textAlign: "center",
          whiteSpace: "normal",
          once: false,
          forceSelected: true,
          height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
          width: 45,
          value: td.text,
          disabled: td.disabled
        });
      });
    });
  },
  _populate: function _populate() {
    this.years.populate(this._getItems());
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;

    if (BI.isNotEmptyString(o.min)) {
      o.min = minDate;

      this._populate();
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;

    if (BI.isNotEmptyString(this.options.max)) {
      o.max = maxDate;

      this._populate();
    }
  },
  setValue: function setValue(val) {
    this.years.setValue([val]);
  },
  getValue: function getValue() {
    return this.years.getValue()[0];
  }
}); // 类方法

BI.extend(BI.YearCalendar, {
  INTERVAL: 12,
  // 获取显示的第一年
  getStartYear: function getStartYear(year) {
    var cur = BI.getDate().getFullYear();
    return year - ((year - cur + 3) % BI.YearCalendar.INTERVAL + 12) % BI.YearCalendar.INTERVAL;
  },
  getEndYear: function getEndYear(year) {
    return BI.YearCalendar.getStartYear(year) + BI.YearCalendar.INTERVAL - 1;
  },
  getPageByYear: function getPageByYear(year) {
    var cur = BI.getDate().getFullYear();
    year = BI.YearCalendar.getStartYear(year);
    return (year - cur + 3) / BI.YearCalendar.INTERVAL;
  }
});
BI.shortcut("bi.year_calendar", BI.YearCalendar);

/***/ }),
/* 455 */
/***/ (function(module, exports) {

/**
 * Created by roy on 15/10/16.
 * 右与下箭头切换的树节点
 */
BI.ArrowTreeGroupNodeCheckbox = BI.inherit(BI.IconButton, {
  props: function props(conf) {
    return {
      extraCls: "bi-arrow-group-node-checkbox " + (conf.collapseIcon || "expander-right-font"),
      expandIcon: "expander-down-font",
      collapseIcon: "expander-right-font"
    };
  },
  setSelected: function setSelected(v) {
    var o = this.options;
    BI.ArrowTreeGroupNodeCheckbox.superclass.setSelected.apply(this, arguments);

    if (v) {
      this.element.removeClass(o.collapseIcon).addClass(o.expandIcon);
    } else {
      this.element.removeClass(o.expandIcon).addClass(o.collapseIcon);
    }
  }
});
BI.shortcut("bi.arrow_group_node_checkbox", BI.ArrowTreeGroupNodeCheckbox);

/***/ }),
/* 456 */
/***/ (function(module, exports) {

/**
 * 十字型的树节点
 * @class BI.CheckingMarkNode
 * @extends BI.IconButton
 */
BI.CheckingMarkNode = BI.inherit(BI.IconButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.CheckingMarkNode.superclass._defaultConfig.apply(this, arguments), {});
  },
  setSelected: function setSelected(v) {
    BI.CheckingMarkNode.superclass.setSelected.apply(this, arguments);

    if (v === true) {
      this.element.addClass("check-mark-font");
    } else {
      this.element.removeClass("check-mark-font");
    }
  }
});
BI.shortcut("bi.checking_mark_node", BI.CheckingMarkNode);

/***/ }),
/* 457 */
/***/ (function(module, exports) {

/**
 * 十字型的树节点
 * @class BI.FirstTreeNodeCheckbox
 * @extends BI.IconButton
 */
BI.FirstTreeNodeCheckbox = BI.inherit(BI.IconButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.FirstTreeNodeCheckbox.superclass._defaultConfig.apply(this, arguments), {
      extraCls: BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? "tree-solid-collapse-icon-type2" : "tree-collapse-icon-type2",
      iconWidth: 24,
      iconHeight: 24
    });
  },
  getLineCls: function getLineCls() {
    switch (BI.STYLE_CONSTANTS.LINK_LINE_TYPE) {
      case "solid":
        return "tree-solid-expand-icon-type2";

      default:
        return "tree-expand-icon-type2";
    }
  },
  setSelected: function setSelected(v) {
    BI.FirstTreeNodeCheckbox.superclass.setSelected.apply(this, arguments);

    if (v === true) {
      this.element.addClass(this.getLineCls());
    } else {
      this.element.removeClass(this.getLineCls());
    }
  }
});
BI.shortcut("bi.first_tree_node_checkbox", BI.FirstTreeNodeCheckbox);

/***/ }),
/* 458 */
/***/ (function(module, exports) {

/**
 * 十字型的树节点
 * @class BI.LastTreeNodeCheckbox
 * @extends BI.IconButton
 */
BI.LastTreeNodeCheckbox = BI.inherit(BI.IconButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.LastTreeNodeCheckbox.superclass._defaultConfig.apply(this, arguments), {
      extraCls: BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? "tree-solid-collapse-icon-type4" : "tree-collapse-icon-type4",
      iconWidth: 24,
      iconHeight: 24
    });
  },
  getLineCls: function getLineCls() {
    switch (BI.STYLE_CONSTANTS.LINK_LINE_TYPE) {
      case "solid":
        return "tree-solid-expand-icon-type4";

      default:
        return "tree-expand-icon-type4";
    }
  },
  setSelected: function setSelected(v) {
    BI.LastTreeNodeCheckbox.superclass.setSelected.apply(this, arguments);

    if (v === true) {
      this.element.addClass(this.getLineCls());
    } else {
      this.element.removeClass(this.getLineCls());
    }
  }
});
BI.shortcut("bi.last_tree_node_checkbox", BI.LastTreeNodeCheckbox);

/***/ }),
/* 459 */
/***/ (function(module, exports) {

/**
 * 十字型的树节点
 * @class BI.MidTreeNodeCheckbox
 * @extends BI.IconButton
 */
BI.MidTreeNodeCheckbox = BI.inherit(BI.IconButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MidTreeNodeCheckbox.superclass._defaultConfig.apply(this, arguments), {
      extraCls: BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? "tree-solid-collapse-icon-type3" : "tree-collapse-icon-type3",
      iconWidth: 24,
      iconHeight: 24
    });
  },
  getLineCls: function getLineCls() {
    switch (BI.STYLE_CONSTANTS.LINK_LINE_TYPE) {
      case "solid":
        return "tree-solid-expand-icon-type3";

      default:
        return "tree-expand-icon-type3";
    }
  },
  setSelected: function setSelected(v) {
    BI.MidTreeNodeCheckbox.superclass.setSelected.apply(this, arguments);

    if (v === true) {
      this.element.addClass(this.getLineCls());
    } else {
      this.element.removeClass(this.getLineCls());
    }
  }
});
BI.shortcut("bi.mid_tree_node_checkbox", BI.MidTreeNodeCheckbox);

/***/ }),
/* 460 */
/***/ (function(module, exports) {

/**
 * 十字型的树节点
 * @class BI.TreeNodeCheckbox
 * @extends BI.IconButton
 */
BI.TreeNodeCheckbox = BI.inherit(BI.IconButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TreeNodeCheckbox.superclass._defaultConfig.apply(this, arguments), {
      extraCls: BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? "tree-solid-collapse-icon-type1" : "tree-collapse-icon-type1",
      iconWidth: 24,
      iconHeight: 24
    });
  },
  getLineCls: function getLineCls() {
    switch (BI.STYLE_CONSTANTS.LINK_LINE_TYPE) {
      case "solid":
        return "tree-solid-expand-icon-type1";

      default:
        return "tree-expand-icon-type1";
    }
  },
  setSelected: function setSelected(v) {
    BI.TreeNodeCheckbox.superclass.setSelected.apply(this, arguments);

    if (v) {
      this.element.addClass(this.getLineCls());
    } else {
      this.element.removeClass(this.getLineCls());
    }
  }
});
BI.shortcut("bi.tree_node_checkbox", BI.TreeNodeCheckbox);

/***/ }),
/* 461 */
/***/ (function(module, exports) {

/**
 * 自定义选色
 *
 * Created by GUY on 2015/11/17.
 * @class BI.CustomColorChooser
 * @extends BI.Widget
 */
BI.CustomColorChooser = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.CustomColorChooser.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-custom-color-chooser",
      width: 292,
      height: 265
    });
  },
  _init: function _init() {
    BI.CustomColorChooser.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.editor, {
      type: "bi.simple_hex_color_picker_editor",
      value: o.value
    });
    this.editor.on(BI.ColorPickerEditor.EVENT_CHANGE, function () {
      self.setValue(this.getValue());
    });
    this.farbtastic = BI.createWidget({
      type: "bi.farbtastic",
      value: o.value
    });
    this.farbtastic.on(BI.Farbtastic.EVENT_CHANGE, function () {
      self.setValue(this.getValue());
    });
    BI.createWidget({
      type: "bi.vtape",
      element: this,
      items: [{
        type: "bi.absolute",
        items: [{
          el: this.editor,
          left: 10,
          top: 0,
          right: 10
        }],
        height: 50
      }, {
        type: "bi.absolute",
        items: [{
          el: this.farbtastic,
          left: 46,
          right: 46,
          top: 7
        }],
        height: 215
      }]
    });
  },
  setValue: function setValue(color) {
    this.editor.setValue(color);
    this.farbtastic.setValue(color);
  },
  getValue: function getValue() {
    return this.editor.getValue();
  }
});
BI.CustomColorChooser.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.custom_color_chooser", BI.CustomColorChooser);

/***/ }),
/* 462 */
/***/ (function(module, exports) {

/**
 * 选色控件
 *
 * Created by GUY on 2015/11/17.
 * @class BI.ColorChooser
 * @extends BI.Widget
 */
BI.ColorChooser = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ColorChooser.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-color-chooser",
      value: "",
      height: 24,
      el: {},
      simple: false
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.ColorChooser.superclass._init.apply(this, arguments);

    o.value = (o.value || "").toLowerCase();
    this.combo = BI.createWidget({
      type: "bi.combo",
      element: this,
      container: o.container,
      adjustLength: 1,
      destroyWhenHide: o.destroyWhenHide,
      isNeedAdjustWidth: false,
      isNeedAdjustHeight: false,
      el: BI.extend({
        type: o.width <= 24 ? "bi.color_chooser_trigger" : "bi.long_color_chooser_trigger",
        simple: o.simple,
        ref: function ref(_ref) {
          self.trigger = _ref;
        },
        value: o.value,
        width: o.el.type ? o.width : BI.toPix(o.width, 2),
        height: o.el.type ? o.height : BI.toPix(o.height, 2)
      }, o.el),
      popup: function popup() {
        return {
          el: BI.extend({
            type: "bi.hex_color_chooser_popup",
            recommendColorsGetter: o.recommendColorsGetter,
            ref: function ref(_ref) {
              self.colorPicker = _ref;
            },
            listeners: [{
              eventName: BI.ColorChooserPopup.EVENT_VALUE_CHANGE,
              action: function action() {
                fn();

                if (!self._isRGBColor(self.colorPicker.getValue())) {
                  self.combo.hideView();
                }
              }
            }, {
              eventName: BI.ColorChooserPopup.EVENT_CHANGE,
              action: function action() {
                fn();
                self.combo.hideView();
              }
            }]
          }, o.popup),
          value: o.value,
          width: 300
        };
      },
      value: o.value
    });

    var fn = function fn() {
      var color = self.colorPicker.getValue();
      self.setValue(color);
    };

    this.combo.on(BI.Combo.EVENT_BEFORE_HIDEVIEW, function () {
      self.fireEvent(BI.ColorChooser.EVENT_CHANGE, arguments);
    });
    this.combo.on(BI.Combo.EVENT_AFTER_POPUPVIEW, function () {
      self.fireEvent(BI.ColorChooser.EVENT_AFTER_POPUPVIEW, arguments);
    });
  },
  _isRGBColor: function _isRGBColor(color) {
    return BI.isNotEmptyString(color) && color !== "transparent";
  },
  isViewVisible: function isViewVisible() {
    return this.combo.isViewVisible();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  showView: function showView() {
    this.combo.showView();
  },
  setValue: function setValue(color) {
    this.options.value = (color || "").toLowerCase();
    this.combo.setValue(this.options.value);
  },
  getValue: function getValue() {
    return this.combo.getValue();
  }
});
BI.ColorChooser.EVENT_CHANGE = "EVENT_CHANGE";
BI.ColorChooser.EVENT_AFTER_POPUPVIEW = "EVENT_AFTER_POPUPVIEW";
BI.shortcut("bi.color_chooser", BI.ColorChooser);

/***/ }),
/* 463 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2020/11/10
 */
BI.HexColorChooserPopup = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-color-chooser-popup",
    width: 300,
    recommendColorsGetter: BI.emptyFn,
    // 推荐色获取接口
    simple: false // 简单模式, popup中没有自动和透明

  },
  render: function render() {
    var self = this,
        o = this.options;
    var hasRecommendColors = BI.isNotNull(o.recommendColorsGetter());
    return [{
      type: "bi.vertical",
      items: [{
        el: {
          type: "bi.vertical",
          hgap: 15,
          items: [BI.extend({
            type: o.simple ? "bi.simple_hex_color_picker_editor" : "bi.hex_color_picker_editor",
            value: o.value,
            height: o.simple ? 36 : 70,
            listeners: [{
              eventName: BI.ColorPickerEditor.EVENT_CHANGE,
              action: function action() {
                self.setValue(this.getValue());

                self._dealStoreColors();

                self.fireEvent(BI.ColorChooserPopup.EVENT_VALUE_CHANGE, arguments);
              }
            }],
            ref: function ref(_ref) {
              self.colorEditor = _ref;
            }
          }, o.editor), {
            el: {
              type: "bi.hex_color_picker",
              cls: "bi-border-bottom bi-border-right",
              items: [this._digestStoreColors(this._getStoreColors())],
              height: 22,
              value: o.value,
              listeners: [{
                eventName: BI.ColorPicker.EVENT_CHANGE,
                action: function action() {
                  self.setValue(this.getValue()[0]);

                  self._dealStoreColors();

                  self.fireEvent(BI.ColorChooserPopup.EVENT_CHANGE, arguments);
                }
              }],
              ref: function ref(_ref) {
                self.storeColors = _ref;
              }
            },
            tgap: 10,
            height: 22
          }, {
            el: hasRecommendColors ? {
              type: "bi.vertical",
              items: [{
                type: "bi.label",
                text: BI.i18nText("BI-Basic_Recommend_Color"),
                textAlign: "left",
                height: 24
              }, {
                type: "bi.hex_color_picker",
                cls: "bi-border-bottom bi-border-right",
                items: [this._digestStoreColors(o.recommendColorsGetter())],
                height: 22,
                value: o.value,
                listeners: [{
                  eventName: BI.ColorPicker.EVENT_CHANGE,
                  action: function action() {
                    self.setValue(this.getValue()[0]);

                    self._dealStoreColors();

                    self.fireEvent(BI.ColorChooserPopup.EVENT_CHANGE, arguments);
                  }
                }],
                ref: function ref(_ref) {
                  self.recommendColors = _ref;
                }
              }]
            } : {
              type: "bi.layout"
            },
            tgap: hasRecommendColors ? 10 : 0,
            height: hasRecommendColors ? 47 : 0
          }, {
            el: {
              type: "bi.layout",
              cls: "bi-border-top"
            },
            vgap: 10,
            height: 1
          }, {
            type: "bi.absolute",
            items: [{
              el: {
                type: "bi.hex_color_picker",
                space: true,
                value: o.value,
                listeners: [{
                  eventName: BI.ColorPicker.EVENT_CHANGE,
                  action: function action() {
                    self.setValue(this.getValue()[0]);

                    self._dealStoreColors();

                    self.fireEvent(BI.ColorChooserPopup.EVENT_CHANGE, arguments);
                  }
                }],
                ref: function ref(_ref) {
                  self.colorPicker = _ref;
                }
              },
              top: 0,
              left: 0,
              right: 0,
              bottom: 1
            }],
            height: 80
          }]
        }
      }, {
        el: {
          type: "bi.combo",
          cls: "bi-border-top",
          container: null,
          direction: "right,top",
          isNeedAdjustHeight: false,
          el: {
            type: "bi.text_item",
            cls: "color-chooser-popup-more bi-list-item",
            textAlign: "center",
            height: 24,
            textLgap: 10,
            text: BI.i18nText("BI-Basic_More") + "..."
          },
          popup: {
            type: "bi.popup_panel",
            buttons: [BI.i18nText("BI-Basic_Cancel"), BI.i18nText("BI-Basic_Save")],
            title: BI.i18nText("BI-Custom_Color"),
            el: {
              type: "bi.custom_color_chooser",
              value: o.value,
              editor: o.editor,
              ref: function ref(_ref) {
                self.customColorChooser = _ref;
              }
            },
            stopPropagation: false,
            bgap: -1,
            rgap: 1,
            lgap: 1,
            minWidth: 227,
            listeners: [{
              eventName: BI.PopupPanel.EVENT_CLICK_TOOLBAR_BUTTON,
              action: function action(index) {
                switch (index) {
                  case 0:
                    self.more.hideView();
                    break;

                  case 1:
                    var color = self.customColorChooser.getValue(); // farbtastic选择器没有透明和自动选项，点击保存不应该设置透明

                    if (BI.isNotEmptyString(color)) {
                      self.setValue(color);

                      self._dealStoreColors();
                    }

                    self.more.hideView();
                    self.fireEvent(BI.ColorChooserPopup.EVENT_CHANGE, arguments);
                    break;
                }
              }
            }]
          },
          listeners: [{
            eventName: BI.Combo.EVENT_AFTER_POPUPVIEW,
            action: function action() {
              self.customColorChooser.setValue(self.getValue());
            }
          }],
          ref: function ref(_ref) {
            self.more = _ref;
          }
        },
        tgap: 10,
        height: 24
      }]
    }, {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.layout",
          cls: "disable-mask",
          invisible: !o.disabled,
          ref: function ref() {
            self.mask = this;
          }
        },
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    }];
  },
  // 这里就实现的不好了，setValue里面有个editor，editor的setValue会检测错误然后出bubble提示
  mounted: function mounted() {
    var o = this.options;

    if (BI.isNotNull(o.value)) {
      this.setValue(o.value);
    }
  },
  _setEnable: function _setEnable(enable) {
    BI.ColorChooserPopup.superclass._setEnable.apply(this, arguments);

    this.mask.setVisible(!enable);
  },
  _dealStoreColors: function _dealStoreColors() {
    var color = this.getValue();

    var colors = this._getStoreColors();

    var que = new BI.Queue(12);
    que.fromArray(colors);
    que.remove(color);
    que.unshift(color);
    var array = que.toArray();
    BI.Cache.setItem("colors", BI.array2String(array));
    this.setStoreColors(array);
  },
  _digestStoreColors: function _digestStoreColors(colors) {
    var items = BI.map(colors.slice(0, 12), function (i, color) {
      return {
        value: color
      };
    });
    BI.count(colors.length, 12, function (i) {
      items.push({
        value: "empty",
        disabled: true
      });
    });
    return items;
  },
  _getStoreColors: function _getStoreColors() {
    var self = this,
        o = this.options;
    var colorsArray = BI.string2Array(BI.Cache.getItem("colors") || "");
    return BI.filter(colorsArray, function (idx, color) {
      return o.simple ? self._isRGBColor(color) : true;
    });
  },
  _isRGBColor: function _isRGBColor(color) {
    return BI.isNotEmptyString(color) && color !== "transparent";
  },
  setStoreColors: function setStoreColors(colors) {
    if (BI.isArray(colors)) {
      this.storeColors.populate([this._digestStoreColors(colors)]); // BI-66973 选中颜色的同时选中历史

      this.storeColors.setValue(this.getValue());
    }
  },
  setValue: function setValue(color) {
    this.colorEditor.setValue(color);
    this.colorPicker.setValue(color);
    this.storeColors.setValue(color);
    this.recommendColors && this.recommendColors.setValue(color);
  },
  getValue: function getValue() {
    return this.colorEditor.getValue();
  }
});
BI.HexColorChooserPopup.EVENT_VALUE_CHANGE = "EVENT_VALUE_CHANGE";
BI.HexColorChooserPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.hex_color_chooser_popup", BI.HexColorChooserPopup);

/***/ }),
/* 464 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2020/11/10
 */
BI.SimpleHexColorChooserPopup = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-color-chooser-popup"
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.hex_color_chooser_popup",
      recommendColorsGetter: o.recommendColorsGetter,
      value: o.value,
      simple: true,
      // 是否有自动
      listeners: [{
        eventName: BI.ColorChooserPopup.EVENT_CHANGE,
        action: function action() {
          self.fireEvent(BI.SimpleColorChooserPopup.EVENT_CHANGE, arguments);
        }
      }, {
        eventName: BI.ColorChooserPopup.EVENT_VALUE_CHANGE,
        action: function action() {
          self.fireEvent(BI.SimpleColorChooserPopup.EVENT_VALUE_CHANGE, arguments);
        }
      }],
      ref: function ref(_ref) {
        self.popup = _ref;
      }
    };
  },
  setStoreColors: function setStoreColors(colors) {
    this.popup.setStoreColors(colors);
  },
  setValue: function setValue(color) {
    this.popup.setValue(color);
  },
  getValue: function getValue() {
    return this.popup.getValue();
  }
});
BI.SimpleHexColorChooserPopup.EVENT_VALUE_CHANGE = "EVENT_VALUE_CHANGE";
BI.SimpleHexColorChooserPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.simple_hex_color_chooser_popup", BI.SimpleHexColorChooserPopup);

/***/ }),
/* 465 */
/***/ (function(module, exports) {

/**
 * 选色控件
 *
 * Created by GUY on 2015/11/17.
 * @class BI.ColorChooserPopup
 * @extends BI.Widget
 */
BI.ColorChooserPopup = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-color-chooser-popup",
    width: 230,
    height: 145,
    simple: false // 简单模式, popup中没有自动和透明

  },
  render: function render() {
    var self = this,
        o = this.options;
    this.colorEditor = BI.createWidget(o.editor, {
      type: o.simple ? "bi.simple_color_picker_editor" : "bi.color_picker_editor",
      value: o.value,
      cls: "bi-header-background bi-border-bottom",
      height: 30
    });
    this.colorEditor.on(BI.ColorPickerEditor.EVENT_CHANGE, function () {
      self.setValue(this.getValue());

      self._dealStoreColors();

      self.fireEvent(BI.ColorChooserPopup.EVENT_VALUE_CHANGE, arguments);
    });
    this.storeColors = BI.createWidget({
      type: "bi.color_picker",
      cls: "bi-border-bottom bi-border-right",
      items: [this._digestStoreColors(this._getStoreColors())],
      width: 210,
      height: 24,
      value: o.value
    });
    this.storeColors.on(BI.ColorPicker.EVENT_CHANGE, function () {
      self.setValue(this.getValue()[0]);

      self._dealStoreColors();

      self.fireEvent(BI.ColorChooserPopup.EVENT_CHANGE, arguments);
    });
    this.colorPicker = BI.createWidget({
      type: "bi.color_picker",
      width: 210,
      height: 50,
      value: o.value
    });
    this.colorPicker.on(BI.ColorPicker.EVENT_CHANGE, function () {
      self.setValue(this.getValue()[0]);

      self._dealStoreColors();

      self.fireEvent(BI.ColorChooserPopup.EVENT_CHANGE, arguments);
    });
    this.customColorChooser = BI.createWidget({
      type: "bi.custom_color_chooser",
      editor: o.editor
    });
    var panel = BI.createWidget({
      type: "bi.popup_panel",
      buttons: [BI.i18nText("BI-Basic_Cancel"), BI.i18nText("BI-Basic_Save")],
      title: BI.i18nText("BI-Custom_Color"),
      el: this.customColorChooser,
      stopPropagation: false,
      bgap: -1,
      rgap: 1,
      lgap: 1,
      minWidth: 227
    });
    this.more = BI.createWidget({
      type: "bi.combo",
      cls: "bi-border-top",
      container: null,
      direction: "right,top",
      isNeedAdjustHeight: false,
      el: {
        type: "bi.text_item",
        cls: "color-chooser-popup-more bi-list-item",
        textAlign: "center",
        height: 24,
        textLgap: 10,
        text: BI.i18nText("BI-Basic_More") + "..."
      },
      popup: panel
    });
    this.more.on(BI.Combo.EVENT_AFTER_POPUPVIEW, function () {
      self.customColorChooser.setValue(self.getValue());
    });
    panel.on(BI.PopupPanel.EVENT_CLICK_TOOLBAR_BUTTON, function (index) {
      switch (index) {
        case 0:
          self.more.hideView();
          break;

        case 1:
          self.setValue(self.customColorChooser.getValue());

          self._dealStoreColors();

          self.more.hideView();
          self.fireEvent(BI.ColorChooserPopup.EVENT_CHANGE, arguments);
          break;
      }
    });
    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.vtape",
          items: [this.colorEditor, {
            el: {
              type: "bi.absolute",
              items: [{
                el: this.storeColors,
                left: 10,
                right: 10,
                top: 5
              }]
            },
            height: 29
          }, {
            el: {
              type: "bi.absolute",
              items: [{
                el: this.colorPicker,
                left: 10,
                right: 10,
                top: 5,
                bottom: 5
              }]
            },
            height: 60
          }, {
            el: this.more,
            height: 24
          }]
        },
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: {
          type: "bi.layout",
          cls: "disable-mask",
          invisible: !o.disabled,
          ref: function ref() {
            self.mask = this;
          }
        },
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    };
  },
  // 这里就实现的不好了，setValue里面有个editor，editor的setValue会检测错误然后出bubble提示
  mounted: function mounted() {
    var self = this;
    var o = this.options;

    if (BI.isNotNull(o.value)) {
      this.setValue(o.value);
    }
  },
  _setEnable: function _setEnable(enable) {
    BI.ColorChooserPopup.superclass._setEnable.apply(this, arguments);

    this.mask.setVisible(!enable);
  },
  _dealStoreColors: function _dealStoreColors() {
    var color = this.getValue();

    var colors = this._getStoreColors();

    var que = new BI.Queue(8);
    que.fromArray(colors);
    que.remove(color);
    que.unshift(color);
    var array = que.toArray();
    BI.Cache.setItem("colors", BI.array2String(array));
    this.setStoreColors(array);
  },
  _digestStoreColors: function _digestStoreColors(colors) {
    var items = BI.map(colors, function (i, color) {
      return {
        value: color
      };
    });
    BI.count(colors.length, 8, function (i) {
      items.push({
        value: "",
        disabled: true
      });
    });
    return items;
  },
  _getStoreColors: function _getStoreColors() {
    var self = this,
        o = this.options;
    var colorsArray = BI.string2Array(BI.Cache.getItem("colors") || "");
    return BI.filter(colorsArray, function (idx, color) {
      return o.simple ? self._isRGBColor(color) : true;
    });
  },
  _isRGBColor: function _isRGBColor(color) {
    return BI.isNotEmptyString(color) && color !== "transparent";
  },
  setStoreColors: function setStoreColors(colors) {
    if (BI.isArray(colors)) {
      this.storeColors.populate([this._digestStoreColors(colors)]); // BI-66973 选中颜色的同时选中历史

      this.storeColors.setValue(this.getValue());
    }
  },
  setValue: function setValue(color) {
    this.colorEditor.setValue(color);
    this.colorPicker.setValue(color);
    this.storeColors.setValue(color);
  },
  getValue: function getValue() {
    return this.colorEditor.getValue();
  }
});
BI.ColorChooserPopup.EVENT_VALUE_CHANGE = "EVENT_VALUE_CHANGE";
BI.ColorChooserPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.color_chooser_popup", BI.ColorChooserPopup);

/***/ }),
/* 466 */
/***/ (function(module, exports) {

/**
 * 选色控件
 *
 * Created by GUY on 2015/11/17.
 * @class BI.SimpleColorChooserPopup
 * @extends BI.Widget
 */
BI.SimpleColorChooserPopup = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SimpleColorChooserPopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-color-chooser-popup"
    });
  },
  _init: function _init() {
    BI.SimpleColorChooserPopup.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.popup = BI.createWidget({
      type: o.hex ? "bi.hex_color_chooser_popup" : "bi.color_chooser_popup",
      value: o.value,
      element: this,
      simple: true // 是否有自动

    });
    this.popup.on(BI.ColorChooserPopup.EVENT_CHANGE, function () {
      self.fireEvent(BI.SimpleColorChooserPopup.EVENT_CHANGE, arguments);
    });
    this.popup.on(BI.ColorChooserPopup.EVENT_VALUE_CHANGE, function () {
      self.fireEvent(BI.SimpleColorChooserPopup.EVENT_VALUE_CHANGE, arguments);
    });
  },
  setStoreColors: function setStoreColors(colors) {
    this.popup.setStoreColors(colors);
  },
  setValue: function setValue(color) {
    this.popup.setValue(color);
  },
  getValue: function getValue() {
    return this.popup.getValue();
  }
});
BI.SimpleColorChooserPopup.EVENT_VALUE_CHANGE = "EVENT_VALUE_CHANGE";
BI.SimpleColorChooserPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.simple_color_chooser_popup", BI.SimpleColorChooserPopup);

/***/ }),
/* 467 */
/***/ (function(module, exports) {

/**
 * 简单选色控件，没有自动和透明
 *
 * Created by GUY on 2015/11/17.
 * @class BI.SimpleColorChooser
 * @extends BI.Widget
 */
BI.SimpleColorChooser = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SimpleColorChooser.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-simple-color-chooser",
      value: "#ffffff"
    });
  },
  _init: function _init() {
    BI.SimpleColorChooser.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.combo = BI.createWidget({
      type: "bi.color_chooser",
      simple: o.simple,
      element: this,
      container: o.container,
      value: o.value,
      width: o.width,
      height: o.height,
      destroyWhenHide: o.destroyWhenHide,
      popup: {
        type: "bi.simple_hex_color_chooser_popup",
        recommendColorsGetter: o.recommendColorsGetter
      }
    });
    this.combo.on(BI.ColorChooser.EVENT_CHANGE, function () {
      self.fireEvent(BI.SimpleColorChooser.EVENT_CHANGE, arguments);
    });
    this.combo.on(BI.ColorChooser.EVENT_AFTER_POPUPVIEW, function () {
      self.fireEvent(BI.SimpleColorChooser.EVENT_AFTER_POPUPVIEW, arguments);
    });
  },
  isViewVisible: function isViewVisible() {
    return this.combo.isViewVisible();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  showView: function showView() {
    this.combo.showView();
  },
  setValue: function setValue(color) {
    this.combo.setValue(color);
  },
  getValue: function getValue() {
    return this.combo.getValue();
  }
});
BI.SimpleColorChooser.EVENT_CHANGE = "EVENT_CHANGE";
BI.SimpleColorChooser.EVENT_AFTER_POPUPVIEW = "EVENT_AFTER_POPUPVIEW";
BI.shortcut("bi.simple_color_chooser", BI.SimpleColorChooser);

/***/ }),
/* 468 */
/***/ (function(module, exports) {

/**
 * 选色控件
 *
 * Created by GUY on 2015/11/17.
 * @class BI.ColorChooserTrigger
 * @extends BI.Trigger
 */
BI.ColorChooserTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig(config) {
    var conf = BI.ColorChooserTrigger.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-color-chooser-trigger bi-focus-shadow " + (config.simple ? "bi-border-bottom" : "bi-border bi-border-radius"),
      height: 22
    });
  },
  _init: function _init() {
    BI.ColorChooserTrigger.superclass._init.apply(this, arguments);

    this.colorContainer = BI.createWidget({
      type: "bi.layout",
      cls: "color-chooser-trigger-content" + (BI.isIE9Below && BI.isIE9Below() ? " hack" : "")
    });
    var down = BI.createWidget({
      type: "bi.icon_button",
      disableSelected: true,
      cls: "icon-combo-down-icon trigger-triangle-font icon-size-12",
      width: 12,
      height: 8
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.colorContainer,
        left: 2,
        right: 2,
        top: 2,
        bottom: 2
      }, {
        el: down,
        right: -1,
        bottom: 1
      }]
    });

    if (BI.isNotNull(this.options.value)) {
      this.setValue(this.options.value);
    }
  },
  setValue: function setValue(color) {
    BI.ColorChooserTrigger.superclass.setValue.apply(this, arguments);

    if (color === "") {
      this.colorContainer.element.css("background-color", "").removeClass("trans-color-background").addClass("auto-color-background");
    } else if (color === "transparent") {
      this.colorContainer.element.css("background-color", "").removeClass("auto-color-background").addClass("trans-color-background");
    } else {
      this.colorContainer.element.css({
        "background-color": color
      }).removeClass("auto-color-background").removeClass("trans-color-background");
    }
  }
});
BI.ColorChooserTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.color_chooser_trigger", BI.ColorChooserTrigger);

/***/ }),
/* 469 */
/***/ (function(module, exports) {

/**
 * 选色控件
 *
 * Created by GUY on 2015/11/17.
 * @class BI.LongColorChooserTrigger
 * @extends BI.Trigger
 */
BI.LongColorChooserTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig(config) {
    var conf = BI.LongColorChooserTrigger.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-color-chooser-trigger bi-focus-shadow " + (config.simple ? "bi-border-bottom" : "bi-border bi-border-radius"),
      height: 24
    });
  },
  _init: function _init() {
    BI.LongColorChooserTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.colorContainer = BI.createWidget({
      type: "bi.htape",
      cls: "color-chooser-trigger-content",
      items: [{
        type: "bi.icon_change_button",
        ref: function ref(_ref) {
          self.changeIcon = _ref;
        },
        disableSelected: true,
        iconCls: "auto-color-icon",
        width: 24,
        iconWidth: 16,
        iconHeight: 16
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.label = _ref;
          },
          textAlign: "left",
          hgap: 5,
          height: 18,
          text: BI.i18nText("BI-Basic_Auto")
        }
      }]
    });
    var down = BI.createWidget({
      type: "bi.icon_button",
      disableSelected: true,
      cls: "icon-combo-down-icon trigger-triangle-font icon-size-12",
      width: 12,
      height: 8
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.colorContainer,
        left: 2,
        right: 2,
        top: 2,
        bottom: 2
      }, {
        el: down,
        right: 3,
        bottom: 3
      }]
    });

    if (this.options.value) {
      this.setValue(this.options.value);
    }
  },
  setValue: function setValue(color) {
    BI.LongColorChooserTrigger.superclass.setValue.apply(this, arguments);

    if (color === "") {
      this.colorContainer.element.css("background-color", "");
      this.changeIcon.setVisible(true);
      this.label.setVisible(true);
      this.changeIcon.setIcon("auto-color-icon");
      this.label.setText(BI.i18nText("BI-Basic_Auto"));
    } else if (color === "transparent") {
      this.colorContainer.element.css("background-color", "");
      this.changeIcon.setVisible(true);
      this.label.setVisible(true);
      this.changeIcon.setIcon("trans-color-icon");
      this.label.setText(BI.i18nText("BI-Transparent_Color"));
    } else {
      this.colorContainer.element.css({
        "background-color": color
      });
      this.changeIcon.setVisible(false);
      this.label.setVisible(false);
    }
  }
});
BI.LongColorChooserTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.long_color_chooser_trigger", BI.LongColorChooserTrigger);

/***/ }),
/* 470 */
/***/ (function(module, exports) {

/**
 * 简单选色控件按钮
 *
 * Created by GUY on 2015/11/16.
 * @class BI.ColorPickerButton
 * @extends BI.BasicButton
 */
BI.ColorPickerButton = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.ColorPickerButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-color-picker-button bi-background bi-border-top bi-border-left"
    });
  },
  _init: function _init() {
    BI.ColorPickerButton.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    if (BI.isNotNull(o.value)) {
      if (o.value === '') {
        this.element.addClass("auto-color-no-square-normal-background");
      } else if (o.value === "transparent") {
        this.element.addClass("trans-color-background");
      } else {
        this.element.css("background-color", o.value);
      }

      var name = this.getName();
      this.element.hover(function () {
        self._createMask();

        if (self.isEnabled()) {
          BI.Maskers.show(name);
        }
      }, function () {
        if (!self.isSelected()) {
          BI.Maskers.hide(name);
        }
      });
    }
  },
  _createMask: function _createMask() {
    var o = this.options,
        name = this.getName();

    if (this.isEnabled() && !BI.Maskers.has(name)) {
      var w = BI.Maskers.make(name, this, {
        offset: {
          left: -1,
          top: -1,
          right: -1,
          bottom: -1
        }
      });
      w.element.addClass("color-picker-button-mask").css("background-color", o.value);
    }
  },
  setSelected: function setSelected(b) {
    BI.ColorPickerButton.superclass.setSelected.apply(this, arguments);

    if (b) {
      this._createMask();
    }

    BI.Maskers[b ? "show" : "hide"](this.getName());
  }
});
BI.ColorPickerButton.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.color_picker_button", BI.ColorPickerButton);

/***/ }),
/* 471 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2021/7/28
 */
BI.ColorChooserShowButton = BI.inherit(BI.BasicButton, {
  props: {
    baseCls: 'bi-color-chooser-show-button bi-border bi-list-item-effect'
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: 'bi.htape',
      items: [{
        el: {
          type: "bi.icon_label",
          ref: function ref(_ref) {
            self.icon = _ref;
          },
          iconWidth: 16,
          iconHeight: 16
        },
        hgap: 20,
        width: 16
      }, {
        type: 'bi.label',
        textAlign: 'left',
        text: o.text
      }]
    };
  },
  doClick: function doClick() {
    BI.ColorChooserShowButton.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.ColorChooserShowButton.EVENT_CHANGE, this);
    }
  }
});
BI.ColorChooserShowButton.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.color_picker_show_button", BI.ColorChooserShowButton);

/***/ }),
/* 472 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2021/7/28
 */
BI.HexColorPicker = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-hex-color-picker",
    items: null
  },
  _items: [[{
    value: "#808080"
  }, {
    value: "#ffffff"
  }, {
    value: "#ffebe5"
  }, {
    value: "#ffddba"
  }, {
    value: "#ffeebb"
  }, {
    value: "#d4e9bf"
  }, {
    value: "#c7e1e1"
  }, {
    value: "#bfe3f0"
  }, {
    value: "#ccd6eb"
  }], [{
    value: "#616161"
  }, {
    value: "#f2f2f2"
  }, {
    value: "#ffd6cc"
  }, {
    value: "#ffb87a"
  }, {
    value: "#ffdf91"
  }, {
    value: "#b7d2b6"
  }, {
    value: "#a3d2c9"
  }, {
    value: "#8ab6d6"
  }, {
    value: "#bcbce0"
  }], [{
    value: "#404040"
  }, {
    value: "#dedede"
  }, {
    value: "#ffab9b"
  }, {
    value: "#eb8a3a"
  }, {
    value: "#ffc947"
  }, {
    value: "#8aa964"
  }, {
    value: "#5eaaa0"
  }, {
    value: "#2978b5"
  }, {
    value: "#8f8faa"
  }], [{
    value: "#202020"
  }, {
    value: "#bfbfbf"
  }, {
    value: "#df7461"
  }, {
    value: "#cf7536"
  }, {
    value: "#e6b63b"
  }, {
    value: "#5b8a72"
  }, {
    value: "#3b9aa3"
  }, {
    value: "#336291"
  }, {
    value: "#58568f"
  }], [{
    value: "#000000"
  }, {
    value: "#a1a1a1"
  }, {
    value: "#b55140"
  }, {
    value: "#a6713c"
  }, {
    value: "#ad975f"
  }, {
    value: "#5f7d6e"
  }, {
    value: "#3b7480"
  }, {
    value: "#425d78"
  }, {
    value: "#62608a"
  }]],
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.button_group",
      items: this._digest(o.items || this._items),
      layouts: [{
        type: "bi.grid"
      }],
      value: o.value,
      listeners: [{
        eventName: BI.ButtonGroup.EVENT_CHANGE,
        action: function action() {
          self.fireEvent(BI.HexColorPicker.EVENT_CHANGE, arguments);
        }
      }],
      ref: function ref(_ref) {
        self.colors = _ref;
      }
    };
  },
  _digest: function _digest(items) {
    var o = this.options;
    var blocks = [];
    BI.each(items, function (idx, row) {
      var bRow = [];
      BI.each(row, function (idx, item) {
        bRow.push(BI.extend({
          type: "bi.color_picker_button",
          once: false,
          cls: o.space ? 'bi-border-right' : ''
        }, item));

        if (o.space && idx < row.length - 1) {
          bRow.push({
            type: 'bi.layout'
          });
        }
      });
      blocks.push(bRow);
    });
    return blocks;
  },
  populate: function populate(items) {
    var args = [].slice.call(arguments);
    args[0] = this._digest(items);
    this.colors.populate.apply(this.colors, args);
  },
  setValue: function setValue(color) {
    this.colors.setValue(color);
  },
  getValue: function getValue() {
    return this.colors.getValue();
  }
});
BI.HexColorPicker.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.hex_color_picker", BI.HexColorPicker);

/***/ }),
/* 473 */
/***/ (function(module, exports) {

/**
 * 简单选色控件
 *
 * Created by GUY on 2015/11/16.
 * @class BI.ColorPicker
 * @extends BI.Widget
 */
BI.ColorPicker = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ColorPicker.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-color-picker",
      items: null
    });
  },
  _items: [[{
    value: "#ffffff"
  }, {
    value: "#f2f2f2"
  }, {
    value: "#e5e5e5"
  }, {
    value: "#d9d9d9"
  }, {
    value: "#cccccc"
  }, {
    value: "#bfbfbf"
  }, {
    value: "#b2b2b2"
  }, {
    value: "#a6a6a6"
  }, {
    value: "#999999"
  }, {
    value: "#8c8c8c"
  }, {
    value: "#808080"
  }, {
    value: "#737373"
  }, {
    value: "#666666"
  }, {
    value: "#4d4d4d"
  }, {
    value: "#333333"
  }, {
    value: "#000000"
  }], [{
    value: "#d8b5a6"
  }, {
    value: "#ff9e9a"
  }, {
    value: "#ffc17d"
  }, {
    value: "#f5e56b"
  }, {
    value: "#d8e698"
  }, {
    value: "#e0ebaf"
  }, {
    value: "#c3d825"
  }, {
    value: "#bbe2e7"
  }, {
    value: "#85d3cd"
  }, {
    value: "#bde1e6"
  }, {
    value: "#a0d8ef"
  }, {
    value: "#89c3eb"
  }, {
    value: "#bbc8e6"
  }, {
    value: "#bbbcde"
  }, {
    value: "#d6b4cc"
  }, {
    value: "#fbc0d3"
  }], [{
    value: "#bb9581"
  }, {
    value: "#f37d79"
  }, {
    value: "#fba74f"
  }, {
    value: "#ffdb4f"
  }, {
    value: "#c7dc68"
  }, {
    value: "#b0ca71"
  }, {
    value: "#99ab4e"
  }, {
    value: "#84b9cb"
  }, {
    value: "#00a3af"
  }, {
    value: "#2ca9e1"
  }, {
    value: "#0095d9"
  }, {
    value: "#4c6cb3"
  }, {
    value: "#8491c3"
  }, {
    value: "#a59aca"
  }, {
    value: "#cc7eb1"
  }, {
    value: "#e89bb4"
  }], [{
    value: "#9d775f"
  }, {
    value: "#dd4b4b"
  }, {
    value: "#ef8b07"
  }, {
    value: "#fcc800"
  }, {
    value: "#aacf53"
  }, {
    value: "#82ae46"
  }, {
    value: "#69821b"
  }, {
    value: "#59b9c6"
  }, {
    value: "#2a83a2"
  }, {
    value: "#007bbb"
  }, {
    value: "#19448e"
  }, {
    value: "#274a78"
  }, {
    value: "#4a488e"
  }, {
    value: "#7058a3"
  }, {
    value: "#884898"
  }, {
    value: "#d47596"
  }]],
  _init: function _init() {
    BI.ColorPicker.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.colors = BI.createWidget({
      type: "bi.button_group",
      element: this,
      items: BI.createItems(o.items || this._items, {
        type: "bi.color_picker_button",
        once: false
      }),
      layouts: [{
        type: "bi.grid"
      }],
      value: o.value
    });
    this.colors.on(BI.ButtonGroup.EVENT_CHANGE, function () {
      self.fireEvent(BI.ColorPicker.EVENT_CHANGE, arguments);
    });
  },
  populate: function populate(items) {
    var args = [].slice.call(arguments);
    args[0] = BI.createItems(items, {
      type: "bi.color_picker_button",
      once: false
    });
    this.colors.populate.apply(this.colors, args);
  },
  setValue: function setValue(color) {
    this.colors.setValue(color);
  },
  getValue: function getValue() {
    return this.colors.getValue();
  }
});
BI.ColorPicker.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.color_picker", BI.ColorPicker);

/***/ }),
/* 474 */
/***/ (function(module, exports) {

/**
 * 简单选色控件
 *
 * Created by GUY on 2015/11/16.
 * @class BI.ColorPickerEditor
 * @extends BI.Widget
 */
BI.HexColorPickerEditor = BI.inherit(BI.Widget, {
  constants: {
    RGB_WIDTH: 32,
    HEX_WIDTH: 70,
    HEX_PREFIX_POSITION: 1
  },
  props: {
    baseCls: "bi-color-picker-editor",
    height: 30
  },
  render: function render() {
    var self = this,
        o = this.options,
        c = this.constants;
    this.storeValue = {};
    var RGB = BI.createItems([{
      text: "R"
    }, {
      text: "G"
    }, {
      text: "B"
    }], {
      type: "bi.label",
      cls: "color-picker-editor-label",
      height: 20
    });

    var checker = function checker(v) {
      return BI.isNumeric(v) && (v | 0) >= 0 && (v | 0) <= 255;
    };

    var Ws = BI.map(BI.range(0, 3), function () {
      return {
        type: "bi.small_text_editor",
        cls: "color-picker-editor-input",
        validationChecker: checker,
        errorText: BI.i18nText("BI-Color_Picker_Error_Text"),
        allowBlank: true,
        value: 255,
        width: c.RGB_WIDTH,
        height: 24,
        listeners: [{
          eventName: BI.TextEditor.EVENT_CHANGE,
          action: function action() {
            self._checkEditors();

            if (checker(self.storeValue.r) && checker(self.storeValue.g) && checker(self.storeValue.b)) {
              self.colorShow.element.css("background-color", self.getValue());
              self.fireEvent(BI.ColorPickerEditor.EVENT_CHANGE);
            }
          }
        }]
      };
    });
    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.vertical",
          tgap: 10,
          items: [{
            type: 'bi.vertical_adapt',
            columnSize: ["fill", 'fill'],
            height: 24,
            items: [{
              type: "bi.color_picker_show_button",
              cls: "trans-color-icon",
              height: 22,
              title: BI.i18nText("BI-Transparent_Color"),
              text: BI.i18nText("BI-Transparent_Color"),
              listeners: [{
                eventName: BI.ColorChooserShowButton.EVENT_CHANGE,
                action: function action() {
                  self.setValue("transparent");
                  self.fireEvent(BI.ColorPickerEditor.EVENT_CHANGE);
                }
              }],
              ref: function ref(_ref) {
                self.transparent = _ref;
              }
            }, {
              el: {
                type: "bi.color_picker_show_button",
                cls: "auto-color-icon",
                height: 22,
                title: BI.i18nText("BI-Basic_Auto"),
                text: BI.i18nText("BI-Basic_Auto"),
                listeners: [{
                  eventName: BI.ColorChooserShowButton.EVENT_CHANGE,
                  action: function action() {
                    self.setValue("");
                    self.fireEvent(BI.ColorPickerEditor.EVENT_CHANGE);
                  }
                }],
                ref: function ref(_ref) {
                  self.none = _ref;
                }
              },
              lgap: 10
            }]
          }, {
            el: {
              type: "bi.vertical_adapt",
              columnSize: [22, 10, 'fill', 12, c.RGB_WIDTH, 12, c.RGB_WIDTH, 12, c.RGB_WIDTH],
              rgap: 5,
              items: [{
                el: {
                  type: "bi.layout",
                  cls: "color-picker-editor-display bi-card bi-border",
                  height: 22,
                  width: 22,
                  ref: function ref(_ref) {
                    self.colorShow = _ref;
                  }
                },
                width: 18
              }, {
                type: "bi.label",
                text: "#",
                width: 10
              }, {
                type: "bi.small_text_editor",
                ref: function ref(_ref) {
                  self.hexEditor = _ref;
                },
                cls: "color-picker-editor-input",
                validationChecker: this._hexChecker,
                allowBlank: true,
                errorText: BI.i18nText("BI-Color_Picker_Error_Text_Hex"),
                width: c.HEX_WIDTH,
                height: 24,
                listeners: [{
                  eventName: "EVENT_CHANGE",
                  action: function action() {
                    self._checkHexEditor();

                    if (checker(self.storeValue.r) && checker(self.storeValue.g) && checker(self.storeValue.b)) {
                      self.colorShow.element.css("background-color", self.getValue());
                      self.fireEvent(BI.ColorPickerEditor.EVENT_CHANGE);
                    }
                  }
                }]
              }, RGB[0], {
                el: BI.extend(Ws[0], {
                  ref: function ref(_ref) {
                    self.R = _ref;
                  }
                }),
                width: c.RGB_WIDTH
              }, RGB[1], {
                el: BI.extend(Ws[1], {
                  ref: function ref(_ref) {
                    self.G = _ref;
                  }
                }),
                width: c.RGB_WIDTH
              }, RGB[2], {
                el: BI.extend(Ws[2], {
                  ref: function ref(_ref) {
                    self.B = _ref;
                  }
                }),
                rgap: -5,
                width: c.RGB_WIDTH
              }]
            }
          }]
        },
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    };
  },
  _hexChecker: function _hexChecker(v) {
    return /^[0-9a-fA-F]{6}$/.test(v);
  },
  _checkEditors: function _checkEditors() {
    if (BI.isEmptyString(this.R.getValue())) {
      this.R.setValue(0);
    }

    if (BI.isEmptyString(this.G.getValue())) {
      this.G.setValue(0);
    }

    if (BI.isEmptyString(this.B.getValue())) {
      this.B.setValue(0);
    }

    this.storeValue = {
      r: this.R.getValue() || 0,
      g: this.G.getValue() || 0,
      b: this.B.getValue() || 0
    };
    this.hexEditor.setValue(this.getValue().slice(this.constants.HEX_PREFIX_POSITION));
  },
  _isEmptyRGB: function _isEmptyRGB() {
    return BI.isEmptyString(this.storeValue.r) && BI.isEmptyString(this.storeValue.g) && BI.isEmptyString(this.storeValue.b);
  },
  _checkHexEditor: function _checkHexEditor() {
    if (BI.isEmptyString(this.hexEditor.getValue())) {
      this.hexEditor.setValue("000000");
    }

    var json = BI.DOM.rgb2json(BI.DOM.hex2rgb("#" + this.hexEditor.getValue()));
    this.storeValue = {
      r: json.r || 0,
      g: json.g || 0,
      b: json.b || 0
    };
    this.R.setValue(this.storeValue.r);
    this.G.setValue(this.storeValue.g);
    this.B.setValue(this.storeValue.b);
  },
  _showPreColor: function _showPreColor(color) {
    if (color === "") {
      this.colorShow.element.css("background-color", "").removeClass("trans-color-background").addClass("auto-color-square-normal-background");
    } else if (color === "transparent") {
      this.colorShow.element.css("background-color", "").removeClass("auto-color-square-normal-background").addClass("trans-color-background");
    } else {
      this.colorShow.element.css({
        "background-color": color
      }).removeClass("auto-color-square-normal-background").removeClass("trans-color-background");
    }
  },
  _setEnable: function _setEnable(enable) {
    BI.ColorPickerEditor.superclass._setEnable.apply(this, arguments);

    if (enable === true) {
      this.element.removeClass("base-disabled disabled");
    } else if (enable === false) {
      this.element.addClass("base-disabled disabled");
    }
  },
  setValue: function setValue(color) {
    if (color === "transparent") {
      this.transparent.setSelected(true);
      this.none.setSelected(false);

      this._showPreColor("transparent");

      this.R.setValue("");
      this.G.setValue("");
      this.B.setValue("");
      this.hexEditor.setValue("");
      this.storeValue = {
        r: "",
        g: "",
        b: ""
      };
      return;
    }

    if (!color) {
      color = "";
      this.none.setSelected(true);
    } else {
      this.none.setSelected(false);
    }

    this.transparent.setSelected(false);

    this._showPreColor(color);

    var json = BI.DOM.rgb2json(BI.DOM.hex2rgb(color));
    this.storeValue = {
      r: BI.isNull(json.r) ? "" : json.r,
      g: BI.isNull(json.g) ? "" : json.g,
      b: BI.isNull(json.b) ? "" : json.b
    };
    this.R.setValue(this.storeValue.r);
    this.G.setValue(this.storeValue.g);
    this.B.setValue(this.storeValue.b);
    this.hexEditor.setValue(color.slice(this.constants.HEX_PREFIX_POSITION));
  },
  getValue: function getValue() {
    if (this._isEmptyRGB() && this.transparent.isSelected()) {
      return "transparent";
    }

    return BI.DOM.rgb2hex(BI.DOM.json2rgb({
      r: this.storeValue.r,
      g: this.storeValue.g,
      b: this.storeValue.b
    }));
  }
});
BI.HexColorPickerEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.hex_color_picker_editor", BI.HexColorPickerEditor);

/***/ }),
/* 475 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2020/11/10
 */
BI.SimpleHexColorPickerEditor = BI.inherit(BI.Widget, {
  constants: {
    RGB_WIDTH: 32,
    HEX_WIDTH: 70,
    HEX_PREFIX_POSITION: 1
  },
  props: {
    baseCls: "bi-color-picker-editor",
    height: 36
  },
  render: function render() {
    var self = this,
        o = this.options,
        c = this.constants;
    var RGB = BI.createItems([{
      text: "R"
    }, {
      text: "G"
    }, {
      text: "B"
    }], {
      type: "bi.label",
      cls: "color-picker-editor-label",
      height: 20
    });

    var checker = function checker(v) {
      return BI.isNumeric(v) && (v | 0) >= 0 && (v | 0) <= 255;
    };

    var Ws = BI.map(BI.range(0, 3), function () {
      return {
        type: "bi.small_text_editor",
        cls: "color-picker-editor-input",
        validationChecker: checker,
        errorText: BI.i18nText("BI-Color_Picker_Error_Text"),
        allowBlank: true,
        value: 255,
        width: c.RGB_WIDTH,
        height: 24,
        listeners: [{
          eventName: BI.TextEditor.EVENT_CHANGE,
          action: function action() {
            self._checkEditors();

            if (self.R.isValid() && self.G.isValid() && self.B.isValid()) {
              self.colorShow.element.css("background-color", self.getValue());
              self.fireEvent(BI.SimpleColorPickerEditor.EVENT_CHANGE);
            }
          }
        }]
      };
    });
    return {
      type: "bi.vertical",
      tgap: 10,
      items: [{
        el: {
          type: "bi.vertical_adapt",
          rgap: 5,
          columnSize: [22, 10, 'fill', 12, c.RGB_WIDTH, 12, c.RGB_WIDTH, 12, c.RGB_WIDTH],
          items: [{
            el: {
              type: "bi.layout",
              cls: "color-picker-editor-display bi-card bi-border",
              height: 22,
              width: 22,
              ref: function ref(_ref) {
                self.colorShow = _ref;
              }
            },
            width: 18
          }, {
            type: "bi.label",
            text: "#",
            width: 10
          }, {
            type: "bi.small_text_editor",
            ref: function ref(_ref) {
              self.hexEditor = _ref;
            },
            cls: "color-picker-editor-input",
            validationChecker: this._hexChecker,
            allowBlank: true,
            errorText: BI.i18nText("BI-Color_Picker_Error_Text_Hex"),
            width: c.HEX_WIDTH,
            height: 24,
            listeners: [{
              eventName: "EVENT_CHANGE",
              action: function action() {
                self._checkHexEditor();

                if (checker(self.storeValue.r) && checker(self.storeValue.g) && checker(self.storeValue.b)) {
                  self.colorShow.element.css("background-color", self.getValue());
                  self.fireEvent(BI.ColorPickerEditor.EVENT_CHANGE);
                }
              }
            }]
          }, RGB[0], {
            el: BI.extend(Ws[0], {
              ref: function ref(_ref) {
                self.R = _ref;
              }
            }),
            width: c.RGB_WIDTH
          }, RGB[1], {
            el: BI.extend(Ws[1], {
              ref: function ref(_ref) {
                self.G = _ref;
              }
            }),
            width: c.RGB_WIDTH
          }, RGB[2], {
            el: BI.extend(Ws[2], {
              ref: function ref(_ref) {
                self.B = _ref;
              }
            }),
            rgap: -5,
            width: c.RGB_WIDTH
          }]
        }
      }]
    };
  },
  _hexChecker: function _hexChecker(v) {
    return /^[0-9a-fA-F]{6}$/.test(v);
  },
  _checkEditors: function _checkEditors() {
    if (BI.isEmptyString(this.R.getValue())) {
      this.R.setValue(0);
    }

    if (BI.isEmptyString(this.G.getValue())) {
      this.G.setValue(0);
    }

    if (BI.isEmptyString(this.B.getValue())) {
      this.B.setValue(0);
    }

    this.hexEditor.setValue(this.getValue().slice(this.constants.HEX_PREFIX_POSITION));
  },
  _checkHexEditor: function _checkHexEditor() {
    if (BI.isEmptyString(this.hexEditor.getValue())) {
      this.hexEditor.setValue("000000");
    }

    var json = BI.DOM.rgb2json(BI.DOM.hex2rgb("#" + this.hexEditor.getValue()));
    this.storeValue = {
      r: json.r || 0,
      g: json.g || 0,
      b: json.b || 0
    };
    this.R.setValue(this.storeValue.r);
    this.G.setValue(this.storeValue.g);
    this.B.setValue(this.storeValue.b);
  },
  setValue: function setValue(color) {
    this.colorShow.element.css({
      "background-color": color
    });
    var json = BI.DOM.rgb2json(BI.DOM.hex2rgb(color));
    this.R.setValue(BI.isNull(json.r) ? "" : json.r);
    this.G.setValue(BI.isNull(json.g) ? "" : json.g);
    this.B.setValue(BI.isNull(json.b) ? "" : json.b);
    this.hexEditor.setValue(BI.isEmptyObject(json) ? "" : color.slice(this.constants.HEX_PREFIX_POSITION));
  },
  getValue: function getValue() {
    return BI.DOM.rgb2hex(BI.DOM.json2rgb({
      r: this.R.getValue(),
      g: this.G.getValue(),
      b: this.B.getValue()
    }));
  }
});
BI.SimpleHexColorPickerEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.simple_hex_color_picker_editor", BI.SimpleHexColorPickerEditor);

/***/ }),
/* 476 */
/***/ (function(module, exports) {

/**
 * 简单选色控件
 *
 * Created by GUY on 2015/11/16.
 * @class BI.ColorPickerEditor
 * @extends BI.Widget
 */
BI.ColorPickerEditor = BI.inherit(BI.Widget, {
  constants: {
    RGB_WIDTH: 32
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ColorPickerEditor.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-color-picker-editor",
      // width: 200,
      height: 30
    });
  },
  _init: function _init() {
    BI.ColorPickerEditor.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options,
        c = this.constants;
    this.storeValue = {};
    this.colorShow = BI.createWidget({
      type: "bi.layout",
      cls: "color-picker-editor-display bi-card bi-border",
      height: 16,
      width: 16
    });
    var RGB = BI.createWidgets(BI.createItems([{
      text: "R"
    }, {
      text: "G"
    }, {
      text: "B"
    }], {
      type: "bi.label",
      cls: "color-picker-editor-label",
      width: 20,
      height: 20
    }));

    var checker = function checker(v) {
      return BI.isNumeric(v) && (v | 0) >= 0 && (v | 0) <= 255;
    };

    var Ws = BI.createWidgets([{}, {}, {}], {
      type: "bi.small_text_editor",
      cls: "color-picker-editor-input",
      validationChecker: checker,
      errorText: BI.i18nText("BI-Color_Picker_Error_Text"),
      allowBlank: true,
      value: 255,
      width: c.RGB_WIDTH,
      height: 20
    });
    BI.each(Ws, function (i, w) {
      w.on(BI.TextEditor.EVENT_CHANGE, function () {
        self._checkEditors();

        if (checker(self.storeValue.r) && checker(self.storeValue.g) && checker(self.storeValue.b)) {
          self.colorShow.element.css("background-color", self.getValue());
          self.fireEvent(BI.ColorPickerEditor.EVENT_CHANGE);
        }
      });
    });
    this.R = Ws[0];
    this.G = Ws[1];
    this.B = Ws[2];
    this.none = BI.createWidget({
      type: "bi.icon_button",
      cls: "auto-color-icon",
      width: 16,
      height: 16,
      iconWidth: 16,
      iconHeight: 16,
      title: BI.i18nText("BI-Basic_Auto")
    });
    this.none.on(BI.IconButton.EVENT_CHANGE, function () {
      var value = self.getValue();
      self.setValue("");
      value !== "" && self.fireEvent(BI.ColorPickerEditor.EVENT_CHANGE);
    });
    this.transparent = BI.createWidget({
      type: "bi.icon_button",
      cls: "trans-color-icon",
      width: 16,
      height: 16,
      iconWidth: 16,
      iconHeight: 16,
      title: BI.i18nText("BI-Transparent_Color")
    });
    this.transparent.on(BI.IconButton.EVENT_CHANGE, function () {
      var value = self.getValue();
      self.setValue("transparent");
      value !== "transparent" && self.fireEvent(BI.ColorPickerEditor.EVENT_CHANGE);
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.vertical_adapt",
          items: [{
            el: this.colorShow,
            width: 16
          }, {
            el: RGB[0],
            width: 20
          }, {
            el: this.R,
            width: c.RGB_WIDTH
          }, {
            el: RGB[1],
            width: 20
          }, {
            el: this.G,
            width: c.RGB_WIDTH
          }, {
            el: RGB[2],
            width: 20
          }, {
            el: this.B,
            width: c.RGB_WIDTH
          }, {
            el: this.transparent,
            width: 16,
            lgap: 5
          }, {
            el: this.none,
            width: 16,
            lgap: 5
          }]
        },
        left: 10,
        right: 10,
        top: 0,
        bottom: 0
      }]
    });
  },
  _checkEditors: function _checkEditors() {
    if (BI.isEmptyString(this.R.getValue())) {
      this.R.setValue(0);
    }

    if (BI.isEmptyString(this.G.getValue())) {
      this.G.setValue(0);
    }

    if (BI.isEmptyString(this.B.getValue())) {
      this.B.setValue(0);
    }

    this.storeValue = {
      r: this.R.getValue() || 0,
      g: this.G.getValue() || 0,
      b: this.B.getValue() || 0
    };
  },
  _isEmptyRGB: function _isEmptyRGB() {
    return BI.isEmptyString(this.storeValue.r) && BI.isEmptyString(this.storeValue.g) && BI.isEmptyString(this.storeValue.b);
  },
  _showPreColor: function _showPreColor(color) {
    if (color === "") {
      this.colorShow.element.css("background-color", "").removeClass("trans-color-background").addClass("auto-color-normal-background");
    } else if (color === "transparent") {
      this.colorShow.element.css("background-color", "").removeClass("auto-color-normal-background").addClass("trans-color-background");
    } else {
      this.colorShow.element.css({
        "background-color": color
      }).removeClass("auto-color-normal-background").removeClass("trans-color-background");
    }
  },
  _setEnable: function _setEnable(enable) {
    BI.ColorPickerEditor.superclass._setEnable.apply(this, arguments);

    if (enable === true) {
      this.element.removeClass("base-disabled disabled");
    } else if (enable === false) {
      this.element.addClass("base-disabled disabled");
    }
  },
  setValue: function setValue(color) {
    if (color === "transparent") {
      this.transparent.setSelected(true);
      this.none.setSelected(false);

      this._showPreColor("transparent");

      this.R.setValue("");
      this.G.setValue("");
      this.B.setValue("");
      this.storeValue = {
        r: "",
        g: "",
        b: ""
      };
      return;
    }

    if (!color) {
      color = "";
      this.none.setSelected(true);
    } else {
      this.none.setSelected(false);
    }

    this.transparent.setSelected(false);

    this._showPreColor(color);

    var json = BI.DOM.rgb2json(BI.DOM.hex2rgb(color));
    this.storeValue = {
      r: BI.isNull(json.r) ? "" : json.r,
      g: BI.isNull(json.g) ? "" : json.g,
      b: BI.isNull(json.b) ? "" : json.b
    };
    this.R.setValue(this.storeValue.r);
    this.G.setValue(this.storeValue.g);
    this.B.setValue(this.storeValue.b);
  },
  getValue: function getValue() {
    if (this._isEmptyRGB() && this.transparent.isSelected()) {
      return "transparent";
    }

    return BI.DOM.rgb2hex(BI.DOM.json2rgb({
      r: this.storeValue.r,
      g: this.storeValue.g,
      b: this.storeValue.b
    }));
  }
});
BI.ColorPickerEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.color_picker_editor", BI.ColorPickerEditor);

/***/ }),
/* 477 */
/***/ (function(module, exports) {

/**
 * 简单选色控件
 *
 * Created by GUY on 2015/11/16.
 * @class BI.SimpleColorPickerEditor
 * @extends BI.Widget
 */
BI.SimpleColorPickerEditor = BI.inherit(BI.Widget, {
  constants: {
    RGB_WIDTH: 32
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SimpleColorPickerEditor.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-color-picker-editor",
      // width: 200,
      height: 30
    });
  },
  _init: function _init() {
    BI.SimpleColorPickerEditor.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options,
        c = this.constants;
    this.colorShow = BI.createWidget({
      type: "bi.layout",
      cls: "color-picker-editor-display bi-card bi-border",
      height: 16,
      width: 16
    });
    var RGB = BI.createWidgets(BI.createItems([{
      text: "R"
    }, {
      text: "G"
    }, {
      text: "B"
    }], {
      type: "bi.label",
      cls: "color-picker-editor-label",
      width: 20,
      height: 20
    }));

    var checker = function checker(v) {
      return BI.isNumeric(v) && (v | 0) >= 0 && (v | 0) <= 255;
    };

    var Ws = BI.createWidgets([{}, {}, {}], {
      type: "bi.small_text_editor",
      cls: "color-picker-editor-input",
      validationChecker: checker,
      errorText: BI.i18nText("BI-Color_Picker_Error_Text"),
      allowBlank: true,
      value: 255,
      width: c.RGB_WIDTH,
      height: 20
    });
    BI.each(Ws, function (i, w) {
      w.on(BI.TextEditor.EVENT_CHANGE, function () {
        self._checkEditors();

        if (self.R.isValid() && self.G.isValid() && self.B.isValid()) {
          self.colorShow.element.css("background-color", self.getValue());
          self.fireEvent(BI.SimpleColorPickerEditor.EVENT_CHANGE);
        }
      });
    });
    this.R = Ws[0];
    this.G = Ws[1];
    this.B = Ws[2];
    BI.createWidget({
      type: "bi.vertical_adapt",
      element: this,
      items: [{
        el: this.colorShow,
        width: 16,
        lgap: 20,
        rgap: 15
      }, {
        el: RGB[0],
        width: 20
      }, {
        el: this.R,
        width: c.RGB_WIDTH
      }, {
        el: RGB[1],
        width: 20
      }, {
        el: this.G,
        width: c.RGB_WIDTH
      }, {
        el: RGB[2],
        width: 20
      }, {
        el: this.B,
        width: c.RGB_WIDTH
      }]
    });
  },
  _checkEditors: function _checkEditors() {
    if (BI.isEmptyString(this.R.getValue())) {
      this.R.setValue(0);
    }

    if (BI.isEmptyString(this.G.getValue())) {
      this.G.setValue(0);
    }

    if (BI.isEmptyString(this.B.getValue())) {
      this.B.setValue(0);
    }
  },
  setValue: function setValue(color) {
    this.colorShow.element.css({
      "background-color": color
    });
    var json = BI.DOM.rgb2json(BI.DOM.hex2rgb(color));
    this.R.setValue(BI.isNull(json.r) ? "" : json.r);
    this.G.setValue(BI.isNull(json.g) ? "" : json.g);
    this.B.setValue(BI.isNull(json.b) ? "" : json.b);
  },
  getValue: function getValue() {
    return BI.DOM.rgb2hex(BI.DOM.json2rgb({
      r: this.R.getValue(),
      g: this.G.getValue(),
      b: this.B.getValue()
    }));
  }
});
BI.SimpleColorPickerEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.simple_color_picker_editor", BI.SimpleColorPickerEditor);

/***/ }),
/* 478 */
/***/ (function(module, exports) {

BI.Farbtastic = BI.inherit(BI.BasicButton, {
  constants: {
    RADIUS: 84,
    SQUARE: 100,
    WIDTH: 194
  },
  props: {
    baseCls: "bi-farbtastic",
    width: 195,
    height: 195,
    stopPropagation: true,
    value: "#000000"
  },
  render: function render() {
    var self = this;

    this._defaultState();

    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.layout",
          cls: "",
          ref: function ref(_ref) {
            self.colorWrapper = _ref;
          }
        },
        top: 47,
        left: 47,
        width: 101,
        height: 101
      }, {
        el: {
          type: "bi.layout",
          cls: "wheel",
          ref: function ref(_ref) {
            self.wheel = _ref;
          }
        },
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: {
          type: "bi.layout",
          cls: "overlay",
          ref: function ref(_ref) {
            self.overlay = _ref;
          }
        },
        top: 47,
        left: 47,
        width: 101,
        height: 101
      }, {
        el: {
          type: "bi.layout",
          cls: "marker",
          ref: function ref(_ref) {
            self.hMarker = _ref;
          },
          scrollable: false,
          width: 17,
          height: 17
        }
      }, {
        el: {
          type: "bi.layout",
          cls: "marker",
          ref: function ref(_ref) {
            self.slMarker = _ref;
          },
          scrollable: false,
          width: 17,
          height: 17
        }
      }]
    };
  },
  created: function created() {
    var o = this.options;

    if (BI.isKey(o.value)) {
      this.setValue(o.value);
    }
  },
  _defaultState: function _defaultState() {
    this.hsl = [0, 0, 0];
  },
  _unpack: function _unpack(color) {
    if (color.length === 7) {
      return [parseInt("0x" + color.substring(1, 3)) / 255, parseInt("0x" + color.substring(3, 5)) / 255, parseInt("0x" + color.substring(5, 7)) / 255];
    } else if (color.length === 4) {
      return [parseInt("0x" + color.substring(1, 2)) / 15, parseInt("0x" + color.substring(2, 3)) / 15, parseInt("0x" + color.substring(3, 4)) / 15];
    }
  },
  _pack: function _pack(rgb) {
    var r = Math.round(rgb[0] * 255);
    var g = Math.round(rgb[1] * 255);
    var b = Math.round(rgb[2] * 255);
    return "#" + (r < 16 ? "0" : "") + r.toString(16) + (g < 16 ? "0" : "") + g.toString(16) + (b < 16 ? "0" : "") + b.toString(16);
  },
  _setColor: function _setColor(color) {
    var unpack = this._unpack(color);

    if (this.value !== color && unpack) {
      this.value = color;
      this.rgb = unpack;
      this.hsl = this._RGBToHSL(this.rgb);

      this._updateDisplay();
    }
  },
  _setHSL: function _setHSL(hsl) {
    this.hsl = hsl;
    this.rgb = this._HSLToRGB(hsl);
    this.value = this._pack(this.rgb);

    this._updateDisplay();

    return this;
  },
  _HSLToRGB: function _HSLToRGB(hsl) {
    return BI.DOM.hsl2rgb(hsl);
  },
  _RGBToHSL: function _RGBToHSL(rgb) {
    return BI.DOM.rgb2hsl(rgb);
  },
  _updateDisplay: function _updateDisplay() {
    var angle = this.hsl[0] * 6.28;
    this.hMarker.element.css({
      left: Math.round(Math.sin(angle) * this.constants.RADIUS + this.constants.WIDTH / 2) + "px",
      top: Math.round(-Math.cos(angle) * this.constants.RADIUS + this.constants.WIDTH / 2) + "px"
    });
    this.slMarker.element.css({
      left: Math.round(this.constants.SQUARE * (.5 - this.hsl[1]) + this.constants.WIDTH / 2) + "px",
      top: Math.round(this.constants.SQUARE * (.5 - this.hsl[2]) + this.constants.WIDTH / 2) + "px"
    }); // Saturation/Luminance gradient

    this.colorWrapper.element.css("backgroundColor", this._pack(this._HSLToRGB([this.hsl[0], 1, 0.5])));
  },
  _absolutePosition: function _absolutePosition(el) {
    var r = {
      x: el.offsetLeft,
      y: el.offsetTop
    }; // Resolve relative to offsetParent

    if (el.offsetParent) {
      var tmp = this._absolutePosition(el.offsetParent);

      r.x += tmp.x;
      r.y += tmp.y;
    }

    return r;
  },
  _widgetCoords: function _widgetCoords(event) {
    var x, y;
    var el = event.target || event.srcElement;
    var reference = this.wheel.element[0];

    if (typeof event.offsetX !== "undefined") {
      // Use offset coordinates and find common offsetParent
      var pos = {
        x: event.offsetX,
        y: event.offsetY
      }; // Send the coordinates upwards through the offsetParent chain.

      var e = el;

      while (e) {
        e.mouseX = pos.x;
        e.mouseY = pos.y;
        pos.x += e.offsetLeft;
        pos.y += e.offsetTop;
        e = e.offsetParent;
      } // Look for the coordinates starting from the wheel widget.


      var e = reference;
      var offset = {
        x: 0,
        y: 0
      };

      while (e) {
        if (typeof e.mouseX !== "undefined") {
          x = e.mouseX - offset.x;
          y = e.mouseY - offset.y;
          break;
        }

        offset.x += e.offsetLeft;
        offset.y += e.offsetTop;
        e = e.offsetParent;
      } // Reset stored coordinates


      e = el;

      while (e) {
        e.mouseX = undefined;
        e.mouseY = undefined;
        e = e.offsetParent;
      }
    } else {
      // Use absolute coordinates
      var pos = this._absolutePosition(reference);

      x = (event.pageX || 0) - pos.x;
      y = (event.pageY || 0) - pos.y;
    } // Subtract distance to middle


    return {
      x: x - this.constants.WIDTH / 2,
      y: y - this.constants.WIDTH / 2
    };
  },
  _doMouseMove: function _doMouseMove(event) {
    var pos = this._widgetCoords(event); // Set new HSL parameters


    if (this.circleDrag) {
      var hue = Math.atan2(pos.x, -pos.y) / 6.28;
      if (hue < 0) hue += 1;

      this._setHSL([hue, this.hsl[1], this.hsl[2]]);
    } else {
      var sat = Math.max(0, Math.min(1, -(pos.x / this.constants.SQUARE) + .5));
      var lum = Math.max(0, Math.min(1, -(pos.y / this.constants.SQUARE) + .5));

      this._setHSL([this.hsl[0], sat, lum]);
    }

    this.fireEvent(BI.Farbtastic.EVENT_CHANGE, this.getValue(), this);
  },
  doClick: function doClick(event) {
    var pos = this._widgetCoords(event);

    this.circleDrag = Math.max(Math.abs(pos.x), Math.abs(pos.y)) * 2 > this.constants.SQUARE; // Process

    this._doMouseMove(event);

    return false;
  },
  setValue: function setValue(color) {
    this._setColor(color);
  },
  getValue: function getValue() {
    return this.value;
  }
});
BI.Farbtastic.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.farbtastic", BI.Farbtastic);

/***/ }),
/* 479 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2017/2/8.
 *
 * @class BI.BubbleCombo
 * @extends BI.Widget
 */
BI.BubbleCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.BubbleCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-bubble-combo",
      trigger: "click",
      toggle: true,
      primary: false,
      direction: "bottom,left",
      // top||bottom||left||right||top,left||top,right||bottom,left||bottom,right
      isDefaultInit: false,
      destroyWhenHide: false,
      hideWhenClickOutside: true,
      hideWhenBlur: true,
      isNeedAdjustHeight: true,
      // 是否需要高度调整
      isNeedAdjustWidth: true,
      stopPropagation: false,
      adjustLength: 0,
      // 调整的距离
      adjustXOffset: 0,
      adjustYOffset: 0,
      hideChecker: BI.emptyFn,
      offsetStyle: "left",
      // left,right,center
      el: {},
      popup: {}
    });
  },
  _init: function _init() {
    var _this = this;

    BI.BubbleCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.combo = BI.createWidget({
      type: "bi.combo",
      element: this,
      trigger: o.trigger,
      toggle: o.toggle,
      logic: o.logic,
      container: o.container,
      direction: o.direction,
      isDefaultInit: o.isDefaultInit,
      hideWhenBlur: o.hideWhenBlur,
      hideWhenClickOutside: o.hideWhenClickOutside,
      destroyWhenHide: o.destroyWhenHide,
      hideWhenAnotherComboOpen: o.hideWhenAnotherComboOpen,
      isNeedAdjustHeight: o.isNeedAdjustHeight,
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      stopPropagation: o.stopPropagation,
      adjustXOffset: o.adjustXOffset,
      adjustYOffset: o.adjustYOffset,
      hideChecker: o.hideChecker,
      offsetStyle: o.offsetStyle,
      showArrow: true,
      comboClass: o.comboClass,
      el: o.el,
      popup: function popup() {
        return BI.extend({
          type: "bi.bubble_popup_view",
          animation: "bi-zoom-big",
          animationDuring: 200,
          primary: o.primary
        }, BI.isFunction(_this.options.popup) ? _this.options.popup() : _this.options.popup);
      }
    });
    this.combo.on(BI.Combo.EVENT_TRIGGER_CHANGE, function () {
      self.fireEvent(BI.BubbleCombo.EVENT_TRIGGER_CHANGE, arguments);
    });
    this.combo.on(BI.Combo.EVENT_CHANGE, function () {
      self.fireEvent(BI.BubbleCombo.EVENT_CHANGE, arguments);
    });
    this.combo.on(BI.Combo.EVENT_EXPAND, function () {
      self.fireEvent(BI.BubbleCombo.EVENT_EXPAND, arguments);
    });
    this.combo.on(BI.Combo.EVENT_COLLAPSE, function () {
      self.fireEvent(BI.BubbleCombo.EVENT_COLLAPSE, arguments);
    });
    this.combo.on(BI.Combo.EVENT_AFTER_INIT, function () {
      self.fireEvent(BI.BubbleCombo.EVENT_AFTER_INIT, arguments);
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      self.fireEvent(BI.BubbleCombo.EVENT_BEFORE_POPUPVIEW, arguments);
    });
    this.combo.on(BI.Combo.EVENT_AFTER_POPUPVIEW, function () {
      self.fireEvent(BI.BubbleCombo.EVENT_AFTER_POPUPVIEW, arguments);
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_HIDEVIEW, function () {
      self.fireEvent(BI.BubbleCombo.EVENT_BEFORE_HIDEVIEW, arguments);
    });
    this.combo.on(BI.Combo.EVENT_AFTER_HIDEVIEW, function () {
      self.fireEvent(BI.BubbleCombo.EVENT_AFTER_HIDEVIEW, arguments);
    });
  },
  hideView: function hideView() {
    this.combo && this.combo.hideView();
  },
  showView: function showView() {
    this.combo && this.combo.showView();
  },
  isViewVisible: function isViewVisible() {
    return this.combo.isViewVisible();
  },
  adjustWidth: function adjustWidth() {
    this.combo.adjustWidth();
  },
  adjustHeight: function adjustHeight() {
    this.combo.adjustHeight();
  }
});
BI.BubbleCombo.EVENT_TRIGGER_CHANGE = "EVENT_TRIGGER_CHANGE";
BI.BubbleCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.BubbleCombo.EVENT_EXPAND = "EVENT_EXPAND";
BI.BubbleCombo.EVENT_COLLAPSE = "EVENT_COLLAPSE";
BI.BubbleCombo.EVENT_AFTER_INIT = "EVENT_AFTER_INIT";
BI.BubbleCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.BubbleCombo.EVENT_AFTER_POPUPVIEW = "EVENT_AFTER_POPUPVIEW";
BI.BubbleCombo.EVENT_BEFORE_HIDEVIEW = "EVENT_BEFORE_HIDEVIEW";
BI.BubbleCombo.EVENT_AFTER_HIDEVIEW = "EVENT_AFTER_HIDEVIEW";
BI.shortcut("bi.bubble_combo", BI.BubbleCombo);

/***/ }),
/* 480 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2017/2/8.
 *
 * @class BI.BubblePopupView
 * @extends BI.PopupView
 */
BI.BubblePopupView = BI.inherit(BI.PopupView, {
  _defaultConfig: function _defaultConfig() {
    var config = BI.BubblePopupView.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(config, {
      baseCls: config.baseCls + " bi-bubble-popup-view",
      minWidth: 70,
      maxWidth: 300,
      // minHeight: 50,
      showArrow: true
    });
  }
});
BI.shortcut("bi.bubble_popup_view", BI.BubblePopupView);
/**
 * Created by GUY on 2017/2/8.
 *
 * @class BI.BubblePopupBarView
 * @extends BI.BubblePopupView
 */

BI.BubblePopupBarView = BI.inherit(BI.BubblePopupView, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.BubblePopupBarView.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-bubble-bar-popup-view",
      buttons: [{
        value: false,
        text: BI.i18nText("BI-Basic_Cancel"),
        level: "ignore"
      }, {
        text: BI.i18nText(BI.i18nText("BI-Basic_OK")),
        value: true
      }],
      innerVgap: 16,
      innerHgap: 16
    });
  },
  _createToolBar: function _createToolBar() {
    var o = this.options,
        self = this;
    var items = [];
    BI.each(o.buttons, function (i, buttonOpt) {
      if (BI.isWidget(buttonOpt)) {
        items.push({
          el: buttonOpt,
          lgap: 12
        });
      } else {
        items.push({
          el: BI.extend({
            type: "bi.button",
            height: 24,
            handler: function handler(v) {
              self.fireEvent(BI.BubblePopupBarView.EVENT_CLICK_TOOLBAR_BUTTON, v);
            }
          }, buttonOpt),
          lgap: 12
        });
      }
    });
    return BI.createWidget({
      type: "bi.right_vertical_adapt",
      innerVgap: o.innerVgap,
      innerHgap: o.innerHgap,
      items: items
    });
  },
  _createContent: function _createContent() {
    return this.options.el;
  },
  _createView: function _createView() {
    var o = this.options;
    var view = BI.createWidget({
      type: "bi.vertical",
      items: [this._createContent()],
      cls: "bar-popup-container",
      hgap: o.innerHgap,
      tgap: o.innerVgap
    });
    view.element.css("min-height", o.minHeight);
    return view;
  }
});
BI.BubblePopupBarView.EVENT_CLICK_TOOLBAR_BUTTON = "EVENT_CLICK_TOOLBAR_BUTTON";
BI.shortcut("bi.bubble_bar_popup_view", BI.BubblePopupBarView);
/**
 * Created by Windy on 2018/2/2.
 *
 * @class BI.TextBubblePopupBarView
 * @extends BI.BubblePopupView
 */

BI.TextBubblePopupBarView = BI.inherit(BI.BubblePopupBarView, {
  _defaultConfig: function _defaultConfig() {
    var config = BI.TextBubblePopupBarView.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(config, {
      baseCls: config.baseCls + " bi-text-bubble-bar-popup-view",
      text: ""
    });
  },
  _createContent: function _createContent() {
    var self = this,
        o = this.options;
    return {
      type: "bi.label",
      text: o.text,
      whiteSpace: "normal",
      textAlign: "left",
      ref: function ref() {
        self.text = this;
      }
    };
  },
  populate: function populate(v) {
    this.text.setText(v || this.options.text);
  }
});
BI.TextBubblePopupBarView.EVENT_CHANGE = "EVENT_CLICK_TOOLBAR_BUTTON";
BI.shortcut("bi.text_bubble_bar_popup_view", BI.TextBubblePopupBarView);

/***/ }),
/* 481 */
/***/ (function(module, exports) {

/**
 * Created by Young's on 2016/4/28.
 */
BI.EditorIconCheckCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.EditorIconCheckCombo.superclass._defaultConfig.apply(this, arguments), {
      baseClass: "bi-check-editor-combo",
      width: 100,
      height: 24,
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      allowBlank: true,
      watermark: "",
      errorText: ""
    });
  },
  _init: function _init() {
    BI.EditorIconCheckCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.trigger = BI.createWidget({
      type: "bi.editor_trigger",
      items: o.items,
      height: o.height,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      allowBlank: o.allowBlank,
      watermark: o.watermark,
      errorText: o.errorText,
      value: o.value
    });
    this.trigger.on(BI.EditorTrigger.EVENT_CHANGE, function () {
      self.popup.setValue(this.getValue());
      self.fireEvent(BI.EditorIconCheckCombo.EVENT_CHANGE, arguments);
    });
    this.trigger.on(BI.EditorTrigger.EVENT_FOCUS, function () {
      self.fireEvent(BI.EditorIconCheckCombo.EVENT_FOCUS, arguments);
    });
    this.trigger.on(BI.EditorTrigger.EVENT_EMPTY, function () {
      self.fireEvent(BI.EditorIconCheckCombo.EVENT_EMPTY, arguments);
    });
    this.trigger.on(BI.EditorTrigger.EVENT_VALID, function () {
      self.fireEvent(BI.EditorIconCheckCombo.EVENT_VALID, arguments);
    });
    this.trigger.on(BI.EditorTrigger.EVENT_ERROR, function () {
      self.fireEvent(BI.EditorIconCheckCombo.EVENT_ERROR, arguments);
    });
    this.popup = BI.createWidget({
      type: "bi.text_value_check_combo_popup",
      chooseType: o.chooseType,
      items: o.items,
      value: o.value
    });
    this.popup.on(BI.TextValueCheckComboPopup.EVENT_CHANGE, function () {
      self.setValue(self.popup.getValue());
      self.editorIconCheckCombo.hideView();
      self.fireEvent(BI.EditorIconCheckCombo.EVENT_CHANGE);
    });
    this.popup.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editorIconCheckCombo = BI.createWidget({
      type: "bi.combo",
      container: o.container,
      direction: o.direction,
      element: this,
      adjustLength: 2,
      el: this.trigger,
      popup: {
        el: this.popup,
        maxHeight: 300
      }
    });
  },
  setValue: function setValue(v) {
    this.editorIconCheckCombo.setValue(v);
  },
  getValue: function getValue() {
    return this.trigger.getValue();
  },
  populate: function populate(items) {
    this.options.items = items;
    this.editorIconCheckCombo.populate(items);
  }
});
BI.EditorIconCheckCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.EditorIconCheckCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.EditorIconCheckCombo.EVENT_EMPTY = "EVENT_EMPTY";
BI.EditorIconCheckCombo.EVENT_VALID = "EVENT_VALID";
BI.EditorIconCheckCombo.EVENT_ERROR = "EVENT_ERROR";
BI.shortcut("bi.editor_icon_check_combo", BI.EditorIconCheckCombo);

/***/ }),
/* 482 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/2/2.
 *
 * @class BI.IconCombo
 * @extend BI.Widget
 */
BI.IconCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.IconCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-icon-combo",
      width: 24,
      height: 24,
      el: {},
      popup: {},
      minWidth: 100,
      maxWidth: "auto",
      maxHeight: 300,
      direction: "bottom",
      adjustLength: 3,
      // 调整的距离
      adjustXOffset: 0,
      adjustYOffset: 0,
      offsetStyle: "left",
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
      isShowDown: true,
      hideWhenAnotherComboOpen: false
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;
    o.items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;

    BI.IconCombo.superclass._init.apply(this, arguments);

    this.trigger = BI.createWidget(o.el, {
      type: "bi.icon_combo_trigger",
      iconCls: o.iconCls,
      title: o.title,
      items: o.items,
      width: o.width,
      height: o.height,
      iconWidth: o.iconWidth,
      iconHeight: o.iconHeight,
      value: o.value,
      isShowDown: o.isShowDown
    });
    this.popup = BI.createWidget(o.popup, {
      type: "bi.icon_combo_popup",
      chooseType: o.chooseType,
      items: o.items,
      value: o.value
    });
    this.popup.on(BI.IconComboPopup.EVENT_CHANGE, function () {
      self.setValue(self.popup.getValue());
      self.iconCombo.hideView();
      self.fireEvent(BI.IconCombo.EVENT_CHANGE);
    });
    this.popup.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.iconCombo = BI.createWidget({
      type: "bi.combo",
      element: this,
      direction: o.direction,
      trigger: o.trigger,
      container: o.container,
      adjustLength: o.adjustLength,
      adjustXOffset: o.adjustXOffset,
      adjustYOffset: o.adjustYOffset,
      offsetStyle: o.offsetStyle,
      el: this.trigger,
      hideWhenAnotherComboOpen: o.hideWhenAnotherComboOpen,
      popup: {
        el: this.popup,
        maxWidth: o.maxWidth,
        maxHeight: o.maxHeight,
        minWidth: o.minWidth
      }
    });
  },
  showView: function showView() {
    this.iconCombo.showView();
  },
  hideView: function hideView() {
    this.iconCombo.hideView();
  },
  setValue: function setValue(v) {
    this.trigger.setValue(v);
    this.popup.setValue(v);
  },
  getValue: function getValue() {
    var value = this.popup.getValue();
    return BI.isNull(value) ? [] : BI.isArray(value) ? value : [value];
  },
  populate: function populate(items) {
    this.options.items = items;
    this.iconCombo.populate(items);
  }
});
BI.IconCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_combo", BI.IconCombo);

/***/ }),
/* 483 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/2/2.
 *
 * @class BI.IconComboPopup
 * @extend BI.Pane
 */
BI.IconComboPopup = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.IconComboPopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi.icon-combo-popup",
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE
    });
  },
  _init: function _init() {
    BI.IconComboPopup.superclass._init.apply(this, arguments);

    var o = this.options,
        self = this;
    this.popup = BI.createWidget({
      type: "bi.button_group",
      items: BI.createItems(o.items, {
        type: "bi.single_select_icon_text_item"
      }),
      chooseType: o.chooseType,
      layouts: [{
        type: "bi.vertical"
      }],
      value: o.value
    });
    this.popup.on(BI.Controller.EVENT_CHANGE, function (type, val, obj) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.IconComboPopup.EVENT_CHANGE, val, obj);
      }
    });
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      vgap: 5,
      items: [this.popup]
    });
  },
  populate: function populate(items) {
    BI.IconComboPopup.superclass.populate.apply(this, arguments);
    items = BI.createItems(items, {
      type: "bi.single_select_icon_text_item"
    });
    this.popup.populate(items);
  },
  getValue: function getValue() {
    return this.popup.getValue();
  },
  setValue: function setValue(v) {
    this.popup.setValue(v);
  }
});
BI.IconComboPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_combo_popup", BI.IconComboPopup);

/***/ }),
/* 484 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/2/2.
 *
 * @class BI.IconComboTrigger
 * @extend BI.Widget
 */
BI.IconComboTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.IconComboTrigger.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-icon-combo-trigger",
      el: {},
      items: [],
      iconCls: "",
      width: 24,
      height: 24,
      isShowDown: true,
      value: ""
    });
  },
  _init: function _init() {
    BI.IconComboTrigger.superclass._init.apply(this, arguments);

    var o = this.options,
        self = this;
    var iconCls = "";

    if (BI.isKey(o.value)) {
      iconCls = this._digest(o.value, o.items);
    }

    this.button = BI.createWidget(o.el, {
      type: "bi.icon_change_button",
      cls: "icon-combo-trigger-icon",
      iconCls: iconCls,
      disableSelected: true,
      width: o.isShowDown ? o.width - 12 : o.width,
      height: o.height,
      iconWidth: o.iconWidth,
      iconHeight: o.iconHeight,
      selected: BI.isNotEmptyString(iconCls)
    });
    this.down = BI.createWidget({
      type: "bi.icon_button",
      disableSelected: true,
      cls: "icon-combo-down-icon trigger-triangle-font font-size-12",
      width: 12,
      height: 8,
      selected: BI.isNotEmptyString(iconCls),
      invisible: !o.isShowDown
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.button,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: this.down,
        right: 3,
        bottom: 0
      }]
    });
  },
  _digest: function _digest(v, items) {
    var iconCls = "";
    v = BI.isArray(v) ? v[0] : v;
    BI.any(items, function (i, item) {
      if (v === item.value) {
        iconCls = item.iconCls;
        return true;
      }
    });
    return iconCls;
  },
  populate: function populate(items) {
    var o = this.options;
    this.options.items = items || [];
    this.button.setIcon(o.iconCls);
    this.button.setSelected(false);
    this.down.setSelected(false);
  },
  setValue: function setValue(v) {
    BI.IconComboTrigger.superclass.setValue.apply(this, arguments);
    var o = this.options;

    var iconCls = this._digest(v, this.options.items);

    v = BI.isArray(v) ? v[0] : v;

    if (BI.isNotEmptyString(iconCls)) {
      this.button.setIcon(iconCls);
      this.button.setSelected(true);
      this.down.setSelected(true);
    } else {
      this.button.setIcon(o.iconCls);
      this.button.setSelected(false);
      this.down.setSelected(false);
    }
  }
});
BI.IconComboTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_combo_trigger", BI.IconComboTrigger);

/***/ }),
/* 485 */
/***/ (function(module, exports) {

/**
 * Created by Windy on 2017/12/12.
 * combo : icon + text + icon, popup : icon + text
 */
BI.IconTextValueCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig(config) {
    return BI.extend(BI.IconTextValueCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-icon-text-value-combo " + (config.simple ? "bi-border-bottom" : "bi-border bi-border-radius"),
      height: 24,
      iconHeight: null,
      iconWidth: null,
      value: ""
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;
    o.items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;

    BI.IconTextValueCombo.superclass._init.apply(this, arguments);

    this.trigger = BI.createWidget({
      type: "bi.select_icon_text_trigger",
      cls: "icon-text-value-trigger",
      items: o.items,
      height: BI.toPix(o.height, 2),
      text: o.text,
      iconCls: o.iconCls,
      value: o.value,
      iconHeight: o.iconHeight,
      iconWidth: o.iconWidth,
      iconWrapperWidth: o.iconWrapperWidth,
      title: o.title,
      warningTitle: o.warningTitle
    });
    this.popup = BI.createWidget({
      type: "bi.icon_text_value_combo_popup",
      items: o.items,
      value: o.value,
      iconHeight: o.iconHeight,
      iconWidth: o.iconWidth,
      iconWrapperWidth: o.iconWrapperWidth
    });
    this.popup.on(BI.IconTextValueComboPopup.EVENT_CHANGE, function () {
      self.setValue(self.popup.getValue());
      self.textIconCombo.hideView();
      self.fireEvent(BI.IconTextValueCombo.EVENT_CHANGE, arguments);
    });
    this.popup.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.textIconCombo = BI.createWidget({
      type: "bi.combo",
      height: BI.toPix(o.height, 2),
      width: BI.toPix(o.width, 2),
      element: this,
      container: o.container,
      direction: o.direction,
      adjustLength: 2,
      el: this.trigger,
      popup: {
        el: this.popup,
        maxHeight: 240,
        minHeight: 25
      }
    });

    if (BI.isKey(o.value)) {
      this.setValue(o.value);
    }
  },
  _checkError: function _checkError(v) {
    if (BI.isNull(v) || BI.isEmptyArray(v) || BI.isEmptyString(v)) {
      this.trigger.options.tipType = "success";
      this.element.removeClass("combo-error");
    } else {
      v = BI.isArray(v) ? v : [v];
      var result = BI.find(this.options.items, function (idx, item) {
        return BI.contains(v, item.value);
      });

      if (BI.isNull(result)) {
        this.trigger.options.tipType = "warning";
        this.element.removeClass("combo-error").addClass("combo-error");
      } else {
        this.trigger.options.tipType = "success";
        this.element.removeClass("combo-error");
      }
    }
  },
  setValue: function setValue(v) {
    this.trigger.setValue(v);
    this.popup.setValue(v);

    this._checkError(v);
  },
  getValue: function getValue() {
    var value = this.popup.getValue();
    return BI.isNull(value) ? [] : BI.isArray(value) ? value : [value];
  },
  populate: function populate(items) {
    this.options.items = items;
    this.textIconCombo.populate(items);
  }
});
BI.IconTextValueCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_text_value_combo", BI.IconTextValueCombo);

/***/ }),
/* 486 */
/***/ (function(module, exports) {

/**
 * Created by Windy on 2017/12/12.
 */
BI.IconTextValueComboPopup = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.IconTextValueComboPopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-icon-text-icon-popup",
      behaviors: {
        redmark: function redmark() {
          return true;
        }
      }
    });
  },
  _init: function _init() {
    BI.IconTextValueComboPopup.superclass._init.apply(this, arguments);

    var o = this.options,
        self = this;
    this.popup = BI.createWidget({
      type: "bi.button_group",
      items: BI.createItems(o.items, {
        type: "bi.single_select_icon_text_item",
        iconHeight: o.iconHeight,
        iconWidth: o.iconWidth,
        iconWrapperWidth: o.iconWrapperWidth
      }),
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
      layouts: [{
        type: "bi.vertical"
      }],
      behaviors: o.behaviors,
      value: o.value
    });
    this.popup.on(BI.Controller.EVENT_CHANGE, function (type, val, obj) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.IconTextValueComboPopup.EVENT_CHANGE, val, obj);
      }
    });
    this.check();
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      vgap: 5,
      items: [this.popup]
    });
  },
  populate: function populate(items, keyword) {
    BI.IconTextValueComboPopup.superclass.populate.apply(this, arguments);
    var o = this.options;
    items = BI.createItems(items, {
      type: "bi.single_select_icon_text_item",
      iconWrapperWidth: o.iconWrapperWidth,
      iconHeight: o.iconHeight,
      iconWidth: o.iconWidth
    });
    this.popup.populate(items, keyword);
  },
  getValue: function getValue() {
    return this.popup.getValue();
  },
  setValue: function setValue(v) {
    this.popup.setValue(v);
  }
});
BI.IconTextValueComboPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.icon_text_value_combo_popup", BI.IconTextValueComboPopup);

/***/ }),
/* 487 */
/***/ (function(module, exports) {

/**
 * Created by Windy on 2018/2/2.
 */
BI.SearchTextValueCombo = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-search-text-value-combo",
    height: 24,
    text: "",
    defaultText: "",
    items: [],
    tipType: "",
    warningTitle: "",
    allowClear: false
  },
  render: function render() {
    var self = this,
        o = this.options;
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;
    o.items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    return {
      type: "bi.combo",
      cls: (o.simple ? "bi-border-bottom" : "bi-border bi-border-radius") + " bi-focus-shadow",
      container: o.container,
      adjustLength: 2,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      width: BI.toPix(o.width, 2),
      ref: function ref() {
        self.combo = this;
      },
      el: {
        type: "bi.search_text_value_trigger",
        cls: "search-text-value-trigger",
        watermark: o.watermark,
        ref: function ref() {
          self.trigger = this;
        },
        items: o.items,
        height: BI.toPix(o.height, o.simple ? 1 : 2),
        text: o.text,
        defaultText: o.defaultText,
        value: o.value,
        tipType: o.tipType,
        warningTitle: o.warningTitle,
        title: o.title,
        allowClear: o.allowClear,
        listeners: [{
          eventName: BI.SearchTextValueTrigger.EVENT_CHANGE,
          action: function action() {
            self.setValue(this.getValue()[0]);
            self.combo.hideView();
            self.fireEvent(BI.SearchTextValueCombo.EVENT_CHANGE);
          }
        }, {
          eventName: BI.SearchTextValueTrigger.EVENT_CLEAR,
          action: function action() {
            self._clear();

            self.fireEvent(BI.SearchTextValueCombo.EVENT_CHANGE);
          }
        }]
      },
      popup: {
        el: {
          type: "bi.text_value_combo_popup",
          chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
          value: o.value,
          items: o.items,
          ref: function ref() {
            self.popup = this;
            self.trigger.getSearcher().setAdapter(self.popup);
          },
          listeners: [{
            eventName: BI.TextValueComboPopup.EVENT_CHANGE,
            action: function action() {
              self.setValue(this.getValue()[0]);
              self.combo.hideView();
              self.fireEvent(BI.SearchTextValueCombo.EVENT_CHANGE);
            }
          }]
        },
        value: o.value,
        maxHeight: 252,
        minHeight: 25
      },
      listeners: [{
        eventName: BI.Combo.EVENT_AFTER_HIDEVIEW,
        action: function action() {
          self.trigger.stopEditing();
          self.fireEvent(BI.SearchTextValueCombo.EVENT_AFTER_HIDEVIEW);
        }
      }, {
        eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.SearchTextValueCombo.EVENT_BEFORE_POPUPVIEW);
        }
      }]
    };
  },
  created: function created() {
    var o = this.options;

    if (BI.isKey(o.value)) {
      this._checkError(o.value);
    }
  },
  _clear: function _clear() {
    this.setValue();
  },
  _checkError: function _checkError(v) {
    if (BI.isNull(v) || BI.isEmptyArray(v) || BI.isEmptyString(v)) {
      this.trigger.options.tipType = "success";
      this.element.removeClass("combo-error");
    } else {
      v = BI.isArray(v) ? v : [v];
      var result = BI.find(this.options.items, function (idx, item) {
        return BI.contains(v, item.value);
      });

      if (BI.isNull(result)) {
        this.element.removeClass("combo-error").addClass("combo-error");
        this.trigger.attr("tipType", "warning");
      } else {
        this.element.removeClass("combo-error");
        this.trigger.attr("tipType", "success");
      }
    }
  },
  populate: function populate(items) {
    this.options.items = items;
    this.combo.populate(items);
  },
  setValue: function setValue(v) {
    this.combo.setValue(v);

    this._checkError(v);
  },
  getValue: function getValue() {
    var value = this.combo.getValue();
    return BI.isNull(value) ? [] : BI.isArray(value) ? value : [value];
  }
});
BI.SearchTextValueCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.SearchTextValueCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.SearchTextValueCombo.EVENT_AFTER_HIDEVIEW = "EVENT_AFTER_HIDEVIEW";
BI.shortcut("bi.search_text_value_combo", BI.SearchTextValueCombo);

/***/ }),
/* 488 */
/***/ (function(module, exports) {

/**
 * Created by Windy on 2018/2/5.
 */
BI.SearchTextValueComboPopup = BI.inherit(BI.Pane, {
  props: {
    baseCls: "bi-search-text-value-popup"
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical",
      vgap: 5,
      items: [{
        type: "bi.button_group",
        ref: function ref() {
          self.popup = this;
        },
        items: this._formatItems(o.items),
        chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
        layouts: [{
          type: "bi.vertical"
        }],
        behaviors: {
          redmark: function redmark() {
            return true;
          }
        },
        value: o.value,
        listeners: [{
          eventName: BI.Controller.EVENT_CHANGE,
          action: function action(type, val, obj) {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

            if (type === BI.Events.CLICK) {
              self.fireEvent(BI.SearchTextValueComboPopup.EVENT_CHANGE, val, obj);
            }
          }
        }]
      }]
    };
  },
  _formatItems: function _formatItems(items) {
    var o = this.options;
    return BI.map(items, function (i, item) {
      return BI.extend({
        type: "bi.single_select_item",
        textAlign: o.textAlign,
        title: item.title || item.text
      }, item);
    });
  },
  // mounted之后做check
  mounted: function mounted() {
    this.check();
  },
  populate: function populate(find, match, keyword) {
    var items = BI.concat(find, match);
    BI.SearchTextValueComboPopup.superclass.populate.apply(this, items);
    this.popup.populate(this._formatItems(items), keyword);
  },
  getValue: function getValue() {
    return this.popup.getValue();
  },
  setValue: function setValue(v) {
    this.popup.setValue(v);
  }
});
BI.SearchTextValueComboPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.search_text_value_combo_popup", BI.SearchTextValueComboPopup);

/***/ }),
/* 489 */
/***/ (function(module, exports) {

/**
 * Created by Windy on 2018/2/2.
 */
BI.SearchTextValueTrigger = BI.inherit(BI.Trigger, {
  props: function props() {
    var _this = this;

    return {
      baseCls: "bi-search-text-value-trigger",
      height: 24,
      watermark: BI.i18nText("BI-Basic_Search"),
      allowClear: false,
      title: function title() {
        return _this.editor.getText();
      }
    };
  },
  render: function render() {
    var self = this,
        o = this.options;
    var triggerButton = {
      type: "bi.trigger_icon_button",
      cls: "trigger-icon-button",
      ref: function ref() {
        self.triggerBtn = this;
      },
      width: o.height,
      height: o.height
    };
    var stateText = this._digest(o.value, o.items) || o.text;
    return {
      type: "bi.horizontal_fill",
      columnSize: ["fill", 24],
      items: [{
        el: {
          type: "bi.searcher",
          ref: function ref() {
            self.searcher = this;
          },
          isAutoSearch: false,
          el: {
            type: "bi.default_text_editor",
            ref: function ref() {
              self.editor = this;
            },
            watermark: o.watermark,
            defaultText: o.defaultText,
            text: stateText,
            value: o.value,
            height: o.height
          },
          popup: {
            type: "bi.search_text_value_combo_popup",
            cls: "bi-card",
            chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
            tipText: BI.i18nText("BI-No_Select")
          },
          onSearch: function onSearch(obj, callback) {
            var keyword = obj.keyword;
            var finding = BI.Func.getSearchResult(o.items, keyword);
            var matched = finding.match,
                find = finding.find;
            callback(matched, find);
          },
          listeners: [{
            eventName: BI.Searcher.EVENT_CHANGE,
            action: function action() {
              self.fireEvent(BI.SearchTextValueTrigger.EVENT_CHANGE);
            }
          }]
        }
      }, {
        el: o.allowClear ? {
          type: "bi.vertical_adapt",
          horizontalAlign: "left",
          scrollable: false,
          items: [{
            el: {
              type: "bi.icon_button",
              ref: function ref(_ref) {
                self.clearBtn = _ref;
              },
              cls: "close-h-font " + (o.allowClear ? "clear-button" : ""),
              stopPropagation: true,
              invisible: !BI.isNotEmptyString(stateText),
              width: o.height,
              height: o.height,
              handler: function handler() {
                self.fireEvent(BI.SearchTextValueTrigger.EVENT_CLEAR);
              }
            }
          }, {
            el: triggerButton
          }]
        } : triggerButton,
        width: 24
      }]
    };
  },
  _setState: function _setState(v) {
    this.editor.setState(v);
  },
  _digest: function _digest(value, items) {
    var result = BI.find(items, function (i, item) {
      return item.value === value;
    });
    return result === null || result === void 0 ? void 0 : result.text;
  },
  stopEditing: function stopEditing() {
    this.searcher.stopSearch();
  },
  getSearcher: function getSearcher() {
    return this.searcher;
  },
  populate: function populate(items) {
    this.options.items = items;
  },
  setValue: function setValue(vals) {
    var digestText = this._digest(vals, this.options.items);

    this._setState(digestText);

    this.options.allowClear && this.clearBtn.setVisible(BI.isNotEmptyString(digestText));
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  }
});
BI.SearchTextValueTrigger.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.SearchTextValueTrigger.EVENT_STOP = "EVENT_STOP";
BI.SearchTextValueTrigger.EVENT_START = "EVENT_START";
BI.SearchTextValueTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.SearchTextValueTrigger.EVENT_CLEAR = "EVENT_CLEAR";
BI.shortcut("bi.search_text_value_trigger", BI.SearchTextValueTrigger);

/***/ }),
/* 490 */
/***/ (function(module, exports) {

/**
 * @class BI.TextValueCheckCombo
 * @extend BI.Widget
 * combo : text + icon, popup : check + text
 */
BI.TextValueCheckCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig(config) {
    return BI.extend(BI.TextValueCheckCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-text-value-check-combo " + (config.simple ? "bi-border-bottom" : "bi-border"),
      width: 100,
      height: 24,
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
      value: ""
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;
    o.items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;

    BI.TextValueCheckCombo.superclass._init.apply(this, arguments);

    this.trigger = BI.createWidget({
      type: "bi.select_text_trigger",
      cls: "text-value-trigger",
      items: o.items,
      height: BI.toPix(o.height, 2),
      text: o.text,
      value: o.value
    });
    this.popup = BI.createWidget({
      type: "bi.text_value_check_combo_popup",
      chooseType: o.chooseType,
      items: o.items,
      value: o.value
    });
    this.popup.on(BI.TextValueCheckComboPopup.EVENT_CHANGE, function () {
      self.setValue(self.popup.getValue());
      self.textIconCheckCombo.hideView();
      self.fireEvent(BI.TextValueCheckCombo.EVENT_CHANGE);
    });
    this.popup.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.textIconCheckCombo = BI.createWidget({
      type: "bi.combo",
      container: o.container,
      direction: o.direction,
      element: this,
      width: BI.toPix(o.width, 2),
      height: BI.toPix(o.height, 2),
      adjustLength: 2,
      el: this.trigger,
      popup: {
        el: this.popup,
        maxHeight: 300
      }
    });

    if (BI.isKey(o.value)) {
      this.setValue(o.value);
    }
  },
  setTitle: function setTitle(title) {
    this.trigger.setTitle(title);
  },
  setValue: function setValue(v) {
    this.trigger.setValue(v);
    this.popup.setValue(v);
  },
  setWarningTitle: function setWarningTitle(title) {
    this.trigger.setWarningTitle(title);
  },
  getValue: function getValue() {
    var value = this.popup.getValue();
    return BI.isNull(value) ? [] : BI.isArray(value) ? value : [value];
  },
  populate: function populate(items) {
    this.options.items = items;
    this.textIconCheckCombo.populate(items);
  }
});
BI.TextValueCheckCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.text_value_check_combo", BI.TextValueCheckCombo);

/***/ }),
/* 491 */
/***/ (function(module, exports) {

BI.TextValueCheckComboPopup = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TextValueCheckComboPopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-text-icon-popup",
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE
    });
  },
  _init: function _init() {
    BI.TextValueCheckComboPopup.superclass._init.apply(this, arguments);

    var o = this.options,
        self = this;
    this.popup = BI.createWidget({
      type: "bi.button_group",
      items: this._formatItems(o.items),
      chooseType: o.chooseType,
      layouts: [{
        type: "bi.vertical"
      }],
      value: o.value
    });
    this.popup.on(BI.Controller.EVENT_CHANGE, function (type, val, obj) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.TextValueCheckComboPopup.EVENT_CHANGE, val, obj);
      }
    });
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      vgap: 5,
      items: [this.popup]
    });
  },
  _formatItems: function _formatItems(items) {
    var o = this.options;
    return BI.map(items, function (i, item) {
      return BI.extend({
        type: "bi.single_select_item",
        cls: "bi-list-item",
        textAlign: o.textAlign,
        title: item.title || item.text
      }, item);
    });
  },
  populate: function populate(items) {
    BI.TextValueCheckComboPopup.superclass.populate.apply(this, arguments);
    this.popup.populate(this._formatItems(items));
  },
  getValue: function getValue() {
    return this.popup.getValue();
  },
  setValue: function setValue(v) {
    this.popup.setValue(v);
  }
});
BI.TextValueCheckComboPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.text_value_check_combo_popup", BI.TextValueCheckComboPopup);

/***/ }),
/* 492 */
/***/ (function(module, exports) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @class BI.TextValueCombo
 * @extend BI.Widget
 * combo : text + icon, popup : text
 * 参见场景dashboard布局方式选择
 */
BI.TextValueCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig(config) {
    return BI.extend(BI.TextValueCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-text-value-combo " + (config.simple ? "bi-border-bottom" : "bi-border bi-border-radius"),
      height: 24,
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
      text: "",
      value: "",
      defaultText: "",
      el: {},
      allowClear: false,
      status: "success",
      //  success | warning | error,
      title: null,
      allowSelectAll: true
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;
    o.items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;

    BI.TextValueCombo.superclass._init.apply(this, arguments);
  },
  render: function render() {
    var _this = this;

    var o = this.options;

    var title = function title() {
      if (BI.isFunction(o.title)) {
        return o.title();
      }

      if (_this.options.status === "error") {
        return {
          level: "warning",
          text: o.warningTitle
        };
      }

      return {
        level: "success"
      };
    };

    var trigger = _objectSpread({
      type: "bi.select_text_trigger",
      ref: function ref(_ref) {
        return _this.trigger = _ref;
      },
      cls: "text-value-trigger",
      items: o.items,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      text: o.text,
      value: o.value,
      title: title,
      allowClear: o.allowClear,
      defaultText: o.defaultText,
      listeners: [{
        eventName: BI.SelectTextTrigger.EVENT_CLEAR,
        action: function action() {
          _this._clear();

          _this.fireEvent(BI.TextValueCombo.EVENT_CHANGE);
        }
      }]
    }, o.el);

    var changeTag = false;
    var popup = {
      type: "bi.text_value_combo_popup",
      ref: function ref(_ref2) {
        return _this.popup = _ref2;
      },
      chooseType: o.chooseType,
      items: o.items,
      allowSelectAll: o.allowSelectAll,
      listeners: [{
        eventName: BI.TextValueComboPopup.EVENT_CHANGE,
        action: function action() {
          changeTag = true;

          var value = _this.popup.getValue();

          _this.setValue(value);

          if (o.chooseType === BI.ButtonGroup.CHOOSE_TYPE_SINGLE) {
            var _this$combo;

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            (_this$combo = _this.combo).hideView.apply(_this$combo, args);

            _this.fireEvent.apply(_this, [BI.TextValueCombo.EVENT_CHANGE].concat(args));
          }

          if (o.chooseType === BI.ButtonGroup.CHOOSE_TYPE_MULTI && BI.isEmptyArray(value)) {
            _this._clear();
          }
        }
      }, {
        eventName: BI.Controller.EVENT_CHANGE,
        action: function action() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          _this.fireEvent.apply(_this, [BI.Controller.EVENT_CHANGE].concat(args));
        }
      }, {
        eventName: BI.TextValueComboPopup.EVENT_CLEAR,
        action: function action() {
          changeTag = true;

          _this._clear();

          _this.combo.hideView();
        }
      }, {
        eventName: BI.TextValueComboPopup.EVENT_CONFIRM,
        action: function action() {
          _this.combo.hideView();
        }
      }]
    };
    return {
      type: "bi.combo",
      height: BI.toPix(o.height, 2),
      width: BI.toPix(o.width, 2),
      ref: function ref(_ref3) {
        return _this.combo = _ref3;
      },
      container: o.container,
      direction: o.direction,
      adjustLength: 2,
      el: trigger,
      listeners: [{
        eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          changeTag = false;
        }
      }, {
        eventName: BI.Combo.EVENT_AFTER_HIDEVIEW,
        action: function action() {
          if (o.chooseType !== BI.ButtonGroup.CHOOSE_TYPE_SINGLE && changeTag) {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            _this.fireEvent.apply(_this, [BI.TextValueCombo.EVENT_CHANGE].concat(args));
          }
        }
      }],
      popup: {
        el: popup,
        value: o.value,
        maxHeight: 240,
        minHeight: 25
      }
    };
  },
  mounted: function mounted() {
    var o = this.options;

    if (BI.isKey(o.value) || BI.isObject(o.value)) {
      this._checkError(o.value);
    }
  },
  _clear: function _clear() {
    this.trigger.setText("");
    this.combo.setValue();
    this.setStatus("success");
  },
  _checkError: function _checkError(v) {
    if (BI.isNull(v)) {
      this.setStatus("success");
      return;
    }

    var vals = BI.isArray(v) ? v : [v];
    var result = BI.intersection(BI.map(this.options.items, "value"), vals);

    if (result.length !== vals.length) {
      this.setStatus("error");
    } else {
      this.setStatus("success");
    }
  },
  clear: function clear() {
    this._clear();
  },
  setText: function setText(text) {
    this.trigger.setText(text);
  },
  setValue: function setValue(v) {
    this.combo.setValue(v);

    this._checkError(v);
  },
  setStatus: function setStatus(status) {
    this.element.removeClass("bi-status-".concat(this.options.status));
    this.element.addClass("bi-status-".concat(status));
    this.options.status = status;
  },
  getValue: function getValue() {
    var value = this.combo.getValue();
    return BI.isNull(value) ? [] : BI.isArray(value) ? value : [value];
  },
  populate: function populate(items) {
    this.options.items = items;
    this.combo.populate(items);
  }
});
BI.TextValueCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.text_value_combo", BI.TextValueCombo);

/***/ }),
/* 493 */
/***/ (function(module, exports) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @class BI.SmallTextValueCombo
 * @extend BI.Widget
 * combo : text + icon, popup : text
 * 参见场景dashboard布局方式选择
 */
BI.SmallTextValueCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SmallTextValueCombo.superclass._defaultConfig.apply(this, arguments), {
      width: 100,
      height: 20,
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
      el: {},
      text: ""
    });
  },
  render: function render() {
    var _this = this;

    var o = this.options;
    return {
      type: "bi.text_value_combo",
      ref: function ref(_ref) {
        _this.combo = _ref;
      },
      height: o.height,
      chooseType: o.chooseType,
      el: _objectSpread({
        type: "bi.small_select_text_trigger"
      }, o.el),
      text: o.text,
      value: o.value,
      defaultText: o.defaultText,
      allowClear: o.allowClear,
      status: o.status,
      title: o.title,
      listeners: [{
        eventName: BI.TextValueCombo.EVENT_CHANGE,
        action: function action() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this.fireEvent.apply(_this, [BI.SmallTextValueCombo.EVENT_CHANGE].concat(args));
        }
      }]
    };
  },
  setValue: function setValue(v) {
    this.combo.setValue(v);
  },
  getValue: function getValue() {
    return this.combo.getValue();
  },
  populate: function populate(items) {
    this.combo.populate(items);
  }
});
BI.SmallTextValueCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.small_text_value_combo", BI.SmallTextValueCombo);

/***/ }),
/* 494 */
/***/ (function(module, exports) {

BI.TextValueComboPopup = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TextValueComboPopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-text-icon-popup",
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
      allowSelectAll: true
    });
  },
  render: function render() {
    var _this = this;

    var o = this.options,
        self = this;

    if (o.chooseType !== BI.ButtonGroup.CHOOSE_TYPE_MULTI) {
      return {
        type: "bi.vertical",
        vgap: 5,
        items: [{
          type: "bi.button_group",
          ref: function ref(_ref) {
            _this.popup = _ref;
          },
          items: this._formatItems(o.items),
          chooseType: o.chooseType,
          layouts: [{
            type: "bi.vertical"
          }],
          value: o.value,
          listeners: [{
            eventName: BI.Controller.EVENT_CHANGE,
            action: function action(type, val, obj) {
              self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

              if (type === BI.Events.CLICK) {
                self.fireEvent(BI.TextValueComboPopup.EVENT_CHANGE, val, obj);
              }
            }
          }]
        }]
      };
    }

    return {
      type: "bi.vertical",
      verticalAlign: BI.VerticalAlign.Stretch,
      rowSize: ["fill", ""],
      items: [{
        el: o.allowSelectAll ? {
          type: "bi.select_list",
          logic: {
            dynamic: true,
            innerVgap: 5,
            rowSize: ["", "fill"],
            verticalAlign: BI.VerticalAlign.Stretch
          },
          ref: function ref(_ref) {
            _this.popup = _ref;
          },
          el: {
            el: {
              chooseType: o.chooseType
            }
          },
          items: this._formatItems(o.items),
          value: {
            type: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
            value: o.value
          },
          listeners: [{
            eventName: BI.SelectList.EVENT_CHANGE,
            action: function action(val) {
              self.fireEvent(BI.TextValueComboPopup.EVENT_CHANGE, val);
            }
          }]
        } : {
          type: "bi.list_pane",
          logic: {
            dynamic: true,
            innerVgap: 5,
            rowSize: ["", "fill"],
            verticalAlign: BI.VerticalAlign.Stretch
          },
          ref: function ref(_ref) {
            _this.popup = _ref;
          },
          el: {
            chooseType: o.chooseType
          },
          items: this._formatItems(o.items),
          value: o.value,
          listeners: [{
            eventName: BI.ListPane.EVENT_CHANGE,
            action: function action(val) {
              self.fireEvent(BI.TextValueComboPopup.EVENT_CHANGE, val);
            }
          }]
        }
      }, {
        type: "bi.center",
        cls: "list-view-toolbar bi-high-light bi-split-top",
        height: 24,
        items: BI.createItems([{
          type: "bi.text_button",
          text: BI.i18nText("BI-Basic_Clears"),
          handler: function handler() {
            self.fireEvent(BI.TextValueComboPopup.EVENT_CLEAR);
          }
        }, {
          type: "bi.text_button",
          text: BI.i18nText("BI-Basic_OK"),
          handler: function handler() {
            self.fireEvent(BI.TextValueComboPopup.EVENT_CONFIRM);
          }
        }], {
          once: false,
          shadow: true,
          isShadowShowingOnSelected: true
        })
      }]
    };
  },
  mounted: function mounted() {
    this.check();
  },
  _formatItems: function _formatItems(items) {
    var o = this.options;
    return BI.map(items, function (i, item) {
      return BI.extend({
        type: o.chooseType !== BI.ButtonGroup.CHOOSE_TYPE_MULTI ? "bi.single_select_item" : "bi.multi_select_item",
        iconWrapperWidth: 36,
        textAlign: o.textAlign,
        title: item.title || item.text
      }, item);
    });
  },
  populate: function populate(items) {
    BI.TextValueComboPopup.superclass.populate.apply(this, arguments);
    this.popup.populate(this._formatItems(items));
  },
  getValue: function getValue() {
    if (this.options.chooseType !== BI.ButtonGroup.CHOOSE_TYPE_MULTI) {
      return this.popup.getValue();
    }

    var val = this.popup.getValue();

    if (!this.options.allowSelectAll) {
      return val;
    }

    if (val.type === BI.ButtonGroup.CHOOSE_TYPE_MULTI) {
      return val.value;
    } else {
      return val.assist;
    }
  },
  setValue: function setValue(v) {
    if (this.options.chooseType !== BI.ButtonGroup.CHOOSE_TYPE_MULTI) {
      return this.popup.setValue(v);
    }

    if (!this.options.allowSelectAll) {
      this.popup.setValue(v);
      return;
    }

    this.popup.setValue({
      type: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
      value: v
    });
  }
});
BI.TextValueComboPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.TextValueComboPopup.EVENT_CLEAR = "EVENT_CLEAR";
BI.TextValueComboPopup.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.text_value_combo_popup", BI.TextValueComboPopup);

/***/ }),
/* 495 */
/***/ (function(module, exports) {

/**
 * 有清楚按钮的文本框
 * Created by GUY on 2015/9/29.
 * @class BI.SmallTextEditor
 * @extends BI.SearchEditor
 */
BI.ClearEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.ClearEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-clear-editor",
      height: 24,
      errorText: "",
      watermark: "",
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;

    BI.ClearEditor.superclass._init.apply(this, arguments);

    this.editor = BI.createWidget({
      type: "bi.editor",
      simple: o.simple,
      height: o.height,
      watermark: o.watermark,
      allowBlank: true,
      errorText: o.errorText,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      value: o.value
    });
    this.clear = BI.createWidget({
      type: "bi.icon_button",
      stopEvent: true,
      invisible: !BI.isKey(o.value),
      cls: "search-close-h-font"
    });
    this.clear.on(BI.IconButton.EVENT_CHANGE, function () {
      self.setValue("");
      self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.STOPEDIT);
      self.fireEvent(BI.ClearEditor.EVENT_CLEAR);
    });
    BI.createWidget({
      element: this,
      type: "bi.htape",
      items: [{
        el: this.editor
      }, {
        el: this.clear,
        width: 24
      }]
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_FOCUS, function () {
      self.fireEvent(BI.ClearEditor.EVENT_FOCUS);
    });
    this.editor.on(BI.Editor.EVENT_BLUR, function () {
      self.fireEvent(BI.ClearEditor.EVENT_BLUR);
    });
    this.editor.on(BI.Editor.EVENT_CLICK, function () {
      self.fireEvent(BI.ClearEditor.EVENT_CLICK);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE, function () {
      self._checkClear();

      self.fireEvent(BI.ClearEditor.EVENT_CHANGE);
    });
    this.editor.on(BI.Editor.EVENT_KEY_DOWN, function (v) {
      self.fireEvent(BI.ClearEditor.EVENT_KEY_DOWN, v);
    });
    this.editor.on(BI.Editor.EVENT_SPACE, function () {
      self.fireEvent(BI.ClearEditor.EVENT_SPACE);
    });
    this.editor.on(BI.Editor.EVENT_BACKSPACE, function () {
      self.fireEvent(BI.ClearEditor.EVENT_BACKSPACE);
    });
    this.editor.on(BI.Editor.EVENT_VALID, function () {
      self.fireEvent(BI.ClearEditor.EVENT_VALID);
    });
    this.editor.on(BI.Editor.EVENT_ERROR, function () {
      self.fireEvent(BI.ClearEditor.EVENT_ERROR);
    });
    this.editor.on(BI.Editor.EVENT_ENTER, function () {
      self.fireEvent(BI.ClearEditor.EVENT_ENTER);
    });
    this.editor.on(BI.Editor.EVENT_RESTRICT, function () {
      self.fireEvent(BI.ClearEditor.EVENT_RESTRICT);
    });
    this.editor.on(BI.Editor.EVENT_EMPTY, function () {
      self._checkClear();

      self.fireEvent(BI.ClearEditor.EVENT_EMPTY);
    });
    this.editor.on(BI.Editor.EVENT_REMOVE, function () {
      self.fireEvent(BI.ClearEditor.EVENT_REMOVE);
    });
    this.editor.on(BI.Editor.EVENT_CONFIRM, function () {
      self.fireEvent(BI.ClearEditor.EVENT_CONFIRM);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE_CONFIRM, function () {
      self.fireEvent(BI.ClearEditor.EVENT_CHANGE_CONFIRM);
    });
    this.editor.on(BI.Editor.EVENT_START, function () {
      self.fireEvent(BI.ClearEditor.EVENT_START);
    });
    this.editor.on(BI.Editor.EVENT_PAUSE, function () {
      self.fireEvent(BI.ClearEditor.EVENT_PAUSE);
    });
    this.editor.on(BI.Editor.EVENT_STOP, function () {
      self.fireEvent(BI.ClearEditor.EVENT_STOP);
    });
  },
  _checkClear: function _checkClear() {
    if (!this.getValue()) {
      this.clear.invisible();
    } else {
      this.clear.visible();
    }
  },
  setWaterMark: function setWaterMark(v) {
    this.options.watermark = v;
    this.editor.setWaterMark(v);
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  getValue: function getValue() {
    if (this.isValid()) {
      return this.editor.getValue();
    }
  },
  setValue: function setValue(v) {
    this.editor.setValue(v);

    if (BI.isKey(v)) {
      this.clear.visible();
    }
  },
  isValid: function isValid() {
    return this.editor.isValid();
  }
});
BI.ClearEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.ClearEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.ClearEditor.EVENT_BLUR = "EVENT_BLUR";
BI.ClearEditor.EVENT_CLICK = "EVENT_CLICK";
BI.ClearEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.ClearEditor.EVENT_SPACE = "EVENT_SPACE";
BI.ClearEditor.EVENT_BACKSPACE = "EVENT_BACKSPACE";
BI.ClearEditor.EVENT_CLEAR = "EVENT_CLEAR";
BI.ClearEditor.EVENT_START = "EVENT_START";
BI.ClearEditor.EVENT_PAUSE = "EVENT_PAUSE";
BI.ClearEditor.EVENT_STOP = "EVENT_STOP";
BI.ClearEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.ClearEditor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.ClearEditor.EVENT_VALID = "EVENT_VALID";
BI.ClearEditor.EVENT_ERROR = "EVENT_ERROR";
BI.ClearEditor.EVENT_ENTER = "EVENT_ENTER";
BI.ClearEditor.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.ClearEditor.EVENT_REMOVE = "EVENT_REMOVE";
BI.ClearEditor.EVENT_EMPTY = "EVENT_EMPTY";
BI.shortcut("bi.clear_editor", BI.ClearEditor);

/***/ }),
/* 496 */
/***/ (function(module, exports) {

/**
 * dailer
 * 有默认提示文字的输入框
 * @class BI.DefaultTextEditor
 * @extends BI.Widget
 */
BI.DefaultTextEditor = BI.inherit(BI.Widget, {
  props: function props() {
    return {
      baseCls: "bi-default-text-editor",
      hgap: 4,
      vgap: 2,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      allowBlank: true,
      watermark: "",
      errorText: "",
      height: 24,
      defaultText: "",
      // 默认显示值，默认显示值与显示值的区别是默认显示值标记灰色
      text: "",
      // 显示值
      el: {}
    };
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.el, {
      type: "bi.editor",
      simple: o.simple,
      height: o.height,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      value: o.value,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      allowBlank: o.allowBlank,
      watermark: o.watermark,
      errorText: o.errorText,
      invisible: true
    });
    var showText = BI.isFunction(o.text) ? o.text() : o.text;
    this.text = BI.createWidget({
      type: "bi.text_button",
      cls: BI.isKey(showText) ? "tip-text-style" : "bi-water-mark tip-text-style",
      textAlign: "left",
      height: o.height,
      text: showText || o.defaultText,
      hgap: o.hgap + 2,
      handler: function handler() {
        self._showInput();

        self.editor.focus();
        self.editor.setValue("");
      },
      title: o.title,
      warningTitle: o.warningTitle,
      tipType: o.tipType
    });
    this.text.on(BI.TextButton.EVENT_CHANGE, function () {
      BI.nextTick(function () {
        self.fireEvent(BI.DefaultTextEditor.EVENT_CLICK_LABEL);
      });
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_FOCUS, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_FOCUS, arguments);
    });
    this.editor.on(BI.Editor.EVENT_BLUR, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_BLUR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CLICK, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_CLICK, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_KEY_DOWN, function (v) {
      self.fireEvent(BI.DefaultTextEditor.EVENT_KEY_DOWN, arguments);
    });
    this.editor.on(BI.Editor.EVENT_VALID, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_VALID, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CONFIRM, function () {
      self._showHint();

      self.fireEvent(BI.DefaultTextEditor.EVENT_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE_CONFIRM, function () {
      self._showHint();

      self.fireEvent(BI.DefaultTextEditor.EVENT_CHANGE_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_START, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_START, arguments);
    });
    this.editor.on(BI.Editor.EVENT_PAUSE, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_PAUSE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_STOP, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_STOP, arguments);
    });
    this.editor.on(BI.Editor.EVENT_SPACE, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_SPACE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ERROR, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_ERROR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ENTER, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_ENTER, arguments);
    });
    this.editor.on(BI.Editor.EVENT_RESTRICT, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_RESTRICT, arguments);
    });
    this.editor.on(BI.Editor.EVENT_EMPTY, function () {
      self.fireEvent(BI.DefaultTextEditor.EVENT_EMPTY, arguments);
    });
    return {
      type: "bi.absolute",
      items: [{
        el: this.editor,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: this.text,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    };
  },
  setWaterMark: function setWaterMark(v) {
    this.options.watermark = v;
    this.editor.setWaterMark(v);
  },
  setTitle: function setTitle(title) {
    this.text.setTitle(title);
  },
  setWarningTitle: function setWarningTitle(title) {
    this.text.setWarningTitle(title);
  },
  doRedMark: function doRedMark() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  focus: function focus() {
    if (this.options.disabled === false) {
      this._showInput();

      this.editor.focus();
    }
  },
  blur: function blur() {
    this.editor.blur();

    this._showHint();
  },
  _showInput: function _showInput() {
    this.editor.visible();
    this.text.invisible();
  },
  _showHint: function _showHint() {
    this.editor.invisible();
    this.text.visible();
  },
  _setText: function _setText(v) {
    this.text.setText(v);
    this.text.setTitle(v);
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  setErrorText: function setErrorText(text) {
    this.editor.setErrorText(text);
  },
  getErrorText: function getErrorText() {
    return this.editor.getErrorText();
  },
  isEditing: function isEditing() {
    return this.editor.isEditing();
  },
  getLastValidValue: function getLastValidValue() {
    return this.editor.getLastValidValue();
  },
  getLastChangedValue: function getLastChangedValue() {
    return this.editor.getLastChangedValue();
  },
  setValue: function setValue(k) {
    this.editor.setValue(k);
  },
  getValue: function getValue() {
    return this.editor.getValue();
  },
  getState: function getState() {
    return this.text.getValue();
  },
  setState: function setState(v) {
    var o = this.options;

    if (BI.isKey(v)) {
      this.text.setText(v);
      this.text.element.removeClass("bi-water-mark");
      return;
    }

    this.text.setText(o.defaultText);
    this.text.element.addClass("bi-water-mark");
  },
  setTipType: function setTipType(v) {
    this.text.options.tipType = v;
  },
  getText: function getText() {
    return this.text.getText();
  }
});
BI.DefaultTextEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.DefaultTextEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.DefaultTextEditor.EVENT_BLUR = "EVENT_BLUR";
BI.DefaultTextEditor.EVENT_CLICK = "EVENT_CLICK";
BI.DefaultTextEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.DefaultTextEditor.EVENT_CLICK_LABEL = "EVENT_CLICK_LABEL";
BI.DefaultTextEditor.EVENT_START = "EVENT_START";
BI.DefaultTextEditor.EVENT_PAUSE = "EVENT_PAUSE";
BI.DefaultTextEditor.EVENT_STOP = "EVENT_STOP";
BI.DefaultTextEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DefaultTextEditor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.DefaultTextEditor.EVENT_VALID = "EVENT_VALID";
BI.DefaultTextEditor.EVENT_ERROR = "EVENT_ERROR";
BI.DefaultTextEditor.EVENT_ENTER = "EVENT_ENTER";
BI.DefaultTextEditor.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.DefaultTextEditor.EVENT_SPACE = "EVENT_SPACE";
BI.DefaultTextEditor.EVENT_EMPTY = "EVENT_EMPTY";
BI.shortcut("bi.default_text_editor", BI.DefaultTextEditor);

/***/ }),
/* 497 */
/***/ (function(module, exports) {

/**
 * 带标记的文本框
 * Created by GUY on 2016/1/25.
 * @class BI.ShelterEditor
 * @extends BI.Widget
 */
BI.ShelterEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.ShelterEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-shelter-editor",
      hgap: 4,
      vgap: 2,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      allowBlank: true,
      watermark: "",
      errorText: "",
      height: 24,
      textAlign: "left"
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;

    BI.ShelterEditor.superclass._init.apply(this, arguments);

    this.editor = BI.createWidget({
      type: "bi.editor",
      simple: o.simple,
      height: o.height,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      value: o.value,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      allowBlank: o.allowBlank,
      watermark: o.watermark,
      errorText: o.errorText
    });
    this.text = BI.createWidget({
      type: "bi.text_button",
      cls: "shelter-editor-text",
      title: o.title,
      warningTitle: o.warningTitle,
      tipType: o.tipType,
      textAlign: o.textAlign,
      height: o.height,
      hgap: o.hgap + 2
    });
    this.text.on(BI.Controller.EVENT_CHANGE, function () {
      arguments[2] = self;
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.text.on(BI.TextButton.EVENT_CHANGE, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_CLICK_LABEL);
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_FOCUS, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_FOCUS, arguments);
    });
    this.editor.on(BI.Editor.EVENT_BLUR, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_BLUR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CLICK, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_CLICK, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_KEY_DOWN, function (v) {
      self.fireEvent(BI.ShelterEditor.EVENT_KEY_DOWN, arguments);
    });
    this.editor.on(BI.Editor.EVENT_VALID, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_VALID, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CONFIRM, function () {
      self._showHint();

      self._checkText();

      self.fireEvent(BI.ShelterEditor.EVENT_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE_CONFIRM, function () {
      self._showHint();

      self._checkText();

      self.fireEvent(BI.ShelterEditor.EVENT_CHANGE_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_START, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_START, arguments);
    });
    this.editor.on(BI.Editor.EVENT_PAUSE, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_PAUSE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_STOP, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_STOP, arguments);
    });
    this.editor.on(BI.Editor.EVENT_SPACE, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_SPACE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ERROR, function () {
      self._checkText();

      self.fireEvent(BI.ShelterEditor.EVENT_ERROR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ENTER, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_ENTER, arguments);
    });
    this.editor.on(BI.Editor.EVENT_RESTRICT, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_RESTRICT, arguments);
    });
    this.editor.on(BI.Editor.EVENT_EMPTY, function () {
      self.fireEvent(BI.ShelterEditor.EVENT_EMPTY, arguments);
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.text,
        inset: 0
      }, {
        el: this.editor,
        inset: 0
      }]
    });

    this._showHint();

    self._checkText();
  },
  _checkText: function _checkText() {
    var o = this.options;
    BI.nextTick(BI.bind(function () {
      if (this.editor.getValue() === "") {
        this.text.setValue(o.watermark || "");
        this.text.element.addClass("bi-water-mark");
      } else {
        this.text.setValue(this.editor.getValue());
        this.text.element.removeClass("bi-water-mark");
      }

      BI.isKey(o.keyword) && this.text.doRedMark(o.keyword);
    }, this));
  },
  _showInput: function _showInput() {
    this.editor.visible();
    this.text.invisible();
  },
  _showHint: function _showHint() {
    this.editor.invisible();
    this.text.visible();
  },
  setWaterMark: function setWaterMark(v) {
    this.options.watermark = v;
    this.editor.setWaterMark(v);
  },
  setTitle: function setTitle(title) {
    this.text.setTitle(title);
  },
  setWarningTitle: function setWarningTitle(title) {
    this.text.setWarningTitle(title);
  },
  focus: function focus() {
    this._showInput();

    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();

    this._showHint();

    this._checkText();
  },
  doRedMark: function doRedMark() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  setErrorText: function setErrorText(text) {
    this.editor.setErrorText(text);
  },
  getErrorText: function getErrorText() {
    return this.editor.getErrorText();
  },
  isEditing: function isEditing() {
    return this.editor.isEditing();
  },
  getLastValidValue: function getLastValidValue() {
    return this.editor.getLastValidValue();
  },
  getLastChangedValue: function getLastChangedValue() {
    return this.editor.getLastChangedValue();
  },
  setTextStyle: function setTextStyle(style) {
    this.text.setStyle(style);
  },
  setValue: function setValue(k) {
    var o = this.options;
    this.editor.setValue(k);

    this._checkText();
  },
  getValue: function getValue() {
    return this.editor.getValue();
  },
  getState: function getState() {
    return this.text.getValue();
  },
  setState: function setState(v) {
    this._showHint();

    this.text.setValue(v);
  }
});
BI.ShelterEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.ShelterEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.ShelterEditor.EVENT_BLUR = "EVENT_BLUR";
BI.ShelterEditor.EVENT_CLICK = "EVENT_CLICK";
BI.ShelterEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.ShelterEditor.EVENT_CLICK_LABEL = "EVENT_CLICK_LABEL";
BI.ShelterEditor.EVENT_START = "EVENT_START";
BI.ShelterEditor.EVENT_PAUSE = "EVENT_PAUSE";
BI.ShelterEditor.EVENT_STOP = "EVENT_STOP";
BI.ShelterEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.ShelterEditor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.ShelterEditor.EVENT_VALID = "EVENT_VALID";
BI.ShelterEditor.EVENT_ERROR = "EVENT_ERROR";
BI.ShelterEditor.EVENT_ENTER = "EVENT_ENTER";
BI.ShelterEditor.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.ShelterEditor.EVENT_SPACE = "EVENT_SPACE";
BI.ShelterEditor.EVENT_EMPTY = "EVENT_EMPTY";
BI.shortcut("bi.shelter_editor", BI.ShelterEditor);

/***/ }),
/* 498 */
/***/ (function(module, exports) {

/**
 * 带标记的文本框
 * Created by GUY on 2015/8/28.
 * @class BI.SignEditor
 * @extends BI.Widget
 */
BI.SignEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SignEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-sign-editor",
      hgap: 4,
      vgap: 2,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      allowBlank: true,
      watermark: "",
      errorText: "",
      textAlign: "left",
      height: 24
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;

    BI.SignEditor.superclass._init.apply(this, arguments);

    this.editor = BI.createWidget({
      type: "bi.editor",
      simple: o.simple,
      height: o.height,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      value: o.value,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      allowBlank: o.allowBlank,
      watermark: o.watermark,
      errorText: o.errorText
    });
    this.text = BI.createWidget({
      type: "bi.text_button",
      cls: "sign-editor-text",
      title: o.title,
      warningTitle: o.warningTitle,
      tipType: o.tipType,
      textAlign: o.textAlign,
      height: o.height,
      hgap: o.hgap + 2,
      handler: function handler() {
        self._showInput();

        self.editor.focus();
        self.editor.selectAll();
      }
    });
    this.text.on(BI.TextButton.EVENT_CHANGE, function () {
      BI.nextTick(function () {
        self.fireEvent(BI.SignEditor.EVENT_CLICK_LABEL);
      });
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_FOCUS, function () {
      self.fireEvent(BI.SignEditor.EVENT_FOCUS, arguments);
    });
    this.editor.on(BI.Editor.EVENT_BLUR, function () {
      self.fireEvent(BI.SignEditor.EVENT_BLUR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CLICK, function () {
      self.fireEvent(BI.SignEditor.EVENT_CLICK, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE, function () {
      self.fireEvent(BI.SignEditor.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_KEY_DOWN, function (v) {
      self.fireEvent(BI.SignEditor.EVENT_KEY_DOWN, arguments);
    });
    this.editor.on(BI.Editor.EVENT_VALID, function () {
      self.fireEvent(BI.SignEditor.EVENT_VALID, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CONFIRM, function () {
      self._showHint();

      self._checkText();

      self.fireEvent(BI.SignEditor.EVENT_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE_CONFIRM, function () {
      self._showHint();

      self._checkText();

      self.fireEvent(BI.SignEditor.EVENT_CHANGE_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_START, function () {
      self.fireEvent(BI.SignEditor.EVENT_START, arguments);
    });
    this.editor.on(BI.Editor.EVENT_PAUSE, function () {
      self.fireEvent(BI.SignEditor.EVENT_PAUSE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_STOP, function () {
      self.fireEvent(BI.SignEditor.EVENT_STOP, arguments);
    });
    this.editor.on(BI.Editor.EVENT_SPACE, function () {
      self.fireEvent(BI.SignEditor.EVENT_SPACE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ERROR, function () {
      self._checkText();

      self.fireEvent(BI.SignEditor.EVENT_ERROR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ENTER, function () {
      self.fireEvent(BI.SignEditor.EVENT_ENTER, arguments);
    });
    this.editor.on(BI.Editor.EVENT_RESTRICT, function () {
      self.fireEvent(BI.SignEditor.EVENT_RESTRICT, arguments);
    });
    this.editor.on(BI.Editor.EVENT_EMPTY, function () {
      self.fireEvent(BI.SignEditor.EVENT_EMPTY, arguments);
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.text,
        inset: 0
      }, {
        el: this.editor,
        inset: 0
      }]
    });

    this._showHint();

    self._checkText();
  },
  _checkText: function _checkText() {
    var o = this.options;
    BI.nextTick(BI.bind(function () {
      if (this.editor.getValue() === "") {
        this.text.setValue(o.watermark || "");
        this.text.element.addClass("bi-water-mark");
      } else {
        this.text.setValue(this.editor.getValue());
        this.text.element.removeClass("bi-water-mark");
        BI.isKey(o.keyword) && this.text.doRedMark(o.keyword);
      }
    }, this));
  },
  _showInput: function _showInput() {
    this.editor.visible();
    this.text.invisible();
  },
  _showHint: function _showHint() {
    this.editor.invisible();
    this.text.visible();
  },
  setTitle: function setTitle(title) {
    this.text.setTitle(title);
  },
  setTipType: function setTipType(v) {
    this.text.setTipType(v);
  },
  setWarningTitle: function setWarningTitle(title) {
    this.text.setWarningTitle(title);
  },
  setWaterMark: function setWaterMark(v) {
    this.options.watermark = v;

    this._checkText();

    this.editor.setWaterMark(v);
  },
  focus: function focus() {
    this._showInput();

    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();

    this._showHint();

    this._checkText();
  },
  doRedMark: function doRedMark() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  setErrorText: function setErrorText(text) {
    this.editor.setErrorText(text);
  },
  getErrorText: function getErrorText() {
    return this.editor.getErrorText();
  },
  isEditing: function isEditing() {
    return this.editor.isEditing();
  },
  getLastValidValue: function getLastValidValue() {
    return this.editor.getLastValidValue();
  },
  getLastChangedValue: function getLastChangedValue() {
    return this.editor.getLastChangedValue();
  },
  setValue: function setValue(k) {
    this.editor.setValue(k);

    this._checkText();
  },
  getValue: function getValue() {
    return this.editor.getValue();
  },
  getState: function getState() {
    return this.text.getValue();
  },
  setState: function setState(v) {
    this._showHint();

    this.text.setValue(v);
  }
});
BI.SignEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.SignEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.SignEditor.EVENT_BLUR = "EVENT_BLUR";
BI.SignEditor.EVENT_CLICK = "EVENT_CLICK";
BI.SignEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.SignEditor.EVENT_CLICK_LABEL = "EVENT_CLICK_LABEL";
BI.SignEditor.EVENT_START = "EVENT_START";
BI.SignEditor.EVENT_PAUSE = "EVENT_PAUSE";
BI.SignEditor.EVENT_STOP = "EVENT_STOP";
BI.SignEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.SignEditor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.SignEditor.EVENT_VALID = "EVENT_VALID";
BI.SignEditor.EVENT_ERROR = "EVENT_ERROR";
BI.SignEditor.EVENT_ENTER = "EVENT_ENTER";
BI.SignEditor.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.SignEditor.EVENT_SPACE = "EVENT_SPACE";
BI.SignEditor.EVENT_EMPTY = "EVENT_EMPTY";
BI.shortcut("bi.sign_editor", BI.SignEditor);

/***/ }),
/* 499 */
/***/ (function(module, exports) {

/**
 * guy
 * 记录状态的输入框
 * @class BI.StateEditor
 * @extends BI.Single
 */
BI.StateEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.StateEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-state-editor",
      hgap: 4,
      vgap: 2,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      allowBlank: true,
      watermark: "",
      errorText: "",
      height: 24,
      defaultText: BI.i18nText("BI-Basic_Unrestricted"),
      // 默认显示值，默认显示值与显示值的区别是默认显示值标记灰色
      text: "",
      // 显示值
      el: {}
    });
  },
  _init: function _init() {
    BI.StateEditor.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.el, {
      type: "bi.editor",
      simple: o.simple,
      height: o.height,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      value: o.value,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      allowBlank: o.allowBlank,
      watermark: o.watermark,
      errorText: o.errorText
    });
    this.text = BI.createWidget({
      type: "bi.text_button",
      cls: "bi-water-mark tip-text-style",
      textAlign: "left",
      height: o.height,
      text: o.text,
      hgap: o.hgap + 2,
      handler: function handler() {
        self._showInput();

        self.editor.focus();
        self.editor.setValue("");
      },
      title: BI.isNotNull(o.tipText) ? o.tipText : function () {
        var title = "";

        if (BI.isString(self.stateValue)) {
          title = self.stateValue;
        }

        if (BI.isArray(self.stateValue) && self.stateValue.length === 1) {
          title = self.stateValue[0];
        }

        return title;
      },
      warningTitle: o.warningTitle,
      tipType: o.tipType
    });
    this.text.on(BI.TextButton.EVENT_CHANGE, function () {
      BI.nextTick(function () {
        self.fireEvent(BI.StateEditor.EVENT_CLICK_LABEL);
      });
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_FOCUS, function () {
      self.fireEvent(BI.StateEditor.EVENT_FOCUS, arguments);
    });
    this.editor.on(BI.Editor.EVENT_BLUR, function () {
      self.fireEvent(BI.StateEditor.EVENT_BLUR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CLICK, function () {
      self.fireEvent(BI.StateEditor.EVENT_CLICK, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE, function () {
      self.fireEvent(BI.StateEditor.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_KEY_DOWN, function (v) {
      self.fireEvent(BI.StateEditor.EVENT_KEY_DOWN, arguments);
    });
    this.editor.on(BI.Editor.EVENT_VALID, function () {
      self.fireEvent(BI.StateEditor.EVENT_VALID, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CONFIRM, function () {
      self._showHint();

      self.fireEvent(BI.StateEditor.EVENT_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE_CONFIRM, function () {
      self._showHint();

      self.fireEvent(BI.StateEditor.EVENT_CHANGE_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_START, function () {
      self.fireEvent(BI.StateEditor.EVENT_START, arguments);
    });
    this.editor.on(BI.Editor.EVENT_PAUSE, function () {
      self.fireEvent(BI.StateEditor.EVENT_PAUSE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_STOP, function () {
      self.fireEvent(BI.StateEditor.EVENT_STOP, arguments);
    });
    this.editor.on(BI.Editor.EVENT_SPACE, function () {
      self.fireEvent(BI.StateEditor.EVENT_SPACE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ERROR, function () {
      self.fireEvent(BI.StateEditor.EVENT_ERROR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ENTER, function () {
      self.fireEvent(BI.StateEditor.EVENT_ENTER, arguments);
    });
    this.editor.on(BI.Editor.EVENT_RESTRICT, function () {
      self.fireEvent(BI.StateEditor.EVENT_RESTRICT, arguments);
    });
    this.editor.on(BI.Editor.EVENT_EMPTY, function () {
      self.fireEvent(BI.StateEditor.EVENT_EMPTY, arguments);
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.text,
        inset: 0
      }, {
        el: this.editor,
        inset: 0
      }]
    });

    this._showHint();

    if (BI.isNotNull(o.text)) {
      this.setState(o.text);
    }
  },
  setWaterMark: function setWaterMark(v) {
    this.options.watermark = v;
    this.editor.setWaterMark(v);
  },
  doRedMark: function doRedMark() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  focus: function focus() {
    if (this.options.disabled === false) {
      this._showInput();

      this.editor.focus();
    }
  },
  blur: function blur() {
    this.editor.blur();

    this._showHint();
  },
  _showInput: function _showInput() {
    this.editor.visible();
    this.text.invisible();
  },
  _showHint: function _showHint() {
    this.editor.invisible();
    this.text.visible();
  },
  _setText: function _setText(v) {
    this.text.setText(v);
    this.text.setTitle(v);
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  setErrorText: function setErrorText(text) {
    this.editor.setErrorText(text);
  },
  getErrorText: function getErrorText() {
    return this.editor.getErrorText();
  },
  isEditing: function isEditing() {
    return this.editor.isEditing();
  },
  getLastValidValue: function getLastValidValue() {
    return this.editor.getLastValidValue();
  },
  getLastChangedValue: function getLastChangedValue() {
    return this.editor.getLastChangedValue();
  },
  setValue: function setValue(k) {
    this.editor.setValue(k);
  },
  getValue: function getValue() {
    return this.editor.getValue();
  },
  getState: function getState() {
    return this.editor.getValue().match(/[^\s]+/g);
  },
  setState: function setState(v) {
    var o = this.options;
    var defaultText = BI.isFunction(o.defaultText) ? o.defaultText() : o.defaultText;
    BI.StateEditor.superclass.setValue.apply(this, arguments);
    this.stateValue = v;

    if (BI.isNumber(v)) {
      if (v === BI.Selection.All) {
        this._setText(BI.i18nText("BI-Select_All"));

        this.text.element.removeClass("bi-water-mark");
      } else if (v === BI.Selection.Multi) {
        this._setText(BI.i18nText("BI-Select_Part"));

        this.text.element.removeClass("bi-water-mark");
      } else {
        this._setText(BI.isKey(defaultText) ? defaultText : o.text);

        BI.isKey(defaultText) ? this.text.element.addClass("bi-water-mark") : this.text.element.removeClass("bi-water-mark");
      }

      return;
    }

    if (BI.isString(v)) {
      this._setText(v); // 配置了defaultText才判断标灰，其他情况不标灰


      BI.isKey(defaultText) && defaultText === v ? this.text.element.addClass("bi-water-mark") : this.text.element.removeClass("bi-water-mark");
      return;
    }

    if (BI.isArray(v)) {
      if (BI.isEmpty(v)) {
        this._setText(BI.isKey(defaultText) ? defaultText : o.text);

        BI.isKey(defaultText) ? this.text.element.addClass("bi-water-mark") : this.text.element.removeClass("bi-water-mark");
      } else if (v.length === 1) {
        this._setText(v[0]);

        this.text.element.removeClass("bi-water-mark");
      } else {
        this._setText(BI.i18nText("BI-Select_Part"));

        this.text.element.removeClass("bi-water-mark");
      }
    }
  },
  setTipType: function setTipType(v) {
    this.text.options.tipType = v;
  },
  getText: function getText() {
    return this.text.getText();
  }
});
BI.StateEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.StateEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.StateEditor.EVENT_BLUR = "EVENT_BLUR";
BI.StateEditor.EVENT_CLICK = "EVENT_CLICK";
BI.StateEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.StateEditor.EVENT_CLICK_LABEL = "EVENT_CLICK_LABEL";
BI.StateEditor.EVENT_START = "EVENT_START";
BI.StateEditor.EVENT_PAUSE = "EVENT_PAUSE";
BI.StateEditor.EVENT_STOP = "EVENT_STOP";
BI.StateEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.StateEditor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.StateEditor.EVENT_VALID = "EVENT_VALID";
BI.StateEditor.EVENT_ERROR = "EVENT_ERROR";
BI.StateEditor.EVENT_ENTER = "EVENT_ENTER";
BI.StateEditor.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.StateEditor.EVENT_SPACE = "EVENT_SPACE";
BI.StateEditor.EVENT_EMPTY = "EVENT_EMPTY";
BI.shortcut("bi.state_editor", BI.StateEditor);

/***/ }),
/* 500 */
/***/ (function(module, exports) {

/**
 * 无限制-已选择状态输入框
 * Created by GUY on 2016/5/18.
 * @class BI.SimpleStateEditor
 * @extends BI.Single
 */
BI.SimpleStateEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SimpleStateEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-simple-state-editor",
      hgap: 4,
      vgap: 2,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      mouseOut: false,
      allowBlank: true,
      watermark: "",
      errorText: "",
      height: 24,
      text: "",
      defaultText: BI.i18nText("BI-Basic_Unrestricted")
    });
  },
  _init: function _init() {
    BI.SimpleStateEditor.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget({
      type: "bi.editor",
      simple: o.simple,
      height: o.height,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      value: o.value,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      allowBlank: o.allowBlank,
      watermark: o.watermark,
      errorText: o.errorText
    });
    this.text = BI.createWidget({
      type: "bi.text_button",
      cls: "bi-water-mark",
      textAlign: "left",
      text: o.text,
      height: o.height,
      hgap: o.hgap + 2,
      handler: function handler() {
        self._showInput();

        self.editor.focus();
        self.editor.setValue("");
      }
    });
    this.text.on(BI.TextButton.EVENT_CHANGE, function () {
      BI.nextTick(function () {
        self.fireEvent(BI.SimpleStateEditor.EVENT_CLICK_LABEL);
      });
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.text,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_FOCUS, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_FOCUS, arguments);
    });
    this.editor.on(BI.Editor.EVENT_BLUR, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_BLUR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CLICK, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_CLICK, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_KEY_DOWN, function (v) {
      self.fireEvent(BI.SimpleStateEditor.EVENT_KEY_DOWN, arguments);
    });
    this.editor.on(BI.Editor.EVENT_VALID, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_VALID, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CONFIRM, function () {
      self._showHint();

      self.fireEvent(BI.SimpleStateEditor.EVENT_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE_CONFIRM, function () {
      self._showHint();

      self.fireEvent(BI.SimpleStateEditor.EVENT_CHANGE_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_START, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_START, arguments);
    });
    this.editor.on(BI.Editor.EVENT_PAUSE, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_PAUSE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_STOP, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_STOP, arguments);
    });
    this.editor.on(BI.Editor.EVENT_SPACE, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_SPACE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ERROR, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_ERROR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ENTER, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_ENTER, arguments);
    });
    this.editor.on(BI.Editor.EVENT_RESTRICT, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_RESTRICT, arguments);
    });
    this.editor.on(BI.Editor.EVENT_EMPTY, function () {
      self.fireEvent(BI.SimpleStateEditor.EVENT_EMPTY, arguments);
    });
    BI.createWidget({
      type: "bi.vertical",
      scrolly: false,
      element: this,
      items: [this.editor]
    });

    this._showHint();

    if (BI.isNotNull(o.text)) {
      this.setState(o.text);
    }
  },
  setWaterMark: function setWaterMark(v) {
    this.options.watermark = v;
    this.editor.setWaterMark(v);
  },
  doRedMark: function doRedMark() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  focus: function focus() {
    this._showInput();

    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();

    this._showHint();
  },
  _showInput: function _showInput() {
    this.editor.visible();
    this.text.invisible();
  },
  _showHint: function _showHint() {
    this.editor.invisible();
    this.text.visible();
  },
  _setText: function _setText(v) {
    this.text.setText(v);
    this.text.setTitle(v);
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  setErrorText: function setErrorText(text) {
    this.editor.setErrorText(text);
  },
  getErrorText: function getErrorText() {
    return this.editor.getErrorText();
  },
  isEditing: function isEditing() {
    return this.editor.isEditing();
  },
  getLastValidValue: function getLastValidValue() {
    return this.editor.getLastValidValue();
  },
  getLastChangedValue: function getLastChangedValue() {
    return this.editor.getLastChangedValue();
  },
  setValue: function setValue(k) {
    this.editor.setValue(k);
  },
  getValue: function getValue() {
    return this.editor.getValue();
  },
  getState: function getState() {
    return this.editor.getValue().match(/[^\s]+/g);
  },
  setState: function setState(v) {
    var o = this.options;
    BI.SimpleStateEditor.superclass.setValue.apply(this, arguments);
    var defaultText = BI.isFunction(o.defaultText) ? o.defaultText() : o.defaultText;

    if (BI.isNumber(v)) {
      if (v === BI.Selection.All) {
        this._setText(BI.i18nText("BI-Already_Selected"));

        this.text.element.removeClass("bi-water-mark");
      } else if (v === BI.Selection.Multi) {
        this._setText(BI.i18nText("BI-Already_Selected"));

        this.text.element.removeClass("bi-water-mark");
      } else {
        this._setText(BI.isKey(defaultText) ? defaultText : o.text);

        this.text.element.addClass("bi-water-mark");
      }

      return;
    }

    if (!BI.isArray(v) || v.length === 1) {
      this._setText(v);

      this.text.element.removeClass("bi-water-mark");
    } else if (BI.isEmpty(v)) {
      this._setText(o.text);

      this.text.element.addClass("bi-water-mark");
    } else {
      this._setText(BI.i18nText("BI-Already_Selected"));

      this.text.element.removeClass("bi-water-mark");
    }
  },
  getText: function getText() {
    return this.text.getText();
  }
});
BI.SimpleStateEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.SimpleStateEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.SimpleStateEditor.EVENT_BLUR = "EVENT_BLUR";
BI.SimpleStateEditor.EVENT_CLICK = "EVENT_CLICK";
BI.SimpleStateEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.SimpleStateEditor.EVENT_CLICK_LABEL = "EVENT_CLICK_LABEL";
BI.SimpleStateEditor.EVENT_START = "EVENT_START";
BI.SimpleStateEditor.EVENT_PAUSE = "EVENT_PAUSE";
BI.SimpleStateEditor.EVENT_STOP = "EVENT_STOP";
BI.SimpleStateEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.SimpleStateEditor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.SimpleStateEditor.EVENT_VALID = "EVENT_VALID";
BI.SimpleStateEditor.EVENT_ERROR = "EVENT_ERROR";
BI.SimpleStateEditor.EVENT_ENTER = "EVENT_ENTER";
BI.SimpleStateEditor.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.SimpleStateEditor.EVENT_SPACE = "EVENT_SPACE";
BI.SimpleStateEditor.EVENT_EMPTY = "EVENT_EMPTY";
BI.shortcut("bi.simple_state_editor", BI.SimpleStateEditor);

/***/ }),
/* 501 */
/***/ (function(module, exports) {

BI.LinearSegmentButton = BI.inherit(BI.BasicButton, {
  props: {
    extraCls: "bi-line-segment-button bi-list-item-effect",
    once: true,
    readonly: true,
    hgap: 10,
    height: 24
  },
  render: function render() {
    var self = this,
        o = this.options;
    return [{
      type: "bi.label",
      text: o.text,
      height: o.height,
      textHeight: BI.toPix(o.height, 2),
      value: o.value,
      hgap: o.hgap,
      ref: function ref() {
        self.text = this;
      }
    }, {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.layout",
          cls: "line-segment-button-line",
          height: 2,
          ref: function ref() {
            self.line = this;
          }
        },
        left: 0,
        right: 0,
        bottom: 0
      }]
    }];
  },
  setSelected: function setSelected(v) {
    BI.LinearSegmentButton.superclass.setSelected.apply(this, arguments);

    if (v) {
      this.line.element.addClass("bi-high-light-background");
    } else {
      this.line.element.removeClass("bi-high-light-background");
    }
  },
  setText: function setText(text) {
    this.text.setText(text);
  }
});
BI.shortcut("bi.linear_segment_button", BI.LinearSegmentButton);

/***/ }),
/* 502 */
/***/ (function(module, exports) {

BI.LinearSegment = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-linear-segment",
    items: [],
    height: 30
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.button_group",
      items: [BI.createItems(o.items, {
        type: "bi.linear_segment_button",
        height: o.height
      })],
      layouts: [{
        type: "bi.table",
        columnSize: BI.makeArrayByArray(o.items, "fill")
      }],
      value: o.value,
      listeners: [{
        eventName: "__EVENT_CHANGE__",
        action: function action() {
          self.fireEvent("__EVENT_CHANGE__", arguments);
        }
      }, {
        eventName: "EVENT_CHANGE",
        action: function action() {
          self.fireEvent("EVENT_CHANGE");
        }
      }],
      ref: function ref() {
        self.buttonGroup = this;
      }
    };
  },
  setValue: function setValue(v) {
    this.buttonGroup.setValue(v);
  },
  setEnabledValue: function setEnabledValue(v) {
    this.buttonGroup.setEnabledValue(v);
  },
  getValue: function getValue() {
    return this.buttonGroup.getValue();
  }
});
BI.shortcut("bi.linear_segment", BI.LinearSegment);

/***/ }),
/* 503 */
/***/ (function(module, exports) {

/**
 * 分段控件使用的button
 *
 * Created by GUY on 2015/9/7.
 * @class BI.SegmentButton
 * @extends BI.BasicButton
 */
BI.SegmentButton = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SegmentButton.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-segment-button bi-list-item-select bi-card",
      shadow: true,
      readonly: true,
      hgap: 5
    });
  },
  _init: function _init() {
    BI.SegmentButton.superclass._init.apply(this, arguments);

    var opts = this.options,
        self = this;
    this.text = BI.createWidget({
      type: "bi.label",
      element: this,
      textHeight: opts.height,
      whiteSpace: opts.whiteSpace,
      text: opts.text,
      value: opts.value,
      hgap: opts.hgap
    });
  },
  setSelected: function setSelected() {
    BI.SegmentButton.superclass.setSelected.apply(this, arguments);
  },
  setText: function setText(text) {
    BI.SegmentButton.superclass.setText.apply(this, arguments);
    this.text.setText(text);
  }
});
BI.shortcut("bi.segment_button", BI.SegmentButton);

/***/ }),
/* 504 */
/***/ (function(module, exports) {

/**
 * 单选按钮组
 *
 * Created by GUY on 2015/9/7.
 * @class BI.Segment
 * @extends BI.Widget
 */
BI.Segment = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Segment.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-segment",
      items: [],
      height: 24
    });
  },
  _init: function _init() {
    BI.Segment.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.buttonGroup = BI.createWidget({
      element: this,
      type: "bi.button_group",
      value: o.value,
      items: [BI.createItems(o.items, {
        type: "bi.segment_button",
        height: BI.toPix(o.height, 2),
        whiteSpace: o.whiteSpace
      })],
      layouts: [{
        type: "bi.table",
        columnSize: BI.makeArrayByArray(o.items, "fill")
      }]
    });
    this.buttonGroup.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.buttonGroup.on(BI.ButtonGroup.EVENT_CHANGE, function (value, obj) {
      self.fireEvent(BI.Segment.EVENT_CHANGE, value, obj);
    });
  },
  _setEnable: function _setEnable(enable) {
    BI.Segment.superclass._setEnable.apply(this, arguments);

    if (enable === true) {
      this.element.removeClass("base-disabled disabled");
    } else if (enable === false) {
      this.element.addClass("base-disabled disabled");
    }
  },
  setValue: function setValue(v) {
    this.buttonGroup.setValue(v);
  },
  setEnabledValue: function setEnabledValue(v) {
    this.buttonGroup.setEnabledValue(v);
  },
  getValue: function getValue() {
    return this.buttonGroup.getValue();
  }
});
BI.Segment.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.segment", BI.Segment);

/***/ }),
/* 505 */
/***/ (function(module, exports) {

/**
 * 文本输入框trigger
 *
 * Created by GUY on 2015/9/15.
 * @class BI.EditorTrigger
 * @extends BI.Trigger
 */
BI.EditorTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig(config) {
    var conf = BI.EditorTrigger.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-editor-trigger bi-border-radius " + (config.simple ? "bi-border-bottom" : "bi-border"),
      height: 24,
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      allowBlank: false,
      watermark: "",
      errorText: ""
    });
  },
  _init: function _init() {
    BI.EditorTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options,
        c = this._const;
    this.editor = BI.createWidget({
      type: "bi.sign_editor",
      height: BI.toPix(o.height, 2),
      value: o.value,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      allowBlank: o.allowBlank,
      watermark: o.watermark,
      errorText: o.errorText,
      title: function title() {
        return self.getValue();
      }
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.SignEditor.EVENT_CHANGE, function () {
      self.fireEvent(BI.EditorTrigger.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.SignEditor.EVENT_FOCUS, function () {
      self.fireEvent(BI.EditorTrigger.EVENT_FOCUS, arguments);
    });
    this.editor.on(BI.SignEditor.EVENT_EMPTY, function () {
      self.fireEvent(BI.EditorTrigger.EVENT_EMPTY, arguments);
    });
    this.editor.on(BI.SignEditor.EVENT_VALID, function () {
      self.fireEvent(BI.EditorTrigger.EVENT_VALID, arguments);
    });
    this.editor.on(BI.SignEditor.EVENT_ERROR, function () {
      self.fireEvent(BI.EditorTrigger.EVENT_ERROR, arguments);
    });
    BI.createWidget({
      element: this,
      type: "bi.horizontal_fill",
      height: BI.toPix(o.height, 2),
      items: [{
        el: this.editor,
        width: "fill"
      }, {
        el: {
          type: "bi.trigger_icon_button",
          width: o.triggerWidth || BI.toPix(o.height, 2)
        },
        width: ""
      }]
    });
  },
  getValue: function getValue() {
    return this.editor.getValue();
  },
  setValue: function setValue(value) {
    this.editor.setValue(value);
  },
  setText: function setText(text) {
    this.editor.setState(text);
  }
});
BI.EditorTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.EditorTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.EditorTrigger.EVENT_EMPTY = "EVENT_EMPTY";
BI.EditorTrigger.EVENT_VALID = "EVENT_VALID";
BI.EditorTrigger.EVENT_ERROR = "EVENT_ERROR";
BI.shortcut("bi.editor_trigger", BI.EditorTrigger);

/***/ }),
/* 506 */
/***/ (function(module, exports) {

/**
 * 图标按钮trigger
 *
 * Created by GUY on 2015/10/8.
 * @class BI.IconTrigger
 * @extends BI.Trigger
 */
BI.IconTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.IconTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-icon-trigger",
      extraCls: "pull-down-font",
      el: {},
      height: 24
    });
  },
  _init: function _init() {
    var o = this.options;

    BI.IconTrigger.superclass._init.apply(this, arguments);

    this.iconButton = BI.createWidget(o.el, {
      type: "bi.trigger_icon_button",
      element: this,
      width: o.width,
      height: o.height,
      extraCls: o.extraCls
    });
  }
});
BI.shortcut("bi.icon_trigger", BI.IconTrigger);

/***/ }),
/* 507 */
/***/ (function(module, exports) {

/**
 * 文字trigger
 *
 * Created by GUY on 2015/9/15.
 * @class BI.IconTextTrigger
 * @extends BI.Trigger
 */
BI.IconTextTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.IconTextTrigger.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-text-trigger",
      height: 24,
      iconHeight: null,
      iconWidth: null,
      textCls: ""
    });
  },
  _init: function _init() {
    BI.IconTextTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      cls: "select-text-label" + (BI.isKey(o.textCls) ? " " + o.textCls : ""),
      textAlign: "left",
      height: o.height,
      hgap: o.textHgap,
      vgap: o.textVgap,
      lgap: o.textLgap,
      rgap: o.textRgap,
      tgap: o.textTgap,
      bgap: o.textBgap,
      text: o.text
    });
    this.trigerButton = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.triggerWidth || o.height
    });
    BI.createWidget({
      element: this,
      type: "bi.horizontal_fill",
      columnSize: ["", "fill", ""],
      ref: function ref(_ref) {
        self.wrapper = _ref;
      },
      items: [{
        el: {
          type: "bi.icon_change_button",
          cls: "icon-combo-trigger-icon",
          width: o.triggerWidth || o.height,
          iconCls: o.iconCls,
          invisible: !o.iconCls,
          ref: function ref(_ref) {
            self.icon = _ref;
          },
          iconHeight: o.iconHeight,
          iconWidth: o.iconWidth,
          disableSelected: true
        }
      }, {
        el: this.text,
        lgap: BI.isEmptyString(o.iconCls) ? 5 : 0
      }, {
        el: this.trigerButton
      }]
    });
  },
  setValue: function setValue(value) {
    this.text.setValue(value);
  },
  setIcon: function setIcon(iconCls) {
    var o = this.options;
    this.icon.setIcon(iconCls);
    this.icon.setVisible(!!iconCls);
  },
  setTextCls: function setTextCls(cls) {
    var o = this.options;
    var oldCls = o.textCls;
    o.textCls = cls;
    this.text.element.removeClass(oldCls).addClass(cls);
  },
  setText: function setText(text) {
    this.text.setText(text);
  }
});
BI.shortcut("bi.icon_text_trigger", BI.IconTextTrigger);

/***/ }),
/* 508 */
/***/ (function(module, exports) {

/**
 * Created by Windy on 2017/12/12.
 */
BI.SelectIconTextTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SelectIconTextTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-select-text-trigger",
      height: 24,
      iconHeight: null,
      iconWidth: null,
      iconCls: ""
    });
  },
  _init: function _init() {
    BI.SelectIconTextTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    var obj = this._digist(o.value, o.items);

    this.trigger = BI.createWidget({
      type: "bi.icon_text_trigger",
      element: this,
      text: obj.text,
      textCls: obj.textCls,
      iconCls: obj.iconCls,
      textHgap: o.textHgap,
      textVgap: o.textVgap,
      textLgap: o.textLgap,
      textRgap: o.textRgap,
      textTgap: o.textTgap,
      textBgap: o.textBgap,
      height: o.height,
      iconHeight: o.iconHeight,
      iconWidth: o.iconWidth,
      iconWrapperWidth: o.iconWrapperWidth
    });
  },
  _digist: function _digist(vals, items) {
    var o = this.options;
    vals = BI.isArray(vals) ? vals : [vals];
    var result;
    var formatItems = BI.Tree.transformToArrayFormat(items);
    BI.any(formatItems, function (i, item) {
      if (BI.deepContains(vals, item.value)) {
        result = {
          text: item.text || item.value,
          iconCls: item.iconCls
        };
        return true;
      }
    });

    if (BI.isNotNull(result)) {
      return {
        text: result.text,
        textCls: "",
        iconCls: result.iconCls
      };
    } else {
      return {
        text: BI.isFunction(o.text) ? o.text() : o.text,
        textCls: "bi-water-mark",
        iconCls: o.iconCls
      };
    }
  },
  setValue: function setValue(vals) {
    var obj = this._digist(vals, this.options.items);

    this.trigger.setText(obj.text);
    this.trigger.setIcon(obj.iconCls);
    this.trigger.setTextCls(obj.textCls);
  },
  populate: function populate(items) {
    this.options.items = items;
  }
});
BI.shortcut("bi.select_icon_text_trigger", BI.SelectIconTextTrigger);

/***/ }),
/* 509 */
/***/ (function(module, exports) {

/**
 * 文字trigger
 *
 * Created by GUY on 2015/9/15.
 * @class BI.TextTrigger
 * @extends BI.Trigger
 */
BI.TextTrigger = BI.inherit(BI.Trigger, {
  props: function props() {
    var self = this;
    return {
      baseCls: "bi-text-trigger",
      height: 24,
      textHgap: 6,
      textCls: "",
      allowClear: false,
      title: function title() {
        return self.text.getText();
      },
      defaultText: "",
      text: ""
    };
  },
  render: function render() {
    var self = this,
        o = this.options,
        c = this._const;
    var text = this.getText();
    var defaultText = this.getDefaultText();
    var label = {
      type: "bi.label",
      ref: function ref(_ref) {
        self.text = _ref;
      },
      cls: "select-text-label ".concat(o.textCls, " ").concat(!BI.isNotEmptyString(text) && BI.isNotEmptyString(defaultText) ? "bi-tips" : ""),
      textAlign: "left",
      height: o.height,
      text: text || o.defaultText,
      tipType: o.tipType,
      warningTitle: o.warningTitle,
      hgap: o.textHgap,
      vgap: o.textVgap,
      lgap: o.textLgap,
      rgap: o.textRgap,
      tgap: o.textTgap,
      bgap: o.textBgap,
      readonly: o.readonly
    };
    var triggerButton = {
      type: "bi.trigger_icon_button",
      ref: function ref(_ref) {
        self.triggerButton = _ref;
      },
      width: o.triggerWidth || o.height
    };
    return {
      type: "bi.horizontal_fill",
      columnSize: ["fill", ""],
      items: [{
        el: label,
        width: "fill"
      }, {
        el: o.allowClear ? {
          type: "bi.vertical_adapt",
          width: o.triggerWidth || o.height,
          height: o.height,
          horizontalAlign: "left",
          scrollable: false,
          items: [{
            el: {
              type: "bi.icon_button",
              ref: function ref(_ref) {
                self.clearBtn = _ref;
              },
              cls: "close-h-font " + (o.allowClear ? "clear-button" : ""),
              stopPropagation: true,
              width: o.triggerWidth || o.height,
              invisible: !BI.isNotEmptyString(o.text),
              handler: function handler() {
                self.fireEvent(BI.TextTrigger.EVENT_CLEAR);
              }
            }
          }, {
            el: triggerButton
          }]
        } : triggerButton
      }]
    };
  },
  getText: function getText() {
    var o = this.options;
    return BI.isFunction(o.text) ? o.text() : o.text;
  },
  getDefaultText: function getDefaultText() {
    var o = this.options;
    return BI.isFunction(o.defaultText) ? o.defaultText() : o.defaultText;
  },
  getTextor: function getTextor() {
    return this.text;
  },
  setTextCls: function setTextCls(cls) {
    var o = this.options;
    var oldCls = o.textCls;
    o.textCls = cls;
    this.text.element.removeClass(oldCls).addClass(cls);
  },
  setText: function setText(text) {
    if (this.options.allowClear) {
      this.clearBtn.setVisible(BI.isNotEmptyString(text));
    }

    if (BI.isKey(text)) {
      this.text.setText(text);
      this.text.element.removeClass("bi-tips");
    } else if (BI.isKey(this.options.defaultText)) {
      this.text.setText(this.options.defaultText);
      this.text.element.addClass("bi-tips");
    } else {
      this.text.setText("");
      this.text.element.removeClass("bi-tips");
    }
  },
  setTipType: function setTipType(v) {
    this.text.options.tipType = v;
    this.options.tipType = v;
  }
});
BI.TextTrigger.EVENT_CLEAR = "EVENT_CLEAR";
BI.shortcut("bi.text_trigger", BI.TextTrigger);

/***/ }),
/* 510 */
/***/ (function(module, exports) {

/**
 * 选择字段trigger
 *
 * Created by GUY on 2015/9/15.
 * @class BI.SelectTextTrigger
 * @extends BI.Trigger
 */
BI.SelectTextTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SelectTextTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-select-text-trigger",
      height: 24,
      allowClear: false,
      valueFormatter: BI.emptyFn,
      defaultText: ""
    });
  },
  _init: function _init() {
    BI.SelectTextTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    var text = this._digest(o.value, o.items);

    this.trigger = BI.createWidget({
      type: "bi.text_trigger",
      element: this,
      height: o.height,
      readonly: o.readonly,
      text: text,
      defaultText: o.defaultText,
      textHgap: o.textHgap,
      textVgap: o.textVgap,
      textLgap: o.textLgap,
      textRgap: o.textRgap,
      textTgap: o.textTgap,
      textBgap: o.textBgap,
      tipType: o.tipType,
      title: null,
      allowClear: o.allowClear,
      listeners: [{
        eventName: BI.TextTrigger.EVENT_CLEAR,
        action: function action() {
          self.setText("");
          self.fireEvent(BI.SelectTextTrigger.EVENT_CLEAR);
        }
      }]
    });
  },
  _digest: function _digest(val, items) {
    var o = this.options;
    val = BI.isArray(val) ? val.slice() : [val];
    var result = []; //  提升valueFormatter的优先级

    if (o.valueFormatter !== BI.emptyFn && BI.isFunction(o.valueFormatter)) {
      BI.each(val, function (index, v) {
        result.push(o.valueFormatter(v));
      });
      return result.join(",");
    }

    var formatItems = BI.Tree.transformToArrayFormat(items);
    BI.each(formatItems, function (i, item) {
      if (BI.contains(val, item.value) && !BI.contains(result, item.text || item.value)) {
        result.push(item.text || item.value);
        BI.remove(val, item.value);
      }
    });

    if (result.length > 0 && val.length === 0) {
      return result.join(",");
    } else {
      return BI.isFunction(o.text) ? o.text() : o.text;
    }
  },
  setText: function setText(text) {
    this.options.text = text;
    this.trigger.setText(text);
  },
  setValue: function setValue(val) {
    var formatText = this._digest(val, this.options.items);

    this.trigger.setText(formatText);
  },
  setTipType: function setTipType(v) {
    this.options.tipType = v;
    this.trigger.setTipType(v);
  },
  getTextor: function getTextor() {
    return this.trigger.getTextor();
  },
  populate: function populate(items) {
    this.options.items = items;
  }
});
BI.SelectTextTrigger.EVENT_CLEAR = "EVENT_CLEAR";
BI.shortcut("bi.select_text_trigger", BI.SelectTextTrigger);

/***/ }),
/* 511 */
/***/ (function(module, exports) {

/**
 * 选择字段trigger小一号的
 *
 * @class BI.SmallSelectTextTrigger
 * @extends BI.Trigger
 */
BI.SmallSelectTextTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SmallSelectTextTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-small-select-text-trigger bi-border",
      height: 20
    });
  },
  _init: function _init() {
    BI.SmallSelectTextTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    var obj = this._digest(o.value, o.items);

    this.trigger = BI.createWidget({
      type: "bi.small_text_trigger",
      element: this,
      height: BI.toPix(o.height, 2),
      text: obj.text,
      cls: obj.cls,
      textHgap: o.textHgap,
      textVgap: o.textVgap,
      textLgap: o.textLgap,
      textRgap: o.textRgap,
      textTgap: o.textTgap,
      textBgap: o.textBgap
    });
  },
  _digest: function _digest(vals, items) {
    var o = this.options;
    vals = BI.isArray(vals) ? vals : [vals];
    var result = [];
    var formatItems = BI.Tree.transformToArrayFormat(items);
    BI.each(formatItems, function (i, item) {
      if (BI.deepContains(vals, item.value) && !BI.contains(result, item.text || item.value)) {
        result.push(item.text || item.value);
      }
    });

    if (result.length > 0) {
      return {
        cls: "",
        text: result.join(",")
      };
    } else {
      return {
        cls: "bi-water-mark",
        text: o.text
      };
    }
  },
  setValue: function setValue(vals) {
    var formatValue = this._digest(vals, this.options.items);

    this.trigger.element.removeClass("bi-water-mark").addClass(formatValue.cls);
    this.trigger.setText(formatValue.text);
  },
  populate: function populate(items) {
    this.options.items = items;
  }
});
BI.shortcut("bi.small_select_text_trigger", BI.SmallSelectTextTrigger);

/***/ }),
/* 512 */
/***/ (function(module, exports) {

/**
 * 文字trigger(右边小三角小一号的) ==
 *
 * @class BI.SmallTextTrigger
 * @extends BI.Trigger
 */
BI.SmallTextTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SmallTextTrigger.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-text-trigger",
      height: 20,
      textHgap: 6
    });
  },
  _init: function _init() {
    BI.SmallTextTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options,
        c = this._const;
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      height: o.height,
      text: o.text,
      hgap: o.textHgap,
      vgap: o.textVgap,
      lgap: o.textLgap,
      rgap: o.textRgap,
      tgap: o.textTgap,
      bgap: o.textBgap
    });
    this.trigerButton = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.triggerWidth || o.height
    });
    BI.createWidget({
      element: this,
      type: "bi.horizontal_fill",
      items: [{
        el: this.text,
        width: "fill"
      }, {
        el: this.trigerButton,
        width: ""
      }]
    });
  },
  setValue: function setValue(value) {
    this.text.setValue(value);
  },
  setText: function setText(text) {
    this.text.setText(text);
  }
});
BI.shortcut("bi.small_text_trigger", BI.SmallTextTrigger);

/***/ }),
/* 513 */,
/* 514 */,
/* 515 */
/***/ (function(module, exports) {

/**
 * 日期控件中的月份下拉框
 *
 * Created by GUY on 2015/9/7.
 * @class BI.MonthDateCombo
 * @extends BI.Trigger
 */
BI.MonthDateCombo = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MonthDateCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-month-combo",
      height: 24,
      container: null
    });
  },
  _init: function _init() {
    BI.MonthDateCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.trigger = BI.createWidget({
      type: "bi.date_triangle_trigger"
    });
    this.popup = BI.createWidget({
      type: "bi.month_popup",
      allowMonths: o.allowMonths,
      behaviors: o.behaviors
    });
    this.popup.on(BI.MonthPopup.EVENT_CHANGE, function () {
      self.setValue(self.popup.getValue());
      self.combo.hideView();
      self.fireEvent(BI.MonthDateCombo.EVENT_CHANGE);
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      offsetStyle: "center",
      container: o.container,
      element: this,
      isNeedAdjustHeight: false,
      isNeedAdjustWidth: false,
      el: this.trigger,
      popup: {
        minWidth: 100,
        stopPropagation: false,
        el: {
          type: "bi.vertical",
          hgap: 6,
          vgap: 5,
          items: [this.popup]
        }
      }
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      self.doBehavior();
    });
  },
  populate: function populate() {
    this.popup.populate.apply(this.popup, arguments);
  },
  setValue: function setValue(v) {
    this.trigger.setValue(v);
    this.popup.setValue(v);
  },
  getValue: function getValue() {
    return this.popup.getValue();
  }
});
BI.MonthDateCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.month_date_combo", BI.MonthDateCombo);

/***/ }),
/* 516 */
/***/ (function(module, exports) {

/**
 * 年份下拉框
 *
 * Created by GUY on 2015/9/7.
 * @class BI.YearDateCombo
 * @extends BI.Trigger
 */
BI.YearDateCombo = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.YearDateCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-year-combo",
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      behaviors: {},
      height: 24,
      container: null
    });
  },
  _init: function _init() {
    BI.YearDateCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.trigger = BI.createWidget({
      type: "bi.date_triangle_trigger"
    });
    this.popup = BI.createWidget({
      type: "bi.year_popup",
      behaviors: o.behaviors,
      min: o.min,
      max: o.max,
      width: 122
    });
    this.popup.on(BI.YearPopup.EVENT_CHANGE, function () {
      self.setValue(self.popup.getValue());
      self.combo.hideView();
      self.fireEvent(BI.YearDateCombo.EVENT_CHANGE);
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      offsetStyle: "center",
      element: this,
      container: o.container,
      isNeedAdjustHeight: false,
      isNeedAdjustWidth: false,
      el: this.trigger,
      popup: {
        minWidth: 100,
        stopPropagation: false,
        el: this.popup
      }
    });
    this.combo.on(BI.Combo.EVENT_CHANGE, function () {
      self.fireEvent(BI.YearDateCombo.EVENT_CHANGE);
    }); // BI-22551 popup未初始化传入的behavior无效

    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      self.doBehavior();
      self.fireEvent(BI.YearDateCombo.EVENT_BEFORE_POPUPVIEW);
    });
  },
  setMinDate: function setMinDate(minDate) {
    this.popup.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    this.popup.setMaxDate(maxDate);
  },
  setValue: function setValue(v) {
    this.trigger.setValue(v);
    this.popup.setValue(v);
  },
  getValue: function getValue() {
    return this.popup.getValue();
  }
});
BI.YearDateCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.YearDateCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.year_date_combo", BI.YearDateCombo);

/***/ }),
/* 517 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/9/7.
 * @class BI.DatePicker
 * @extends BI.Widget
 */
BI.DatePicker = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.DatePicker.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-date-picker",
      height: 40,
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31" // 最大日期

    });
  },
  _init: function _init() {
    BI.DatePicker.superclass._init.apply(this, arguments);

    var self = this;
    var o = this.options;
    this._year = BI.getDate().getFullYear();
    this._month = BI.getDate().getMonth() + 1;
    this.left = BI.createWidget({
      type: "bi.icon_button",
      cls: "pre-page-h-font",
      width: 24,
      height: 24
    });
    this.left.on(BI.IconButton.EVENT_CHANGE, function () {
      if (self._month === 1) {
        self.setValue({
          year: self.year.getValue() - 1 || BI.getDate().getFullYear() - 1,
          month: 12
        });
      } else {
        self.setValue({
          year: self.year.getValue() || BI.getDate().getFullYear(),
          month: self.month.getValue() - 1 || BI.getDate().getMonth()
        });
      }

      self.fireEvent(BI.DatePicker.EVENT_CHANGE); // self._checkLeftValid();
      // self._checkRightValid();
    });
    this.right = BI.createWidget({
      type: "bi.icon_button",
      cls: "next-page-h-font",
      width: 24,
      height: 24
    });
    this.right.on(BI.IconButton.EVENT_CHANGE, function () {
      if (self._month === 12) {
        self.setValue({
          year: self.year.getValue() + 1 || BI.getDate().getFullYear() + 1,
          month: 1
        });
      } else {
        self.setValue({
          year: self.year.getValue() || BI.getDate().getFullYear(),
          month: self.month.getValue() + 1 || BI.getDate().getMonth() + 2
        });
      }

      self.fireEvent(BI.DatePicker.EVENT_CHANGE); // self._checkLeftValid();
      // self._checkRightValid();
    });
    this.year = BI.createWidget({
      type: "bi.year_date_combo",
      behaviors: o.behaviors,
      min: o.min,
      max: o.max
    });
    this.year.on(BI.YearDateCombo.EVENT_CHANGE, function () {
      self.setValue({
        year: self.year.getValue(),
        month: self._refreshMonth()
      });
      self.fireEvent(BI.DatePicker.EVENT_CHANGE);
    });
    this.year.on(BI.YearDateCombo.EVENT_BEFORE_POPUPVIEW, function () {
      self.fireEvent(BI.DatePicker.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
    });
    this.month = BI.createWidget({
      type: "bi.month_date_combo",
      behaviors: o.behaviors,
      allowMonths: this._getAllowMonths()
    });
    this.month.on(BI.MonthDateCombo.EVENT_CHANGE, function () {
      self.setValue({
        year: self.year.getValue() || self._year,
        month: self.month.getValue()
      });
      self.fireEvent(BI.DatePicker.EVENT_CHANGE);
    });
    this.month.on(BI.YearDateCombo.EVENT_BEFORE_POPUPVIEW, function () {
      self.fireEvent(BI.DatePicker.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
    });
    BI.createWidget({
      type: "bi.htape",
      element: this,
      items: [{
        el: {
          type: "bi.center_adapt",
          items: [this.left]
        },
        width: 24
      }, {
        el: {
          type: "bi.center_adapt",
          hgap: 10,
          items: [this.year, this.month]
        }
      }, {
        el: {
          type: "bi.center_adapt",
          items: [this.right]
        },
        width: 24
      }]
    });
    this.setValue({
      year: this._year,
      month: this._month
    });
  },
  _refreshMonth: function _refreshMonth(defaultMonth) {
    var month = this.month.getValue();
    this.month.populate(this._getAllowMonths());

    var allowMonth = this._getAllowMonths();

    if (!BI.contains(allowMonth, month)) {
      month = defaultMonth || allowMonth[0];
    }

    this.month.setValue(month);
    return month;
  },
  _getAllowMonths: function _getAllowMonths() {
    var obj = this._getCheckMinMaxDate();

    var year = this.year.getValue() || this._year;

    return BI.filter(BI.range(1, 13), function (idx, v) {
      return !BI.checkDateVoid(year, v, 1, obj.min, obj.max)[0];
    });
  },
  // 上一年月不合法则灰化
  _checkLeftValid: function _checkLeftValid() {
    var obj = this._getCheckMinMaxDate();

    var year = this._month === 1 ? this._year - 1 : this._year;
    var month = this._month === 1 ? 12 : this._month - 1;
    var valid = BI.isNull(BI.checkDateVoid(year, month, 1, obj.min, obj.max)[0]);
    this.left.setEnable(valid);
    return valid;
  },
  // 下一年月不合法则灰化
  _checkRightValid: function _checkRightValid() {
    var obj = this._getCheckMinMaxDate();

    var year = this._month === 12 ? this._year + 1 : this._year;
    var month = this._month === 12 ? 1 : this._month + 1;
    var valid = BI.isNull(BI.checkDateVoid(year, month, 1, obj.min, obj.max)[0]);
    this.right.setEnable(valid);
    return valid;
  },
  _getCheckMinMaxDate: function _getCheckMinMaxDate() {
    var o = this.options;
    var minDate = BI.parseDateTime(o.min, "%Y-%X-%d");
    var maxDate = BI.parseDateTime(o.max, "%Y-%X-%d");
    minDate.setDate(1);
    maxDate.setDate(1);
    return {
      min: BI.print(minDate, "%Y-%X-%d"),
      max: BI.print(maxDate, "%Y-%X-%d")
    };
  },
  setMinDate: function setMinDate(minDate) {
    this.options.min = minDate;
    this.year.setMinDate(minDate);

    this._refreshMonth(this._month); // this._checkLeftValid();
    // this._checkRightValid();

  },
  setMaxDate: function setMaxDate(maxDate) {
    this.options.max = maxDate;
    this.year.setMaxDate(maxDate);

    this._refreshMonth(this._month); // this._checkLeftValid();
    // this._checkRightValid();

  },
  setValue: function setValue(ob) {
    this._year = BI.parseInt(ob.year);
    this._month = BI.parseInt(ob.month);
    this.year.setValue(ob.year);

    this._refreshMonth(this._month);

    this.month.setValue(ob.month); // this._checkLeftValid();
    // this._checkRightValid();
  },
  getValue: function getValue() {
    return {
      year: this.year.getValue(),
      month: this.month.getValue()
    };
  }
});
BI.DatePicker.EVENT_CHANGE = "EVENT_CHANGE";
BI.DatePicker.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.date_picker", BI.DatePicker);

/***/ }),
/* 518 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/9/7.
 * @class BI.YearPicker
 * @extends BI.Widget
 */
BI.YearPicker = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.YearPicker.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-year-picker",
      behaviors: {},
      height: 40,
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31" // 最大日期

    });
  },
  _init: function _init() {
    BI.YearPicker.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this._year = BI.getDate().getFullYear();
    this.left = BI.createWidget({
      type: "bi.icon_button",
      cls: "pre-page-h-font",
      width: 25,
      height: 25
    });
    this.left.on(BI.IconButton.EVENT_CHANGE, function () {
      self.setValue(self.year.getValue() - 1);
      self.fireEvent(BI.YearPicker.EVENT_CHANGE); // self._checkLeftValid();
      // self._checkRightValid();
    });
    this.right = BI.createWidget({
      type: "bi.icon_button",
      cls: "next-page-h-font",
      width: 25,
      height: 25
    });
    this.right.on(BI.IconButton.EVENT_CHANGE, function () {
      self.setValue(self.year.getValue() + 1);
      self.fireEvent(BI.YearPicker.EVENT_CHANGE); // self._checkLeftValid();
      // self._checkRightValid();
    });
    this.year = BI.createWidget({
      type: "bi.year_date_combo",
      min: o.min,
      behaviors: o.behaviors,
      max: o.max,
      width: 50
    });
    this.year.on(BI.YearDateCombo.EVENT_CHANGE, function () {
      self.setValue(self.year.getValue());
      self.fireEvent(BI.YearPicker.EVENT_CHANGE);
    });
    this.year.on(BI.YearDateCombo.EVENT_BEFORE_POPUPVIEW, function () {
      self.fireEvent(BI.YearPicker.EVENT_BEFORE_POPUPVIEW);
    });
    BI.createWidget({
      type: "bi.htape",
      element: this,
      items: [{
        el: {
          type: "bi.center_adapt",
          items: [this.left]
        },
        width: 25
      }, {
        type: "bi.center_adapt",
        items: [{
          el: this.year
        }]
      }, {
        el: {
          type: "bi.center_adapt",
          items: [this.right]
        },
        width: 25
      }]
    });
    this.setValue(this._year);
  },
  _checkLeftValid: function _checkLeftValid() {
    var o = this.options;
    var valid = this._year > BI.parseDateTime(o.min, "%Y-%X-%d").getFullYear();
    this.left.setEnable(valid);
    return valid;
  },
  _checkRightValid: function _checkRightValid() {
    var o = this.options;
    var valid = this._year < BI.parseDateTime(o.max, "%Y-%X-%d").getFullYear();
    this.right.setEnable(valid);
    return valid;
  },
  setMinDate: function setMinDate(minDate) {
    this.options.min = minDate;
    this.year.setMinDate(minDate); // this._checkLeftValid();
    // this._checkRightValid();
  },
  setMaxDate: function setMaxDate(maxDate) {
    this.options.max = maxDate;
    this.year.setMaxDate(maxDate); // this._checkLeftValid();
    // this._checkRightValid();
  },
  setValue: function setValue(v) {
    this._year = v;
    this.year.setValue(v); // this._checkLeftValid();
    // this._checkRightValid();
  },
  getValue: function getValue() {
    return this.year.getValue();
  }
});
BI.YearPicker.EVENT_CHANGE = "EVENT_CHANGE";
BI.YearPicker.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.year_picker", BI.YearPicker);

/***/ }),
/* 519 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/9/7.
 * @class BI.DateCalendarPopup
 * @extends BI.Widget
 */
BI.DateCalendarPopup = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-date-calendar-popup",
    min: "1900-01-01",
    // 最小日期
    max: "2099-12-31",
    // 最大日期
    selectedTime: null
  },
  _createNav: function _createNav(v) {
    var date = BI.Calendar.getDateJSONByPage(v);
    var calendar = BI.createWidget({
      type: "bi.calendar",
      logic: {
        dynamic: true
      },
      min: this.options.min,
      max: this.options.max,
      year: date.year,
      month: date.month,
      // BI-45616 此处为确定当前应该展示哪个年月对应的Calendar, day不是关键数据, 给1号就可
      day: 1
    });
    return calendar;
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.today = BI.getDate();
    this._year = this.today.getFullYear();
    this._month = this.today.getMonth() + 1;
    this._day = this.today.getDate();
    this.selectedTime = o.selectedTime || {
      year: this._year,
      month: this._month,
      day: this._day
    };
    this.datePicker = BI.createWidget({
      type: "bi.date_picker",
      behaviors: o.behaviors,
      min: o.min,
      max: o.max
    });
    this.calendar = BI.createWidget({
      direction: "top",
      logic: {
        dynamic: true
      },
      type: "bi.navigation",
      tab: this.datePicker,
      cardCreator: BI.bind(this._createNav, this),
      afterCardCreated: function afterCardCreated() {},
      afterCardShow: function afterCardShow() {
        this.setValue(self.selectedTime);
      }
    });
    this.datePicker.on(BI.DatePicker.EVENT_CHANGE, function () {
      self.selectedTime = self.datePicker.getValue();
      self.selectedTime.day = 1;
      self.calendar.setSelect(BI.Calendar.getPageByDateJSON(self.selectedTime));
    });
    this.datePicker.on(BI.DatePicker.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW, function () {
      self.fireEvent(BI.DateCalendarPopup.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
    });
    this.calendar.on(BI.Navigation.EVENT_CHANGE, function () {
      self.selectedTime = self.calendar.getValue();
      self.setValue(self.selectedTime);
      self.fireEvent(BI.DateCalendarPopup.EVENT_CHANGE);
    });
    return [{
      type: "bi.vertical",
      items: [{
        el: this.calendar,
        hgap: 12,
        bgap: 7
      }]
    }, {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.layout",
          cls: "bi-split-top"
        },
        height: 1,
        top: 40,
        left: 0,
        right: 0
      }]
    }];
  },
  _checkMin: function _checkMin() {
    var o = this.options;
    BI.each(this.calendar.getAllCard(), function (idx, calendar) {
      calendar.setMinDate(o.min);
    });
  },
  _checkMax: function _checkMax() {
    var o = this.options;
    BI.each(this.calendar.getAllCard(), function (idx, calendar) {
      calendar.setMaxDate(o.max);
    });
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
      this.datePicker.setMinDate(minDate);

      this._checkMin();
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
      this.datePicker.setMaxDate(maxDate);

      this._checkMax();
    }
  },
  setValue: function setValue(timeOb) {
    this.datePicker.setValue(timeOb);
    this.calendar.setSelect(BI.Calendar.getPageByDateJSON(timeOb));
    this.calendar.setValue(timeOb);
    this.selectedTime = timeOb;
  },
  getValue: function getValue() {
    return this.selectedTime;
  }
});
BI.DateCalendarPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.DateCalendarPopup.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.date_calendar_popup", BI.DateCalendarPopup);

/***/ }),
/* 520 */
/***/ (function(module, exports) {

/**
 * 月份展示面板
 *
 * Created by GUY on 2015/9/2.
 * @class BI.MonthPopup
 * @extends BI.Trigger
 */
BI.MonthPopup = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MonthPopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-month-popup",
      behaviors: {}
    });
  },
  _init: function _init() {
    BI.MonthPopup.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.selectedMonth = BI.getDate().getMonth() + 1;
    this.month = BI.createWidget({
      type: "bi.button_group",
      element: this,
      behaviors: o.behaviors,
      items: BI.createItems(this._getItems(o.allowMonths), {}),
      layouts: [BI.LogicFactory.createLogic("table", BI.extend({
        dynamic: true
      }, {
        columns: 2,
        rows: 6,
        columnSize: [1 / 2, 1 / 2],
        rowSize: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
      })), {
        type: "bi.center_adapt",
        vgap: 2
      }],
      value: o.value
    });
    this.month.on(BI.Controller.EVENT_CHANGE, function (type, value) {
      self.selectedMonth = value;
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.MonthPopup.EVENT_CHANGE);
      }
    });
  },
  _getItems: function _getItems(m) {
    BI.Widget.pushContext(this); // 纵向排列月

    var month = [1, 7, 2, 8, 3, 9, 4, 10, 5, 11, 6, 12];
    var items = [];
    items.push(month.slice(0, 2));
    items.push(month.slice(2, 4));
    items.push(month.slice(4, 6));
    items.push(month.slice(6, 8));
    items.push(month.slice(8, 10));
    items.push(month.slice(10, 12));
    items = BI.map(items, function (i, item) {
      return BI.map(item, function (j, td) {
        return {
          type: "bi.text_item",
          cls: "bi-border-radius bi-list-item-select",
          textAlign: "center",
          whiteSpace: "nowrap",
          once: false,
          forceSelected: true,
          height: BI.toPix(BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT, 1),
          width: 30,
          value: td,
          text: td,
          disabled: !BI.contains(m, td)
        };
      });
    });
    BI.Widget.popContext();
    return items;
  },
  populate: function populate(months) {
    this.month.populate(this._getItems(months));
  },
  getValue: function getValue() {
    return this.selectedMonth;
  },
  setValue: function setValue(v) {
    v = BI.parseInt(v);
    this.selectedMonth = v;
    this.month.setValue([v]);
  }
});
BI.MonthPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.month_popup", BI.MonthPopup);

/***/ }),
/* 521 */
/***/ (function(module, exports) {

/**
 * 年份展示面板
 *
 * Created by GUY on 2015/9/2.
 * @class BI.YearPopup
 * @extends BI.Trigger
 */
BI.YearPopup = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.YearPopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-year-popup",
      behaviors: {},
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31" // 最大日期

    });
  },
  _createYearCalendar: function _createYearCalendar(v) {
    var o = this.options,
        y = this._year;
    var calendar = BI.createWidget({
      type: "bi.year_calendar",
      behaviors: o.behaviors,
      min: o.min,
      max: o.max,
      logic: {
        dynamic: true
      },
      year: y + v * 12
    });
    calendar.setValue(this._year);
    return calendar;
  },
  _init: function _init() {
    BI.YearPopup.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.selectedYear = this._year = BI.getDate().getFullYear();
    this.backBtn = BI.createWidget({
      type: "bi.icon_button",
      cls: "pre-page-h-font",
      width: 24,
      height: 24,
      value: -1
    });
    this.preBtn = BI.createWidget({
      type: "bi.icon_button",
      cls: "next-page-h-font",
      width: 24,
      height: 24,
      value: 1
    });
    this.navigation = BI.createWidget({
      type: "bi.navigation",
      element: this,
      single: true,
      logic: {
        dynamic: true
      },
      tab: {
        cls: "year-popup-navigation bi-high-light bi-split-top",
        height: 24,
        items: [this.backBtn, this.preBtn]
      },
      cardCreator: BI.bind(this._createYearCalendar, this),
      afterCardCreated: function afterCardCreated() {
        this.setValue(self.selectedYear);
      }
    });
    this.navigation.on(BI.Navigation.EVENT_CHANGE, function () {
      self.selectedYear = this.getValue();
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
      self.fireEvent(BI.YearPopup.EVENT_CHANGE, self.selectedYear);
    });

    if (BI.isKey(o.value)) {
      this.setValue(o.value);
    }
  },
  _checkMin: function _checkMin() {
    var calendar = this.navigation.getSelectedCard();

    if (BI.isNotNull(calendar)) {
      calendar.setMinDate(this.options.min);
    }
  },
  _checkMax: function _checkMax() {
    var calendar = this.navigation.getSelectedCard();

    if (BI.isNotNull(calendar)) {
      calendar.setMaxDate(this.options.max);
    }
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;

      this._checkMin();
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;

      this._checkMax();
    }
  },
  getValue: function getValue() {
    return this.selectedYear;
  },
  setValue: function setValue(v) {
    var o = this.options;
    v = BI.parseInt(v); // 切换年不受范围限制
    // 对于年控件来说，只要传入的minDate和maxDate的year区间包含v就是合法的
    // var startDate = BI.parseDateTime(o.min, "%Y-%X-%d");
    // var endDate = BI.parseDateTime(o.max, "%Y-%X-%d");
    // if (BI.checkDateVoid(v, 1, 1, BI.print(BI.getDate(startDate.getFullYear(), 0, 1), "%Y-%X-%d"), BI.print(BI.getDate(endDate.getFullYear(), 0, 1), "%Y-%X-%d"))[0]) {
    //     v = BI.getDate().getFullYear();
    // }

    this.selectedYear = v;
    this.navigation.setSelect(BI.YearCalendar.getPageByYear(v));
    this.navigation.setValue(v);
  }
});
BI.YearPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.year_popup", BI.YearPopup);

/***/ }),
/* 522 */
/***/ (function(module, exports) {

/**
 * 日期控件中的年份或月份trigger
 *
 * Created by GUY on 2015/9/7.
 * @class BI.DateTriangleTrigger
 * @extends BI.Trigger
 */
BI.DateTriangleTrigger = BI.inherit(BI.Trigger, {
  _const: {
    height: 24,
    iconWidth: 12,
    iconHeight: 12
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DateTriangleTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-date-triangle-trigger solid-triangle-bottom-font cursor-pointer",
      height: 24
    });
  },
  _init: function _init() {
    BI.DateTriangleTrigger.superclass._init.apply(this, arguments);

    var o = this.options,
        c = this._const;
    this.text = BI.createWidget({
      type: "bi.label",
      cls: "list-item-text",
      textAlign: "right",
      text: o.text,
      value: o.value,
      height: c.height
    });
    BI.createWidget({
      type: "bi.vertical_adapt",
      element: this,
      items: [{
        el: this.text,
        rgap: 5
      }, {
        type: "bi.icon_label",
        width: 16
      }]
    });
  },
  setValue: function setValue(v) {
    this.text.setValue(v);
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText(v) {
    this.text.setText(v);
  },
  getText: function getText() {
    return this.item.getText();
  },
  getKey: function getKey() {}
});
BI.shortcut("bi.date_triangle_trigger", BI.DateTriangleTrigger);

/***/ }),
/* 523 */
/***/ (function(module, exports) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(function () {
  function transformItems(items) {
    if (!items) return items;
    var result = BI.cloneDeep(items);
    var isComplexItmes = BI.some(items, function (_, item) {
      return BI.isArray(item);
    }); // 传一维数组，帮转二维

    if (!isComplexItmes) {
      result = [result];
    } // 帮转 el


    BI.each(result, function (_, arr) {
      BI.each(arr, function (_, item) {
        if (item.children && !item.el) {
          item.el = {
            text: item.text,
            icon: item.icon,
            cls: item.cls,
            iconCls1: item.iconCls1,
            value: item.value
          };
        }
      });
    });
    return result;
  }
  /**
   * Created by roy on 15/8/14.
   */


  BI.DownListCombo = BI.inherit(BI.Widget, {
    _defaultConfig: function _defaultConfig() {
      return BI.extend(BI.DownListCombo.superclass._defaultConfig.apply(this, arguments), {
        baseCls: "bi-down-list-combo",
        height: 24,
        items: [],
        adjustLength: 0,
        direction: "bottom",
        trigger: "click",
        container: null,
        stopPropagation: false,
        el: {},
        popup: {},
        minWidth: 140,
        maxHeight: 1000,
        destroyWhenHide: false,
        isDefaultInit: true
      });
    },
    _init: function _init() {
      BI.DownListCombo.superclass._init.apply(this, arguments);

      var self = this,
          o = this.options;
      this.downlistcombo = BI.createWidget({
        element: this,
        type: "bi.combo",
        trigger: o.trigger,
        isNeedAdjustWidth: false,
        isDefaultInit: o.isDefaultInit,
        container: o.container,
        adjustLength: o.adjustLength,
        direction: o.direction,
        belowMouse: o.belowMouse,
        stopPropagation: o.stopPropagation,
        destroyWhenHide: o.destroyWhenHide,
        el: _objectSpread({
          type: "bi.icon_trigger",
          extraCls: o.iconCls,
          width: o.width,
          height: o.height
        }, o.el),
        popup: _objectSpread({
          el: {
            type: "bi.down_list_popup",
            ref: function ref(_ref) {
              self.popupView = _ref;
            },
            items: transformItems(o.items),
            chooseType: o.chooseType,
            value: o.value,
            listeners: [{
              eventName: BI.DownListPopup.EVENT_CHANGE,
              action: function action(value) {
                self.fireEvent(BI.DownListCombo.EVENT_CHANGE, value);
                self.downlistcombo.hideView();
              }
            }, {
              eventName: BI.DownListPopup.EVENT_SON_VALUE_CHANGE,
              action: function action(value, fatherValue) {
                self.fireEvent(BI.DownListCombo.EVENT_SON_VALUE_CHANGE, value, fatherValue);
                self.downlistcombo.hideView();
              }
            }]
          },
          stopPropagation: o.stopPropagation,
          maxHeight: o.maxHeight,
          minWidth: o.minWidth
        }, o.popup)
      });
      this.downlistcombo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
        self.fireEvent(BI.DownListCombo.EVENT_BEFORE_POPUPVIEW);
      });
    },
    hideView: function hideView() {
      this.downlistcombo.hideView();
    },
    showView: function showView(e) {
      this.downlistcombo.showView(e);
    },
    populate: function populate(items) {
      this.popupView.populate(items);
    },
    setValue: function setValue(v) {
      this.popupView.setValue(v);
    },
    getValue: function getValue() {
      return this.popupView.getValue();
    },
    adjustWidth: function adjustWidth() {
      this.downlistcombo.adjustWidth();
    },
    adjustHeight: function adjustHeight() {
      this.downlistcombo.adjustHeight();
    }
  });
  BI.DownListCombo.EVENT_CHANGE = "EVENT_CHANGE";
  BI.DownListCombo.EVENT_SON_VALUE_CHANGE = "EVENT_SON_VALUE_CHANGE";
  BI.DownListCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
  BI.shortcut("bi.down_list_combo", BI.DownListCombo);
})();

/***/ }),
/* 524 */
/***/ (function(module, exports) {

/**
 * Created by roy on 15/9/6.
 */
BI.DownListGroup = BI.inherit(BI.Widget, {
  constants: {
    iconCls: "check-mark-ha-font"
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DownListGroup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-down-list-group",
      items: [{
        el: {}
      }]
    });
  },
  _init: function _init() {
    BI.DownListGroup.superclass._init.apply(this, arguments);

    var o = this.options,
        self = this;
    this.downlistgroup = BI.createWidget({
      element: this,
      type: "bi.button_tree",
      items: o.items,
      chooseType: 0,
      // 0单选，1多选
      layouts: [{
        type: "bi.vertical",
        hgap: 0,
        vgap: 0
      }],
      value: o.value
    });
    this.downlistgroup.on(BI.Controller.EVENT_CHANGE, function (type) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.DownListGroup.EVENT_CHANGE, arguments);
      }
    });
  },
  getValue: function getValue() {
    return this.downlistgroup.getValue();
  },
  setValue: function setValue(v) {
    this.downlistgroup.setValue(v);
  }
});
BI.DownListGroup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.down_list_group", BI.DownListGroup);

/***/ }),
/* 525 */
/***/ (function(module, exports) {

BI.DownListItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.DownListItem.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-down-list-item bi-list-item-active",
      cls: "",
      height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      logic: {
        dynamic: true
      },
      selected: false,
      iconHeight: null,
      iconWidth: null,
      textHgap: 0,
      textVgap: 0,
      textLgap: 0,
      textRgap: 0
    });
  },
  _init: function _init() {
    BI.DownListItem.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      cls: "list-item-text",
      textAlign: "left",
      hgap: o.textHgap,
      vgap: o.textVgap,
      lgap: o.textLgap,
      rgap: o.textRgap,
      text: o.text,
      value: o.value,
      keyword: o.keyword,
      height: o.height
    });
    var icon = BI.isPlainObject(o.icon) ? o.icon : {
      type: "bi.icon",
      width: o.iconWidth,
      height: o.iconHeight
    };
    this.icon = BI.createWidget({
      type: "bi.center_adapt",
      width: 36,
      height: o.height,
      items: [{
        el: icon
      }]
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left), BI.extend(o.logic, {
      items: BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, this.icon, this.text)
    }))));
  },
  setValue: function setValue() {
    if (!this.isReadOnly()) {
      this.text.setValue.apply(this.text, arguments);
    }
  },
  getValue: function getValue() {
    return this.text.getValue();
  },
  setText: function setText() {
    this.text.setText.apply(this.text, arguments);
  },
  getText: function getText() {
    return this.text.getText();
  },
  doClick: function doClick() {
    BI.DownListItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.DownListItem.EVENT_CHANGE, this.getValue(), this);
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  }
});
BI.DownListItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.down_list_item", BI.DownListItem);

/***/ }),
/* 526 */
/***/ (function(module, exports) {

BI.DownListGroupItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.DownListGroupItem.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-down-list-group-item",
      logic: {
        dynamic: false
      },
      // invalid: true,
      iconCls1: "dot-e-font",
      icon: "",
      iconCls2: "pull-right-e-font"
    });
  },
  render: function render() {
    var o = this.options;
    var self = this;
    this.text = BI.createWidget({
      type: "bi.label",
      cls: "list-group-item-text",
      textAlign: "left",
      text: o.text,
      value: o.value,
      height: o.height
    });

    if (BI.isPlainObject(o.icon)) {
      this.icon1 = BI.createWidget({
        width: 36,
        height: o.height,
        type: "bi.center_adapt",
        items: [o.icon]
      });
    } else {
      this.icon1 = BI.createWidget({
        type: "bi.icon_button",
        cls: o.iconCls1,
        width: 36,
        height: o.height,
        iconHeight: o.iconHeight,
        iconWidth: 36,
        disableSelected: true,
        selected: this._digest(o.value)
      });
    }

    this.icon2 = BI.createWidget({
      type: "bi.icon_button",
      cls: o.iconCls2,
      width: 24,
      forceNotSelected: true
    });
    this.element.hover(function () {
      if (self.isEnabled()) {
        self.hover();
      }
    }, function () {
      if (self.isEnabled()) {
        self.dishover();
      }
    });
    return {
      type: "bi.horizontal_fill",
      columnSize: [36, "fill", 24],
      items: [this.icon1, this.text, this.icon2]
    };
  },
  _getLevel: function _getLevel() {
    var child = BI.first(this.options.childValues);
    return BI.isNotNull(child) ? (child + "").split(BI.BlankSplitChar).length : 0;
  },
  _digest: function _digest(v) {
    var self = this,
        o = this.options;
    v = BI.isArray(v) ? v : [v];

    var level = this._getLevel();

    return BI.any(v, function (idx, value) {
      return BI.contains(o.childValues, (value + "").split(BI.BlankSplitChar).slice(0, level).join(BI.BlankSplitChar));
    });
  },
  hover: function hover() {
    BI.DownListGroupItem.superclass.hover.apply(this, arguments);
    this.icon1.element.addClass("hover");
    this.icon2.element.addClass("hover");
  },
  dishover: function dishover() {
    BI.DownListGroupItem.superclass.dishover.apply(this, arguments);
    this.icon1.element.removeClass("hover");
    this.icon2.element.removeClass("hover");
  },
  doClick: function doClick() {
    BI.DownListGroupItem.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.DownListGroupItem.EVENT_CHANGE, this.getValue());
    }
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  setValue: function setValue(v) {
    this.icon1.setSelected && this.icon1.setSelected(this._digest(v));
  }
});
BI.DownListGroupItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.down_list_group_item", BI.DownListGroupItem);

/***/ }),
/* 527 */
/***/ (function(module, exports) {

/**
 * Created by roy on 15/9/8.
 * 处理popup中的item分组样式
 * 一个item分组中的成员大于一时，该分组设置为单选，并且默认状态第一个成员设置为已选择项
 */
BI.DownListPopup = BI.inherit(BI.Pane, {
  constants: {
    nextIcon: "pull-right-e-font",
    height: 24,
    iconHeight: 12,
    iconWidth: 12,
    hgap: 0,
    vgap: 0,
    border: 1
  },
  _defaultConfig: function _defaultConfig() {
    var conf = BI.DownListPopup.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-down-list-popup",
      items: [],
      chooseType: BI.Selection.Multi
    });
  },
  _init: function _init() {
    BI.DownListPopup.superclass._init.apply(this, arguments);

    this.singleValues = [];
    this.childValueMap = {};
    this.fatherValueMap = {};
    this.items = [];

    var self = this,
        o = this.options,
        children = this._createPopupItems(o.items);

    this.popup = BI.createWidget({
      type: "bi.button_tree",
      items: BI.createItems(children, {}, {
        adjustLength: -2
      }),
      layouts: [{
        type: "bi.vertical",
        hgap: this.constants.hgap,
        vgap: this.constants.vgap
      }],
      value: this._digest(o.value),
      chooseType: o.chooseType
    });
    this.popup.on(BI.ButtonTree.EVENT_CHANGE, function (value, object) {
      var changedValue = value;

      if (BI.isNotNull(self.childValueMap[value])) {
        changedValue = self.childValueMap[value];
        self.fireEvent(BI.DownListPopup.EVENT_SON_VALUE_CHANGE, changedValue, self.fatherValueMap[value]);
      } else {
        self.fireEvent(BI.DownListPopup.EVENT_CHANGE, changedValue, object);
      }

      if (!BI.contains(self.singleValues, changedValue)) {
        var item = self.getValue();
        var result = [];
        BI.each(item, function (i, valueObject) {
          if (valueObject.value != changedValue) {
            result.push(valueObject);
          }
        });
        self.setValue(result);
      }
    });
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      items: [this.popup],
      vgap: 5
    });
  },
  _createPopupItems: function _createPopupItems(items) {
    var self = this,
        result = []; // 不能修改populate进来的item的引用

    BI.each(items, function (i, it) {
      var item_done = {
        type: "bi.down_list_group",
        items: []
      };
      var storeItem = [];
      BI.each(it, function (i, sourceItem) {
        var item = BI.extend({}, sourceItem);

        if (BI.isNotEmptyArray(sourceItem.children) && !BI.isEmpty(sourceItem.el)) {
          item.type = "bi.combo_group"; // popup未初始化返回的是options中的value, 在经过buttontree的getValue concat之后，无法区分值来自options
          // 还是item自身, 这边控制defaultInit为true来避免这个问题

          item.isDefaultInit = true;
          item.cls = "down-list-group";
          item.trigger = "hover";
          item.isNeedAdjustWidth = false;
          item.el = sourceItem.el;
          item.el.title = sourceItem.el.title || sourceItem.el.text;
          item.el.type = "bi.down_list_group_item";
          item.el.logic = {
            dynamic: true
          };
          item.el.height = sourceItem.el.height || BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT;
          item.el.iconCls2 = self.constants.nextIcon;
          item.popup = {
            lgap: 1,
            el: {
              type: "bi.button_tree",
              chooseType: 0,
              layouts: [{
                type: "bi.vertical"
              }]
            },
            innerVgap: 5,
            maxHeight: 378
          };

          self._createChildren(item, sourceItem);
        } else {
          item.type = sourceItem.type || "bi.down_list_item";
          item.title = sourceItem.title || sourceItem.text;
          item.textRgap = 10;
          item.isNeedAdjustWidth = false;
          item.logic = {
            dynamic: true
          };
        }

        var el_done = {};
        el_done.el = item;
        item_done.items.push(el_done);
        storeItem.push(item);
      });

      if (self._isGroup(item_done.items)) {
        BI.each(item_done.items, function (i, item) {
          self.singleValues.push(item.el.value);
        });
      }

      result.push(item_done);
      self.items.push(storeItem);

      if (self._needSpliter(i, items.length)) {
        var spliter_container = BI.createWidget({
          type: "bi.vertical",
          items: [{
            el: {
              type: "bi.layout",
              cls: "bi-down-list-spliter bi-split-top cursor-pointer",
              height: 0
            }
          }],
          cls: "bi-down-list-spliter-container cursor-pointer",
          vgap: 5,
          hgap: 12
        });
        result.push(spliter_container);
      }
    });
    return result;
  },
  _createChildren: function _createChildren(targetItem, sourceItem) {
    var self = this;
    targetItem.el.childValues = [];
    targetItem.items = targetItem.children = [];
    BI.each(sourceItem.children, function (i, child) {
      var item = BI.extend({}, child);
      var fatherValue = BI.deepClone(targetItem.el.value);
      var childValue = BI.deepClone(item.value);
      self.singleValues.push(item.value);
      item.type = item.type || "bi.down_list_item";
      item.extraCls = " child-down-list-item";
      item.title = item.title || item.text;
      item.textRgap = 10;
      item.isNeedAdjustWidth = false;
      item.logic = {
        dynamic: true
      };
      item.father = fatherValue;
      item.childValue = item.value;
      self.fatherValueMap[self._createChildValue(fatherValue, childValue)] = fatherValue;
      self.childValueMap[self._createChildValue(fatherValue, childValue)] = childValue;
      item.value = self._createChildValue(fatherValue, childValue);
      targetItem.el.childValues.push(item.value);
      targetItem.items.push(item);
    });
  },
  _isGroup: function _isGroup(i) {
    return i.length > 1;
  },
  _needSpliter: function _needSpliter(i, itemLength) {
    return i < itemLength - 1;
  },
  _createChildValue: function _createChildValue(fatherValue, childValue) {
    return fatherValue + BI.BlankSplitChar + childValue;
  },
  _digest: function _digest(valueItem) {
    var self = this;
    var valueArray = [];
    BI.each(valueItem, function (i, item) {
      var value;

      if (BI.isNotNull(item.childValue)) {
        value = self._createChildValue(item.value, item.childValue);
      } else {
        value = item.value;
      }

      valueArray.push(value);
    });
    return valueArray;
  },
  _checkValues: function _checkValues(values) {
    var value = [];
    BI.each(this.items, function (idx, itemGroup) {
      BI.each(itemGroup, function (id, item) {
        if (BI.isNotNull(item.children)) {
          var childValues = BI.map(item.children, "value");
          var v = joinValue(childValues, values[idx]);

          if (BI.isNotEmptyString(v)) {
            value.push(v);
          }
        } else {
          if (item.value === values[idx][0]) {
            value.push(values[idx][0]);
          }
        }
      });
    });
    return value;

    function joinValue(sources, targets) {
      var value = "";
      BI.some(sources, function (idx, s) {
        return BI.some(targets, function (id, t) {
          if (s === t) {
            value = s;
            return true;
          }
        });
      });
      return value;
    }
  },
  populate: function populate(items) {
    BI.DownListPopup.superclass.populate.apply(this, arguments);
    this.items = [];
    this.childValueMap = {};
    this.fatherValueMap = {};
    this.singleValues = [];

    var children = this._createPopupItems(items);

    var popupItem = BI.createItems(children, {}, {
      adjustLength: -2
    });
    this.popup.populate(popupItem);
  },
  setValue: function setValue(valueItem) {
    this.popup.setValue(this._digest(valueItem));
  },
  _getValue: function _getValue() {
    var v = [];
    BI.each(this.popup.getAllButtons(), function (i, item) {
      i % 2 === 0 && v.push(item.getValue());
    });
    return v;
  },
  getValue: function getValue() {
    var self = this,
        result = [];

    var values = this._checkValues(this._getValue());

    BI.each(values, function (i, value) {
      var valueItem = {};

      if (BI.isNotNull(self.childValueMap[value])) {
        var fartherValue = self.fatherValueMap[value];
        valueItem.childValue = self.childValueMap[value];
        valueItem.value = fartherValue;
      } else {
        valueItem.value = value;
      }

      result.push(valueItem);
    });
    return result;
  }
});
BI.DownListPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.DownListPopup.EVENT_SON_VALUE_CHANGE = "EVENT_SON_VALUE_CHANGE";
BI.shortcut("bi.down_list_popup", BI.DownListPopup);

/***/ }),
/* 528 */
/***/ (function(module, exports) {

/**
 * @class BI.TextValueDownListCombo
 * @extend BI.Widget
 */
BI.TextValueDownListCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig(config) {
    return BI.extend(BI.TextValueDownListCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-text-value-down-list-combo bi-border-radius " + (config.simple ? "bi-border-bottom" : "bi-border"),
      height: 24
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.TextValueDownListCombo.superclass._init.apply(this, arguments);

    this._createValueMap();

    var value;

    if (BI.isNotNull(o.value)) {
      value = this._digest(o.value);
    }

    this.combo = BI.createWidget({
      type: "bi.down_list_combo",
      element: this,
      chooseType: BI.Selection.Single,
      adjustLength: 2,
      width: BI.toPix(o.width, 2),
      height: BI.toPix(o.height, 2),
      el: {
        type: "bi.down_list_select_text_trigger",
        ref: function ref(_ref) {
          self.trigger = _ref;
        },
        cls: "text-value-down-list-trigger",
        height: BI.toPix(o.height, 2),
        items: o.items,
        text: o.text,
        value: value
      },
      value: BI.isNull(value) ? [] : [value],
      items: BI.deepClone(o.items)
    });
    this.combo.on(BI.DownListCombo.EVENT_CHANGE, function () {
      var currentVal = self.combo.getValue()[0].value;

      if (currentVal !== self.value) {
        self.setValue(currentVal);
        self.fireEvent(BI.TextValueDownListCombo.EVENT_CHANGE);
      }
    });
    this.combo.on(BI.DownListCombo.EVENT_SON_VALUE_CHANGE, function () {
      var currentVal = self.combo.getValue()[0].childValue;

      if (currentVal !== self.value) {
        self.setValue(currentVal);
        self.fireEvent(BI.TextValueDownListCombo.EVENT_CHANGE);
      }
    });
  },
  _createValueMap: function _createValueMap() {
    var self = this;
    this.valueMap = {};
    BI.each(BI.flatten(this.options.items), function (idx, item) {
      if (BI.has(item, "el")) {
        BI.each(item.children, function (id, it) {
          self.valueMap[it.value] = {
            value: item.el.value,
            childValue: it.value
          };
        });
      } else {
        self.valueMap[item.value] = {
          value: item.value
        };
      }
    });
  },
  _digest: function _digest(v) {
    this.value = v;
    return this.valueMap[v];
  },
  setValue: function setValue(v) {
    var _this$trigger;

    v = this._digest(v);
    this.combo.setValue([v]);
    (_this$trigger = this.trigger) === null || _this$trigger === void 0 ? void 0 : _this$trigger.setValue(v);
  },
  getValue: function getValue() {
    var v = this.combo.getValue()[0];
    return [v.childValue || v.value];
  },
  populate: function populate(items) {
    this.options.items = BI.flatten(items);
    this.combo.populate(items);

    this._createValueMap();
  }
});
BI.TextValueDownListCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.text_value_down_list_combo", BI.TextValueDownListCombo);

/***/ }),
/* 529 */
/***/ (function(module, exports) {

/**
 * 选择字段trigger, downlist专用
 * 显示形式为 父亲值(儿子值)
 *
 * @class BI.DownListSelectTextTrigger
 * @extends BI.Trigger
 */
BI.DownListSelectTextTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DownListSelectTextTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-down-list-select-text-trigger",
      height: 24,
      text: ""
    });
  },
  _init: function _init() {
    BI.DownListSelectTextTrigger.superclass._init.apply(this, arguments);

    var o = this.options;
    this.trigger = BI.createWidget({
      type: "bi.select_text_trigger",
      element: this,
      height: o.height,
      items: this._formatItemArray(o.items),
      text: o.text,
      value: BI.isNull(o.value) ? "" : o.value.childValue || o.value.value
    });
  },
  _formatItemArray: function _formatItemArray() {
    var sourceArray = BI.flatten(BI.deepClone(this.options.items));
    var targetArray = [];
    BI.each(sourceArray, function (idx, item) {
      if (BI.has(item, "el")) {
        BI.each(item.children, function (id, it) {
          it.text = item.el.text + "(" + it.text + ")";
        });
        targetArray = BI.concat(targetArray, item.children);
      } else {
        targetArray.push(item);
      }
    });
    return targetArray;
  },
  setValue: function setValue(vals) {
    this.trigger.setValue(vals.childValue || vals.value);
  },
  populate: function populate(items) {
    this.trigger.populate(this._formatItemArray(items));
  }
});
BI.shortcut("bi.down_list_select_text_trigger", BI.DownListSelectTextTrigger);

/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(531);

var _global = _interopRequireDefault(__webpack_require__(703));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

if (_global["default"]._babelPolyfill && typeof console !== "undefined" && console.warn) {
  console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
}

_global["default"]._babelPolyfill = true;

/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(532);

__webpack_require__(675);

__webpack_require__(677);

__webpack_require__(680);

__webpack_require__(682);

__webpack_require__(684);

__webpack_require__(686);

__webpack_require__(688);

__webpack_require__(690);

__webpack_require__(692);

__webpack_require__(694);

__webpack_require__(696);

__webpack_require__(698);

__webpack_require__(702);

/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(533);
__webpack_require__(536);
__webpack_require__(537);
__webpack_require__(538);
__webpack_require__(539);
__webpack_require__(540);
__webpack_require__(541);
__webpack_require__(542);
__webpack_require__(543);
__webpack_require__(544);
__webpack_require__(545);
__webpack_require__(546);
__webpack_require__(547);
__webpack_require__(548);
__webpack_require__(549);
__webpack_require__(550);
__webpack_require__(551);
__webpack_require__(552);
__webpack_require__(553);
__webpack_require__(554);
__webpack_require__(555);
__webpack_require__(556);
__webpack_require__(557);
__webpack_require__(558);
__webpack_require__(559);
__webpack_require__(560);
__webpack_require__(561);
__webpack_require__(562);
__webpack_require__(563);
__webpack_require__(564);
__webpack_require__(565);
__webpack_require__(566);
__webpack_require__(567);
__webpack_require__(568);
__webpack_require__(569);
__webpack_require__(570);
__webpack_require__(571);
__webpack_require__(572);
__webpack_require__(573);
__webpack_require__(574);
__webpack_require__(575);
__webpack_require__(576);
__webpack_require__(577);
__webpack_require__(579);
__webpack_require__(580);
__webpack_require__(581);
__webpack_require__(582);
__webpack_require__(583);
__webpack_require__(584);
__webpack_require__(585);
__webpack_require__(586);
__webpack_require__(587);
__webpack_require__(588);
__webpack_require__(589);
__webpack_require__(590);
__webpack_require__(591);
__webpack_require__(592);
__webpack_require__(593);
__webpack_require__(594);
__webpack_require__(595);
__webpack_require__(596);
__webpack_require__(597);
__webpack_require__(598);
__webpack_require__(599);
__webpack_require__(600);
__webpack_require__(601);
__webpack_require__(602);
__webpack_require__(603);
__webpack_require__(604);
__webpack_require__(605);
__webpack_require__(606);
__webpack_require__(607);
__webpack_require__(608);
__webpack_require__(609);
__webpack_require__(610);
__webpack_require__(611);
__webpack_require__(612);
__webpack_require__(614);
__webpack_require__(615);
__webpack_require__(617);
__webpack_require__(618);
__webpack_require__(619);
__webpack_require__(620);
__webpack_require__(621);
__webpack_require__(622);
__webpack_require__(623);
__webpack_require__(625);
__webpack_require__(626);
__webpack_require__(627);
__webpack_require__(628);
__webpack_require__(629);
__webpack_require__(630);
__webpack_require__(631);
__webpack_require__(632);
__webpack_require__(633);
__webpack_require__(634);
__webpack_require__(635);
__webpack_require__(636);
__webpack_require__(637);
__webpack_require__(95);
__webpack_require__(638);
__webpack_require__(125);
__webpack_require__(639);
__webpack_require__(126);
__webpack_require__(640);
__webpack_require__(641);
__webpack_require__(642);
__webpack_require__(643);
__webpack_require__(127);
__webpack_require__(646);
__webpack_require__(647);
__webpack_require__(648);
__webpack_require__(649);
__webpack_require__(650);
__webpack_require__(651);
__webpack_require__(652);
__webpack_require__(653);
__webpack_require__(654);
__webpack_require__(655);
__webpack_require__(656);
__webpack_require__(657);
__webpack_require__(658);
__webpack_require__(659);
__webpack_require__(660);
__webpack_require__(661);
__webpack_require__(662);
__webpack_require__(663);
__webpack_require__(664);
__webpack_require__(665);
__webpack_require__(666);
__webpack_require__(667);
__webpack_require__(668);
__webpack_require__(669);
__webpack_require__(670);
__webpack_require__(671);
__webpack_require__(672);
__webpack_require__(673);
__webpack_require__(674);
module.exports = __webpack_require__(7);


/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(1);
var has = __webpack_require__(13);
var DESCRIPTORS = __webpack_require__(8);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(11);
var META = __webpack_require__(29).KEY;
var $fails = __webpack_require__(2);
var shared = __webpack_require__(63);
var setToStringTag = __webpack_require__(40);
var uid = __webpack_require__(31);
var wks = __webpack_require__(5);
var wksExt = __webpack_require__(76);
var wksDefine = __webpack_require__(106);
var enumKeys = __webpack_require__(535);
var isArray = __webpack_require__(66);
var anObject = __webpack_require__(3);
var isObject = __webpack_require__(4);
var toObject = __webpack_require__(10);
var toIObject = __webpack_require__(15);
var toPrimitive = __webpack_require__(28);
var createDesc = __webpack_require__(30);
var _create = __webpack_require__(35);
var gOPNExt = __webpack_require__(109);
var $GOPD = __webpack_require__(21);
var $GOPS = __webpack_require__(65);
var $DP = __webpack_require__(9);
var $keys = __webpack_require__(33);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(36).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(47).f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(32)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(14)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(63)('native-function-to-string', Function.toString);


/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(33);
var gOPS = __webpack_require__(65);
var pIE = __webpack_require__(47);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(35) });


/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(8), 'Object', { defineProperty: __webpack_require__(9).f });


/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(8), 'Object', { defineProperties: __webpack_require__(108) });


/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(15);
var $getOwnPropertyDescriptor = __webpack_require__(21).f;

__webpack_require__(22)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(10);
var $getPrototypeOf = __webpack_require__(37);

__webpack_require__(22)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(10);
var $keys = __webpack_require__(33);

__webpack_require__(22)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(22)('getOwnPropertyNames', function () {
  return __webpack_require__(109).f;
});


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(4);
var meta = __webpack_require__(29).onFreeze;

__webpack_require__(22)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(4);
var meta = __webpack_require__(29).onFreeze;

__webpack_require__(22)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(4);
var meta = __webpack_require__(29).onFreeze;

__webpack_require__(22)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(4);

__webpack_require__(22)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(4);

__webpack_require__(22)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(4);

__webpack_require__(22)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(0);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(110) });


/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { is: __webpack_require__(111) });


/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(80).set });


/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(48);
var test = {};
test[__webpack_require__(5)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(11)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(0);

$export($export.P, 'Function', { bind: __webpack_require__(112) });


/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(9).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(8) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(4);
var getPrototypeOf = __webpack_require__(37);
var HAS_INSTANCE = __webpack_require__(5)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(9).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(114);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(115);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(1);
var has = __webpack_require__(13);
var cof = __webpack_require__(24);
var inheritIfRequired = __webpack_require__(82);
var toPrimitive = __webpack_require__(28);
var fails = __webpack_require__(2);
var gOPN = __webpack_require__(36).f;
var gOPD = __webpack_require__(21).f;
var dP = __webpack_require__(9).f;
var $trim = __webpack_require__(41).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(35)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(8) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(11)(global, NUMBER, $Number);
}


/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toInteger = __webpack_require__(20);
var aNumberValue = __webpack_require__(116);
var repeat = __webpack_require__(83);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(2)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $fails = __webpack_require__(2);
var aNumberValue = __webpack_require__(116);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(0);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(0);
var _isFinite = __webpack_require__(1).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', { isInteger: __webpack_require__(117) });


/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(0);
var isInteger = __webpack_require__(117);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(115);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(114);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(0);
var log1p = __webpack_require__(118);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(0);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(0);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(0);
var sign = __webpack_require__(84);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(0);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(0);
var $expm1 = __webpack_require__(85);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { fround: __webpack_require__(578) });


/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(84);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(0);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(0);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(2)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { log1p: __webpack_require__(118) });


/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { sign: __webpack_require__(84) });


/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(85);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(2)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(85);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toAbsoluteIndex = __webpack_require__(34);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(15);
var toLength = __webpack_require__(6);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(41)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(86)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(87)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $at = __webpack_require__(86)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(6);
var context = __webpack_require__(88);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(90)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(0);
var context = __webpack_require__(88);
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(90)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(83)
});


/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(6);
var context = __webpack_require__(88);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(90)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(12)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(12)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(12)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(12)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(12)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(12)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(12)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(12)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(12)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(12)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(12)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(12)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(12)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(0);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(10);
var toPrimitive = __webpack_require__(28);

$export($export.P + $export.F * __webpack_require__(2)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(0);
var toISOString = __webpack_require__(613);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(2);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(11)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(5)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(14)(proto, TO_PRIMITIVE, __webpack_require__(616));


/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(3);
var toPrimitive = __webpack_require__(28);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(0);

$export($export.S, 'Array', { isArray: __webpack_require__(66) });


/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(18);
var $export = __webpack_require__(0);
var toObject = __webpack_require__(10);
var call = __webpack_require__(120);
var isArrayIter = __webpack_require__(91);
var toLength = __webpack_require__(6);
var createProperty = __webpack_require__(92);
var getIterFn = __webpack_require__(93);

$export($export.S + $export.F * !__webpack_require__(67)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var createProperty = __webpack_require__(92);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(2)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(0);
var toIObject = __webpack_require__(15);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(46) != Object || !__webpack_require__(17)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var html = __webpack_require__(79);
var cof = __webpack_require__(24);
var toAbsoluteIndex = __webpack_require__(34);
var toLength = __webpack_require__(6);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(2)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var aFunction = __webpack_require__(19);
var toObject = __webpack_require__(10);
var fails = __webpack_require__(2);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(17)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $forEach = __webpack_require__(23)(0);
var STRICT = __webpack_require__(17)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
var isArray = __webpack_require__(66);
var SPECIES = __webpack_require__(5)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $map = __webpack_require__(23)(1);

$export($export.P + $export.F * !__webpack_require__(17)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $filter = __webpack_require__(23)(2);

$export($export.P + $export.F * !__webpack_require__(17)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $some = __webpack_require__(23)(3);

$export($export.P + $export.F * !__webpack_require__(17)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $every = __webpack_require__(23)(4);

$export($export.P + $export.F * !__webpack_require__(17)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(122);

$export($export.P + $export.F * !__webpack_require__(17)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(122);

$export($export.P + $export.F * !__webpack_require__(17)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $indexOf = __webpack_require__(64)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(17)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(15);
var toInteger = __webpack_require__(20);
var toLength = __webpack_require__(6);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(17)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { copyWithin: __webpack_require__(123) });

__webpack_require__(38)('copyWithin');


/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { fill: __webpack_require__(94) });

__webpack_require__(38)('fill');


/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(23)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(38)(KEY);


/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(23)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(38)(KEY);


/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(43)('Array');


/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1);
var inheritIfRequired = __webpack_require__(82);
var dP = __webpack_require__(9).f;
var gOPN = __webpack_require__(36).f;
var isRegExp = __webpack_require__(89);
var $flags = __webpack_require__(68);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(8) && (!CORRECT_NEW || __webpack_require__(2)(function () {
  re2[__webpack_require__(5)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(11)(global, 'RegExp', $RegExp);
}

__webpack_require__(43)('RegExp');


/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(126);
var anObject = __webpack_require__(3);
var $flags = __webpack_require__(68);
var DESCRIPTORS = __webpack_require__(8);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(11)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(2)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(3);
var toLength = __webpack_require__(6);
var advanceStringIndex = __webpack_require__(97);
var regExpExec = __webpack_require__(69);

// @@match logic
__webpack_require__(70)('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(3);
var toObject = __webpack_require__(10);
var toLength = __webpack_require__(6);
var toInteger = __webpack_require__(20);
var advanceStringIndex = __webpack_require__(97);
var regExpExec = __webpack_require__(69);
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
__webpack_require__(70)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(3);
var sameValue = __webpack_require__(111);
var regExpExec = __webpack_require__(69);

// @@search logic
__webpack_require__(70)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});


/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__(89);
var anObject = __webpack_require__(3);
var speciesConstructor = __webpack_require__(49);
var advanceStringIndex = __webpack_require__(97);
var toLength = __webpack_require__(6);
var callRegExpExec = __webpack_require__(69);
var regexpExec = __webpack_require__(96);
var fails = __webpack_require__(2);
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
__webpack_require__(70)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});


/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1);
var macrotask = __webpack_require__(98).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(24)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 645 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(130);
var validate = __webpack_require__(39);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(73)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(130);
var validate = __webpack_require__(39);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(73)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(1);
var each = __webpack_require__(23)(0);
var redefine = __webpack_require__(11);
var meta = __webpack_require__(29);
var assign = __webpack_require__(110);
var weak = __webpack_require__(131);
var isObject = __webpack_require__(4);
var validate = __webpack_require__(39);
var NATIVE_WEAK_MAP = __webpack_require__(39);
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(73)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(131);
var validate = __webpack_require__(39);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(73)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $typed = __webpack_require__(74);
var buffer = __webpack_require__(99);
var anObject = __webpack_require__(3);
var toAbsoluteIndex = __webpack_require__(34);
var toLength = __webpack_require__(6);
var isObject = __webpack_require__(4);
var ArrayBuffer = __webpack_require__(1).ArrayBuffer;
var speciesConstructor = __webpack_require__(49);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(2)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(43)(ARRAY_BUFFER);


/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
$export($export.G + $export.W + $export.F * !__webpack_require__(74).ABV, {
  DataView: __webpack_require__(99).DataView
});


/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(0);
var aFunction = __webpack_require__(19);
var anObject = __webpack_require__(3);
var rApply = (__webpack_require__(1).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(2)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(0);
var create = __webpack_require__(35);
var aFunction = __webpack_require__(19);
var anObject = __webpack_require__(3);
var isObject = __webpack_require__(4);
var fails = __webpack_require__(2);
var bind = __webpack_require__(112);
var rConstruct = (__webpack_require__(1).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(9);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(3);
var toPrimitive = __webpack_require__(28);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(2)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(0);
var gOPD = __webpack_require__(21).f;
var anObject = __webpack_require__(3);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(3);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(119)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(21);
var getPrototypeOf = __webpack_require__(37);
var has = __webpack_require__(13);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(4);
var anObject = __webpack_require__(3);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(21);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(3);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(0);
var getProto = __webpack_require__(37);
var anObject = __webpack_require__(3);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(3);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(133) });


/***/ }),
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(3);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 673 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(9);
var gOPD = __webpack_require__(21);
var getPrototypeOf = __webpack_require__(37);
var has = __webpack_require__(13);
var $export = __webpack_require__(0);
var createDesc = __webpack_require__(30);
var anObject = __webpack_require__(3);
var isObject = __webpack_require__(4);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 674 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(0);
var setProto = __webpack_require__(80);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(676);
module.exports = __webpack_require__(7).Array.includes;


/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(0);
var $includes = __webpack_require__(64)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(38)('includes');


/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(678);
module.exports = __webpack_require__(7).Array.flatMap;


/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = __webpack_require__(0);
var flattenIntoArray = __webpack_require__(679);
var toObject = __webpack_require__(10);
var toLength = __webpack_require__(6);
var aFunction = __webpack_require__(19);
var arraySpeciesCreate = __webpack_require__(121);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(38)('flatMap');


/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = __webpack_require__(66);
var isObject = __webpack_require__(4);
var toLength = __webpack_require__(6);
var ctx = __webpack_require__(18);
var IS_CONCAT_SPREADABLE = __webpack_require__(5)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;


/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(681);
module.exports = __webpack_require__(7).String.padStart;


/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(134);
var userAgent = __webpack_require__(72);

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(683);
module.exports = __webpack_require__(7).String.padEnd;


/***/ }),
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(134);
var userAgent = __webpack_require__(72);

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(685);
module.exports = __webpack_require__(7).String.trimLeft;


/***/ }),
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(41)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');


/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(687);
module.exports = __webpack_require__(7).String.trimRight;


/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(41)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');


/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(689);
module.exports = __webpack_require__(76).f('asyncIterator');


/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(106)('asyncIterator');


/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(691);
module.exports = __webpack_require__(7).Object.getOwnPropertyDescriptors;


/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(0);
var ownKeys = __webpack_require__(133);
var toIObject = __webpack_require__(15);
var gOPD = __webpack_require__(21);
var createProperty = __webpack_require__(92);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(693);
module.exports = __webpack_require__(7).Object.values;


/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $values = __webpack_require__(135)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(695);
module.exports = __webpack_require__(7).Object.entries;


/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $entries = __webpack_require__(135)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(127);
__webpack_require__(697);
module.exports = __webpack_require__(7).Promise['finally'];


/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(0);
var core = __webpack_require__(7);
var global = __webpack_require__(1);
var speciesConstructor = __webpack_require__(49);
var promiseResolve = __webpack_require__(129);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(699);
__webpack_require__(700);
__webpack_require__(701);
module.exports = __webpack_require__(7);


/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(1);
var $export = __webpack_require__(0);
var userAgent = __webpack_require__(72);
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $task = __webpack_require__(98);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(95);
var getKeys = __webpack_require__(33);
var redefine = __webpack_require__(11);
var global = __webpack_require__(1);
var hide = __webpack_require__(14);
var Iterators = __webpack_require__(42);
var wks = __webpack_require__(5);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }

  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      _defaults(genFun, GeneratorFunctionPrototype);

      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  define(Gp, iteratorSymbol, function () {
    return this;
  });
  define(Gp, "toString", function () {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
( false ? undefined : _typeof(module)) === "object" ? module.exports : {});

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(157)(module)))

/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(704);
module.exports = __webpack_require__(136).global;


/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(705);

$export($export.G, { global: __webpack_require__(100) });


/***/ }),
/* 705 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(100);
var core = __webpack_require__(136);
var ctx = __webpack_require__(706);
var hide = __webpack_require__(708);
var has = __webpack_require__(715);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(707);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 707 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(709);
var createDesc = __webpack_require__(714);
module.exports = __webpack_require__(102) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 709 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(710);
var IE8_DOM_DEFINE = __webpack_require__(711);
var toPrimitive = __webpack_require__(713);
var dP = Object.defineProperty;

exports.f = __webpack_require__(102) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(101);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 711 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(102) && !__webpack_require__(137)(function () {
  return Object.defineProperty(__webpack_require__(712)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(101);
var document = __webpack_require__(100).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(101);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 714 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 715 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 716 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// This file can be required in Browserify and Node.js for automatic polyfill
// To use it:  require('es6-promise/auto');


module.exports = __webpack_require__(717).polyfill();

/***/ }),
/* 717 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */
(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function () {
  'use strict';

  function objectOrFunction(x) {
    var type = _typeof(x);

    return x !== null && (type === 'object' || type === 'function');
  }

  function isFunction(x) {
    return typeof x === 'function';
  }

  var _isArray = void 0;

  if (Array.isArray) {
    _isArray = Array.isArray;
  } else {
    _isArray = function _isArray(x) {
      return Object.prototype.toString.call(x) === '[object Array]';
    };
  }

  var isArray = _isArray;
  var len = 0;
  var vertxNext = void 0;
  var customSchedulerFn = void 0;

  var asap = function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;

    if (len === 2) {
      // If len is 2, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      if (customSchedulerFn) {
        customSchedulerFn(flush);
      } else {
        scheduleFlush();
      }
    }
  };

  function setScheduler(scheduleFn) {
    customSchedulerFn = scheduleFn;
  }

  function setAsap(asapFn) {
    asap = asapFn;
  }

  var browserWindow = typeof window !== 'undefined' ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]'; // test for web worker but not in IE10

  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined'; // node

  function useNextTick() {
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // see https://github.com/cujojs/when/issues/410 for details
    return function () {
      return process.nextTick(flush);
    };
  } // vertx


  function useVertxTimer() {
    if (typeof vertxNext !== 'undefined') {
      return function () {
        vertxNext(flush);
      };
    }

    return useSetTimeout();
  }

  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, {
      characterData: true
    });
    return function () {
      node.data = iterations = ++iterations % 2;
    };
  } // web worker


  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function () {
      return channel.port2.postMessage(0);
    };
  }

  function useSetTimeout() {
    // Store setTimeout reference so es6-promise will be unaffected by
    // other code modifying setTimeout (like sinon.useFakeTimers())
    var globalSetTimeout = setTimeout;
    return function () {
      return globalSetTimeout(flush, 1);
    };
  }

  var queue = new Array(1000);

  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue[i];
      var arg = queue[i + 1];
      callback(arg);
      queue[i] = undefined;
      queue[i + 1] = undefined;
    }

    len = 0;
  }

  function attemptVertx() {
    try {
      var vertx = Function('return this')().require('vertx');

      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }

  var scheduleFlush = void 0; // Decide what async method to use to triggering processing of queued callbacks:

  if (isNode) {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else if (browserWindow === undefined && "function" === 'function') {
    scheduleFlush = attemptVertx();
  } else {
    scheduleFlush = useSetTimeout();
  }

  function then(onFulfillment, onRejection) {
    var parent = this;
    var child = new this.constructor(noop);

    if (child[PROMISE_ID] === undefined) {
      makePromise(child);
    }

    var _state = parent._state;

    if (_state) {
      var callback = arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    } else {
      subscribe(parent, child, onFulfillment, onRejection);
    }

    return child;
  }
  /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
  
    ```javascript
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    let promise = Promise.resolve(1);
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    @method resolve
    @static
    @param {Any} value value that the returned promise will be resolved with
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */


  function resolve$1(object) {
    /*jshint validthis:true */
    var Constructor = this;

    if (object && _typeof(object) === 'object' && object.constructor === Constructor) {
      return object;
    }

    var promise = new Constructor(noop);
    resolve(promise, object);
    return promise;
  }

  var PROMISE_ID = Math.random().toString(36).substring(2);

  function noop() {}

  var PENDING = void 0;
  var FULFILLED = 1;
  var REJECTED = 2;

  function selfFulfillment() {
    return new TypeError("You cannot resolve a promise with itself");
  }

  function cannotReturnOwn() {
    return new TypeError('A promises callback cannot return that same promise.');
  }

  function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
    try {
      then$$1.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }

  function handleForeignThenable(promise, thenable, then$$1) {
    asap(function (promise) {
      var sealed = false;
      var error = tryThen(then$$1, thenable, function (value) {
        if (sealed) {
          return;
        }

        sealed = true;

        if (thenable !== value) {
          resolve(promise, value);
        } else {
          fulfill(promise, value);
        }
      }, function (reason) {
        if (sealed) {
          return;
        }

        sealed = true;
        reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));

      if (!sealed && error) {
        sealed = true;
        reject(promise, error);
      }
    }, promise);
  }

  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (thenable._state === REJECTED) {
      reject(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, function (value) {
        return resolve(promise, value);
      }, function (reason) {
        return reject(promise, reason);
      });
    }
  }

  function handleMaybeThenable(promise, maybeThenable, then$$1) {
    if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
      handleOwnThenable(promise, maybeThenable);
    } else {
      if (then$$1 === undefined) {
        fulfill(promise, maybeThenable);
      } else if (isFunction(then$$1)) {
        handleForeignThenable(promise, maybeThenable, then$$1);
      } else {
        fulfill(promise, maybeThenable);
      }
    }
  }

  function resolve(promise, value) {
    if (promise === value) {
      reject(promise, selfFulfillment());
    } else if (objectOrFunction(value)) {
      var then$$1 = void 0;

      try {
        then$$1 = value.then;
      } catch (error) {
        reject(promise, error);
        return;
      }

      handleMaybeThenable(promise, value, then$$1);
    } else {
      fulfill(promise, value);
    }
  }

  function publishRejection(promise) {
    if (promise._onerror) {
      promise._onerror(promise._result);
    }

    publish(promise);
  }

  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._result = value;
    promise._state = FULFILLED;

    if (promise._subscribers.length !== 0) {
      asap(publish, promise);
    }
  }

  function reject(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._state = REJECTED;
    promise._result = reason;
    asap(publishRejection, promise);
  }

  function subscribe(parent, child, onFulfillment, onRejection) {
    var _subscribers = parent._subscribers;
    var length = _subscribers.length;
    parent._onerror = null;
    _subscribers[length] = child;
    _subscribers[length + FULFILLED] = onFulfillment;
    _subscribers[length + REJECTED] = onRejection;

    if (length === 0 && parent._state) {
      asap(publish, parent);
    }
  }

  function publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;

    if (subscribers.length === 0) {
      return;
    }

    var child = void 0,
        callback = void 0,
        detail = promise._result;

    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];

      if (child) {
        invokeCallback(settled, child, callback, detail);
      } else {
        callback(detail);
      }
    }

    promise._subscribers.length = 0;
  }

  function invokeCallback(settled, promise, callback, detail) {
    var hasCallback = isFunction(callback),
        value = void 0,
        error = void 0,
        succeeded = true;

    if (hasCallback) {
      try {
        value = callback(detail);
      } catch (e) {
        succeeded = false;
        error = e;
      }

      if (promise === value) {
        reject(promise, cannotReturnOwn());
        return;
      }
    } else {
      value = detail;
    }

    if (promise._state !== PENDING) {// noop
    } else if (hasCallback && succeeded) {
      resolve(promise, value);
    } else if (succeeded === false) {
      reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      reject(promise, value);
    }
  }

  function initializePromise(promise, resolver) {
    try {
      resolver(function resolvePromise(value) {
        resolve(promise, value);
      }, function rejectPromise(reason) {
        reject(promise, reason);
      });
    } catch (e) {
      reject(promise, e);
    }
  }

  var id = 0;

  function nextId() {
    return id++;
  }

  function makePromise(promise) {
    promise[PROMISE_ID] = id++;
    promise._state = undefined;
    promise._result = undefined;
    promise._subscribers = [];
  }

  function validationError() {
    return new Error('Array Methods must be provided an Array');
  }

  var Enumerator = function () {
    function Enumerator(Constructor, input) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(noop);

      if (!this.promise[PROMISE_ID]) {
        makePromise(this.promise);
      }

      if (isArray(input)) {
        this.length = input.length;
        this._remaining = input.length;
        this._result = new Array(this.length);

        if (this.length === 0) {
          fulfill(this.promise, this._result);
        } else {
          this.length = this.length || 0;

          this._enumerate(input);

          if (this._remaining === 0) {
            fulfill(this.promise, this._result);
          }
        }
      } else {
        reject(this.promise, validationError());
      }
    }

    Enumerator.prototype._enumerate = function _enumerate(input) {
      for (var i = 0; this._state === PENDING && i < input.length; i++) {
        this._eachEntry(input[i], i);
      }
    };

    Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
      var c = this._instanceConstructor;
      var resolve$$1 = c.resolve;

      if (resolve$$1 === resolve$1) {
        var _then = void 0;

        var error = void 0;
        var didError = false;

        try {
          _then = entry.then;
        } catch (e) {
          didError = true;
          error = e;
        }

        if (_then === then && entry._state !== PENDING) {
          this._settledAt(entry._state, i, entry._result);
        } else if (typeof _then !== 'function') {
          this._remaining--;
          this._result[i] = entry;
        } else if (c === Promise$1) {
          var promise = new c(noop);

          if (didError) {
            reject(promise, error);
          } else {
            handleMaybeThenable(promise, entry, _then);
          }

          this._willSettleAt(promise, i);
        } else {
          this._willSettleAt(new c(function (resolve$$1) {
            return resolve$$1(entry);
          }), i);
        }
      } else {
        this._willSettleAt(resolve$$1(entry), i);
      }
    };

    Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
      var promise = this.promise;

      if (promise._state === PENDING) {
        this._remaining--;

        if (state === REJECTED) {
          reject(promise, value);
        } else {
          this._result[i] = value;
        }
      }

      if (this._remaining === 0) {
        fulfill(promise, this._result);
      }
    };

    Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
      var enumerator = this;
      subscribe(promise, undefined, function (value) {
        return enumerator._settledAt(FULFILLED, i, value);
      }, function (reason) {
        return enumerator._settledAt(REJECTED, i, reason);
      });
    };

    return Enumerator;
  }();
  /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
  
    Example:
  
    ```javascript
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
  
    If any of the `promises` given to `all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
  
    Example:
  
    ```javascript
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  
    @method all
    @static
    @param {Array} entries array of promises
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */


  function all(entries) {
    return new Enumerator(this, entries).promise;
  }
  /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
  
    Example:
  
    ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
  
    `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
  
    ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
  
    An example real-world use case is implementing timeouts:
  
    ```javascript
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  
    @method race
    @static
    @param {Array} promises array of promises to observe
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */


  function race(entries) {
    /*jshint validthis:true */
    var Constructor = this;

    if (!isArray(entries)) {
      return new Constructor(function (_, reject) {
        return reject(new TypeError('You must pass an array to race.'));
      });
    } else {
      return new Constructor(function (resolve, reject) {
        var length = entries.length;

        for (var i = 0; i < length; i++) {
          Constructor.resolve(entries[i]).then(resolve, reject);
        }
      });
    }
  }
  /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
  
    ```javascript
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    let promise = Promise.reject(new Error('WHOOPS'));
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    @method reject
    @static
    @param {Any} reason value that the returned promise will be rejected with.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */


  function reject$1(reason) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop);
    reject(promise, reason);
    return promise;
  }

  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }

  function needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }
  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise's eventual value or the reason
    why the promise cannot be fulfilled.
  
    Terminology
    -----------
  
    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
  
    A promise can be in one of three states: pending, fulfilled, or rejected.
  
    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
  
    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
  
  
    Basic Usage:
    ------------
  
    ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
  
      // on failure
      reject(reason);
    });
  
    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Advanced Usage:
    ---------------
  
    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
  
    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();
  
        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
  
        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
  
    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Unlike callbacks, promises are great composable primitives.
  
    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
  
      return values;
    });
    ```
  
    @class Promise
    @param {Function} resolver
    Useful for tooling.
    @constructor
  */


  var Promise$1 = function () {
    function Promise(resolver) {
      this[PROMISE_ID] = nextId();
      this._result = this._state = undefined;
      this._subscribers = [];

      if (noop !== resolver) {
        typeof resolver !== 'function' && needsResolver();
        this instanceof Promise ? initializePromise(this, resolver) : needsNew();
      }
    }
    /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
     ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
     Chaining
    --------
     The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
     ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
     findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
     ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
     Assimilation
    ------------
     Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
     If the assimliated promise rejects, then the downstream promise will also reject.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
     Simple Example
    --------------
     Synchronous Example
     ```javascript
    let result;
     try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
     Advanced Example
    --------------
     Synchronous Example
     ```javascript
    let author, books;
     try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
     function foundBooks(books) {
     }
     function failure(reason) {
     }
     findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
     @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
    */

    /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
    ```js
    function findAuthor(){
    throw new Error('couldn't find that author');
    }
    // synchronous
    try {
    findAuthor();
    } catch(reason) {
    // something went wrong
    }
    // async with promises
    findAuthor().catch(function(reason){
    // something went wrong
    });
    ```
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
    */


    Promise.prototype.catch = function _catch(onRejection) {
      return this.then(null, onRejection);
    };
    /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuther();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuther();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @return {Promise}
    */


    Promise.prototype.finally = function _finally(callback) {
      var promise = this;
      var constructor = promise.constructor;

      if (isFunction(callback)) {
        return promise.then(function (value) {
          return constructor.resolve(callback()).then(function () {
            return value;
          });
        }, function (reason) {
          return constructor.resolve(callback()).then(function () {
            throw reason;
          });
        });
      }

      return promise.then(callback, callback);
    };

    return Promise;
  }();

  Promise$1.prototype.then = then;
  Promise$1.all = all;
  Promise$1.race = race;
  Promise$1.resolve = resolve$1;
  Promise$1.reject = reject$1;
  Promise$1._setScheduler = setScheduler;
  Promise$1._setAsap = setAsap;
  Promise$1._asap = asap;
  /*global self*/

  function polyfill() {
    var local = void 0;

    if (typeof global !== 'undefined') {
      local = global;
    } else if (typeof self !== 'undefined') {
      local = self;
    } else {
      try {
        local = Function('return this')();
      } catch (e) {
        throw new Error('polyfill failed because global object is unavailable in this environment');
      }
    }

    var P = local.Promise;

    if (P) {
      var promiseToString = null;

      try {
        promiseToString = Object.prototype.toString.call(P.resolve());
      } catch (e) {// silently ignored
      }

      if (promiseToString === '[object Promise]' && !P.cast) {
        return;
      }
    }

    local.Promise = Promise$1;
  } // Strange compat..


  Promise$1.polyfill = polyfill;
  Promise$1.Promise = Promise$1;
  return Promise$1;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(103), __webpack_require__(27)))

/***/ }),
/* 718 */
/***/ (function(module, exports) {

/**
 * guy
 * 控制器
 * Controller层超类
 * @class BI.Controller
 * @extends BI.OB
 * @abstract
 */
BI.Controller = BI.inherit(BI.OB, {});
BI.Controller.EVENT_CHANGE = "__EVENT_CHANGE__";

/***/ }),
/* 719 */
/***/ (function(module, exports) {

/**
 * 广播
 *
 * Created by GUY on 2015/12/23.
 * @class
 */
BI.BroadcastController = BI.inherit(BI.Controller, {
  init: function init() {
    this._broadcasts = {};
  },
  on: function on(name, fn) {
    var self = this;

    if (!this._broadcasts[name]) {
      this._broadcasts[name] = [];
    }

    this._broadcasts[name].push(fn);

    return function () {
      self.remove(name, fn);
    };
  },
  send: function send(name) {
    var args = [].slice.call(arguments, 1);
    BI.each(this._broadcasts[name], function (i, fn) {
      fn.apply(null, args);
    });
  },
  remove: function remove(name, fn) {
    var self = this;

    if (fn) {
      BI.remove(this._broadcasts[name], function (index, cb) {
        return fn === cb;
      });

      if (this._broadcasts[name].length === 0) {
        delete this._broadcasts[name];
      }
    } else {
      delete this._broadcasts[name];
    }

    return this;
  }
});

/***/ }),
/* 720 */
/***/ (function(module, exports) {

/**
 * 气泡图控制器
 * 控制气泡图的显示方向
 *
 * Created by GUY on 2015/8/21.
 * @class
 */
BI.BubblesController = BI.inherit(BI.Controller, {
  init: function init() {
    this.storeBubbles = {};
    this.storePoppers = {};
  },

  /**
   *
   * @param name
   * @param text
   * @param context
   * @param offsetStyle center, left, right三种类型， 默认left
   * @returns {BI.BubblesController}
   */
  show: function show(name, text, context, opt) {
    opt || (opt = {});
    var container = opt.container || context;
    var offsetStyle = opt.offsetStyle || "left";
    var level = opt.level || "error";
    var adjustYOffset = opt.adjustYOffset || 0;
    var adjustXOffset = opt.adjustXOffset || 0; // var fixed = opt.fixed !== false;

    if (!this.storeBubbles[name]) {
      this.storeBubbles[name] = BI.createWidget({
        type: "bi.text",
        cls: "bi-bubble" + " bubble-" + level,
        text: text,
        hgap: 5,
        height: 18
      });
    }

    var bubble = this.storeBubbles[name];

    if (bubble.getText() !== text) {
      bubble.setText(text);
    }

    BI.createWidget({
      type: "bi.default",
      element: container,
      items: [{
        el: bubble
      }]
    });

    if (this.storePoppers[name]) {
      this.storePoppers[name].destroy();
    }

    this.storePoppers[name] = BI.Popper.createPopper(context.element[0], bubble.element[0], {
      placement: {
        left: "top-start",
        center: "top",
        right: "top-end"
      }[offsetStyle],
      strategy: "fixed",
      modifiers: [{
        name: "offset",
        options: {
          offset: [adjustXOffset, adjustYOffset]
        }
      }]
    });
    return this;
  },
  hide: function hide(name) {
    this.remove(name);
    return this;
  },
  has: function has(name) {
    return this.storeBubbles[name] != null;
  },
  remove: function remove(name) {
    if (!this.has(name)) {
      return this;
    }

    this.storeBubbles[name].destroy();
    this.storePoppers[name] && this.storePoppers[name].destroy();
    delete this.storeBubbles[name];
    return this;
  },
  removeAll: function removeAll() {
    BI.each(this.storeBubbles, function (name, bubble) {
      bubble.destroy();
    });
    BI.each(this.storePoppers, function (name, popper) {
      popper.destroy();
    });
    this.storeBubbles = {};
    this.storePoppers = {};
    return this;
  }
});

/***/ }),
/* 721 */
/***/ (function(module, exports) {

/**
 * guy
 * popover弹出层控制器, z-index在100w层级
 * @class BI.popoverController
 * @extends BI.Controller
 */
BI.DrawerController = BI.inherit(BI.Controller, {
  props: function props() {
    return {
      modal: true,
      // 模态窗口
      render: "body"
    };
  },
  init: function init() {
    this.modal = this.options.modal;
    this.floatManager = {};
    this.floatLayer = {};
    this.floatContainer = {};
    this.floatOpened = {};
    this.zindexMap = {};
  },
  create: function create(name, options, context) {
    if (this.has(name)) {
      return this;
    }

    var popover = BI.createWidget(options || {}, {
      type: "bi.drawer"
    }, context);
    this.add(name, popover, options, context);
    return this;
  },
  open: function open(name) {
    var self = this,
        o = this.options;

    if (!this.has(name)) {
      return this;
    }

    if (!this.floatOpened[name]) {
      this.floatOpened[name] = true;
      var container = this.floatContainer[name];

      var zIndex = BI.Popovers._getZIndex();

      container.element.css("zIndex", zIndex);
      this.modal && container.element.__hasZIndexMask__(this.zindexMap[name]) && container.element.__releaseZIndexMask__(this.zindexMap[name]);
      this.zindexMap[name] = zIndex;

      if (this.modal) {
        var mask = container.element.__buildZIndexMask__(BI.Popovers._getZIndex());

        mask.click(function () {
          mask.destroy();
          self.get(name).close();
        });
      }

      this.get(name).setZindex(BI.Popovers._getZIndex());
      this.floatContainer[name].visible();
      var popover = this.get(name);
      popover.show && popover.show();
    }

    return this;
  },
  close: function close(name) {
    if (!this.has(name)) {
      return this;
    }

    if (this.floatOpened[name]) {
      delete this.floatOpened[name];
      this.floatContainer[name].invisible();
      this.modal && this.floatContainer[name].element.__releaseZIndexMask__(this.zindexMap[name]);
    }

    return this;
  },
  show: function show(name) {
    return this.open(name);
  },
  hide: function hide(name) {
    return this.close(name);
  },
  isVisible: function isVisible(name) {
    return this.has(name) && this.floatOpened[name] === true;
  },
  add: function add(name, popover, options, context) {
    var self = this;
    options || (options = {});

    if (this.has(name)) {
      return this;
    }

    this.floatContainer[name] = BI.createWidget({
      type: "bi.absolute",
      cls: "bi-popup-view",
      items: [{
        el: this.floatLayer[name] = BI.createWidget({
          type: "bi.absolute",
          items: [popover]
        }, context),
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
    this.floatManager[name] = popover;

    (function (key) {
      popover.on(BI.Drawer.EVENT_CLOSE, function () {
        self.close(key);
      });
    })(name);

    BI.createWidget({
      type: "bi.absolute",
      element: options.container || this.options.render,
      items: [{
        el: this.floatContainer[name],
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
    return this;
  },
  get: function get(name) {
    return this.floatManager[name];
  },
  has: function has(name) {
    return BI.isNotNull(this.floatManager[name]);
  },
  remove: function remove(name) {
    if (!this.has(name)) {
      return this;
    }

    this.floatContainer[name].destroy();
    this.modal && this.floatContainer[name].element.__releaseZIndexMask__(this.zindexMap[name]);
    delete this.floatManager[name];
    delete this.floatLayer[name];
    delete this.zindexMap[name];
    delete this.floatContainer[name];
    delete this.floatOpened[name];
    return this;
  },
  removeAll: function removeAll() {
    var self = this;
    BI.each(this.floatContainer, function (name, container) {
      container.destroy();
      self.modal && self.floatContainer[name].element.__releaseZIndexMask__(self.zindexMap[name]);
    });
    this.floatManager = {};
    this.floatLayer = {};
    this.floatContainer = {};
    this.floatOpened = {};
    this.zindexMap = {};
    return this;
  }
});

/***/ }),
/* 722 */
/***/ (function(module, exports) {

/**
 * 弹出层面板控制器, z-index在10w层级
 *
 * Created by GUY on 2015/6/24.
 * @class
 */
BI.LayerController = BI.inherit(BI.Controller, {
  props: function props() {
    return {
      render: "body"
    };
  },
  init: function init() {
    this.layerManager = {};
    this.layouts = {};
    this.zindex = BI.zIndex_layer;
  },
  _initResizer: function _initResizer() {
    this.resizer = BI.Resizers.add("layerController" + BI.uniqueId(), BI.bind(this._resize, this));
  },
  _resize: function _resize() {
    BI.each(this.layouts, function (i, layer) {
      if (layer.element.is(":visible")) {
        layer.element.trigger("__resize__");
      }
    });
  },
  make: function make(name, container, op, context) {
    if (BI.isWidget(container)) {
      op = op || {};
      op.container = container;
    } else {
      context = op;
      op = container;
    }

    return this.create(name, null, op, context);
  },
  create: function create(name, from, op, context) {
    BI.isNull(this.resizer) && this._initResizer();

    if (this.has(name)) {
      return this.get(name);
    }

    op || (op = {});
    var offset = op.offset || {};
    var w = from;

    if (BI.isWidget(from)) {
      w = from.element;
    }

    if (BI.isNotEmptyString(w)) {
      w = BI.Widget._renderEngine.createElement(w);
    }

    if (this.has(name)) {
      return this.get(name);
    }

    var widget = BI.createWidget(op.render || {}, BI.extend({
      type: "bi.layout"
    }, op), context);
    var layout = BI.createWidget({
      type: "bi.absolute",
      invisible: true,
      items: [{
        el: widget,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    }, context);
    BI.createWidget({
      type: "bi.absolute",
      element: op.container || this.options.render,
      items: [{
        el: layout,
        left: offset.left || 0,
        right: offset.right || 0,
        top: offset.top || 0,
        bottom: offset.bottom || 0
      }]
    });

    if (w) {
      layout.element.addClass("bi-popup-view");
      layout.element.css({
        left: w.offset().left + (offset.left || 0),
        top: w.offset().top + (offset.top || 0),
        width: offset.width || w.outerWidth() - (offset.left || 0) - (offset.right || 0) || "",
        height: offset.height || w.outerHeight() - (offset.top || 0) - (offset.bottom || 0) || ""
      });
      layout.element.on("__resize__", function () {
        w.is(":visible") && layout.element.css({
          left: w.offset().left + (offset.left || 0),
          top: w.offset().top + (offset.top || 0),
          width: offset.width || w.outerWidth() - (offset.left || 0) - (offset.right || 0) || "",
          height: offset.height || w.outerHeight() - (offset.top || 0) - (offset.bottom || 0) || ""
        });
      });
    }

    this.add(name, widget, layout);
    return widget;
  },
  show: function show(name, callback) {
    if (!this.has(name)) {
      return this;
    }

    this._getLayout(name).visible();

    this._getLayout(name).element.css("z-index", this.zindex++).show(0, callback).trigger("__resize__");

    return this;
  },
  hide: function hide(name, callback) {
    if (!this.has(name)) {
      return this;
    }

    this._getLayout(name).invisible();

    this._getLayout(name).element.hide(0, callback);

    return this;
  },
  isVisible: function isVisible(name) {
    return this.has(name) && this._getLayout(name).isVisible();
  },
  add: function add(name, layer, layout) {
    if (this.has(name)) {
      throw new Error("不能创建同名的Layer");
    }

    layout.setVisible(false);
    this.layerManager[name] = layer;
    this.layouts[name] = layout;
    layout.element.css("z-index", this.zindex++);
    return this;
  },
  _getLayout: function _getLayout(name) {
    return this.layouts[name];
  },
  get: function get(name) {
    return this.layerManager[name];
  },
  has: function has(name) {
    return this.layerManager[name] != null;
  },
  remove: function remove(name) {
    if (!this.has(name)) {
      return this;
    }

    this.layerManager[name].destroy();
    this.layouts[name].destroy();
    delete this.layerManager[name];
    delete this.layouts[name];
    return this;
  },
  removeAll: function removeAll() {
    var self = this;
    BI.each(BI.keys(this.layerManager), function (index, name) {
      self.layerManager[name].destroy();
      self.layouts[name].destroy();
    });
    this.layerManager = {};
    this.layouts = {};
    return this;
  }
});

/***/ }),
/* 723 */
/***/ (function(module, exports) {

/**
 * 遮罩面板, z-index在1亿层级
 *
 * Created by GUY on 2015/6/24.
 * @class
 */
BI.MaskersController = BI.inherit(BI.LayerController, {
  init: function init() {
    BI.MaskersController.superclass.init.apply(this, arguments);
    this.zindex = BI.zIndex_masker;
  }
});

/***/ }),
/* 724 */
/***/ (function(module, exports) {

/**
 * guy
 * popover弹出层控制器, z-index在100w层级
 * @class BI.popoverController
 * @extends BI.Controller
 */
BI.PopoverController = BI.inherit(BI.Controller, {
  props: function props() {
    return {
      modal: true,
      // 模态窗口
      render: "body"
    };
  },
  init: function init() {
    this.modal = this.options.modal;
    this.floatManager = {};
    this.floatLayer = {};
    this.floatContainer = {};
    this.floatOpened = {};
    this.zindex = BI.zIndex_popover;
    this.zindexMap = {};
  },
  create: function create(name, options, context) {
    if (this.has(name)) {
      return this;
    }

    var popover = BI.createWidget(options || {}, {
      type: "bi.popover"
    }, context);
    this.add(name, popover, options, context);
    return this;
  },
  open: function open(name) {
    if (!this.has(name)) {
      return this;
    }

    if (!this.floatOpened[name]) {
      this.floatOpened[name] = true;
      var container = this.floatContainer[name];
      container.element.css("zIndex", this.zindex++);
      this.modal && container.element.__hasZIndexMask__(this.zindexMap[name]) && container.element.__releaseZIndexMask__(this.zindexMap[name]);
      this.zindexMap[name] = this.zindex;
      this.modal && container.element.__buildZIndexMask__(this.zindex++);
      this.get(name).setZindex(this.zindex++);
      this.floatContainer[name].visible();
      var popover = this.get(name);
      popover.show && popover.show();

      var W = BI.Widget._renderEngine.createElement(this.options.render).width(),
          H = BI.Widget._renderEngine.createElement(this.options.render).height();

      var w = popover.element.width(),
          h = popover.element.height();
      var left = (W - w) / 2,
          top = (H - h) / 2;

      if (left < 0) {
        left = 0;
      }

      if (top < 0) {
        top = 0;
      }

      popover.element.css({
        // 这里直接用px就可以
        left: left + "px",
        top: top + "px"
      });
    }

    return this;
  },
  close: function close(name) {
    if (!this.has(name)) {
      return this;
    }

    if (this.floatOpened[name]) {
      delete this.floatOpened[name];
      this.floatContainer[name].invisible();
      this.modal && this.floatContainer[name].element.__releaseZIndexMask__(this.zindexMap[name]);
    }

    return this;
  },
  show: function show(name) {
    return this.open(name);
  },
  hide: function hide(name) {
    return this.close(name);
  },
  isVisible: function isVisible(name) {
    return this.has(name) && this.floatOpened[name] === true;
  },
  add: function add(name, popover, options, context) {
    var self = this;
    options || (options = {});

    if (this.has(name)) {
      return this;
    }

    this.floatContainer[name] = BI.createWidget({
      type: "bi.absolute",
      cls: "bi-popup-view",
      items: [{
        el: this.floatLayer[name] = BI.createWidget({
          type: "bi.absolute",
          items: [popover]
        }, context),
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
    this.floatManager[name] = popover;

    (function (key) {
      popover.on(BI.Popover.EVENT_CLOSE, function () {
        self.close(key);
      });
    })(name);

    BI.createWidget({
      type: "bi.absolute",
      element: options.container || this.options.render,
      items: [{
        el: this.floatContainer[name],
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
    return this;
  },
  get: function get(name) {
    return this.floatManager[name];
  },
  has: function has(name) {
    return BI.isNotNull(this.floatManager[name]);
  },
  remove: function remove(name) {
    if (!this.has(name)) {
      return this;
    }

    this.floatContainer[name].destroy();
    this.modal && this.floatContainer[name].element.__releaseZIndexMask__(this.zindexMap[name]);
    delete this.floatManager[name];
    delete this.floatLayer[name];
    delete this.zindexMap[name];
    delete this.floatContainer[name];
    delete this.floatOpened[name];
    return this;
  },
  removeAll: function removeAll() {
    var self = this;
    BI.each(this.floatContainer, function (name, container) {
      container.destroy();
      self.modal && self.floatContainer[name].element.__releaseZIndexMask__(self.zindexMap[name]);
    });
    this.floatManager = {};
    this.floatLayer = {};
    this.floatContainer = {};
    this.floatOpened = {};
    this.zindexMap = {};
    return this;
  },
  _getZIndex: function _getZIndex() {
    return this.zindex++;
  }
});

/***/ }),
/* 725 */
/***/ (function(module, exports) {

/**
 * window.resize 控制器
 *
 * Created by GUY on 2015/6/24.
 * @class
 */
BI.ResizeController = BI.inherit(BI.Controller, {
  init: function init() {
    this.resizerManger = {};
  },
  _initResizeListener: function _initResizeListener() {
    var self = this;
    this.resizeHandler = BI.debounce(function (ev) {
      self._resize(ev);
    }, 30);

    if ("onorientationchange" in _global) {
      _global.onorientationchange = this.resizeHandler;
    } else {
      BI.Widget._renderEngine.createElement(_global).resize(this.resizeHandler);
    }
  },
  _resize: function _resize(ev) {
    BI.each(this.resizerManger, function (key, resizer) {
      if (resizer instanceof BI.$) {
        if (resizer.is(":visible")) {
          resizer.trigger("__resize__");
        }

        return;
      }

      if (resizer instanceof BI.Layout) {
        resizer.resize();
        return;
      }

      if (BI.isFunction(resizer)) {
        resizer(ev);
      }
    });
  },
  add: function add(name, resizer) {
    var self = this;
    BI.isNull(this.resizeHandler) && this._initResizeListener();

    if (this.has(name)) {
      return this;
    }

    this.resizerManger[name] = resizer;
    return function () {
      self.remove(name);
    };
  },
  get: function get(name) {
    return this.resizerManger[name];
  },
  has: function has(name) {
    return this.resizerManger[name] != null;
  },
  remove: function remove(name) {
    if (!this.has(name)) {
      return this;
    }

    delete this.resizerManger[name];
    return this;
  }
});

/***/ }),
/* 726 */
/***/ (function(module, exports) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * tooltip控制器
 * 控制tooltip的显示,  且页面中只有一个tooltip显示
 *
 * Created by GUY on 2015/9/8.
 * @class BI.TooltipsController
 * @extends BI.Controller
 */
BI.TooltipsController = BI.inherit(BI.Controller, {
  init: function init() {
    this.tooltipsManager = {};
    this.showingTips = {}; // 存储正在显示的tooltip
  },

  /**
   *
   * @param opt
   * @param opt.text {String} 文本
   * @param opt.level {String} 级别, success或warning
   * @param opt.textAlign {String} 文本对齐方式, left, center, right
   * @returns {*}
   * @private
   */
  _createTooltip: function _createTooltip(opt) {
    return BI.createWidget(_objectSpread(_objectSpread({
      type: "bi.tooltip"
    }, opt), {}, {
      stopEvent: true
    }));
  },
  // opt: {container: '', belowMouse: false}
  show: function show(e, name, tooltipOpt, context, opt) {
    opt || (opt = {});
    var self = this;
    BI.each(this.showingTips, function (i, tip) {
      self.hide(i);
    });
    this.showingTips = {};

    if (!this.has(name)) {
      this.create(name, tooltipOpt, document.fullscreenElement ? context : opt.container || "body");
    }

    if (!opt.belowMouse) {
      var offset = context.element.offset();
      var bounds = context.element.bounds();

      if (bounds.height === 0 || bounds.width === 0) {
        return;
      }

      var top = offset.top + bounds.height + 5;
    }

    var tooltip = this.get(name);
    tooltip.element.css({
      left: "0px",
      top: "0px"
    });
    tooltip.visible();
    tooltip.element.height(tooltip.element[0].scrollHeight);
    this.showingTips[name] = true; // scale影响要计算在内
    // var scale = context.element.offset().left / context.element.get(0).getBoundingClientRect().left;
    // var x = (e.pageX || e.clientX) * scale + 15, y = (e.pageY || e.clientY) * scale + 15;

    var x = (e.pageX || e.clientX) + 15,
        y = (e.pageY || e.clientY) + 15;

    if (x + tooltip.element.outerWidth() > BI.Widget._renderEngine.createElement("body").outerWidth()) {
      x -= tooltip.element.outerWidth() + 15;
    }

    var bodyHeight = BI.Widget._renderEngine.createElement("body").outerHeight();

    if (y + tooltip.element.outerHeight() > bodyHeight || top + tooltip.element.outerHeight() > bodyHeight) {
      y -= tooltip.element.outerHeight() + 15;
      !opt.belowMouse && (y = Math.min(y, offset.top - tooltip.element.outerHeight() - 5));
    } else {
      !opt.belowMouse && (y = Math.max(y, top));
    }

    tooltip.element.css({
      // 这里直接用px就可以
      left: x < 0 ? 0 : x + "px",
      top: y < 0 ? 0 : y + "px"
    });
    tooltip.element.hover(function () {
      self.remove(name);
      context.element.trigger("mouseleave.title" + context.getName());
    });
    return this;
  },
  hide: function hide(name, callback) {
    if (!this.has(name)) {
      return this;
    }

    delete this.showingTips[name];
    this.get(name).element.hide(0, callback);
    this.get(name).invisible();
    return this;
  },
  create: function create(name, tooltipOpt, context) {
    if (!this.has(name)) {
      var tooltip = this._createTooltip(tooltipOpt);

      this.add(name, tooltip);
      BI.createWidget({
        type: "bi.absolute",
        element: context || "body",
        items: [{
          el: tooltip
        }]
      });
      tooltip.invisible();
    }

    return this.get(name);
  },
  add: function add(name, bubble) {
    if (this.has(name)) {
      return this;
    }

    this.set(name, bubble);
    return this;
  },
  get: function get(name) {
    return this.tooltipsManager[name];
  },
  set: function set(name, bubble) {
    this.tooltipsManager[name] = bubble;
  },
  has: function has(name) {
    return this.tooltipsManager[name] != null;
  },
  remove: function remove(name) {
    if (!this.has(name)) {
      return this;
    }

    this.tooltipsManager[name].destroy();
    delete this.tooltipsManager[name];
    return this;
  },
  removeAll: function removeAll() {
    BI.each(this.tooltipsManager, function (name, tooltip) {
      tooltip.destroy();
    });
    this.tooltipsManager = {};
    this.showingTips = {};
    return this;
  }
});

/***/ }),
/* 727 */
/***/ (function(module, exports) {

/**
 * @popperjs/core v2.9.2 - MIT License
 */
(function (global, factory) {
  factory(BI.Popper = {});
})(this, function (exports) {
  'use strict';

  function getBoundingClientRect(element) {
    var rect = element.getBoundingClientRect();
    return {
      width: rect.width,
      height: rect.height,
      top: rect.top,
      right: rect.right,
      bottom: rect.bottom,
      left: rect.left,
      x: rect.left,
      y: rect.top
    };
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  } // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement);
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  } // means it doesn't take into account transforms.


  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }
  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */


  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];

  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      Object.keys(modifier).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }

            break;

          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }

          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }

            break;

          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'effect':
            if (typeof modifier.effect !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'requires':
            if (!Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }

            break;

          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }

            break;

          case 'options':
          case 'data':
            break;

          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }

        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
      // errors due to floating point numbers, so we need to check precision.
      // Safari returns a number <= 0, usually < -1 when pinch-zoomed
      // Feature detection fails in mobile emulation mode in Chrome.
      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
      // 0.001
      // Fallback here: "Not Safari" userAgent

      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round; // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


    return false;
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var referenceElement = state.elements.reference;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(referenceElement);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(options) {
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }

            var _getComputedStyle = getComputedStyle(popper),
                marginTop = _getComputedStyle.marginTop,
                marginRight = _getComputedStyle.marginRight,
                marginBottom = _getComputedStyle.marginBottom,
                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer


            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var passive = {
    passive: true
  };

  function effect$2(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect$2,
    data: {}
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name; // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step

    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };
  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(round(x * dpr) / dpr) || 0,
      y: round(round(y * dpr) / dpr) || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets;

    var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
        _ref3$x = _ref3.x,
        x = _ref3$x === void 0 ? 0 : _ref3$x,
        _ref3$y = _ref3.y,
        y = _ref3$y === void 0 ? 0 : _ref3$y;

    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle(offsetParent).position !== 'static') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top) {
        sideY = bottom; // $FlowFixMe[prop-missing]

        y -= offsetParent[heightProp] - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left) {
        sideX = right; // $FlowFixMe[prop-missing]

        x -= offsetParent[widthProp] - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref4) {
    var state = _ref4.state,
        options = _ref4.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    {
      var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  }; // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$1(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$1,
    requires: ['computeStyles']
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };
  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };

  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };

  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
      {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis || checkAltAxis) {
      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = popperOffsets[mainAxis] + overflow[mainSide];
      var max$1 = popperOffsets[mainAxis] - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
      var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

      if (checkMainAxis) {
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _mainSide = mainAxis === 'x' ? top : left;

        var _altSide = mainAxis === 'x' ? bottom : right;

        var _offset = popperOffsets[altAxis];

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }
      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };
  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
  var createPopper$1 = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers$1
  }); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  exports.applyStyles = applyStyles$1;
  exports.arrow = arrow$1;
  exports.computeStyles = computeStyles$1;
  exports.createPopper = createPopper;
  exports.createPopperLite = createPopper$1;
  exports.defaultModifiers = defaultModifiers;
  exports.detectOverflow = detectOverflow;
  exports.eventListeners = eventListeners;
  exports.flip = flip$1;
  exports.hide = hide$1;
  exports.offset = offset$1;
  exports.popperGenerator = popperGenerator;
  exports.popperOffsets = popperOffsets$1;
  exports.preventOverflow = preventOverflow$1;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

/***/ }),
/* 728 */
/***/ (function(module, exports) {

BI.Resizers = new BI.ResizeController();
BI.Layers = new BI.LayerController();
BI.Maskers = new BI.MaskersController();
BI.Bubbles = new BI.BubblesController();
BI.Tooltips = new BI.TooltipsController();
BI.Popovers = new BI.PopoverController();
BI.Drawers = new BI.DrawerController();
BI.Broadcasts = new BI.BroadcastController();
BI.StyleLoaders = new BI.StyleLoaderManager();

/***/ }),
/* 729 */
/***/ (function(module, exports) {

/**
 * CollectionView
 *
 * Created by GUY on 2016/1/15.
 * @class BI.CollectionView
 * @extends BI.Widget
 */
BI.CollectionView = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.CollectionView.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-collection",
      // width: 400, //必设
      // height: 300, //必设
      scrollable: true,
      scrollx: false,
      scrolly: false,
      overflowX: true,
      overflowY: true,
      el: {
        type: "bi.vertical"
      },
      cellSizeAndPositionGetter: BI.emptyFn,
      horizontalOverscanSize: 0,
      verticalOverscanSize: 0,
      scrollLeft: 0,
      scrollTop: 0,
      items: [],
      itemFormatter: function itemFormatter(item, index) {
        return item;
      }
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.renderedCells = [];
    this.renderedKeys = [];
    this.renderRange = {};
    this._scrollLock = false;
    this._debounceRelease = BI.debounce(function () {
      self._scrollLock = false;
    }, 1000 / 60);
    this.container = BI._lazyCreateWidget({
      type: "bi.absolute"
    });
    this.element.scroll(function () {
      if (self._scrollLock === true) {
        return;
      }

      o.scrollLeft = self.element.scrollLeft();
      o.scrollTop = self.element.scrollTop();

      self._calculateChildrenToRender();

      self.fireEvent(BI.CollectionView.EVENT_SCROLL, {
        scrollLeft: o.scrollLeft,
        scrollTop: o.scrollTop
      });
    }); // 兼容一下

    var scrollable = o.scrollable,
        scrollx = o.scrollx,
        scrolly = o.scrolly;

    if (o.overflowX === false) {
      if (o.overflowY === false) {
        scrollable = false;
      } else {
        scrollable = "y";
      }
    } else {
      if (o.overflowY === false) {
        scrollable = "x";
      }
    }

    BI._lazyCreateWidget(o.el, {
      type: "bi.vertical",
      element: this,
      scrollable: scrollable,
      scrolly: scrolly,
      scrollx: scrollx,
      items: [this.container]
    });

    o.items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;

    if (o.items.length > 0) {
      this._calculateSizeAndPositionData();

      this._populate();
    }
  },
  // mounted之后绑定事件
  mounted: function mounted() {
    var o = this.options;

    if (o.scrollLeft !== 0 || o.scrollTop !== 0) {
      this.element.scrollTop(o.scrollTop);
      this.element.scrollLeft(o.scrollLeft);
    }
  },
  _calculateSizeAndPositionData: function _calculateSizeAndPositionData() {
    var o = this.options;
    var cellMetadata = [];
    var sectionManager = new BI.SectionManager();
    var height = 0;
    var width = 0;

    for (var index = 0, len = o.items.length; index < len; index++) {
      var cellMetadatum = o.cellSizeAndPositionGetter(index);

      if (BI.isNull(cellMetadatum.height) || isNaN(cellMetadatum.height) || BI.isNull(cellMetadatum.width) || isNaN(cellMetadatum.width) || BI.isNull(cellMetadatum.x) || isNaN(cellMetadatum.x) || BI.isNull(cellMetadatum.y) || isNaN(cellMetadatum.y)) {
        throw Error();
      }

      height = Math.max(height, cellMetadatum.y + cellMetadatum.height);
      width = Math.max(width, cellMetadatum.x + cellMetadatum.width);
      cellMetadatum.index = index;
      cellMetadata[index] = cellMetadatum;
      sectionManager.registerCell(cellMetadatum, index);
    }

    this._cellMetadata = cellMetadata;
    this._sectionManager = sectionManager;
    this._height = height;
    this._width = width;
  },
  _cellRenderers: function _cellRenderers(height, width, x, y) {
    this._lastRenderedCellIndices = this._sectionManager.getCellIndices(height, width, x, y);
    return this._cellGroupRenderer();
  },
  _cellGroupRenderer: function _cellGroupRenderer() {
    var self = this;
    var rendered = [];
    BI.each(this._lastRenderedCellIndices, function (i, index) {
      var cellMetadata = self._sectionManager.getCellMetadata(index);

      rendered.push(cellMetadata);
    });
    return rendered;
  },
  _calculateChildrenToRender: function _calculateChildrenToRender() {
    var self = this,
        o = this.options;
    var scrollLeft = BI.clamp(o.scrollLeft, 0, this._getMaxScrollLeft());
    var scrollTop = BI.clamp(o.scrollTop, 0, this._getMaxScrollTop());
    var left = Math.max(0, scrollLeft - o.horizontalOverscanSize);
    var top = Math.max(0, scrollTop - o.verticalOverscanSize);
    var right = Math.min(this._width, scrollLeft + o.width + o.horizontalOverscanSize);
    var bottom = Math.min(this._height, scrollTop + o.height + o.verticalOverscanSize);

    if (right > 0 && bottom > 0) {
      var assertMinBorder = function assertMinBorder(border, offset) {
        if (BI.isNull(border[offset])) {
          border[offset] = Number.MAX_VALUE;
        }
      };

      var assertMaxBorder = function assertMaxBorder(border, offset) {
        if (BI.isNull(border[offset])) {
          border[offset] = 0;
        }
      };

      // 如果滚动的区间并没有超出渲染的范围
      if (top >= this.renderRange.minY && bottom <= this.renderRange.maxY && left >= this.renderRange.minX && right <= this.renderRange.maxX) {
        return;
      }

      var childrenToDisplay = this._cellRenderers(bottom - top, right - left, left, top);

      var renderedCells = [],
          renderedKeys = {},
          renderedWidgets = {}; // 存储所有的left和top

      var lefts = {},
          tops = {};

      for (var i = 0, len = childrenToDisplay.length; i < len; i++) {
        var datum = childrenToDisplay[i];
        lefts[datum.x] = datum.x;
        lefts[datum.x + datum.width] = datum.x + datum.width;
        tops[datum.y] = datum.y;
        tops[datum.y + datum.height] = datum.y + datum.height;
      }

      lefts = BI.toArray(lefts);
      tops = BI.toArray(tops);
      var leftMap = BI.invert(lefts);
      var topMap = BI.invert(tops); // 存储上下左右四个边界

      var leftBorder = {},
          rightBorder = {},
          topBorder = {},
          bottomBorder = {};

      for (var i = 0, len = childrenToDisplay.length; i < len; i++) {
        var datum = childrenToDisplay[i];
        var index = this.renderedKeys[datum.index] && this.renderedKeys[datum.index][1];
        var child;

        if (index >= 0) {
          this.renderedCells[index].el.setWidth(datum.width);
          this.renderedCells[index].el.setHeight(datum.height); // 这里只使用px

          this.renderedCells[index].el.element.css("left", datum.x + "px");
          this.renderedCells[index].el.element.css("top", datum.y + "px");
          renderedCells.push(child = this.renderedCells[index]);
        } else {
          var item = o.itemFormatter(o.items[datum.index], datum.index);
          child = BI._lazyCreateWidget(BI.extend({
            type: "bi.label",
            width: datum.width,
            height: datum.height
          }, item, {
            cls: (item.cls || "") + " collection-cell" + (datum.y === 0 ? " first-row" : "") + (datum.x === 0 ? " first-col" : ""),
            _left: datum.x,
            _top: datum.y
          }));
          renderedCells.push({
            el: child,
            left: datum.x + "px",
            top: datum.y + "px",
            _left: datum.x,
            _top: datum.y // _width: datum.width,
            // _height: datum.height

          });
        }

        var startTopIndex = topMap[datum.y] | 0;
        var endTopIndex = topMap[datum.y + datum.height] | 0;

        for (var k = startTopIndex; k <= endTopIndex; k++) {
          var t = tops[k];
          assertMinBorder(leftBorder, t);
          assertMaxBorder(rightBorder, t);
          leftBorder[t] = Math.min(leftBorder[t], datum.x);
          rightBorder[t] = Math.max(rightBorder[t], datum.x + datum.width);
        }

        var startLeftIndex = leftMap[datum.x] | 0;
        var endLeftIndex = leftMap[datum.x + datum.width] | 0;

        for (var k = startLeftIndex; k <= endLeftIndex; k++) {
          var l = lefts[k];
          assertMinBorder(topBorder, l);
          assertMaxBorder(bottomBorder, l);
          topBorder[l] = Math.min(topBorder[l], datum.y);
          bottomBorder[l] = Math.max(bottomBorder[l], datum.y + datum.height);
        }

        renderedKeys[datum.index] = [datum.index, i];
        renderedWidgets[i] = child;
      } // 已存在的， 需要添加的和需要删除的


      var existSet = {},
          addSet = {},
          deleteArray = [];
      BI.each(renderedKeys, function (i, key) {
        if (self.renderedKeys[i]) {
          existSet[i] = key;
        } else {
          addSet[i] = key;
        }
      });
      BI.each(this.renderedKeys, function (i, key) {
        if (existSet[i]) {
          return;
        }

        if (addSet[i]) {
          return;
        }

        deleteArray.push(key[1]);
      });
      BI.each(deleteArray, function (i, index) {
        // 性能优化，不调用destroy方法防止触发destroy事件
        self.renderedCells[index].el._destroy();
      });
      var addedItems = [];
      BI.each(addSet, function (index, key) {
        addedItems.push(renderedCells[key[1]]);
      });
      this.container.addItems(addedItems); // 拦截父子级关系

      this.container._children = renderedWidgets;
      this.container.attr("items", renderedCells);
      this.renderedCells = renderedCells;
      this.renderedKeys = renderedKeys; // Todo 左右比较特殊

      var minX = BI.min(leftBorder);
      var maxX = BI.max(rightBorder);
      var minY = BI.max(topBorder);
      var maxY = BI.min(bottomBorder);
      this.renderRange = {
        minX: minX,
        minY: minY,
        maxX: maxX,
        maxY: maxY
      };
    }
  },
  _isOverflowX: function _isOverflowX() {
    var o = this.options; // 兼容一下

    var scrollable = o.scrollable,
        scrollx = o.scrollx;

    if (o.overflowX === false) {
      return false;
    }

    if (scrollx) {
      return true;
    }

    if (scrollable === true || scrollable === "xy" || scrollable === "x") {
      return true;
    }

    return false;
  },
  _isOverflowY: function _isOverflowY() {
    var o = this.options; // 兼容一下

    var scrollable = o.scrollable,
        scrolly = o.scrolly;

    if (o.overflowX === false) {
      return false;
    }

    if (scrolly) {
      return true;
    }

    if (scrollable === true || scrollable === "xy" || scrollable === "y") {
      return true;
    }

    return false;
  },
  _getMaxScrollLeft: function _getMaxScrollLeft() {
    return Math.max(0, this._width - this.options.width + (this._isOverflowX() ? BI.DOM.getScrollWidth() : 0));
  },
  _getMaxScrollTop: function _getMaxScrollTop() {
    return Math.max(0, this._height - this.options.height + (this._isOverflowY() ? BI.DOM.getScrollWidth() : 0));
  },
  _populate: function _populate(items) {
    var o = this.options;

    this._reRange();

    if (items && items !== this.options.items) {
      this.options.items = items;

      this._calculateSizeAndPositionData();
    }

    this.container.setWidth(this._width);
    this.container.setHeight(this._height);

    this._debounceRelease(); // 元素未挂载时不能设置scrollTop


    try {
      this.element.scrollTop(o.scrollTop);
      this.element.scrollLeft(o.scrollLeft);
    } catch (e) {}

    this._calculateChildrenToRender();
  },
  setScrollLeft: function setScrollLeft(scrollLeft) {
    if (this.options.scrollLeft === scrollLeft) {
      return;
    }

    this._scrollLock = true;
    this.options.scrollLeft = BI.clamp(scrollLeft || 0, 0, this._getMaxScrollLeft());

    this._debounceRelease();

    this.element.scrollLeft(this.options.scrollLeft);

    this._calculateChildrenToRender();
  },
  setScrollTop: function setScrollTop(scrollTop) {
    if (this.options.scrollTop === scrollTop) {
      return;
    }

    this._scrollLock = true;
    this.options.scrollTop = BI.clamp(scrollTop || 0, 0, this._getMaxScrollTop());

    this._debounceRelease();

    this.element.scrollTop(this.options.scrollTop);

    this._calculateChildrenToRender();
  },
  setOverflowX: function setOverflowX(b) {
    var self = this;

    if (this.options.overflowX !== !!b) {
      this.options.overflowX = !!b;
      BI.nextTick(function () {
        self.element.css({
          overflowX: b ? "auto" : "hidden"
        });
      });
    }
  },
  setOverflowY: function setOverflowY(b) {
    var self = this;

    if (this.options.overflowY !== !!b) {
      this.options.overflowY = !!b;
      BI.nextTick(function () {
        self.element.css({
          overflowY: b ? "auto" : "hidden"
        });
      });
    }
  },
  getScrollLeft: function getScrollLeft() {
    return this.options.scrollLeft;
  },
  getScrollTop: function getScrollTop() {
    return this.options.scrollTop;
  },
  getMaxScrollLeft: function getMaxScrollLeft() {
    return this._getMaxScrollLeft();
  },
  getMaxScrollTop: function getMaxScrollTop() {
    return this._getMaxScrollTop();
  },
  // 重新计算children
  _reRange: function _reRange() {
    this.renderRange = {};
  },
  _clearChildren: function _clearChildren() {
    this.container._children = {};
    this.container.attr("items", []);
  },
  restore: function restore() {
    BI.each(this.renderedCells, function (i, cell) {
      cell.el._destroy();
    });

    this._clearChildren();

    this.renderedCells = [];
    this.renderedKeys = [];
    this.renderRange = {};
    this._scrollLock = false;
  },
  populate: function populate(items) {
    if (items && items !== this.options.items) {
      this.restore();
    }

    this._populate(items);
  }
});
BI.CollectionView.EVENT_SCROLL = "EVENT_SCROLL";
BI.shortcut("bi.collection_view", BI.CollectionView);

/***/ }),
/* 730 */
/***/ (function(module, exports) {

!function () {
  /**
   * @class BI.Bubble
   * @extends BI.Widget
   */
  BI.Bubble = BI.inherit(BI.Widget, {
    _defaultConfig: function _defaultConfig() {
      var conf = BI.Bubble.superclass._defaultConfig.apply(this, arguments);

      return BI.extend(conf, {
        baseCls: (conf.baseCls || "") + " bi-popper",
        attributes: {
          tabIndex: -1
        },
        trigger: "click",
        // click || hover || click-hover || "hover-click" || ""
        toggle: true,
        direction: "",
        placement: "bottom-start",
        // top-start/top/top-end/bottom-start/bottom/bottom-end/left-start/left/left-end/right-start/right/right-end
        logic: {
          dynamic: true
        },
        container: null,
        // popupview放置的容器，默认为this.element
        isDefaultInit: false,
        destroyWhenHide: false,
        hideWhenClickOutside: true,
        showArrow: true,
        hideWhenBlur: false,
        isNeedAdjustHeight: true,
        // 是否需要高度调整
        isNeedAdjustWidth: true,
        stopEvent: false,
        stopPropagation: false,
        adjustLength: 0,
        // 调整的距离
        adjustXOffset: 0,
        adjustYOffset: 0,
        hideChecker: BI.emptyFn,
        offsetStyle: "left",
        // left,right,center
        el: {},
        popup: {},
        comboClass: "bi-combo-popup",
        hoverClass: "bi-combo-hover"
      });
    },
    render: function render() {
      var _this = this;

      var self = this,
          o = this.options;

      this._initCombo(); // 延迟绑定事件，这样可以将自己绑定的事情优先执行


      BI.nextTick(function () {
        !_this.isDestroyed() && _this._initPullDownAction();
      });
      this.combo.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
        if (self.isEnabled() && self.isValid()) {
          if (type === BI.Events.EXPAND) {
            self._popupView();
          }

          if (type === BI.Events.COLLAPSE) {
            self._hideView();
          }

          if (type === BI.Events.EXPAND) {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
            self.fireEvent(BI.Bubble.EVENT_EXPAND);
          }

          if (type === BI.Events.COLLAPSE) {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
            self.isViewVisible() && self.fireEvent(BI.Bubble.EVENT_COLLAPSE);
          }

          if (type === BI.Events.CLICK) {
            self.fireEvent(BI.Bubble.EVENT_TRIGGER_CHANGE, obj);
          }
        }
      });
      self.element.on("mouseenter." + self.getName(), function (e) {
        if (self.isEnabled() && self.isValid() && self.combo.isEnabled() && self.combo.isValid()) {
          self.element.addClass(o.hoverClass);
        }
      });
      self.element.on("mouseleave." + self.getName(), function (e) {
        if (self.isEnabled() && self.isValid() && self.combo.isEnabled() && self.combo.isValid()) {
          self.element.removeClass(o.hoverClass);
        }
      });
      BI.createWidget(BI.extend({
        element: this,
        scrolly: false
      }, BI.LogicFactory.createLogic("vertical", BI.extend(o.logic, {
        items: [{
          el: this.combo
        }]
      }))));
      o.isDefaultInit && this._assertPopupView();
    },
    _toggle: function _toggle(e) {
      this._assertPopupViewRender();

      if (this.popupView.isVisible()) {
        this._hideView(e);
      } else {
        if (this.isEnabled()) {
          this._popupView(e);
        }
      }
    },
    _initPullDownAction: function _initPullDownAction() {
      var self = this,
          o = this.options;
      var evs = (this.options.trigger || "").split(",");

      function st(e) {
        if (o.stopEvent) {
          e.stopEvent();
        }

        if (o.stopPropagation) {
          e.stopPropagation();
        }
      }

      var enterPopup = false;

      function hide(e) {
        if (self.isEnabled() && self.isValid() && self.combo.isEnabled() && self.combo.isValid() && o.toggle === true) {
          self._hideView(e);

          self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.COLLAPSE, "", self.combo);
          self.fireEvent(BI.Bubble.EVENT_COLLAPSE);
        }

        self.popupView && self.popupView.element.off("mouseenter." + self.getName()).off("mouseleave." + self.getName());
        enterPopup = false;
      }

      BI.each(evs, function (i, ev) {
        switch (ev) {
          case "hover":
            self.element.on("mouseenter." + self.getName(), function (e) {
              if (self.isEnabled() && self.isValid() && self.combo.isEnabled() && self.combo.isValid()) {
                self._popupView(e);

                self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EXPAND, "", self.combo);
                self.fireEvent(BI.Bubble.EVENT_EXPAND);
              }
            });
            self.element.on("mouseleave." + self.getName(), function (e) {
              if (self.popupView) {
                self.popupView.element.on("mouseenter." + self.getName(), function (e) {
                  enterPopup = true;
                  self.popupView.element.on("mouseleave." + self.getName(), function (e) {
                    hide(e);
                  });
                  self.popupView.element.off("mouseenter." + self.getName());
                });
                BI.defer(function () {
                  if (!enterPopup) {
                    hide(e);
                  }
                }, 50);
              }
            });
            break;

          case "click":
            var debounce = BI.debounce(function (e) {
              if (self.combo.element.__isMouseInBounds__(e)) {
                if (self.isEnabled() && self.isValid() && self.combo.isEnabled() && self.combo.isValid()) {
                  // if (!o.toggle && self.isViewVisible()) {
                  //     return;
                  // }
                  o.toggle ? self._toggle(e) : self._popupView(e);

                  if (self.isViewVisible()) {
                    self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EXPAND, "", self.combo);
                    self.fireEvent(BI.Bubble.EVENT_EXPAND);
                  } else {
                    self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.COLLAPSE, "", self.combo);
                    self.fireEvent(BI.Bubble.EVENT_COLLAPSE);
                  }
                }
              }
            }, BI.EVENT_RESPONSE_TIME, {
              "leading": true,
              "trailing": false
            });
            self.element.off(ev + "." + self.getName()).on(ev + "." + self.getName(), function (e) {
              debounce(e);
              st(e);
            });
            break;

          case "click-hover":
            var debounce = BI.debounce(function (e) {
              if (self.combo.element.__isMouseInBounds__(e)) {
                if (self.isEnabled() && self.isValid() && self.combo.isEnabled() && self.combo.isValid()) {
                  // if (self.isViewVisible()) {
                  //     return;
                  // }
                  self._popupView(e);

                  if (self.isViewVisible()) {
                    self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EXPAND, "", self.combo);
                    self.fireEvent(BI.Bubble.EVENT_EXPAND);
                  }
                }
              }
            }, BI.EVENT_RESPONSE_TIME, {
              "leading": true,
              "trailing": false
            });
            self.element.off("click." + self.getName()).on("click." + self.getName(), function (e) {
              debounce(e);
              st(e);
            });
            self.element.on("mouseleave." + self.getName(), function (e) {
              if (self.popupView) {
                self.popupView.element.on("mouseenter." + self.getName(), function (e) {
                  enterPopup = true;
                  self.popupView.element.on("mouseleave." + self.getName(), function (e) {
                    hide(e);
                  });
                  self.popupView.element.off("mouseenter." + self.getName());
                });
                BI.delay(function () {
                  if (!enterPopup) {
                    hide(e);
                  }
                }, 50);
              }
            });
            break;

          case "hover-click":
            self.element.on("mouseenter." + self.getName(), function (e) {
              if (self.isEnabled() && self.isValid() && self.combo.isEnabled() && self.combo.isValid()) {
                self._popupView(e);

                self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EXPAND, "", self.combo);
                self.fireEvent(BI.Bubble.EVENT_EXPAND);
              }
            });
            break;

          default:
            break;
        }
      });
    },
    _initCombo: function _initCombo() {
      this.combo = BI.createWidget(this.options.el, {
        value: this.options.value
      });
    },
    _assertPopupView: function _assertPopupView() {
      var self = this,
          o = this.options;

      if (BI.isNull(this.popupView)) {
        this.popupView = BI.createWidget(BI.isFunction(this.options.popup) ? this.options.popup() : this.options.popup, {
          type: "bi.bubble_popup_view",
          showArrow: o.showArrow,
          value: o.value
        }, this);
        this.popupView.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
          if (type === BI.Events.CLICK) {
            self.combo.setValue(self.getValue());
            self.fireEvent(BI.Bubble.EVENT_CHANGE, value, obj);
          }

          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });
        this.popupView.setVisible(false);
        BI.nextTick(function () {
          self.fireEvent(BI.Bubble.EVENT_AFTER_INIT);
        });
      }
    },
    _assertPopupViewRender: function _assertPopupViewRender() {
      this._assertPopupView();

      if (!this._rendered) {
        BI.createWidget({
          type: "bi.vertical",
          scrolly: false,
          element: this.options.container || this,
          items: [{
            el: this.popupView
          }]
        });
        this._rendered = true;
      }
    },
    _hideIf: function _hideIf(e, skipTriggerChecker) {
      // if (this.element.__isMouseInBounds__(e) || (this.popupView && this.popupView.element.__isMouseInBounds__(e))) {
      //     return;
      // }
      // BI-10290 公式combo双击公式内容会收起
      if (e && (skipTriggerChecker !== true && this.element.find(e.target).length > 0 || this.popupView && this.popupView.element.find(e.target).length > 0 || e.target.className === "CodeMirror-cursor" || BI.Widget._renderEngine.createElement(e.target).closest(".CodeMirror-hints").length > 0)) {
        // BI-9887 CodeMirror的公式弹框需要特殊处理下
        var directions = this.options.direction.split(",");

        if (BI.contains(directions, "innerLeft") || BI.contains(directions, "innerRight")) {
          // popup可以出现在trigger内部的combo，滚动时不需要消失，而是调整位置
          this.adjustWidth();
          this.adjustHeight();
        }

        return;
      }

      var isHide = this.options.hideChecker.apply(this, [e]);

      if (isHide === false) {
        return;
      }

      this._hideView(e);

      return true;
    },
    _hideView: function _hideView(e) {
      var o = this.options;
      this.fireEvent(BI.Bubble.EVENT_BEFORE_HIDEVIEW);

      if (this.options.destroyWhenHide === true) {
        this.popupView && this.popupView.destroy();
        this.popupView = null;
        this._rendered = false;
      } else {
        this.popupView && this.popupView.invisible();
      }

      if (!e || !this.combo.element.__isMouseInBounds__(e)) {
        this.element.removeClass(this.options.hoverClass); // 应对bi-focus-shadow在收起时不失焦

        this.element.blur();
      }

      if (this.popper) {
        this.popper.destroy();
        this.popper = null;
      }

      this.element.removeClass(this.options.comboClass);

      BI.Widget._renderEngine.createElement(document).unbind("mousedown." + this.getName()).unbind("mousewheel." + this.getName());

      BI.EVENT_BLUR && o.hideWhenBlur && BI.Widget._renderEngine.createElement(window).unbind("blur." + this.getName());
      this.fireEvent(BI.Bubble.EVENT_AFTER_HIDEVIEW);
    },
    _popupView: function _popupView(e) {
      var o = this.options;

      this._assertPopupViewRender();

      this.fireEvent(BI.Bubble.EVENT_BEFORE_POPUPVIEW); // popupVisible是为了获取其宽高, 放到可视范围之外以防止在IE下闪一下
      // this.popupView.css({left: -999999999, top: -99999999});

      this.popupView.visible();
      this.adjustWidth(e);

      if (this.popper) {
        this.popper.destroy();
      }

      var modifiers = [{
        name: "offset",
        options: {
          offset: function offset() {
            return [o.adjustXOffset, (o.showArrow ? 12 : 0) + (o.adjustYOffset + o.adjustLength)];
          }
        }
      }];

      if (this.options.showArrow) {
        modifiers.push({
          name: "arrow",
          options: {
            padding: 4,
            element: this.popupView.arrow.element[0]
          }
        });
      }

      this.popper = BI.Popper.createPopper(this.combo.element[0], this.popupView.element[0], {
        placement: o.placement,
        strategy: "fixed",
        modifiers: modifiers
      }); // this.adjustHeight(e);

      this.element.addClass(this.options.comboClass);
      o.hideWhenClickOutside && BI.Widget._renderEngine.createElement(document).unbind("mousedown." + this.getName());
      BI.EVENT_BLUR && o.hideWhenBlur && BI.Widget._renderEngine.createElement(window).unbind("blur." + this.getName());
      o.hideWhenClickOutside && BI.Widget._renderEngine.createElement(document).bind("mousedown." + this.getName(), BI.bind(this._hideIf, this));
      BI.EVENT_BLUR && o.hideWhenBlur && BI.Widget._renderEngine.createElement(window).bind("blur." + this.getName(), BI.bind(this._hideIf, this));
      this.fireEvent(BI.Bubble.EVENT_AFTER_POPUPVIEW);
    },
    adjustWidth: function adjustWidth(e) {
      var o = this.options;

      if (!this.popupView) {
        return;
      }

      if (o.isNeedAdjustWidth === true) {
        this.resetListWidth("");
        var width = this.popupView.element.outerWidth();
        var maxW = this.element.outerWidth() || o.width; // BI-93885 最大列宽算法调整

        if (maxW < 500) {
          if (width >= 500) {
            maxW = 500;
          } else if (width > maxW) {
            // 防止小数导致差那么一点
            maxW = width + 1;
          }
        } // if (width > maxW + 80) {
        //     maxW = maxW + 80;
        // } else if (width > maxW) {
        //     maxW = width;
        // }


        this.resetListWidth(maxW < 100 ? 100 : maxW);
      }
    },
    adjustHeight: function adjustHeight() {},
    resetListHeight: function resetListHeight(h) {
      this._assertPopupView();

      this.popupView.resetHeight && this.popupView.resetHeight(h);
    },
    resetListWidth: function resetListWidth(w) {
      this._assertPopupView();

      this.popupView.resetWidth && this.popupView.resetWidth(w);
    },
    populate: function populate(items) {
      this._assertPopupView();

      this.popupView.populate.apply(this.popupView, arguments);
      this.combo.populate && this.combo.populate.apply(this.combo, arguments);
    },
    _setEnable: function _setEnable(arg) {
      BI.Bubble.superclass._setEnable.apply(this, arguments);

      if (arg === true) {
        this.element.removeClass("base-disabled disabled");
      } else if (arg === false) {
        this.element.addClass("base-disabled disabled");
      }

      !arg && this.element.removeClass(this.options.hoverClass);
      !arg && this.isViewVisible() && this._hideView();
    },
    setValue: function setValue(v) {
      this.combo.setValue(v);

      if (BI.isNull(this.popupView)) {
        this.options.popup.value = v;
      } else {
        this.popupView.setValue(v);
      }
    },
    getValue: function getValue() {
      if (BI.isNull(this.popupView)) {
        return this.options.popup.value;
      } else {
        return this.popupView.getValue();
      }
    },
    isViewVisible: function isViewVisible() {
      return this.isEnabled() && this.combo.isEnabled() && !!this.popupView && this.popupView.isVisible();
    },
    showView: function showView(e) {
      // 减少popup 调整宽高的次数
      if (this.isEnabled() && this.combo.isEnabled() && !this.isViewVisible()) {
        this._popupView(e);
      }
    },
    hideView: function hideView(e) {
      this._hideView(e);
    },
    getView: function getView() {
      return this.popupView;
    },
    getPopupPosition: function getPopupPosition() {
      return this.position;
    },
    toggle: function toggle() {
      this._toggle();
    },
    destroyed: function destroyed() {
      BI.Widget._renderEngine.createElement(document).unbind("click." + this.getName()).unbind("mousedown." + this.getName()).unbind("mouseenter." + this.getName()).unbind("mouseleave." + this.getName());

      BI.Widget._renderEngine.createElement(window).unbind("blur." + this.getName());

      this.popper && this.popper.destroy();
      this.popper = null;
      this.popupView && this.popupView._destroy();
    }
  });
  BI.Bubble.EVENT_TRIGGER_CHANGE = "EVENT_TRIGGER_CHANGE";
  BI.Bubble.EVENT_CHANGE = "EVENT_CHANGE";
  BI.Bubble.EVENT_EXPAND = "EVENT_EXPAND";
  BI.Bubble.EVENT_COLLAPSE = "EVENT_COLLAPSE";
  BI.Bubble.EVENT_AFTER_INIT = "EVENT_AFTER_INIT";
  BI.Bubble.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
  BI.Bubble.EVENT_AFTER_POPUPVIEW = "EVENT_AFTER_POPUPVIEW";
  BI.Bubble.EVENT_BEFORE_HIDEVIEW = "EVENT_BEFORE_HIDEVIEW";
  BI.Bubble.EVENT_AFTER_HIDEVIEW = "EVENT_AFTER_HIDEVIEW";
  BI.shortcut("bi.bubble", BI.Bubble);
}();

/***/ }),
/* 731 */
/***/ (function(module, exports) {

!function () {
  var needHideWhenAnotherComboOpen = {};
  var currentOpenedCombos = {};
  /**
   * @class BI.Combo
   * @extends BI.Widget
   */

  BI.Combo = BI.inherit(BI.Bubble, {
    _const: {
      TRIANGLE_LENGTH: 12
    },
    _defaultConfig: function _defaultConfig() {
      var conf = BI.Combo.superclass._defaultConfig.apply(this, arguments);

      return BI.extend(conf, {
        baseCls: (conf.baseCls || "") + " bi-combo" + (BI.isIE() ? " hack" : ""),
        attributes: {
          tabIndex: -1
        },
        trigger: "click",
        // click || hover || click-hover || ""
        toggle: true,
        direction: "bottom",
        // top||bottom||left||right||top,left||top,right||bottom,left||bottom,right||right,innerRight||right,innerLeft||innerRight||innerLeft
        logic: {
          dynamic: true
        },
        container: null,
        // popupview放置的容器，默认为this.element
        isDefaultInit: false,
        destroyWhenHide: false,
        hideWhenBlur: true,
        hideWhenAnotherComboOpen: false,
        hideWhenClickOutside: true,
        showArrow: false,
        isNeedAdjustHeight: true,
        // 是否需要高度调整
        isNeedAdjustWidth: true,
        stopEvent: false,
        stopPropagation: false,
        adjustLength: 0,
        // 调整的距离
        adjustXOffset: 0,
        adjustYOffset: 0,
        hideChecker: BI.emptyFn,
        offsetStyle: "left",
        // left,right,center
        el: {},
        popup: {},
        comboClass: "bi-combo-popup",
        hoverClass: "bi-combo-hover",
        belowMouse: false
      });
    },
    render: function render() {
      var _this = this;

      var self = this,
          o = this.options;

      this._initCombo(); // 延迟绑定事件，这样可以将自己绑定的事情优先执行


      BI.nextTick(function () {
        !_this.isDestroyed() && _this._initPullDownAction();
      });
      this.combo.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
        if (self.isEnabled() && self.isValid()) {
          if (type === BI.Events.TOGGLE) {
            self._toggle();
          }

          if (type === BI.Events.EXPAND) {
            self._popupView();
          }

          if (type === BI.Events.COLLAPSE) {
            self._hideView();
          }

          if (type === BI.Events.EXPAND) {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
            self.fireEvent(BI.Combo.EVENT_EXPAND);
          }

          if (type === BI.Events.COLLAPSE) {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
            self.isViewVisible() && self.fireEvent(BI.Combo.EVENT_COLLAPSE);
          }

          if (type === BI.Events.CLICK) {
            self.fireEvent(BI.Combo.EVENT_TRIGGER_CHANGE, obj);
          }
        }
      });
      self.element.on("mouseenter." + self.getName(), function (e) {
        if (self.isEnabled() && self.isValid() && self.combo.isEnabled() && self.combo.isValid()) {
          self.element.addClass(o.hoverClass);
        }
      });
      self.element.on("mouseleave." + self.getName(), function (e) {
        if (self.isEnabled() && self.isValid() && self.combo.isEnabled() && self.combo.isValid()) {
          self.element.removeClass(o.hoverClass);
        }
      });
      BI.createWidget(BI.extend({
        element: this,
        scrolly: false
      }, BI.LogicFactory.createLogic("vertical", BI.extend(o.logic, {
        items: [{
          el: this.combo
        }]
      }))));
      o.isDefaultInit && this._assertPopupView();
      BI.Resizers.add(this.getName(), BI.bind(function (e) {
        // 如果resize对象是combo的子元素，则不应该收起，或交由hideChecker去处理
        if (this.isViewVisible()) {
          BI.isNotNull(e) ? this._hideIf(e) : this._hideView();
        }
      }, this));
    },
    _assertPopupView: function _assertPopupView() {
      var self = this,
          o = this.options;

      if (BI.isNull(this.popupView)) {
        this.popupView = BI.createWidget(BI.isFunction(this.options.popup) ? this.options.popup() : this.options.popup, {
          type: "bi.popup_view",
          showArrow: o.showArrow,
          value: o.value
        }, this);
        this.popupView.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
          if (type === BI.Events.CLICK) {
            self.combo.setValue(self.getValue());
            self.fireEvent(BI.Bubble.EVENT_CHANGE, value, obj);
          }

          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });
        this.popupView.setVisible(false);
        BI.nextTick(function () {
          self.fireEvent(BI.Bubble.EVENT_AFTER_INIT);
        });
      }
    },
    _hideView: function _hideView(e) {
      var o = this.options;
      this.fireEvent(BI.Combo.EVENT_BEFORE_HIDEVIEW);

      if (this.options.destroyWhenHide === true) {
        this.popupView && this.popupView.destroy();
        this.popupView = null;
        this._rendered = false;
      } else {
        this.popupView && this.popupView.invisible();
      }

      if (!e || !this.combo.element.__isMouseInBounds__(e)) {
        this.element.removeClass(this.options.hoverClass); // 应对bi-focus-shadow在收起时不失焦

        this.element.blur();
      }

      this.element.removeClass(this.options.comboClass);
      delete needHideWhenAnotherComboOpen[this.getName()];
      delete currentOpenedCombos[this.getName()];
      o.hideWhenClickOutside && BI.Widget._renderEngine.createElement(document).unbind("mousedown." + this.getName()).unbind("mousewheel." + this.getName());
      BI.EVENT_BLUR && o.hideWhenBlur && BI.Widget._renderEngine.createElement(window).unbind("blur." + this.getName());
      this.fireEvent(BI.Combo.EVENT_AFTER_HIDEVIEW, e);
    },
    _popupView: function _popupView(e) {
      var self = this,
          o = this.options;

      this._assertPopupViewRender();

      this.fireEvent(BI.Combo.EVENT_BEFORE_POPUPVIEW); // popupVisible是为了获取其宽高, 放到可视范围之外以防止在IE下闪一下

      this.popupView.css({
        left: -999999999,
        top: -99999999
      });
      this.popupView.visible();
      BI.each(needHideWhenAnotherComboOpen, function (i, combo) {
        if (i !== self.getName()) {
          if (combo && combo._hideIf(e, true) === true) {
            delete needHideWhenAnotherComboOpen[i];
          }
        }
      });
      currentOpenedCombos[this.getName()] = this;
      this.options.hideWhenAnotherComboOpen && (needHideWhenAnotherComboOpen[this.getName()] = this);
      this.adjustWidth(e);
      this.adjustHeight(e);
      this.element.addClass(this.options.comboClass);
      o.hideWhenClickOutside && BI.Widget._renderEngine.createElement(document).unbind("mousedown." + this.getName()).unbind("mousewheel." + this.getName());
      o.hideWhenClickOutside && BI.Widget._renderEngine.createElement(document).unbind("mousewheel." + this.getName());
      BI.EVENT_BLUR && o.hideWhenBlur && BI.Widget._renderEngine.createElement(window).unbind("blur." + this.getName());
      o.hideWhenClickOutside && BI.Widget._renderEngine.createElement(document).bind("mousedown." + this.getName(), BI.bind(this._hideIf, this)).bind("mousewheel." + this.getName(), BI.bind(this._hideIf, this));
      o.hideWhenClickOutside && BI.Widget._renderEngine.createElement(document).bind("mousewheel." + this.getName(), BI.bind(this._hideIf, this));
      BI.EVENT_BLUR && o.hideWhenBlur && BI.Widget._renderEngine.createElement(window).bind("blur." + this.getName(), BI.bind(this._hideIf, this));
      this.fireEvent(BI.Combo.EVENT_AFTER_POPUPVIEW);
    },
    adjustHeight: function adjustHeight(e) {
      var o = this.options,
          p = {};

      if (!this.popupView) {
        return;
      }

      var isVisible = this.popupView.isVisible();
      this.popupView.visible();
      var combo = o.belowMouse && BI.isNotNull(e) ? {
        element: {
          offset: function offset() {
            return {
              left: e.pageX,
              top: e.pageY
            };
          },
          bounds: function bounds() {
            // offset为其相对于父定位元素的偏移
            return {
              x: e.offsetX,
              y: e.offsetY,
              width: 0,
              height: 24
            };
          },
          outerWidth: function outerWidth() {
            return 0;
          },
          outerHeight: function outerHeight() {
            return 24;
          }
        }
      } : this.combo;

      switch (o.direction) {
        case "bottom":
        case "bottom,right":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset, o.adjustYOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.isNeedAdjustHeight, ["bottom", "top", "right", "left"], o.offsetStyle);
          break;

        case "top":
        case "top,right":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset, o.adjustYOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.isNeedAdjustHeight, ["top", "bottom", "right", "left"], o.offsetStyle);
          break;

        case "left":
        case "left,bottom":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.adjustYOffset, o.isNeedAdjustHeight, ["left", "right", "bottom", "top"], o.offsetStyle);
          break;

        case "right":
        case "right,bottom":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.adjustYOffset, o.isNeedAdjustHeight, ["right", "left", "bottom", "top"], o.offsetStyle);
          break;

        case "top,left":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset, o.adjustYOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.isNeedAdjustHeight, ["top", "bottom", "left", "right"], o.offsetStyle);
          break;

        case "bottom,left":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset, o.adjustYOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.isNeedAdjustHeight, ["bottom", "top", "left", "right"], o.offsetStyle);
          break;

        case "left,top":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.adjustYOffset, o.isNeedAdjustHeight, ["left", "right", "top", "bottom"], o.offsetStyle);
          break;

        case "right,top":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.adjustYOffset, o.isNeedAdjustHeight, ["right", "left", "top", "bottom"], o.offsetStyle);
          break;

        case "right,innerRight":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.adjustYOffset, o.isNeedAdjustHeight, ["right", "left", "innerRight", "innerLeft", "bottom", "top"], o.offsetStyle);
          break;

        case "right,innerLeft":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.adjustYOffset, o.isNeedAdjustHeight, ["right", "left", "innerLeft", "innerRight", "bottom", "top"], o.offsetStyle);
          break;

        case "innerRight":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.adjustYOffset, o.isNeedAdjustHeight, ["innerRight", "innerLeft", "right", "left", "bottom", "top"], o.offsetStyle);
          break;

        case "innerLeft":
          p = BI.DOM.getComboPosition(combo, this.popupView, o.adjustXOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.adjustYOffset, o.isNeedAdjustHeight, ["innerLeft", "innerRight", "left", "right", "bottom", "top"], o.offsetStyle);
          break;

        case "top,custom":
        case "custom,top":
          p = BI.DOM.getTopAdaptPosition(combo, this.popupView, o.adjustYOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.isNeedAdjustHeight);
          p.dir = "top";
          break;

        case "custom,bottom":
        case "bottom,custom":
          p = BI.DOM.getBottomAdaptPosition(combo, this.popupView, o.adjustYOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0), o.isNeedAdjustHeight);
          p.dir = "bottom";
          break;

        case "left,custom":
        case "custom,left":
          p = BI.DOM.getLeftAdaptPosition(combo, this.popupView, o.adjustXOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0));
          delete p.top;
          delete p.adaptHeight;
          p.dir = "left";
          break;

        case "custom,right":
        case "right,custom":
          p = BI.DOM.getRightAdaptPosition(combo, this.popupView, o.adjustXOffset + o.adjustLength + (o.showArrow ? this._const.TRIANGLE_LENGTH : 0));
          delete p.top;
          delete p.adaptHeight;
          p.dir = "right";
          break;

        default:
          break;
      }

      if ("adaptHeight" in p) {
        this.resetListHeight(p.adaptHeight);
      }

      var width = this.combo.element.outerWidth();
      var height = this.combo.element.outerHeight();
      this.popupView.setDirection && this.popupView.setDirection(p.dir, {
        width: width,
        height: height,
        offsetStyle: o.offsetStyle,
        adjustXOffset: o.adjustXOffset,
        adjustYOffset: o.adjustYOffset,
        offset: this.combo.element.offset()
      });

      if ("left" in p) {
        this.popupView.element.css({
          left: p.left
        });
      }

      if ("top" in p) {
        this.popupView.element.css({
          top: p.top
        });
      }

      this.position = p;
      this.popupView.setVisible(isVisible);
    },
    destroyed: function destroyed() {
      BI.Widget._renderEngine.createElement(document).unbind("click." + this.getName()).unbind("mousedown." + this.getName()).unbind("mousewheel." + this.getName()).unbind("mouseenter." + this.getName()).unbind("mouseleave." + this.getName());

      BI.Widget._renderEngine.createElement(window).unbind("blur." + this.getName());

      BI.Resizers.remove(this.getName());
      this.popupView && this.popupView._destroy();
      delete needHideWhenAnotherComboOpen[this.getName()];
      delete currentOpenedCombos[this.getName()];
    }
  });

  BI.Combo.closeAll = function () {
    BI.each(currentOpenedCombos, function (i, combo) {
      if (combo) {
        combo.hideView();
      }
    });
    currentOpenedCombos = {};
    needHideWhenAnotherComboOpen = {};
  };

  BI.Combo.EVENT_TRIGGER_CHANGE = "EVENT_TRIGGER_CHANGE";
  BI.Combo.EVENT_CHANGE = "EVENT_CHANGE";
  BI.Combo.EVENT_EXPAND = "EVENT_EXPAND";
  BI.Combo.EVENT_COLLAPSE = "EVENT_COLLAPSE";
  BI.Combo.EVENT_AFTER_INIT = "EVENT_AFTER_INIT";
  BI.Combo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
  BI.Combo.EVENT_AFTER_POPUPVIEW = "EVENT_AFTER_POPUPVIEW";
  BI.Combo.EVENT_BEFORE_HIDEVIEW = "EVENT_BEFORE_HIDEVIEW";
  BI.Combo.EVENT_AFTER_HIDEVIEW = "EVENT_AFTER_HIDEVIEW";
  BI.shortcut("bi.combo", BI.Combo);
}();

/***/ }),
/* 732 */
/***/ (function(module, exports) {

/**
 *
 * 某个可以展开的节点
 *
 * Created by GUY on 2015/9/10.
 * @class BI.Expander
 * @extends BI.Widget
 */
BI.Expander = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Expander.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-expander",
      trigger: "click",
      toggle: true,
      // direction: "bottom", //top,bottom四个方向
      isDefaultInit: false,
      // 是否默认初始化子节点
      el: {},
      popup: {},
      expanderClass: "bi-expander-popup",
      hoverClass: "bi-expander-hover"
    });
  },
  render: function render() {
    var _this = this;

    var self = this,
        o = this.options;
    this._expanded = !!o.el.open;

    this._initExpander(); // 延迟绑定事件，这样可以将自己绑定的事情优先执行


    BI.nextTick(function () {
      !_this.isDestroyed() && _this._initPullDownAction();
    });
    this.expander.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      if (self.isEnabled() && self.isValid()) {
        if (type === BI.Events.EXPAND) {
          self._popupView();
        }

        if (type === BI.Events.COLLAPSE) {
          self._hideView();
        }

        if (type === BI.Events.EXPAND) {
          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
          self.fireEvent(BI.Expander.EVENT_EXPAND);
        }

        if (type === BI.Events.COLLAPSE) {
          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
          self.isViewVisible() && self.fireEvent(BI.Expander.EVENT_COLLAPSE);
        }

        if (type === BI.Events.CLICK) {
          self.fireEvent(BI.Expander.EVENT_TRIGGER_CHANGE, value, obj);
        }
      }
    });
    this.element.hover(function () {
      if (self.isEnabled() && self.isValid() && self.expander.isEnabled() && self.expander.isValid()) {
        self.element.addClass(o.hoverClass);
      }
    }, function () {
      if (self.isEnabled() && self.isValid() && self.expander.isEnabled() && self.expander.isValid()) {
        self.element.removeClass(o.hoverClass);
      }
    });
    BI.createWidget({
      type: "bi.vertical",
      scrolly: false,
      element: this,
      items: [{
        el: this.expander
      }]
    });
    o.isDefaultInit && this._assertPopupView();

    if (this.expander.isOpened() === true) {
      this._popupView();
    }
  },
  _toggle: function _toggle() {
    this._assertPopupViewRender();

    if (this.popupView.isVisible()) {
      this._hideView();
    } else {
      if (this.isEnabled()) {
        this._popupView();
      }
    }
  },
  _initPullDownAction: function _initPullDownAction() {
    var self = this,
        o = this.options;
    var evs = this.options.trigger.split(",");
    BI.each(evs, function (i, e) {
      switch (e) {
        case "hover":
          self.element[e](function (e) {
            if (self.isEnabled() && self.isValid() && self.expander.isEnabled() && self.expander.isValid()) {
              self._popupView();

              self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EXPAND, "", self.expander);
              self.fireEvent(BI.Expander.EVENT_EXPAND);
            }
          }, function () {
            if (self.isEnabled() && self.isValid() && self.expander.isEnabled() && self.expander.isValid() && o.toggle) {
              self._hideView();

              self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.COLLAPSE, "", self.expander);
              self.fireEvent(BI.Expander.EVENT_COLLAPSE);
            }
          });
          break;

        case "click":
          if (e) {
            self.element.off(e + "." + self.getName()).on(e + "." + self.getName(), BI.debounce(function (e) {
              if (self.expander.element.__isMouseInBounds__(e)) {
                if (self.isEnabled() && self.isValid() && self.expander.isEnabled() && self.expander.isValid()) {
                  o.toggle ? self._toggle() : self._popupView();

                  if (self.isExpanded()) {
                    self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EXPAND, "", self.expander);
                    self.fireEvent(BI.Expander.EVENT_EXPAND);
                  } else {
                    self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.COLLAPSE, "", self.expander);
                    self.fireEvent(BI.Expander.EVENT_COLLAPSE);
                  }
                }
              }
            }, BI.EVENT_RESPONSE_TIME, {
              "leading": true,
              "trailing": false
            }));
          }

          break;

        default:
          break;
      }
    });
  },
  _initExpander: function _initExpander() {
    this.expander = BI.createWidget(this.options.el);
  },
  _assertPopupView: function _assertPopupView() {
    var self = this,
        o = this.options;

    if (BI.isNull(this.popupView)) {
      this.popupView = BI.createWidget(this.options.popup, {
        type: "bi.button_group",
        cls: "expander-popup",
        layouts: [{
          type: "bi.vertical",
          hgap: 0,
          vgap: 0
        }],
        value: o.value
      }, this);
      this.popupView.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
        self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

        if (type === BI.Events.CLICK) {
          // self.setValue(self.getValue());
          self.fireEvent(BI.Expander.EVENT_CHANGE, value, obj);
        }
      });
      this.popupView.setVisible(this.isExpanded());
      BI.nextTick(function () {
        self.fireEvent(BI.Expander.EVENT_AFTER_INIT);
      });
    }
  },
  _assertPopupViewRender: function _assertPopupViewRender() {
    this._assertPopupView();

    if (!this._rendered) {
      BI.createWidget({
        type: "bi.vertical",
        scrolly: false,
        element: this,
        items: [{
          el: this.popupView
        }]
      });
      this._rendered = true;
    }
  },
  _hideView: function _hideView() {
    this.fireEvent(BI.Expander.EVENT_BEFORE_HIDEVIEW);
    this._expanded = false;
    this.expander.setOpened(false);
    this.popupView && this.popupView.invisible();
    this.element.removeClass(this.options.expanderClass);
    this.fireEvent(BI.Expander.EVENT_AFTER_HIDEVIEW);
  },
  _popupView: function _popupView() {
    this._assertPopupViewRender();

    this.fireEvent(BI.Expander.EVENT_BEFORE_POPUPVIEW);
    this._expanded = true;
    this.expander.setOpened(true);
    this.popupView.visible();
    this.element.addClass(this.options.expanderClass);
    this.fireEvent(BI.Expander.EVENT_AFTER_POPUPVIEW);
  },
  populate: function populate(items) {
    // this._assertPopupView();
    this.popupView && this.popupView.populate.apply(this.popupView, arguments);
    this.expander.populate && this.expander.populate.apply(this.expander, arguments);
  },
  _setEnable: function _setEnable(arg) {
    BI.Expander.superclass._setEnable.apply(this, arguments);

    !arg && this.element.removeClass(this.options.hoverClass);
    !arg && this.isViewVisible() && this._hideView();
  },
  setValue: function setValue(v) {
    this.expander.setValue(v);

    if (BI.isNull(this.popupView)) {
      this.options.popup.value = v;
    } else {
      this.popupView.setValue(v);
    }
  },
  getValue: function getValue() {
    if (BI.isNull(this.popupView)) {
      return this.options.popup.value;
    } else {
      return this.popupView.getValue();
    }
  },
  isViewVisible: function isViewVisible() {
    return this.isEnabled() && this.expander.isEnabled() && !!this.popupView && this.popupView.isVisible();
  },
  isExpanded: function isExpanded() {
    return this._expanded;
  },
  showView: function showView() {
    if (this.isEnabled() && this.expander.isEnabled()) {
      this._popupView();
    }
  },
  hideView: function hideView() {
    this._hideView();
  },
  getView: function getView() {
    return this.popupView;
  },
  getAllLeaves: function getAllLeaves() {
    return this.popupView && this.popupView.getAllLeaves();
  },
  getNodeById: function getNodeById(id) {
    if (this.expander.options.id === id) {
      return this.expander;
    }

    return this.popupView && this.popupView.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(value) {
    if (this.expander.getValue() === value) {
      return this.expander;
    }

    return this.popupView && this.popupView.getNodeByValue(value);
  },
  destroy: function destroy() {
    BI.Expander.superclass.destroy.apply(this, arguments);
  }
});
BI.Expander.EVENT_EXPAND = "EVENT_EXPAND";
BI.Expander.EVENT_COLLAPSE = "EVENT_COLLAPSE";
BI.Expander.EVENT_TRIGGER_CHANGE = "EVENT_TRIGGER_CHANGE";
BI.Expander.EVENT_CHANGE = "EVENT_CHANGE";
BI.Expander.EVENT_AFTER_INIT = "EVENT_AFTER_INIT";
BI.Expander.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.Expander.EVENT_AFTER_POPUPVIEW = "EVENT_AFTER_POPUPVIEW";
BI.Expander.EVENT_BEFORE_HIDEVIEW = "EVENT_BEFORE_HIDEVIEW";
BI.Expander.EVENT_AFTER_HIDEVIEW = "EVENT_AFTER_HIDEVIEW";
BI.shortcut("bi.expander", BI.Expander);

/***/ }),
/* 733 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/8/10.
 */
BI.ComboGroup = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ComboGroup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-combo-group bi-list-item",
      // 以下这些属性对每一个combo都是公用的
      trigger: "click,hover",
      direction: "right",
      adjustLength: 0,
      isDefaultInit: false,
      isNeedAdjustHeight: false,
      isNeedAdjustWidth: false,
      el: {
        type: "bi.text_button",
        text: "",
        value: ""
      },
      items: [],
      popup: {
        el: {
          type: "bi.button_tree",
          chooseType: 0,
          layouts: [{
            type: "bi.vertical"
          }]
        }
      }
    });
  },
  render: function render() {
    this._populate(this.options.el);
  },
  _populate: function _populate(item) {
    var self = this,
        o = this.options;
    var children = o.items;

    if (BI.isEmpty(children)) {
      throw new Error("ComboGroup构造错误");
    }

    BI.each(children, function (i, ch) {
      var son = BI.formatEL(ch).el.children;
      ch = BI.formatEL(ch).el;

      if (!BI.isEmpty(son)) {
        ch.el = BI.clone(ch);
        ch.items = son;
        ch.type = "bi.combo_group";
        ch.action = o.action;
        ch.height = o.height;
        ch.direction = o.direction;
        ch.isDefaultInit = o.isDefaultInit;
        ch.isNeedAdjustHeight = o.isNeedAdjustHeight;
        ch.isNeedAdjustWidth = o.isNeedAdjustWidth;
        ch.adjustLength = o.adjustLength;
        ch.popup = o.popup;
      }
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      element: this,
      container: o.container,
      height: o.height,
      trigger: o.trigger,
      direction: o.direction,
      isDefaultInit: o.isDefaultInit,
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      isNeedAdjustHeight: o.isNeedAdjustHeight,
      adjustLength: o.adjustLength,
      el: item,
      popup: BI.extend({}, o.popup, {
        el: BI.extend({
          items: children
        }, o.popup.el)
      })
    });
    this.combo.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.ComboGroup.EVENT_CHANGE, obj);
      }
    });
  },
  getValue: function getValue() {
    return this.combo.getValue();
  },
  setValue: function setValue(v) {
    this.combo.setValue(v);
  }
});
BI.ComboGroup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.combo_group", BI.ComboGroup);

/***/ }),
/* 734 */
/***/ (function(module, exports) {

BI.VirtualGroup = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.VirtualGroup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-virtual-group",
      items: [],
      layouts: [{
        type: "bi.center",
        hgap: 0,
        vgap: 0
      }]
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;
    this.populate(items);
    o.value = BI.isFunction(o.value) ? this.__watch(o.value, function (context, newValue) {
      self.setValue(newValue);
    }) : o.value;

    if (BI.isKey(o.value)) {
      this.setValue(o.value);
    }
  },
  _packageBtns: function _packageBtns(items) {
    var o = this.options;
    var map = this.buttonMap = {};
    var layouts = BI.isArray(o.layouts) ? o.layouts : [o.layouts];

    var _loop = function _loop(i) {
      items = BI.map(items, function (k, it) {
        var el = BI.stripEL(it);
        return BI.extend({}, layouts[i], {
          items: [BI.extend({}, layouts[i].el, {
            el: BI.extend({
              ref: function ref(_ref) {
                if (BI.isKey(map[el.value])) {
                  map[el.value] = _ref;
                }
              }
            }, el)
          })]
        });
      });
    };

    for (var i = layouts.length - 1; i > 0; i--) {
      _loop(i);
    }

    return items;
  },
  _packageLayout: function _packageLayout(items) {
    var o = this.options;
    var layouts = BI.isArray(o.layouts) ? o.layouts : [o.layouts];
    var layout = BI.deepClone(layouts[0]);
    var lay = BI.formatEL(layout).el;

    while (lay && lay.items && !BI.isEmpty(lay.items)) {
      lay = BI.formatEL(lay.items[0]).el;
    }

    lay.items = items;
    return layout;
  },
  addItems: function addItems(items) {
    this.layouts.addItems(items, this);
  },
  prependItems: function prependItems(items) {
    this.layouts.prependItems(items, this);
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    BI.each(this.buttonMap, function (key, item) {
      if (item) {
        if (v.deepContains(key)) {
          item.setSelected && item.setSelected(true);
        } else {
          item.setSelected && item.setSelected(false);
        }
      }
    });
  },
  getNotSelectedValue: function getNotSelectedValue() {
    var v = [];
    BI.each(this.buttonMap, function (i, item) {
      if (item) {
        if (item.isEnabled() && !(item.isSelected && item.isSelected())) {
          v.push(item.getValue());
        }
      }
    });
    return v;
  },
  getNodeByValue: function getNodeByValue(value) {
    return this.buttonMap[value];
  },

  /**
   * 滚动到指定的节点
   */
  scrollToValue: function scrollToValue(value, scrollIntoViewOptions) {
    var node = this.getNodeByValue(value);

    if (node) {
      node.element[0].scrollIntoView(scrollIntoViewOptions);
    }
  },
  getValue: function getValue() {
    var v = [];
    BI.each(this.buttonMap, function (i, item) {
      if (item) {
        if (item.isEnabled() && item.isSelected && item.isSelected()) {
          v.push(item.getValue());
        }
      }
    });
    return v;
  },
  populate: function populate(items) {
    items = items || [];
    this.options.items = items;
    items = this._packageBtns(items);

    if (!this.layouts) {
      this.layouts = BI.createWidget(BI.extend({
        element: this
      }, this._packageLayout(items)));
    } else {
      this.layouts.populate(items, {
        context: this
      });
    }
  }
});
BI.VirtualGroup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.virtual_group", BI.VirtualGroup);

/***/ }),
/* 735 */
/***/ (function(module, exports) {

/**
 * 加载控件
 *
 * Created by GUY on 2015/8/31.
 * @class BI.Loader
 * @extends BI.Widget
 */
BI.Loader = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Loader.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-loader",
      direction: "top",
      isDefaultInit: true,
      // 是否默认初始化数据
      logic: {
        dynamic: true,
        scrolly: true
      },
      // 下面是button_group的属性
      el: {
        type: "bi.button_group"
      },
      items: [],
      itemsCreator: BI.emptyFn,
      onLoaded: BI.emptyFn,
      // 下面是分页信息
      count: false,
      prev: false,
      next: {},
      hasPrev: BI.emptyFn,
      hasNext: BI.emptyFn
    });
  },
  _prevLoad: function _prevLoad() {
    var self = this,
        o = this.options;
    this.prev.setLoading();
    o.itemsCreator.apply(this, [{
      times: --this.times
    }, function () {
      self.prev.setLoaded();
      self.prependItems.apply(self, arguments);
    }]);
  },
  _nextLoad: function _nextLoad() {
    var self = this,
        o = this.options;
    this.next.setLoading();
    o.itemsCreator.apply(this, [{
      times: ++this.times
    }, function () {
      self.next.setLoaded();
      self.addItems.apply(self, arguments);
    }]);
  },
  render: function render() {
    var self = this,
        o = this.options;

    if (o.itemsCreator === false) {
      o.prev = false;
      o.next = false;
    }

    if (o.prev !== false) {
      this.prev = BI.createWidget(BI.extend({
        type: "bi.loading_bar"
      }, o.prev));
      this.prev.on(BI.Controller.EVENT_CHANGE, function (type) {
        if (type === BI.Events.CLICK) {
          self._prevLoad();
        }
      });
    }

    this.button_group = BI.createWidget(o.el, {
      type: "bi.button_group",
      chooseType: 0,
      items: o.items,
      behaviors: {},
      layouts: [{
        type: "bi.vertical"
      }],
      value: o.value
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.Loader.EVENT_CHANGE, obj);
      }
    });

    if (o.next !== false) {
      this.next = BI.createWidget(BI.extend({
        type: "bi.loading_bar"
      }, o.next));
      this.next.on(BI.Controller.EVENT_CHANGE, function (type) {
        if (type === BI.Events.CLICK) {
          self._nextLoad();
        }
      });
    }

    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(o.direction), BI.extend({
      scrolly: true
    }, o.logic, {
      items: BI.LogicFactory.createLogicItemsByDirection(o.direction, this.prev, this.button_group, this.next)
    }))));
    o.isDefaultInit && BI.isEmpty(o.items) && BI.nextTick(BI.bind(function () {
      o.isDefaultInit && BI.isEmpty(o.items) && this._populate();
    }, this));
    var items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;

    if (BI.isNotEmptyArray(items)) {
      this._populate(items);
    }
  },
  hasPrev: function hasPrev() {
    var o = this.options;

    if (BI.isNumber(o.count)) {
      return this.count < o.count;
    }

    return !!o.hasPrev.apply(this, [{
      times: this.times,
      count: this.count
    }]);
  },
  hasNext: function hasNext() {
    var o = this.options;

    if (BI.isNumber(o.count)) {
      return this.count < o.count;
    }

    return !!o.hasNext.apply(this, [{
      times: this.times,
      count: this.count
    }]);
  },
  prependItems: function prependItems(items) {
    this.count += items.length;

    if (this.next !== false) {
      if (this.hasPrev()) {
        this.options.items = this.options.items.concat(items);
        this.prev.setLoaded();
      } else {
        this.prev.setEnd();
      }
    }

    this.button_group.prependItems.apply(this.button_group, arguments);
  },
  addItems: function addItems(items) {
    this.count += items.length;

    if (BI.isObject(this.next)) {
      if (this.hasNext()) {
        this.options.items = this.options.items.concat(items);
        this.next.setLoaded();
      } else {
        this.next.setEnd();
      }
    }

    this.button_group.addItems.apply(this.button_group, arguments);
  },
  _populate: function _populate(items) {
    var self = this,
        o = this.options;

    if (arguments.length === 0 && BI.isFunction(o.itemsCreator)) {
      o.itemsCreator.apply(this, [{
        times: 1
      }, function () {
        if (arguments.length === 0) {
          throw new Error("参数不能为空");
        }

        self.populate.apply(self, arguments);
        o.onLoaded();
      }]);
      return false;
    }

    this.options.items = items;
    this.times = 1;
    this.count = 0;
    this.count += items.length;

    if (BI.isObject(this.next)) {
      if (this.hasNext()) {
        this.next.setLoaded();
      } else {
        this.next.invisible();
      }
    }

    if (BI.isObject(this.prev)) {
      if (this.hasPrev()) {
        this.prev.setLoaded();
      } else {
        this.prev.invisible();
      }
    }

    return true;
  },
  populate: function populate() {
    this._populate.apply(this, arguments) && this.button_group.populate.apply(this.button_group, arguments);
  },
  setNotSelectedValue: function setNotSelectedValue() {
    this.button_group.setNotSelectedValue.apply(this.button_group, arguments);
  },
  getNotSelectedValue: function getNotSelectedValue() {
    return this.button_group.getNotSelectedValue();
  },
  setValue: function setValue() {
    this.button_group.setValue.apply(this.button_group, arguments);
  },
  getValue: function getValue() {
    return this.button_group.getValue.apply(this.button_group, arguments);
  },
  getAllButtons: function getAllButtons() {
    return this.button_group.getAllButtons();
  },
  getAllLeaves: function getAllLeaves() {
    return this.button_group.getAllLeaves();
  },
  getSelectedButtons: function getSelectedButtons() {
    return this.button_group.getSelectedButtons();
  },
  getNotSelectedButtons: function getNotSelectedButtons() {
    return this.button_group.getNotSelectedButtons();
  },
  getIndexByValue: function getIndexByValue(value) {
    return this.button_group.getIndexByValue(value);
  },
  getNodeById: function getNodeById(id) {
    return this.button_group.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(value) {
    return this.button_group.getNodeByValue(value);
  },
  empty: function empty() {
    this.button_group.empty();
    BI.each([this.prev, this.next], function (i, ob) {
      ob && ob.setVisible(false);
    });
  },
  destroy: function destroy() {
    BI.Loader.superclass.destroy.apply(this, arguments);
  }
});
BI.Loader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.loader", BI.Loader);

/***/ }),
/* 736 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/6/26.
 */
BI.Navigation = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Navigation.superclass._defaultConfig.apply(this, arguments), {
      direction: "bottom",
      // top, bottom, left, right, custom
      logic: {
        dynamic: false
      },
      single: false,
      showIndex: false,
      tab: false,
      cardCreator: function cardCreator(v) {
        return BI.createWidget();
      },
      afterCardCreated: BI.emptyFn,
      afterCardShow: BI.emptyFn
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.tab = BI.createWidget(this.options.tab, {
      type: "bi.button_group"
    });
    this.cardMap = {};
    this.showIndex = 0;
    this.layout = BI.createWidget({
      type: "bi.card"
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(o.direction), BI.extend({}, o.logic, {
      items: BI.LogicFactory.createLogicItemsByDirection(o.direction, this.tab, this.layout)
    }))));
    new BI.ShowListener({
      eventObj: this.tab,
      cardLayout: this.layout,
      cardNameCreator: function cardNameCreator(v) {
        return self.showIndex + v;
      },
      cardCreator: function cardCreator(v) {
        BI.Widget.execWithContext(self, function () {
          self.cardMap[v] = o.cardCreator(v);
        });
        return self.cardMap[v];
      },
      afterCardCreated: BI.bind(this.afterCardCreated, this),
      afterCardShow: BI.bind(this.afterCardShow, this)
    });

    if (BI.isFunction(o.showIndex)) {
      this.__watch(o.showIndex, function (context, newValue) {
        self.setSelect(newValue);
      });
    }
  },
  created: function created() {
    var o = this.options;

    if (o.showIndex !== false) {
      this.setSelect(o.showIndex);
    }
  },
  _deleteOtherCards: function _deleteOtherCards(currCardName) {
    var self = this,
        o = this.options;

    if (o.single === true) {
      BI.each(this.cardMap, function (name, card) {
        if (name !== currCardName + "") {
          self.layout.deleteCardByName(name);
          delete self.cardMap[name];
        }
      });
    }
  },
  afterCardCreated: function afterCardCreated(v) {
    var self = this;
    this.cardMap[v].on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.Navigation.EVENT_CHANGE, obj);
      }
    });
    this.options.afterCardCreated.apply(this, arguments);
  },
  afterCardShow: function afterCardShow(v) {
    this.showIndex = v;

    this._deleteOtherCards(v);

    this.options.afterCardShow.apply(this, arguments);
  },
  populate: function populate() {
    var card = this.layout.getShowingCard();

    if (card) {
      return card.populate.apply(card, arguments);
    }
  },
  _assertCard: function _assertCard(v) {
    var self = this,
        o = this.options;

    if (!this.layout.isCardExisted(v)) {
      BI.Widget.execWithContext(self, function () {
        self.cardMap[v] = o.cardCreator(v);
      });
      this.layout.addCardByName(v, this.cardMap[v]);
      this.afterCardCreated(v);
    }
  },
  setSelect: function setSelect(v) {
    this._assertCard(v);

    this.layout.showCardByName(v);

    this._deleteOtherCards(v);

    if (this.showIndex !== v) {
      this.showIndex = v;
      BI.nextTick(BI.bind(this.afterCardShow, this, v));
    }
  },
  getSelect: function getSelect() {
    return this.showIndex;
  },
  getSelectedCard: function getSelectedCard() {
    if (BI.isKey(this.showIndex)) {
      return this.cardMap[this.showIndex];
    }
  },
  getAllCard: function getAllCard() {
    return BI.values(this.cardMap);
  },

  /**
   * @override
   */
  setValue: function setValue(v) {
    var card = this.layout.getShowingCard();

    if (card) {
      card.setValue(v);
    }
  },

  /**
   * @override
   */
  getValue: function getValue() {
    var card = this.layout.getShowingCard();

    if (card) {
      return card.getValue();
    }
  },
  empty: function empty() {
    this.layout.deleteAllCard();
    this.cardMap = {};
  },
  destroy: function destroy() {
    BI.Navigation.superclass.destroy.apply(this, arguments);
  }
});
BI.Navigation.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.navigation", BI.Navigation);

/***/ }),
/* 737 */
/***/ (function(module, exports) {

/**
 * 搜索逻辑控件
 *
 * Created by GUY on 2015/9/28.
 * @class BI.Searcher
 * @extends BI.Widget
 */
BI.Searcher = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Searcher.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-searcher",
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      vgap: 0,
      hgap: 0,
      isDefaultInit: false,
      isAutoSearch: true,
      // 是否自动搜索
      isAutoSync: true,
      // 是否自动同步数据, 即是否保持搜索面板和adapter面板状态值的统一
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
      // isAutoSearch为false时启用
      onSearch: function onSearch(op, callback) {
        callback([]);
      },
      el: {
        type: "bi.search_editor"
      },
      popup: {
        type: "bi.searcher_view"
      },
      adapter: null,
      masker: {
        // masker层
        offset: {}
      }
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.el, {
      type: "bi.search_editor"
    });
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      vgap: o.vgap,
      hgap: o.hgap,
      items: [this.editor]
    });
    o.isDefaultInit && this._assertPopupView();
    var search = BI.debounce(BI.bind(this._search, this), BI.EVENT_RESPONSE_TIME, {
      "leading": true,
      "trailing": false
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function (type) {
      switch (type) {
        case BI.Events.STARTEDIT:
          self._startSearch();

          break;

        case BI.Events.EMPTY:
          self._stopSearch();

          break;

        case BI.Events.CHANGE:
          search();
          break;

        case BI.Events.PAUSE:
          if (BI.endWith(this.getValue(), BI.BlankSplitChar)) {
            self._pauseSearch();
          }

          break;

        default:
          break;
      }
    });
  },
  _assertPopupView: function _assertPopupView() {
    var self = this,
        o = this.options;

    if (o.masker && !BI.Maskers.has(this.getName()) || o.masker === false && !this.popupView) {
      this.popupView = BI.createWidget(o.popup, {
        type: "bi.searcher_view",
        chooseType: o.chooseType
      });
      this.popupView.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
        self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

        if (type === BI.Events.CLICK) {
          if (o.isAutoSync) {
            var values = o.adapter && o.adapter.getValue();

            switch (o.chooseType) {
              case BI.ButtonGroup.CHOOSE_TYPE_SINGLE:
                o.adapter && o.adapter.setValue([obj.getValue()]);
                break;

              case BI.ButtonGroup.CHOOSE_TYPE_MULTI:
                if (!obj.isSelected()) {
                  o.adapter && o.adapter.setValue(BI.deepWithout(values, obj.getValue()));
                }

                values.push(obj.getValue());
                o.adapter && o.adapter.setValue(values);
                break;

              default:
                break;
            }
          }

          self.fireEvent(BI.Searcher.EVENT_CHANGE, value, obj);
        }
      });
      BI.nextTick(function () {
        self.fireEvent(BI.Searcher.EVENT_AFTER_INIT);
      });
    }

    if (o.masker && !BI.Maskers.has(this.getName())) {
      BI.Maskers.create(this.getName(), o.adapter, BI.extend({
        container: this,
        render: this.popupView
      }, o.masker), this);
    }
  },
  _startSearch: function _startSearch() {
    this._assertPopupView();

    this._stop = false;
    this._isSearching = true;
    this.fireEvent(BI.Searcher.EVENT_START);
    this.popupView.startSearch && this.popupView.startSearch(); // 搜索前先清空dom
    // BI.Maskers.get(this.getName()).empty();

    BI.nextTick(function (name) {
      BI.Maskers.show(name);
    }, this.getName());
  },
  _pauseSearch: function _pauseSearch() {
    this._stop = true;
    BI.nextTick(function (name) {
      BI.Maskers.hide(name);
    }, this.getName());

    if (this._isSearching === true) {
      this.popupView && this.popupView.pauseSearch && this.popupView.pauseSearch();
      this.fireEvent(BI.Searcher.EVENT_PAUSE);
    }

    this._isSearching = false;
  },
  _stopSearch: function _stopSearch() {
    var name = this.getName();
    this._stop = true;
    BI.Maskers.hide(name);

    if (this._isSearching === true) {
      this.popupView && this.popupView.stopSearch && this.popupView.stopSearch();
      this.fireEvent(BI.Searcher.EVENT_STOP);
    }

    this._isSearching = false;
  },
  _search: function _search() {
    var self = this,
        o = this.options,
        keyword = this.editor.getValue();

    if (keyword === "" || this._stop) {
      return;
    }

    if (o.isAutoSearch) {
      var items = o.adapter && (o.adapter.getItems && o.adapter.getItems() || o.adapter.attr("items")) || [];
      var finding = BI.Func.getSearchResult(items, keyword);
      var match = finding.match,
          find = finding.find;
      this.popupView.populate(find, match, keyword);
      o.isAutoSync && o.adapter && o.adapter.getValue && this.popupView.setValue(o.adapter.getValue());
      self.fireEvent(BI.Searcher.EVENT_SEARCHING);
      return;
    }

    this.popupView.loading && this.popupView.loading();
    o.onSearch({
      times: 1,
      keyword: keyword,
      selectedValues: o.adapter && o.adapter.getValue()
    }, function (searchResult, matchResult) {
      if (!self._stop && keyword === self.editor.getValue()) {
        var args = [].slice.call(arguments);

        if (args.length > 0) {
          args.push(keyword);
        }

        BI.Maskers.show(self.getName());
        self.popupView.populate.apply(self.popupView, args);
        o.isAutoSync && o.adapter && o.adapter.getValue && self.popupView.setValue(o.adapter.getValue());
        self.popupView.loaded && self.popupView.loaded();
        self.fireEvent(BI.Searcher.EVENT_SEARCHING);
      }
    });
  },
  _getLastSearchKeyword: function _getLastSearchKeyword() {
    if (this.isValid()) {
      var res = this.editor.getValue().split(/\u200b\s\u200b/);

      if (BI.isEmptyString(res[res.length - 1])) {
        res = res.slice(0, res.length - 1);
      }

      return BI.isNull(res) ? "" : res[res.length - 1];
    }
  },
  setAdapter: function setAdapter(adapter) {
    this.options.adapter = adapter;
    BI.Maskers.remove(this.getName());
  },
  doSearch: function doSearch() {
    if (this.isSearching()) {
      this._search();
    }
  },
  stopSearch: function stopSearch() {
    this._stopSearch(); // 先停止搜索，然后再去设置editor为空
    // important:停止搜索必须退出编辑状态,这里必须加上try(input框不显示时blur会抛异常)


    try {
      this.editor.blur();
    } catch (e) {
      if (!this.editor.blur) {
        throw new Error("editor没有实现blur方法");
      }
    } finally {
      this.editor.setValue("");
    }
  },
  isSearching: function isSearching() {
    return this._isSearching;
  },
  isViewVisible: function isViewVisible() {
    return this.editor.isEnabled() && BI.Maskers.isVisible(this.getName());
  },
  getView: function getView() {
    return this.popupView;
  },
  hasMatched: function hasMatched() {
    this._assertPopupView();

    return this.popupView.hasMatched();
  },
  adjustHeight: function adjustHeight() {
    if (BI.Maskers.has(this.getName()) && BI.Maskers.get(this.getName()).isVisible()) {
      BI.Maskers.show(this.getName());
    }
  },
  adjustView: function adjustView() {
    this.isViewVisible() && BI.Maskers.show(this.getName());
  },
  setValue: function setValue(v) {
    if (BI.isNull(this.popupView)) {
      this.options.popup.value = v;
    } else {
      this.popupView.setValue(v);
    }
  },
  getKeyword: function getKeyword() {
    return this._getLastSearchKeyword();
  },
  getKeywords: function getKeywords() {
    return this.editor.getKeywords();
  },
  getValue: function getValue() {
    var o = this.options;

    if (o.isAutoSync && o.adapter && o.adapter.getValue) {
      return o.adapter.getValue();
    }

    if (this.isSearching()) {
      return this.popupView.getValue();
    } else if (o.adapter && o.adapter.getValue) {
      return o.adapter.getValue();
    }

    if (BI.isNull(this.popupView)) {
      return o.popup.value;
    }

    return this.popupView.getValue();
  },
  populate: function populate(result, searchResult, keyword) {
    var o = this.options;

    this._assertPopupView();

    this.popupView.populate.apply(this.popupView, arguments);

    if (o.isAutoSync && o.adapter && o.adapter.getValue) {
      this.popupView.setValue(o.adapter.getValue());
    }
  },
  empty: function empty() {
    this.popupView && this.popupView.empty();
  },
  destroyed: function destroyed() {
    BI.Maskers.remove(this.getName());
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.editor.setWaterMark(v);
  }
});
BI.Searcher.EVENT_CHANGE = "EVENT_CHANGE";
BI.Searcher.EVENT_START = "EVENT_START";
BI.Searcher.EVENT_STOP = "EVENT_STOP";
BI.Searcher.EVENT_PAUSE = "EVENT_PAUSE";
BI.Searcher.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.Searcher.EVENT_AFTER_INIT = "EVENT_AFTER_INIT";
BI.shortcut("bi.searcher", BI.Searcher);

/***/ }),
/* 738 */
/***/ (function(module, exports) {

/**
 *
 * 切换显示或隐藏面板
 *
 * Created by GUY on 2015/11/2.
 * @class BI.Switcher
 * @extends BI.Widget
 */
BI.Switcher = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Switcher.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-switcher",
      direction: BI.Direction.Top,
      trigger: "click",
      toggle: true,
      el: {},
      popup: {},
      adapter: null,
      masker: {},
      switcherClass: "bi-switcher-popup",
      hoverClass: "bi-switcher-hover"
    });
  },
  render: function render() {
    var _this = this;

    var self = this,
        o = this.options;

    this._initSwitcher(); // 延迟绑定事件，这样可以将自己绑定的事情优先执行


    BI.nextTick(function () {
      !_this.isDestroyed() && _this._initPullDownAction();
    });
    this.switcher.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      if (self.isEnabled() && self.isValid()) {
        if (type === BI.Events.EXPAND) {
          self._popupView();
        }

        if (type === BI.Events.COLLAPSE) {
          self._hideView();
        }

        if (type === BI.Events.EXPAND) {
          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
          self.fireEvent(BI.Switcher.EVENT_EXPAND);
        }

        if (type === BI.Events.COLLAPSE) {
          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
          self.isViewVisible() && self.fireEvent(BI.Switcher.EVENT_COLLAPSE);
        }

        if (type === BI.Events.CLICK) {
          self.fireEvent(BI.Switcher.EVENT_TRIGGER_CHANGE, value, obj);
        }
      }
    });
    this.element.hover(function () {
      if (self.isEnabled() && self.switcher.isEnabled()) {
        self.element.addClass(o.hoverClass);
      }
    }, function () {
      if (self.isEnabled() && self.switcher.isEnabled()) {
        self.element.removeClass(o.hoverClass);
      }
    });
    BI.createWidget({
      type: "bi.vertical",
      scrolly: false,
      element: this,
      items: [{
        el: this.switcher
      }]
    });
    o.isDefaultInit && this._assertPopupView();
  },
  _toggle: function _toggle() {
    this._assertPopupView();

    if (this.isExpanded()) {
      this._hideView();
    } else {
      if (this.isEnabled()) {
        this._popupView();
      }
    }
  },
  _initPullDownAction: function _initPullDownAction() {
    var self = this,
        o = this.options;
    var evs = this.options.trigger.split(",");
    BI.each(evs, function (i, e) {
      switch (e) {
        case "hover":
          self.element[e](function (e) {
            if (self.isEnabled() && self.switcher.isEnabled()) {
              self._popupView();

              self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EXPAND, "", self.switcher);
              self.fireEvent(BI.Switcher.EVENT_EXPAND);
            }
          }, function () {
            if (self.isEnabled() && self.switcher.isEnabled() && o.toggle) {
              self._hideView();

              self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.COLLAPSE, "", self.switcher);
              self.fireEvent(BI.Switcher.EVENT_COLLAPSE);
            }
          });
          break;

        default:
          if (e) {
            self.element.off(e + "." + self.getName()).on(e + "." + self.getName(), BI.debounce(function (e) {
              if (self.switcher.element.__isMouseInBounds__(e)) {
                if (self.isEnabled() && self.switcher.isEnabled()) {
                  o.toggle ? self._toggle() : self._popupView();

                  if (self.isExpanded()) {
                    self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EXPAND, "", self.switcher);
                    self.fireEvent(BI.Switcher.EVENT_EXPAND);
                  } else {
                    self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.COLLAPSE, "", self.switcher);
                    self.fireEvent(BI.Switcher.EVENT_COLLAPSE);
                  }
                }
              }
            }, BI.EVENT_RESPONSE_TIME, {
              "leading": true,
              "trailing": false
            }));
          }

          break;
      }
    });
  },
  _initSwitcher: function _initSwitcher() {
    this.switcher = BI.createWidget(this.options.el, {
      value: this.options.value
    });
  },
  _assertPopupView: function _assertPopupView() {
    var self = this,
        o = this.options;

    if (!this._created) {
      this.popupView = BI.createWidget(o.popup, {
        type: "bi.button_group",
        element: o.adapter && BI.Maskers.create(this.getName(), o.adapter, BI.extend({
          container: this
        }, o.masker)),
        cls: "switcher-popup",
        layouts: [{
          type: "bi.vertical",
          hgap: 0,
          vgap: 0
        }],
        value: o.value
      }, this);
      this.popupView.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
        self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

        if (type === BI.Events.CLICK) {
          self.fireEvent(BI.Switcher.EVENT_CHANGE, value, obj);
        }
      });

      if (o.direction !== BI.Direction.Custom && !o.adapter) {
        BI.createWidget({
          type: "bi.vertical",
          scrolly: false,
          element: this,
          items: [{
            el: this.popupView
          }]
        });
      }

      this._created = true;
      BI.nextTick(function () {
        self.fireEvent(BI.Switcher.EVENT_AFTER_INIT);
      });
    }
  },
  _hideView: function _hideView() {
    this.fireEvent(BI.Switcher.EVENT_BEFORE_HIDEVIEW);
    var self = this,
        o = this.options;
    o.adapter ? BI.Maskers.hide(self.getName()) : self.popupView && self.popupView.setVisible(false);
    BI.nextTick(function () {
      o.adapter ? BI.Maskers.hide(self.getName()) : self.popupView && self.popupView.setVisible(false);
      self.element.removeClass(o.switcherClass);
      self.fireEvent(BI.Switcher.EVENT_AFTER_HIDEVIEW);
    });
  },
  _popupView: function _popupView() {
    var self = this,
        o = this.options;

    this._assertPopupView();

    this.fireEvent(BI.Switcher.EVENT_BEFORE_POPUPVIEW);
    o.adapter ? BI.Maskers.show(this.getName()) : self.popupView.setVisible(true);
    BI.nextTick(function (name) {
      o.adapter ? BI.Maskers.show(name) : self.popupView.setVisible(true);
      self.element.addClass(o.switcherClass);
      self.fireEvent(BI.Switcher.EVENT_AFTER_POPUPVIEW);
    }, this.getName());
  },
  _populate: function _populate() {
    this._assertPopupView();

    this.popupView.populate.apply(this.popupView, arguments);
  },
  populate: function populate(items) {
    this._populate.apply(this, arguments);

    this.switcher.populate && this.switcher.populate.apply(this.switcher, arguments);
  },
  _setEnable: function _setEnable(arg) {
    BI.Switcher.superclass._setEnable.apply(this, arguments);

    !arg && this.isViewVisible() && this._hideView();
  },
  setValue: function setValue(v) {
    this.switcher.setValue(v);

    if (BI.isNull(this.popupView)) {
      this.options.popup.value = v;
    } else {
      this.popupView.setValue(v);
    }
  },
  getValue: function getValue() {
    if (BI.isNull(this.popupView)) {
      return this.options.popup.value;
    } else {
      return this.popupView.getValue();
    }
  },
  setAdapter: function setAdapter(adapter) {
    this.options.adapter = adapter;
    BI.Maskers.remove(this.getName());
  },
  isViewVisible: function isViewVisible() {
    return this.isEnabled() && this.switcher.isEnabled() && (this.options.adapter ? BI.Maskers.isVisible(this.getName()) : this.popupView && this.popupView.isVisible());
  },
  isExpanded: function isExpanded() {
    return this.isViewVisible();
  },
  showView: function showView() {
    if (this.isEnabled() && this.switcher.isEnabled()) {
      this._popupView();
    }
  },
  hideView: function hideView() {
    this._hideView();
  },
  getView: function getView() {
    return this.popupView;
  },
  adjustView: function adjustView() {
    this.isViewVisible() && BI.Maskers.show(this.getName());
  },
  getAllLeaves: function getAllLeaves() {
    return this.popupView && this.popupView.getAllLeaves();
  },
  getNodeById: function getNodeById(id) {
    if (this.switcher.attr("id") === id) {
      return this.switcher;
    }

    return this.popupView && this.popupView.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(value) {
    if (this.switcher.getValue() === value) {
      return this.switcher;
    }

    return this.popupView && this.popupView.getNodeByValue(value);
  },
  empty: function empty() {
    this.popupView && this.popupView.empty();
  }
});
BI.Switcher.EVENT_EXPAND = "EVENT_EXPAND";
BI.Switcher.EVENT_COLLAPSE = "EVENT_COLLAPSE";
BI.Switcher.EVENT_TRIGGER_CHANGE = "EVENT_TRIGGER_CHANGE";
BI.Switcher.EVENT_CHANGE = "EVENT_CHANGE";
BI.Switcher.EVENT_AFTER_INIT = "EVENT_AFTER_INIT";
BI.Switcher.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.Switcher.EVENT_AFTER_POPUPVIEW = "EVENT_AFTER_POPUPVIEW";
BI.Switcher.EVENT_BEFORE_HIDEVIEW = "EVENT_BEFORE_HIDEVIEW";
BI.Switcher.EVENT_AFTER_HIDEVIEW = "EVENT_AFTER_HIDEVIEW";
BI.shortcut("bi.switcher", BI.Switcher);

/***/ }),
/* 739 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/6/26.
 */
BI.Tab = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Tab.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-tab",
      direction: "top",
      // top, bottom, left, right, custom
      single: false,
      // 是不是单页面
      logic: {
        dynamic: false
      },
      showIndex: false,
      tab: false,
      cardCreator: function cardCreator(v) {
        return BI.createWidget();
      },
      keepAlives: []
    });
  },
  render: function render() {
    var self = this,
        o = this.options;

    if (BI.isObject(o.tab)) {
      this.tab = BI.createWidget(this.options.tab, {
        type: "bi.button_group"
      });
      this.tab.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
        self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
      });
    }

    this.cardMap = {};
    this.layout = BI.createWidget({
      type: "bi.card"
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(o.direction), BI.extend({}, o.logic, {
      items: BI.LogicFactory.createLogicItemsByDirection(o.direction, this.tab, this.layout)
    }))));
    var listener = new BI.ShowListener({
      eventObj: this.tab,
      cardLayout: this.layout,
      cardCreator: function cardCreator(v) {
        BI.Widget.execWithContext(self, function () {
          self.cardMap[v] = o.cardCreator(v);
        });
        return self.cardMap[v];
      },
      afterCardShow: function afterCardShow(v) {
        self._deleteOtherCards(v);

        self.curr = v;
      }
    });
    listener.on(BI.ShowListener.EVENT_CHANGE, function (value) {
      self.fireEvent(BI.Tab.EVENT_CHANGE, value, self);
    });
  },
  _deleteOtherCards: function _deleteOtherCards(currCardName) {
    var self = this,
        o = this.options;

    if (o.single === true) {
      BI.each(this.cardMap, function (name, card) {
        if (name !== currCardName + "" && self._keepAlive(name) !== true) {
          self.layout.deleteCardByName(name);
          delete self.cardMap[name];
        }
      });
    }
  },
  _assertCard: function _assertCard(v) {
    var self = this,
        o = this.options;

    if (!this.layout.isCardExisted(v)) {
      BI.Widget.execWithContext(this, function () {
        self.cardMap[v] = o.cardCreator(v);
      });
      this.layout.addCardByName(v, this.cardMap[v]);
    }
  },
  _keepAlive: function _keepAlive(v) {
    var o = this.options;
    return BI.isFunction(o.keepAlives) ? o.keepAlives(v) : BI.contains(o.keepAlives, v);
  },
  created: function created() {
    var self = this,
        o = this.options;
    var showIndex;

    if (BI.isFunction(o.showIndex)) {
      showIndex = this.__watch(o.showIndex, function (context, newValue) {
        self.setSelect(newValue);
      });
    } else {
      showIndex = o.showIndex;
    }

    if (showIndex !== false) {
      this.setSelect(showIndex);
    }
  },
  setSelect: function setSelect(v, action, callback) {
    this.tab && this.tab.setValue(v);

    this._assertCard(v);

    this.layout.showCardByName(v, action, callback);

    this._deleteOtherCards(v);

    if (this.curr !== v) {
      this.curr = v;
    }
  },
  removeTab: function removeTab(cardname) {
    var self = this;
    BI.any(this.cardMap, function (name, card) {
      if (BI.isEqual(name, cardname + "")) {
        self.layout.deleteCardByName(name);
        delete self.cardMap[name];
        return true;
      }
    });
  },
  isCardExisted: function isCardExisted(cardName) {
    return this.layout.isCardExisted(cardName);
  },
  getSelect: function getSelect() {
    return this.curr;
  },
  getSelectedTab: function getSelectedTab() {
    return this.layout.getShowingCard();
  },
  getTab: function getTab(v) {
    this._assertCard(v);

    return this.layout.getCardByName(v);
  },
  setValue: function setValue(v) {
    var card = this.layout.getShowingCard();

    if (card) {
      card.setValue(v);
    }
  },
  getValue: function getValue() {
    var card = this.layout.getShowingCard();

    if (card) {
      return card.getValue();
    }
  },
  populate: function populate() {
    var card = this.layout.getShowingCard();

    if (card) {
      return card.populate && card.populate.apply(card, arguments);
    }
  },
  empty: function empty() {
    this.layout.deleteAllCard();
    this.cardMap = {};
  },
  destroy: function destroy() {
    this.cardMap = {};
    BI.Tab.superclass.destroy.apply(this, arguments);
  }
});
BI.Tab.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.tab", BI.Tab);

/***/ }),
/* 740 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2015/8/10.
 * @class BI.ButtonTree
 * @extends BI.ButtonGroup
 */
BI.ButtonTree = BI.inherit(BI.ButtonGroup, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ButtonTree.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-button-tree"
    });
  },
  setNotSelectedValue: function setNotSelectedValue(v) {
    v = BI.isArray(v) ? v : [v];
    BI.each(this.buttons, function (i, item) {
      if (!BI.isFunction(item.setSelected)) {
        item.setNotSelectedValue(v);
        return;
      }

      if (BI.deepContains(v, item.getValue())) {
        item.setSelected(false);
      } else {
        item.setSelected(true);
      }
    });
  },
  setEnabledValue: function setEnabledValue(v) {
    v = BI.isArray(v) ? v : [v];
    BI.each(this.buttons, function (i, item) {
      if (BI.isFunction(item.setEnabledValue)) {
        item.setEnabledValue(v);
        return;
      }

      if (BI.deepContains(v, item.getValue())) {
        item.setEnable(true);
      } else {
        item.setEnable(false);
      }
    });
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    BI.each(this.buttons, function (i, item) {
      if (!BI.isFunction(item.setSelected)) {
        item.setValue(v);
        return;
      }

      if (BI.deepContains(v, item.getValue())) {
        item.setSelected(true);
      } else {
        item.setSelected(false);
      }
    });
  },
  getNotSelectedValue: function getNotSelectedValue() {
    var v = [];
    BI.each(this.buttons, function (i, item) {
      if (item.isEnabled() && !BI.isFunction(item.setSelected)) {
        v = BI.concat(v, item.getNotSelectedValue());
        return;
      }

      if (item.isEnabled() && item.isSelected && !item.isSelected()) {
        v.push(item.getValue());
      }
    });
    return v;
  },
  getValue: function getValue() {
    var v = [];
    BI.each(this.buttons, function (i, item) {
      if (item.isEnabled() && !BI.isFunction(item.setSelected)) {
        v = BI.concat(v, item.getValue());
        return;
      }

      if (item.isEnabled() && item.isSelected && item.isSelected()) {
        v.push(item.getValue());
      }
    });
    return v;
  },
  getSelectedButtons: function getSelectedButtons() {
    var btns = [];
    BI.each(this.buttons, function (i, item) {
      if (item.isEnabled() && !BI.isFunction(item.setSelected)) {
        btns = btns.concat(item.getSelectedButtons());
        return;
      }

      if (item.isSelected && item.isSelected()) {
        btns.push(item);
      }
    });
    return btns;
  },
  getNotSelectedButtons: function getNotSelectedButtons() {
    var btns = [];
    BI.each(this.buttons, function (i, item) {
      if (item.isEnabled() && !BI.isFunction(item.setSelected)) {
        btns = btns.concat(item.getNotSelectedButtons());
        return;
      }

      if (item.isSelected && !item.isSelected()) {
        btns.push(item);
      }
    });
    return btns;
  },
  // 获取所有的叶子节点
  getAllLeaves: function getAllLeaves() {
    var leaves = [];
    BI.each(this.buttons, function (i, item) {
      if (item.isEnabled() && !BI.isFunction(item.setSelected)) {
        leaves = leaves.concat(item.getAllLeaves());
        return;
      }

      if (item.isEnabled()) {
        leaves.push(item);
      }
    });
    return leaves;
  },
  getIndexByValue: function getIndexByValue(value) {
    var index = -1;
    BI.any(this.buttons, function (i, item) {
      var vs = item.getValue();

      if (item.isEnabled() && (vs === value || BI.contains(vs, value))) {
        index = i;
        return true;
      }
    });
    return index;
  },
  getNodeById: function getNodeById(id) {
    var node;
    BI.any(this.buttons, function (i, item) {
      if (item.isEnabled()) {
        if (item.attr("id") === id) {
          node = item;
          return true;
        } else if (BI.isFunction(item.getNodeById)) {
          node = item.getNodeById(id);

          if (node) {
            return true;
          }
        }
      }
    });
    return node;
  },
  getNodeByValue: function getNodeByValue(value) {
    var node;
    BI.any(this.buttons, function (i, item) {
      if (item.isEnabled()) {
        if (BI.isFunction(item.getNodeByValue)) {
          node = item.getNodeByValue(value);

          if (node) {
            return true;
          }
        } else if (item.attr("value") === value) {
          node = item;
          return true;
        }
      }
    });
    return node;
  }
});
BI.ButtonTree.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.button_tree", BI.ButtonTree);

/***/ }),
/* 741 */
/***/ (function(module, exports) {

/**
 * 表示当前对象
 *
 * Created by GUY on 2015/9/7.
 * @class BI.EL
 * @extends BI.Widget
 */
BI.Context = BI.inherit(BI.Widget, {
  props: {
    context: "",
    watch: {},
    el: {},
    items: []
  },
  render: function render() {
    var self = this,
        o = this.options;

    if (o.context) {
      this.context = BI.useContext(o.context);
    }

    this.widget = BI.createWidget((o.items[0] || o.el)(this.context), {
      element: this
    });
    this.widget.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
  },
  __initWatch: function __initWatch() {
    BI.Context.superclass.__initWatch.call(this);

    var o = this.options;
    BI.watch(this.context, o.context, o.watch);
  },
  setValue: function setValue(v) {
    this.widget.setValue(v);
  },
  getValue: function getValue() {
    return this.widget.getValue();
  },
  populate: function populate() {
    this.widget.populate.apply(this, arguments);
  }
});
BI.shortcut("bi.context", BI.Context);

/***/ }),
/* 742 */
/***/ (function(module, exports) {

/**
 * 表示当前对象
 *
 * Created by GUY on 2015/9/7.
 * @class BI.EL
 * @extends BI.Widget
 */
BI.EL = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.EL.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-el",
      el: {}
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.ele = BI.createWidget(o.el, {
      element: this
    });
    this.ele.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
  },
  setValue: function setValue(v) {
    this.ele.setValue(v);
  },
  getValue: function getValue() {
    return this.ele.getValue();
  },
  populate: function populate() {
    this.ele.populate.apply(this, arguments);
  }
});
BI.shortcut("bi.el", BI.EL);

/***/ }),
/* 743 */
/***/ (function(module, exports) {

/**
 * z-index在1亿层级
 * 弹出提示消息框，用于模拟阻塞操作（通过回调函数实现）
 * @class BI.Msg
 */
BI.Msg = function () {
  var $mask, $pop;
  var messageShows = [];
  var toastStack = [];
  return {
    alert: function alert(title, message, callback) {
      this._show(false, title, message, callback);
    },
    confirm: function confirm(title, message, callback) {
      this._show(true, title, message, callback);
    },
    prompt: function prompt(title, message, value, callback, min_width) {// BI.Msg.prompt(title, message, value, callback, min_width);
    },
    toast: function toast(message, options, context) {
      BI.isString(options) && (options = {
        level: options
      });
      options = options || {};
      context = context || BI.Widget._renderEngine.createElement("body");
      var level = options.level || "common";
      var autoClose = BI.isNull(options.autoClose) ? true : options.autoClose;
      var callback = BI.isFunction(options.callback) ? options.callback : BI.emptyFn;
      var toast = BI.createWidget({
        type: "bi.toast",
        cls: "bi-message-animate bi-message-leave",
        level: level,
        autoClose: autoClose,
        closable: options.closable,
        text: message,
        listeners: [{
          eventName: BI.Toast.EVENT_DESTORY,
          action: function action() {
            BI.remove(toastStack, toast.element);
            var _height = BI.SIZE_CONSANTS.TOAST_TOP;
            BI.each(toastStack, function (i, element) {
              element.css({
                "top": _height
              });
              _height += element.outerHeight() + 10;
            });
            callback();
          }
        }]
      });
      var height = BI.SIZE_CONSANTS.TOAST_TOP;
      BI.each(toastStack, function (i, element) {
        height += element.outerHeight() + 10;
      });
      BI.createWidget({
        type: "bi.absolute",
        element: context,
        items: [{
          el: toast,
          left: "50%",
          top: height
        }]
      });
      toastStack.push(toast.element);
      toast.element.css({
        "margin-left": -1 * toast.element.outerWidth() / 2
      });
      toast.element.removeClass("bi-message-leave").addClass("bi-message-enter");
      autoClose && BI.delay(function () {
        var _toast$destroy;

        toast.element.removeClass("bi-message-enter").addClass("bi-message-leave");
        (_toast$destroy = toast.destroy) === null || _toast$destroy === void 0 ? void 0 : _toast$destroy.call(toast);
      }, 5000);
      return function () {
        var _toast$destroy2;

        toast.element.removeClass("bi-message-enter").addClass("bi-message-leave");
        (_toast$destroy2 = toast.destroy) === null || _toast$destroy2 === void 0 ? void 0 : _toast$destroy2.call(toast);
      };
    },
    _show: function _show(hasCancel, title, message, callback) {
      BI.isNull($mask) && ($mask = BI.Widget._renderEngine.createElement("<div class=\"bi-z-index-mask\">").css({
        position: "absolute",
        zIndex: BI.zIndex_tip - 2,
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        opacity: 0.5
      }).appendTo("body"));
      $pop = BI.Widget._renderEngine.createElement("<div class=\"bi-message-depend\">").css({
        position: "absolute",
        zIndex: BI.zIndex_tip - 1,
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      }).appendTo("body");

      function close() {
        messageShows[messageShows.length - 1].destroy();
        messageShows.pop();

        if (messageShows.length === 0) {
          $mask.remove();
          $mask = null;
        }
      }

      var controlItems = [];

      if (hasCancel === true) {
        controlItems.push({
          el: {
            type: "bi.button",
            text: BI.i18nText("BI-Basic_Cancel"),
            level: "ignore",
            handler: function handler() {
              close();

              if (BI.isFunction(callback)) {
                callback.apply(null, [false]);
              }
            }
          }
        });
      }

      controlItems.push({
        el: {
          type: "bi.button",
          text: BI.i18nText("BI-Basic_OK"),
          handler: function handler() {
            close();

            if (BI.isFunction(callback)) {
              callback.apply(null, [true]);
            }
          }
        }
      });
      var conf = {
        element: $pop,
        type: "bi.center_adapt",
        items: [{
          type: "bi.border",
          attributes: {
            tabIndex: 1
          },
          mounted: function mounted() {
            this.element.keyup(function (e) {
              if (e.keyCode === BI.KeyCode.ENTER) {
                close();

                if (BI.isFunction(callback)) {
                  callback.apply(null, [true]);
                }
              } else if (e.keyCode === BI.KeyCode.ESCAPE) {
                close();

                if (hasCancel === true) {
                  if (BI.isFunction(callback)) {
                    callback.apply(null, [false]);
                  }
                }
              }
            });

            try {
              this.element.focus();
            } catch (e) {}
          },
          cls: "bi-card",
          items: {
            north: {
              el: {
                type: "bi.border",
                cls: "bi-message-title bi-background",
                items: {
                  center: {
                    el: {
                      type: "bi.label",
                      cls: "bi-font-bold",
                      text: title || BI.i18nText("BI-Basic_Prompt"),
                      textAlign: "left",
                      hgap: 20,
                      height: 40
                    }
                  },
                  east: {
                    el: {
                      type: "bi.icon_button",
                      cls: "bi-message-close close-font",
                      //                                                    height: 50,
                      handler: function handler() {
                        close();

                        if (BI.isFunction(callback)) {
                          callback.apply(null, [false]);
                        }
                      }
                    },
                    width: 56
                  }
                }
              },
              height: 40
            },
            center: {
              el: BI.isPlainObject(message) ? message : {
                type: "bi.label",
                vgap: 10,
                hgap: 20,
                whiteSpace: "normal",
                text: message
              }
            },
            south: {
              el: {
                type: "bi.absolute",
                items: [{
                  el: {
                    type: "bi.right_vertical_adapt",
                    lgap: 10,
                    items: controlItems
                  },
                  top: 0,
                  left: 20,
                  right: 20,
                  bottom: 0
                }]
              },
              height: 44
            }
          },
          width: 450,
          height: 200
        }]
      };
      messageShows[messageShows.length] = BI.createWidget(conf);
    }
  };
}();

/***/ }),
/* 744 */
/***/ (function(module, exports) {

/**
 * GridView
 *
 * Created by GUY on 2016/1/11.
 * @class BI.GridView
 * @extends BI.Widget
 */
BI.GridView = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.GridView.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-grid-view",
      // width: 400, //必设
      // height: 300, //必设
      scrollable: true,
      scrollx: false,
      scrolly: false,
      overflowX: true,
      overflowY: true,
      el: {
        type: "bi.vertical"
      },
      overscanColumnCount: 0,
      overscanRowCount: 0,
      rowHeightGetter: BI.emptyFn,
      // number类型或function类型
      columnWidthGetter: BI.emptyFn,
      // number类型或function类型
      // estimatedColumnSize: 100, //columnWidthGetter为function时必设
      // estimatedRowSize: 30, //rowHeightGetter为function时必设
      scrollLeft: 0,
      scrollTop: 0,
      items: [],
      itemFormatter: function itemFormatter(item, row, col) {
        return item;
      }
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.renderedCells = [];
    this.renderedKeys = [];
    this.renderRange = {};
    this._scrollLock = false;
    this._debounceRelease = BI.debounce(function () {
      self._scrollLock = false;
    }, 1000 / 60);
    this.container = BI._lazyCreateWidget({
      type: "bi.absolute"
    });
    this.element.scroll(function () {
      if (self._scrollLock === true) {
        return;
      }

      o.scrollLeft = self.element.scrollLeft();
      o.scrollTop = self.element.scrollTop();

      self._calculateChildrenToRender();

      self.fireEvent(BI.GridView.EVENT_SCROLL, {
        scrollLeft: o.scrollLeft,
        scrollTop: o.scrollTop
      });
    }); // 兼容一下

    var scrollable = o.scrollable,
        scrollx = o.scrollx,
        scrolly = o.scrolly;

    if (o.overflowX === false) {
      if (o.overflowY === false) {
        scrollable = false;
      } else {
        scrollable = "y";
      }
    } else {
      if (o.overflowY === false) {
        scrollable = "x";
      }
    }

    BI._lazyCreateWidget(o.el, {
      type: "bi.vertical",
      element: this,
      scrollable: scrollable,
      scrolly: scrolly,
      scrollx: scrollx,
      items: [this.container]
    });

    o.items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;

    if (o.items.length > 0) {
      this._calculateSizeAndPositionData();

      this._populate();
    }
  },
  // mounted之后绑定事件
  mounted: function mounted() {
    var o = this.options;

    if (o.scrollLeft !== 0 || o.scrollTop !== 0) {
      this.element.scrollTop(o.scrollTop);
      this.element.scrollLeft(o.scrollLeft);
    }
  },
  destroyed: function destroyed() {
    BI.each(this.renderedCells, function (i, cell) {
      cell.el._destroy();
    });
  },
  _calculateSizeAndPositionData: function _calculateSizeAndPositionData() {
    var o = this.options;
    this.rowCount = 0;
    this.columnCount = 0;

    if (BI.isNumber(o.columnCount)) {
      this.columnCount = o.columnCount;
    } else if (o.items.length > 0) {
      this.columnCount = o.items[0].length;
    }

    if (BI.isNumber(o.rowCount)) {
      this.rowCount = o.rowCount;
    } else {
      this.rowCount = o.items.length;
    }

    this._columnSizeAndPositionManager = new BI.ScalingCellSizeAndPositionManager(this.columnCount, o.columnWidthGetter, o.estimatedColumnSize);
    this._rowSizeAndPositionManager = new BI.ScalingCellSizeAndPositionManager(this.rowCount, o.rowHeightGetter, o.estimatedRowSize);
  },
  _getOverscanIndices: function _getOverscanIndices(cellCount, overscanCellsCount, startIndex, stopIndex) {
    return {
      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),
      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)
    };
  },
  _calculateChildrenToRender: function _calculateChildrenToRender() {
    var self = this,
        o = this.options;
    var width = o.width,
        height = o.height,
        scrollLeft = BI.clamp(o.scrollLeft, 0, this._getMaxScrollLeft()),
        scrollTop = BI.clamp(o.scrollTop, 0, this._getMaxScrollTop()),
        overscanColumnCount = o.overscanColumnCount,
        overscanRowCount = o.overscanRowCount;

    if (height > 0 && width > 0) {
      var visibleColumnIndices = this._columnSizeAndPositionManager.getVisibleCellRange(width, scrollLeft);

      var visibleRowIndices = this._rowSizeAndPositionManager.getVisibleCellRange(height, scrollTop);

      var renderedCells = [],
          renderedKeys = {},
          renderedWidgets = {}; // 没有可见的单元格就干掉所有渲染过的

      if (!BI.isEmpty(visibleColumnIndices) && !BI.isEmpty(visibleRowIndices)) {
        var horizontalOffsetAdjustment = this._columnSizeAndPositionManager.getOffsetAdjustment(width, scrollLeft);

        var verticalOffsetAdjustment = this._rowSizeAndPositionManager.getOffsetAdjustment(height, scrollTop);

        this._renderedColumnStartIndex = visibleColumnIndices.start;
        this._renderedColumnStopIndex = visibleColumnIndices.stop;
        this._renderedRowStartIndex = visibleRowIndices.start;
        this._renderedRowStopIndex = visibleRowIndices.stop;

        var overscanColumnIndices = this._getOverscanIndices(this.columnCount, overscanColumnCount, this._renderedColumnStartIndex, this._renderedColumnStopIndex);

        var overscanRowIndices = this._getOverscanIndices(this.rowCount, overscanRowCount, this._renderedRowStartIndex, this._renderedRowStopIndex);

        var columnStartIndex = overscanColumnIndices.overscanStartIndex;
        var columnStopIndex = overscanColumnIndices.overscanStopIndex;
        var rowStartIndex = overscanRowIndices.overscanStartIndex;
        var rowStopIndex = overscanRowIndices.overscanStopIndex; // 算区间size

        var minRowDatum = this._rowSizeAndPositionManager.getSizeAndPositionOfCell(rowStartIndex);

        var minColumnDatum = this._columnSizeAndPositionManager.getSizeAndPositionOfCell(columnStartIndex);

        var maxRowDatum = this._rowSizeAndPositionManager.getSizeAndPositionOfCell(rowStopIndex);

        var maxColumnDatum = this._columnSizeAndPositionManager.getSizeAndPositionOfCell(columnStopIndex);

        var top = minRowDatum.offset + verticalOffsetAdjustment;
        var left = minColumnDatum.offset + horizontalOffsetAdjustment;
        var bottom = maxRowDatum.offset + verticalOffsetAdjustment + maxRowDatum.size;
        var right = maxColumnDatum.offset + horizontalOffsetAdjustment + maxColumnDatum.size; // 如果滚动的区间并没有超出渲染的范围

        if (top >= this.renderRange.minY && bottom <= this.renderRange.maxY && left >= this.renderRange.minX && right <= this.renderRange.maxX) {
          return;
        }

        var minX = this._getMaxScrollLeft(),
            minY = this._getMaxScrollTop(),
            maxX = 0,
            maxY = 0;

        var count = 0;

        for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {
          var rowDatum = this._rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);

          for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {
            var key = rowIndex + "-" + columnIndex;

            var columnDatum = this._columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);

            var index = this.renderedKeys[key] && this.renderedKeys[key][2];
            var child;

            if (index >= 0) {
              this.renderedCells[index].el.setWidth(columnDatum.size);
              this.renderedCells[index].el.setHeight(rowDatum.size); // 这里只使用px

              this.renderedCells[index].el.element.css("left", columnDatum.offset + horizontalOffsetAdjustment + "px");
              this.renderedCells[index].el.element.css("top", rowDatum.offset + verticalOffsetAdjustment + "px");
              child = this.renderedCells[index].el;
              renderedCells.push(this.renderedCells[index]);
            } else {
              var item = o.itemFormatter(o.items[rowIndex][columnIndex], rowIndex, columnIndex);
              child = BI._lazyCreateWidget(BI.extend({
                type: "bi.label",
                width: columnDatum.size,
                height: rowDatum.size
              }, item, {
                cls: (item.cls || "") + " grid-cell" + (rowIndex === 0 ? " first-row" : "") + (columnIndex === 0 ? " first-col" : ""),
                _rowIndex: rowIndex,
                _columnIndex: columnIndex,
                _left: columnDatum.offset + horizontalOffsetAdjustment,
                _top: rowDatum.offset + verticalOffsetAdjustment
              }), this);
              renderedCells.push({
                el: child,
                left: columnDatum.offset + horizontalOffsetAdjustment + "px",
                top: rowDatum.offset + verticalOffsetAdjustment + "px",
                _left: columnDatum.offset + horizontalOffsetAdjustment,
                _top: rowDatum.offset + verticalOffsetAdjustment // _width: columnDatum.size,
                // _height: rowDatum.size

              });
            }

            minX = Math.min(minX, columnDatum.offset + horizontalOffsetAdjustment);
            maxX = Math.max(maxX, columnDatum.offset + horizontalOffsetAdjustment + columnDatum.size);
            minY = Math.min(minY, rowDatum.offset + verticalOffsetAdjustment);
            maxY = Math.max(maxY, rowDatum.offset + verticalOffsetAdjustment + rowDatum.size);
            renderedKeys[key] = [rowIndex, columnIndex, count];
            renderedWidgets[count] = child;
            count++;
          }
        }
      } // 已存在的， 需要添加的和需要删除的


      var existSet = {},
          addSet = {},
          deleteArray = [];
      BI.each(renderedKeys, function (i, key) {
        if (self.renderedKeys[i]) {
          existSet[i] = key;
        } else {
          addSet[i] = key;
        }
      });
      BI.each(this.renderedKeys, function (i, key) {
        if (existSet[i]) {
          return;
        }

        if (addSet[i]) {
          return;
        }

        deleteArray.push(key[2]);
      });
      BI.each(deleteArray, function (i, index) {
        // 性能优化，不调用destroy方法防止触发destroy事件
        self.renderedCells[index].el._destroy();
      });
      var addedItems = [];
      BI.each(addSet, function (index, key) {
        addedItems.push(renderedCells[key[2]]);
      }); // 与listview一样, 给上下文

      this.container.addItems(addedItems, this); // 拦截父子级关系

      this.container._children = renderedWidgets;
      this.container.attr("items", renderedCells);
      this.renderedCells = renderedCells;
      this.renderedKeys = renderedKeys;
      this.renderRange = {
        minX: minX,
        minY: minY,
        maxX: maxX,
        maxY: maxY
      };
    }
  },
  _isOverflowX: function _isOverflowX() {
    var o = this.options; // 兼容一下

    var scrollable = o.scrollable,
        scrollx = o.scrollx;

    if (o.overflowX === false) {
      return false;
    }

    if (scrollx) {
      return true;
    }

    if (scrollable === true || scrollable === "xy" || scrollable === "x") {
      return true;
    }

    return false;
  },
  _isOverflowY: function _isOverflowY() {
    var o = this.options; // 兼容一下

    var scrollable = o.scrollable,
        scrolly = o.scrolly;

    if (o.overflowX === false) {
      return false;
    }

    if (scrolly) {
      return true;
    }

    if (scrollable === true || scrollable === "xy" || scrollable === "y") {
      return true;
    }

    return false;
  },
  _getMaxScrollLeft: function _getMaxScrollLeft() {
    return Math.max(0, this._getContainerWidth() - this.options.width + (this._isOverflowX() ? BI.DOM.getScrollWidth() : 0));
  },
  _getMaxScrollTop: function _getMaxScrollTop() {
    return Math.max(0, this._getContainerHeight() - this.options.height + (this._isOverflowY() ? BI.DOM.getScrollWidth() : 0));
  },
  _getContainerWidth: function _getContainerWidth() {
    return this.columnCount * this.options.estimatedColumnSize;
  },
  _getContainerHeight: function _getContainerHeight() {
    return this.rowCount * this.options.estimatedRowSize;
  },
  _populate: function _populate(items) {
    var o = this.options;

    this._reRange();

    if (items && items !== this.options.items) {
      this.options.items = items;

      this._calculateSizeAndPositionData();
    }

    this.container.setWidth(this._getContainerWidth());
    this.container.setHeight(this._getContainerHeight()); // 元素未挂载时不能设置scrollTop

    this._debounceRelease();

    try {
      this.element.scrollTop(o.scrollTop);
      this.element.scrollLeft(o.scrollLeft);
    } catch (e) {}

    this._calculateChildrenToRender();
  },
  setScrollLeft: function setScrollLeft(scrollLeft) {
    if (this.options.scrollLeft === scrollLeft) {
      return;
    }

    this._scrollLock = true;
    this.options.scrollLeft = BI.clamp(scrollLeft || 0, 0, this._getMaxScrollLeft());

    this._debounceRelease();

    this.element.scrollLeft(this.options.scrollLeft);

    this._calculateChildrenToRender();
  },
  setScrollTop: function setScrollTop(scrollTop) {
    if (this.options.scrollTop === scrollTop) {
      return;
    }

    this._scrollLock = true;
    this.options.scrollTop = BI.clamp(scrollTop || 0, 0, this._getMaxScrollTop());

    this._debounceRelease();

    this.element.scrollTop(this.options.scrollTop);

    this._calculateChildrenToRender();
  },
  setColumnCount: function setColumnCount(columnCount) {
    this.options.columnCount = columnCount;
  },
  setRowCount: function setRowCount(rowCount) {
    this.options.rowCount = rowCount;
  },
  setOverflowX: function setOverflowX(b) {
    var self = this;

    if (this.options.overflowX !== !!b) {
      this.options.overflowX = !!b;
      BI.nextTick(function () {
        self.element.css({
          overflowX: b ? "auto" : "hidden"
        });
      });
    }
  },
  setOverflowY: function setOverflowY(b) {
    var self = this;

    if (this.options.overflowY !== !!b) {
      this.options.overflowY = !!b;
      BI.nextTick(function () {
        self.element.css({
          overflowY: b ? "auto" : "hidden"
        });
      });
    }
  },
  getScrollLeft: function getScrollLeft() {
    return this.options.scrollLeft;
  },
  getScrollTop: function getScrollTop() {
    return this.options.scrollTop;
  },
  getMaxScrollLeft: function getMaxScrollLeft() {
    return this._getMaxScrollLeft();
  },
  getMaxScrollTop: function getMaxScrollTop() {
    return this._getMaxScrollTop();
  },
  setEstimatedColumnSize: function setEstimatedColumnSize(width) {
    this.options.estimatedColumnSize = width;
  },
  setEstimatedRowSize: function setEstimatedRowSize(height) {
    this.options.estimatedRowSize = height;
  },
  // 重新计算children
  _reRange: function _reRange() {
    this.renderRange = {};
  },
  _clearChildren: function _clearChildren() {
    this.container._children = {};
    this.container.attr("items", []);
  },
  restore: function restore() {
    BI.each(this.renderedCells, function (i, cell) {
      cell.el._destroy();
    });

    this._clearChildren();

    this.renderedCells = [];
    this.renderedKeys = [];
    this.renderRange = {};
    this._scrollLock = false;
  },
  populate: function populate(items) {
    if (items && items !== this.options.items) {
      this.restore();
    }

    this._populate(items);
  }
});
BI.GridView.EVENT_SCROLL = "EVENT_SCROLL";
BI.shortcut("bi.grid_view", BI.GridView);

/***/ }),
/* 745 */
/***/ (function(module, exports) {

/**
 * 边滚动边加载的列表控件
 *
 * Created by GUY on 2017/5/23.
 * @class BI.ListView
 * @extends BI.Widget
 */
BI.ListView = BI.inherit(BI.Widget, {
  props: function props() {
    return {
      baseCls: "bi-list-view",
      overscanHeight: 100,
      blockSize: 10,
      scrollTop: 0,
      el: {},
      items: [],
      itemFormatter: function itemFormatter(item, index) {
        return item;
      }
    };
  },
  init: function init() {
    this.renderedIndex = -1;
    this.cache = {};
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical",
      items: [BI.extend({
        type: "bi.vertical",
        scrolly: false,
        ref: function ref(_ref) {
          self.container = _ref;
        }
      }, o.el)],
      element: this
    };
  },
  // mounted之后绑定事件
  mounted: function mounted() {
    var self = this,
        o = this.options;
    o.items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;

    this._populate();

    this.element.scroll(function (e) {
      o.scrollTop = self.element.scrollTop();

      self._calculateBlocksToRender();
    });
    var lastWidth = this.element.width(),
        lastHeight = this.element.height();
    BI.ResizeDetector.addResizeListener(this, function () {
      if (!self.element.is(":visible")) {
        return;
      }

      var width = self.element.width(),
          height = self.element.height();

      if (width !== lastWidth || height !== lastHeight) {
        lastWidth = width;
        lastHeight = height;

        self._calculateBlocksToRender();
      }
    });
  },
  _renderMoreIf: function _renderMoreIf() {
    var self = this,
        o = this.options;
    var height = this.element.height();
    var minContentHeight = o.scrollTop + height + o.overscanHeight;
    var index = this.cache[this.renderedIndex] && this.cache[this.renderedIndex].index + o.blockSize || 0;
    var cnt = this.renderedIndex + 1;
    var lastHeight;

    function getElementHeight() {
      return self.container.element.height();
    }

    lastHeight = getElementHeight();

    while (lastHeight < minContentHeight && index < o.items.length) {
      var items = o.items.slice(index, index + o.blockSize);
      this.container.addItems(items.map(function (item, i) {
        return o.itemFormatter(item, index + i);
      }), this);
      var addedHeight = getElementHeight() - lastHeight;
      this.cache[cnt] = {
        index: index,
        scrollTop: lastHeight,
        height: addedHeight
      };
      this.renderedIndex = cnt;
      cnt++;
      index += o.blockSize;
      lastHeight = getElementHeight();
    }
  },
  _calculateBlocksToRender: function _calculateBlocksToRender() {
    // BI-115750 不可见状态下依赖元素实际尺寸构造的线段树会分段错误，所以不进行后续计算和线段树的初始化。
    // 这样从不可见状态变为可见状态能够重新触发线段树初始化
    if (!this.element.is(":visible")) {
      return;
    }

    this._renderMoreIf();
  },
  _populate: function _populate(items) {
    var o = this.options;

    if (items && this.options.items !== items) {
      this.options.items = items;
    }

    this._calculateBlocksToRender();

    this.element.scrollTop(o.scrollTop);
  },
  restore: function restore() {
    this.renderedIndex = -1;
    this.container.empty();
    this.cache = {};
  },
  scrollTo: function scrollTo(scrollTop) {
    this.options.scrollTop = scrollTop;

    this._calculateBlocksToRender();

    this.element.scrollTop(scrollTop);
  },
  populate: function populate(items) {
    if (items && this.options.items !== items) {
      this.restore();
    }

    this._populate(items);
  },
  beforeDestroy: function beforeDestroy() {
    BI.ResizeDetector.removeResizeListener(this);
    this.restore();
  }
});
BI.shortcut("bi.list_view", BI.ListView);

/***/ }),
/* 746 */
/***/ (function(module, exports) {

/**
 * 同时用于virtualGroup和virtualList特性的虚拟列表
 *
 * Created by GUY on 2017/5/22.
 * @class BI.VirtualList
 * @extends BI.Widget
 */
BI.VirtualGroupList = BI.inherit(BI.Widget, {
  props: function props() {
    return {
      baseCls: "bi-virtual-group-list",
      overscanHeight: 100,
      blockSize: 10,
      scrollTop: 0,
      rowHeight: "auto",
      items: [],
      el: {},
      itemFormatter: function itemFormatter(item, index) {
        return item;
      }
    };
  },
  init: function init() {
    this.renderedIndex = -1;
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical",
      items: [{
        type: "bi.layout",
        ref: function ref() {
          self.topBlank = this;
        }
      }, {
        type: "bi.virtual_group",
        height: o.rowHeight * o.items.length,
        ref: function ref() {
          self.container = this;
        },
        layouts: [BI.extend({
          type: "bi.vertical",
          scrolly: false
        }, o.el)]
      }, {
        type: "bi.layout",
        ref: function ref() {
          self.bottomBlank = this;
        }
      }],
      element: this
    };
  },
  // mounted之后绑定事件
  mounted: function mounted() {
    var self = this,
        o = this.options;
    o.items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;

    this._populate();

    this.ticking = false;
    this.element.scroll(function () {
      o.scrollTop = self.element.scrollTop();

      if (!self.ticking) {
        requestAnimationFrame(function () {
          self._calculateBlocksToRender();

          self.ticking = false;
        });
        self.ticking = true;
      }
    });
    BI.ResizeDetector.addResizeListener(this, function () {
      if (self.element.is(":visible")) {
        self._calculateBlocksToRender();
      }
    });
  },
  _isAutoHeight: function _isAutoHeight() {
    return !BI.isNumber(this.options.rowHeight);
  },
  _renderMoreIf: function _renderMoreIf() {
    var self = this,
        o = this.options;
    var height = this.element.height();
    var minContentHeight = o.scrollTop + height + o.overscanHeight;
    var index = (this.renderedIndex + 1) * o.blockSize,
        cnt = this.renderedIndex + 1;
    var lastHeight;

    function getElementHeight() {
      return self.container.element.height() + self.topBlank.element.height() + self.bottomBlank.element.height();
    }

    lastHeight = this.renderedIndex === -1 ? 0 : getElementHeight();

    while (lastHeight < minContentHeight && index < o.items.length) {
      var items = o.items.slice(index, index + o.blockSize);
      this.container[self.renderedIndex === -1 ? "populate" : "addItems"](items.map(function (item, i) {
        return o.itemFormatter(item, index + i);
      }), this);
      var elementHeight = getElementHeight();
      var addedHeight = elementHeight - lastHeight;
      this.tree.set(cnt, addedHeight);
      this.renderedIndex = cnt;
      cnt++;
      index += o.blockSize;
      lastHeight = this.renderedIndex === -1 ? 0 : elementHeight;
    }
  },
  _calculateBlocksToRender: function _calculateBlocksToRender() {
    // BI-115750 不可见状态下依赖元素实际尺寸构造的线段树会分段错误，所以不进行后续计算和线段树的初始化。
    // 这样从不可见状态变为可见状态能够重新触发线段树初始化
    if (!this.element.is(":visible")) {
      return;
    }

    var o = this.options;
    this._isAutoHeight() && this._renderMoreIf();
    var height = this.element.height();
    var minContentHeightFrom = o.scrollTop - o.overscanHeight;
    var minContentHeightTo = o.scrollTop + height + o.overscanHeight;
    var start = this.tree.greatestLowerBound(minContentHeightFrom);
    var end = this.tree.leastUpperBound(minContentHeightTo);
    var items = [];
    var topHeight = this.tree.sumTo(Math.max(-1, start - 1));
    this.topBlank.setHeight(topHeight + "px");

    if (this._isAutoHeight()) {
      for (var i = start < 0 ? 0 : start; i <= end && i <= this.renderedIndex; i++) {
        var index = i * o.blockSize;

        for (var j = index; j < index + o.blockSize && j < o.items.length; j++) {
          items.push(o.items[j]);
        }
      }

      this.bottomBlank.setHeight(this.tree.sumTo(this.renderedIndex) - this.tree.sumTo(Math.min(end, this.renderedIndex)) + "px");
      this.container.populate(items.map(function (item, i) {
        return o.itemFormatter(item, (start < 0 ? 0 : start) * o.blockSize + i);
      }));
    } else {
      for (var i = start < 0 ? 0 : start; i <= end; i++) {
        var index = i * o.blockSize;

        for (var j = index; j < index + o.blockSize && j < o.items.length; j++) {
          items.push(o.items[j]);
        }
      }

      this.container.element.height(o.rowHeight * o.items.length - topHeight);
      this.container.populate(items.map(function (item, i) {
        return o.itemFormatter(item, (start < 0 ? 0 : start) * o.blockSize + i);
      }));
    }
  },
  _populate: function _populate(items) {
    var o = this.options;

    if (items && this.options.items !== items) {
      // 重新populate一组items,需要重新对线段树分块
      this.options.items = items;

      this._restore();
    }

    this.tree = BI.PrefixIntervalTree.uniform(Math.ceil(o.items.length / o.blockSize), this._isAutoHeight() ? 0 : o.rowHeight * o.blockSize);

    this._calculateBlocksToRender();

    try {
      this.element.scrollTop(o.scrollTop);
    } catch (e) {}
  },
  _restore: function _restore() {
    this.renderedIndex = -1; // 依赖于cache的占位元素也要初始化

    this.topBlank.setHeight(0);
    this.bottomBlank.setHeight(0);
  },
  // 暂时只支持固定行高的场景
  scrollTo: function scrollTo(scrollTop) {
    this.options.scrollTop = scrollTop;

    this._calculateBlocksToRender();

    this.element.scrollTop(scrollTop);
  },
  restore: function restore() {
    this.options.scrollTop = 0;

    this._restore();
  },
  populate: function populate(items) {
    this._populate(items);
  },
  beforeDestroy: function beforeDestroy() {
    BI.ResizeDetector.removeResizeListener(this);
    this.restore();
  }
});
BI.shortcut("bi.virtual_group_list", BI.VirtualGroupList);

/***/ }),
/* 747 */
/***/ (function(module, exports) {

/**
 * 虚拟列表
 *
 * Created by GUY on 2017/5/22.
 * @class BI.VirtualList
 * @extends BI.Widget
 */
BI.VirtualList = BI.inherit(BI.Widget, {
  props: function props() {
    return {
      baseCls: "bi-virtual-list",
      overscanHeight: 100,
      blockSize: 10,
      scrollTop: 0,
      items: [],
      itemFormatter: function itemFormatter(item, index) {
        return item;
      }
    };
  },
  init: function init() {
    this.renderedIndex = -1;
    this.cache = {};
  },
  render: function render() {
    var self = this;
    return {
      type: "bi.vertical",
      items: [{
        type: "bi.layout",
        ref: function ref() {
          self.topBlank = this;
        }
      }, {
        type: "bi.vertical",
        scrolly: false,
        ref: function ref() {
          self.container = this;
        }
      }, {
        type: "bi.layout",
        ref: function ref() {
          self.bottomBlank = this;
        }
      }]
    };
  },
  // mounted之后绑定事件
  mounted: function mounted() {
    var self = this,
        o = this.options;
    o.items = BI.isFunction(o.items) ? this.__watch(o.items, function (context, newValue) {
      self.populate(newValue);
    }) : o.items;

    this._populate();

    this.element.scroll(function (e) {
      o.scrollTop = self.element.scrollTop();

      self._calculateBlocksToRender();
    });
    BI.ResizeDetector.addResizeListener(this, function () {
      if (self.element.is(":visible")) {
        self._calculateBlocksToRender();
      }
    });
  },
  _renderMoreIf: function _renderMoreIf() {
    var self = this,
        o = this.options;
    var height = this.element.height();
    var minContentHeight = o.scrollTop + height + o.overscanHeight;
    var index = (this.renderedIndex + 1) * o.blockSize,
        cnt = this.renderedIndex + 1;
    var lastHeight;

    function getElementHeight() {
      return self.container.element.height() + self.topBlank.element.height() + self.bottomBlank.element.height();
    }

    lastHeight = getElementHeight();

    while (lastHeight < minContentHeight && index < o.items.length) {
      var items = o.items.slice(index, index + o.blockSize);
      this.container.addItems(items.map(function (item, i) {
        return o.itemFormatter(item, index + i);
      }), this);
      var addedHeight = getElementHeight() - lastHeight;
      this.tree.set(cnt, addedHeight);
      this.renderedIndex = cnt;
      cnt++;
      index += o.blockSize;
      lastHeight = getElementHeight();
    }
  },
  _calculateBlocksToRender: function _calculateBlocksToRender() {
    var o = this.options; // BI-115750 不可见状态下依赖元素实际尺寸构造的线段树会分段错误，所以不进行后续计算和线段树的初始化。
    // 这样从不可见状态变为可见状态能够重新触发线段树初始化

    if (!this.element.is(":visible")) {
      return;
    }

    this._renderMoreIf();

    var height = this.element.height();
    var minContentHeightFrom = o.scrollTop - o.overscanHeight;
    var minContentHeightTo = o.scrollTop + height + o.overscanHeight;
    var start = this.tree.greatestLowerBound(minContentHeightFrom);
    var end = this.tree.leastUpperBound(minContentHeightTo);
    var needDestroyed = [],
        needMount = [];

    for (var i = 0; i < start; i++) {
      var index = i * o.blockSize;

      if (!this.cache[i]) {
        this.cache[i] = {};
      }

      if (!this.cache[i].destroyed) {
        for (var j = index; j < index + o.blockSize && j < o.items.length; j++) {
          needDestroyed.push(this.container._children[j]);
          this.container._children[j] = null;
        }

        this.cache[i].destroyed = true;
      }
    }

    for (var i = end + 1; i <= this.renderedIndex; i++) {
      var index = i * o.blockSize;

      if (!this.cache[i]) {
        this.cache[i] = {};
      }

      if (!this.cache[i].destroyed) {
        for (var j = index; j < index + o.blockSize && j < o.items.length; j++) {
          needDestroyed.push(this.container._children[j]);
          this.container._children[j] = null;
        }

        this.cache[i].destroyed = true;
      }
    }

    var firstFragment = BI.Widget._renderEngine.createFragment(),
        lastFragment = BI.Widget._renderEngine.createFragment();

    var currentFragment = firstFragment;

    for (var i = start < 0 ? 0 : start; i <= end && i <= this.renderedIndex; i++) {
      var index = i * o.blockSize;

      if (!this.cache[i]) {
        this.cache[i] = {};
      }

      if (!this.cache[i].destroyed) {
        currentFragment = lastFragment;
      }

      if (this.cache[i].destroyed === true) {
        for (var j = index; j < index + o.blockSize && j < o.items.length; j++) {
          var w = this.container._addElement(j, o.itemFormatter(o.items[j], j), this);

          needMount.push(w);
          currentFragment.appendChild(w.element[0]);
        }

        this.cache[i].destroyed = false;
      }
    }

    this.container.element.prepend(firstFragment);
    this.container.element.append(lastFragment);
    this.topBlank.setHeight(this.tree.sumTo(Math.max(-1, start - 1)) + "px");
    this.bottomBlank.setHeight(this.tree.sumTo(this.renderedIndex) - this.tree.sumTo(Math.min(end, this.renderedIndex)) + "px");
    BI.each(needMount, function (i, child) {
      child && child._mount();
    });
    BI.each(needDestroyed, function (i, child) {
      child && child._destroy();
    });
  },
  _populate: function _populate(items) {
    var o = this.options;

    if (items && this.options.items !== items) {
      this.options.items = items;
    }

    this.tree = BI.PrefixIntervalTree.empty(Math.ceil(o.items.length / o.blockSize));

    this._calculateBlocksToRender();

    try {
      this.element.scrollTop(o.scrollTop);
    } catch (e) {}
  },
  _clearChildren: function _clearChildren() {
    BI.each(this.container._children, function (i, cell) {
      cell && cell._destroy();
    });
    this.container._children = {};
    this.container.attr("items", []);
  },
  scrollTo: function scrollTo(scrollTop) {
    this.options.scrollTop = scrollTop;

    this._calculateBlocksToRender();

    this.element.scrollTop(scrollTop);
  },
  restore: function restore() {
    this.renderedIndex = -1;

    this._clearChildren();

    this.cache = {};
    this.options.scrollTop = 0; // 依赖于cache的占位元素也要初始化

    this.topBlank.setHeight(0);
    this.bottomBlank.setHeight(0);
  },
  populate: function populate(items) {
    if (items && this.options.items !== items) {
      this.restore();
    }

    this._populate(items);
  },
  beforeDestroy: function beforeDestroy() {
    BI.ResizeDetector.removeResizeListener(this);
    this.restore();
  }
});
BI.shortcut("bi.virtual_list", BI.VirtualList);

/***/ }),
/* 748 */
/***/ (function(module, exports) {

/**
 * 分页控件
 *
 * Created by GUY on 2015/8/31.
 * @class BI.Pager
 * @extends BI.Widget
 */
BI.Pager = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Pager.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-pager",
      behaviors: {},
      layouts: [{
        type: "bi.horizontal",
        hgap: 10,
        vgap: 0
      }],
      dynamicShow: true,
      // 是否动态显示上一页、下一页、首页、尾页， 若为false，则指对其设置使能状态
      // dynamicShow为false时以下两个有用
      dynamicShowFirstLast: false,
      // 是否动态显示首页、尾页
      dynamicShowPrevNext: false,
      // 是否动态显示上一页、下一页
      pages: false,
      // 总页数
      curr: function curr() {
        return 1;
      },
      // 初始化当前页
      groups: 0,
      // 连续显示分页数
      jump: BI.emptyFn,
      // 分页的回调函数
      first: false,
      // 是否显示首页
      last: false,
      // 是否显示尾页
      prev: "上一页",
      next: "下一页",
      firstPage: 1,
      lastPage: function lastPage() {
        // 在万不得已时才会调用这个函数获取最后一页的页码,  主要作用于setValue方法
        return 1;
      },
      hasPrev: BI.emptyFn,
      // pages不可用时有效
      hasNext: BI.emptyFn // pages不可用时有效

    });
  },
  render: function render() {
    this.currPage = BI.result(this.options, "curr"); // 翻页太灵敏
    // this._lock = false;
    // this._debouce = BI.debounce(function () {
    //     self._lock = false;
    // }, 300);

    this._populate();
  },
  _populate: function _populate() {
    var self = this,
        o = this.options,
        view = [],
        dict = {};
    this.empty();
    var pages = BI.result(o, "pages");
    var curr = BI.result(this, "currPage");
    var groups = BI.result(o, "groups");
    var first = BI.result(o, "first");
    var last = BI.result(o, "last");
    var prev = BI.result(o, "prev");
    var next = BI.result(o, "next");

    if (pages === false) {
      groups = 0;
      first = false;
      last = false;
    } else {
      groups > pages && (groups = pages);
    } // 计算当前组


    dict.index = Math.ceil((curr + (groups > 1 && groups !== pages ? 1 : 0)) / (groups === 0 ? 1 : groups)); // 当前页非首页，则输出上一页

    if ((!o.dynamicShow && !o.dynamicShowPrevNext || curr > 1) && prev !== false) {
      if (BI.isKey(prev)) {
        view.push({
          text: prev,
          value: "prev",
          disabled: pages === false ? o.hasPrev(curr) === false : !(curr > 1 && prev !== false)
        });
      } else {
        view.push({
          el: BI.extend({
            disabled: pages === false ? o.hasPrev(curr) === false : !(curr > 1 && prev !== false)
          }, prev)
        });
      }
    } // 当前组非首组，则输出首页


    if ((!o.dynamicShow && !o.dynamicShowFirstLast || dict.index > 1 && groups !== 0) && first) {
      view.push({
        text: first,
        value: "first",
        disabled: !(dict.index > 1 && groups !== 0)
      });

      if (dict.index > 1 && groups !== 0 && groups !== pages - 1) {
        view.push({
          type: "bi.label",
          cls: "page-ellipsis",
          text: "\u2026"
        });
      }
    } // 输出当前页组


    dict.poor = Math.floor((groups - 1) / 2);
    dict.start = dict.index > 1 ? curr - dict.poor : 1;
    dict.end = dict.index > 1 ? function () {
      var max = curr + (groups - dict.poor - 1);
      return max > pages ? pages : max;
    }() : groups;

    if (dict.end - dict.start < groups - 1) {
      // 最后一组状态
      dict.start = dict.end - groups + 1;
    }

    var s = dict.start,
        e = dict.end;

    if (first && last && dict.index > 1 && groups !== 0 && pages > groups && dict.end < pages && groups !== 0) {
      s++;
      e--;
    }

    for (; s <= e; s++) {
      if (s === curr) {
        view.push({
          text: s,
          value: s,
          selected: true
        });
      } else {
        view.push({
          text: s,
          value: s
        });
      }
    } // 总页数大于连续分页数，且当前组最大页小于总页，输出尾页


    if ((!o.dynamicShow && !o.dynamicShowFirstLast || pages > groups && dict.end < pages && groups !== 0) && last) {
      if (pages > groups && dict.end < pages && groups !== 0 && groups !== pages - 1) {
        view.push({
          type: "bi.label",
          cls: "page-ellipsis",
          text: "\u2026"
        });
      }

      view.push({
        text: last,
        value: "last",
        disabled: !(pages > groups && dict.end < pages && groups !== 0)
      });
    } // 当前页不为尾页时，输出下一页


    dict.flow = !prev && groups === 0;

    if (!o.dynamicShow && !o.dynamicShowPrevNext && next || curr !== pages && next || dict.flow) {
      view.push(function () {
        if (BI.isKey(next)) {
          if (pages === false) {
            return {
              text: next,
              value: "next",
              disabled: o.hasNext(curr) === false
            };
          }

          return dict.flow && curr === pages ? {
            text: next,
            value: "next",
            disabled: true
          } : {
            text: next,
            value: "next",
            disabled: !(curr !== pages && next || dict.flow)
          };
        }

        return {
          el: BI.extend({
            disabled: pages === false ? o.hasNext(curr) === false : !(curr !== pages && next || dict.flow)
          }, next)
        };
      }());
    }

    this.button_group = BI.createWidget({
      type: "bi.button_group",
      element: this,
      items: BI.map(view, function (idx, v) {
        v = BI.extend({
          cls: "bi-list-item-select bi-border-radius",
          height: 23,
          hgap: v.el ? 0 : 10,
          stopPropagation: true
        }, BI.stripEL(v));
        return BI.formatEL(v);
      }),
      behaviors: o.behaviors,
      layouts: o.layouts
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      // if (self._lock === true) {
      //     return;
      // }
      // self._lock = true;
      // self._debouce();
      if (type === BI.Events.CLICK) {
        var v = self.button_group.getValue()[0];

        switch (v) {
          case "first":
            self.currPage = 1;
            break;

          case "last":
            self.currPage = pages;
            break;

          case "prev":
            self.currPage--;
            break;

          case "next":
            self.currPage++;
            break;

          default:
            self.currPage = v;
            break;
        }

        o.jump.apply(self, [{
          pages: pages,
          curr: self.currPage
        }]);

        self._populate();

        self.fireEvent(BI.Pager.EVENT_CHANGE, obj);
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.fireEvent(BI.Pager.EVENT_AFTER_POPULATE);
  },
  getCurrentPage: function getCurrentPage() {
    return this.currPage;
  },
  setAllPages: function setAllPages(pages) {
    this.options.pages = pages;

    this._populate();
  },
  hasPrev: function hasPrev(v) {
    v || (v = 1);
    var o = this.options;
    var pages = this.options.pages;
    return pages === false ? o.hasPrev(v) : v > 1;
  },
  hasNext: function hasNext(v) {
    v || (v = 1);
    var o = this.options;
    var pages = this.options.pages;
    return pages === false ? o.hasNext(v) : v < pages;
  },
  setValue: function setValue(v) {
    var o = this.options;
    v = v || 0;
    v = v < 1 ? 1 : v;

    if (o.pages === false) {
      var lastPage = BI.result(o, "lastPage"),
          firstPage = 1;
      this.currPage = v > lastPage ? lastPage : (firstPage = BI.result(o, "firstPage"), v < firstPage ? firstPage : v);
    } else {
      v = v > o.pages ? o.pages : v;
      this.currPage = v;
    }

    this._populate();
  },
  getValue: function getValue() {
    var val = this.button_group.getValue()[0];

    switch (val) {
      case "prev":
        return -1;

      case "next":
        return 1;

      case "first":
        return BI.MIN;

      case "last":
        return BI.MAX;

      default:
        return val;
    }
  },
  attr: function attr(key, value) {
    BI.Pager.superclass.attr.apply(this, arguments);

    if (key === "curr") {
      this.currPage = BI.result(this.options, "curr");
    }
  },
  populate: function populate() {
    this._populate();
  }
});
BI.Pager.EVENT_CHANGE = "EVENT_CHANGE";
BI.Pager.EVENT_AFTER_POPULATE = "EVENT_AFTER_POPULATE";
BI.shortcut("bi.pager", BI.Pager);

/***/ }),
/* 749 */
/***/ (function(module, exports) {

/**
 *
 * 自定义树
 *
 * Created by GUY on 2015/9/7.
 * @class BI.CustomTree
 * @extends BI.Single
 */
BI.CustomTree = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.CustomTree.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-custom-tree",
      expander: {
        el: {},
        popup: {
          type: "bi.custom_tree"
        }
      },
      items: [],
      itemsCreator: BI.emptyFn,
      el: {
        type: "bi.button_tree",
        chooseType: 0,
        layouts: [{
          type: "bi.vertical"
        }]
      }
    });
  },
  _init: function _init() {
    BI.CustomTree.superclass._init.apply(this, arguments);

    this.initTree(this.options.items);
  },
  _formatItems: function _formatItems(nodes) {
    var self = this,
        o = this.options;
    nodes = BI.Tree.transformToTreeFormat(nodes);
    var items = [];
    BI.each(nodes, function (i, node) {
      if (BI.isNotEmptyArray(node.children) || node.isParent === true) {
        var item = BI.extend({
          type: "bi.expander",
          el: {
            value: node.value
          },
          popup: {
            type: "bi.custom_tree"
          }
        }, BI.deepClone(o.expander), {
          id: node.id,
          pId: node.pId
        });
        var el = BI.stripEL(node);

        if (!BI.isWidget(el)) {
          el = BI.clone(el);
          delete el.children;
          BI.extend(item.el, el);
        } else {
          item.el = el;
        }

        item.popup.expander = BI.deepClone(o.expander);
        item.items = item.popup.items = node.children;

        item.itemsCreator = item.popup.itemsCreator = function (op) {
          if (BI.isNotNull(op.node)) {
            // 从子节点传过来的itemsCreator直接向上传递
            return o.itemsCreator.apply(self, arguments);
          }

          var args = Array.prototype.slice.call(arguments, 0);
          args[0].node = node;
          return o.itemsCreator.apply(self, args);
        };

        BI.isNull(item.popup.el) && (item.popup.el = BI.deepClone(o.el));
        items.push(item);
      } else {
        items.push(node);
      }
    });
    return items;
  },
  // 构造树结构，
  initTree: function initTree(nodes) {
    var self = this,
        o = this.options;
    this.tree = BI.createWidget(o.el, {
      element: this,
      items: this._formatItems(nodes),
      itemsCreator: function itemsCreator(op, callback) {
        o.itemsCreator.apply(this, [op, function (items) {
          var args = Array.prototype.slice.call(arguments, 0);
          args[0] = self._formatItems(items);
          callback.apply(null, args);
        }]);
      },
      value: o.value
    });
    this.tree.on(BI.Controller.EVENT_CHANGE, function (type, val, obj) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.CustomTree.EVENT_CHANGE, val, obj);
      }
    });
  },
  // 生成树方法
  stroke: function stroke(nodes) {
    this.populate.apply(this, arguments);
  },
  populate: function populate(nodes) {
    var args = Array.prototype.slice.call(arguments, 0);

    if (arguments.length > 0) {
      args[0] = this._formatItems(nodes);
    }

    this.tree.populate.apply(this.tree, args);
  },
  setValue: function setValue(v) {
    this.tree && this.tree.setValue(v);
  },
  getValue: function getValue() {
    return this.tree ? this.tree.getValue() : [];
  },
  getAllButtons: function getAllButtons() {
    return this.tree ? this.tree.getAllButtons() : [];
  },
  getAllLeaves: function getAllLeaves() {
    return this.tree ? this.tree.getAllLeaves() : [];
  },
  getNodeById: function getNodeById(id) {
    return this.tree && this.tree.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(id) {
    return this.tree && this.tree.getNodeByValue(id);
  },
  empty: function empty() {
    this.tree.empty();
  }
});
BI.CustomTree.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.custom_tree", BI.CustomTree);

/***/ }),
/* 750 */
/***/ (function(module, exports) {

/**
 * 下拉框弹出层的多选版本，toolbar带有若干按钮, zIndex在1000w
 * @class BI.MultiPopupView
 * @extends BI.Widget
 */
BI.MultiPopupView = BI.inherit(BI.PopupView, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiPopupView.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      _baseCls: (conf._baseCls || "") + " bi-multi-list-view",
      buttons: [BI.i18nText("BI-Basic_OK")]
    });
  },
  _createToolBar: function _createToolBar() {
    var o = this.options,
        self = this;

    if (o.buttons.length === 0) {
      return;
    }

    var text = []; // 构造[{text:content},……]

    BI.each(o.buttons, function (idx, item) {
      text.push({
        text: item,
        value: idx
      });
    });
    this.buttongroup = BI.createWidget({
      type: "bi.button_group",
      cls: "list-view-toolbar bi-high-light bi-split-top",
      height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      items: BI.createItems(text, {
        type: "bi.text_button",
        once: false,
        shadow: true,
        isShadowShowingOnSelected: true
      }),
      layouts: [{
        type: "bi.center",
        hgap: 0,
        vgap: 0
      }]
    });
    this.buttongroup.on(BI.ButtonGroup.EVENT_CHANGE, function (value, obj) {
      self.fireEvent(BI.MultiPopupView.EVENT_CLICK_TOOLBAR_BUTTON, value, obj);
    });
    return this.buttongroup;
  }
});
BI.MultiPopupView.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiPopupView.EVENT_CLICK_TOOLBAR_BUTTON = "EVENT_CLICK_TOOLBAR_BUTTON";
BI.shortcut("bi.multi_popup_view", BI.MultiPopupView);

/***/ }),
/* 751 */
/***/ (function(module, exports) {

/**
 * 可以理解为MultiPopupView和Panel两个面板的结合体
 * @class BI.PopupPanel
 * @extends BI.MultiPopupView
 */
BI.PopupPanel = BI.inherit(BI.MultiPopupView, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.PopupPanel.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-popup-panel",
      title: ""
    });
  },
  _createTool: function _createTool() {
    var self = this,
        o = this.options;
    var close = BI.createWidget({
      type: "bi.icon_button",
      cls: "close-h-font",
      width: 25,
      height: 25
    });
    close.on(BI.IconButton.EVENT_CHANGE, function () {
      self.setVisible(false);
      self.fireEvent(BI.PopupPanel.EVENT_CLOSE);
    });
    return BI.createWidget({
      type: "bi.htape",
      cls: "popup-panel-title bi-header-background",
      height: 25,
      items: [{
        el: {
          type: "bi.label",
          textAlign: "left",
          text: o.title,
          height: 25,
          lgap: 10
        }
      }, {
        el: close,
        width: 25
      }]
    });
  }
});
BI.PopupPanel.EVENT_CHANGE = "EVENT_CHANGE";
BI.PopupPanel.EVENT_CLOSE = "EVENT_CLOSE";
BI.PopupPanel.EVENT_CLICK_TOOLBAR_BUTTON = "EVENT_CLICK_TOOLBAR_BUTTON";
BI.shortcut("bi.popup_panel", BI.PopupPanel);

/***/ }),
/* 752 */
/***/ (function(module, exports) {

/**
 * list面板
 *
 * Created by GUY on 2015/10/30.
 * @class BI.ListPane
 * @extends BI.Pane
 */
BI.ListPane = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.ListPane.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-list-pane",
      logic: {
        dynamic: true
      },
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      vgap: 0,
      hgap: 0,
      items: [],
      itemsCreator: BI.emptyFn,
      hasNext: BI.emptyFn,
      onLoaded: BI.emptyFn,
      el: {
        type: "bi.button_group"
      }
    });
  },
  _init: function _init() {
    BI.ListPane.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.button_group = BI.createWidget(o.el, {
      type: "bi.button_group",
      chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
      behaviors: {},
      items: o.items,
      value: o.value,
      itemsCreator: function itemsCreator(op, calback) {
        if (op.times === 1) {
          self.empty();
          BI.nextTick(function () {
            self.loading();
          });
        }

        o.itemsCreator(op, function () {
          calback.apply(self, arguments);
          o.items = BI.concat(o.items, BI.get(arguments, [0], []));

          if (op.times === 1) {
            o.items = BI.get(arguments, [0], []);
            BI.nextTick(function () {
              self.loaded(); // callback可能在loading之前执行, check保证显示正确

              self.check();
            });
          }
        });
      },
      hasNext: o.hasNext,
      layouts: [{
        type: "bi.vertical"
      }]
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.ListPane.EVENT_CHANGE, value, obj);
      }
    });
    this.check();
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Top), BI.extend({
      scrolly: true,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      vgap: o.vgap,
      hgap: o.hgap
    }, o.logic, {
      items: BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Top, this.button_group)
    }))));
  },
  hasPrev: function hasPrev() {
    return this.button_group.hasPrev && this.button_group.hasPrev();
  },
  hasNext: function hasNext() {
    return this.button_group.hasNext && this.button_group.hasNext();
  },
  prependItems: function prependItems(items) {
    this.options.items = items.concat(this.options.items);
    this.button_group.prependItems.apply(this.button_group, arguments);
    this.check();
  },
  addItems: function addItems(items) {
    this.options.items = this.options.items.concat(items);
    this.button_group.addItems.apply(this.button_group, arguments);
    this.check();
  },
  removeItemAt: function removeItemAt(indexes) {
    indexes = BI.isNull(indexes) ? [] : indexes;
    BI.removeAt(this.options.items, indexes);
    this.button_group.removeItemAt.apply(this.button_group, arguments);
    this.check();
  },
  populate: function populate(items) {
    var self = this,
        o = this.options;

    if (arguments.length === 0 && BI.isFunction(this.button_group.attr("itemsCreator"))) {
      // 接管loader的populate方法
      this.button_group.attr("itemsCreator").apply(this, [{
        times: 1
      }, function () {
        if (arguments.length === 0) {
          throw new Error("参数不能为空");
        }

        self.populate.apply(self, arguments);
      }]);
      return;
    }

    var context = BI.get(arguments, [2], {});
    var tipText = context.tipText || '';

    if (BI.isNotEmptyString(tipText)) {
      BI.ListPane.superclass.populate.apply(this, []);
      this.setTipText(tipText);
    } else {
      BI.ListPane.superclass.populate.apply(this, arguments);
      this.button_group.populate.apply(this.button_group, arguments);
      BI.isEmptyArray(BI.get(arguments, [0], [])) && this.setTipText(o.tipText);
    }
  },
  empty: function empty() {
    this.button_group.empty();
  },
  setNotSelectedValue: function setNotSelectedValue() {
    this.button_group.setNotSelectedValue.apply(this.button_group, arguments);
  },
  getNotSelectedValue: function getNotSelectedValue() {
    return this.button_group.getNotSelectedValue();
  },
  setValue: function setValue() {
    this.button_group.setValue.apply(this.button_group, arguments);
  },
  setAllSelected: function setAllSelected(v) {
    if (this.button_group.setAllSelected) {
      this.button_group.setAllSelected(v);
    } else {
      BI.each(this.getAllButtons(), function (i, btn) {
        (btn.setSelected || btn.setAllSelected).apply(btn, [v]);
      });
    }
  },
  getValue: function getValue() {
    return this.button_group.getValue.apply(this.button_group, arguments);
  },
  getAllButtons: function getAllButtons() {
    return this.button_group.getAllButtons();
  },
  getAllLeaves: function getAllLeaves() {
    return this.button_group.getAllLeaves();
  },
  getSelectedButtons: function getSelectedButtons() {
    return this.button_group.getSelectedButtons();
  },
  getNotSelectedButtons: function getNotSelectedButtons() {
    return this.button_group.getNotSelectedButtons();
  },
  getIndexByValue: function getIndexByValue(value) {
    return this.button_group.getIndexByValue(value);
  },
  getNodeById: function getNodeById(id) {
    return this.button_group.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(value) {
    return this.button_group.getNodeByValue(value);
  }
});
BI.ListPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.list_pane", BI.ListPane);

/***/ }),
/* 753 */
/***/ (function(module, exports) {

/**
 * 带有标题栏的pane
 * @class BI.Panel
 * @extends BI.Widget
 */
BI.Panel = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Panel.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-panel bi-border",
      title: "",
      titleHeight: 30,
      titleButtons: [],
      el: {} // logic: {
      //     dynamic: false
      // }

    });
  },
  render: function render() {
    return {
      type: "bi.vertical_fill",
      rowSize: ["", "fill"],
      items: [this._createTitle(), this.options.el]
    };
  },
  _createTitle: function _createTitle() {
    var self = this,
        o = this.options;
    this.text = BI.createWidget({
      type: "bi.label",
      cls: "panel-title-text",
      text: o.title,
      height: o.titleHeight
    });
    this.button_group = BI.createWidget({
      type: "bi.button_group",
      items: o.titleButtons,
      layouts: [{
        type: "bi.center_adapt",
        lgap: 10
      }]
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.button_group.on(BI.ButtonGroup.EVENT_CHANGE, function (value, obj) {
      self.fireEvent(BI.Panel.EVENT_CHANGE, value, obj);
    });
    return {
      // el: {
      type: "bi.left_right_vertical_adapt",
      cls: "panel-title bi-header-background bi-border-bottom",
      height: BI.toPix(o.titleHeight, 1),
      items: {
        left: [this.text],
        right: [this.button_group]
      },
      lhgap: 10,
      rhgap: 10 // },
      // height: BI.toPix(o.titleHeight, 1)

    };
  },
  setTitle: function setTitle(title) {
    this.text.setValue(title);
  }
});
BI.Panel.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.panel", BI.Panel);

/***/ }),
/* 754 */
/***/ (function(module, exports) {

/**
 * 选择列表
 *
 * Created by GUY on 2015/11/1.
 * @class BI.SelectList
 * @extends BI.Widget
 */
BI.SelectList = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SelectList.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-select-list",
      direction: BI.Direction.Top,
      // toolbar的位置
      logic: {
        dynamic: true
      },
      items: [],
      itemsCreator: BI.emptyFn,
      hasNext: BI.emptyFn,
      onLoaded: BI.emptyFn,
      toolbar: {
        type: "bi.multi_select_bar",
        iconWrapperWidth: 36
      },
      el: {
        type: "bi.list_pane"
      }
    });
  },
  _init: function _init() {
    BI.SelectList.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options; // 全选

    this.toolbar = BI.createWidget(o.toolbar);
    this.allSelected = false;
    this.toolbar.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      self.allSelected = this.isSelected();

      if (type === BI.Events.CLICK) {
        self.setAllSelected(self.allSelected);
        self.fireEvent(BI.SelectList.EVENT_CHANGE, value, obj);
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.list = BI.createWidget(o.el, {
      type: "bi.list_pane",
      items: o.items,
      itemsCreator: function itemsCreator(op, callback) {
        op.times === 1 && self.toolbar.setVisible(false);
        o.itemsCreator(op, function (items, keywords, context) {
          callback.apply(self, arguments);

          if (op.times === 1) {
            var tipText = BI.get(context, 'tipText', '');
            var visible = BI.isEmptyString(tipText) && items && items.length > 0;
            self.toolbar.setVisible(visible);
            self.toolbar.setEnable(self.isEnabled() && visible);
          }

          self._checkAllSelected();
        });
      },
      onLoaded: o.onLoaded,
      hasNext: o.hasNext
    });
    this.list.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      if (type === BI.Events.CLICK) {
        self._checkAllSelected();

        self.fireEvent(BI.SelectList.EVENT_CHANGE, value, obj);
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(o.direction), BI.extend({
      scrolly: true
    }, o.logic, {
      items: BI.LogicFactory.createLogicItemsByDirection(o.direction, this.toolbar, this.list)
    }))));

    if (o.items.length <= 0) {
      this.toolbar.setVisible(false);
      this.toolbar.setEnable(false);
    }

    if (BI.isNotNull(o.value)) {
      this.setValue(o.value);
    }
  },
  _checkAllSelected: function _checkAllSelected() {
    var selectLength = this.list.getValue().length;
    var notSelectLength = this.getAllLeaves().length - selectLength;
    var hasNext = this.list.hasNext();
    var isAlreadyAllSelected = this.toolbar.isSelected();
    var isHalf = selectLength > 0 && notSelectLength > 0;
    var allSelected = selectLength > 0 && notSelectLength <= 0 && (!hasNext || isAlreadyAllSelected);

    if (this.isAllSelected() === false) {
      hasNext && (isHalf = selectLength > 0);

      if (!isAlreadyAllSelected && notSelectLength === 0 && !hasNext) {
        allSelected = true;
      }
    } else {
      hasNext && (isHalf = notSelectLength > 0);

      if (!isAlreadyAllSelected && notSelectLength === 0) {
        allSelected = true;
      }
    }

    this.toolbar.setHalfSelected(isHalf);
    !isHalf && this.toolbar.setSelected(allSelected);
  },
  setAllSelected: function setAllSelected(v) {
    if (this.list.setAllSelected) {
      this.list.setAllSelected(v);
    } else {
      BI.each(this.getAllButtons(), function (i, btn) {
        (btn.setSelected || btn.setAllSelected).apply(btn, [v]);
      });
    }

    this.allSelected = !!v;
    this.toolbar.setSelected(v);
    this.toolbar.setHalfSelected(false);
  },
  setToolBarVisible: function setToolBarVisible(b) {
    this.toolbar.setVisible(b);
  },
  isAllSelected: function isAllSelected() {
    return this.allSelected; // return this.toolbar.isSelected();
  },
  hasPrev: function hasPrev() {
    return this.list.hasPrev();
  },
  hasNext: function hasNext() {
    return this.list.hasNext();
  },
  prependItems: function prependItems(items) {
    this.list.prependItems.apply(this.list, arguments);
  },
  addItems: function addItems(items) {
    this.list.addItems.apply(this.list, arguments);
  },
  setValue: function setValue(data) {
    var selectAll = data.type === BI.ButtonGroup.CHOOSE_TYPE_ALL;
    this.setAllSelected(selectAll);
    this.list[selectAll ? "setNotSelectedValue" : "setValue"](data.value);

    this._checkAllSelected();
  },
  getValue: function getValue() {
    if (this.isAllSelected() === false) {
      return {
        type: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
        value: this.list.getValue(),
        assist: this.list.getNotSelectedValue()
      };
    }

    return {
      type: BI.ButtonGroup.CHOOSE_TYPE_ALL,
      value: this.list.getNotSelectedValue(),
      assist: this.list.getValue()
    };
  },
  empty: function empty() {
    this.list.empty();
  },
  populate: function populate(items) {
    this.toolbar.setVisible(!BI.isEmptyArray(items));
    this.toolbar.setEnable(this.isEnabled() && !BI.isEmptyArray(items));
    this.list.populate.apply(this.list, arguments);

    this._checkAllSelected();
  },
  _setEnable: function _setEnable(enable) {
    BI.SelectList.superclass._setEnable.apply(this, arguments);

    this.toolbar.setEnable(enable);
  },
  resetHeight: function resetHeight(h) {
    var toolHeight = (this.toolbar.element.outerHeight() || 25) * (this.toolbar.isVisible() ? 1 : 0);
    this.list.resetHeight ? this.list.resetHeight(h - toolHeight) : this.list.element.css({
      "max-height": BI.pixFormat(h - toolHeight)
    });
  },
  setNotSelectedValue: function setNotSelectedValue() {
    this.list.setNotSelectedValue.apply(this.list, arguments);

    this._checkAllSelected();
  },
  getNotSelectedValue: function getNotSelectedValue() {
    return this.list.getNotSelectedValue();
  },
  getAllButtons: function getAllButtons() {
    return this.list.getAllButtons();
  },
  getAllLeaves: function getAllLeaves() {
    return this.list.getAllLeaves();
  },
  getSelectedButtons: function getSelectedButtons() {
    return this.list.getSelectedButtons();
  },
  getNotSelectedButtons: function getNotSelectedButtons() {
    return this.list.getNotSelectedButtons();
  },
  getIndexByValue: function getIndexByValue(value) {
    return this.list.getIndexByValue(value);
  },
  getNodeById: function getNodeById(id) {
    return this.list.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(value) {
    return this.list.getNodeByValue(value);
  }
});
BI.SelectList.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.select_list", BI.SelectList);

/***/ }),
/* 755 */
/***/ (function(module, exports) {

/**
 * Created by roy on 15/11/6.
 */
BI.LazyLoader = BI.inherit(BI.Widget, {
  _const: {
    PAGE: 100
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.LazyLoader.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-lazy-loader",
      el: {},
      items: []
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.LazyLoader.superclass._init.apply(this, arguments);

    var all = o.items.length;
    this.loader = BI.createWidget({
      type: "bi.loader",
      element: this,
      // 下面是button_group的属性
      el: o.el,
      itemsCreator: function itemsCreator(options, populate) {
        populate(self._getNextItems(options));
      },
      hasNext: function hasNext(option) {
        return option.count < all;
      }
    });
    this.loader.on(BI.Loader.EVENT_CHANGE, function (obj) {
      self.fireEvent(BI.LazyLoader.EVENT_CHANGE, obj);
    });
  },
  _getNextItems: function _getNextItems(options) {
    var self = this,
        o = this.options;
    var lastNum = o.items.length - this._const.PAGE * (options.times - 1);
    var lastItems = BI.takeRight(o.items, lastNum);
    var nextItems = BI.take(lastItems, this._const.PAGE);
    return nextItems;
  },
  populate: function populate(items) {
    this.loader.populate(items);
  },
  addItems: function addItems(items) {
    this.loader.addItems(items);
  },
  empty: function empty() {
    this.loader.empty();
  },
  setNotSelectedValue: function setNotSelectedValue() {
    this.loader.setNotSelectedValue.apply(this.loader, arguments);
  },
  getNotSelectedValue: function getNotSelectedValue() {
    return this.loader.getNotSelectedValue();
  },
  setValue: function setValue() {
    this.loader.setValue.apply(this.loader, arguments);
  },
  getValue: function getValue() {
    return this.loader.getValue.apply(this.loader, arguments);
  },
  getAllButtons: function getAllButtons() {
    return this.loader.getAllButtons();
  },
  getAllLeaves: function getAllLeaves() {
    return this.loader.getAllLeaves();
  },
  getSelectedButtons: function getSelectedButtons() {
    return this.loader.getSelectedButtons();
  },
  getNotSelectedButtons: function getNotSelectedButtons() {
    return this.loader.getNotSelectedButtons();
  },
  getIndexByValue: function getIndexByValue(value) {
    return this.loader.getIndexByValue(value);
  },
  getNodeById: function getNodeById(id) {
    return this.loader.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(value) {
    return this.loader.getNodeByValue(value);
  }
});
BI.LazyLoader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.lazy_loader", BI.LazyLoader);

/***/ }),
/* 756 */
/***/ (function(module, exports) {

/**
 * 恶心的加载控件， 为解决排序问题引入的控件
 *
 * Created by GUY on 2015/11/12.
 * @class BI.ListLoader
 * @extends BI.Widget
 */
BI.ListLoader = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ListLoader.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-list-loader",
      isDefaultInit: true,
      // 是否默认初始化数据
      // 下面是button_group的属性
      el: {
        type: "bi.button_group"
      },
      items: [],
      itemsCreator: BI.emptyFn,
      onLoaded: BI.emptyFn,
      // 下面是分页信息
      count: false,
      next: {},
      hasNext: BI.emptyFn
    });
  },
  _nextLoad: function _nextLoad() {
    var self = this,
        o = this.options;
    this.next.setLoading();
    o.itemsCreator.apply(this, [{
      times: ++this.times
    }, function () {
      self.next.setLoaded();
      self.addItems.apply(self, arguments);
    }]);
  },
  _init: function _init() {
    BI.ListLoader.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    if (o.itemsCreator === false) {
      o.next = false;
    }

    this.button_group = BI.createWidget(o.el, {
      type: "bi.button_group",
      element: this,
      chooseType: 0,
      items: o.items,
      behaviors: {},
      layouts: [{
        type: "bi.vertical"
      }]
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.ListLoader.EVENT_CHANGE, obj);
      }
    });

    if (o.next !== false) {
      this.next = BI.createWidget(BI.extend({
        type: "bi.loading_bar"
      }, o.next));
      this.next.on(BI.Controller.EVENT_CHANGE, function (type) {
        if (type === BI.Events.CLICK) {
          self._nextLoad();
        }
      });
    }

    BI.createWidget({
      type: "bi.vertical",
      element: this,
      items: [this.next]
    });
    o.isDefaultInit && BI.isEmpty(o.items) && BI.nextTick(BI.bind(function () {
      this.populate();
    }, this));

    if (BI.isNotEmptyArray(o.items)) {
      this.populate(o.items);
    }
  },
  hasNext: function hasNext() {
    var o = this.options;

    if (BI.isNumber(o.count)) {
      return this.count < o.count;
    }

    return !!o.hasNext.apply(this, [{
      times: this.times,
      count: this.count
    }]);
  },
  addItems: function addItems(items) {
    this.count += items.length;

    if (BI.isObject(this.next)) {
      this.options.items = this.options.items.concat(items);

      if (this.hasNext()) {
        this.next.setLoaded();
      } else {
        this.next.setEnd();
      }
    }

    this.button_group.addItems.apply(this.button_group, arguments);
    this.next.element.appendTo(this.element);
  },
  populate: function populate(items) {
    var self = this,
        o = this.options;

    if (arguments.length === 0 && BI.isFunction(o.itemsCreator)) {
      o.itemsCreator.apply(this, [{
        times: 1
      }, function () {
        if (arguments.length === 0) {
          throw new Error("参数不能为空");
        }

        self.populate.apply(self, arguments);
        o.onLoaded();
      }]);
      return;
    }

    this.options.items = items;
    this.times = 1;
    this.count = 0;
    this.count += items.length;

    if (BI.isObject(this.next)) {
      if (this.hasNext()) {
        this.next.setLoaded();
      } else {
        this.next.invisible();
      }
    }

    BI.DOM.hang([this.next]);
    this.button_group.populate.apply(this.button_group, arguments);
    this.next.element.appendTo(this.element);
  },
  empty: function empty() {
    BI.DOM.hang([this.next]);
    this.button_group.empty();
    this.next.element.appendTo(this.element);
    BI.each([this.next], function (i, ob) {
      ob && ob.setVisible(false);
    });
  },
  setNotSelectedValue: function setNotSelectedValue() {
    this.button_group.setNotSelectedValue.apply(this.button_group, arguments);
  },
  getNotSelectedValue: function getNotSelectedValue() {
    return this.button_group.getNotSelectedValue();
  },
  setValue: function setValue() {
    this.button_group.setValue.apply(this.button_group, arguments);
  },
  getValue: function getValue() {
    return this.button_group.getValue.apply(this.button_group, arguments);
  },
  getAllButtons: function getAllButtons() {
    return this.button_group.getAllButtons();
  },
  getAllLeaves: function getAllLeaves() {
    return this.button_group.getAllLeaves();
  },
  getSelectedButtons: function getSelectedButtons() {
    return this.button_group.getSelectedButtons();
  },
  getNotSelectedButtons: function getNotSelectedButtons() {
    return this.button_group.getNotSelectedButtons();
  },
  getIndexByValue: function getIndexByValue(value) {
    return this.button_group.getIndexByValue(value);
  },
  getNodeById: function getNodeById(id) {
    return this.button_group.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(value) {
    return this.button_group.getNodeByValue(value);
  }
});
BI.ListLoader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.list_loader", BI.ListLoader);

/***/ }),
/* 757 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/4/29.
 *
 * @class BI.SortList
 * @extends BI.Widget
 */
BI.SortList = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SortList.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-sort-list",
      isDefaultInit: true,
      // 是否默认初始化数据
      // 下面是button_group的属性
      el: {
        type: "bi.button_group"
      },
      items: [],
      itemsCreator: BI.emptyFn,
      onLoaded: BI.emptyFn,
      // 下面是分页信息
      count: false,
      next: {},
      hasNext: BI.emptyFn // containment: this.element,
      // connectWith: ".bi-sort-list",

    });
  },
  _init: function _init() {
    BI.SortList.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.loader = BI.createWidget({
      type: "bi.list_loader",
      element: this,
      isDefaultInit: o.isDefaultInit,
      el: o.el,
      items: this._formatItems(o.items),
      itemsCreator: function itemsCreator(op, callback) {
        o.itemsCreator(op, function (items) {
          callback(self._formatItems(items));
        });
      },
      onLoaded: o.onLoaded,
      count: o.count,
      next: o.next,
      hasNext: o.hasNext
    });
    this.loader.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.SortList.EVENT_CHANGE, value, obj);
      }
    });
    this.loader.element.sortable({
      containment: o.containment || this.element,
      connectWith: o.connectWith || ".bi-sort-list",
      items: ".sort-item",
      cursor: o.cursor || "drag",
      tolerance: o.tolerance || "intersect",
      placeholder: {
        element: function element($currentItem) {
          var holder = BI.createWidget({
            type: "bi.layout",
            cls: "bi-sortable-holder",
            height: $currentItem.outerHeight()
          });
          holder.element.css({
            "margin-left": $currentItem.css("margin-left"),
            "margin-right": $currentItem.css("margin-right"),
            "margin-top": $currentItem.css("margin-top"),
            "margin-bottom": $currentItem.css("margin-bottom"),
            margin: $currentItem.css("margin")
          });
          return holder.element;
        },
        update: function update() {}
      },
      start: function start(event, ui) {},
      stop: function stop(event, ui) {
        self.fireEvent(BI.SortList.EVENT_CHANGE);
      },
      over: function over(event, ui) {}
    });
  },
  _formatItems: function _formatItems(items) {
    BI.each(items, function (i, item) {
      item = BI.stripEL(item);
      item.cls = item.cls ? item.cls + " sort-item" : "sort-item";
      item.attributes = {
        sorted: item.value
      };
    });
    return items;
  },
  hasNext: function hasNext() {
    return this.loader.hasNext();
  },
  addItems: function addItems(items) {
    this.loader.addItems(items);
  },
  populate: function populate(items) {
    if (items) {
      arguments[0] = this._formatItems(items);
    }

    this.loader.populate.apply(this.loader, arguments);
  },
  empty: function empty() {
    this.loader.empty();
  },
  setNotSelectedValue: function setNotSelectedValue() {
    this.loader.setNotSelectedValue.apply(this.loader, arguments);
  },
  getNotSelectedValue: function getNotSelectedValue() {
    return this.loader.getNotSelectedValue();
  },
  setValue: function setValue() {
    this.loader.setValue.apply(this.loader, arguments);
  },
  getValue: function getValue() {
    return this.loader.getValue();
  },
  getAllButtons: function getAllButtons() {
    return this.loader.getAllButtons();
  },
  getAllLeaves: function getAllLeaves() {
    return this.loader.getAllLeaves();
  },
  getSelectedButtons: function getSelectedButtons() {
    return this.loader.getSelectedButtons();
  },
  getNotSelectedButtons: function getNotSelectedButtons() {
    return this.loader.getNotSelectedButtons();
  },
  getIndexByValue: function getIndexByValue(value) {
    return this.loader.getIndexByValue(value);
  },
  getNodeById: function getNodeById(id) {
    return this.loader.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(value) {
    return this.loader.getNodeByValue(value);
  },
  getSortedValues: function getSortedValues() {
    return this.loader.element.sortable("toArray", {
      attribute: "sorted"
    });
  }
});
BI.SortList.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.sort_list", BI.SortList);

/***/ }),
/* 758 */
/***/ (function(module, exports) {

/**
 * 有总页数和总行数的分页控件
 * Created by Young's on 2016/10/13.
 */
BI.AllCountPager = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.AllCountPager.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-all-count-pager",
      pagerDirection: "vertical",
      // 翻页按钮方向，可选值：vertical/horizontal
      height: 24,
      pages: 1,
      // 必选项
      curr: 1,
      // 初始化当前页， pages为数字时可用，
      count: 1,
      // 总行数
      rowInfoObject: null,
      showRowCount: true,
      showRowInfo: true
    });
  },
  _init: function _init() {
    BI.AllCountPager.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options,
        pagerIconCls = this._getPagerIconCls();

    this.editor = BI.createWidget({
      type: "bi.small_text_editor",
      cls: "pager-editor bi-border-radius",
      validationChecker: function validationChecker(v) {
        return o.pages === 0 && v === "0" || BI.isPositiveInteger(v);
      },
      hgap: 4,
      vgap: 0,
      value: o.curr,
      errorText: BI.i18nText("BI-Please_Input_Positive_Integer"),
      width: 40,
      height: 24,
      invisible: o.pages <= 1
    });
    this.pager = BI.createWidget({
      type: "bi.pager",
      width: 58,
      layouts: [{
        type: "bi.horizontal",
        lgap: 5
      }],
      dynamicShow: false,
      pages: o.pages,
      curr: o.curr,
      groups: 0,
      first: false,
      last: false,
      prev: {
        type: "bi.icon_button",
        value: "prev",
        title: BI.i18nText("BI-Previous_Page"),
        warningTitle: BI.i18nText("BI-Current_Is_First_Page"),
        height: 22,
        width: 22,
        cls: "bi-border bi-border-radius all-pager-prev bi-list-item-select2 " + pagerIconCls.preCls
      },
      next: {
        type: "bi.icon_button",
        value: "next",
        title: BI.i18nText("BI-Next_Page"),
        warningTitle: BI.i18nText("BI-Current_Is_Last_Page"),
        height: 22,
        width: 22,
        cls: "bi-border bi-border-radius all-pager-next bi-list-item-select2 " + pagerIconCls.nextCls
      },
      hasPrev: o.hasPrev,
      hasNext: o.hasNext,
      firstPage: o.firstPage,
      lastPage: o.lastPage,
      invisible: o.pages <= 1
    });
    this.editor.on(BI.TextEditor.EVENT_CONFIRM, function () {
      self.pager.setValue(BI.parseInt(self.editor.getValue()));
      self.fireEvent(BI.AllCountPager.EVENT_CHANGE);
    });
    this.pager.on(BI.Pager.EVENT_CHANGE, function () {
      self.fireEvent(BI.AllCountPager.EVENT_CHANGE);
    });
    this.pager.on(BI.Pager.EVENT_AFTER_POPULATE, function () {
      self.editor.setValue(self.pager.getCurrentPage());
    });
    this.allPages = BI.createWidget({
      type: "bi.label",
      title: o.pages,
      height: o.height,
      text: "/" + o.pages,
      lgap: 5,
      invisible: o.pages <= 1
    });
    BI.createWidget(o.showRowCount ? {
      type: "bi.vertical_adapt",
      element: this,
      scrollx: false,
      columnSize: ["fill", ""],
      horizontalAlign: BI.HorizontalAlign.Right,
      items: [this._getRowCountObject(), this.editor, this.allPages, this.pager]
    } : {
      type: "bi.vertical_adapt",
      element: this,
      items: [this.editor, this.allPages, this.pager]
    });
  },
  _getPagerIconCls: function _getPagerIconCls() {
    var o = this.options;

    switch (o.pagerDirection) {
      case "horizontal":
        return {
          preCls: "row-pre-page-h-font ",
          nextCls: "row-next-page-h-font "
        };

      case "vertical":
      default:
        return {
          preCls: "column-pre-page-h-font ",
          nextCls: "column-next-page-h-font "
        };
    }
  },
  _getRowCountObject: function _getRowCountObject() {
    var self = this,
        o = this.options;
    return {
      type: "bi.left",
      height: o.height,
      scrollable: false,
      ref: function ref(_ref) {
        self.rowCountObject = _ref;
      },
      items: [{
        type: "bi.label",
        height: o.height,
        text: BI.i18nText("BI-Basic_Total"),
        ref: function ref(_ref) {
          self.prevText = _ref;
        }
      }, {
        el: {
          type: "bi.label",
          ref: function ref(_ref) {
            self.rowCount = _ref;
          },
          cls: "row-count",
          height: o.height,
          text: o.count,
          title: o.count
        },
        hgap: 5
      }, {
        type: "bi.label",
        height: o.height,
        text: BI.i18nText("BI-Tiao_Data"),
        textAlign: "left"
      }, BI.isNotEmptyObject(o.rowInfoObject) ? o.rowInfoObject : null]
    };
  },
  setAllPages: function setAllPages(v) {
    this.allPages.setText("/" + v);
    this.allPages.setTitle(v);
    this.options.pages = v;
    this.pager.setAllPages(v);
    this.editor.setEnable(v >= 1);
    this.setPagerVisible(v > 1);
  },
  setShowRowInfo: function setShowRowInfo(b) {
    this.options.showRowInfo = b;
    this.rowCountObject.setVisible(b);
  },
  setValue: function setValue(v) {
    this.pager.setValue(v);
  },
  setVPage: function setVPage(v) {
    this.pager.setValue(v);
  },
  setCount: function setCount(count) {
    if (this.options.showRowCount) {
      this.rowCount.setText(count);
      this.rowCount.setTitle(count);
    }
  },
  setCountPrevText: function setCountPrevText(text) {
    if (this.options.showRowCount) {
      this.prevText.setText(text);
    }
  },
  getCurrentPage: function getCurrentPage() {
    return this.pager.getCurrentPage();
  },
  hasPrev: function hasPrev() {
    return this.pager.hasPrev();
  },
  hasNext: function hasNext() {
    return this.pager.hasNext();
  },
  isShowPager: function isShowPager() {
    return this.options.showRowInfo || this.options.pages > 1;
  },
  setPagerVisible: function setPagerVisible(b) {
    this.editor.setVisible(b);
    this.allPages.setVisible(b);
    this.pager.setVisible(b);
  },
  populate: function populate() {
    this.pager.populate();
    this.setPagerVisible(this.options.pages > 1);
  }
});
BI.AllCountPager.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.all_count_pager", BI.AllCountPager);

/***/ }),
/* 759 */
/***/ (function(module, exports) {

/**
 * 分页控件
 *
 * Created by GUY on 2015/8/31.
 * @class BI.DetailPager
 * @extends BI.Widget
 */
BI.DetailPager = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DetailPager.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-detail-pager",
      behaviors: {},
      layouts: [{
        type: "bi.horizontal"
      }],
      dynamicShow: true,
      // 是否动态显示上一页、下一页、首页、尾页， 若为false，则指对其设置使能状态
      // dynamicShow为false时以下两个有用
      dynamicShowFirstLast: false,
      // 是否动态显示首页、尾页
      dynamicShowPrevNext: false,
      // 是否动态显示上一页、下一页
      pages: false,
      // 总页数
      curr: function curr() {
        return 1;
      },
      // 初始化当前页
      groups: 0,
      // 连续显示分页数
      jump: BI.emptyFn,
      // 分页的回调函数
      first: false,
      // 是否显示首页
      last: false,
      // 是否显示尾页
      prev: "上一页",
      next: "下一页",
      firstPage: 1,
      lastPage: function lastPage() {
        // 在万不得已时才会调用这个函数获取最后一页的页码,  主要作用于setValue方法
        return 1;
      },
      hasPrev: BI.emptyFn,
      // pages不可用时有效
      hasNext: BI.emptyFn // pages不可用时有效

    });
  },
  _init: function _init() {
    BI.DetailPager.superclass._init.apply(this, arguments);

    var self = this;
    this.currPage = BI.result(this.options, "curr"); // 翻页太灵敏

    this._lock = false;
    this._debouce = BI.debounce(function () {
      self._lock = false;
    }, 300);

    this._populate();
  },
  _populate: function _populate() {
    var self = this,
        o = this.options,
        view = [],
        dict = {};
    this.empty();
    var pages = BI.result(o, "pages");
    var curr = BI.result(this, "currPage");
    var groups = BI.result(o, "groups");
    var first = BI.result(o, "first");
    var last = BI.result(o, "last");
    var prev = BI.result(o, "prev");
    var next = BI.result(o, "next");

    if (pages === false) {
      groups = 0;
      first = false;
      last = false;
    } else {
      groups > pages && (groups = pages);
    } // 计算当前组


    dict.index = Math.ceil((curr + (groups > 1 && groups !== pages ? 1 : 0)) / (groups === 0 ? 1 : groups)); // 当前页非首页，则输出上一页

    if ((!o.dynamicShow && !o.dynamicShowPrevNext || curr > 1) && prev !== false) {
      if (BI.isKey(prev)) {
        view.push({
          text: prev,
          value: "prev",
          disabled: pages === false ? o.hasPrev(curr) === false : !(curr > 1 && prev !== false)
        });
      } else {
        view.push(BI.extend({
          disabled: pages === false ? o.hasPrev(curr) === false : !(curr > 1 && prev !== false)
        }, prev));
      }
    } // 当前组非首组，则输出首页


    if ((!o.dynamicShow && !o.dynamicShowFirstLast || dict.index > 1 && groups !== 0) && first) {
      view.push({
        text: first,
        value: "first",
        disabled: !(dict.index > 1 && groups !== 0)
      });

      if (dict.index > 1 && groups !== 0) {
        view.push({
          type: "bi.label",
          cls: "page-ellipsis",
          text: "\u2026"
        });
      }
    } // 输出当前页组


    dict.poor = Math.floor((groups - 1) / 2);
    dict.start = dict.index > 1 ? curr - dict.poor : 1;
    dict.end = dict.index > 1 ? function () {
      var max = curr + (groups - dict.poor - 1);
      return max > pages ? pages : max;
    }() : groups;

    if (dict.end - dict.start < groups - 1) {
      // 最后一组状态
      dict.start = dict.end - groups + 1;
    }

    var s = dict.start,
        e = dict.end;

    if (first && last && dict.index > 1 && groups !== 0 && pages > groups && dict.end < pages && groups !== 0) {
      s++;
      e--;
    }

    for (; s <= e; s++) {
      if (s === curr) {
        view.push({
          text: s,
          value: s,
          selected: true
        });
      } else {
        view.push({
          text: s,
          value: s
        });
      }
    } // 总页数大于连续分页数，且当前组最大页小于总页，输出尾页


    if ((!o.dynamicShow && !o.dynamicShowFirstLast || pages > groups && dict.end < pages && groups !== 0) && last) {
      if (pages > groups && dict.end < pages && groups !== 0) {
        view.push({
          type: "bi.label",
          cls: "page-ellipsis",
          text: "\u2026"
        });
      }

      view.push({
        text: last,
        value: "last",
        disabled: !(pages > groups && dict.end < pages && groups !== 0)
      });
    } // 当前页不为尾页时，输出下一页


    dict.flow = !prev && groups === 0;

    if (!o.dynamicShow && !o.dynamicShowPrevNext && next || curr !== pages && next || dict.flow) {
      view.push(function () {
        if (BI.isKey(next)) {
          if (pages === false) {
            return {
              text: next,
              value: "next",
              disabled: o.hasNext(curr) === false
            };
          }

          return dict.flow && curr === pages ? {
            text: next,
            value: "next",
            disabled: true
          } : {
            text: next,
            value: "next",
            disabled: !(curr !== pages && next || dict.flow)
          };
        }

        return BI.extend({
          disabled: pages === false ? o.hasNext(curr) === false : !(curr !== pages && next || dict.flow)
        }, next);
      }());
    }

    this.button_group = BI.createWidget({
      type: "bi.button_group",
      element: this,
      items: BI.createItems(view, {
        cls: "page-item bi-border bi-list-item-active",
        height: 23
      }),
      behaviors: o.behaviors,
      layouts: o.layouts
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      if (self._lock === true) {
        return;
      }

      self._lock = true;

      self._debouce();

      if (type === BI.Events.CLICK) {
        var v = self.button_group.getValue()[0];

        switch (v) {
          case "first":
            self.currPage = 1;
            break;

          case "last":
            self.currPage = pages;
            break;

          case "prev":
            self.currPage--;
            break;

          case "next":
            self.currPage++;
            break;

          default:
            self.currPage = v;
            break;
        }

        o.jump.apply(self, [{
          pages: pages,
          curr: self.currPage
        }]);

        self._populate();

        self.fireEvent(BI.DetailPager.EVENT_CHANGE, obj);
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.fireEvent(BI.DetailPager.EVENT_AFTER_POPULATE);
  },
  getCurrentPage: function getCurrentPage() {
    return this.currPage;
  },
  setAllPages: function setAllPages(pages) {
    this.options.pages = pages;

    this._populate();
  },
  hasPrev: function hasPrev(v) {
    v || (v = 1);
    var o = this.options;
    var pages = this.options.pages;
    return pages === false ? o.hasPrev(v) : v > 1;
  },
  hasNext: function hasNext(v) {
    v || (v = 1);
    var o = this.options;
    var pages = this.options.pages;
    return pages === false ? o.hasNext(v) : v < pages;
  },
  setValue: function setValue(v) {
    var o = this.options;
    v = v || 0;
    v = v < 1 ? 1 : v;

    if (o.pages === false) {
      var lastPage = BI.result(o, "lastPage"),
          firstPage = 1;
      this.currPage = v > lastPage ? lastPage : (firstPage = BI.result(o, "firstPage"), v < firstPage ? firstPage : v);
    } else {
      v = v > o.pages ? o.pages : v;
      this.currPage = v;
    }

    this._populate();
  },
  getValue: function getValue() {
    var val = this.button_group.getValue()[0];

    switch (val) {
      case "prev":
        return -1;

      case "next":
        return 1;

      case "first":
        return BI.MIN;

      case "last":
        return BI.MAX;

      default:
        return val;
    }
  },
  attr: function attr(key, value) {
    BI.DetailPager.superclass.attr.apply(this, arguments);

    if (key === "curr") {
      this.currPage = BI.result(this.options, "curr");
    }
  },
  populate: function populate() {
    this._populate();
  }
});
BI.DetailPager.EVENT_CHANGE = "EVENT_CHANGE";
BI.DetailPager.EVENT_AFTER_POPULATE = "EVENT_AFTER_POPULATE";
BI.shortcut("bi.detail_pager", BI.DetailPager);

/***/ }),
/* 760 */
/***/ (function(module, exports) {

/**
 * 显示页码的分页控件
 *
 * Created by GUY on 2016/6/30.
 * @class BI.DirectionPager
 * @extends BI.Widget
 */
BI.DirectionPager = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DirectionPager.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-direction-pager",
      height: 24,
      horizontal: {
        pages: false,
        // 总页数
        curr: 1,
        // 初始化当前页， pages为数字时可用
        hasPrev: BI.emptyFn,
        hasNext: BI.emptyFn,
        firstPage: 1,
        lastPage: BI.emptyFn
      },
      vertical: {
        pages: false,
        // 总页数
        curr: 1,
        // 初始化当前页， pages为数字时可用
        hasPrev: BI.emptyFn,
        hasNext: BI.emptyFn,
        firstPage: 1,
        lastPage: BI.emptyFn
      }
    });
  },
  _init: function _init() {
    BI.DirectionPager.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    var v = o.vertical,
        h = o.horizontal;

    this._createVPager();

    this._createHPager();

    this.layout = BI.createWidget({
      type: "bi.absolute",
      scrollable: false,
      element: this,
      items: [{
        el: this.vpager,
        top: 0,
        right: 86
      }, {
        el: this.vlabel,
        top: 0,
        right: 110
      }, {
        el: this.hpager,
        top: 0,
        right: 0
      }, {
        el: this.hlabel,
        top: 0,
        right: 24
      }]
    });
  },
  _createVPager: function _createVPager() {
    var self = this,
        o = this.options;
    var v = o.vertical;
    this.vlabel = BI.createWidget({
      type: "bi.label",
      width: 24,
      height: 24,
      value: v.curr,
      title: v.curr,
      invisible: true
    });
    this.vpager = BI.createWidget({
      type: "bi.pager",
      width: 72,
      layouts: [{
        type: "bi.horizontal",
        scrollx: false,
        rgap: 24
      }],
      invisible: true,
      dynamicShow: false,
      pages: v.pages,
      curr: v.curr,
      groups: 0,
      first: false,
      last: false,
      prev: {
        type: "bi.icon_button",
        value: "prev",
        title: BI.i18nText("BI-Up_Page"),
        warningTitle: BI.i18nText("BI-Current_Is_First_Page"),
        height: 22,
        width: 22,
        cls: "bi-border bi-border-radius direction-pager-prev column-pre-page-h-font bi-list-item-select2"
      },
      next: {
        type: "bi.icon_button",
        value: "next",
        title: BI.i18nText("BI-Down_Page"),
        warningTitle: BI.i18nText("BI-Current_Is_Last_Page"),
        height: 22,
        width: 22,
        cls: "bi-border bi-border-radius direction-pager-next column-next-page-h-font bi-list-item-select2"
      },
      hasPrev: v.hasPrev,
      hasNext: v.hasNext,
      firstPage: v.firstPage,
      lastPage: v.lastPage
    });
    this.vpager.on(BI.Pager.EVENT_CHANGE, function () {
      self.fireEvent(BI.DirectionPager.EVENT_CHANGE);
    });
    this.vpager.on(BI.Pager.EVENT_AFTER_POPULATE, function () {
      self.vlabel.setValue(this.getCurrentPage());
      self.vlabel.setTitle(this.getCurrentPage());
    });
  },
  _createHPager: function _createHPager() {
    var self = this,
        o = this.options;
    var h = o.horizontal;
    this.hlabel = BI.createWidget({
      type: "bi.label",
      width: 24,
      height: 24,
      value: h.curr,
      title: h.curr,
      invisible: true
    });
    this.hpager = BI.createWidget({
      type: "bi.pager",
      width: 72,
      layouts: [{
        type: "bi.horizontal",
        scrollx: false,
        rgap: 24
      }],
      invisible: true,
      dynamicShow: false,
      pages: h.pages,
      curr: h.curr,
      groups: 0,
      first: false,
      last: false,
      prev: {
        type: "bi.icon_button",
        value: "prev",
        title: BI.i18nText("BI-Left_Page"),
        warningTitle: BI.i18nText("BI-Current_Is_First_Page"),
        height: 22,
        width: 22,
        cls: "bi-border bi-border-radius direction-pager-prev row-pre-page-h-font bi-list-item-select2"
      },
      next: {
        type: "bi.icon_button",
        value: "next",
        title: BI.i18nText("BI-Right_Page"),
        warningTitle: BI.i18nText("BI-Current_Is_Last_Page"),
        height: 22,
        width: 22,
        cls: "bi-border bi-border-radius direction-pager-next row-next-page-h-font bi-list-item-select2"
      },
      hasPrev: h.hasPrev,
      hasNext: h.hasNext,
      firstPage: h.firstPage,
      lastPage: h.lastPage
    });
    this.hpager.on(BI.Pager.EVENT_CHANGE, function () {
      self.fireEvent(BI.DirectionPager.EVENT_CHANGE);
    });
    this.hpager.on(BI.Pager.EVENT_AFTER_POPULATE, function () {
      self.hlabel.setValue(this.getCurrentPage());
      self.hlabel.setTitle(this.getCurrentPage());
    });
  },
  getVPage: function getVPage() {
    return this.vpager.getCurrentPage();
  },
  getHPage: function getHPage() {
    return this.hpager.getCurrentPage();
  },
  setVPage: function setVPage(v) {
    this.vpager.setValue(v);
    this.vlabel.setValue(v);
    this.vlabel.setTitle(v);
  },
  setHPage: function setHPage(v) {
    this.hpager.setValue(v);
    this.hlabel.setValue(v);
    this.hlabel.setTitle(v);
  },
  hasVNext: function hasVNext() {
    return this.vpager.hasNext();
  },
  hasHNext: function hasHNext() {
    return this.hpager.hasNext();
  },
  hasVPrev: function hasVPrev() {
    return this.vpager.hasPrev();
  },
  hasHPrev: function hasHPrev() {
    return this.hpager.hasPrev();
  },
  setHPagerVisible: function setHPagerVisible(b) {
    this.hpager.setVisible(b);
    this.hlabel.setVisible(b);
  },
  setVPagerVisible: function setVPagerVisible(b) {
    this.vpager.setVisible(b);
    this.vlabel.setVisible(b);
  },
  populate: function populate() {
    this.vpager.populate();
    this.hpager.populate();
    var vShow = false,
        hShow = false;

    if (!this.hasHNext() && !this.hasHPrev()) {
      this.setHPagerVisible(false);
    } else {
      this.setHPagerVisible(true);
      hShow = true;
    }

    if (!this.hasVNext() && !this.hasVPrev()) {
      this.setVPagerVisible(false);
    } else {
      this.setVPagerVisible(true);
      vShow = true;
    }

    this.setVisible(hShow || vShow);
    var num = [86, 110, 0, 24];
    var items = this.layout.attr("items");

    if (vShow === true && hShow === true) {
      items[0].right = num[0];
      items[1].right = num[1];
      items[2].right = num[2];
      items[3].right = num[3];
    } else if (vShow === true) {
      items[0].right = num[2];
      items[1].right = num[3];
    } else if (hShow === true) {
      items[2].right = num[2];
      items[3].right = num[3];
    }

    this.layout.attr("items", items);
    this.layout.resize();
  },
  clear: function clear() {
    this.vpager.attr("curr", 1);
    this.hpager.attr("curr", 1);
  }
});
BI.DirectionPager.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.direction_pager", BI.DirectionPager);

/***/ }),
/* 761 */
/***/ (function(module, exports) {

/**
 * guy
 * 复选导航条
 * Created by GUY on 2015/8/25.
 * @class BI.MultiSelectBar
 * @extends BI.BasicButton
 */
BI.MultiSelectBar = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectBar.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-multi-select-bar",
      height: 25,
      text: BI.i18nText("BI-Select_All"),
      isAllCheckedBySelectedValue: BI.emptyFn,
      // 手动控制选中
      disableSelected: true,
      isHalfCheckedBySelectedValue: function isHalfCheckedBySelectedValue(selectedValues) {
        return selectedValues.length > 0;
      },
      halfSelected: false,
      iconWrapperWidth: 26,
      iconWidth: 14,
      iconHeight: 14
    });
  },
  _init: function _init() {
    BI.MultiSelectBar.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    var isSelect = o.selected === true;
    var isHalfSelect = !o.selected && o.halfSelected;
    this.checkbox = BI.createWidget({
      type: "bi.checkbox",
      stopPropagation: true,
      handler: function handler() {
        self.setSelected(self.isSelected());
      },
      selected: isSelect,
      invisible: isHalfSelect,
      iconWidth: o.iconWidth,
      iconHeight: o.iconHeight
    });
    this.half = BI.createWidget({
      type: "bi.half_icon_button",
      stopPropagation: true,
      handler: function handler() {
        self.setSelected(true);
      },
      invisible: isSelect || !isHalfSelect,
      iconWidth: o.iconWidth,
      iconHeight: o.iconHeight
    });
    this.checkbox.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CLICK, self.isSelected(), self);
    });
    this.checkbox.on(BI.Checkbox.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectBar.EVENT_CHANGE, self.isSelected(), self);
    });
    this.half.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CLICK, self.isSelected(), self);
    });
    this.half.on(BI.HalfIconButton.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectBar.EVENT_CHANGE, self.isSelected(), self);
    });
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      keyword: o.keyword,
      value: o.value,
      py: o.py
    });
    BI.createWidget({
      type: "bi.htape",
      element: this,
      items: [{
        width: o.iconWrapperWidth,
        el: {
          type: "bi.center_adapt",
          items: [this.checkbox, this.half]
        }
      }, {
        el: this.text
      }]
    });
  },
  _setSelected: function _setSelected(v) {
    this.checkbox.setSelected(!!v);
  },
  // 自己手动控制选中
  beforeClick: function beforeClick() {
    var isHalf = this.isHalfSelected(),
        isSelected = this.isSelected();

    if (isHalf === true) {
      this.setSelected(true);
    } else {
      this.setSelected(!isSelected);
    }
  },
  setSelected: function setSelected(v) {
    this.checkbox.setSelected(v);
    this.setHalfSelected(false);
  },
  setHalfSelected: function setHalfSelected(b) {
    this.halfSelected = !!b;

    if (b === true) {
      this.checkbox.setSelected(false);
      this.half.visible();
      this.checkbox.invisible();
    } else {
      this.half.invisible();
      this.checkbox.visible();
    }
  },
  isHalfSelected: function isHalfSelected() {
    return !this.isSelected() && !!this.halfSelected;
  },
  isSelected: function isSelected() {
    return this.checkbox.isSelected();
  },
  setValue: function setValue(selectedValues) {
    BI.MultiSelectBar.superclass.setValue.apply(this, arguments);
    var isAllChecked = this.options.isAllCheckedBySelectedValue.apply(this, arguments);
    this.setSelected(isAllChecked);
    !isAllChecked && this.setHalfSelected(this.options.isHalfCheckedBySelectedValue.apply(this, arguments));
  },
  doClick: function doClick() {
    BI.MultiSelectBar.superclass.doClick.apply(this, arguments);

    if (this.isValid()) {
      this.fireEvent(BI.MultiSelectBar.EVENT_CHANGE, this.isSelected(), this);
    }
  }
});
BI.MultiSelectBar.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_bar", BI.MultiSelectBar);

/***/ }),
/* 762 */
/***/ (function(module, exports) {

/**
 * guy
 * 二级树
 * @class BI.LevelTree
 * @extends BI.Single
 */
BI.LevelTree = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.LevelTree.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-level-tree",
      el: {
        chooseType: 0
      },
      expander: {},
      items: [],
      value: ""
    });
  },
  _init: function _init() {
    BI.LevelTree.superclass._init.apply(this, arguments);

    this.initTree(this.options.items);
  },
  _formatItems: function _formatItems(nodes, layer, pNode) {
    var self = this;
    BI.each(nodes, function (i, node) {
      var extend = {
        layer: layer,
        height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        isFirstNode: i === 0,
        isLastNode: i === nodes.length - 1
      };

      if (!BI.isKey(node.id)) {
        node.id = BI.UUID();
      }

      extend.pNode = pNode;

      if (node.isParent === true || node.parent === true || BI.isNotEmptyArray(node.children)) {
        extend.type = "bi.tree_node";
        extend.selectable = false;
        BI.defaults(node, extend);

        self._formatItems(node.children, layer + 1, node);
      } else {
        extend.type = "bi.tree_item";
        BI.defaults(node, extend);
      }
    });
    return nodes;
  },
  _assertId: function _assertId(sNodes) {
    BI.each(sNodes, function (i, node) {
      if (!BI.isKey(node.id)) {
        node.id = BI.UUID();
      }
    });
  },
  // 构造树结构，
  initTree: function initTree(nodes) {
    var self = this,
        o = this.options;
    this.empty();

    this._assertId(nodes);

    this.tree = BI.createWidget({
      type: "bi.custom_tree",
      element: this,
      expander: BI.extend({
        type: "bi.tree_expander",
        el: {},
        isDefaultInit: false,
        selectable: false,
        popup: {
          type: "bi.custom_tree"
        }
      }, o.expander),
      items: this._formatItems(BI.Tree.transformToTreeFormat(nodes), 0),
      value: o.value,
      el: BI.extend({
        type: "bi.button_tree",
        chooseType: 0,
        layouts: [{
          type: "bi.vertical"
        }]
      }, o.el)
    });
    this.tree.on(BI.Controller.EVENT_CHANGE, function (type, value, ob) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.LevelTree.EVENT_CHANGE, value, ob);
        self.setValue(value);
      }
    });
  },
  // 生成树方法
  stroke: function stroke(nodes) {
    this.tree.stroke.apply(this.tree, arguments);
  },
  populate: function populate(items, keyword) {
    items = this._formatItems(BI.Tree.transformToTreeFormat(items), 0);
    this.tree.populate(items, keyword);
  },
  setValue: function setValue(v) {
    this.tree.setValue(v);
  },
  getValue: function getValue() {
    return this.tree.getValue();
  },
  getAllLeaves: function getAllLeaves() {
    return this.tree.getAllLeaves();
  },
  getNodeById: function getNodeById(id) {
    return this.tree.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(id) {
    return this.tree.getNodeByValue(id);
  }
});
BI.LevelTree.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.level_tree", BI.LevelTree);

/***/ }),
/* 763 */
/***/ (function(module, exports) {

!function () {
  var Widget = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-tree-expander",
      layer: 0,
      // 第几层级
      isLastNode: false,
      //   是不是最后一个
      isFirstNode: false,
      // 是不是第一个
      selectable: false,
      showLine: true
    },
    render: function render() {
      var self = this;
      var o = this.options;
      this.trigger = BI.createWidget(o.el, {
        forceNotSelected: !o.selectable
      });
      this.trigger.on(BI.Controller.EVENT_CHANGE, function (type) {
        o.selectable && self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
      });
      return {
        type: "bi.expander",
        ref: function ref(_ref) {
          self.expander = _ref;
        },
        trigger: o.selectable ? "" : "click",
        el: this.trigger,
        isDefaultInit: o.isDefaultInit,
        popup: {
          type: "bi.tree_expander.popup",
          layer: o.layer || o.el.layer,
          isLastNode: o.isLastNode || o.el.isLastNode,
          isFirstNode: o.isFirstNode || o.el.isFirstNode,
          showLine: o.showLine,
          el: o.popup
        },
        value: o.value,
        listeners: [{
          eventName: BI.Controller.EVENT_CHANGE,
          action: function action(type) {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
          }
        }]
      };
    },
    setValue: function setValue(v) {
      if (BI.contains(v, this.trigger.getValue())) {
        this.trigger.setSelected(true);
        this.expander.setValue([]);
      } else {
        this.trigger.setSelected(false);
        this.expander.setValue(v);
      }
    },
    getValue: function getValue() {
      if (this.trigger.isSelected()) {
        var value = this.trigger.getValue();
        return BI.isArray(value) ? value : [value];
      }

      return this.expander.getValue();
    },
    populate: function populate(items) {
      this.expander.populate(items);
    },
    getAllLeaves: function getAllLeaves() {
      return this.expander && this.expander.getAllLeaves();
    }
  });
  BI.shortcut("bi.tree_expander", Widget);
}();

/***/ }),
/* 764 */
/***/ (function(module, exports) {

!function () {
  var Widget = BI.inherit(BI.Widget, {
    props: function props() {
      return {
        baseCls: "bi-tree-expander-popup",
        layer: 0,
        // 第几层级
        el: {},
        isLastNode: false,
        showLine: true
      };
    },
    render: function render() {
      var self = this;
      var o = this.options;
      var offset = BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2;
      this.popupView = BI.createWidget(BI.extend(o.el, {
        value: o.value
      }), this);
      this.popupView.on(BI.Controller.EVENT_CHANGE, function () {
        self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
      });

      if (o.showLine) {
        this.popupView.element.css("margin-left", BI.pixFormat(-offset * (o.layer + 1)));
        this.element.css("margin-left", BI.pixFormat(offset * (o.layer + 1)));
      }

      return {
        type: "bi.vertical",
        cls: o.showLine && !o.isLastNode ? BI.STYLE_CONSTANTS.LINK_LINE_TYPE === "solid" ? "line solid" : "line" : "",
        scrolly: null,
        items: [this.popupView]
      };
    },
    setValue: function setValue(v) {
      this.popupView.setValue(v);
    },
    getValue: function getValue() {
      return this.popupView.getValue();
    },
    populate: function populate(items) {
      this.popupView.populate(items);
    },
    getAllLeaves: function getAllLeaves() {
      return this.popupView && this.popupView.getAllLeaves();
    }
  });
  BI.shortcut("bi.tree_expander.popup", Widget);
}();

/***/ }),
/* 765 */
/***/ (function(module, exports) {

BI.Collapse = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-collapse",
    items: [],
    value: [],
    trigger: "click",
    accordion: false,
    bordered: true,
    ghost: false,
    isDefaultInit: false,
    openMotion: {
      animation: "bi-slide-up",
      animationDuring: 200
    }
  },
  render: function render() {
    var o = this.options;
    var collapseCls = o.ghost ? "" : "bi-background " + (o.bordered ? "bi-border bi-border-radius" : "");
    this.expanders = {};
    return {
      type: "bi.vertical",
      cls: collapseCls,
      items: this._getItems(this.options.items)
    };
  },
  _getItems: function _getItems(items) {
    var self = this,
        o = this.options;
    return BI.map(items, function (index, item) {
      var isActive = BI.contains(self._getCurrentValue(o.value), item.value);
      var cls = o.ghost || index === 0 ? "" : "bi-border-top";
      var el = BI.extend({
        type: "bi.arrow_group_node",
        height: 30,
        text: item.text,
        value: item.value,
        open: isActive
      }, item.el);
      var popup = BI.extend({
        animation: o.openMotion.animation,
        animationDuring: o.openMotion.animationDuring
      }, item.popup);
      return BI.extend({
        type: "bi.expander",
        cls: cls,
        isDefaultInit: o.isDefaultInit,
        trigger: o.trigger,
        listeners: [{
          eventName: BI.Expander.EVENT_EXPAND,
          action: function action() {
            self._hideOtherExpander(item.value);

            self.fireEvent(BI.Collapse.EVENT_EXPAND, item.value);
          }
        }]
      }, item, {
        el: el,
        popup: popup,
        ref: function ref(_ref) {
          BI.isFunction(item.ref) && item.ref(_ref);
          self.expanders[item.value] = _ref;
        }
      });
    });
  },
  _hideOtherExpander: function _hideOtherExpander(expandKey) {
    if (this.options.accordion) {
      BI.each(this.expanders, function (key, expander) {
        key !== expandKey + "" && expander.hideView();
      });
    }
  },
  _getCurrentValue: function _getCurrentValue(v) {
    var values = BI.isNotEmptyArray(v) ? v : BI.isKey(v) ? [v] : [];
    return this.options.accordion ? values.slice(0, 1) : values;
  },
  getValue: function getValue() {
    var value = [];
    BI.each(this.expanders, function (key, expander) {
      expander.isExpanded() && value.push(key);
    });
    return value;
  },
  setValue: function setValue(v) {
    var values = BI.map(this._getCurrentValue(v), function (idx, value) {
      return value + "";
    });
    BI.each(this.expanders, function (key, expander) {
      BI.contains(values, key) ? expander.showView() : expander.hideView();
    });
  }
});
BI.Collapse.EVENT_EXPAND = "EVENT_EXPAND";
BI.shortcut("bi.collapse", BI.Collapse);

/***/ }),
/* 766 */
/***/ (function(module, exports) {

/**
 * Created by zcf on 2017/2/20.
 */
BI.StaticDatePaneCard = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.StaticDatePaneCard.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-date-pane",
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      selectedTime: null
    });
  },
  _init: function _init() {
    BI.StaticDatePaneCard.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.today = BI.getDate();
    this._year = this.today.getFullYear();
    this._month = this.today.getMonth() + 1;
    this.selectedTime = o.selectedTime || {
      year: this._year,
      month: this._month
    };
    this.datePicker = BI.createWidget({
      type: "bi.date_picker",
      behaviors: o.behaviors,
      min: o.min,
      max: o.max
    });
    this.datePicker.on(BI.DatePicker.EVENT_CHANGE, function () {
      var value = self.datePicker.getValue();
      var monthDay = BI.getMonthDays(BI.getDate(value.year, value.month - 1, 1));
      var day = self.selectedTime.day || 0;

      if (day > monthDay) {
        day = monthDay;
      }

      self.selectedTime = {
        year: value.year,
        month: value.month
      };
      day !== 0 && (self.selectedTime.day = day);
      self.calendar.setSelect(BI.Calendar.getPageByDateJSON(self.selectedTime));
      self.calendar.setValue(self.selectedTime);
      day !== 0 && self.fireEvent(BI.DateCalendarPopup.EVENT_CHANGE);
    });
    this.datePicker.on(BI.DatePicker.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW, function () {
      self.fireEvent(BI.StaticDatePaneCard.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
    });
    this.calendar = BI.createWidget({
      direction: "custom",
      // logic: {
      //     dynamic: false
      // },
      type: "bi.navigation",
      tab: this.datePicker,
      cardCreator: BI.bind(this._createNav, this)
    });
    this.calendar.on(BI.Navigation.EVENT_CHANGE, function () {
      self.selectedTime = self.calendar.getValue();
      self.calendar.empty();
      self.setValue(self.selectedTime);
      self.fireEvent(BI.DateCalendarPopup.EVENT_CHANGE);
    });
    this.setValue(o.selectedTime);
    BI.createWidget({
      type: "bi.vtape",
      element: this,
      items: [{
        el: this.datePicker,
        height: 40
      }, this.calendar],
      hgap: 10
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.layout",
          cls: "bi-split-top"
        },
        height: 1,
        top: 40,
        left: 0,
        right: 0
      }]
    });
  },
  _createNav: function _createNav(v) {
    var date = BI.Calendar.getDateJSONByPage(v);
    var calendar = BI.createWidget({
      type: "bi.calendar",
      logic: {
        dynamic: false
      },
      min: this.options.min,
      max: this.options.max,
      year: date.year,
      month: date.month,
      day: this.selectedTime.day
    });
    return calendar;
  },
  _getNewCurrentDate: function _getNewCurrentDate() {
    var today = BI.getDate();
    return {
      year: today.getFullYear(),
      month: today.getMonth() + 1
    };
  },
  _setCalenderValue: function _setCalenderValue(date) {
    this.calendar.setSelect(BI.Calendar.getPageByDateJSON(date));
    this.calendar.setValue(date);
    this.selectedTime = date;
  },
  _setDatePicker: function _setDatePicker(timeOb) {
    if (BI.isNull(timeOb) || BI.isNull(timeOb.year) || BI.isNull(timeOb.month)) {
      this.datePicker.setValue(this._getNewCurrentDate());
    } else {
      this.datePicker.setValue(timeOb);
    }
  },
  _setCalendar: function _setCalendar(timeOb) {
    if (BI.isNull(timeOb) || BI.isNull(timeOb.day)) {
      this.calendar.empty();

      this._setCalenderValue(this._getNewCurrentDate());
    } else {
      this._setCalenderValue(timeOb);
    }
  },
  _checkMin: function _checkMin() {
    var o = this.options;
    BI.each(this.calendar.getAllCard(), function (idx, calendar) {
      calendar.setMinDate(o.min);
    });
  },
  _checkMax: function _checkMax() {
    var o = this.options;
    BI.each(this.calendar.getAllCard(), function (idx, calendar) {
      calendar.setMaxDate(o.max);
    });
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
      this.datePicker.setMinDate(minDate);

      this._checkMin();
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
      this.datePicker.setMaxDate(maxDate);

      this._checkMax();
    }
  },
  setValue: function setValue(timeOb) {
    this._setDatePicker(timeOb);

    this._setCalendar(timeOb);
  },
  getValue: function getValue() {
    return this.selectedTime;
  }
});
BI.StaticDatePaneCard.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.static_date_pane_card", BI.StaticDatePaneCard);

/***/ }),
/* 767 */
/***/ (function(module, exports) {

BI.DynamicDatePane = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-dynamic-date-pane",
    minDate: "1900-01-01",
    maxDate: "2099-12-31",
    supportDynamic: true
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vtape",
      items: [{
        el: {
          type: "bi.linear_segment",
          invisible: !o.supportDynamic,
          cls: "bi-split-bottom",
          height: 30,
          items: BI.createItems([{
            text: BI.i18nText("BI-Multi_Date_YMD"),
            value: BI.DynamicDatePane.Static
          }, {
            text: BI.i18nText("BI-Basic_Dynamic_Title"),
            value: BI.DynamicDatePane.Dynamic
          }], {
            textAlign: "center"
          }),
          listeners: [{
            eventName: BI.ButtonGroup.EVENT_CHANGE,
            action: function action() {
              var value = this.getValue()[0];
              self.dateTab.setSelect(value);

              switch (value) {
                case BI.DynamicDatePane.Static:
                  var date = BI.DynamicDateHelper.getCalculation(self.dynamicPane.getValue());
                  self.ymd.setValue({
                    year: date.getFullYear(),
                    month: date.getMonth() + 1,
                    day: date.getDate()
                  });
                  break;

                case BI.DynamicDatePane.Dynamic:
                  self.dynamicPane.setValue({
                    year: 0
                  });
                  break;

                default:
                  break;
              }

              self.fireEvent(BI.DynamicDatePane.EVENT_CHANGE);
            }
          }],
          ref: function ref() {
            self.switcher = this;
          }
        },
        height: o.supportDynamic ? 30 : 0
      }, {
        type: "bi.tab",
        ref: function ref() {
          self.dateTab = this;
        },
        showIndex: BI.DynamicDatePane.Static,
        cardCreator: function cardCreator(v) {
          switch (v) {
            case BI.DynamicDatePane.Static:
              return {
                type: "bi.static_date_pane_card",
                min: o.minDate,
                max: o.maxDate,
                behaviors: o.behaviors,
                listeners: [{
                  eventName: "EVENT_CHANGE",
                  action: function action() {
                    self.fireEvent(BI.DynamicDatePane.EVENT_CHANGE);
                  }
                }, {
                  eventName: "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW",
                  action: function action() {
                    self.fireEvent(BI.DynamicDatePane.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
                  }
                }],
                ref: function ref() {
                  self.ymd = this;
                }
              };

            case BI.DynamicDatePane.Dynamic:
            default:
              return {
                type: "bi.vtape",
                items: [{
                  type: "bi.dynamic_date_card",
                  min: o.minDate,
                  max: o.maxDate,
                  ref: function ref() {
                    self.dynamicPane = this;
                  }
                }, {
                  el: {
                    type: "bi.center",
                    items: [{
                      type: "bi.text_button",
                      cls: "bi-high-light bi-border-top",
                      shadow: true,
                      text: BI.i18nText("BI-Basic_Clear"),
                      textHeight: 23,
                      listeners: [{
                        eventName: BI.TextButton.EVENT_CHANGE,
                        action: function action() {
                          self.setValue();
                          self.fireEvent(BI.DynamicDatePane.EVENT_CHANGE);
                        }
                      }]
                    }, {
                      type: "bi.text_button",
                      cls: "bi-border-left bi-high-light bi-border-top",
                      textHeight: 23,
                      shadow: true,
                      text: BI.i18nText("BI-Basic_OK"),
                      listeners: [{
                        eventName: BI.TextButton.EVENT_CHANGE,
                        action: function action() {
                          var type = self.dateTab.getSelect();

                          if (type === BI.DynamicDateCombo.Dynamic) {
                            self.dynamicPane.checkValidation(true) && self.fireEvent(BI.DynamicDatePopup.EVENT_CHANGE);
                          } else {
                            self.fireEvent(BI.DynamicDatePane.EVENT_CHANGE);
                          }
                        }
                      }]
                    }]
                  },
                  height: 24
                }]
              };
          }
        }
      }]
    };
  },
  created: function created() {
    this.setValue(this.options.value);
  },
  _checkValueValid: function _checkValueValid(value) {
    return BI.isNull(value) || BI.isEmptyObject(value) || BI.isEmptyString(value);
  },
  _checkValue: function _checkValue(v) {
    switch (v.type) {
      case BI.DynamicDateCombo.Dynamic:
        return BI.isNotEmptyObject(v.value);

      case BI.DynamicDateCombo.Static:
      default:
        return true;
    }
  },
  setMinDate: function setMinDate(minDate) {
    if (this.options.minDate !== minDate) {
      this.options.minDate = minDate;
      this.ymd.setMinDate(minDate);
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (this.options.maxDate !== maxDate) {
      this.options.maxDate = maxDate;
      this.ymd.setMaxDate(maxDate);
    }
  },
  setValue: function setValue(v) {
    v = v || {};
    var type = v.type || BI.DynamicDateCombo.Static;
    var value = v.value || v;
    this.switcher.setValue(type);
    this.dateTab.setSelect(type);

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        this.dynamicPane.setValue(value);
        break;

      case BI.DynamicDateCombo.Static:
      default:
        if (this._checkValueValid(value)) {
          var date = BI.getDate();
          this.ymd.setValue({
            year: date.getFullYear(),
            month: date.getMonth() + 1
          });
        } else {
          this.ymd.setValue(value);
        }

        break;
    }
  },
  getValue: function getValue() {
    var type = this.dateTab.getSelect();
    return {
      type: type,
      value: type === BI.DynamicDatePane.Static ? this.dateTab.getValue() : this.dynamicPane.getValue()
    };
  }
});
BI.DynamicDatePane.EVENT_CHANGE = "EVENT_CHANGE";
BI.DynamicDatePane.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.dynamic_date_pane", BI.DynamicDatePane);
BI.extend(BI.DynamicDatePane, {
  Static: 1,
  Dynamic: 2
});

/***/ }),
/* 768 */
/***/ (function(module, exports) {

/**
 * Created by Urthur on 2017/7/14.
 */
BI.DateTimeCombo = BI.inherit(BI.Single, {
  constants: {
    popupHeight: 290,
    popupWidth: 270,
    comboAdjustHeight: 1,
    border: 1,
    iconWidth: 24
  },
  _defaultConfig: function _defaultConfig(conf) {
    return BI.extend(BI.DateTimeCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-date-time-combo bi-focus-shadow " + (conf.simple ? "bi-border-bottom" : "bi-border bi-border-radius"),
      width: 200,
      height: 24,
      minDate: "1900-01-01",
      maxDate: "2099-12-31"
    });
  },
  _init: function _init() {
    BI.DateTimeCombo.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    var date = BI.getDate();
    this.storeValue = BI.isNotNull(opts.value) ? opts.value : {
      year: date.getFullYear(),
      month: date.getMonth() + 1,
      day: date.getDate(),
      hour: date.getHours(),
      minute: date.getMinutes(),
      second: date.getSeconds()
    };
    this.trigger = BI.createWidget({
      type: "bi.date_time_trigger",
      height: opts.height,
      min: opts.minDate,
      max: opts.maxDate,
      value: opts.value
    });
    this.popup = BI.createWidget({
      type: "bi.date_time_popup",
      behaviors: opts.behaviors,
      min: opts.minDate,
      max: opts.maxDate,
      value: opts.value
    });
    self.setValue(this.storeValue);
    this.popup.on(BI.DateTimePopup.BUTTON_CANCEL_EVENT_CHANGE, function () {
      self.setValue(self.storeValue);
      self.hidePopupView();
      self.fireEvent(BI.DateTimeCombo.EVENT_CANCEL);
    });
    this.popup.on(BI.DateTimePopup.BUTTON_OK_EVENT_CHANGE, function () {
      self.storeValue = self.popup.getValue();
      self.setValue(self.storeValue);
      self.hidePopupView();
      self.fireEvent(BI.DateTimeCombo.EVENT_CONFIRM);
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      container: opts.container,
      toggle: false,
      isNeedAdjustHeight: false,
      isNeedAdjustWidth: false,
      el: this.trigger,
      adjustLength: this.constants.comboAdjustHeight,
      popup: {
        el: this.popup,
        width: this.constants.popupWidth,
        stopPropagation: false
      },
      // DEC-4250 和复选下拉一样，点击不收起
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0;
      }
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      self.popup.setValue(self.storeValue);
      self.fireEvent(BI.DateTimeCombo.EVENT_BEFORE_POPUPVIEW);
    });
    var triggerBtn = BI.createWidget({
      type: "bi.icon_button",
      cls: "bi-trigger-icon-button date-font",
      width: this.constants.iconWidth,
      height: opts.height
    });
    triggerBtn.on(BI.IconButton.EVENT_CHANGE, function () {
      if (self.combo.isViewVisible()) {// self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    BI.createWidget({
      type: "bi.htape",
      columnSize: ["", this.constants.iconWidth],
      element: this,
      items: [this.combo, triggerBtn]
    });
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    this.popup.setValue(v);
    this.trigger.setValue(v);
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  hidePopupView: function hidePopupView() {
    this.combo.hideView();
  }
});
BI.DateTimeCombo.EVENT_CANCEL = "EVENT_CANCEL";
BI.DateTimeCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DateTimeCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.DateTimeCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.date_time_combo", BI.DateTimeCombo);

/***/ }),
/* 769 */
/***/ (function(module, exports) {

/**
 * Created by Urthur on 2017/7/14.
 */
BI.DateTimePopup = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DateTimePopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-date-time-popup",
      width: 268,
      height: 374
    });
  },
  _init: function _init() {
    BI.DateTimePopup.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    this.cancelButton = BI.createWidget({
      type: "bi.text_button",
      cls: "multidate-popup-button bi-border-top bi-border-right",
      shadow: true,
      text: BI.i18nText("BI-Basic_Cancel")
    });
    this.cancelButton.on(BI.TextButton.EVENT_CHANGE, function () {
      self.fireEvent(BI.DateTimePopup.BUTTON_CANCEL_EVENT_CHANGE);
    });
    this.okButton = BI.createWidget({
      type: "bi.text_button",
      cls: "multidate-popup-button bi-border-top",
      shadow: true,
      text: BI.i18nText("BI-Basic_OK")
    });
    this.okButton.on(BI.TextButton.EVENT_CHANGE, function () {
      self.fireEvent(BI.DateTimePopup.BUTTON_OK_EVENT_CHANGE);
    });
    this.dateCombo = BI.createWidget({
      type: "bi.date_calendar_popup",
      behaviors: opts.behaviors,
      min: self.options.min,
      max: self.options.max
    });
    self.dateCombo.on(BI.DateCalendarPopup.EVENT_CHANGE, function () {
      self.fireEvent(BI.DateTimePopup.CALENDAR_EVENT_CHANGE);
    });
    this.dateButton = BI.createWidget({
      type: "bi.grid",
      items: [[this.cancelButton, this.okButton]]
    });
    BI.createWidget({
      element: this,
      type: "bi.vtape",
      items: [{
        el: this.dateCombo
      }, {
        el: {
          type: "bi.center_adapt",
          cls: "bi-split-top",
          items: [{
            type: "bi.dynamic_date_time_select",
            ref: function ref(_ref) {
              self.timeSelect = _ref;
            }
          }]
        },
        height: 50
      }, {
        el: this.dateButton,
        height: 30
      }]
    });
    this.setValue(opts.value);
  },
  setValue: function setValue(v) {
    var value = v,
        date;

    if (BI.isNull(value)) {
      date = BI.getDate();
      this.dateCombo.setValue({
        year: date.getFullYear(),
        month: date.getMonth() + 1,
        day: date.getDate()
      });
      this.timeSelect.setValue({
        hour: date.getHours(),
        minute: date.getMinutes(),
        second: date.getSeconds()
      });
    } else {
      this.dateCombo.setValue({
        year: value.year,
        month: value.month,
        day: value.day
      });
      this.timeSelect.setValue({
        hour: value.hour,
        minute: value.minute,
        second: value.second
      });
    }
  },
  getValue: function getValue() {
    return BI.extend({
      year: this.dateCombo.getValue().year,
      month: this.dateCombo.getValue().month,
      day: this.dateCombo.getValue().day
    }, this.timeSelect.getValue());
  }
});
BI.DateTimePopup.BUTTON_OK_EVENT_CHANGE = "BUTTON_OK_EVENT_CHANGE";
BI.DateTimePopup.BUTTON_CANCEL_EVENT_CHANGE = "BUTTON_CANCEL_EVENT_CHANGE";
BI.DateTimePopup.CALENDAR_EVENT_CHANGE = "CALENDAR_EVENT_CHANGE";
BI.shortcut("bi.date_time_popup", BI.DateTimePopup);

/***/ }),
/* 770 */
/***/ (function(module, exports) {

/**
 * Created by Urthur on 2017/7/14.
 */
BI.DateTimeTrigger = BI.inherit(BI.Trigger, {
  _const: {
    hgap: 4,
    iconWidth: 24
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DateTimeTrigger.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-date-time-trigger",
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      height: 24,
      width: 200
    });
  },
  _init: function _init() {
    BI.DateTimeTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options,
        c = this._const;
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      height: o.height,
      width: o.width,
      hgap: c.hgap
    });
    BI.createWidget({
      type: "bi.htape",
      element: this,
      items: [{
        el: this.text
      }, {
        el: BI.createWidget(),
        width: this._const.iconWidth
      }]
    });
    this.setValue(o.value);
  },
  _printTime: function _printTime(v) {
    return v < 10 ? "0" + v : v;
  },
  setValue: function setValue(v) {
    var self = this;
    var value = v,
        dateStr;

    if (BI.isNull(value)) {
      value = BI.getDate();
      dateStr = BI.print(value, "%Y-%X-%d %H:%M:%S");
    } else {
      var date = BI.getDate(value.year, value.month - 1, value.day, value.hour, value.minute, value.second);
      dateStr = BI.print(date, "%Y-%X-%d %H:%M:%S");
    }

    this.text.setText(dateStr);
    this.text.setTitle(dateStr);
  }
});
BI.shortcut("bi.date_time_trigger", BI.DateTimeTrigger);

/***/ }),
/* 771 */
/***/ (function(module, exports) {

BI.StaticDateTimePaneCard = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.StaticDateTimePaneCard.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-date-time-pane",
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      selectedTime: null
    });
  },
  _init: function _init() {
    BI.StaticDateTimePaneCard.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.today = BI.getDate();
    this._year = this.today.getFullYear();
    this._month = this.today.getMonth() + 1;
    this.selectedTime = o.selectedTime || {
      year: this._year,
      month: this._month
    };
    this.datePicker = BI.createWidget({
      type: "bi.date_picker",
      behaviors: o.behaviors,
      min: o.min,
      max: o.max
    });
    this.datePicker.on(BI.DatePicker.EVENT_CHANGE, function () {
      var value = self.datePicker.getValue();
      var monthDay = BI.getMonthDays(BI.getDate(value.year, value.month - 1, 1));
      var day = self.selectedTime.day || 0;

      if (day > monthDay) {
        day = monthDay;
      }

      self.selectedTime = BI.extend(self.selectedTime, {
        year: value.year,
        month: value.month
      });
      day !== 0 && (self.selectedTime.day = day);
      self.calendar.setSelect(BI.Calendar.getPageByDateJSON(self.selectedTime));
      self.calendar.setValue(self.selectedTime);
      day !== 0 && self.fireEvent(BI.DateCalendarPopup.EVENT_CHANGE);
    });
    this.datePicker.on(BI.DatePicker.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW, function () {
      self.fireEvent(BI.StaticDateTimePaneCard.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
    });
    this.calendar = BI.createWidget({
      direction: "custom",
      // logic: {
      //     dynamic: false
      // },
      type: "bi.navigation",
      tab: this.datePicker,
      cardCreator: BI.bind(this._createNav, this)
    });
    this.calendar.on(BI.Navigation.EVENT_CHANGE, function () {
      self.selectedTime = BI.extend(self.calendar.getValue(), self.timeSelect.getValue());
      self.calendar.empty();
      self.setValue(self.selectedTime);
      self.fireEvent(BI.DateCalendarPopup.EVENT_CHANGE);
    });
    BI.createWidget({
      type: "bi.vtape",
      element: this,
      hgap: 10,
      items: [{
        el: this.datePicker,
        height: 40
      }, this.calendar, {
        el: {
          type: "bi.dynamic_date_time_select",
          cls: "bi-split-top",
          ref: function ref() {
            self.timeSelect = this;
          },
          listeners: [{
            eventName: BI.DynamicDateTimeSelect.EVENT_CONFIRM,
            action: function action() {
              self.selectedTime = BI.extend(self.calendar.getValue(), self.timeSelect.getValue());
              self.fireEvent("EVENT_CHANGE");
            }
          }]
        },
        height: 40
      }]
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.layout",
          cls: "bi-split-top"
        },
        height: 1,
        top: 40,
        left: 0,
        right: 0
      }]
    });
    this.setValue(o.selectedTime);
  },
  _createNav: function _createNav(v) {
    var date = BI.Calendar.getDateJSONByPage(v);
    var calendar = BI.createWidget({
      type: "bi.calendar",
      logic: {
        dynamic: false
      },
      min: this.options.min,
      max: this.options.max,
      year: date.year,
      month: date.month,
      day: this.selectedTime.day
    });
    return calendar;
  },
  _getNewCurrentDate: function _getNewCurrentDate() {
    var today = BI.getDate();
    return {
      year: today.getFullYear(),
      month: today.getMonth() + 1
    };
  },
  _setCalenderValue: function _setCalenderValue(date) {
    this.calendar.setSelect(BI.Calendar.getPageByDateJSON(date));
    this.calendar.setValue(date);
    this.selectedTime = BI.extend({}, this.timeSelect.getValue(), date);
  },
  _setDatePicker: function _setDatePicker(timeOb) {
    if (BI.isNull(timeOb) || BI.isNull(timeOb.year) || BI.isNull(timeOb.month)) {
      this.datePicker.setValue(this._getNewCurrentDate());
    } else {
      this.datePicker.setValue(timeOb);
    }
  },
  _setCalendar: function _setCalendar(timeOb) {
    if (BI.isNull(timeOb) || BI.isNull(timeOb.day)) {
      this.calendar.empty();

      this._setCalenderValue(this._getNewCurrentDate());
    } else {
      this._setCalenderValue(timeOb);
    }
  },
  _checkMin: function _checkMin() {
    var o = this.options;
    BI.each(this.calendar.getAllCard(), function (idx, calendar) {
      calendar.setMinDate(o.min);
    });
  },
  _checkMax: function _checkMax() {
    var o = this.options;
    BI.each(this.calendar.getAllCard(), function (idx, calendar) {
      calendar.setMaxDate(o.max);
    });
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
      this.datePicker.setMinDate(minDate);

      this._checkMin();
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
      this.datePicker.setMaxDate(maxDate);

      this._checkMax();
    }
  },
  setValue: function setValue(timeOb) {
    timeOb = timeOb || {};

    this._setDatePicker(timeOb);

    this._setCalendar(timeOb);

    this.timeSelect.setValue({
      hour: timeOb.hour,
      minute: timeOb.minute,
      second: timeOb.second
    });
  },
  getValue: function getValue() {
    return this.selectedTime;
  }
});
BI.StaticDateTimePaneCard.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.static_date_time_pane_card", BI.StaticDateTimePaneCard);

/***/ }),
/* 772 */
/***/ (function(module, exports) {

BI.DynamicDateTimePane = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-dynamic-date-pane",
    minDate: "1900-01-01",
    maxDate: "2099-12-31",
    supportDynamic: true
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vtape",
      items: [{
        el: {
          type: "bi.linear_segment",
          invisible: !o.supportDynamic,
          cls: "bi-split-bottom",
          height: 30,
          items: BI.createItems([{
            text: BI.i18nText("BI-Multi_Date_YMD"),
            value: BI.DynamicDateTimePane.Static
          }, {
            text: BI.i18nText("BI-Basic_Dynamic_Title"),
            value: BI.DynamicDateTimePane.Dynamic
          }], {
            textAlign: "center"
          }),
          listeners: [{
            eventName: BI.ButtonGroup.EVENT_CHANGE,
            action: function action() {
              var value = this.getValue()[0];
              self.dateTab.setSelect(value);

              switch (value) {
                case BI.DynamicDateTimePane.Static:
                  var date = BI.DynamicDateHelper.getCalculation(self.dynamicPane.getValue());
                  self.ymd.setValue({
                    year: date.getFullYear(),
                    month: date.getMonth() + 1,
                    day: date.getDate()
                  });
                  break;

                case BI.DynamicDateTimePane.Dynamic:
                  self.dynamicPane.setValue({
                    year: 0
                  });
                  break;

                default:
                  break;
              }

              self.fireEvent(BI.DynamicDateTimePane.EVENT_CHANGE);
            }
          }],
          ref: function ref() {
            self.switcher = this;
          }
        },
        height: o.supportDynamic ? 30 : 0
      }, {
        type: "bi.tab",
        ref: function ref() {
          self.dateTab = this;
        },
        showIndex: BI.DynamicDateTimePane.Static,
        cardCreator: function cardCreator(v) {
          switch (v) {
            case BI.DynamicDateTimePane.Static:
              return {
                type: "bi.static_date_time_pane_card",
                min: o.minDate,
                max: o.maxDate,
                behaviors: o.behaviors,
                listeners: [{
                  eventName: "EVENT_CHANGE",
                  action: function action() {
                    self.fireEvent(BI.DynamicDateTimePane.EVENT_CHANGE);
                  }
                }, {
                  eventName: "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW",
                  action: function action() {
                    self.fireEvent(BI.DynamicDateTimePane.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
                  }
                }],
                ref: function ref() {
                  self.ymd = this;
                }
              };

            case BI.DynamicDateTimePane.Dynamic:
            default:
              return {
                type: "bi.vtape",
                items: [{
                  type: "bi.dynamic_date_card",
                  min: o.minDate,
                  max: o.maxDate,
                  ref: function ref() {
                    self.dynamicPane = this;
                  }
                }, {
                  el: {
                    type: "bi.center",
                    items: [{
                      type: "bi.text_button",
                      cls: "bi-high-light bi-border-top",
                      shadow: true,
                      text: BI.i18nText("BI-Basic_Clear"),
                      textHeight: 23,
                      listeners: [{
                        eventName: BI.TextButton.EVENT_CHANGE,
                        action: function action() {
                          self.setValue();
                          self.fireEvent(BI.DynamicDatePane.EVENT_CHANGE);
                        }
                      }]
                    }, {
                      type: "bi.text_button",
                      cls: "bi-border-left bi-high-light bi-border-top",
                      textHeight: 23,
                      shadow: true,
                      text: BI.i18nText("BI-Basic_OK"),
                      listeners: [{
                        eventName: BI.TextButton.EVENT_CHANGE,
                        action: function action() {
                          var type = self.dateTab.getSelect();

                          if (type === BI.DynamicDateCombo.Dynamic) {
                            self.dynamicPane.checkValidation(true) && self.fireEvent(BI.DynamicDatePane.EVENT_CHANGE);
                          } else {
                            self.fireEvent(BI.DynamicDatePane.EVENT_CHANGE);
                          }
                        }
                      }]
                    }]
                  },
                  height: 24
                }]
              };
          }
        }
      }]
    };
  },
  created: function created() {
    this.setValue(this.options.value);
  },
  _checkValueValid: function _checkValueValid(value) {
    return BI.isNull(value) || BI.isEmptyObject(value) || BI.isEmptyString(value);
  },
  _checkValue: function _checkValue(v) {
    switch (v.type) {
      case BI.DynamicDateCombo.Dynamic:
        return BI.isNotEmptyObject(v.value);

      case BI.DynamicDateCombo.Static:
      default:
        return true;
    }
  },
  setMinDate: function setMinDate(minDate) {
    if (this.options.minDate !== minDate) {
      this.options.minDate = minDate;
      this.ymd.setMinDate(minDate);
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (this.options.maxDate !== maxDate) {
      this.options.maxDate = maxDate;
      this.ymd.setMaxDate(maxDate);
    }
  },
  setValue: function setValue(v) {
    v = v || {};
    var type = v.type || BI.DynamicDateTimePane.Static;
    var value = v.value || v;
    this.switcher.setValue(type);
    this.dateTab.setSelect(type);

    switch (type) {
      case BI.DynamicDateTimePane.Dynamic:
        this.dynamicPane.setValue(value);
        break;

      case BI.DynamicDateTimePane.Static:
      default:
        if (this._checkValueValid(value)) {
          var date = BI.getDate();
          this.ymd.setValue({
            year: date.getFullYear(),
            month: date.getMonth() + 1
          });
        } else {
          this.ymd.setValue(value);
        }

        break;
    }
  },
  getValue: function getValue() {
    return {
      type: this.dateTab.getSelect(),
      value: this.dateTab.getValue()
    };
  }
});
BI.DynamicDateTimePane.EVENT_CHANGE = "EVENT_CHANGE";
BI.DynamicDateTimePane.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.dynamic_date_time_pane", BI.DynamicDateTimePane);
BI.extend(BI.DynamicDateTimePane, {
  Static: 1,
  Dynamic: 2
});

/***/ }),
/* 773 */
/***/ (function(module, exports) {

!function () {
  BI.DynamicDateHelper = {};
  BI.extend(BI.DynamicDateHelper, {
    getCalculation: function getCalculation(obj) {
      var date = BI.getDate();
      return this.getCalculationByDate(date, obj);
    },
    getDescription: function getDescription(obj) {
      var value = "";
      var endText = "";

      if (BI.isNotNull(obj.year)) {
        if (BI.parseInt(obj.year) !== 0) {
          value += Math.abs(obj.year) + BI.i18nText("BI-Basic_Year") + (obj.year < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
        }

        endText = getPositionText(BI.i18nText("BI-Basic_Year"), obj.position);
      }

      if (BI.isNotNull(obj.quarter)) {
        if (BI.parseInt(obj.quarter) !== 0) {
          value += Math.abs(obj.quarter) + BI.i18nText("BI-Basic_Single_Quarter") + (obj.quarter < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
        }

        endText = getPositionText(BI.i18nText("BI-Basic_Single_Quarter"), obj.position);
      }

      if (BI.isNotNull(obj.month)) {
        if (BI.parseInt(obj.month) !== 0) {
          value += Math.abs(obj.month) + BI.i18nText("BI-Basic_Month") + (obj.month < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
        }

        endText = getPositionText(BI.i18nText("BI-Basic_Month"), obj.position);
      }

      if (BI.isNotNull(obj.week)) {
        if (BI.parseInt(obj.week) !== 0) {
          value += Math.abs(obj.week) + BI.i18nText("BI-Basic_Week") + (obj.week < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
        }

        endText = getPositionText(BI.i18nText("BI-Basic_Week"), obj.position);
      }

      if (BI.isNotNull(obj.day)) {
        if (BI.parseInt(obj.day) !== 0) {
          value += Math.abs(obj.day) + BI.i18nText("BI-Basic_Day") + (obj.day < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
        }

        endText = BI.size(obj) === 1 ? getPositionText(BI.i18nText("BI-Basic_Month"), obj.position) : "";
      }

      if (BI.isNotNull(obj.workDay) && BI.parseInt(obj.workDay) !== 0) {
        value += Math.abs(obj.workDay) + BI.i18nText("BI-Basic_Work_Day") + (obj.workDay < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
      }

      return value + endText;

      function getPositionText(baseText, position) {
        switch (position) {
          case BI.DynamicDateCard.OFFSET.BEGIN:
            return baseText + BI.i18nText("BI-Basic_Begin_Start");

          case BI.DynamicDateCard.OFFSET.END:
            return baseText + BI.i18nText("BI-Basic_End_Stop");

          case BI.DynamicDateCard.OFFSET.CURRENT:
          default:
            return BI.i18nText("BI-Basic_Current_Day");
        }
      }
    },
    getCalculationByDate: function getCalculationByDate(date, obj) {
      if (BI.isNotNull(obj.year)) {
        date = BI.getDate(date.getFullYear() + BI.parseInt(obj.year), date.getMonth(), date.getDate());
      }

      if (BI.isNotNull(obj.quarter)) {
        date = BI.getOffsetQuarter(date, BI.parseInt(obj.quarter));
      }

      if (BI.isNotNull(obj.month)) {
        date = BI.getOffsetMonth(date, BI.parseInt(obj.month));
      }

      if (BI.isNotNull(obj.week)) {
        date = BI.getOffsetDate(date, BI.parseInt(obj.week) * 7);
      }

      if (BI.isNotNull(obj.day)) {
        date = BI.getOffsetDate(date, BI.parseInt(obj.day));
      }

      if (BI.isNotNull(obj.workDay)) {
        // 配置了节假日就按照节假日计算工作日偏移，否则按正常的天去算
        if (BI.isNotNull(BI.holidays)) {
          var count = Math.abs(obj.workDay);

          for (var i = 0; i < count; i++) {
            date = BI.getOffsetDate(date, obj.workDay < 0 ? -1 : 1);

            if (BI.isNotNull(BI.holidays[BI.print(date, "%Y-%X-%d")])) {
              i--;
            }
          }
        } else {
          date = BI.getOffsetDate(date, BI.parseInt(obj.workDay));
        }
      }

      if (BI.isNotNull(obj.position) && obj.position !== BI.DynamicDateCard.OFFSET.CURRENT) {
        date = this.getBeginDate(date, obj);
      }

      return BI.getDate(date.getFullYear(), date.getMonth(), date.getDate());
    },
    getBeginDate: function getBeginDate(date, obj) {
      if (BI.isNotNull(obj.day)) {
        return obj.position === BI.DynamicDateCard.OFFSET.BEGIN ? BI.getDate(date.getFullYear(), date.getMonth(), 1) : BI.getDate(date.getFullYear(), date.getMonth(), BI.getLastDateOfMonth(date).getDate());
      }

      if (BI.isNotNull(obj.week)) {
        return obj.position === BI.DynamicDateCard.OFFSET.BEGIN ? BI.getWeekStartDate(date) : BI.getWeekEndDate(date);
      }

      if (BI.isNotNull(obj.month)) {
        return obj.position === BI.DynamicDateCard.OFFSET.BEGIN ? BI.getDate(date.getFullYear(), date.getMonth(), 1) : BI.getDate(date.getFullYear(), date.getMonth(), BI.getLastDateOfMonth(date).getDate());
      }

      if (BI.isNotNull(obj.quarter)) {
        return obj.position === BI.DynamicDateCard.OFFSET.BEGIN ? BI.getQuarterStartDate(date) : BI.getQuarterEndDate(date);
      }

      if (BI.isNotNull(obj.year)) {
        return obj.position === BI.DynamicDateCard.OFFSET.BEGIN ? BI.getDate(date.getFullYear(), 0, 1) : BI.getDate(date.getFullYear(), 11, 31);
      }

      return date;
    }
  });
}();

/***/ }),
/* 774 */
/***/ (function(module, exports) {

BI.DynamicDateCard = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-dynamic-date-card"
  },
  render: function render() {
    var self = this;
    this.position = BI.DynamicDateCard.OFFSET.CURRENT;
    return {
      type: "bi.vertical",
      items: [{
        el: {
          type: "bi.label",
          text: BI.i18nText("BI-Multi_Date_Relative_Current_Time"),
          textAlign: "left",
          lgap: 10
        },
        tgap: 10,
        bgap: 5
      }, {
        type: "bi.button_group",
        ref: function ref() {
          self.checkgroup = this;
        },
        chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
        lgap: 4,
        value: [BI.DynamicDateCard.TYPE.YEAR],
        items: BI.createItems([{
          text: BI.i18nText("BI-Basic_Year"),
          value: BI.DynamicDateCard.TYPE.YEAR
        }, {
          text: BI.i18nText("BI-Basic_Single_Quarter"),
          value: BI.DynamicDateCard.TYPE.QUARTER
        }, {
          text: BI.i18nText("BI-Basic_Month"),
          value: BI.DynamicDateCard.TYPE.MONTH
        }, {
          text: BI.i18nText("BI-Basic_Week"),
          value: BI.DynamicDateCard.TYPE.WEEK
        }, {
          text: BI.i18nText("BI-Basic_Day"),
          value: BI.DynamicDateCard.TYPE.DAY
        }], {
          type: "bi.multi_select_item",
          logic: {
            dynamic: true
          },
          iconWrapperWidth: 26
        }),
        layouts: [{
          type: "bi.left",
          rgap: 4
        }],
        listeners: [{
          eventName: BI.ButtonGroup.EVENT_CHANGE,
          action: function action() {
            var value = self.checkgroup.getValue();

            if (value.length !== 0) {
              self.workDayBox.setSelected(false);
            }

            var plainValue = {};
            BI.each(self.resultPane.getAllButtons(), function (idx, button) {
              var value = button.getValue();

              if (BI.isNotNull(value.dateType)) {
                plainValue[value.dateType] = {
                  value: value.value,
                  offset: value.offset
                };
              }
            });
            self.resultPane.populate(self._getParamJson(BI.map(self.checkgroup.getValue(), function (idx, v) {
              var obj = {
                dateType: v
              };

              if (BI.has(plainValue, v)) {
                obj.value = plainValue[v].value;
                obj.offset = plainValue[v].offset;
              }

              return obj;
            })));
            self.position = BI.DynamicDateCard.OFFSET.CURRENT;
            self.fireEvent("EVENT_CHANGE");
          }
        }]
      }, {
        type: "bi.vertical_adapt",
        lgap: 2,
        items: [{
          el: {
            type: "bi.multi_select_item",
            iconWrapperWidth: 26,
            ref: function ref() {
              self.workDayBox = this;
            },
            logic: {
              dynamic: true
            },
            text: BI.i18nText("BI-Basic_Work_Day"),
            value: BI.DynamicDateCard.TYPE.WORK_DAY,
            listeners: [{
              eventName: BI.MultiSelectItem.EVENT_CHANGE,
              action: function action() {
                if (this.isSelected()) {
                  self.checkgroup.setValue();
                }

                self.resultPane.populate(this.isSelected() ? self._getParamJson([{
                  dateType: BI.DynamicDateCard.TYPE.WORK_DAY
                }]) : []);
                self.position = BI.DynamicDateCard.OFFSET.CURRENT;
                self.fireEvent("EVENT_CHANGE");
              }
            }]
          }
        }],
        ref: function ref() {
          self.workDay = this;
        }
      }, {
        type: "bi.button_group",
        items: this._getParamJson([{
          dateType: BI.DynamicDateCard.TYPE.YEAR
        }]),
        ref: function ref() {
          self.resultPane = this;
        },
        layouts: [{
          type: "bi.vertical",
          bgap: 10,
          hgap: 10
        }]
      }]
    };
  },
  _getParamJson: function _getParamJson(values, positionValue) {
    var self = this,
        o = this.options;
    var items = BI.map(values, function (idx, value) {
      return {
        el: {
          type: "bi.dynamic_date_param_item",
          validationChecker: BI.bind(self._checkDate, self),
          dateType: value.dateType,
          value: value.value,
          offset: value.offset,
          listeners: [{
            eventName: "EVENT_CHANGE",
            action: function action() {
              self.fireEvent("EVENT_CHANGE");
            }
          }, {
            eventName: "EVENT_INPUT_CHANGE",
            action: function action() {
              BI.Bubbles.hide("dynamic-date-error");
            }
          }]
        },
        tgap: idx === 0 ? 5 : 0
      };
    });

    if (values.length === 1 && values[0].dateType === BI.DynamicDateCard.TYPE.DAY) {
      var comboItems = this._getText(BI.DynamicDateCard.TYPE.MONTH);

      comboItems[0].text = BI.i18nText("BI-Basic_Empty");
      items.push({
        type: "bi.text_value_combo",
        height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT,
        items: comboItems,
        container: null,
        value: positionValue || BI.DynamicDateCard.OFFSET.CURRENT,
        listeners: [{
          eventName: "EVENT_CHANGE",
          action: function action() {
            self.position = this.getValue()[0];
            this.setValue(self.position);
            self.fireEvent("EVENT_CHANGE");
          }
        }]
      });
    } else {
      if (values.length !== 0 && BI.last(values).dateType !== BI.DynamicDateCard.TYPE.DAY && BI.last(values).dateType !== BI.DynamicDateCard.TYPE.WORK_DAY) {
        items.push({
          type: "bi.text_value_combo",
          height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT,
          container: null,
          items: this._getText(BI.last(values).dateType),
          value: positionValue || BI.DynamicDateCard.OFFSET.CURRENT,
          listeners: [{
            eventName: "EVENT_CHANGE",
            action: function action() {
              self.position = this.getValue()[0];
              this.setValue(self.position);
              self.fireEvent("EVENT_CHANGE");
            }
          }]
        });
      }
    }

    return items;
  },
  _checkDate: function _checkDate(obj) {
    var o = this.options;
    var date = BI.DynamicDateHelper.getCalculation(BI.extend(this._getValue(), this._digestDateTypeValue(obj)));
    return !BI.checkDateVoid(date.getFullYear(), date.getMonth() + 1, date.getDate(), o.min, o.max)[0];
  },
  _getText: function _getText(lastValue) {
    switch (lastValue) {
      case BI.DynamicDateCard.TYPE.YEAR:
        return [{
          text: BI.i18nText("BI-Basic_Current_Day"),
          value: BI.DynamicDateCard.OFFSET.CURRENT
        }, {
          text: BI.i18nText("BI-Basic_Year_Begin"),
          value: BI.DynamicDateCard.OFFSET.BEGIN
        }, {
          text: BI.i18nText("BI-Basic_Year_End"),
          value: BI.DynamicDateCard.OFFSET.END
        }];

      case BI.DynamicDateCard.TYPE.QUARTER:
        return [{
          text: BI.i18nText("BI-Basic_Current_Day"),
          value: BI.DynamicDateCard.OFFSET.CURRENT
        }, {
          text: BI.i18nText("BI-Basic_Quarter_Begin"),
          value: BI.DynamicDateCard.OFFSET.BEGIN
        }, {
          text: BI.i18nText("BI-Basic_Quarter_End"),
          value: BI.DynamicDateCard.OFFSET.END
        }];

      case BI.DynamicDateCard.TYPE.MONTH:
        return [{
          text: BI.i18nText("BI-Basic_Current_Day"),
          value: BI.DynamicDateCard.OFFSET.CURRENT
        }, {
          text: BI.i18nText("BI-Basic_Month_Begin"),
          value: BI.DynamicDateCard.OFFSET.BEGIN
        }, {
          text: BI.i18nText("BI-Basic_Month_End"),
          value: BI.DynamicDateCard.OFFSET.END
        }];

      case BI.DynamicDateCard.TYPE.WEEK:
      default:
        return [{
          text: BI.i18nText("BI-Basic_Current_Day"),
          value: BI.DynamicDateCard.OFFSET.CURRENT
        }, {
          text: BI.i18nText("BI-Basic_Week_Begin"),
          value: BI.DynamicDateCard.OFFSET.BEGIN
        }, {
          text: BI.i18nText("BI-Basic_Week_End"),
          value: BI.DynamicDateCard.OFFSET.END
        }];
    }
  },
  _createValue: function _createValue(type, v) {
    return {
      dateType: type,
      value: Math.abs(v),
      offset: v > 0 ? 1 : 0
    };
  },
  _digestDateTypeValue: function _digestDateTypeValue(value) {
    var valueMap = {};

    switch (value.dateType) {
      case BI.DynamicDateCard.TYPE.YEAR:
        valueMap.year = value.offset === 0 ? -value.value : +value.value;
        break;

      case BI.DynamicDateCard.TYPE.QUARTER:
        valueMap.quarter = value.offset === 0 ? -value.value : +value.value;
        break;

      case BI.DynamicDateCard.TYPE.MONTH:
        valueMap.month = value.offset === 0 ? -value.value : +value.value;
        break;

      case BI.DynamicDateCard.TYPE.WEEK:
        valueMap.week = value.offset === 0 ? -value.value : +value.value;
        break;

      case BI.DynamicDateCard.TYPE.DAY:
        valueMap.day = value.offset === 0 ? -value.value : +value.value;
        break;

      case BI.DynamicDateCard.TYPE.WORK_DAY:
        valueMap.workDay = value.offset === 0 ? -value.value : +value.value;
        break;

      default:
        break;
    }

    if (BI.isNull(value.dateType)) {
      valueMap.position = this.position || BI.DynamicDateCard.OFFSET.CURRENT;
    }

    return valueMap;
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
    }
  },
  setValue: function setValue(v) {
    v = v || {};
    this.position = v.position || BI.DynamicDateCard.OFFSET.CURRENT;
    var values = [];
    var valuesItems = [];

    if (BI.isNotNull(v.year)) {
      values.push(BI.DynamicDateCard.TYPE.YEAR);
      valuesItems.push(this._createValue(BI.DynamicDateCard.TYPE.YEAR, v.year));
    }

    if (BI.isNotNull(v.quarter)) {
      values.push(BI.DynamicDateCard.TYPE.QUARTER);
      valuesItems.push(this._createValue(BI.DynamicDateCard.TYPE.QUARTER, v.quarter));
    }

    if (BI.isNotNull(v.month)) {
      values.push(BI.DynamicDateCard.TYPE.MONTH);
      valuesItems.push(this._createValue(BI.DynamicDateCard.TYPE.MONTH, v.month));
    }

    if (BI.isNotNull(v.week)) {
      values.push(BI.DynamicDateCard.TYPE.WEEK);
      valuesItems.push(this._createValue(BI.DynamicDateCard.TYPE.WEEK, v.week));
    }

    if (BI.isNotNull(v.day)) {
      values.push(BI.DynamicDateCard.TYPE.DAY);
      valuesItems.push(this._createValue(BI.DynamicDateCard.TYPE.DAY, v.day));
    }

    if (BI.isNotNull(v.workDay)) {
      values.push(BI.DynamicDateCard.TYPE.WORK_DAY);
      valuesItems.push(this._createValue(BI.DynamicDateCard.TYPE.WORK_DAY, v.workDay));
    }

    this.checkgroup.setValue(values);
    this.workDayBox.setSelected(BI.isNotNull(v.workDay));
    this.resultPane.populate(this._getParamJson(valuesItems, v.position));
  },
  _getValue: function _getValue() {
    var self = this;
    var valueMap = {};
    var selectValues = this.checkgroup.getValue();
    var buttons = this.resultPane.getAllButtons();

    if (selectValues.length !== 0) {
      BI.each(buttons, function (idx, button) {
        var value = button.getValue();
        BI.extend(valueMap, self._digestDateTypeValue(value));
      });
    }

    if (this.workDayBox.isSelected()) {
      var value = buttons[0].getValue();
      valueMap.workDay = value.offset === 0 ? -value.value : +value.value;
    }

    return valueMap;
  },
  _getErrorText: function _getErrorText() {
    var o = this.options;
    var start = BI.parseDateTime(o.min, "%Y-%X-%d");
    var end = BI.parseDateTime(o.max, "%Y-%X-%d");
    return BI.i18nText("BI-Basic_Date_Range_Error", start.getFullYear(), start.getMonth() + 1, start.getDate(), end.getFullYear(), end.getMonth() + 1, end.getDate());
  },
  getValue: function getValue() {
    return this.checkValidation() ? this._getValue() : {};
  },
  getInputValue: function getInputValue() {
    return this._getValue();
  },
  checkValidation: function checkValidation(show) {
    var buttons = this.resultPane.getAllButtons();
    var errorText;
    var invalid = BI.any(buttons, function (idx, button) {
      return button.checkValidation && !button.checkValidation();
    });

    if (invalid) {
      errorText = BI.i18nText("BI-Please_Input_Natural_Number");
    } else {
      invalid = !this._checkDate(this._getValue());
      errorText = this._getErrorText();
    }

    invalid && show && BI.Bubbles.show("dynamic-date-error", errorText, this.resultPane);
    return !invalid;
  }
});
BI.shortcut("bi.dynamic_date_card", BI.DynamicDateCard);
BI.extend(BI.DynamicDateCard, {
  TYPE: {
    YEAR: 1,
    QUARTER: 2,
    MONTH: 3,
    WEEK: 4,
    DAY: 5,
    WORK_DAY: 6
  },
  OFFSET: {
    CURRENT: 1,
    BEGIN: 2,
    END: 3
  }
});

/***/ }),
/* 775 */
/***/ (function(module, exports) {

BI.DynamicDateCombo = BI.inherit(BI.Single, {
  constants: {
    popupHeight: 259,
    popupWidth: 270,
    comboAdjustHeight: 1,
    border: 1,
    iconWidth: 24
  },
  props: {
    baseCls: "bi-dynamic-date-combo",
    height: 24,
    minDate: "1900-01-01",
    maxDate: "2099-12-31",
    format: "",
    allowEdit: true,
    supportDynamic: true,
    attributes: {
      tabIndex: -1
    },
    isNeedAdjustHeight: false,
    isNeedAdjustWidth: false
  },
  _init: function _init() {
    BI.DynamicDateCombo.superclass._init.apply(this, arguments);
  },
  render: function render() {
    var self = this,
        opts = this.options;
    this.storeTriggerValue = "";
    var date = BI.getDate();
    this.storeValue = opts.value;
    var border = opts.simple ? 1 : 2;
    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.combo",
          cls: (opts.simple ? "bi-border-bottom" : "bi-border bi-border-radius") + " bi-focus-shadow",
          container: opts.container,
          ref: function ref() {
            self.combo = this;
          },
          toggle: false,
          isNeedAdjustHeight: opts.isNeedAdjustHeight,
          isNeedAdjustWidth: opts.isNeedAdjustWidth,
          destroyWhenHide: true,
          el: {
            type: "bi.horizontal_fill",
            columnSize: [this.constants.iconWidth, "fill"],
            height: BI.toPix(opts.height, border),
            items: [{
              el: {
                type: "bi.icon_button",
                cls: "bi-trigger-icon-button date-change-h-font",
                width: BI.toPix(opts.height, border),
                height: BI.toPix(opts.height, border),
                ref: function ref() {
                  self.changeIcon = this;
                }
              }
            }, {
              type: "bi.dynamic_date_trigger",
              simple: opts.simple,
              min: opts.minDate,
              max: opts.maxDate,
              format: opts.format,
              allowEdit: opts.allowEdit,
              watermark: opts.watermark,
              iconWidth: BI.toPix(opts.height, border),
              height: BI.toPix(opts.height, border),
              value: opts.value,
              ref: function ref() {
                self.trigger = this;
              },
              listeners: [{
                eventName: BI.DynamicDateTrigger.EVENT_KEY_DOWN,
                action: function action() {
                  if (self.combo.isViewVisible()) {
                    self.combo.hideView();
                  }

                  self.fireEvent(BI.DynamicDateCombo.EVENT_KEY_DOWN, arguments);
                }
              }, {
                eventName: BI.DynamicDateTrigger.EVENT_STOP,
                action: function action() {
                  if (!self.combo.isViewVisible()) {
                    self.combo.showView();
                  }
                }
              }, {
                eventName: BI.DynamicDateTrigger.EVENT_FOCUS,
                action: function action() {
                  self.storeTriggerValue = self.trigger.getKey();

                  if (!self.combo.isViewVisible()) {
                    self.combo.showView();
                  }

                  self.fireEvent(BI.DynamicDateCombo.EVENT_FOCUS);
                }
              }, {
                eventName: BI.DynamicDateTrigger.EVENT_BLUR,
                action: function action() {
                  self.fireEvent(BI.DynamicDateCombo.EVENT_BLUR);
                }
              }, {
                eventName: BI.DynamicDateTrigger.EVENT_ERROR,
                action: function action() {
                  self.storeValue = {
                    type: BI.DynamicDateCombo.Static,
                    value: {
                      year: date.getFullYear(),
                      month: date.getMonth() + 1
                    }
                  };
                  self.combo.element.addClass("error");
                  self.fireEvent(BI.DynamicDateCombo.EVENT_ERROR);
                }
              }, {
                eventName: BI.DynamicDateTrigger.EVENT_VALID,
                action: function action() {
                  self.storeValue = self.trigger.getValue();
                  self.combo.element.removeClass("error");
                  self.fireEvent(BI.DynamicDateCombo.EVENT_VALID);
                }
              }, {
                eventName: BI.DynamicDateTrigger.EVENT_CHANGE,
                action: function action() {
                  self.fireEvent(BI.DynamicDateCombo.EVENT_CHANGE);
                }
              }, {
                eventName: BI.DynamicDateTrigger.EVENT_CONFIRM,
                action: function action() {
                  var dateStore = self.storeTriggerValue;
                  var dateObj = self.trigger.getKey();

                  if (self.combo.isViewVisible() || BI.isEqual(dateObj, dateStore)) {
                    return;
                  }

                  if (BI.isNotEmptyString(dateObj) && !BI.isEqual(dateObj, dateStore)) {
                    self.storeValue = self.trigger.getValue();
                    self.setValue(self.trigger.getValue());
                  } else if (BI.isEmptyString(dateObj)) {
                    self.storeValue = null;
                    self.trigger.setValue();
                  }

                  self._checkDynamicValue(self.storeValue);

                  self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
                }
              }]
            }]
          },
          adjustLength: this.constants.comboAdjustHeight,
          popup: {
            el: {
              type: "bi.dynamic_date_popup",
              width: opts.isNeedAdjustWidth ? opts.width : undefined,
              supportDynamic: opts.supportDynamic,
              behaviors: opts.behaviors,
              min: opts.minDate,
              max: opts.maxDate,
              ref: function ref() {
                self.popup = this;
              },
              listeners: [{
                eventName: BI.DynamicDatePopup.BUTTON_CLEAR_EVENT_CHANGE,
                action: function action() {
                  self.setValue();
                  self.combo.hideView();
                  self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
                }
              }, {
                eventName: BI.DynamicDatePopup.BUTTON_lABEL_EVENT_CHANGE,
                action: function action() {
                  var date = BI.getDate();
                  self.setValue({
                    type: BI.DynamicDateCombo.Static,
                    value: {
                      year: date.getFullYear(),
                      month: date.getMonth() + 1,
                      day: date.getDate()
                    }
                  });
                  self.combo.hideView();
                  self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
                }
              }, {
                eventName: BI.DynamicDatePopup.BUTTON_OK_EVENT_CHANGE,
                action: function action() {
                  var value = self.popup.getValue();

                  if (self._checkValue(value)) {
                    self.setValue(value);
                  }

                  self.combo.hideView();
                  self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
                }
              }, {
                eventName: BI.DynamicDatePopup.EVENT_CHANGE,
                action: function action() {
                  self.setValue(self.popup.getValue());
                  self.combo.hideView();
                  self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
                }
              }, {
                eventName: BI.DynamicDatePopup.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW,
                action: function action() {
                  self.fireEvent(BI.DynamicDateCombo.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
                }
              }]
            }
          },
          // // DEC-4250 和复选下拉一样，点击triggerBtn不默认收起
          // hideChecker: function (e) {
          //     return self.triggerBtn.element.find(e.target).length === 0;
          // },
          listeners: [{
            eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
            action: function action() {
              self.popup.setMinDate(opts.minDate);
              self.popup.setMaxDate(opts.maxDate);
              self.popup.setValue(self.storeValue);
              self.fireEvent(BI.DynamicDateCombo.EVENT_BEFORE_POPUPVIEW);
            }
          }]
        },
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      }]
    };
  },
  created: function created() {
    this._checkDynamicValue(this.storeValue);
  },
  _checkDynamicValue: function _checkDynamicValue(v) {
    var o = this.options;
    var type = null;

    if (BI.isNotNull(v)) {
      type = v.type;
    }

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        this.changeIcon.setVisible(true); // this.comboWrapper.attr("items")[0].width = o.height - this.options.simple ? 1 : 2;
        // this.comboWrapper.resize();

        break;

      default:
        // this.comboWrapper.attr("items")[0].width = 0;
        // this.comboWrapper.resize();
        this.changeIcon.setVisible(false);
        break;
    }
  },
  _checkValue: function _checkValue(v) {
    var o = this.options;

    switch (v.type) {
      case BI.DynamicDateCombo.Dynamic:
        return BI.isNotEmptyObject(v.value);

      case BI.DynamicDateCombo.Static:
        var value = v.value || {};
        return !BI.checkDateVoid(value.year, value.month, value.day, o.minDate, o.maxDate)[0];

      default:
        return true;
    }
  },
  _defaultState: function _defaultState() {},
  setMinDate: function setMinDate(minDate) {
    var o = this.options;
    o.minDate = minDate;
    this.trigger.setMinDate(minDate);
    this.popup && this.popup.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;
    o.maxDate = maxDate;
    this.trigger.setMaxDate(maxDate);
    this.popup && this.popup.setMaxDate(maxDate);
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    this.trigger.setValue(v);

    this._checkDynamicValue(v);
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  getKey: function getKey() {
    return this.trigger.getKey();
  },
  hidePopupView: function hidePopupView() {
    this.combo.hideView();
  },
  focus: function focus() {
    this.trigger.focus();
  },
  blur: function blur() {
    this.trigger.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.trigger.setWaterMark(v);
  }
});
BI.DynamicDateCombo.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.DynamicDateCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DynamicDateCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.DynamicDateCombo.EVENT_BLUR = "EVENT_BLUR";
BI.DynamicDateCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.DynamicDateCombo.EVENT_VALID = "EVENT_VALID";
BI.DynamicDateCombo.EVENT_ERROR = "EVENT_ERROR";
BI.DynamicDateCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.DynamicDateCombo.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.dynamic_date_combo", BI.DynamicDateCombo);
BI.extend(BI.DynamicDateCombo, {
  Static: 1,
  Dynamic: 2
});

/***/ }),
/* 776 */
/***/ (function(module, exports) {

BI.DynamicDateParamItem = BI.inherit(BI.Widget, {
  props: function props() {
    return {
      baseCls: "bi-dynamic-date-param-item",
      dateType: BI.DynamicDateCard.TYPE.YEAR,
      validationChecker: function validationChecker() {
        return true;
      },
      value: 0,
      offset: 0,
      height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT
    };
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.htape",
      items: [{
        el: {
          type: "bi.sign_editor",
          cls: "bi-border bi-focus-shadow bi-border-radius",
          height: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 2),
          validationChecker: function validationChecker(v) {
            return BI.isNaturalNumber(v);
          },
          value: o.value,
          ref: function ref() {
            self.editor = this;
          },
          errorText: function errorText() {
            return BI.i18nText("BI-Please_Input_Natural_Number");
          },
          allowBlank: false,
          listeners: [{
            eventName: BI.SignEditor.EVENT_CONFIRM,
            action: function action() {
              self.fireEvent(BI.DynamicDateParamItem.EVENT_CHANGE);
            }
          }, {
            eventName: BI.SignEditor.EVENT_CHANGE,
            action: function action() {
              self.fireEvent(BI.DynamicDateParamItem.EVENT_INPUT_CHANGE);
            }
          }]
        },
        width: 60
      }, {
        el: {
          type: "bi.label",
          height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT,
          text: this._getText()
        },
        width: o.dateType === BI.DynamicDateCard.TYPE.WORK_DAY ? 60 : 20
      }, {
        type: "bi.text_value_combo",
        height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT,
        items: [{
          text: BI.i18nText("BI-Basic_Front"),
          value: 0
        }, {
          text: BI.i18nText("BI-Basic_Behind"),
          value: 1
        }],
        ref: function ref() {
          self.offsetCombo = this;
        },
        container: null,
        value: o.offset,
        listeners: [{
          eventName: BI.TextValueCombo.EVENT_CHANGE,
          action: function action() {
            self.fireEvent(BI.DynamicDateParamItem.EVENT_CHANGE);
          }
        }]
      }]
    };
  },
  _getText: function _getText() {
    var text = "";

    switch (this.options.dateType) {
      case BI.DynamicDateCard.TYPE.YEAR:
        text = BI.i18nText("BI-Basic_Year");
        break;

      case BI.DynamicDateCard.TYPE.QUARTER:
        text = BI.i18nText("BI-Basic_Single_Quarter");
        break;

      case BI.DynamicDateCard.TYPE.MONTH:
        text = BI.i18nText("BI-Basic_Month");
        break;

      case BI.DynamicDateCard.TYPE.WEEK:
        text = BI.i18nText("BI-Basic_Week");
        break;

      case BI.DynamicDateCard.TYPE.DAY:
        text = BI.i18nText("BI-Basic_Day");
        break;

      case BI.DynamicDateCard.TYPE.WORK_DAY:
      default:
        text = BI.i18nText("BI-Basic_Work_Day");
        break;
    }

    return text;
  },
  checkValidation: function checkValidation() {
    return BI.isNaturalNumber(this.editor.getValue());
  },
  setValue: function setValue(v) {
    v = v || {};
    v.value = v.value || 0;
    v.offset = v.offset || 0;
    this.editor.setValue(v.value);
    this.offsetCombo.setValue(v.offset);
  },
  getValue: function getValue() {
    return {
      dateType: this.options.dateType,
      value: this.editor.getValue(),
      offset: this.offsetCombo.getValue()[0]
    };
  }
});
BI.DynamicDateParamItem.EVENT_CHANGE = "EVENT_CHANGE";
BI.DynamicDateParamItem.EVENT_INPUT_CHANGE = "EVENT_INPUT_CHANGE";
BI.shortcut("bi.dynamic_date_param_item", BI.DynamicDateParamItem);

/***/ }),
/* 777 */
/***/ (function(module, exports) {

BI.DynamicDatePopup = BI.inherit(BI.Widget, {
  constants: {
    tabHeight: 40
  },
  props: {
    baseCls: "bi-dynamic-date-popup",
    width: 272,
    supportDynamic: true
  },
  _init: function _init() {
    BI.DynamicDatePopup.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options,
        c = this.constants;
    this.storeValue = {
      type: BI.DynamicDateCombo.Static
    };
    BI.createWidget({
      element: this,
      type: "bi.vertical",
      items: [{
        el: this._getTabJson()
      }, {
        el: {
          type: "bi.grid",
          items: [[{
            type: "bi.text_button",
            cls: "bi-high-light bi-split-top",
            shadow: true,
            text: BI.i18nText("BI-Basic_Clear"),
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.DynamicDatePopup.BUTTON_CLEAR_EVENT_CHANGE);
              }
            }]
          }, {
            type: "bi.text_button",
            cls: "bi-split-left bi-split-right bi-high-light bi-split-top",
            shadow: true,
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            text: BI.i18nText("BI-Multi_Date_Today"),
            disabled: this._checkTodayValid(),
            ref: function ref() {
              self.todayButton = this;
            },
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.DynamicDatePopup.BUTTON_lABEL_EVENT_CHANGE);
              }
            }]
          }, {
            type: "bi.text_button",
            cls: "bi-high-light bi-split-top",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            shadow: true,
            text: BI.i18nText("BI-Basic_OK"),
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                var type = self.dateTab.getSelect();

                if (type === BI.DynamicDateCombo.Dynamic) {
                  self.dynamicPane.checkValidation(true) && self.fireEvent(BI.DynamicDatePopup.BUTTON_OK_EVENT_CHANGE);
                } else {
                  self.fireEvent(BI.DynamicDatePopup.BUTTON_OK_EVENT_CHANGE);
                }
              }
            }]
          }]],
          height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT
        }
      }]
    });
    this.setValue(opts.value);
  },
  _getTabJson: function _getTabJson() {
    var self = this,
        o = this.options;
    return {
      type: "bi.tab",
      logic: {
        dynamic: true
      },
      ref: function ref() {
        self.dateTab = this;
      },
      tab: {
        type: "bi.linear_segment",
        invisible: !o.supportDynamic,
        cls: "bi-split-bottom",
        height: this.constants.tabHeight,
        items: BI.createItems([{
          text: BI.i18nText("BI-Multi_Date_YMD"),
          value: BI.DynamicDateCombo.Static
        }, {
          text: BI.i18nText("BI-Basic_Dynamic_Title"),
          value: BI.DynamicDateCombo.Dynamic
        }], {
          textAlign: "center"
        })
      },
      cardCreator: function cardCreator(v) {
        switch (v) {
          case BI.DynamicDateCombo.Dynamic:
            return {
              type: "bi.dynamic_date_card",
              cls: "dynamic-date-pane",
              listeners: [{
                eventName: "EVENT_CHANGE",
                action: function action() {
                  self._setInnerValue(self.year, v);
                }
              }],
              min: self.options.min,
              max: self.options.max,
              ref: function ref() {
                self.dynamicPane = this;
              }
            };

          case BI.DynamicDateCombo.Static:
          default:
            return {
              type: "bi.date_calendar_popup",
              behaviors: o.behaviors,
              min: self.options.min,
              max: self.options.max,
              listeners: [{
                eventName: BI.DateCalendarPopup.EVENT_CHANGE,
                action: function action() {
                  self.fireEvent(BI.DynamicDatePopup.EVENT_CHANGE);
                }
              }, {
                eventName: BI.DateCalendarPopup.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW,
                action: function action() {
                  self.fireEvent(BI.DynamicDatePopup.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
                }
              }],
              ref: function ref() {
                self.ymd = this;
              }
            };
        }
      },
      listeners: [{
        eventName: BI.Tab.EVENT_CHANGE,
        action: function action() {
          var v = self.dateTab.getSelect();

          switch (v) {
            case BI.DynamicDateCombo.Static:
              var date = BI.DynamicDateHelper.getCalculation(self.dynamicPane.getValue());
              self.ymd.setValue({
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate()
              });

              self._setInnerValue();

              break;

            case BI.DynamicDateCombo.Dynamic:
            default:
              if (self.storeValue && self.storeValue.type === BI.DynamicDateCombo.Dynamic) {
                self.dynamicPane.setValue(self.storeValue.value);
              } else {
                self.dynamicPane.setValue({
                  year: 0
                });
              }

              self._setInnerValue();

              break;
          }
        }
      }]
    };
  },
  _setInnerValue: function _setInnerValue() {
    if (this.dateTab.getSelect() === BI.DynamicDateCombo.Static) {
      this.todayButton.setValue(BI.i18nText("BI-Multi_Date_Today"));
      this.todayButton.setEnable(!this._checkTodayValid());
    } else {
      var date = BI.DynamicDateHelper.getCalculation(this.dynamicPane.getInputValue());
      date = BI.print(date, "%Y-%X-%d");
      this.todayButton.setValue(date);
      this.todayButton.setEnable(false);
    }
  },
  _checkValueValid: function _checkValueValid(value) {
    return BI.isNull(value) || BI.isEmptyObject(value) || BI.isEmptyString(value);
  },
  _checkTodayValid: function _checkTodayValid() {
    var o = this.options;
    var today = BI.getDate();
    return !!BI.checkDateVoid(today.getFullYear(), today.getMonth() + 1, today.getDate(), o.min, o.max)[0];
  },
  setMinDate: function setMinDate(minDate) {
    if (this.options.min !== minDate) {
      this.options.min = minDate;
      this.ymd && this.ymd.setMinDate(minDate);
      this.dynamicPane && this.dynamicPane.setMinDate(minDate);
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (this.options.max !== maxDate) {
      this.options.max = maxDate;
      this.ymd && this.ymd.setMaxDate(maxDate);
      this.dynamicPane && this.dynamicPane.setMaxDate(maxDate);
    }
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    var self = this;
    var type, value;
    v = v || {};
    type = v.type || BI.DynamicDateCombo.Static;
    value = v.value || v;
    this.dateTab.setSelect(type);

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        this.dynamicPane.setValue(value);

        self._setInnerValue();

        break;

      case BI.DynamicDateCombo.Static:
      default:
        if (this._checkValueValid(value)) {
          var date = BI.getDate();
          this.ymd.setValue({
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
          });
          this.todayButton.setValue(BI.i18nText("BI-Multi_Date_Today"));
        } else {
          this.ymd.setValue(value);
          this.todayButton.setValue(BI.i18nText("BI-Multi_Date_Today"));
        }

        this.todayButton.setEnable(!this._checkTodayValid());
        break;
    }
  },
  getValue: function getValue() {
    return {
      type: this.dateTab.getSelect(),
      value: this.dateTab.getValue()
    };
  }
});
BI.DynamicDatePopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.DynamicDatePopup.BUTTON_OK_EVENT_CHANGE = "BUTTON_OK_EVENT_CHANGE";
BI.DynamicDatePopup.BUTTON_lABEL_EVENT_CHANGE = "BUTTON_lABEL_EVENT_CHANGE";
BI.DynamicDatePopup.BUTTON_CLEAR_EVENT_CHANGE = "BUTTON_CLEAR_EVENT_CHANGE";
BI.DynamicDatePopup.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.dynamic_date_popup", BI.DynamicDatePopup);

/***/ }),
/* 778 */
/***/ (function(module, exports) {

BI.DynamicDateTrigger = BI.inherit(BI.Trigger, {
  _const: {
    hgap: 4,
    vgap: 2,
    yearLength: 4,
    yearMonthLength: 6,
    yearFullMonthLength: 7,
    compareFormat: "%Y-%X-%d",
    iconWidth: 24
  },
  props: function props() {
    return {
      extraCls: "bi-date-trigger",
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      height: 24,
      iconWidth: 24,
      format: "",
      // 显示的日期格式化方式
      allowEdit: true,
      // 是否允许编辑
      watermark: BI.i18nText("BI-Basic_Unrestricted")
    };
  },
  _init: function _init() {
    BI.DynamicDateTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options,
        c = this._const;
    this.storeTriggerValue = "";
    this.editor = BI.createWidget({
      type: "bi.sign_editor",
      simple: o.simple,
      height: o.height,
      validationChecker: function validationChecker(v) {
        var formatStr = self._getStandardDateStr(v);

        var date = formatStr.match(/\d+/g);
        !BI.isKey(o.format) && self._autoAppend(v, date);
        return self._dateCheck(formatStr) && BI.checkDateLegal(formatStr) && self._checkVoid({
          year: date[0] | 0,
          month: date[1] | 0,
          day: date[2] | 0
        });
      },
      quitChecker: function quitChecker() {
        return false;
      },
      hgap: c.hgap,
      vgap: c.vgap,
      allowBlank: true,
      watermark: o.watermark,
      errorText: function errorText(v) {
        var str = "";

        if (!BI.isKey(o.format)) {
          if (!self._dateCheck(v)) {
            str = self.editor.isEditing() ? BI.i18nText("BI-Date_Trigger_Error_Text") : BI.i18nText("BI-Year_Trigger_Invalid_Text");
          } else {
            var start = BI.parseDateTime(o.min, "%Y-%X-%d");
            var end = BI.parseDateTime(o.max, "%Y-%X-%d");
            str = BI.i18nText("BI-Basic_Date_Range_Error", start.getFullYear(), start.getMonth() + 1, start.getDate(), end.getFullYear(), end.getMonth() + 1, end.getDate());
          }
        }

        return str;
      },
      title: BI.bind(this._getTitle, this)
    });
    this.editor.on(BI.SignEditor.EVENT_KEY_DOWN, function () {
      self.fireEvent(BI.DynamicDateTrigger.EVENT_KEY_DOWN, arguments);
    });
    this.editor.on(BI.SignEditor.EVENT_FOCUS, function () {
      self.storeTriggerValue = self.getKey();
      self.fireEvent(BI.DynamicDateTrigger.EVENT_FOCUS);
    });
    this.editor.on(BI.SignEditor.EVENT_BLUR, function () {
      self.fireEvent(BI.DynamicDateTrigger.EVENT_BLUR);
    });
    this.editor.on(BI.SignEditor.EVENT_STOP, function () {
      self.fireEvent(BI.DynamicDateTrigger.EVENT_STOP);
    });
    this.editor.on(BI.SignEditor.EVENT_VALID, function () {
      self.fireEvent(BI.DynamicDateTrigger.EVENT_VALID);
    });
    this.editor.on(BI.SignEditor.EVENT_ERROR, function () {
      self.fireEvent(BI.DynamicDateTrigger.EVENT_ERROR);
    });
    this.editor.on(BI.SignEditor.EVENT_CONFIRM, function () {
      var value = self.editor.getValue();

      if (BI.isNotNull(value)) {
        self.editor.setState(value);
      }

      if (BI.isNotEmptyString(value) && !BI.isEqual(self.storeTriggerValue, self.getKey())) {
        var formatStr = self._getStandardDateStr(value);

        var date = formatStr.match(/\d+/g);
        self.storeValue = {
          type: BI.DynamicDateCombo.Static,
          value: {
            year: date[0] | 0,
            month: date[1] | 0,
            day: date[2] | 0
          }
        };
      }

      self.fireEvent(BI.DynamicDateTrigger.EVENT_CONFIRM);
    });
    this.editor.on(BI.SignEditor.EVENT_SPACE, function () {
      if (self.editor.isValid()) {
        self.editor.blur();
      }
    });
    this.editor.on(BI.SignEditor.EVENT_START, function () {
      self.fireEvent(BI.DynamicDateTrigger.EVENT_START);
    });
    this.editor.on(BI.SignEditor.EVENT_CHANGE, function () {
      self.fireEvent(BI.DynamicDateTrigger.EVENT_CHANGE);
    });
    BI.createWidget({
      type: "bi.htape",
      element: this,
      columnSize: ["", this._const.iconWidth],
      items: [{
        el: this.editor
      }, {
        el: {
          type: "bi.icon_button",
          cls: "bi-trigger-icon-button date-font",
          width: this._const.iconWidth
        },
        width: this._const.iconWidth
      }]
    });
    !o.allowEdit && BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.text",
          title: BI.bind(this._getTitle, this)
        },
        left: 0,
        right: o.iconWidth,
        top: 0,
        bottom: 0
      }]
    });
    this.setValue(o.value);
  },
  _getTitle: function _getTitle() {
    var storeValue = this.storeValue || {};

    if (BI.isEmptyObject(storeValue)) {
      return this.options.watermark;
    }

    var type = storeValue.type || BI.DynamicDateCombo.Static;
    var value = storeValue.value;

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        var text = this._getText(value);

        var date = BI.getDate();
        date = BI.DynamicDateHelper.getCalculation(value);
        var dateStr = BI.print(date, this._getFormatString());
        return BI.isEmptyString(text) ? dateStr : text + ":" + dateStr;

      case BI.DynamicDateCombo.Static:
      default:
        if (BI.isNull(value) || BI.isNull(value.day)) {
          return "";
        }

        return BI.print(BI.getDate(value.year, value.month - 1, value.day), this._getFormatString());
    }
  },
  _getStandardDateStr: function _getStandardDateStr(v) {
    var c = this._const;
    var result = [0, 1, 2];

    var formatArray = this._getFormatString().match(/%./g);

    BI.each(formatArray, function (idx, v) {
      switch (v) {
        case "%Y":
        case "%y":
          result[0] = idx;
          break;

        case "%X":
        case "%x":
          result[1] = idx;
          break;

        case "%d":
        case "%e":
        default:
          result[2] = idx;
          break;
      }
    }); // 这边不能直接用\d+去切日期, 因为format格式可能是20190607这样的没有分割符的 = =
    // 先看一下是否是合法的, 如果合法就变成标准格式的走原来的流程, 不合法不关心

    var date = BI.parseDateTime(v, this._getFormatString());

    if (BI.print(date, this._getFormatString()) === v) {
      v = BI.print(date, c.compareFormat);
      result = [0, 1, 2];
    }

    var dateArray = v.match(/\d+/g);
    var newArray = [];
    BI.each(dateArray, function (idx) {
      newArray[idx] = dateArray[result[idx]];
    }); // 这边之所以不直接返回join结果是因为年的格式可能只有2位，所以需要format一下

    if (newArray.length === result.length && newArray[0].length === 2) {
      return BI.print(BI.parseDateTime(newArray.join("-"), c.compareFormat), c.compareFormat);
    } // 这边format成-20-也没关系, 反正都是不合法的


    return newArray.join("-");
  },
  _getFormatString: function _getFormatString() {
    return this.options.format || this._const.compareFormat;
  },
  _dateCheck: function _dateCheck(date) {
    return BI.print(BI.parseDateTime(date, "%Y-%x-%d"), "%Y-%x-%d") === date || BI.print(BI.parseDateTime(date, "%Y-%X-%d"), "%Y-%X-%d") === date || BI.print(BI.parseDateTime(date, "%Y-%x-%e"), "%Y-%x-%e") === date || BI.print(BI.parseDateTime(date, "%Y-%X-%e"), "%Y-%X-%e") === date;
  },
  _checkVoid: function _checkVoid(obj) {
    return !BI.checkDateVoid(obj.year, obj.month, obj.day, this.options.min, this.options.max)[0];
  },
  _autoAppend: function _autoAppend(v, dateObj) {
    if (BI.isNotNull(dateObj) && BI.checkDateLegal(v)) {
      switch (v.length) {
        case this._const.yearLength:
          if (this._yearCheck(v)) {
            this.editor.setValue(v + "-");
          }

          break;

        case this._const.yearMonthLength:
        case this._const.yearFullMonthLength:
          var splitMonth = v.split("-")[1];

          if (BI.isNotNull(splitMonth) && splitMonth.length === 2 || this._monthCheck(v)) {
            this.editor.setValue(v + "-");
          }

          break;
      }
    }
  },
  _yearCheck: function _yearCheck(v) {
    var date = BI.print(BI.parseDateTime(v, this._getFormatString()), this._const.compareFormat);
    return BI.print(BI.parseDateTime(v, "%Y"), "%Y") === v && date >= this.options.min && date <= this.options.max;
  },
  _monthCheck: function _monthCheck(v) {
    var date = BI.parseDateTime(v, this._getFormatString());
    var dateStr = BI.print(date, this._const.compareFormat);
    return date.getMonth() >= 0 && (BI.print(BI.parseDateTime(v, "%Y-%X"), "%Y-%X") === v || BI.print(BI.parseDateTime(v, "%Y-%x"), "%Y-%x") === v) && dateStr >= this.options.min && dateStr <= this.options.max;
  },
  _setInnerValue: function _setInnerValue(date) {
    var dateStr = BI.print(date, this._getFormatString());
    this.editor.setState(dateStr);
    this.editor.setValue(dateStr);
  },
  _getText: function _getText(obj) {
    return BI.DynamicDateHelper.getDescription(obj);
  },
  setValue: function setValue(v) {
    var type,
        value,
        self = this;
    var date = BI.getDate();
    this.storeValue = v;

    if (BI.isNotNull(v)) {
      type = v.type || BI.DynamicDateCombo.Static;
      value = v.value || v;
    }

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        var text = this._getText(value);

        date = BI.DynamicDateHelper.getCalculation(value);

        this._setInnerValue(date, text);

        break;

      case BI.DynamicDateCombo.Static:
      default:
        if (BI.isNull(value) || BI.isNull(value.day)) {
          this.editor.setState("");
          this.editor.setValue("");
        } else {
          var dateStr = BI.print(BI.getDate(value.year, value.month - 1, value.day), this._getFormatString());
          this.editor.setState(dateStr);
          this.editor.setValue(dateStr);
        }

        break;
    }
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
    }
  },
  getKey: function getKey() {
    return this.editor.getValue();
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.editor.setWaterMark(v);
  }
});
BI.DynamicDateTrigger.EVENT_BLUR = "EVENT_BLUR";
BI.DynamicDateTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.DynamicDateTrigger.EVENT_START = "EVENT_START";
BI.DynamicDateTrigger.EVENT_STOP = "EVENT_STOP";
BI.DynamicDateTrigger.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DynamicDateTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.DynamicDateTrigger.EVENT_VALID = "EVENT_VALID";
BI.DynamicDateTrigger.EVENT_ERROR = "EVENT_ERROR";
BI.DynamicDateTrigger.EVENT_TRIGGER_CLICK = "EVENT_TRIGGER_CLICK";
BI.DynamicDateTrigger.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.shortcut("bi.dynamic_date_trigger", BI.DynamicDateTrigger);

/***/ }),
/* 779 */
/***/ (function(module, exports) {

BI.DynamicDateTimeCombo = BI.inherit(BI.Single, {
  constants: {
    popupHeight: 259,
    popupWidth: 270,
    comboAdjustHeight: 1,
    border: 1,
    iconWidth: 24
  },
  props: {
    baseCls: "bi-dynamic-date--time-combo",
    height: 24,
    minDate: "1900-01-01",
    maxDate: "2099-12-31",
    format: "",
    allowEdit: true,
    supportDynamic: true,
    attributes: {
      tabIndex: -1
    },
    isNeedAdjustHeight: false,
    isNeedAdjustWidth: false
  },
  _init: function _init() {
    BI.DynamicDateTimeCombo.superclass._init.apply(this, arguments);
  },
  render: function render() {
    var self = this,
        opts = this.options;
    this.storeTriggerValue = "";
    var date = BI.getDate();
    this.storeValue = opts.value;
    var border = opts.simple ? 1 : 2;
    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.combo",
          cls: (opts.simple ? "bi-border-bottom" : "bi-border bi-border-radius") + " bi-focus-shadow",
          destroyWhenHide: true,
          container: opts.container,
          ref: function ref() {
            self.combo = this;
          },
          toggle: false,
          isNeedAdjustHeight: opts.isNeedAdjustHeight,
          isNeedAdjustWidth: opts.isNeedAdjustWidth,
          el: {
            type: "bi.horizontal_fill",
            columnSize: [this.constants.iconWidth, "fill"],
            height: BI.toPix(opts.height, border),
            items: [{
              el: {
                type: "bi.icon_button",
                cls: "bi-trigger-icon-button date-change-h-font",
                width: this.constants.iconWidth,
                height: BI.toPix(opts.height, border),
                ref: function ref() {
                  self.changeIcon = this;
                }
              }
            }, {
              type: "bi.dynamic_date_time_trigger",
              simple: opts.simple,
              min: opts.minDate,
              max: opts.maxDate,
              allowEdit: opts.allowEdit,
              watermark: opts.watermark,
              format: opts.format,
              iconWidth: this.constants.iconWidth,
              height: BI.toPix(opts.height, border),
              value: opts.value,
              ref: function ref() {
                self.trigger = this;
              },
              listeners: [{
                eventName: BI.DynamicDateTimeTrigger.EVENT_KEY_DOWN,
                action: function action() {
                  if (self.combo.isViewVisible()) {
                    self.combo.hideView();
                  }

                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_KEY_DOWN, arguments);
                }
              }, {
                eventName: BI.DynamicDateTimeTrigger.EVENT_STOP,
                action: function action() {
                  if (!self.combo.isViewVisible()) {
                    self.combo.showView();
                  }
                }
              }, {
                eventName: BI.DynamicDateTimeTrigger.EVENT_TRIGGER_CLICK,
                action: function action() {
                  self.combo.toggle();
                }
              }, {
                eventName: BI.DynamicDateTimeTrigger.EVENT_FOCUS,
                action: function action() {
                  self.storeTriggerValue = self.trigger.getKey();

                  if (!self.combo.isViewVisible()) {
                    self.combo.showView();
                  }

                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_FOCUS);
                }
              }, {
                eventName: BI.DynamicDateTimeTrigger.EVENT_BLUR,
                action: function action() {
                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_BLUR);
                }
              }, {
                eventName: BI.DynamicDateTimeTrigger.EVENT_ERROR,
                action: function action() {
                  self.storeValue = {
                    type: BI.DynamicDateTimeCombo.Static,
                    value: {
                      year: date.getFullYear(),
                      month: date.getMonth() + 1
                    }
                  };
                  self.combo.element.addClass("error");
                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_ERROR);
                }
              }, {
                eventName: BI.DynamicDateTimeTrigger.EVENT_VALID,
                action: function action() {
                  self.storeValue = self.trigger.getValue();
                  self.combo.element.removeClass("error");
                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_VALID);
                }
              }, {
                eventName: BI.DynamicDateTimeTrigger.EVENT_CHANGE,
                action: function action() {
                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_CHANGE);
                }
              }, {
                eventName: BI.DynamicDateTimeTrigger.EVENT_CONFIRM,
                action: function action() {
                  var dateStore = self.storeTriggerValue;
                  var dateObj = self.trigger.getKey();

                  if (self.combo.isViewVisible() || BI.isEqual(dateObj, dateStore)) {
                    return;
                  }

                  if (BI.isNotEmptyString(dateObj) && !BI.isEqual(dateObj, dateStore)) {
                    self.storeValue = self.trigger.getValue();
                    self.setValue(self.trigger.getValue());
                  } else if (BI.isEmptyString(dateObj)) {
                    self.storeValue = null;
                    self.trigger.setValue();
                  }

                  self._checkDynamicValue(self.storeValue);

                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_CONFIRM);
                }
              }]
            }]
          },
          adjustLength: this.constants.comboAdjustHeight,
          popup: {
            el: {
              type: "bi.dynamic_date_time_popup",
              width: opts.isNeedAdjustWidth ? opts.width : undefined,
              supportDynamic: opts.supportDynamic,
              behaviors: opts.behaviors,
              min: opts.minDate,
              max: opts.maxDate,
              ref: function ref() {
                self.popup = this;
              },
              listeners: [{
                eventName: BI.DynamicDateTimePopup.BUTTON_CLEAR_EVENT_CHANGE,
                action: function action() {
                  self.setValue();
                  self.combo.hideView();
                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_CONFIRM);
                }
              }, {
                eventName: BI.DynamicDateTimePopup.BUTTON_lABEL_EVENT_CHANGE,
                action: function action() {
                  var date = BI.getDate();
                  self.setValue({
                    type: BI.DynamicDateTimeCombo.Static,
                    value: {
                      year: date.getFullYear(),
                      month: date.getMonth() + 1,
                      day: date.getDate(),
                      hour: 0,
                      minute: 0,
                      second: 0
                    }
                  });
                  self.combo.hideView();
                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_CONFIRM);
                }
              }, {
                eventName: BI.DynamicDateTimePopup.BUTTON_OK_EVENT_CHANGE,
                action: function action() {
                  var value = self.popup.getValue();

                  if (self._checkValue(value)) {
                    self.setValue(value);
                  }

                  self.combo.hideView();
                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_CONFIRM);
                }
              }, {
                eventName: BI.DynamicDateTimePopup.EVENT_CHANGE,
                action: function action() {
                  self.setValue(self.popup.getValue());
                  self.combo.hideView();
                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_CONFIRM);
                }
              }, {
                eventName: BI.DynamicDateTimePopup.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW,
                action: function action() {
                  self.fireEvent(BI.DynamicDateTimeCombo.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
                }
              }]
            }
          },
          listeners: [{
            eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
            action: function action() {
              self.popup.setMinDate(opts.minDate);
              self.popup.setMaxDate(opts.maxDate);
              self.popup.setValue(self.storeValue);
              self.fireEvent(BI.DynamicDateTimeCombo.EVENT_BEFORE_POPUPVIEW);
            }
          }] // // DEC-4250 和复选下拉一样，点击不收起
          // hideChecker: function (e) {
          //     return self.triggerBtn.element.find(e.target).length === 0;
          // }

        },
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      }]
    };
  },
  created: function created() {
    this._checkDynamicValue(this.storeValue);
  },
  _checkDynamicValue: function _checkDynamicValue(v) {
    var o = this.options;
    var type = null;

    if (BI.isNotNull(v)) {
      type = v.type;
    }

    switch (type) {
      case BI.DynamicDateTimeCombo.Dynamic:
        this.changeIcon.setVisible(true); // this.comboWrapper.attr("items")[0].width = o.height - (this.options.simple ? 1 : 2);
        // this.comboWrapper.resize();

        break;

      default:
        // this.comboWrapper.attr("items")[0].width = 0;
        // this.comboWrapper.resize();
        this.changeIcon.setVisible(false);
        break;
    }
  },
  _checkValue: function _checkValue(v) {
    var o = this.options;

    switch (v.type) {
      case BI.DynamicDateCombo.Dynamic:
        return BI.isNotEmptyObject(v.value);

      case BI.DynamicDateCombo.Static:
        var value = v.value || {};
        return !BI.checkDateVoid(value.year, value.month, value.day, o.minDate, o.maxDate)[0];

      default:
        return true;
    }
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;
    o.minDate = minDate;
    this.trigger.setMinDate(minDate);
    this.popup && this.popup.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;
    o.maxDate = maxDate;
    this.trigger.setMaxDate(maxDate);
    this.popup && this.popup.setMaxDate(maxDate);
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    this.trigger.setValue(v);

    this._checkDynamicValue(v);
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  getKey: function getKey() {
    return this.trigger.getKey();
  },
  hidePopupView: function hidePopupView() {
    this.combo.hideView();
  },
  isValid: function isValid() {
    return this.trigger.isValid();
  },
  focus: function focus() {
    this.trigger.focus();
  },
  blur: function blur() {
    this.trigger.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.trigger.setWaterMark(v);
  }
});
BI.DynamicDateTimeCombo.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.DynamicDateTimeCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DynamicDateTimeCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.DynamicDateTimeCombo.EVENT_BLUR = "EVENT_BLUR";
BI.DynamicDateTimeCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.DynamicDateTimeCombo.EVENT_VALID = "EVENT_VALID";
BI.DynamicDateTimeCombo.EVENT_ERROR = "EVENT_ERROR";
BI.DynamicDateTimeCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.DynamicDateTimeCombo.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.dynamic_date_time_combo", BI.DynamicDateTimeCombo);
BI.extend(BI.DynamicDateTimeCombo, {
  Static: 1,
  Dynamic: 2
});

/***/ }),
/* 780 */
/***/ (function(module, exports) {

BI.DynamicDateTimePopup = BI.inherit(BI.Widget, {
  constants: {
    tabHeight: 40,
    buttonHeight: 24
  },
  props: {
    baseCls: "bi-dynamic-date-time-popup",
    width: 272,
    supportDynamic: true
  },
  _init: function _init() {
    BI.DynamicDateTimePopup.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options,
        c = this.constants;
    this.storeValue = {
      type: BI.DynamicDateCombo.Static
    };
    BI.createWidget({
      element: this,
      type: "bi.vertical",
      items: [{
        el: this._getTabJson()
      }, {
        el: {
          type: "bi.grid",
          items: [[{
            type: "bi.text_button",
            cls: "bi-high-light bi-split-top",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            shadow: true,
            text: BI.i18nText("BI-Basic_Clear"),
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.DynamicDateTimePopup.BUTTON_CLEAR_EVENT_CHANGE);
              }
            }]
          }, {
            type: "bi.text_button",
            cls: "bi-split-left bi-split-right bi-high-light bi-split-top",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            shadow: true,
            text: BI.i18nText("BI-Multi_Date_Today"),
            disabled: this._checkTodayValid(),
            ref: function ref() {
              self.todayButton = this;
            },
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.DynamicDateTimePopup.BUTTON_lABEL_EVENT_CHANGE);
              }
            }]
          }, {
            type: "bi.text_button",
            cls: "bi-high-light bi-split-top",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            shadow: true,
            text: BI.i18nText("BI-Basic_OK"),
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                var type = self.dateTab.getSelect();

                if (type === BI.DynamicDateCombo.Dynamic) {
                  self.dynamicPane.checkValidation(true) && self.fireEvent(BI.DynamicDateTimePopup.BUTTON_OK_EVENT_CHANGE);
                } else {
                  self.fireEvent(BI.DynamicDateTimePopup.BUTTON_OK_EVENT_CHANGE);
                }
              }
            }]
          }]],
          height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT
        }
      }]
    });
    this.setValue(opts.value);
  },
  _getTabJson: function _getTabJson() {
    var self = this,
        o = this.options;
    return {
      type: "bi.tab",
      logic: {
        dynamic: true
      },
      ref: function ref() {
        self.dateTab = this;
      },
      tab: {
        type: "bi.linear_segment",
        invisible: !o.supportDynamic,
        cls: "bi-split-bottom",
        height: this.constants.tabHeight,
        items: BI.createItems([{
          text: BI.i18nText("BI-Multi_Date_YMD"),
          value: BI.DynamicDateCombo.Static
        }, {
          text: BI.i18nText("BI-Basic_Dynamic_Title"),
          value: BI.DynamicDateCombo.Dynamic
        }], {
          textAlign: "center"
        })
      },
      cardCreator: function cardCreator(v) {
        switch (v) {
          case BI.DynamicDateCombo.Dynamic:
            return {
              type: "bi.dynamic_date_card",
              cls: "dynamic-date-pane",
              listeners: [{
                eventName: "EVENT_CHANGE",
                action: function action() {
                  self._setInnerValue(self.year, v);
                }
              }],
              ref: function ref() {
                self.dynamicPane = this;
              },
              min: self.options.min,
              max: self.options.max
            };

          case BI.DynamicDateCombo.Static:
          default:
            return {
              type: "bi.vertical",
              items: [{
                type: "bi.date_calendar_popup",
                behaviors: o.behaviors,
                min: self.options.min,
                max: self.options.max,
                ref: function ref() {
                  self.ymd = this;
                },
                listeners: [{
                  eventName: BI.DateCalendarPopup.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW,
                  action: function action() {
                    self.fireEvent(BI.DynamicDateTimePopup.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
                  }
                }]
              }, {
                el: {
                  type: "bi.dynamic_date_time_select",
                  cls: "bi-split-top",
                  ref: function ref() {
                    self.timeSelect = this;
                  },
                  height: 40
                }
              }]
            };
        }
      },
      listeners: [{
        eventName: BI.Tab.EVENT_CHANGE,
        action: function action() {
          var v = self.dateTab.getSelect();

          switch (v) {
            case BI.DynamicDateCombo.Static:
              var date = BI.DynamicDateHelper.getCalculation(self.dynamicPane.getValue());
              self.ymd.setValue({
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate()
              });
              self.timeSelect.setValue();

              self._setInnerValue();

              break;

            case BI.DynamicDateCombo.Dynamic:
            default:
              if (self.storeValue && self.storeValue.type === BI.DynamicDateCombo.Dynamic) {
                self.dynamicPane.setValue(self.storeValue.value);
              } else {
                self.dynamicPane.setValue({
                  year: 0
                });
              }

              self._setInnerValue();

              break;
          }
        }
      }]
    };
  },
  _setInnerValue: function _setInnerValue() {
    if (this.dateTab.getSelect() === BI.DynamicDateCombo.Static) {
      this.todayButton.setValue(BI.i18nText("BI-Multi_Date_Today"));
      this.todayButton.setEnable(!this._checkTodayValid());
    } else {
      var date = BI.DynamicDateHelper.getCalculation(this.dynamicPane.getInputValue());
      date = BI.print(date, "%Y-%X-%d");
      this.todayButton.setValue(date);
      this.todayButton.setEnable(false);
    }
  },
  _checkValueValid: function _checkValueValid(value) {
    return BI.isNull(value) || BI.isEmptyObject(value) || BI.isEmptyString(value);
  },
  _checkTodayValid: function _checkTodayValid() {
    var o = this.options;
    var today = BI.getDate();
    return !!BI.checkDateVoid(today.getFullYear(), today.getMonth() + 1, today.getDate(), o.min, o.max)[0];
  },
  setMinDate: function setMinDate(minDate) {
    if (this.options.min !== minDate) {
      this.options.min = minDate;
      this.ymd.setMinDate(minDate);
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (this.options.max !== maxDate) {
      this.options.max = maxDate;
      this.ymd.setMaxDate(maxDate);
    }
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    var self = this;
    var type, value;
    v = v || {};
    type = v.type || BI.DynamicDateCombo.Static;
    value = v.value || v;
    this.dateTab.setSelect(type);

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        this.dynamicPane.setValue(value);

        self._setInnerValue();

        break;

      case BI.DynamicDateCombo.Static:
      default:
        if (this._checkValueValid(value)) {
          var date = BI.getDate();
          this.ymd.setValue({
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
          });
          this.timeSelect.setValue();
          this.todayButton.setValue(BI.i18nText("BI-Multi_Date_Today"));
        } else {
          this.ymd.setValue(value);
          this.timeSelect.setValue({
            hour: value.hour,
            minute: value.minute,
            second: value.second
          });
          this.todayButton.setValue(BI.i18nText("BI-Multi_Date_Today"));
        }

        this.todayButton.setEnable(!this._checkTodayValid());
        break;
    }
  },
  getValue: function getValue() {
    var type = this.dateTab.getSelect();
    return {
      type: type,
      value: type === BI.DynamicDateTimeCombo.Static ? BI.extend(this.ymd.getValue(), this.timeSelect.getValue()) : this.dynamicPane.getValue()
    };
  }
});
BI.DynamicDateTimePopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.DynamicDateTimePopup.BUTTON_OK_EVENT_CHANGE = "BUTTON_OK_EVENT_CHANGE";
BI.DynamicDateTimePopup.BUTTON_lABEL_EVENT_CHANGE = "BUTTON_lABEL_EVENT_CHANGE";
BI.DynamicDateTimePopup.BUTTON_CLEAR_EVENT_CHANGE = "BUTTON_CLEAR_EVENT_CHANGE";
BI.DynamicDateTimePopup.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.dynamic_date_time_popup", BI.DynamicDateTimePopup);

/***/ }),
/* 781 */
/***/ (function(module, exports) {

BI.DynamicDateTimeSelect = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-date-time-select"
  },
  render: function render() {
    var self = this;
    return {
      type: "bi.center_adapt",
      items: [{
        type: "bi.vertical_adapt",
        items: [{
          el: {
            type: "bi.number_editor",
            ref: function ref() {
              self.hour = this;
            },
            validationChecker: function validationChecker(v) {
              return BI.isNaturalNumber(v) && BI.parseInt(v) < 24;
            },
            errorText: function errorText(v) {
              if (BI.isNumeric(v)) {
                return BI.i18nText("BI-Basic_Input_From_To_Number", "\"00-23\"");
              }

              return BI.i18nText("BI-Numerical_Interval_Input_Data");
            },
            listeners: [{
              eventName: BI.SignEditor.EVENT_CONFIRM,
              action: function action() {
                var value = this.getValue();

                self._checkHour(value);

                this.setValue(self._formatValueToDoubleDigit(value));
                self.fireEvent(BI.DynamicDateTimeSelect.EVENT_CONFIRM);
              }
            }, {
              eventName: BI.SignEditor.EVENT_CHANGE,
              action: function action() {
                var value = self._autoSwitch(this.getValue(), BI.DynamicDateTimeSelect.HOUR);

                this.setValue(value);
              }
            }],
            width: 60,
            height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
          }
        }, {
          type: "bi.label",
          text: ":",
          width: 20
        }, {
          type: "bi.number_editor",
          ref: function ref() {
            self.minute = this;
          },
          validationChecker: function validationChecker(v) {
            return BI.isNaturalNumber(v) && BI.parseInt(v) < 60;
          },
          errorText: function errorText(v) {
            if (BI.isNumeric(v)) {
              return BI.i18nText("BI-Basic_Input_From_To_Number", "\"00-59\"");
            }

            return BI.i18nText("BI-Numerical_Interval_Input_Data");
          },
          listeners: [{
            eventName: BI.SignEditor.EVENT_CONFIRM,
            action: function action() {
              var value = this.getValue();

              self._checkMinute(value);

              this.setValue(self._formatValueToDoubleDigit(value), BI.DynamicDateTimeSelect.MINUTE);
              self.fireEvent(BI.DynamicDateTimeSelect.EVENT_CONFIRM);
            }
          }, {
            eventName: BI.SignEditor.EVENT_CHANGE,
            action: function action() {
              var value = self._autoSwitch(this.getValue(), BI.DynamicDateTimeSelect.MINUTE);

              this.setValue(value);
            }
          }],
          width: 60,
          height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
        }, {
          type: "bi.label",
          text: ":",
          width: 20
        }, {
          type: "bi.number_editor",
          ref: function ref() {
            self.second = this;
          },
          validationChecker: function validationChecker(v) {
            return BI.isNaturalNumber(v) && BI.parseInt(v) < 60;
          },
          errorText: function errorText(v) {
            if (BI.isNumeric(v)) {
              return BI.i18nText("BI-Basic_Input_From_To_Number", "\"00-59\"");
            }

            return BI.i18nText("BI-Numerical_Interval_Input_Data");
          },
          listeners: [{
            eventName: BI.SignEditor.EVENT_CONFIRM,
            action: function action() {
              var value = this.getValue();

              self._checkSecond(value);

              this.setValue(self._formatValueToDoubleDigit(value));
              self.fireEvent(BI.DynamicDateTimeSelect.EVENT_CONFIRM);
            }
          }],
          width: 60,
          height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
        }]
      }]
    };
  },
  _checkBorder: function _checkBorder(v) {
    v = v || {};

    this._checkHour(v.hour);

    this._checkMinute(v.minute);

    this._checkSecond(v.second);
  },
  _checkHour: function _checkHour(value) {
    this.hour.setDownEnable(BI.parseInt(value) > 0);
    this.hour.setUpEnable(BI.parseInt(value) < 23);
  },
  _checkMinute: function _checkMinute(value) {
    this.minute.setDownEnable(BI.parseInt(value) > 0);
    this.minute.setUpEnable(BI.parseInt(value) < 59);
  },
  _checkSecond: function _checkSecond(value) {
    this.second.setDownEnable(BI.parseInt(value) > 0);
    this.second.setUpEnable(BI.parseInt(value) < 59);
  },
  _autoSwitch: function _autoSwitch(v, type) {
    var limit = 0;
    var value = v + "";

    switch (type) {
      case BI.DynamicDateTimeSelect.HOUR:
        limit = 2;
        break;

      case BI.DynamicDateTimeSelect.MINUTE:
        limit = 5;
        break;

      default:
        break;
    }

    if (value.length === 1 && BI.parseInt(value) > limit) {
      value = "0" + value;
    }

    if (value.length === 2) {
      switch (type) {
        case BI.DynamicDateTimeSelect.HOUR:
          this.hour.isEditing() && this.minute.focus();
          break;

        case BI.DynamicDateTimeSelect.MINUTE:
          this.minute.isEditing() && this.second.focus();
          break;

        case BI.DynamicDateTimeSelect.SECOND:
        default:
          break;
      }
    }

    return value;
  },
  _formatValueToDoubleDigit: function _formatValueToDoubleDigit(v) {
    if (BI.isNull(v) || BI.isEmptyString(v)) {
      v = 0;
    }

    var value = BI.parseInt(v);

    if (value < 10) {
      value = "0" + value;
    }

    return value;
  },
  _assertValue: function _assertValue(v) {
    v = v || {};
    v.hour = this._formatValueToDoubleDigit(v.hour) || "00";
    v.minute = this._formatValueToDoubleDigit(v.minute) || "00";
    v.second = this._formatValueToDoubleDigit(v.second) || "00";
    return v;
  },
  getValue: function getValue() {
    return {
      hour: BI.parseInt(this.hour.getValue()),
      minute: BI.parseInt(this.minute.getValue()),
      second: BI.parseInt(this.second.getValue())
    };
  },
  setValue: function setValue(v) {
    v = this._assertValue(v);
    this.hour.setValue(v.hour);
    this.minute.setValue(v.minute);
    this.second.setValue(v.second);

    this._checkBorder(v);
  }
});
BI.DynamicDateTimeSelect.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.dynamic_date_time_select", BI.DynamicDateTimeSelect);
BI.extend(BI.DynamicDateTimeSelect, {
  HOUR: 1,
  MINUTE: 2,
  SECOND: 3
});

/***/ }),
/* 782 */
/***/ (function(module, exports) {

BI.DynamicDateTimeTrigger = BI.inherit(BI.Trigger, {
  _const: {
    hgap: 4,
    vgap: 2,
    yearLength: 4,
    yearMonthLength: 6,
    yearFullMonthLength: 7,
    compareFormat: "%Y-%X-%d %H:%M:%S",
    iconWidth: 24
  },
  props: function props() {
    return {
      extraCls: "bi-date-time-trigger",
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      height: 24,
      iconWidth: 24,
      format: "",
      // 显示的日期格式化方式
      allowEdit: true,
      // 是否允许编辑
      watermark: BI.i18nText("BI-Basic_Unrestricted")
    };
  },
  _init: function _init() {
    BI.DynamicDateTimeTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options,
        c = this._const;
    this.storeTriggerValue = "";
    this.editor = BI.createWidget({
      type: "bi.sign_editor",
      simple: o.simple,
      height: o.height,
      validationChecker: function validationChecker(v) {
        var formatStr = self._getStandardDateStr(v);

        var date = formatStr.match(/\d+/g);
        !BI.isKey(o.format) && self._autoAppend(v, date);
        return self._dateCheck(formatStr) && BI.checkDateLegal(formatStr) && self._checkVoid({
          year: date[0] | 0,
          month: date[1] | 0,
          day: date[2] | 0
        });
      },
      quitChecker: function quitChecker() {
        return false;
      },
      hgap: c.hgap,
      vgap: c.vgap,
      allowBlank: true,
      watermark: o.watermark,
      errorText: function errorText(v) {
        var str = "";

        if (!BI.isKey(o.format)) {
          if (!self._dateCheck(v)) {
            str = self.editor.isEditing() ? BI.i18nText("BI-Date_Trigger_Error_Text") : BI.i18nText("BI-Year_Trigger_Invalid_Text");
          } else {
            var start = BI.parseDateTime(o.min, "%Y-%X-%d");
            var end = BI.parseDateTime(o.max, "%Y-%X-%d");
            str = BI.i18nText("BI-Basic_Date_Range_Error", start.getFullYear(), start.getMonth() + 1, start.getDate(), end.getFullYear(), end.getMonth() + 1, end.getDate());
          }
        }

        return str;
      },
      title: BI.bind(this._getTitle, this)
    });
    this.editor.on(BI.SignEditor.EVENT_KEY_DOWN, function () {
      self.fireEvent(BI.DynamicDateTimeTrigger.EVENT_KEY_DOWN, arguments);
    });
    this.editor.on(BI.SignEditor.EVENT_FOCUS, function () {
      self.storeTriggerValue = self.getKey();
      self.fireEvent(BI.DynamicDateTimeTrigger.EVENT_FOCUS);
    });
    this.editor.on(BI.SignEditor.EVENT_BLUR, function () {
      self.fireEvent(BI.DynamicDateTimeTrigger.EVENT_BLUR);
    });
    this.editor.on(BI.SignEditor.EVENT_STOP, function () {
      self.fireEvent(BI.DynamicDateTimeTrigger.EVENT_STOP);
    });
    this.editor.on(BI.SignEditor.EVENT_VALID, function () {
      self.fireEvent(BI.DynamicDateTimeTrigger.EVENT_VALID);
    });
    this.editor.on(BI.SignEditor.EVENT_ERROR, function () {
      self.fireEvent(BI.DynamicDateTimeTrigger.EVENT_ERROR);
    });
    this.editor.on(BI.SignEditor.EVENT_CONFIRM, function () {
      var value = self.editor.getValue();

      if (BI.isNotNull(value)) {
        self.editor.setState(value);
      }

      if (BI.isNotEmptyString(value) && !BI.isEqual(self.storeTriggerValue, self.getKey())) {
        var formatStr = self._getStandardDateStr(value);

        var date = formatStr.match(/\d+/g);
        self.storeValue = {
          type: BI.DynamicDateCombo.Static,
          value: {
            year: date[0] | 0,
            month: date[1] | 0,
            day: date[2] | 0,
            hour: date[3] | 0,
            minute: date[4] | 0,
            second: date[5] | 0
          }
        };
      }

      self.fireEvent(BI.DynamicDateTimeTrigger.EVENT_CONFIRM);
    });
    this.editor.on(BI.SignEditor.EVENT_START, function () {
      self.fireEvent(BI.DynamicDateTimeTrigger.EVENT_START);
    });
    this.editor.on(BI.SignEditor.EVENT_CHANGE, function () {
      self.fireEvent(BI.DynamicDateTimeTrigger.EVENT_CHANGE);
    });
    BI.createWidget({
      type: "bi.htape",
      element: this,
      columnSize: ["", this._const.iconWidth],
      items: [{
        el: this.editor
      }, {
        el: {
          type: "bi.icon_button",
          cls: "bi-trigger-icon-button date-font"
        },
        width: o.iconWidth
      }]
    });
    !o.allowEdit && BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.text",
          title: BI.bind(this._getTitle, this)
        },
        left: 0,
        right: o.iconWidth,
        top: 0,
        bottom: 0
      }]
    });
    this.setValue(o.value);
  },
  _getTitle: function _getTitle() {
    var o = this.options;
    var storeValue = this.storeValue || {};

    if (BI.isEmptyObject(storeValue)) {
      return o.watermark;
    }

    var type = storeValue.type || BI.DynamicDateCombo.Static;
    var value = storeValue.value;

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        var text = this._getText(value);

        var date = BI.DynamicDateHelper.getCalculation(value);
        var dateStr = BI.print(date, this._getFormatString());
        return BI.isEmptyString(text) ? dateStr : text + ":" + dateStr;

      case BI.DynamicDateCombo.Static:
      default:
        if (BI.isNull(value) || BI.isNull(value.day)) {
          return "";
        }

        return BI.print(BI.getDate(value.year, value.month - 1, value.day, value.hour || 0, value.minute || 0, value.second || 0), this._getFormatString());
    }
  },
  _getStandardDateStr: function _getStandardDateStr(v) {
    var c = this._const;
    var result = [];
    var hasSecond = false;

    var formatArray = this._getFormatString().match(/%./g);

    BI.each(formatArray, function (idx, v) {
      switch (v) {
        case "%Y":
        case "%y":
          result[0] = idx;
          break;

        case "%X":
        case "%x":
          result[1] = idx;
          break;

        case "%d":
        case "%e":
          result[2] = idx;
          break;

        case "%S":
          hasSecond = true;
          break;

        default:
          break;
      }
    }); // 这边不能直接用\d+去切日期, 因为format格式可能是20190607这样的没有分割符的 = =
    // 先看一下是否是合法的, 如果合法就变成标准格式的走原来的流程, 不合法不关心

    var date = BI.parseDateTime(v, this._getFormatString());

    if (BI.print(date, this._getFormatString()) === v) {
      v = BI.print(date, c.compareFormat);
      result = [0, 1, 2];
    }

    var dateArray = v.match(/\d+/g) || [];
    var newArray = []; // 处理乱序的年月日

    BI.each(dateArray.slice(0, 3), function (idx) {
      newArray[idx] = dateArray[result[idx]];
    }); // 拼接时分秒和pm

    var suffixArray = dateArray.slice(3); // 时分秒补0

    BI.each(suffixArray, function (idx, v) {
      BI.isNumeric(v) && v.length === 1 && (suffixArray[idx] = "0" + v);
    }); // hh:mm

    if (suffixArray.length === 2 && !hasSecond) {
      suffixArray.push("00");
    }

    var suffixString = suffixArray.join(":");
    var dateString = newArray.slice(0, 3).join("-");

    if (BI.isNotEmptyString(suffixString)) {
      dateString += " " + suffixString;
    }

    return dateString;
  },
  _getFormatString: function _getFormatString() {
    return this.options.format || this._const.compareFormat;
  },
  _dateCheck: function _dateCheck(date) {
    return BI.print(BI.parseDateTime(date, "%Y-%x-%d %H:%M:%S"), "%Y-%x-%d %H:%M:%S") === date || BI.print(BI.parseDateTime(date, "%Y-%X-%d %H:%M:%S"), "%Y-%X-%d %H:%M:%S") === date || BI.print(BI.parseDateTime(date, "%Y-%x-%e %H:%M:%S"), "%Y-%x-%e %H:%M:%S") === date || BI.print(BI.parseDateTime(date, "%Y-%X-%e %H:%M:%S"), "%Y-%X-%e %H:%M:%S") === date || BI.print(BI.parseDateTime(date, "%Y-%x-%d"), "%Y-%x-%d") === date || BI.print(BI.parseDateTime(date, "%Y-%X-%d"), "%Y-%X-%d") === date || BI.print(BI.parseDateTime(date, "%Y-%x-%e"), "%Y-%x-%e") === date || BI.print(BI.parseDateTime(date, "%Y-%X-%e"), "%Y-%X-%e") === date;
  },
  _checkVoid: function _checkVoid(obj) {
    return !BI.checkDateVoid(obj.year, obj.month, obj.day, this.options.min, this.options.max)[0];
  },
  _autoAppend: function _autoAppend(v, dateObj) {
    if (BI.isNotNull(dateObj) && BI.checkDateLegal(v)) {
      switch (v.length) {
        case this._const.yearLength:
          if (this._yearCheck(v)) {
            this.editor.setValue(v + "-");
          }

          break;

        case this._const.yearMonthLength:
        case this._const.yearFullMonthLength:
          var splitMonth = v.split("-")[1];

          if (BI.isNotNull(splitMonth) && splitMonth.length === 2 || this._monthCheck(v)) {
            this.editor.setValue(v + "-");
          }

          break;
      }
    }
  },
  _yearCheck: function _yearCheck(v) {
    var date = BI.print(BI.parseDateTime(v, "%Y-%X-%d"), "%Y-%X-%d");
    return BI.print(BI.parseDateTime(v, "%Y"), "%Y") === v && date >= this.options.min && date <= this.options.max;
  },
  _monthCheck: function _monthCheck(v) {
    var date = BI.parseDateTime(v, "%Y-%X-%d");
    var dateStr = BI.print(date, "%Y-%X-%d");
    return date.getMonth() > 0 && (BI.print(BI.parseDateTime(v, "%Y-%X"), "%Y-%X") === v || BI.print(BI.parseDateTime(v, "%Y-%x"), "%Y-%x") === v) && dateStr >= this.options.min && dateStr <= this.options.max;
  },
  _setInnerValue: function _setInnerValue(date) {
    var dateStr = BI.print(date, this._getFormatString());
    this.editor.setState(dateStr);
    this.editor.setValue(dateStr);
  },
  _getText: function _getText(obj) {
    var value = "";
    var endText = "";

    if (BI.isNotNull(obj.year)) {
      if (BI.parseInt(obj.year) !== 0) {
        value += Math.abs(obj.year) + BI.i18nText("BI-Basic_Year") + (obj.year < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
      }

      endText = getPositionText(BI.i18nText("BI-Basic_Year"), obj.position);
    }

    if (BI.isNotNull(obj.quarter)) {
      if (BI.parseInt(obj.quarter) !== 0) {
        value += Math.abs(obj.quarter) + BI.i18nText("BI-Basic_Single_Quarter") + (obj.quarter < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
      }

      endText = getPositionText(BI.i18nText("BI-Basic_Single_Quarter"), obj.position);
    }

    if (BI.isNotNull(obj.month)) {
      if (BI.parseInt(obj.month) !== 0) {
        value += Math.abs(obj.month) + BI.i18nText("BI-Basic_Month") + (obj.month < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
      }

      endText = getPositionText(BI.i18nText("BI-Basic_Month"), obj.position);
    }

    if (BI.isNotNull(obj.week)) {
      if (BI.parseInt(obj.week) !== 0) {
        value += Math.abs(obj.week) + BI.i18nText("BI-Basic_Week") + (obj.week < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
      }

      endText = getPositionText(BI.i18nText("BI-Basic_Week"), obj.position);
    }

    if (BI.isNotNull(obj.day)) {
      if (BI.parseInt(obj.day) !== 0) {
        value += Math.abs(obj.day) + BI.i18nText("BI-Basic_Day") + (obj.day < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
      }

      endText = BI.size(obj) === 1 ? getPositionText(BI.i18nText("BI-Basic_Month"), obj.position) : "";
    }

    if (BI.isNotNull(obj.workDay) && BI.parseInt(obj.workDay) !== 0) {
      value += Math.abs(obj.workDay) + BI.i18nText("BI-Basic_Work_Day") + (obj.workDay < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
    }

    return value + endText;

    function getPositionText(baseText, position) {
      switch (position) {
        case BI.DynamicDateCard.OFFSET.BEGIN:
          return baseText + BI.i18nText("BI-Basic_Begin_Start");

        case BI.DynamicDateCard.OFFSET.END:
          return baseText + BI.i18nText("BI-Basic_End_Stop");

        case BI.DynamicDateCard.OFFSET.CURRENT:
        default:
          return BI.i18nText("BI-Basic_Current_Day");
      }
    }
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
    }
  },
  setValue: function setValue(v) {
    var type,
        value,
        self = this;
    var date = BI.getDate();
    this.storeValue = v;

    if (BI.isNotNull(v)) {
      type = v.type || BI.DynamicDateCombo.Static;
      value = v.value || v;
    }

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        var text = this._getText(value);

        date = BI.DynamicDateHelper.getCalculation(value);

        this._setInnerValue(date, text);

        break;

      case BI.DynamicDateCombo.Static:
      default:
        if (BI.isNull(value) || BI.isNull(value.day)) {
          this.editor.setState("");
          this.editor.setValue("");
        } else {
          var dateStr = BI.print(BI.getDate(value.year, value.month - 1, value.day, value.hour || 0, value.minute || 0, value.second || 0), this._getFormatString());
          this.editor.setState(dateStr);
          this.editor.setValue(dateStr);
        }

        break;
    }
  },
  getKey: function getKey() {
    return this.editor.getValue();
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.editor.setWaterMark(v);
  }
});
BI.DynamicDateTimeTrigger.EVENT_BLUR = "EVENT_BLUR";
BI.DynamicDateTimeTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.DynamicDateTimeTrigger.EVENT_START = "EVENT_START";
BI.DynamicDateTimeTrigger.EVENT_STOP = "EVENT_STOP";
BI.DynamicDateTimeTrigger.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DynamicDateTimeTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.DynamicDateTimeTrigger.EVENT_VALID = "EVENT_VALID";
BI.DynamicDateTimeTrigger.EVENT_ERROR = "EVENT_ERROR";
BI.DynamicDateTimeTrigger.EVENT_TRIGGER_CLICK = "EVENT_TRIGGER_CLICK";
BI.DynamicDateTimeTrigger.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.shortcut("bi.dynamic_date_time_trigger", BI.DynamicDateTimeTrigger);

/***/ }),
/* 783 */
/***/ (function(module, exports) {

/**
 * Created by roy on 15/9/14.
 */
BI.SearchEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig(config) {
    var conf = BI.SearchEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-search-editor bi-focus-shadow " + (config.simple ? "bi-border-bottom" : "bi-border bi-border-radius"),
      height: 24,
      errorText: "",
      watermark: BI.i18nText("BI-Basic_Search"),
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      value: ""
    });
  },
  _init: function _init() {
    BI.SearchEditor.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.el, {
      type: "bi.editor",
      simple: o.simple,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      watermark: o.watermark,
      allowBlank: true,
      hgap: 1,
      errorText: o.errorText,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      value: o.value
    });
    this.clear = BI.createWidget({
      type: "bi.icon_button",
      stopEvent: true,
      cls: "close-font",
      invisible: !BI.isKey(o.value)
    });
    this.clear.on(BI.IconButton.EVENT_CHANGE, function () {
      self.setValue("");
      self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.STOPEDIT, self.getValue()); // 从有内容到无内容的清空也是一次change

      self.fireEvent(BI.SearchEditor.EVENT_CHANGE);
      self.fireEvent(BI.SearchEditor.EVENT_CLEAR);
    });
    BI.createWidget({
      element: this,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      type: "bi.htape",
      items: [{
        el: {
          type: "bi.icon_label",
          cls: "search-font"
        },
        width: 24
      }, {
        el: self.editor
      }, {
        el: this.clear,
        width: 24
      }]
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_FOCUS, function () {
      self.fireEvent(BI.SearchEditor.EVENT_FOCUS);
    });
    this.editor.on(BI.Editor.EVENT_BLUR, function () {
      self.fireEvent(BI.SearchEditor.EVENT_BLUR);
    });
    this.editor.on(BI.Editor.EVENT_CLICK, function () {
      self.fireEvent(BI.SearchEditor.EVENT_CLICK);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE, function () {
      self._checkClear();

      self.fireEvent(BI.SearchEditor.EVENT_CHANGE);
    });
    this.editor.on(BI.Editor.EVENT_KEY_DOWN, function (v) {
      self.fireEvent(BI.SearchEditor.EVENT_KEY_DOWN, v);
    });
    this.editor.on(BI.Editor.EVENT_SPACE, function () {
      self.fireEvent(BI.SearchEditor.EVENT_SPACE);
    });
    this.editor.on(BI.Editor.EVENT_BACKSPACE, function () {
      self.fireEvent(BI.SearchEditor.EVENT_BACKSPACE);
    });
    this.editor.on(BI.Editor.EVENT_VALID, function () {
      self.fireEvent(BI.SearchEditor.EVENT_VALID);
    });
    this.editor.on(BI.Editor.EVENT_ERROR, function () {
      self.fireEvent(BI.SearchEditor.EVENT_ERROR);
    });
    this.editor.on(BI.Editor.EVENT_ENTER, function () {
      self.fireEvent(BI.SearchEditor.EVENT_ENTER);
    });
    this.editor.on(BI.Editor.EVENT_RESTRICT, function () {
      self.fireEvent(BI.SearchEditor.EVENT_RESTRICT);
    });
    this.editor.on(BI.Editor.EVENT_EMPTY, function () {
      self._checkClear();

      self.fireEvent(BI.SearchEditor.EVENT_EMPTY);
    });
    this.editor.on(BI.Editor.EVENT_REMOVE, function () {
      self.fireEvent(BI.SearchEditor.EVENT_REMOVE);
    });
    this.editor.on(BI.Editor.EVENT_CONFIRM, function () {
      self.fireEvent(BI.SearchEditor.EVENT_CONFIRM);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE_CONFIRM, function () {
      self.fireEvent(BI.SearchEditor.EVENT_CHANGE_CONFIRM);
    });
    this.editor.on(BI.Editor.EVENT_START, function () {
      self.fireEvent(BI.SearchEditor.EVENT_START);
    });
    this.editor.on(BI.Editor.EVENT_PAUSE, function () {
      self.fireEvent(BI.SearchEditor.EVENT_PAUSE);
    });
    this.editor.on(BI.Editor.EVENT_STOP, function () {
      self.fireEvent(BI.SearchEditor.EVENT_STOP);
    });
  },
  _checkClear: function _checkClear() {
    if (!this.getValue()) {
      this.clear.invisible();
    } else {
      this.clear.visible();
    }
  },
  setWaterMark: function setWaterMark(v) {
    this.options.watermark = v;
    this.editor.setWaterMark(v);
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  getValue: function getValue() {
    if (this.isValid()) {
      return this.editor.getValue();
    }
  },
  getKeywords: function getKeywords() {
    var val = this.editor.getLastChangedValue();
    var keywords = val.match(/[\S]+/g);

    if (BI.isEndWithBlank(val)) {
      return keywords.concat([" "]);
    }

    return keywords;
  },
  getLastValidValue: function getLastValidValue() {
    return this.editor.getLastValidValue();
  },
  getLastChangedValue: function getLastChangedValue() {
    return this.editor.getLastChangedValue();
  },
  setValue: function setValue(v) {
    this.editor.setValue(v);

    if (BI.isKey(v)) {
      this.clear.visible();
    }
  },
  isEditing: function isEditing() {
    return this.editor.isEditing();
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  showClearIcon: function showClearIcon() {
    this.clear.visible();
  },
  hideClearIcon: function hideClearIcon() {
    this.clear.invisible();
  }
});
BI.SearchEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.SearchEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.SearchEditor.EVENT_BLUR = "EVENT_BLUR";
BI.SearchEditor.EVENT_CLICK = "EVENT_CLICK";
BI.SearchEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.SearchEditor.EVENT_SPACE = "EVENT_SPACE";
BI.SearchEditor.EVENT_BACKSPACE = "EVENT_BACKSPACE";
BI.SearchEditor.EVENT_CLEAR = "EVENT_CLEAR";
BI.SearchEditor.EVENT_START = "EVENT_START";
BI.SearchEditor.EVENT_PAUSE = "EVENT_PAUSE";
BI.SearchEditor.EVENT_STOP = "EVENT_STOP";
BI.SearchEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.SearchEditor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.SearchEditor.EVENT_VALID = "EVENT_VALID";
BI.SearchEditor.EVENT_ERROR = "EVENT_ERROR";
BI.SearchEditor.EVENT_ENTER = "EVENT_ENTER";
BI.SearchEditor.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.SearchEditor.EVENT_REMOVE = "EVENT_REMOVE";
BI.SearchEditor.EVENT_EMPTY = "EVENT_EMPTY";
BI.shortcut("bi.search_editor", BI.SearchEditor);

/***/ }),
/* 784 */
/***/ (function(module, exports) {

/**
 * 小号搜索框
 * Created by GUY on 2015/9/29.
 * @class BI.SmallSearchEditor
 * @extends BI.SearchEditor
 */
BI.SmallSearchEditor = BI.inherit(BI.SearchEditor, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SmallSearchEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-small-search-editor",
      height: 20
    });
  },
  _init: function _init() {
    BI.SmallSearchEditor.superclass._init.apply(this, arguments);
  }
});
BI.shortcut("bi.small_search_editor", BI.SmallSearchEditor);

/***/ }),
/* 785 */
/***/ (function(module, exports) {

/**
 * guy
 * @class BI.TextEditor
 * @extends BI.Single
 */
BI.TextEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig(config) {
    var conf = BI.TextEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-text-editor bi-focus-shadow " + (config.simple ? "bi-border-bottom" : "bi-border"),
      hgap: 4,
      vgap: 2,
      lgap: 0,
      rgap: 0,
      tgap: 0,
      bgap: 0,
      validationChecker: BI.emptyFn,
      quitChecker: BI.emptyFn,
      allowBlank: false,
      watermark: "",
      errorText: "",
      height: 24
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    var border = o.simple ? 1 : 2;
    this.editor = BI.createWidget({
      type: "bi.editor",
      element: this,
      width: BI.toPix(o.width, border),
      height: BI.toPix(o.height, border),
      simple: o.simple,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      value: o.value,
      title: o.title,
      tipType: o.tipType,
      validationChecker: o.validationChecker,
      quitChecker: o.quitChecker,
      allowBlank: o.allowBlank,
      watermark: o.watermark,
      errorText: o.errorText,
      inputType: o.inputType,
      autocomplete: o.autocomplete
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_FOCUS, function () {
      self.fireEvent(BI.TextEditor.EVENT_FOCUS);
    });
    this.editor.on(BI.Editor.EVENT_BLUR, function () {
      self.fireEvent(BI.TextEditor.EVENT_BLUR);
    });
    this.editor.on(BI.Editor.EVENT_CLICK, function () {
      self.fireEvent(BI.TextEditor.EVENT_CLICK);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE, function () {
      self.fireEvent(BI.TextEditor.EVENT_CHANGE);
    });
    this.editor.on(BI.Editor.EVENT_KEY_DOWN, function (v) {
      self.fireEvent(BI.TextEditor.EVENT_KEY_DOWN);
    });
    this.editor.on(BI.Editor.EVENT_SPACE, function (v) {
      self.fireEvent(BI.TextEditor.EVENT_SPACE);
    });
    this.editor.on(BI.Editor.EVENT_BACKSPACE, function (v) {
      self.fireEvent(BI.TextEditor.EVENT_BACKSPACE);
    });
    this.editor.on(BI.Editor.EVENT_VALID, function () {
      self.element.removeClass("error");
      self.fireEvent(BI.TextEditor.EVENT_VALID);
    });
    this.editor.on(BI.Editor.EVENT_CONFIRM, function () {
      self.fireEvent(BI.TextEditor.EVENT_CONFIRM);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE_CONFIRM, function () {
      self.fireEvent(BI.TextEditor.EVENT_CHANGE_CONFIRM);
    });
    this.editor.on(BI.Editor.EVENT_REMOVE, function (v) {
      self.fireEvent(BI.TextEditor.EVENT_REMOVE);
    });
    this.editor.on(BI.Editor.EVENT_START, function () {
      self.fireEvent(BI.TextEditor.EVENT_START);
    });
    this.editor.on(BI.Editor.EVENT_PAUSE, function () {
      self.fireEvent(BI.TextEditor.EVENT_PAUSE);
    });
    this.editor.on(BI.Editor.EVENT_STOP, function () {
      self.fireEvent(BI.TextEditor.EVENT_STOP);
    });
    this.editor.on(BI.Editor.EVENT_ERROR, function () {
      self.element.addClass("error");
      self.fireEvent(BI.TextEditor.EVENT_ERROR, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ENTER, function () {
      self.fireEvent(BI.TextEditor.EVENT_ENTER);
    });
    this.editor.on(BI.Editor.EVENT_RESTRICT, function () {
      self.fireEvent(BI.TextEditor.EVENT_RESTRICT);
    });
    this.editor.on(BI.Editor.EVENT_EMPTY, function () {
      self.fireEvent(BI.TextEditor.EVENT_EMPTY);
    });
  },
  setWaterMark: function setWaterMark(v) {
    this.options.watermark = v;
    this.editor.setWaterMark(v);
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  setErrorText: function setErrorText(text) {
    this.editor.setErrorText(text);
  },
  getErrorText: function getErrorText() {
    return this.editor.getErrorText();
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  setValue: function setValue(v) {
    this.editor.setValue(v);
  },
  getValue: function getValue() {
    return this.editor.getValue();
  }
});
BI.TextEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.TextEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.TextEditor.EVENT_BLUR = "EVENT_BLUR";
BI.TextEditor.EVENT_CLICK = "EVENT_CLICK";
BI.TextEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.TextEditor.EVENT_SPACE = "EVENT_SPACE";
BI.TextEditor.EVENT_BACKSPACE = "EVENT_BACKSPACE";
BI.TextEditor.EVENT_START = "EVENT_START";
BI.TextEditor.EVENT_PAUSE = "EVENT_PAUSE";
BI.TextEditor.EVENT_STOP = "EVENT_STOP";
BI.TextEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.TextEditor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.TextEditor.EVENT_VALID = "EVENT_VALID";
BI.TextEditor.EVENT_ERROR = "EVENT_ERROR";
BI.TextEditor.EVENT_ENTER = "EVENT_ENTER";
BI.TextEditor.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.TextEditor.EVENT_REMOVE = "EVENT_REMOVE";
BI.TextEditor.EVENT_EMPTY = "EVENT_EMPTY";
BI.shortcut("bi.text_editor", BI.TextEditor);

/***/ }),
/* 786 */
/***/ (function(module, exports) {

/**
 * 小号搜索框
 * Created by GUY on 2015/9/29.
 * @class BI.SmallTextEditor
 * @extends BI.SearchEditor
 */
BI.SmallTextEditor = BI.inherit(BI.TextEditor, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SmallTextEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-small-text-editor",
      height: 20
    });
  },
  _init: function _init() {
    BI.SmallTextEditor.superclass._init.apply(this, arguments);
  }
});
BI.shortcut("bi.small_text_editor", BI.SmallTextEditor);

/***/ }),
/* 787 */
/***/ (function(module, exports) {

/**
 * Created by zcf on 2016/9/26.
 */
BI.IntervalSlider = BI.inherit(BI.Single, {
  _constant: {
    EDITOR_WIDTH: 58,
    EDITOR_R_GAP: 60,
    EDITOR_HEIGHT: 20,
    SLIDER_WIDTH_HALF: 15,
    SLIDER_WIDTH: 30,
    SLIDER_HEIGHT: 30,
    TRACK_HEIGHT: 24
  },
  props: {
    baseCls: "bi-interval-slider bi-slider-track",
    digit: false,
    unit: "",
    min: 0,
    max: 100,
    value: {
      min: "",
      max: ""
    }
  },
  beforeMount: function beforeMount() {
    var _this$options = this.options,
        value = _this$options.value,
        min = _this$options.min,
        max = _this$options.max;

    this._setMinAndMax({
      min: min,
      max: max
    });

    this.setValue(value);
    this.populate();
  },
  render: function render() {
    var self = this;
    var c = this._constant;
    this.enable = false;
    this.valueOne = "";
    this.valueTwo = "";
    this.calculation = new BI.AccurateCalculationModel();
    this.grayTrack = BI.createWidget({
      type: "bi.layout",
      cls: "gray-track",
      height: 6
    });
    this.blueTrack = BI.createWidget({
      type: "bi.layout",
      cls: "blue-track bi-high-light-background",
      height: 6
    });
    this.track = this._createTrackWrapper();
    this.labelOne = BI.createWidget({
      type: "bi.sign_text_editor",
      cls: "slider-editor-button",
      text: this.options.unit,
      allowBlank: false,
      width: BI.toPix(c.EDITOR_WIDTH, 2),
      height: BI.toPix(c.EDITOR_HEIGHT, 2),
      validationChecker: function validationChecker(v) {
        return self._checkValidation(v);
      }
    });
    this.labelOne.element.hover(function () {
      self.labelOne.element.removeClass("bi-border").addClass("bi-border");
    }, function () {
      self.labelOne.element.removeClass("bi-border");
    });
    this.labelOne.on(BI.Editor.EVENT_CONFIRM, function () {
      var oldValueOne = self.valueOne;
      var v = BI.parseFloat(this.getValue());
      self.valueOne = v;

      var percent = self._getPercentByValue(v);

      var significantPercent = BI.parseFloat(percent.toFixed(1)); // 分成1000份

      self._setSliderOnePosition(significantPercent);

      self._setBlueTrack();

      self._checkLabelPosition(oldValueOne, self.valueTwo, self.valueOne, self.valueTwo);

      self.fireEvent(BI.IntervalSlider.EVENT_CHANGE);
    });
    this.labelTwo = BI.createWidget({
      type: "bi.sign_text_editor",
      cls: "slider-editor-button",
      text: this.options.unit,
      allowBlank: false,
      width: BI.toPix(c.EDITOR_WIDTH, 2),
      height: BI.toPix(c.EDITOR_HEIGHT, 2),
      validationChecker: function validationChecker(v) {
        return self._checkValidation(v);
      }
    });
    this.labelTwo.element.hover(function () {
      self.labelTwo.element.removeClass("bi-border").addClass("bi-border");
    }, function () {
      self.labelTwo.element.removeClass("bi-border");
    });
    this.labelTwo.on(BI.Editor.EVENT_CONFIRM, function () {
      var oldValueTwo = self.valueTwo;
      var v = BI.parseFloat(this.getValue());
      self.valueTwo = v;

      var percent = self._getPercentByValue(v);

      var significantPercent = BI.parseFloat(percent.toFixed(1));

      self._setSliderTwoPosition(significantPercent);

      self._setBlueTrack();

      self._checkLabelPosition(self.valueOne, oldValueTwo, self.valueOne, self.valueTwo);

      self.fireEvent(BI.IntervalSlider.EVENT_CHANGE);
    });
    this.sliderOne = BI.createWidget({
      type: "bi.single_slider_button"
    });
    this.sliderTwo = BI.createWidget({
      type: "bi.single_slider_button"
    });

    this._draggable(this.sliderOne, true);

    this._draggable(this.sliderTwo, false);

    this._setVisible(false);

    return {
      type: "bi.vertical_fill",
      rowSize: [30, 30],
      items: [this._createLabelWrapper(), {
        type: "bi.absolute",
        items: [{
          el: {
            type: "bi.horizontal",
            horizontalAlign: "stretch",
            verticalAlign: "middle",
            columnSize: ["fill"],
            items: [{
              el: this.track
            }],
            hgap: 10
          },
          inset: 0
        }, this._createSliderWrapper()]
      }]
    };
  },
  _rePosBySizeAfterMove: function _rePosBySizeAfterMove(size, isLeft) {
    var o = this.options;

    var percent = size * 100 / this._getGrayTrackLength();

    var significantPercent = BI.parseFloat(percent.toFixed(1));

    var v = this._getValueByPercent(significantPercent);

    v = this._assertValue(v);
    v = o.digit === false ? v : v.toFixed(o.digit);
    var oldValueOne = this.valueOne,
        oldValueTwo = this.valueTwo;

    if (isLeft) {
      this._setSliderOnePosition(significantPercent);

      this.labelOne.setValue(v);
      this.valueOne = v;

      this._checkLabelPosition(oldValueOne, oldValueTwo, v, this.valueTwo);
    } else {
      this._setSliderTwoPosition(significantPercent);

      this.labelTwo.setValue(v);
      this.valueTwo = v;

      this._checkLabelPosition(oldValueOne, oldValueTwo, this.valueOne, v);
    }

    this._setBlueTrack();
  },
  _rePosBySizeAfterStop: function _rePosBySizeAfterStop(size, isLeft) {
    var percent = size * 100 / this._getGrayTrackLength();

    var significantPercent = BI.parseFloat(percent.toFixed(1));
    isLeft ? this._setSliderOnePosition(significantPercent) : this._setSliderTwoPosition(significantPercent);
  },
  _draggable: function _draggable(widget, isLeft) {
    var self = this,
        o = this.options;
    var startDrag = false;
    var size = 0,
        offset = 0,
        defaultSize = 0;
    var mouseMoveTracker = new BI.MouseMoveTracker(function (deltaX) {
      if (mouseMoveTracker.isDragging()) {
        startDrag = true;
        offset += deltaX;
        size = optimizeSize(defaultSize + offset);
        widget.element.addClass("dragging");

        self._rePosBySizeAfterMove(size, isLeft);
      }
    }, function () {
      if (startDrag === true) {
        size = optimizeSize(size);

        self._rePosBySizeAfterStop(size, isLeft);

        size = 0;
        offset = 0;
        defaultSize = size;
        startDrag = false;
      }

      widget.element.removeClass("dragging");
      mouseMoveTracker.releaseMouseMoves();
      self.fireEvent(BI.IntervalSlider.EVENT_CHANGE);
    }, window);
    widget.element.on("mousedown", function (event) {
      if (!widget.isEnabled()) {
        return;
      }

      defaultSize = this.offsetLeft;
      optimizeSize(defaultSize);
      mouseMoveTracker.captureMouseMoves(event);
    });

    function optimizeSize(s) {
      return BI.clamp(s, 0, self._getGrayTrackLength());
    }
  },
  _createLabelWrapper: function _createLabelWrapper() {
    var c = this._constant;
    return {
      el: {
        type: "bi.vertical",
        items: [{
          type: "bi.absolute",
          items: [{
            el: this.labelOne,
            top: 0,
            left: 0
          }]
        }, {
          type: "bi.absolute",
          items: [{
            el: this.labelTwo,
            top: 0,
            right: 0
          }]
        }],
        rgap: c.EDITOR_R_GAP,
        height: c.SLIDER_HEIGHT
      },
      top: 0,
      left: 0,
      width: "100%"
    };
  },
  _createSliderWrapper: function _createSliderWrapper() {
    var c = this._constant;
    return {
      el: {
        type: "bi.horizontal",
        horizontalAlign: "stretch",
        verticalAlign: "middle",
        items: [{
          type: "bi.absolute",
          height: 12,
          width: "fill",
          items: [{
            el: this.sliderOne,
            top: 0,
            bottom: 0,
            left: 0
          }, {
            el: this.sliderTwo,
            top: 0,
            bottom: 0,
            left: "100%"
          }]
        }],
        hgap: 10
      },
      inset: 0
    };
  },
  _createTrackWrapper: function _createTrackWrapper() {
    return BI.createWidget({
      type: "bi.horizontal",
      cls: "track-wrapper",
      horizontalAlign: "stretch",
      verticalAlign: "middle",
      columnSize: ["fill"],
      scrollx: false,
      items: [{
        type: "bi.absolute",
        height: 6,
        items: [{
          el: this.grayTrack,
          top: 0,
          left: 0,
          bottom: 0,
          width: "100%"
        }, {
          el: this.blueTrack,
          top: 0,
          left: 0,
          bottom: 0,
          width: "0%"
        }]
      }]
    });
  },
  _checkValidation: function _checkValidation(v) {
    var o = this.options;
    var valid = false; // 像90.这样的既不属于整数又不属于小数，是不合法的值

    var dotText = (v + "").split(".")[1];

    if (BI.isEmptyString(dotText)) {} else {
      if (BI.isNumeric(v) && !(BI.isNull(v) || v < this.min || v > this.max)) {
        // 虽然规定了所填写的小数位数，但是我们认为所有的整数都是满足设置的小数位数的
        // 100等价于100.0 100.00 100.000
        if (o.digit === false || BI.isInteger(v)) {
          valid = true;
        } else {
          dotText = dotText || "";
          valid = dotText.length === o.digit;
        }
      }
    }

    return valid;
  },
  _checkOverlap: function _checkOverlap() {
    var labelOneLeft = this.labelOne.element[0].offsetLeft;
    var labelTwoLeft = this.labelTwo.element[0].offsetLeft;

    if (labelOneLeft <= labelTwoLeft) {
      if (labelTwoLeft - labelOneLeft < 90) {
        this.labelTwo.element.css({
          top: 40
        });
      } else {
        this.labelTwo.element.css({
          top: 0
        });
      }
    } else {
      if (labelOneLeft - labelTwoLeft < 90) {
        this.labelTwo.element.css({
          top: 40
        });
      } else {
        this.labelTwo.element.css({
          top: 0
        });
      }
    }
  },
  _checkLabelPosition: function _checkLabelPosition(oldValueOne, oldValueTwo, valueOne, valueTwo, isLeft) {
    oldValueOne = BI.parseFloat(oldValueOne);
    oldValueTwo = BI.parseFloat(oldValueTwo);
    valueOne = BI.parseFloat(valueOne);
    valueTwo = BI.parseFloat(valueTwo);

    if (oldValueOne <= oldValueTwo && valueOne > valueTwo || oldValueOne >= oldValueTwo && valueOne < valueTwo) {
      var isSliderOneLeft = BI.parseFloat(this.labelOne.getValue()) < BI.parseFloat(this.labelTwo.getValue());

      this._resetLabelPosition(!isSliderOneLeft);
    }
  },
  _resetLabelPosition: function _resetLabelPosition(needReverse) {
    this.labelOne.element.css({
      left: needReverse ? "100%" : "0%"
    });
    this.labelTwo.element.css({
      left: needReverse ? "0%" : "100%"
    });
  },
  _setSliderOnePosition: function _setSliderOnePosition(percent) {
    this.sliderOne.element.css({
      left: percent + "%"
    });
  },
  _setSliderTwoPosition: function _setSliderTwoPosition(percent) {
    this.sliderTwo.element.css({
      left: percent + "%"
    });
  },
  _setBlueTrackLeft: function _setBlueTrackLeft(percent) {
    this.blueTrack.element.css({
      left: percent + "%"
    });
  },
  _setBlueTrackWidth: function _setBlueTrackWidth(percent) {
    this.blueTrack.element.css({
      width: percent + "%"
    });
  },
  _setBlueTrack: function _setBlueTrack() {
    var percentOne = this._getPercentByValue(this.labelOne.getValue());

    var percentTwo = this._getPercentByValue(this.labelTwo.getValue());

    if (percentOne <= percentTwo) {
      this._setBlueTrackLeft(percentOne);

      this._setBlueTrackWidth(percentTwo - percentOne);
    } else {
      this._setBlueTrackLeft(percentTwo);

      this._setBlueTrackWidth(percentOne - percentTwo);
    }
  },
  _setAllPosition: function _setAllPosition(one, two) {
    this._setSliderOnePosition(one);

    this._setSliderTwoPosition(two);

    this._setBlueTrack();
  },
  _setVisible: function _setVisible(visible) {
    this.sliderOne.setVisible(visible);
    this.sliderTwo.setVisible(visible);
    this.labelOne.setVisible(visible);
    this.labelTwo.setVisible(visible);
  },
  _setErrorText: function _setErrorText() {
    var errorText = BI.i18nText("BI-Basic_Please_Enter_Number_Between", this.min, this.max);
    this.labelOne.setErrorText(errorText);
    this.labelTwo.setErrorText(errorText);
  },
  _getGrayTrackLength: function _getGrayTrackLength() {
    return this.grayTrack.element[0].scrollWidth;
  },
  // 其中取max-min后保留4为有效数字后的值的小数位数为最终value的精度
  // 端点处的值有可能因为min,max相差量级很大(precision很大)而丢失精度，此时直接返回端点值即可
  _getValueByPercent: function _getValueByPercent(percent) {
    // return (((max-min)*percent)/100+min)
    if (percent === 0) {
      return this.min;
    }

    if (percent === 100) {
      return this.max;
    }

    var sub = this.calculation.accurateSubtraction(this.max, this.min);
    var mul = this.calculation.accurateMultiplication(sub, percent);
    var div = this.calculation.accurateDivisionTenExponent(mul, 2);

    if (this.precision < 0) {
      var value = BI.parseFloat(this.calculation.accurateAddition(div, this.min));
      var reduceValue = Math.round(this.calculation.accurateDivisionTenExponent(value, -this.precision));
      return this.calculation.accurateMultiplication(reduceValue, Math.pow(10, -this.precision));
    }

    return BI.parseFloat(this.calculation.accurateAddition(div, this.min).toFixed(this.precision));
  },
  _getPercentByValue: function _getPercentByValue(v) {
    return (v - this.min) * 100 / (this.max - this.min);
  },
  _getPrecision: function _getPrecision() {
    // 计算每一份值的精度(最大值和最小值的差值保留4为有效数字后的精度)
    // 如果差值的整数位数大于4,toPrecision(4)得到的是科学计数法123456 => 1.235e+5
    // 返回非负值: 保留的小数位数
    // 返回负值: 保留的10^n精度中的n
    var sub = this.calculation.accurateSubtraction(this.max, this.min);
    var pre = sub.toPrecision(4); // 科学计数法

    var eIndex = pre.indexOf("e");
    var arr = [];

    if (eIndex > -1) {
      arr = pre.split("e");
      var decimalPartLength = BI.size(arr[0].split(".")[1]);
      var sciencePartLength = BI.parseInt(arr[1].substring(1));
      return decimalPartLength - sciencePartLength;
    }

    arr = pre.split(".");
    return arr.length > 1 ? arr[1].length : 0;
  },
  _assertValue: function _assertValue(value) {
    if (value <= this.min) {
      return this.min;
    }

    if (value >= this.max) {
      return this.max;
    }

    return value;
  },
  _setEnable: function _setEnable(b) {
    BI.IntervalSlider.superclass._setEnable.apply(this, [b]);

    if (b) {
      this.blueTrack.element.removeClass("disabled-blue-track").addClass("blue-track");
    } else {
      this.blueTrack.element.removeClass("blue-track").addClass("disabled-blue-track");
    }
  },
  getValue: function getValue() {
    if (this.valueOne <= this.valueTwo) {
      return {
        min: this.valueOne,
        max: this.valueTwo
      };
    }

    return {
      min: this.valueTwo,
      max: this.valueOne
    };
  },
  _setMinAndMax: function _setMinAndMax(v) {
    var minNumber = BI.parseFloat(v.min);
    var maxNumber = BI.parseFloat(v.max);

    if (!isNaN(minNumber) && !isNaN(maxNumber) && maxNumber >= minNumber) {
      this.min = minNumber;
      this.max = maxNumber;
      this.valueOne = minNumber;
      this.valueTwo = maxNumber;
      this.precision = this._getPrecision();
    }
  },
  setMinAndMax: function setMinAndMax(v) {
    this._setMinAndMax(v);

    this.setEnable(v.min <= v.max);
  },
  setValue: function setValue(v) {
    var o = this.options;
    var valueOne = BI.parseFloat(v.min);
    var valueTwo = BI.parseFloat(v.max);
    valueOne = o.digit === false ? valueOne : BI.parseFloat(valueOne.toFixed(o.digit));
    valueTwo = o.digit === false ? valueTwo : BI.parseFloat(valueTwo.toFixed(o.digit));

    if (!isNaN(valueOne) && !isNaN(valueTwo)) {
      if (this._checkValidation(valueOne)) {
        this.valueOne = this.valueOne <= this.valueTwo ? valueOne : valueTwo;
      }

      if (this._checkValidation(valueTwo)) {
        this.valueTwo = this.valueOne <= this.valueTwo ? valueTwo : valueOne;
      }

      if (valueOne < this.min) {
        this.valueOne = this.min;
      }

      if (valueTwo > this.max) {
        this.valueTwo = this.max;
      }
    }
  },
  reset: function reset() {
    this._setVisible(false);

    this.enable = false;
    this.valueOne = "";
    this.valueTwo = "";
    this.min = NaN;
    this.max = NaN;

    this._setBlueTrackWidth(0);
  },
  populate: function populate() {
    var o = this.options;

    if (!isNaN(this.min) && !isNaN(this.max)) {
      this.enable = true;

      this._setVisible(true);

      this._setErrorText();

      if ((BI.isNumeric(this.valueOne) || BI.isNotEmptyString(this.valueOne)) && (BI.isNumeric(this.valueTwo) || BI.isNotEmptyString(this.valueTwo))) {
        this.labelOne.setValue(o.digit === false ? this.valueOne : BI.parseFloat(this.valueOne).toFixed(o.digit));
        this.labelTwo.setValue(o.digit === false ? this.valueTwo : BI.parseFloat(this.valueTwo).toFixed(o.digit));

        this._setAllPosition(this._getPercentByValue(this.valueOne), this._getPercentByValue(this.valueTwo));
      } else {
        this.labelOne.setValue(this.min);
        this.labelTwo.setValue(this.max);

        this._setAllPosition(0, 100);
      }

      this._resetLabelPosition(this.valueOne > this.valueTwo);
    }
  }
});
BI.IntervalSlider.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.interval_slider", BI.IntervalSlider);

/***/ }),
/* 788 */
/***/ (function(module, exports) {

/**
 * Created by zcf on 2017/3/1.
 * 万恶的IEEE-754
 * 使用字符串精确计算含小数加法、减法、乘法和10的指数倍除法，支持负数
 */
BI.AccurateCalculationModel = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.AccurateCalculationModel.superclass._defaultConfig.apply(this, arguments), {
      baseCls: ""
    });
  },
  _init: function _init() {
    BI.AccurateCalculationModel.superclass._init.apply(this, arguments);
  },
  _getMagnitude: function _getMagnitude(n) {
    var magnitude = "1";

    for (var i = 0; i < n; i++) {
      magnitude += "0";
    }

    return BI.parseInt(magnitude);
  },
  _formatDecimal: function _formatDecimal(stringNumber1, stringNumber2) {
    if (stringNumber1.numDecimalLength === stringNumber2.numDecimalLength) {
      return;
    }

    var magnitudeDiff = stringNumber1.numDecimalLength - stringNumber2.numDecimalLength;

    if (magnitudeDiff > 0) {
      var needAddZero = stringNumber2;
    } else {
      var needAddZero = stringNumber1;
      magnitudeDiff = 0 - magnitudeDiff;
    }

    for (var i = 0; i < magnitudeDiff; i++) {
      if (needAddZero.numDecimal === "0" && i === 0) {
        continue;
      }

      needAddZero.numDecimal += "0";
    }
  },
  _stringNumberFactory: function _stringNumberFactory(num) {
    var strNum = num.toString();
    var numStrArray = strNum.split(".");
    var numInteger = numStrArray[0];

    if (numStrArray.length === 1) {
      var numDecimal = "0";
      var numDecimalLength = 0;
    } else {
      var numDecimal = numStrArray[1];
      var numDecimalLength = numStrArray[1].length;
    }

    return {
      numInteger: numInteger,
      numDecimal: numDecimal,
      numDecimalLength: numDecimalLength
    };
  },
  _accurateSubtraction: function _accurateSubtraction(num1, num2) {
    // num1-num2 && num1>num2
    var stringNumber1 = this._stringNumberFactory(num1);

    var stringNumber2 = this._stringNumberFactory(num2); // 整数部分计算


    var integerResult = BI.parseInt(stringNumber1.numInteger) - BI.parseInt(stringNumber2.numInteger); // 小数部分

    this._formatDecimal(stringNumber1, stringNumber2);

    var decimalMaxLength = getDecimalMaxLength(stringNumber1, stringNumber2);

    if (BI.parseInt(stringNumber1.numDecimal) >= BI.parseInt(stringNumber2.numDecimal)) {
      var decimalResultTemp = (BI.parseInt(stringNumber1.numDecimal) - BI.parseInt(stringNumber2.numDecimal)).toString();
      var decimalResult = addZero(decimalResultTemp, decimalMaxLength);
    } else {
      // 否则借位
      integerResult--;

      var borrow = this._getMagnitude(decimalMaxLength);

      var decimalResultTemp = (borrow + BI.parseInt(stringNumber1.numDecimal) - BI.parseInt(stringNumber2.numDecimal)).toString();
      var decimalResult = addZero(decimalResultTemp, decimalMaxLength);
    }

    var result = integerResult + "." + decimalResult;
    return BI.parseFloat(result);

    function getDecimalMaxLength(num1, num2) {
      if (num1.numDecimal.length >= num2.numDecimal.length) {
        return num1.numDecimal.length;
      }

      return num2.numDecimal.length;
    }

    function addZero(resultTemp, length) {
      var diff = length - resultTemp.length;

      for (var i = 0; i < diff; i++) {
        resultTemp = "0" + resultTemp;
      }

      return resultTemp;
    }
  },
  _accurateAddition: function _accurateAddition(num1, num2) {
    // 加法结合律
    var stringNumber1 = this._stringNumberFactory(num1);

    var stringNumber2 = this._stringNumberFactory(num2); // 整数部分计算


    var integerResult = BI.parseInt(stringNumber1.numInteger) + BI.parseInt(stringNumber2.numInteger); // 小数部分

    this._formatDecimal(stringNumber1, stringNumber2);

    var decimalResult = (BI.parseInt(stringNumber1.numDecimal) + BI.parseInt(stringNumber2.numDecimal)).toString();

    if (decimalResult !== "0") {
      if (decimalResult.length <= stringNumber1.numDecimal.length) {
        decimalResult = addZero(decimalResult, stringNumber1.numDecimal.length);
      } else {
        integerResult++; // 进一

        decimalResult = decimalResult.slice(1);
      }
    }

    var result = integerResult + "." + decimalResult;
    return BI.parseFloat(result);

    function addZero(resultTemp, length) {
      var diff = length - resultTemp.length;

      for (var i = 0; i < diff; i++) {
        resultTemp = "0" + resultTemp;
      }

      return resultTemp;
    }
  },
  _accurateMultiplication: function _accurateMultiplication(num1, num2) {
    // 乘法分配律
    var stringNumber1 = this._stringNumberFactory(num1);

    var stringNumber2 = this._stringNumberFactory(num2); // 整数部分计算


    var integerResult = BI.parseInt(stringNumber1.numInteger) * BI.parseInt(stringNumber2.numInteger); // num1的小数和num2的整数

    var dec1Int2 = this._accurateDivisionTenExponent(BI.parseInt(stringNumber1.numDecimal) * BI.parseInt(stringNumber2.numInteger), stringNumber1.numDecimalLength); // num1的整数和num2的小数


    var int1dec2 = this._accurateDivisionTenExponent(BI.parseInt(stringNumber1.numInteger) * BI.parseInt(stringNumber2.numDecimal), stringNumber2.numDecimalLength); // 小数*小数


    var dec1dec2 = this._accurateDivisionTenExponent(BI.parseInt(stringNumber1.numDecimal) * BI.parseInt(stringNumber2.numDecimal), stringNumber1.numDecimalLength + stringNumber2.numDecimalLength);

    return this._accurateAddition(this._accurateAddition(this._accurateAddition(integerResult, dec1Int2), int1dec2), dec1dec2);
  },
  _accurateDivisionTenExponent: function _accurateDivisionTenExponent(num, n) {
    // num/10^n && n>0
    var stringNumber = this._stringNumberFactory(num);

    if (stringNumber.numInteger.length > n) {
      var integerResult = stringNumber.numInteger.slice(0, stringNumber.numInteger.length - n);
      var partDecimalResult = stringNumber.numInteger.slice(-n);
    } else {
      var integerResult = "0";
      var partDecimalResult = addZero(stringNumber.numInteger, n);
    }

    var result = integerResult + "." + partDecimalResult + stringNumber.numDecimal;
    return BI.parseFloat(result);

    function addZero(resultTemp, length) {
      var diff = length - resultTemp.length;

      for (var i = 0; i < diff; i++) {
        resultTemp = "0" + resultTemp;
      }

      return resultTemp;
    }
  },
  accurateSubtraction: function accurateSubtraction(num1, num2) {
    if (num1 >= 0 && num2 >= 0) {
      if (num1 >= num2) {
        return this._accurateSubtraction(num1, num2);
      }

      return -this._accurateSubtraction(num2, num1);
    }

    if (num1 >= 0 && num2 < 0) {
      return this._accurateAddition(num1, -num2);
    }

    if (num1 < 0 && num2 >= 0) {
      return -this._accurateAddition(-num1, num2);
    }

    if (num1 < 0 && num2 < 0) {
      if (num1 >= num2) {
        return this._accurateSubtraction(-num2, -num1);
      }

      return this._accurateSubtraction(-num1, -num2);
    }
  },
  accurateAddition: function accurateAddition(num1, num2) {
    if (num1 >= 0 && num2 >= 0) {
      return this._accurateAddition(num1, num2);
    }

    if (num1 >= 0 && num2 < 0) {
      return this.accurateSubtraction(num1, -num2);
    }

    if (num1 < 0 && num2 >= 0) {
      return this.accurateSubtraction(num2, -num1);
    }

    if (num1 < 0 && num2 < 0) {
      return -this._accurateAddition(-num1, -num2);
    }
  },
  accurateMultiplication: function accurateMultiplication(num1, num2) {
    if (num1 >= 0 && num2 >= 0) {
      return this._accurateMultiplication(num1, num2);
    }

    if (num1 >= 0 && num2 < 0) {
      return -this._accurateMultiplication(num1, -num2);
    }

    if (num1 < 0 && num2 >= 0) {
      return -this._accurateMultiplication(-num1, num2);
    }

    if (num1 < 0 && num2 < 0) {
      return this._accurateMultiplication(-num1, -num2);
    }
  },
  accurateDivisionTenExponent: function accurateDivisionTenExponent(num1, n) {
    if (num1 >= 0) {
      return this._accurateDivisionTenExponent(num1, n);
    }

    return -this._accurateDivisionTenExponent(-num1, n);
  }
});

/***/ }),
/* 789 */
/***/ (function(module, exports) {

/**
 * Created by roy on 15/8/14.
 */
BI.MultiLayerDownListCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerDownListCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multilayer-down-list-combo",
      height: 24,
      items: [],
      adjustLength: 0,
      direction: "bottom",
      trigger: "click",
      container: null,
      stopPropagation: false,
      el: {}
    });
  },
  _init: function _init() {
    BI.MultiLayerDownListCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.popupview = BI.createWidget({
      type: "bi.multi_layer_down_list_popup",
      items: o.items,
      chooseType: o.chooseType,
      value: o.value
    });
    this.popupview.on(BI.MultiLayerDownListPopup.EVENT_CHANGE, function (value) {
      self.fireEvent(BI.MultiLayerDownListCombo.EVENT_CHANGE, value);
      self.downlistcombo.hideView();
    });
    this.popupview.on(BI.MultiLayerDownListPopup.EVENT_SON_VALUE_CHANGE, function (value, fatherValue) {
      self.fireEvent(BI.MultiLayerDownListCombo.EVENT_SON_VALUE_CHANGE, value, fatherValue);
      self.downlistcombo.hideView();
    });
    this.downlistcombo = BI.createWidget({
      element: this,
      type: "bi.combo",
      trigger: o.trigger,
      isNeedAdjustWidth: false,
      container: o.container,
      adjustLength: o.adjustLength,
      direction: o.direction,
      stopPropagation: o.stopPropagation,
      el: BI.createWidget(o.el, {
        type: "bi.icon_trigger",
        extraCls: o.iconCls ? o.iconCls : "pull-down-font",
        width: o.width,
        height: o.height
      }),
      popup: {
        el: this.popupview,
        stopPropagation: o.stopPropagation,
        maxHeight: 1000
      }
    });
    this.downlistcombo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      self.fireEvent(BI.MultiLayerDownListCombo.EVENT_BEFORE_POPUPVIEW);
    });
  },
  hideView: function hideView() {
    this.downlistcombo.hideView();
  },
  showView: function showView(e) {
    this.downlistcombo.showView(e);
  },
  populate: function populate(items) {
    this.popupview.populate(items);
  },
  setValue: function setValue(v) {
    this.popupview.setValue(v);
  },
  getValue: function getValue() {
    return this.popupview.getValue();
  }
});
BI.MultiLayerDownListCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiLayerDownListCombo.EVENT_SON_VALUE_CHANGE = "EVENT_SON_VALUE_CHANGE";
BI.MultiLayerDownListCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.multi_layer_down_list_combo", BI.MultiLayerDownListCombo);

/***/ }),
/* 790 */
/***/ (function(module, exports) {

/**
 * Created by roy on 15/9/8.
 * 处理popup中的item分组样式
 * 一个item分组中的成员大于一时，该分组设置为单选，并且默认状态第一个成员设置为已选择项
 */
BI.MultiLayerDownListPopup = BI.inherit(BI.Pane, {
  constants: {
    nextIcon: "pull-right-e-font",
    height: 25,
    iconHeight: 12,
    iconWidth: 12,
    hgap: 0,
    vgap: 0,
    border: 1
  },
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiLayerDownListPopup.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: "bi-down-list-popup",
      items: [],
      chooseType: BI.Selection.Multi
    });
  },
  _init: function _init() {
    BI.MultiLayerDownListPopup.superclass._init.apply(this, arguments);

    this.singleValues = [];
    this.childValueMap = {};
    this.fatherValueMap = {};
    this.items = [];

    var self = this,
        o = this.options,
        children = this._createPopupItems(o.items);

    this.popup = BI.createWidget({
      type: "bi.button_tree",
      items: BI.createItems(children, {}, {
        adjustLength: -2
      }),
      layouts: [{
        type: "bi.vertical",
        hgap: this.constants.hgap,
        vgap: this.constants.vgap
      }],
      value: this._digest(o.value),
      chooseType: o.chooseType
    });
    this.popup.on(BI.ButtonTree.EVENT_CHANGE, function (value, object) {
      var changedValue = value;

      if (BI.isNotNull(self.childValueMap[value])) {
        changedValue = self.childValueMap[value];
        var fatherValue = self.fatherValueMap[value];
        var fatherArrayValue = (fatherValue + "").split(BI.BlankSplitChar);
        self.fireEvent(BI.MultiLayerDownListPopup.EVENT_SON_VALUE_CHANGE, changedValue, fatherArrayValue.length > 1 ? fatherArrayValue : fatherValue);
      } else {
        self.fireEvent(BI.MultiLayerDownListPopup.EVENT_CHANGE, changedValue, object);
      }

      if (!BI.contains(self.singleValues, changedValue)) {
        var item = self.getValue();
        var result = [];
        BI.each(item, function (i, valueObject) {
          if (valueObject.value != changedValue) {
            result.push(valueObject);
          }
        });
        self.setValue(result);
      }
    });
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      items: [this.popup],
      vgap: 5
    });
  },
  _createPopupItems: function _createPopupItems(items) {
    var self = this,
        result = [];
    BI.each(items, function (i, it) {
      var item_done = {
        type: "bi.down_list_group",
        items: []
      };
      var storeItem = [];
      BI.each(it, function (i, sourceItem) {
        var item = BI.extend({}, sourceItem);

        if (BI.isNotEmptyArray(sourceItem.children) && !BI.isEmpty(sourceItem.el)) {
          item.type = "bi.combo_group";
          item.cls = "down-list-group";
          item.trigger = "hover";
          item.isNeedAdjustWidth = false;
          item.el = sourceItem.el;
          item.el.title = sourceItem.el.title || sourceItem.el.text;
          item.el.type = "bi.down_list_group_item";
          item.el.logic = {
            dynamic: true
          };
          item.el.height = sourceItem.el.height || BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT;
          item.el.iconCls2 = self.constants.nextIcon;
          item.popup = {
            lgap: 1,
            el: {
              type: "bi.button_tree",
              chooseType: 0,
              layouts: [{
                type: "bi.vertical"
              }]
            },
            innerVgap: 5,
            maxHeight: 378
          };

          self._createChildren(item, sourceItem);
        } else {
          item.type = sourceItem.type || "bi.down_list_item";
          item.title = sourceItem.title || sourceItem.text;
          item.textRgap = 10;
          item.isNeedAdjustWidth = false;
          item.logic = {
            dynamic: true
          };
        }

        var el_done = {};
        el_done.el = item;
        item_done.items.push(el_done);
        storeItem.push(item);
      });

      if (self._isGroup(item_done.items)) {
        BI.each(item_done.items, function (i, item) {
          self.singleValues.push(item.el.value);
        });
      }

      result.push(item_done);
      self.items.push(storeItem);

      if (self._needSpliter(i, items.length)) {
        var spliter_container = BI.createWidget({
          type: "bi.vertical",
          items: [{
            el: {
              type: "bi.layout",
              cls: "bi-down-list-spliter bi-border-top cursor-pointer",
              height: 0
            }
          }],
          cls: "bi-down-list-spliter-container cursor-pointer",
          vgap: 5,
          hgap: 12
        });
        result.push(spliter_container);
      }
    });
    return result;
  },
  _createChildren: function _createChildren(targetItem, sourceItem) {
    var self = this;
    this._formatEL(targetItem).el.childValues = [];
    targetItem.items = targetItem.children = [];
    BI.each(sourceItem.children, function (i, child) {
      var item = child.el ? BI.extend({}, child.el, {
        children: child.children
      }) : BI.extend({}, child);
      var fatherValue = BI.deepClone(self._formatEL(targetItem).el.value);
      var childValue = BI.deepClone(item.value);
      self.singleValues.push(item.value);
      item.type = item.type || "bi.down_list_item";
      item.extraCls = " child-down-list-item";
      item.title = item.title || item.text;
      item.textRgap = 10;
      item.isNeedAdjustWidth = false;
      item.logic = {
        dynamic: true
      };
      item.father = fatherValue;
      self.fatherValueMap[self._createChildValue(fatherValue, childValue)] = fatherValue;
      self.childValueMap[self._createChildValue(fatherValue, childValue)] = childValue;
      item.value = self._createChildValue(fatherValue, childValue);

      self._formatEL(targetItem).el.childValues.push(item.value);

      if (BI.isNotEmptyArray(child.children)) {
        item.type = "bi.down_list_group_item";
        item.iconCls2 = self.constants.nextIcon;
        item.height = child.height || BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT;

        self._createChildren(item, child);
      }

      targetItem.items.push(item);
    });
  },
  _formatEL: function _formatEL(obj) {
    if (obj && obj.el) {
      return obj;
    }

    return {
      el: obj
    };
  },
  _isGroup: function _isGroup(i) {
    return i.length > 1;
  },
  _needSpliter: function _needSpliter(i, itemLength) {
    return i < itemLength - 1;
  },
  _createChildValue: function _createChildValue(fatherValue, childValue) {
    var fValue = fatherValue;

    if (BI.isArray(fatherValue)) {
      fValue = fatherValue.join(BI.BlankSplitChar);
    }

    return fValue + BI.BlankSplitChar + childValue;
  },
  _digest: function _digest(valueItem) {
    var self = this;
    var valueArray = [];
    BI.each(valueItem, function (i, item) {
      var value;

      if (BI.isNotNull(item.childValue)) {
        value = self._createChildValue(item.value, item.childValue);
      } else {
        value = item.value;
      }

      valueArray.push(value);
    });
    return valueArray;
  },
  _checkValues: function _checkValues(values) {
    var self = this,
        o = this.options;
    var value = [];
    BI.each(this.items, function (idx, itemGroup) {
      BI.each(itemGroup, function (id, item) {
        if (BI.isNotNull(item.children)) {
          var childValues = getChildrenValue(item);
          var v = joinValue(childValues, values[idx]);

          if (BI.isNotEmptyString(v)) {
            value.push(v);
          }
        } else {
          if (item.value === values[idx][0]) {
            value.push(values[idx][0]);
          }
        }
      });
    });
    return value;

    function joinValue(sources, targets) {
      var value = "";
      BI.some(sources, function (idx, s) {
        return BI.some(targets, function (id, t) {
          if (s === t) {
            value = s;
            return true;
          }
        });
      });
      return value;
    }

    function getChildrenValue(item) {
      var children = [];

      if (BI.isNotNull(item.children)) {
        BI.each(item.children, function (idx, child) {
          children = BI.concat(children, getChildrenValue(child));
        });
      } else {
        children.push(item.value);
      }

      return children;
    }
  },
  populate: function populate(items) {
    BI.MultiLayerDownListPopup.superclass.populate.apply(this, arguments);
    var self = this;
    self.childValueMap = {};
    self.fatherValueMap = {};
    self.singleValues = [];
    this.items = [];

    var children = self._createPopupItems(items);

    var popupItem = BI.createItems(children, {}, {
      adjustLength: -2
    });
    self.popup.populate(popupItem);
  },
  setValue: function setValue(valueItem) {
    this.popup.setValue(this._digest(valueItem));
  },
  _getValue: function _getValue() {
    var v = [];
    BI.each(this.popup.getAllButtons(), function (i, item) {
      i % 2 === 0 && v.push(item.getValue());
    });
    return v;
  },
  getValue: function getValue() {
    var self = this,
        result = [];

    var values = this._checkValues(this._getValue());

    BI.each(values, function (i, value) {
      var valueItem = {};

      if (BI.isNotNull(self.childValueMap[value])) {
        var fartherValue = self.fatherValueMap[value];
        valueItem.childValue = self.childValueMap[value];
        var fatherArrayValue = (fartherValue + "").split(BI.BlankSplitChar);
        valueItem.value = fatherArrayValue.length > 1 ? fatherArrayValue : fartherValue;
      } else {
        valueItem.value = value;
      }

      result.push(valueItem);
    });
    return result;
  }
});
BI.MultiLayerDownListPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiLayerDownListPopup.EVENT_SON_VALUE_CHANGE = "EVENT_SON_VALUE_CHANGE";
BI.shortcut("bi.multi_layer_down_list_popup", BI.MultiLayerDownListPopup);

/***/ }),
/* 791 */
/***/ (function(module, exports) {

/**
 * @class BI.MultiLayerSelectTreeCombo
 * @extends BI.Widget
 */
BI.MultiLayerSelectTreeCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerSelectTreeCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multilayer-select-tree-combo",
      isDefaultInit: false,
      height: 24,
      text: "",
      defaultText: "",
      itemsCreator: BI.emptyFn,
      items: [],
      allowEdit: false,
      allowSearchValue: false,
      allowInsertValue: false,
      isNeedAdjustWidth: true,
      status: "" // "error","warning"

    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    var cls = (o.simple ? "bi-border-bottom " : "bi-border bi-border-radius ") + (BI.isKey(o.status) ? "status-" + o.status : "");

    var baseConfig = this._getBaseConfig();

    if (o.allowEdit) {
      return {
        type: "bi.absolute",
        width: BI.toPix(o.width, 2),
        height: BI.toPix(o.height, 2),
        cls: cls,
        items: [{
          el: BI.extend(baseConfig, this._getSearchConfig()),
          top: 0,
          bottom: 0,
          right: 0,
          left: 0
        }, {
          el: self._getTriggerIconButton(),
          top: 0,
          bottom: 0,
          right: 0
        }]
      };
    }

    return BI.extend(baseConfig, {
      el: {
        type: "bi.single_tree_trigger",
        ref: function ref(_ref) {
          self.textTrigger = _ref;
        },
        text: o.text,
        defaultText: o.defaultText,
        height: BI.toPix(o.height, 2),
        items: o.items,
        value: o.value,
        tipType: o.tipType,
        warningTitle: o.warningTitle,
        valueFormatter: o.valueFormatter
      }
    }, {
      cls: cls
    });
  },
  _getBaseConfig: function _getBaseConfig() {
    var self = this,
        o = this.options;
    return {
      type: "bi.combo",
      width: BI.toPix(o.width, 2),
      height: BI.toPix(o.height, 2),
      container: o.container,
      destroyWhenHide: o.destroyWhenHide,
      adjustLength: 2,
      ref: function ref(_ref) {
        self.combo = _ref;
      },
      popup: {
        el: {
          type: "bi.multilayer_select_tree_popup",
          isDefaultInit: o.isDefaultInit,
          itemsCreator: o.itemsCreator,
          items: o.items,
          ref: function ref(_ref) {
            self.trigger && self.trigger.getSearcher().setAdapter(_ref);
          },
          listeners: [{
            eventName: BI.MultiLayerSelectTreePopup.EVENT_CHANGE,
            action: function action() {
              self.setValue(this.getValue());
              self.combo.hideView();
              self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_CHANGE);
              self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_CLICK_ITEM, self.combo.getValue());
            }
          }],
          onLoaded: function onLoaded() {
            BI.nextTick(function () {
              self.combo.adjustWidth();
              self.combo.adjustHeight();
            });
          }
        },
        value: o.value,
        maxHeight: 400,
        maxWidth: o.isNeedAdjustWidth ? "auto" : 500,
        minHeight: 240
      },
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      listeners: [{
        eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_BEFORE_POPUPVIEW);
        }
      }]
    };
  },
  _getSearchConfig: function _getSearchConfig() {
    var self = this,
        o = this.options;
    return {
      el: {
        type: "bi.multilayer_select_tree_trigger",
        container: o.container,
        allowInsertValue: o.allowInsertValue,
        allowSearchValue: o.allowSearchValue,
        allowEdit: o.allowEdit,
        cls: "multilayer-select-tree-trigger",
        ref: function ref(_ref) {
          self.trigger = _ref;
        },
        items: o.items,
        itemsCreator: o.itemsCreator,
        valueFormatter: o.valueFormatter,
        watermark: o.watermark,
        height: BI.toPix(o.height, 2),
        text: o.text,
        defaultText: o.defaultText,
        value: o.value,
        tipType: o.tipType,
        warningTitle: o.warningTitle,
        title: o.title,
        listeners: [{
          eventName: BI.MultiLayerSelectTreeTrigger.EVENT_CHANGE,
          action: function action() {
            self.setValue(this.getValue());
            self.combo.hideView();
            self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_CHANGE);
            self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_CLICK_ITEM, self.combo.getValue());
          }
        }, {
          eventName: BI.MultiLayerSelectTreeTrigger.EVENT_FOCUS,
          action: function action() {
            self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_FOCUS);
          }
        }, {
          eventName: BI.MultiLayerSelectTreeTrigger.EVENT_BLUR,
          action: function action() {
            self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_BLUR);
          }
        }, {
          eventName: BI.MultiLayerSelectTreeTrigger.EVENT_SEARCHING,
          action: function action() {
            self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_SEARCHING);
          }
        }, {
          eventName: BI.MultiLayerSelectTreeTrigger.EVENT_STOP,
          action: function action() {
            self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_STOP);
          }
        }, {
          eventName: BI.MultiLayerSelectTreeTrigger.EVENT_ADD_ITEM,
          action: function action() {
            var value = self.trigger.getSearcher().getKeyword();
            self.combo.setValue([value]);
            self.combo.hideView();
            self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_CHANGE);
          }
        }]
      },
      toggle: !o.allowEdit,
      hideChecker: function hideChecker(e) {
        var _self$triggerBtn;

        // 新增传配置container后对应hideChecker的修改
        // IE11下，popover(position: fixed)下放置下拉控件(position: fixed), 滚动的时候会异常卡顿
        // 通过container参数将popup放置于popover之外解决此问题, 其他下拉控件由于元素少或者有分页，所以
        // 卡顿不明显, 先在此做尝试, 并在FineUI特殊处理待解决文档中标记跟踪
        return o.container && self.trigger.getSearcher().isSearching() && self.trigger.getSearcher().getView().element.find(e.target).length > 0 ? false : ((_self$triggerBtn = self.triggerBtn) === null || _self$triggerBtn === void 0 ? void 0 : _self$triggerBtn.element.find(e.target).length) === 0;
      },
      listeners: [{
        eventName: BI.Combo.EVENT_AFTER_HIDEVIEW,
        action: function action() {
          self.trigger.stopEditing();
        }
      }, {
        eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.MultiLayerSelectTreeCombo.EVENT_BEFORE_POPUPVIEW);
        }
      }]
    };
  },
  _getTriggerIconButton: function _getTriggerIconButton() {
    var self = this,
        o = this.options;
    return {
      type: "bi.trigger_icon_button",
      cls: "bi-trigger trigger-icon-button",
      ref: function ref(_ref) {
        self.triggerBtn = _ref;
      },
      width: BI.toPix(o.height, 2),
      height: BI.toPix(o.height, 2),
      listeners: [{
        eventName: BI.TriggerIconButton.EVENT_CHANGE,
        action: function action() {
          if (self.combo.isViewVisible()) {
            self.combo.hideView();
          } else {
            self.combo.showView();
          }
        }
      }]
    };
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.combo.setValue(v);
  },
  getValue: function getValue() {
    return this.combo.getValue();
  },
  getSearcher: function getSearcher() {
    return this.trigger ? this.trigger.getSearcher() : this.textTrigger.getTextor();
  },
  clear: function clear() {//  do some work
  },
  setStatus: function setStatus(status) {
    if (BI.isKey(this.options.status)) {
      this.element.removeClass("status-" + this.options.status);
    }

    this.element.addClass("status-" + status);
    this.options.status = status;
  },
  setTipType: function setTipType(v) {
    this.trigger ? this.trigger.setTipType(v) : this.textTrigger.setTipType(v);
  },
  populate: function populate(items) {
    this.combo.populate(items);
  },
  focus: function focus() {
    this.trigger ? this.trigger.focus() : this.textTrigger.focus();
  },
  blur: function blur() {
    this.trigger ? this.trigger.blur() : this.textTrigger.blur();
  },
  showView: function showView() {
    this.combo.showView();
  },
  setWaterMark: function setWaterMark(v) {
    this.trigger ? this.trigger.setWaterMark(v) : this.textTrigger.setWaterMark(v);
  }
});
BI.MultiLayerSelectTreeCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiLayerSelectTreeCombo.EVENT_BLUR = "EVENT_BLUR";
BI.MultiLayerSelectTreeCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiLayerSelectTreeCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiLayerSelectTreeCombo.EVENT_STOP = "EVENT_STOP";
BI.MultiLayerSelectTreeCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.MultiLayerSelectTreeCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.shortcut("bi.multilayer_select_tree_combo", BI.MultiLayerSelectTreeCombo);

/***/ }),
/* 792 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/1/26.
 *
 * @class BI.MultiLayerSelectTreeInsertSearchPane
 * @extends BI.Pane
 */
BI.MultiLayerSelectTreeInsertSearchPane = BI.inherit(BI.Widget, {
  props: function props() {
    return {
      baseCls: "bi-multilayer-select-tree-popup",
      tipText: BI.i18nText("BI-No_Selected_Item"),
      isDefaultInit: false,
      itemsCreator: BI.emptyFn,
      items: [],
      value: ""
    };
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.tree = BI.createWidget({
      type: "bi.multilayer_select_level_tree",
      isDefaultInit: o.isDefaultInit,
      items: o.items,
      itemsCreator: o.itemsCreator === BI.emptyFn ? BI.emptyFn : function (op, callback) {
        o.itemsCreator(op, function (res) {
          callback(res);
          self.setKeyword(o.keywordGetter());
        });
      },
      keywordGetter: o.keywordGetter,
      value: o.value,
      scrollable: null,
      listeners: [{
        eventName: BI.Controller.EVENT_CHANGE,
        action: function action() {
          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        }
      }, {
        eventName: BI.MultiLayerSelectLevelTree.EVENT_CHANGE,
        action: function action() {
          self.fireEvent(BI.MultiLayerSelectTreeInsertSearchPane.EVENT_CHANGE);
        }
      }]
    });
    return {
      type: "bi.vertical",
      scrolly: false,
      scrollable: true,
      vgap: 5,
      items: [{
        type: "bi.text_button",
        invisible: true,
        text: BI.i18nText("BI-Basic_Click_To_Add_Text", ""),
        height: 24,
        cls: "bi-high-light",
        hgap: 5,
        ref: function ref(_ref) {
          self.addNotMatchTip = _ref;
        },
        handler: function handler() {
          self.fireEvent(BI.MultiLayerSelectTreeInsertSearchPane.EVENT_ADD_ITEM, o.keywordGetter());
        }
      }, this.tree]
    };
  },
  setKeyword: function setKeyword(keyword) {
    var showTip = BI.isEmptyArray(this.tree.getAllLeaves());
    this.addNotMatchTip.setVisible(showTip);
    showTip && this.addNotMatchTip.setText(BI.i18nText("BI-Basic_Click_To_Add_Text", keyword));
  },
  getValue: function getValue() {
    return this.tree.getValue();
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.tree.setValue(v);
  },
  populate: function populate(items) {
    this.tree.populate(items);
  }
});
BI.MultiLayerSelectTreeInsertSearchPane.EVENT_ADD_ITEM = "EVENT_ADD_ITEM";
BI.MultiLayerSelectTreeInsertSearchPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multilayer_select_tree_insert_search_pane", BI.MultiLayerSelectTreeInsertSearchPane);

/***/ }),
/* 793 */
/***/ (function(module, exports) {

/**
 * guy
 * 二级树
 * @class BI.MultiLayerSelectLevelTree
 * @extends BI.Pane
 */
BI.MultiLayerSelectLevelTree = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerSelectLevelTree.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multilayer-select-level-tree",
      isDefaultInit: false,
      items: [],
      itemsCreator: BI.emptyFn,
      keywordGetter: BI.emptyFn,
      value: "",
      scrollable: true
    });
  },
  _init: function _init() {
    var o = this.options;

    BI.MultiLayerSelectLevelTree.superclass._init.apply(this, arguments);

    this.storeValue = o.value;
    this.initTree(this.options.items);
    this.check();
  },
  _formatItems: function _formatItems(nodes, layer, pNode) {
    var self = this,
        o = this.options;
    var keyword = o.keywordGetter();
    BI.each(nodes, function (i, node) {
      var extend = {
        isFirstNode: i === 0,
        isLastNode: i === nodes.length - 1,
        height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
      };
      node.layer = layer;

      if (!BI.isKey(node.id)) {
        node.id = BI.UUID();
      }

      node.keyword = node.keyword || keyword;
      extend.pNode = pNode;

      if (node.isParent === true || node.parent === true || BI.isNotEmptyArray(node.children)) {
        extend.type = "bi.tree_node";
        extend.selectable = true;
        BI.defaults(node, extend);

        self._formatItems(node.children, layer + 1, node);
      } else {
        extend.type = "bi.tree_item";
        BI.defaults(node, extend);
      }
    });
    return nodes;
  },
  _assertId: function _assertId(sNodes) {
    BI.each(sNodes, function (i, node) {
      node.id = node.id || BI.UUID();
    });
  },
  // 构造树结构，
  initTree: function initTree(nodes) {
    var self = this,
        o = this.options;
    var _hasNext = false;
    this.empty();

    this._assertId(nodes);

    this.tree = BI.createWidget({
      type: "bi.custom_tree",
      cls: "tree-view display-table",
      expander: {
        // type: "bi.select_tree_expander",
        type: "bi.tree_expander",
        selectable: true,
        isDefaultInit: o.isDefaultInit,
        el: {},
        popup: {
          type: "bi.custom_tree"
        }
      },
      items: this._formatItems(BI.Tree.transformToTreeFormat(nodes), 0),
      itemsCreator: function itemsCreator(op, callback) {
        op.times === 1 && !op.node && BI.nextTick(function () {
          self.loading();
        });
        o.itemsCreator(op, function (ob) {
          _hasNext = ob.hasNext;
          op.times === 1 && !op.node && self._populate(ob.items);
          callback(self._formatItems(BI.Tree.transformToTreeFormat(ob.items), op.node ? op.node.layer + 1 : 0, op.node));
          self.setValue(self.storeValue);
          op.times === 1 && !op.node && BI.nextTick(function () {
            self.loaded();
          });
        });
      },
      value: o.value,
      el: {
        type: "bi.loader",
        isDefaultInit: o.itemsCreator !== BI.emptyFn,
        el: {
          type: "bi.button_tree",
          chooseType: o.chooseType === BI.Selection.None ? BI.Selection.None : BI.Selection.Default,
          // 不使用buttontree内部getValue逻辑
          behaviors: o.behaviors,
          layouts: [{
            type: "bi.vertical"
          }]
        },
        hasNext: function hasNext() {
          return _hasNext;
        }
      }
    });
    this.tree.on(BI.Controller.EVENT_CHANGE, function (type, value) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.setValue(value);
        self.fireEvent(BI.MultiLayerSelectLevelTree.EVENT_CHANGE, arguments);
      }
    });
    BI.createWidget({
      type: "bi.adaptive",
      element: this,
      scrollable: o.scrollable,
      items: [this.tree]
    });
  },
  _populate: function _populate() {
    BI.MultiLayerSelectLevelTree.superclass.populate.apply(this, arguments);
  },
  populate: function populate(nodes) {
    this._populate(nodes);

    BI.isNull(nodes) ? this.tree.populate() : this.tree.populate(this._formatItems(BI.Tree.transformToTreeFormat(nodes), 0));
  },
  setValue: function setValue(v) {
    // getValue依赖于storeValue, 那么不选的时候就不要更新storeValue了
    if (this.options.chooseType === BI.Selection.None) {} else {
      this.storeValue = v;
      this.tree.setValue(v);
    }
  },
  getValue: function getValue() {
    return BI.isArray(this.storeValue) ? this.storeValue : BI.isNull(this.storeValue) ? [] : [this.storeValue];
  },
  getAllLeaves: function getAllLeaves() {
    return this.tree.getAllLeaves();
  },
  getNodeById: function getNodeById(id) {
    return this.tree.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(id) {
    return this.tree.getNodeByValue(id);
  }
});
BI.MultiLayerSelectLevelTree.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multilayer_select_level_tree", BI.MultiLayerSelectLevelTree);

/***/ }),
/* 794 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/1/26.
 *
 * @class BI.MultiLayerSelectTreePopup
 * @extends BI.Pane
 */
BI.MultiLayerSelectTreePopup = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerSelectTreePopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multilayer-select-tree-popup",
      tipText: BI.i18nText("BI-No_Selected_Item"),
      isDefaultInit: false,
      itemsCreator: BI.emptyFn,
      items: [],
      value: "",
      onLoaded: BI.emptyFn,
      minHeight: 240
    });
  },
  _init: function _init() {
    BI.MultiLayerSelectTreePopup.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.tree = BI.createWidget({
      type: "bi.multilayer_select_level_tree",
      isDefaultInit: o.isDefaultInit,
      items: o.items,
      itemsCreator: o.itemsCreator,
      keywordGetter: o.keywordGetter,
      value: o.value,
      scrollable: null,
      onLoaded: function onLoaded() {
        self.tree.check();
        o.onLoaded();
      }
    });
    BI.createWidget({
      type: "bi.vertical",
      scrolly: false,
      scrollable: true,
      element: this,
      vgap: 5,
      items: [this.tree]
    });
    this.tree.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.tree.on(BI.MultiLayerSelectLevelTree.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiLayerSelectTreePopup.EVENT_CHANGE);
    });
    this.tree.css("min-height", BI.pixFormat(o.minHeight - 10));
  },
  getValue: function getValue() {
    return this.tree.getValue();
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.tree.setValue(v);
  },
  populate: function populate(items) {
    this.tree.populate(items);
  }
});
BI.MultiLayerSelectTreePopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multilayer_select_tree_popup", BI.MultiLayerSelectTreePopup);

/***/ }),
/* 795 */
/***/ (function(module, exports) {

/**
 * Created by Windy on 2018/2/2.
 */
BI.MultiLayerSelectTreeTrigger = BI.inherit(BI.Trigger, {
  props: function props() {
    return {
      extraCls: "bi-multi-layer-select-tree-trigger",
      height: 24,
      itemsCreator: BI.emptyFn,
      watermark: BI.i18nText("BI-Basic_Search"),
      allowSearchValue: false,
      title: BI.bind(this._getShowText, this)
    };
  },
  render: function render() {
    var self = this,
        o = this.options;

    if (o.itemsCreator === BI.emptyFn) {
      this._initData();
    }

    return {
      type: "bi.horizontal_fill",
      items: [{
        el: {
          type: "bi.searcher",
          ref: function ref() {
            self.searcher = this;
          },
          masker: BI.isNotNull(o.container) ? {
            offset: {},
            container: o.container
          } : {
            offset: {}
          },
          isAutoSearch: false,
          el: {
            type: "bi.default_text_editor",
            ref: function ref() {
              self.editor = this;
            },
            defaultText: o.defaultText,
            text: BI.isKey(o.value) ? this._digest(o.value) : o.text,
            value: o.value,
            height: o.height,
            tipText: "",
            watermark: o.watermark,
            listeners: [{
              eventName: BI.StateEditor.EVENT_FOCUS,
              action: function action() {
                self.fireEvent(BI.MultiLayerSelectTreeTrigger.EVENT_FOCUS);
              }
            }, {
              eventName: BI.StateEditor.EVENT_BLUR,
              action: function action() {
                self.fireEvent(BI.MultiLayerSelectTreeTrigger.EVENT_BLUR);
              }
            }, {
              eventName: BI.StateEditor.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.MultiLayerSelectTreeTrigger.EVENT_SEARCHING);
              }
            }]
          },
          popup: {
            type: o.allowInsertValue ? "bi.multilayer_select_tree_insert_search_pane" : "bi.multilayer_select_tree_popup",
            itemsCreator: o.itemsCreator === BI.emptyFn ? BI.emptyFn : function (op, callback) {
              op.keyword = self.editor.getValue();
              o.itemsCreator(op, callback);
            },
            keywordGetter: function keywordGetter() {
              return self.editor.getValue();
            },
            cls: "bi-card",
            listeners: [{
              eventName: BI.MultiLayerSelectTreeInsertSearchPane.EVENT_ADD_ITEM,
              action: function action() {
                self.options.text = self.getSearcher().getKeyword();
                self.fireEvent(BI.MultiLayerSelectTreeTrigger.EVENT_ADD_ITEM);
              }
            }],
            ref: function ref(_ref) {
              self.popup = _ref;
            }
          },
          onSearch: function onSearch(obj, callback) {
            var keyword = obj.keyword;

            if (o.itemsCreator === BI.emptyFn) {
              callback(self._getSearchItems(keyword));
              o.allowInsertValue && self.popup.setKeyword(keyword);
            } else {
              callback();
            }
          },
          listeners: [{
            eventName: BI.Searcher.EVENT_CHANGE,
            action: function action() {
              self.fireEvent(BI.MultiLayerSelectTreeTrigger.EVENT_CHANGE);
            }
          }]
        },
        width: "fill",
        rgap: 24
      }]
    };
  },
  _initData: function _initData() {
    var o = this.options;
    this.tree = new BI.Tree();
    this.nodes = BI.Tree.treeFormat(BI.deepClone(o.items));
    this.tree.initTree(this.nodes);
  },
  _getSearchItems: function _getSearchItems(keyword) {
    var self = this,
        o = this.options; // 把数组搜索换成用BI.tree搜索节点, 搜到了就不再往下搜索

    var items = [];
    this.tree.traverse(function (node) {
      var find = BI.Func.getSearchResult(self.tree.isRoot(node) ? [] : BI.concat([node.text], o.allowSearchValue ? [node.value] : []), keyword);

      if (find.find.length > 0 || find.match.length > 0) {
        items.push(node);
        return true;
      }
    });
    return this._fillTreeStructure4Search(items, "id");
  },
  _createJson: function _createJson(node, open) {
    return {
      id: node.id,
      pId: node.pId,
      text: node.text,
      value: node.value,
      isParent: BI.isNotEmptyArray(node.children),
      open: open
    };
  },
  _getChildren: function _getChildren(node) {
    var self = this;
    node.children = node.children || [];
    var nodes = [];
    BI.each(node.children, function (idx, child) {
      var children = self._getChildren(child);

      nodes = nodes.concat(children);
    });
    return node.children.concat(nodes);
  },
  // 将搜索到的节点进行补充，构造成一棵完整的树
  _fillTreeStructure4Search: function _fillTreeStructure4Search(leaves) {
    var self = this;
    var result = [];
    var queue = [];
    BI.each(leaves, function (idx, node) {
      queue.push({
        pId: node.pId
      });
      result.push(node);
      result = result.concat(self._getChildren(node));
    });
    queue.reverse();

    while (BI.isNotEmptyArray(queue)) {
      var node = queue.pop();
      var pNode = this.tree.search(this.tree.getRoot(), node.pId, "id");

      if (pNode != null) {
        pNode.open = true;
        queue.push({
          pId: pNode.pId
        });
        result.push(pNode);
      }
    }

    return BI.uniqBy(BI.map(result, function (idx, node) {
      return self._createJson(node, node.open);
    }), "id");
  },
  _digest: function _digest(v) {
    var _o$text;

    var o = this.options;

    if (BI.isFunction(o.valueFormatter)) {
      return o.valueFormatter(v);
    }

    var result = BI.find(o.items, function (i, item) {
      return item.value === v;
    });
    return BI.isNotNull(result) ? result.text : (_o$text = o.text) !== null && _o$text !== void 0 ? _o$text : v;
  },
  _getShowText: function _getShowText() {
    return this.editor.getText();
  },
  stopEditing: function stopEditing() {
    this.searcher.stopSearch();
  },
  getSearcher: function getSearcher() {
    return this.searcher;
  },
  populate: function populate(items) {
    this.options.items = items;

    this._initData(items);
  },
  setValue: function setValue(v) {
    this.editor.setState(this._digest(v[0]));
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  },
  focus: function focus() {
    this.searcher.focus();
  },
  blur: function blur() {
    this.searcher.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.searcher.setWaterMark(v);
  }
});
BI.MultiLayerSelectTreeTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiLayerSelectTreeTrigger.EVENT_BLUR = "EVENT_BLUR";
BI.MultiLayerSelectTreeTrigger.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiLayerSelectTreeTrigger.EVENT_STOP = "EVENT_STOP";
BI.MultiLayerSelectTreeTrigger.EVENT_START = "EVENT_START";
BI.MultiLayerSelectTreeTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiLayerSelectTreeTrigger.EVENT_ADD_ITEM = "EVENT_ADD_ITEM";
BI.shortcut("bi.multilayer_select_tree_trigger", BI.MultiLayerSelectTreeTrigger);

/***/ }),
/* 796 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 *
 * Created by GUY on 2016/1/27.
 * @class BI.MultiLayerSelectTreeFirstPlusGroupNode
 * @extends BI.NodeButton
 */
BI.MultiLayerSelectTreeFirstPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiLayerSelectTreeFirstPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-multilayer-select-tree-first-plus-group-node bi-list-item-active",
      layer: 0,
      // 第几层级
      id: "",
      pId: "",
      readonly: true,
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSelectTreeFirstPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.node = BI.createWidget({
      type: "bi.select_tree_first_plus_group_node",
      cls: "bi-list-item-none",
      stopPropagation: true,
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      keyword: o.keyword,
      open: o.open,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py
    });
    this.node.on(BI.Controller.EVENT_CHANGE, function (type) {
      self.setSelected(self.isSelected());
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    var items = []; // BI.count(0, o.layer, function (index) {
    //     items.push({
    //         type: "bi.layout",
    //         cls: BI.contains(needBlankLayers, index) ? "" : "base-line-conn-background",
    //         width: 12,
    //         height: o.height
    //     });
    // });

    items.push({
      el: this.node,
      lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2
    });
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2),
      items: items
    });
  },
  isOnce: function isOnce() {
    return true;
  },
  doRedMark: function doRedMark() {
    this.node.doRedMark.apply(this.node, arguments);
  },
  unRedMark: function unRedMark() {
    this.node.unRedMark.apply(this.node, arguments);
  },
  isSelected: function isSelected() {
    return this.node.isSelected();
  },
  setSelected: function setSelected(b) {
    BI.MultiLayerSelectTreeFirstPlusGroupNode.superclass.setSelected.apply(this, arguments);
    this.node.setSelected(b);
  },
  doClick: function doClick() {
    BI.NodeButton.superclass.doClick.apply(this, arguments);
    this.node.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.MultiLayerSelectTreeFirstPlusGroupNode.superclass.setOpened.apply(this, arguments);
    this.node.setOpened(v);
  }
});
BI.shortcut("bi.multilayer_select_tree_first_plus_group_node", BI.MultiLayerSelectTreeFirstPlusGroupNode);

/***/ }),
/* 797 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 *
 * Created by GUY on 2016/1/27.
 * @class BI.MultiLayerSelectTreeLastPlusGroupNode
 * @extends BI.NodeButton
 */
BI.MultiLayerSelectTreeLastPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiLayerSelectTreeLastPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-multilayer-select-tree-last-plus-group-node bi-list-item-active",
      layer: 0,
      // 第几层级
      id: "",
      pId: "",
      readonly: true,
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSelectTreeLastPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.node = BI.createWidget({
      type: "bi.select_tree_last_plus_group_node",
      cls: "bi-list-item-none",
      stopPropagation: true,
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      keyword: o.keyword,
      open: o.open,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py
    });
    this.node.on(BI.Controller.EVENT_CHANGE, function (type) {
      self.setSelected(self.isSelected());
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    var items = [];
    items.push({
      el: this.node,
      lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2
    });
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2),
      items: items
    });
  },
  doRedMark: function doRedMark() {
    this.node.doRedMark.apply(this.node, arguments);
  },
  unRedMark: function unRedMark() {
    this.node.unRedMark.apply(this.node, arguments);
  },
  isSelected: function isSelected() {
    return this.node.isSelected();
  },
  setSelected: function setSelected(b) {
    BI.MultiLayerSelectTreeLastPlusGroupNode.superclass.setSelected.apply(this, arguments);
    this.node.setSelected(b);
  },
  doClick: function doClick() {
    BI.MultiLayerSelectTreeLastPlusGroupNode.superclass.doClick.apply(this, arguments);
    this.node.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.MultiLayerSelectTreeLastPlusGroupNode.superclass.setOpened.apply(this, arguments);
    this.node.setOpened(v);
  }
});
BI.shortcut("bi.multilayer_select_tree_last_plus_group_node", BI.MultiLayerSelectTreeLastPlusGroupNode);

/***/ }),
/* 798 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 *
 * Created by GUY on 2016/1/27.
 * @class BI.MultiLayerSelectTreeMidPlusGroupNode
 * @extends BI.NodeButton
 */
BI.MultiLayerSelectTreeMidPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiLayerSelectTreeMidPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-multilayer-select-tree-mid-plus-group-node bi-list-item-active",
      layer: 0,
      // 第几层级
      id: "",
      pId: "",
      readonly: true,
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSelectTreeMidPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.node = BI.createWidget({
      type: "bi.select_tree_mid_plus_group_node",
      cls: "bi-list-item-none",
      stopPropagation: true,
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      keyword: o.keyword,
      open: o.open,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py
    });
    this.node.on(BI.Controller.EVENT_CHANGE, function (type) {
      self.setSelected(self.isSelected());
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    var items = [];
    items.push({
      el: this.node,
      lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2
    });
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2),
      items: items
    });
  },
  doRedMark: function doRedMark() {
    this.node.doRedMark.apply(this.node, arguments);
  },
  unRedMark: function unRedMark() {
    this.node.unRedMark.apply(this.node, arguments);
  },
  isSelected: function isSelected() {
    return this.node.isSelected();
  },
  setSelected: function setSelected(b) {
    BI.MultiLayerSelectTreeMidPlusGroupNode.superclass.setSelected.apply(this, arguments);
    this.node.setSelected(b);
  },
  doClick: function doClick() {
    BI.MultiLayerSelectTreeMidPlusGroupNode.superclass.doClick.apply(this, arguments);
    this.node.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.MultiLayerSelectTreeMidPlusGroupNode.superclass.setOpened.apply(this, arguments);
    this.node.setOpened(v);
  }
});
BI.shortcut("bi.multilayer_select_tree_mid_plus_group_node", BI.MultiLayerSelectTreeMidPlusGroupNode);

/***/ }),
/* 799 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 *
 * Created by GUY on 2016/1/27.
 * @class BI.MultiLayerSelectTreePlusGroupNode
 * @extends BI.NodeButton
 */
BI.MultiLayerSelectTreePlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiLayerSelectTreePlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-multilayer-select-tree-first-plus-group-node bi-list-item-active",
      layer: 0,
      // 第几层级
      id: "",
      pId: "",
      readonly: true,
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSelectTreePlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.node = BI.createWidget({
      type: "bi.select_tree_plus_group_node",
      cls: "bi-list-item-none",
      stopPropagation: true,
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      keyword: o.keyword,
      open: o.open,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py
    });
    this.node.on(BI.Controller.EVENT_CHANGE, function (type) {
      self.setSelected(self.isSelected());
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    var items = [];
    items.push({
      el: this.node,
      lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2
    });
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2),
      items: items
    });
  },
  isOnce: function isOnce() {
    return true;
  },
  doRedMark: function doRedMark() {
    this.node.doRedMark.apply(this.node, arguments);
  },
  unRedMark: function unRedMark() {
    this.node.unRedMark.apply(this.node, arguments);
  },
  isSelected: function isSelected() {
    return this.node.isSelected();
  },
  setSelected: function setSelected(b) {
    BI.MultiLayerSelectTreePlusGroupNode.superclass.setSelected.apply(this, arguments);
    this.node.setSelected(b);
  },
  doClick: function doClick() {
    BI.NodeButton.superclass.doClick.apply(this, arguments);
    this.node.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.MultiLayerSelectTreePlusGroupNode.superclass.setOpened.apply(this, arguments);
    this.node.setOpened(v);
  }
});
BI.shortcut("bi.multilayer_select_tree_plus_group_node", BI.MultiLayerSelectTreePlusGroupNode);

/***/ }),
/* 800 */
/***/ (function(module, exports) {

/**
 * 多层级下拉单选树
 * Created by GUY on 2016/1/26.
 *
 * @class BI.MultiLayerSingleTreeCombo
 * @extends BI.Widget
 */
BI.MultiLayerSingleTreeCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerSingleTreeCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multilayer-single-tree-combo",
      isDefaultInit: false,
      height: 24,
      text: "",
      defaultText: "",
      itemsCreator: BI.emptyFn,
      items: [],
      allowEdit: false,
      allowSearchValue: false,
      allowInsertValue: false,
      isNeedAdjustWidth: true
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    var cls = (o.simple ? "bi-border-bottom bi-focus-shadow " : "bi-border bi-border-radius bi-focus-shadow ") + (BI.isKey(o.status) ? "status-" + o.status : "");

    var baseConfig = this._getBaseConfig();

    if (o.allowEdit) {
      return {
        type: "bi.absolute",
        width: BI.toPix(o.width, 2),
        height: BI.toPix(o.height, 2),
        cls: cls,
        items: [{
          el: BI.extend(baseConfig, this._getSearchConfig()),
          top: 0,
          bottom: 0,
          right: 0,
          left: 0
        }, {
          el: self._getTriggerIconButton(),
          top: 0,
          bottom: 0,
          right: 0
        }]
      };
    }

    return BI.extend(baseConfig, {
      width: BI.toPix(o.width, 2),
      height: BI.toPix(o.height, 2),
      el: {
        type: "bi.single_tree_trigger",
        ref: function ref(_ref) {
          self.textTrigger = _ref;
        },
        text: o.text,
        defaultText: o.defaultText,
        height: BI.toPix(o.height, 2),
        items: o.items,
        value: o.value,
        tipType: o.tipType,
        warningTitle: o.warningTitle,
        valueFormatter: o.valueFormatter
      }
    }, {
      cls: cls
    });
  },
  _getBaseConfig: function _getBaseConfig() {
    var self = this,
        o = this.options;
    return {
      type: "bi.combo",
      container: o.container,
      destroyWhenHide: o.destroyWhenHide,
      adjustLength: 2,
      ref: function ref(_ref) {
        self.combo = _ref;
      },
      popup: {
        el: {
          type: "bi.multilayer_single_tree_popup",
          isDefaultInit: o.isDefaultInit,
          itemsCreator: o.itemsCreator,
          items: o.items,
          ref: function ref(_ref) {
            self.trigger && self.trigger.getSearcher().setAdapter(_ref);
          },
          listeners: [{
            eventName: BI.MultiLayerSingleTreePopup.EVENT_CHANGE,
            action: function action() {
              self.setValue(this.getValue());
              self.combo.hideView();
              self.fireEvent(BI.MultiLayerSingleTreeCombo.EVENT_CHANGE);
            }
          }],
          onLoaded: function onLoaded() {
            BI.nextTick(function () {
              self.combo.adjustWidth();
              self.combo.adjustHeight();
            });
          }
        },
        value: o.value,
        maxHeight: 400,
        maxWidth: o.isNeedAdjustWidth ? "auto" : 500,
        minHeight: 240
      },
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      listeners: [{
        eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.MultiLayerSingleTreeCombo.EVENT_BEFORE_POPUPVIEW);
        }
      }]
    };
  },
  _getSearchConfig: function _getSearchConfig() {
    var self = this,
        o = this.options;
    return {
      el: {
        type: "bi.multilayer_single_tree_trigger",
        container: o.container,
        allowInsertValue: o.allowInsertValue,
        allowSearchValue: o.allowSearchValue,
        cls: "multilayer-single-tree-trigger",
        ref: function ref(_ref) {
          self.trigger = _ref;
        },
        watermark: o.watermark,
        items: o.items,
        itemsCreator: o.itemsCreator,
        valueFormatter: o.valueFormatter,
        height: BI.toPix(o.height, 2),
        text: o.text,
        defaultText: o.defaultText,
        value: o.value,
        tipType: o.tipType,
        warningTitle: o.warningTitle,
        title: o.title,
        listeners: [{
          eventName: BI.MultiLayerSingleTreeTrigger.EVENT_CHANGE,
          action: function action() {
            self.setValue(this.getValue());
            self.combo.hideView();
            self.fireEvent(BI.MultiLayerSingleTreeCombo.EVENT_CHANGE);
          }
        }, {
          eventName: BI.MultiLayerSingleTreeTrigger.EVENT_FOCUS,
          action: function action() {
            self.fireEvent(BI.MultiLayerSingleTreeCombo.EVENT_FOCUS);
          }
        }, {
          eventName: BI.MultiLayerSingleTreeTrigger.EVENT_BLUR,
          action: function action() {
            self.fireEvent(BI.MultiLayerSingleTreeCombo.EVENT_BLUR);
          }
        }, {
          eventName: BI.MultiLayerSingleTreeTrigger.EVENT_SEARCHING,
          action: function action() {
            self.fireEvent(BI.MultiLayerSingleTreeCombo.EVENT_SEARCHING);
          }
        }, {
          eventName: BI.MultiLayerSingleTreeTrigger.EVENT_STOP,
          action: function action() {
            self.fireEvent(BI.MultiLayerSingleTreeCombo.EVENT_STOP);
          }
        }, {
          eventName: BI.MultiLayerSingleTreeTrigger.EVENT_ADD_ITEM,
          action: function action() {
            var value = self.trigger.getSearcher().getKeyword();
            self.combo.setValue([value]);
            self.combo.hideView();
            self.fireEvent(BI.MultiLayerSingleTreeCombo.EVENT_CHANGE);
          }
        }]
      },
      toggle: !o.allowEdit,
      hideChecker: function hideChecker(e) {
        var _self$triggerBtn;

        // 新增传配置container后对应hideChecker的修改
        // IE11下，popover(position: fixed)下放置下拉控件(position: fixed), 滚动的时候会异常卡顿
        // 通过container参数将popup放置于popover之外解决此问题, 其他下拉控件由于元素少或者有分页，所以
        // 卡顿不明显, 先在此做尝试, 并在FineUI特殊处理待解决文档中标记跟踪
        return o.container && self.trigger.getSearcher().isSearching() && self.trigger.getSearcher().getView().element.find(e.target).length > 0 ? false : ((_self$triggerBtn = self.triggerBtn) === null || _self$triggerBtn === void 0 ? void 0 : _self$triggerBtn.element.find(e.target).length) === 0;
      },
      listeners: [{
        eventName: BI.Combo.EVENT_AFTER_HIDEVIEW,
        action: function action() {
          self.trigger.stopEditing();
        }
      }, {
        eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.MultiLayerSingleTreeCombo.EVENT_BEFORE_POPUPVIEW);
        }
      }]
    };
  },
  _getTriggerIconButton: function _getTriggerIconButton() {
    var self = this,
        o = this.options;
    return {
      type: "bi.trigger_icon_button",
      cls: "bi-trigger trigger-icon-button",
      ref: function ref(_ref) {
        self.triggerBtn = _ref;
      },
      width: BI.toPix(o.height, 2),
      height: BI.toPix(o.height, 2),
      listeners: [{
        eventName: BI.TriggerIconButton.EVENT_CHANGE,
        action: function action() {
          if (self.combo.isViewVisible()) {
            self.combo.hideView();
          } else {
            self.combo.showView();
          }
        }
      }]
    };
  },
  getSearcher: function getSearcher() {
    return this.trigger ? this.trigger.getSearcher() : this.textTrigger.getTextor();
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.combo.setValue(v);
  },
  getValue: function getValue() {
    return this.combo.getValue();
  },
  setStatus: function setStatus(status) {
    if (BI.isKey(this.options.status)) {
      this.element.removeClass("status-" + this.options.status);
    }

    this.element.addClass("status-" + status);
    this.options.status = status;
  },
  setTipType: function setTipType(v) {
    this.trigger ? this.trigger.setTipType(v) : this.textTrigger.setTipType(v);
  },
  populate: function populate(items) {
    this.combo.populate(items);
  },
  focus: function focus() {
    this.trigger.focus();
  },
  blur: function blur() {
    this.trigger.blur();
  },
  showView: function showView() {
    this.combo.showView();
  },
  setWaterMark: function setWaterMark(v) {
    this.trigger.setWaterMark(v);
  }
});
BI.MultiLayerSingleTreeCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiLayerSingleTreeCombo.EVENT_BLUR = "EVENT_BLUR";
BI.MultiLayerSingleTreeCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiLayerSingleTreeCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiLayerSingleTreeCombo.EVENT_STOP = "EVENT_STOP";
BI.MultiLayerSingleTreeCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.multilayer_single_tree_combo", BI.MultiLayerSingleTreeCombo);

/***/ }),
/* 801 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/1/26.
 *
 * @class BI.MultiLayerSingleTreeInsertSearchPane
 * @extends BI.Pane
 */
BI.MultiLayerSingleTreeInsertSearchPane = BI.inherit(BI.Widget, {
  props: function props() {
    return {
      baseCls: "bi-multilayer-single-tree-popup",
      tipText: BI.i18nText("BI-No_Selected_Item"),
      isDefaultInit: false,
      itemsCreator: BI.emptyFn,
      items: [],
      value: ""
    };
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.tree = BI.createWidget({
      type: "bi.multilayer_single_level_tree",
      isDefaultInit: o.isDefaultInit,
      items: o.items,
      itemsCreator: o.itemsCreator === BI.emptyFn ? BI.emptyFn : function (op, callback) {
        o.itemsCreator(op, function (res) {
          callback(res);
          self.setKeyword(o.keywordGetter());
        });
      },
      keywordGetter: o.keywordGetter,
      value: o.value,
      scrollable: null,
      listeners: [{
        eventName: BI.Controller.EVENT_CHANGE,
        action: function action() {
          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        }
      }, {
        eventName: BI.MultiLayerSelectLevelTree.EVENT_CHANGE,
        action: function action() {
          self.fireEvent(BI.MultiLayerSingleTreeInsertSearchPane.EVENT_CHANGE);
        }
      }]
    });
    return {
      type: "bi.vertical",
      scrolly: false,
      scrollable: true,
      vgap: 5,
      items: [{
        type: "bi.text_button",
        invisible: true,
        text: BI.i18nText("BI-Basic_Click_To_Add_Text", ""),
        height: 24,
        cls: "bi-high-light",
        hgap: 5,
        ref: function ref(_ref) {
          self.addNotMatchTip = _ref;
        },
        handler: function handler() {
          self.fireEvent(BI.MultiLayerSingleTreeInsertSearchPane.EVENT_ADD_ITEM, o.keywordGetter());
        }
      }, this.tree]
    };
  },
  setKeyword: function setKeyword(keyword) {
    var showTip = BI.isEmptyArray(this.tree.getAllLeaves());
    this.addNotMatchTip.setVisible(showTip);
    showTip && this.addNotMatchTip.setText(BI.i18nText("BI-Basic_Click_To_Add_Text", keyword));
  },
  getValue: function getValue() {
    return this.tree.getValue();
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.tree.setValue(v);
  },
  populate: function populate(items) {
    this.tree.populate(items);
  }
});
BI.MultiLayerSingleTreeInsertSearchPane.EVENT_ADD_ITEM = "EVENT_ADD_ITEM";
BI.MultiLayerSingleTreeInsertSearchPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multilayer_single_tree_insert_search_pane", BI.MultiLayerSingleTreeInsertSearchPane);

/***/ }),
/* 802 */
/***/ (function(module, exports) {

/**
 * guy
 * 二级树
 * @class BI.MultiLayerSingleLevelTree
 * @extends BI.Single
 */
BI.MultiLayerSingleLevelTree = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerSingleLevelTree.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multilayer-single-level-tree",
      isDefaultInit: false,
      items: [],
      itemsCreator: BI.emptyFn,
      keywordGetter: BI.emptyFn,
      chooseType: BI.Selection.Single,
      scrollable: true
    });
  },
  _init: function _init() {
    var o = this.options;

    BI.MultiLayerSingleLevelTree.superclass._init.apply(this, arguments);

    this.storeValue = o.value;
    this.initTree(this.options.items);
    this.check();
  },
  _formatItems: function _formatItems(nodes, layer, pNode) {
    var self = this,
        o = this.options;
    var keyword = o.keywordGetter();
    BI.each(nodes, function (i, node) {
      var extend = {
        isFirstNode: i === 0,
        isLastNode: i === nodes.length - 1,
        height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
      };
      node.layer = layer;

      if (!BI.isKey(node.id)) {
        node.id = BI.UUID();
      }

      node.keyword = node.keyword || keyword;
      extend.pNode = pNode;

      if (node.isParent === true || node.parent === true || BI.isNotEmptyArray(node.children)) {
        extend.type = "bi.tree_node";
        extend.selectable = false;
        BI.defaults(node, extend);

        self._formatItems(node.children, layer + 1, node);
      } else {
        extend.type = "bi.tree_item";
        BI.defaults(node, extend);
      }
    });
    return nodes;
  },
  _assertId: function _assertId(sNodes) {
    BI.each(sNodes, function (i, node) {
      node.id = node.id || BI.UUID();
    });
  },
  // 构造树结构，
  initTree: function initTree(nodes) {
    var self = this,
        o = this.options;
    var _hasNext = false;
    this.empty();

    this._assertId(nodes);

    this.tree = BI.createWidget({
      type: "bi.custom_tree",
      cls: "tree-view display-table",
      expander: {
        type: "bi.tree_expander",
        isDefaultInit: o.isDefaultInit,
        el: {},
        popup: {
          type: "bi.custom_tree"
        }
      },
      items: this._formatItems(BI.Tree.transformToTreeFormat(nodes), 0),
      value: o.value,
      itemsCreator: function itemsCreator(op, callback) {
        op.times === 1 && !op.node && BI.nextTick(function () {
          self.loading();
        });
        o.itemsCreator(op, function (ob) {
          _hasNext = ob.hasNext;
          op.times === 1 && !op.node && self._populate(ob.items);
          callback(self._formatItems(BI.Tree.transformToTreeFormat(ob.items), op.node ? op.node.layer + 1 : 0, op.node));
          self.setValue(self.storeValue);
          op.times === 1 && !op.node && BI.nextTick(function () {
            self.loaded();
          });
        });
      },
      el: {
        type: "bi.loader",
        isDefaultInit: o.itemsCreator !== BI.emptyFn,
        el: {
          type: "bi.button_tree",
          chooseType: o.chooseType === BI.Selection.None ? BI.Selection.None : BI.Selection.Default,
          // 不使用buttontree内部getValue逻辑
          behaviors: o.behaviors,
          layouts: [{
            type: "bi.vertical"
          }]
        },
        hasNext: function hasNext() {
          return _hasNext;
        }
      }
    });
    this.tree.on(BI.Controller.EVENT_CHANGE, function (type, v) {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.setValue(v);
        self.fireEvent(BI.MultiLayerSingleLevelTree.EVENT_CHANGE, v);
      }
    });
    BI.createWidget({
      type: "bi.adaptive",
      element: this,
      scrollable: o.scrollable,
      items: [this.tree]
    });
  },
  _populate: function _populate() {
    BI.MultiLayerSelectLevelTree.superclass.populate.apply(this, arguments);
  },
  populate: function populate(nodes) {
    this._populate(nodes);

    BI.isNull(nodes) ? this.tree.populate() : this.tree.populate(this._formatItems(BI.Tree.transformToTreeFormat(nodes), 0));
  },
  setValue: function setValue(v) {
    // getValue依赖于storeValue, 那么不选的时候就不要更新storeValue了
    if (this.options.chooseType === BI.Selection.None) {} else {
      this.storeValue = v;
      this.tree.setValue(v);
    }
  },
  getValue: function getValue() {
    return BI.isArray(this.storeValue) ? this.storeValue : BI.isNull(this.storeValue) ? [] : [this.storeValue];
  },
  getAllLeaves: function getAllLeaves() {
    return this.tree.getAllLeaves();
  },
  getNodeById: function getNodeById(id) {
    return this.tree.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(id) {
    return this.tree.getNodeByValue(id);
  }
});
BI.MultiLayerSingleLevelTree.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multilayer_single_level_tree", BI.MultiLayerSingleLevelTree);

/***/ }),
/* 803 */
/***/ (function(module, exports) {

/**
 * Created by GUY on 2016/1/26.
 *
 * @class BI.MultiLayerSingleTreePopup
 * @extends BI.Pane
 */
BI.MultiLayerSingleTreePopup = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerSingleTreePopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multilayer-singletree-popup",
      tipText: BI.i18nText("BI-No_Selected_Item"),
      isDefaultInit: false,
      itemsCreator: BI.emptyFn,
      items: [],
      onLoaded: BI.emptyFn,
      minHeight: 240
    });
  },
  _init: function _init() {
    BI.MultiLayerSingleTreePopup.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.tree = BI.createWidget({
      type: "bi.multilayer_single_level_tree",
      isDefaultInit: o.isDefaultInit,
      items: o.items,
      itemsCreator: o.itemsCreator,
      keywordGetter: o.keywordGetter,
      value: o.value,
      scrollable: null,
      onLoaded: function onLoaded() {
        self.tree.check();
        o.onLoaded();
      }
    });
    BI.createWidget({
      type: "bi.vertical",
      scrolly: false,
      scrollable: true,
      element: this,
      vgap: 5,
      items: [this.tree]
    });
    this.tree.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.tree.on(BI.MultiLayerSingleLevelTree.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiLayerSingleTreePopup.EVENT_CHANGE);
    });
    this.tree.css("min-height", BI.pixFormat(o.minHeight - 10));
  },
  getValue: function getValue() {
    return this.tree.getValue();
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.tree.setValue(v);
  },
  populate: function populate(items) {
    this.tree.populate(items);
  }
});
BI.MultiLayerSingleTreePopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multilayer_single_tree_popup", BI.MultiLayerSingleTreePopup);

/***/ }),
/* 804 */
/***/ (function(module, exports) {

/**
 * Created by Windy on 2018/2/2.
 */
BI.MultiLayerSingleTreeTrigger = BI.inherit(BI.Trigger, {
  props: function props() {
    return {
      extraCls: "bi-multi-layer-single-tree-trigger",
      height: 24,
      itemsCreator: BI.emptyFn,
      watermark: BI.i18nText("BI-Basic_Search"),
      allowSearchValue: false,
      title: BI.bind(this._getShowText, this)
    };
  },
  render: function render() {
    var self = this,
        o = this.options;

    if (o.itemsCreator === BI.emptyFn) {
      this._initData();
    }

    return {
      type: "bi.horizontal_fill",
      items: [{
        el: {
          type: "bi.searcher",
          ref: function ref() {
            self.searcher = this;
          },
          masker: BI.isNotNull(o.container) ? {
            offset: {},
            container: o.container
          } : {
            offset: {}
          },
          isAutoSearch: false,
          el: {
            type: "bi.default_text_editor",
            ref: function ref() {
              self.editor = this;
            },
            defaultText: o.defaultText,
            text: BI.isKey(o.value) ? this._digest(o.value) : o.text,
            value: o.value,
            height: o.height,
            tipText: "",
            watermark: o.watermark,
            listeners: [{
              eventName: BI.StateEditor.EVENT_FOCUS,
              action: function action() {
                self.fireEvent(BI.MultiLayerSingleTreeTrigger.EVENT_FOCUS);
              }
            }, {
              eventName: BI.StateEditor.EVENT_BLUR,
              action: function action() {
                self.fireEvent(BI.MultiLayerSingleTreeTrigger.EVENT_BLUR);
              }
            }, {
              eventName: BI.StateEditor.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.MultiLayerSingleTreeTrigger.EVENT_SEARCHING);
              }
            }]
          },
          popup: {
            type: o.allowInsertValue ? "bi.multilayer_single_tree_insert_search_pane" : "bi.multilayer_single_tree_popup",
            itemsCreator: o.itemsCreator === BI.emptyFn ? BI.emptyFn : function (op, callback) {
              op.keyword = self.editor.getValue();
              o.itemsCreator(op, callback);
            },
            keywordGetter: function keywordGetter() {
              return self.editor.getValue();
            },
            cls: "bi-card",
            listeners: [{
              eventName: BI.MultiLayerSingleTreeInsertSearchPane.EVENT_ADD_ITEM,
              action: function action() {
                self.options.text = self.getSearcher().getKeyword();
                self.fireEvent(BI.MultiLayerSingleTreeTrigger.EVENT_ADD_ITEM);
              }
            }],
            ref: function ref(_ref) {
              self.popup = _ref;
            }
          },
          onSearch: function onSearch(obj, callback) {
            var keyword = obj.keyword;

            if (o.itemsCreator === BI.emptyFn) {
              callback(self._getSearchItems(keyword));
              o.allowInsertValue && self.popup.setKeyword(keyword);
            } else {
              callback();
            }
          },
          listeners: [{
            eventName: BI.Searcher.EVENT_CHANGE,
            action: function action() {
              self.fireEvent(BI.MultiLayerSingleTreeTrigger.EVENT_CHANGE);
            }
          }]
        },
        width: "fill",
        rgap: 24
      }]
    };
  },
  _initData: function _initData() {
    var o = this.options;
    this.tree = new BI.Tree();
    this.nodes = BI.Tree.treeFormat(BI.deepClone(o.items));
    this.tree.initTree(this.nodes);
  },
  _getSearchItems: function _getSearchItems(keyword) {
    var self = this,
        o = this.options; // 把数组搜索换成用BI.tree搜索节点, 搜到了就不再往下搜索

    var items = [];
    this.tree.traverse(function (node) {
      var find = BI.Func.getSearchResult(self.tree.isRoot(node) ? [] : BI.concat([node.text], o.allowSearchValue ? [node.value] : []), keyword);

      if (find.find.length > 0 || find.match.length > 0) {
        items.push(node);
        return true;
      }
    });
    return this._fillTreeStructure4Search(items, "id");
  },
  _createJson: function _createJson(node, open) {
    return {
      id: node.id,
      pId: node.pId,
      text: node.text,
      value: node.value,
      isParent: BI.isNotEmptyArray(node.children),
      open: open
    };
  },
  _getChildren: function _getChildren(node) {
    var self = this;
    node.children = node.children || [];
    var nodes = [];
    BI.each(node.children, function (idx, child) {
      var children = self._getChildren(child);

      nodes = nodes.concat(children);
    });
    return node.children.concat(nodes);
  },
  // 将搜索到的节点进行补充，构造成一棵完整的树
  _fillTreeStructure4Search: function _fillTreeStructure4Search(leaves) {
    var self = this;
    var result = [];
    var queue = [];
    BI.each(leaves, function (idx, node) {
      queue.push({
        pId: node.pId
      });
      result.push(node);
      result = result.concat(self._getChildren(node));
    });
    queue.reverse();

    while (BI.isNotEmptyArray(queue)) {
      var node = queue.pop();
      var pNode = this.tree.search(this.tree.getRoot(), node.pId, "id");

      if (pNode != null) {
        pNode.open = true;
        queue.push({
          pId: pNode.pId
        });
        result.push(pNode);
      }
    }

    return BI.uniqBy(BI.map(result, function (idx, node) {
      return self._createJson(node, node.open);
    }), "id");
  },
  _digest: function _digest(v) {
    var _o$text;

    var o = this.options;

    if (BI.isFunction(o.valueFormatter)) {
      return o.valueFormatter(v);
    }

    var result = BI.find(o.items, function (i, item) {
      return item.value === v;
    });
    return BI.isNotNull(result) ? result.text : (_o$text = o.text) !== null && _o$text !== void 0 ? _o$text : v;
  },
  _getShowText: function _getShowText() {
    return this.editor.getText();
  },
  stopEditing: function stopEditing() {
    this.searcher.stopSearch();
  },
  getSearcher: function getSearcher() {
    return this.searcher;
  },
  populate: function populate(items) {
    this.options.items = items;

    this._initData();
  },
  setValue: function setValue(v) {
    this.editor.setState(this._digest(v[0]));
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  },
  focus: function focus() {
    this.searcher.focus();
  },
  blur: function blur() {
    this.searcher.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.searcher.setWaterMark(v);
  }
});
BI.MultiLayerSingleTreeTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiLayerSingleTreeTrigger.EVENT_BLUR = "EVENT_BLUR";
BI.MultiLayerSingleTreeTrigger.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiLayerSingleTreeTrigger.EVENT_STOP = "EVENT_STOP";
BI.MultiLayerSingleTreeTrigger.EVENT_START = "EVENT_START";
BI.MultiLayerSingleTreeTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiLayerSingleTreeTrigger.EVENT_ADD_ITEM = "EVENT_ADD_ITEM";
BI.shortcut("bi.multilayer_single_tree_trigger", BI.MultiLayerSingleTreeTrigger);

/***/ }),
/* 805 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 *
 * Created by GUY on 2016/1/27.
 * @class BI.MultiLayerSingleTreeFirstPlusGroupNode
 * @extends BI.NodeButton
 */
BI.MultiLayerSingleTreeFirstPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiLayerSingleTreeFirstPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-multilayer-single-tree-first-plus-group-node bi-list-item",
      layer: 0,
      // 第几层级
      id: "",
      pId: "",
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSingleTreeFirstPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.node = this._createNode();
    var items = [];
    items.push({
      el: this.node,
      lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2
    });
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2),
      items: items
    });
  },
  doRedMark: function doRedMark() {
    this.node.doRedMark.apply(this.node, arguments);
  },
  unRedMark: function unRedMark() {
    this.node.unRedMark.apply(this.node, arguments);
  },
  doClick: function doClick() {
    BI.MultiLayerSingleTreeFirstPlusGroupNode.superclass.doClick.apply(this, arguments);
    this.node.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.MultiLayerSingleTreeFirstPlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.node)) {
      this.node.setOpened(v);
    }
  },
  _createNode: function _createNode() {
    var self = this,
        o = this.options;
    return BI.createWidget({
      type: "bi.first_plus_group_node",
      cls: "bi-list-item-none",
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      open: o.open,
      isLastNode: o.isLastNode,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword,
      listeners: [{
        eventName: BI.Controller.EVENT_CHANGE,
        action: function action(type) {
          if (type === BI.Events.CLICK) {
            // 本身实现click功能
            return;
          }

          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        }
      }]
    });
  }
});
BI.shortcut("bi.multilayer_single_tree_first_plus_group_node", BI.MultiLayerSingleTreeFirstPlusGroupNode);

/***/ }),
/* 806 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 *
 * Created by GUY on 2016/1/27.
 * @class BI.MultiLayerSingleTreeLastPlusGroupNode
 * @extends BI.NodeButton
 */
BI.MultiLayerSingleTreeLastPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiLayerSingleTreeLastPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-multilayer-single-tree-last-plus-group-node bi-list-item",
      layer: 0,
      // 第几层级
      id: "",
      pId: "",
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSingleTreeLastPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.node = this._createNode();
    var items = [];
    items.push({
      el: this.node,
      lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2
    });
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2),
      items: items
    });
  },
  doRedMark: function doRedMark() {
    this.node.doRedMark.apply(this.node, arguments);
  },
  unRedMark: function unRedMark() {
    this.node.unRedMark.apply(this.node, arguments);
  },
  doClick: function doClick() {
    BI.MultiLayerSingleTreeLastPlusGroupNode.superclass.doClick.apply(this, arguments);
    this.node.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.MultiLayerSingleTreeLastPlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.node)) {
      this.node.setOpened(v);
    }
  },
  _createNode: function _createNode() {
    var self = this,
        o = this.options;
    return BI.createWidget({
      type: "bi.last_plus_group_node",
      cls: "bi-list-item-none",
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      open: o.open,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword,
      listeners: [{
        eventName: BI.Controller.EVENT_CHANGE,
        action: function action(type) {
          if (type === BI.Events.CLICK) {
            // 本身实现click功能
            return;
          }

          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        }
      }]
    });
  }
});
BI.shortcut("bi.multilayer_single_tree_last_plus_group_node", BI.MultiLayerSingleTreeLastPlusGroupNode);

/***/ }),
/* 807 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 *
 * Created by GUY on 2016/1/27.
 * @class BI.MultiLayerSingleTreeMidPlusGroupNode
 * @extends BI.NodeButton
 */
BI.MultiLayerSingleTreeMidPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiLayerSingleTreeMidPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-multilayer-single-tree-mid-plus-group-node bi-list-item",
      layer: 0,
      // 第几层级
      id: "",
      pId: "",
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSingleTreeMidPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.node = this._createNode();
    var items = [];
    items.push({
      el: this.node,
      lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2
    });
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, 12),
      items: items
    });
  },
  doRedMark: function doRedMark() {
    this.node.doRedMark.apply(this.node, arguments);
  },
  unRedMark: function unRedMark() {
    this.node.unRedMark.apply(this.node, arguments);
  },
  doClick: function doClick() {
    BI.MultiLayerSingleTreeMidPlusGroupNode.superclass.doClick.apply(this, arguments);
    this.node.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.MultiLayerSingleTreeMidPlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.node)) {
      this.node.setOpened(v);
    }
  },
  _createNode: function _createNode() {
    var self = this,
        o = this.options;
    return BI.createWidget({
      type: "bi.mid_plus_group_node",
      cls: "bi-list-item-none",
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      open: o.open,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword,
      listeners: [{
        eventName: BI.Controller.EVENT_CHANGE,
        action: function action(type) {
          if (type === BI.Events.CLICK) {
            // 本身实现click功能
            return;
          }

          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        }
      }]
    });
  }
});
BI.shortcut("bi.multilayer_single_tree_mid_plus_group_node", BI.MultiLayerSingleTreeMidPlusGroupNode);

/***/ }),
/* 808 */
/***/ (function(module, exports) {

/**
 *@desc 根节点,既是第一个又是最后一个
 *@author dailer
 *@date 2018/09/16
 */
BI.MultiLayerSingleTreePlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.MultiLayerSingleTreePlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-multilayer-single-tree-plus-group-node bi-list-item",
      layer: 0,
      // 第几层级
      id: "",
      pId: "",
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSingleTreePlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.node = this._createNode();
    var needBlankLayers = [];
    var pNode = o.pNode;

    while (pNode) {
      if (pNode.isLastNode) {
        needBlankLayers.push(pNode.layer);
      }

      pNode = pNode.pNode;
    }

    var items = [];
    BI.count(0, o.layer, function (index) {
      items.push({
        type: "bi.layout",
        cls: BI.contains(needBlankLayers, index) ? "" : "base-line-conn-background",
        width: 12,
        height: o.height
      });
    });
    items.push(this.node);
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, 12),
      items: items
    });
  },
  doRedMark: function doRedMark() {
    this.node.doRedMark.apply(this.node, arguments);
  },
  unRedMark: function unRedMark() {
    this.node.unRedMark.apply(this.node, arguments);
  },
  doClick: function doClick() {
    BI.MultiLayerSingleTreePlusGroupNode.superclass.doClick.apply(this, arguments);
    this.node.setSelected(this.isSelected());
  },
  setOpened: function setOpened(v) {
    BI.MultiLayerSingleTreePlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.node)) {
      this.node.setOpened(v);
    }
  },
  _createNode: function _createNode() {
    var self = this,
        o = this.options;
    return BI.createWidget({
      type: "bi.plus_group_node",
      cls: "bi-list-item-none",
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      open: o.open,
      isLastNode: o.isLastNode,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword,
      listeners: [{
        eventName: BI.Controller.EVENT_CHANGE,
        action: function action(type) {
          if (type === BI.Events.CLICK) {
            // 本身实现click功能
            return;
          }

          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        }
      }]
    });
  }
});
BI.shortcut("bi.multilayer_single_tree_plus_group_node", BI.MultiLayerSingleTreePlusGroupNode);

/***/ }),
/* 809 */
/***/ (function(module, exports) {

/**
 *
 * Created by GUY on 2016/1/27.
 * @class BI.MultiLayerSingleTreeFirstTreeLeafItem
 * @extends BI.BasicButton
 */
BI.MultiLayerSingleTreeFirstTreeLeafItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerSingleTreeFirstTreeLeafItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-multilayer-single-tree-first-tree-leaf-item bi-list-item-active",
      logic: {
        dynamic: false
      },
      layer: 0,
      id: "",
      pId: "",
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSingleTreeFirstTreeLeafItem.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.item = BI.createWidget({
      type: "bi.first_tree_leaf_item",
      cls: "bi-list-item-none",
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    this.item.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        // 本身实现click功能
        return;
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    var items = [];
    items.push({
      el: this.item,
      lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2
    });
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2),
      items: items
    });
  },
  doHighLight: function doHighLight() {
    this.item.doHighLight.apply(this.item, arguments);
  },
  unHighLight: function unHighLight() {
    this.item.unHighLight.apply(this.item, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  },
  doClick: function doClick() {
    BI.MultiLayerSingleTreeFirstTreeLeafItem.superclass.doClick.apply(this, arguments);
    this.item.setSelected(this.isSelected());
  },
  setSelected: function setSelected(v) {
    BI.MultiLayerSingleTreeFirstTreeLeafItem.superclass.setSelected.apply(this, arguments);
    this.item.setSelected(v);
  }
});
BI.shortcut("bi.multilayer_single_tree_first_tree_leaf_item", BI.MultiLayerSingleTreeFirstTreeLeafItem);

/***/ }),
/* 810 */
/***/ (function(module, exports) {

/**
 *
 * Created by GUY on 2016/1/27.
 * @class BI.MultiLayerSingleTreeLastTreeLeafItem
 * @extends BI.BasicButton
 */
BI.MultiLayerSingleTreeLastTreeLeafItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerSingleTreeLastTreeLeafItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-multilayer-single-tree-last-tree-leaf-item bi-list-item-active",
      logic: {
        dynamic: false
      },
      layer: 0,
      id: "",
      pId: "",
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSingleTreeLastTreeLeafItem.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.item = BI.createWidget({
      type: "bi.last_tree_leaf_item",
      cls: "bi-list-item-none",
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    this.item.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        // 本身实现click功能
        return;
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    var items = [];
    items.push({
      el: this.item,
      lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2
    });
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2),
      items: items
    });
  },
  doHighLight: function doHighLight() {
    this.item.doHighLight.apply(this.item, arguments);
  },
  unHighLight: function unHighLight() {
    this.item.unHighLight.apply(this.item, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  },
  doClick: function doClick() {
    BI.MultiLayerSingleTreeLastTreeLeafItem.superclass.doClick.apply(this, arguments);
    this.item.setSelected(this.isSelected());
  },
  setSelected: function setSelected(v) {
    BI.MultiLayerSingleTreeLastTreeLeafItem.superclass.setSelected.apply(this, arguments);
    this.item.setSelected(v);
  }
});
BI.shortcut("bi.multilayer_single_tree_last_tree_leaf_item", BI.MultiLayerSingleTreeLastTreeLeafItem);

/***/ }),
/* 811 */
/***/ (function(module, exports) {

/**
 *
 * Created by GUY on 2016/1/27.
 * @class BI.MultiLayerSingleTreeMidTreeLeafItem
 * @extends BI.BasicButton
 */
BI.MultiLayerSingleTreeMidTreeLeafItem = BI.inherit(BI.BasicButton, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiLayerSingleTreeMidTreeLeafItem.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-multilayer-single-tree-mid-tree-leaf-item bi-list-item-active",
      logic: {
        dynamic: false
      },
      layer: 0,
      id: "",
      pId: "",
      height: 24
    });
  },
  _init: function _init() {
    BI.MultiLayerSingleTreeMidTreeLeafItem.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.item = BI.createWidget({
      type: "bi.mid_tree_leaf_item",
      cls: "bi-list-item-none",
      logic: {
        dynamic: true
      },
      id: o.id,
      pId: o.pId,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      py: o.py,
      keyword: o.keyword
    });
    this.item.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        // 本身实现click功能
        return;
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    var items = [];
    items.push({
      el: this.item,
      lgap: o.layer * BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2
    });
    BI.createWidget({
      type: "bi.horizontal_adapt",
      element: this,
      columnSize: BI.makeArray(o.layer, BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT / 2),
      items: items
    });
  },
  doHighLight: function doHighLight() {
    this.item.doHighLight.apply(this.item, arguments);
  },
  unHighLight: function unHighLight() {
    this.item.unHighLight.apply(this.item, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  },
  doClick: function doClick() {
    BI.MultiLayerSingleTreeMidTreeLeafItem.superclass.doClick.apply(this, arguments);
    this.item.setSelected(this.isSelected());
  },
  setSelected: function setSelected(v) {
    BI.MultiLayerSingleTreeMidTreeLeafItem.superclass.setSelected.apply(this, arguments);
    this.item.setSelected(v);
  }
});
BI.shortcut("bi.multilayer_single_tree_mid_tree_leaf_item", BI.MultiLayerSingleTreeMidTreeLeafItem);

/***/ }),
/* 812 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.MultiSelectCheckPane
 * @extends BI.Widget
 */
BI.MultiSelectCheckPane = BI.inherit(BI.Widget, {
  constants: {
    height: 12,
    lgap: 10,
    tgap: 10,
    bgap: 5
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectCheckPane.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-check-pane bi-background",
      items: [],
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      onClickContinueSelect: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.MultiSelectCheckPane.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    this.storeValue = opts.value || {};
    this.display = BI.createWidget({
      type: "bi.display_selected_list",
      items: opts.items,
      itemsCreator: function itemsCreator(op, callback) {
        op = BI.extend(op || {}, {
          selectedValues: self.storeValue.value
        });

        if (self.storeValue.type === BI.Selection.Multi) {
          callback({
            items: BI.map(self.storeValue.value, function (i, v) {
              var txt = opts.valueFormatter(v) || v;
              return {
                text: txt,
                value: v,
                title: txt
              };
            })
          });
          return;
        }

        opts.itemsCreator(op, callback);
      }
    });
    this.continueSelect = BI.createWidget({
      type: "bi.text_button",
      title: BI.i18nText("BI-Continue_Select"),
      text: BI.i18nText("BI-Continue_Select"),
      cls: "multi-select-check-selected bi-high-light"
    });
    this.continueSelect.on(BI.TextButton.EVENT_CHANGE, function () {
      opts.onClickContinueSelect();
    });
    BI.createWidget({
      type: "bi.vtape",
      element: this,
      items: [{
        height: this.constants.height,
        el: {
          type: "bi.vertical_adapt",
          columnSize: ["auto", "auto"],
          cls: "multi-select-continue-select",
          items: [{
            el: {
              type: "bi.label",
              title: BI.i18nText("BI-Selected_Data"),
              text: BI.i18nText("BI-Selected_Data")
            },
            lgap: this.constants.lgap
          }, {
            el: this.continueSelect,
            hgap: this.constants.lgap
          }]
        },
        tgap: this.constants.tgap
      }, {
        height: "fill",
        el: this.display,
        tgap: this.constants.bgap
      }]
    });
  },
  setValue: function setValue(v) {
    this.storeValue = v || {};
  },
  empty: function empty() {
    this.display.empty();
  },
  populate: function populate() {
    this.display.populate.apply(this.display, arguments);
  }
});
BI.shortcut("bi.multi_select_check_pane", BI.MultiSelectCheckPane);

/***/ }),
/* 813 */
/***/ (function(module, exports) {

/**
 *
 *
 * 查看已选弹出层的展示面板
 * @class BI.DisplaySelectedList
 * @extends BI.Widget
 */
BI.DisplaySelectedList = BI.inherit(BI.Pane, {
  constants: {
    height: 24,
    lgap: 10
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DisplaySelectedList.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-display-list",
      itemsCreator: BI.emptyFn,
      items: []
    });
  },
  _init: function _init() {
    BI.DisplaySelectedList.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    this.hasNext = false;
    var cacheItems = [];
    this.button_group = BI.createWidget({
      type: "bi.list_pane",
      element: this,
      el: {
        type: "bi.loader",
        isDefaultInit: false,
        logic: {
          dynamic: true,
          scrolly: true
        },
        items: this._createItems(opts.items),
        chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
        layouts: [{
          type: "bi.vertical",
          lgap: 10
        }]
      },
      itemsCreator: function itemsCreator(options, callback) {
        if (options.times === 1) {
          cacheItems = [];
        }

        if (cacheItems.length > 0) {
          var renderedItems = cacheItems.slice(0, 100);
          cacheItems = cacheItems.slice(100);
          self.hasNext = true;

          if (cacheItems.length === 0) {
            self.hasNext = false;
          }

          callback(self._createItems(renderedItems));
          return;
        }

        opts.itemsCreator(options, function (ob) {
          self.hasNext = !!ob.hasNext;
          var firstItemsCount = 100 + ob.items.length % 100;

          if (ob.items.length > 100) {
            cacheItems = ob.items.slice(100 + ob.items.length % 100);
            self.hasNext = true;
          }

          callback(self._createItems(ob.items.slice(0, firstItemsCount)));
        });
      },
      hasNext: function hasNext() {
        return self.hasNext;
      }
    });
  },
  _createItems: function _createItems(items) {
    return BI.createItems(items, {
      type: "bi.icon_text_item",
      cls: "cursor-default check-font icon-size-12 display-list-item bi-tips",
      once: true,
      invalid: true,
      selected: true,
      height: this.constants.height,
      logic: {
        dynamic: true
      }
    });
  },
  empty: function empty() {
    this.button_group.empty();
  },
  populate: function populate(items) {
    if (arguments.length === 0) {
      this.button_group.populate();
    } else {
      this.button_group.populate(this._createItems(items));
    }
  }
});
BI.shortcut("bi.display_selected_list", BI.DisplaySelectedList);

/***/ }),
/* 814 */
/***/ (function(module, exports) {

/**
 * 加载控件
 *
 * Created by GUY on 2015/8/31.
 * @class BI.Loader
 * @extends BI.Widget
 */
BI.MultiSelectInnerLoader = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectInnerLoader.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-inner-loader",
      direction: "top",
      isDefaultInit: true,
      // 是否默认初始化数据
      logic: {
        dynamic: true,
        scrolly: true
      },
      // 下面是button_group的属性
      el: {
        type: "bi.button_group",
        chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
        behaviors: {
          redmark: function redmark() {
            return true;
          }
        },
        layouts: [{
          type: "bi.vertical"
        }]
      },
      items: [],
      itemsCreator: BI.emptyFn,
      onLoaded: BI.emptyFn,
      // 下面是分页信息
      count: false,
      prev: false,
      next: {},
      hasPrev: BI.emptyFn,
      hasNext: BI.emptyFn
    });
  },
  _nextLoad: function _nextLoad() {
    var self = this,
        o = this.options;
    this.next.setLoading();

    if (this.cachItems && this.cachItems.length > 0) {
      this.next.setLoaded();
      this.addItems(this.cachItems.slice(0, 100));
      this.cachItems = this.cachItems.slice(100);
      return;
    }

    o.itemsCreator.apply(this, [{
      times: ++this.times
    }, function () {
      self.next.setLoaded();
      self.addItems.apply(self, arguments);
    }]);
  },
  render: function render() {
    var self = this,
        o = this.options;

    if (o.itemsCreator === false) {
      o.next = false;
    }

    this.button_group = BI.createWidget(o.el, {
      type: "bi.button_group",
      chooseType: 0,
      items: o.items,
      behaviors: {},
      layouts: [{
        type: "bi.vertical"
      }],
      value: o.value
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      if (type === BI.Events.CLICK) {
        var node = self.cachGroup.getNodeByValue(value);

        if (node) {
          node.setSelected(obj.isSelected());
        }
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);

      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.Loader.EVENT_CHANGE, obj);
      }
    });
    var renderEngine = BI.Widget._renderEngine;
    BI.Widget.registerRenderEngine(BI.Element.renderEngine);
    this.cachGroup = BI.createWidget(o.el, {
      type: "bi.button_group",
      root: true,
      chooseType: 0,
      items: o.items,
      behaviors: {},
      layouts: [{
        type: "bi.vertical"
      }],
      value: o.value
    });
    BI.Widget.registerRenderEngine(renderEngine);

    if (o.next !== false) {
      this.next = BI.createWidget(BI.extend({
        type: "bi.loading_bar"
      }, o.next));
      this.next.on(BI.Controller.EVENT_CHANGE, function (type) {
        if (type === BI.Events.CLICK) {
          self._nextLoad();
        }
      });
    }

    BI.createWidget({
      type: "bi.vertical",
      element: this,
      items: [this.button_group, this.next]
    });
    o.isDefaultInit && BI.isEmpty(o.items) && BI.nextTick(BI.bind(function () {
      o.isDefaultInit && BI.isEmpty(o.items) && this._populate();
    }, this));
  },
  hasNext: function hasNext() {
    var o = this.options;

    if (BI.isNumber(o.count)) {
      return this.count < o.count;
    }

    if (this.cachItems && this.cachItems.length > 0) {
      return true;
    }

    return !!o.hasNext.apply(this, [{
      times: this.times,
      count: this.count
    }]);
  },
  addItems: function addItems(items) {
    this.count += items.length;

    if (BI.isObject(this.next)) {
      if (this.hasNext()) {
        this.options.items = this.options.items.concat(items);
        this.next.setLoaded();
      } else {
        this.next.setEnd();
      }
    }

    var renderEngine = BI.Widget._renderEngine;
    BI.Widget.registerRenderEngine(BI.Element.renderEngine);
    this.cachGroup.addItems.apply(this.cachGroup, arguments);
    BI.Widget.registerRenderEngine(renderEngine);
    this.button_group.addItems.apply(this.button_group, arguments);
  },
  _populate: function _populate(items) {
    var self = this,
        o = this.options;

    if (arguments.length === 0 && BI.isFunction(o.itemsCreator)) {
      o.itemsCreator.apply(this, [{
        times: 1
      }, function (items, keyword) {
        if (arguments.length === 0) {
          throw new Error("参数不能为空");
        }

        self.populate.apply(self, arguments);
        o.onLoaded();
      }]);
      return false;
    }

    this.options.items = (items || []).slice(0, 100 + (items || []).length % 100);
    this.times = 1;
    this.count = 0;
    this.count += items.length;

    if (BI.isObject(this.next)) {
      if (this.hasNext()) {
        this.next.setLoaded();
      } else {
        this.next.invisible();
      }
    }

    return true;
  },
  populate: function populate(items, keyword) {
    if (this._populate.apply(this, arguments)) {
      this.cachItems = [];
      var firstItemsCount = 100 + items.length % 100;

      if (items.length > firstItemsCount) {
        this.cachItems = items.slice(firstItemsCount);
      }

      var renderEngine = BI.Widget._renderEngine;
      BI.Widget.registerRenderEngine(BI.Element.renderEngine);
      this.cachGroup.populate.call(this.cachGroup, items, keyword);
      BI.Widget.registerRenderEngine(renderEngine);
      this.button_group.populate.call(this.button_group, items.slice(0, firstItemsCount), keyword);
    }
  },
  setNotSelectedValue: function setNotSelectedValue() {
    this.button_group.setNotSelectedValue.apply(this.button_group, arguments);
    this.cachGroup.setNotSelectedValue.apply(this.cachGroup, arguments);
  },
  getNotSelectedValue: function getNotSelectedValue() {
    return this.cachGroup.getNotSelectedValue();
  },
  setAllSelected: function setAllSelected(v) {
    this.button_group.setAllSelected(v);
    this.cachGroup.setAllSelected(v);
  },
  setValue: function setValue(value) {
    var map = BI.makeObject(BI.isArray(value) ? value : [value]);
    this.cachGroup.setValueMap.call(this.cachGroup, map);
    this.button_group.setValueMap.call(this.button_group, map);
  },
  getValue: function getValue() {
    return this.cachGroup.getValue.apply(this.cachGroup, arguments);
  },
  getAllButtons: function getAllButtons() {
    return this.button_group.getAllButtons();
  },
  getAllLeaves: function getAllLeaves() {
    return this.button_group.getAllLeaves();
  },
  getSelectedButtons: function getSelectedButtons() {
    return this.button_group.getSelectedButtons();
  },
  getNotSelectedButtons: function getNotSelectedButtons() {
    return this.button_group.getNotSelectedButtons();
  },
  getIndexByValue: function getIndexByValue(value) {
    return this.button_group.getIndexByValue(value);
  },
  getNodeById: function getNodeById(id) {
    return this.button_group.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(value) {
    return this.button_group.getNodeByValue(value);
  },
  empty: function empty() {
    this.button_group.empty();
    this.cachGroup.empty();
    BI.each([this.prev, this.next], function (i, ob) {
      ob && ob.setVisible(false);
    });
  }
});
BI.MultiSelectInnerLoader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_inner_loader", BI.MultiSelectInnerLoader);

/***/ }),
/* 815 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.MultiSelectCombo
 * @extends BI.Single
 */
BI.MultiSelectCombo = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-combo",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      height: 24,
      allowEdit: true
    });
  },
  _init: function _init() {
    var self = this;
    var o = this.options;

    BI.MultiSelectCombo.superclass._init.apply(this, arguments);

    var assertShowValue = function assertShowValue() {
      if (BI.isKey(self._startValue)) {
        if (self.storeValue.type === BI.Selection.All) {
          BI.remove(self.storeValue.value, self._startValue);
          self.storeValue.assist = self.storeValue.assist || [];
          BI.pushDistinct(self.storeValue.assist, self._startValue);
        } else {
          BI.pushDistinct(self.storeValue.value, self._startValue);
          BI.remove(self.storeValue.assist, self._startValue);
        }
      }

      self.trigger.getSearcher().setState(self.storeValue);
      self.numberCounter.setButtonChecked(self.storeValue);
    };

    this.storeValue = BI.deepClone(o.value) || {};

    this._assertValue(this.storeValue); // 标记正在请求数据


    this.requesting = false;
    this.trigger = BI.createWidget({
      type: "bi.multi_select_trigger",
      allowEdit: o.allowEdit,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      text: o.text,
      defaultText: o.defaultText,
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      valueFormatter: o.valueFormatter,
      itemFormatter: o.itemFormatter,
      itemsCreator: BI.bind(this._itemsCreator4Trigger, this),
      itemHeight: o.itemHeight,
      value: this.storeValue
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_FOCUS, function () {
      self.fireEvent(BI.MultiSelectCombo.EVENT_FOCUS);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_BLUR, function () {
      self.fireEvent(BI.MultiSelectCombo.EVENT_BLUR);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_START, function () {
      self._setStartValue("");

      this.getSearcher().setValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_STOP, function () {
      self._setStartValue("");

      self.fireEvent(BI.MultiSelectCombo.EVENT_STOP);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_SEARCHING, function (keywords) {
      var last = BI.last(keywords);
      keywords = BI.initial(keywords || []);

      if (keywords.length > 0) {
        self._joinKeywords(keywords, function () {
          if (BI.endWith(last, BI.BlankSplitChar)) {
            self.combo.setValue(self.storeValue);
            assertShowValue();
            self.combo.populate();

            self._setStartValue("");
          } else {
            self.combo.setValue(self.storeValue);
            assertShowValue();
          }

          self._dataChange = true;
        });
      }

      self.fireEvent(BI.MultiSelectCombo.EVENT_SEARCHING);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_CHANGE, function (value, obj) {
      if (obj instanceof BI.MultiSelectBar) {
        self._joinAll(this.getValue(), function () {
          assertShowValue();
          self.fireEvent(BI.MultiSelectCombo.EVENT_CLICK_ITEM);
        });
      } else {
        self._join(this.getValue(), function () {
          assertShowValue();
          self.fireEvent(BI.MultiSelectCombo.EVENT_CLICK_ITEM);
        });
      }

      self._dataChange = true;
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_BEFORE_COUNTER_POPUPVIEW, function () {
      // counter的值随点击项的改变而改变, 点击counter的时候不需要setValue(counter会请求刷新计数)
      // 只需要更新查看面板的selectedValue用以请求已选数据
      self.numberCounter.updateSelectedValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_COUNTER_CLICK, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      cls: o.simple ? "bi-border-bottom" : "bi-border bi-border-radius",
      toggle: !o.allowEdit,
      container: o.container,
      el: this.trigger,
      adjustLength: 1,
      popup: {
        type: "bi.multi_select_popup_view",
        ref: function ref() {
          self.popup = this;
          self.trigger.setAdapter(this);
          self.numberCounter.setAdapter(this);
        },
        listeners: [{
          eventName: BI.MultiSelectPopupView.EVENT_CHANGE,
          action: function action() {
            self._dataChange = true;
            self.storeValue = this.getValue();

            self._adjust(function () {
              assertShowValue();
            });

            self.fireEvent(BI.MultiSelectCombo.EVENT_CLICK_ITEM);
          }
        }, {
          eventName: BI.MultiSelectPopupView.EVENT_CLICK_CONFIRM,
          action: function action() {
            self._defaultState();
          }
        }, {
          eventName: BI.MultiSelectPopupView.EVENT_CLICK_CLEAR,
          action: function action() {
            self._dataChange = true;
            self.setValue();

            self._defaultState();
          }
        }],
        itemsCreator: o.itemsCreator,
        itemHeight: o.itemHeight,
        valueFormatter: o.valueFormatter,
        itemFormatter: o.itemFormatter,
        onLoaded: function onLoaded() {
          BI.nextTick(function () {
            self.combo.adjustWidth();
            self.combo.adjustHeight();
            self.numberCounter.adjustView();
            self.trigger.getSearcher().adjustView();
          });
        }
      },
      value: o.value,
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0 && self.numberCounter.element.find(e.target).length === 0;
      }
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      if (!this.isViewVisible()) {
        self._dataChange = false; // 标记数据是否发生变化
      }

      this.setValue(self.storeValue);
      BI.nextTick(function () {
        self._populate();
      });
    }); // 当退出的时候如果还在处理请求，则等请求结束后再对外发确定事件

    this.wants2Quit = false;
    this.combo.on(BI.Combo.EVENT_AFTER_HIDEVIEW, function () {
      // important:关闭弹出时又可能没有退出编辑状态
      self._stopEditing();

      if (self.requesting === true) {
        self.wants2Quit = true;
      } else {
        self._dataChange && self.fireEvent(BI.MultiSelectCombo.EVENT_CONFIRM);
      }
    });
    var triggerBtn = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.height,
      height: o.height,
      cls: "multi-select-trigger-icon-button"
    });
    triggerBtn.on(BI.TriggerIconButton.EVENT_CHANGE, function () {
      self.numberCounter.hideView();

      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    this.numberCounter = BI.createWidget({
      type: "bi.multi_select_check_selected_switcher",
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      valueFormatter: o.valueFormatter,
      itemsCreator: BI.bind(this._itemsCreator4Trigger, this),
      value: this.storeValue
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_TRIGGER_CHANGE, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_BEFORE_POPUPVIEW, function () {
      this.updateSelectedValue(self.storeValue);
    });
    this.numberCounter.on(BI.Events.VIEW, function (b) {
      BI.nextTick(function () {
        // 自动调整宽度
        self.trigger.refreshPlaceHolderWidth(b === true ? self.numberCounter.element.outerWidth() + 8 : 0);
      });
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_AFTER_HIDEVIEW, function () {
      BI.nextTick(function () {
        // 收起时自动调整宽度
        self.trigger.refreshPlaceHolderWidth(0);
      });
    });
    this.trigger.element.click(function (e) {
      if (self.trigger.element.find(e.target).length > 0) {
        self.numberCounter.hideView();
      }
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.combo,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: triggerBtn,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: {
          type: "bi.vertical_adapt",
          items: [this.numberCounter]
        },
        right: o.height,
        top: 0,
        height: o.height
      }]
    });
  },
  _itemsCreator4Trigger: function _itemsCreator4Trigger(op, callback) {
    var self = this;
    var o = this.options;
    o.itemsCreator(op, function (res) {
      if (op.times === 1 && BI.isNotNull(op.keywords)) {
        // 预防trigger内部把当前的storeValue改掉
        self.trigger.setValue(BI.deepClone(self.getValue()));
      }

      callback.apply(self, arguments);
    });
  },
  _stopEditing: function _stopEditing() {
    this.trigger.stopEditing();
    this.numberCounter.hideView();
  },
  _defaultState: function _defaultState() {
    this._stopEditing();

    this.combo.hideView();
  },
  _assertValue: function _assertValue(val) {
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
  },
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _joinKeywords: function _joinKeywords(keywords, callback) {
    var self = this;
    var o = this.options;

    this._assertValue(this.storeValue);

    this.requesting = true;
    o.itemsCreator({
      type: BI.MultiSelectCombo.REQ_GET_ALL_DATA,
      keywords: keywords
    }, function (ob) {
      var values = BI.map(ob.items, "value");
      digest(values);
    });

    function digest(items) {
      var selectedMap = self._makeMap(items);

      BI.each(keywords, function (i, val) {
        if (BI.isNotNull(selectedMap[val])) {
          self.storeValue.type === BI.Selection.Multi ? BI.pushDistinct(self.storeValue.value, val) : BI.remove(self.storeValue.value, val);
        }
      });

      self._adjust(callback);
    }
  },
  _joinAll: function _joinAll(res, callback) {
    var self = this;
    var o = this.options;

    this._assertValue(res);

    this.requesting = true;

    if (this.storeValue.type === res.type) {
      var result = BI.Func.getSearchResult(BI.map(this.storeValue.value, function (_i, v) {
        return {
          text: o.valueFormatter(v) || v,
          value: v
        };
      }), this.trigger.getKey());
      var change = false;

      var map = this._makeMap(this.storeValue.value);

      BI.each(BI.concat(result.match, result.find), function (i, obj) {
        var v = obj.value;

        if (BI.isNotNull(map[v])) {
          change = true;
          self.storeValue.assist && self.storeValue.assist.push(map[v]);
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      this._adjust(callback);

      return;
    }

    o.itemsCreator({
      type: BI.MultiSelectCombo.REQ_GET_ALL_DATA,
      keywords: [this.trigger.getKey()],
      selectedValues: BI.filter(this.storeValue.value, function (_i, v) {
        return !BI.contains(res.value, v);
      })
    }, function (ob) {
      var items = BI.map(ob.items, "value");

      var selectedMap = self._makeMap(self.storeValue.value);

      var notSelectedMap = self._makeMap(res.value);

      var newItems = [];
      BI.each(items, function (i, item) {
        if (BI.isNotNull(selectedMap[items[i]])) {
          self.storeValue.assist && self.storeValue.assist.push(selectedMap[items[i]]);
          delete selectedMap[items[i]];
        }

        if (BI.isNull(notSelectedMap[items[i]])) {
          BI.remove(self.storeValue.assist, item);
          newItems.push(item);
        }
      });
      self.storeValue.value = newItems.concat(BI.values(selectedMap));

      self._adjust(callback);
    });
  },
  _adjust: function _adjust(callback) {
    var self = this;
    var o = this.options;
    adjust();
    callback();

    function adjust() {
      if (self.wants2Quit === true) {
        self._dataChange && self.fireEvent(BI.MultiSelectCombo.EVENT_CONFIRM);
        self.wants2Quit = false;
      }

      self.requesting = false;
    }
  },
  _join: function _join(res, callback) {
    var self = this;
    var o = this.options;

    this._assertValue(res);

    this._assertValue(this.storeValue);

    if (this.storeValue.type === res.type) {
      var map = this._makeMap(this.storeValue.value);

      BI.each(res.value, function (i, v) {
        if (!map[v]) {
          BI.pushDistinct(self.storeValue.value, v);
          BI.remove(self.storeValue.assist, v);
          map[v] = v;
        }
      });
      var change = false;
      BI.each(res.assist, function (i, v) {
        if (BI.isNotNull(map[v])) {
          change = true;
          self.storeValue.assist && self.storeValue.assist.push(map[v]);
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      self._adjust(callback);

      return;
    }

    this._joinAll(res, callback);
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.popup.setStartValue(value);
  },
  _populate: function _populate() {
    this.combo.populate.apply(this.combo, arguments);
  },
  showView: function showView() {
    this.combo.showView();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  setValue: function setValue(v) {
    this.storeValue = v || {};

    this._assertValue(this.storeValue);

    this.combo.setValue(this.storeValue);
    this.numberCounter.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue);
  },
  populate: function populate() {
    this._populate.apply(this, arguments);

    this.numberCounter.populateSwitcher.apply(this.numberCounter, arguments);
  }
});
BI.extend(BI.MultiSelectCombo, {
  REQ_GET_DATA_LENGTH: 1,
  REQ_GET_ALL_DATA: -1
});
BI.MultiSelectCombo.EVENT_BLUR = "EVENT_BLUR";
BI.MultiSelectCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiSelectCombo.EVENT_STOP = "EVENT_STOP";
BI.MultiSelectCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiSelectCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.MultiSelectCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.multi_select_combo", BI.MultiSelectCombo);

/***/ }),
/* 816 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.MultiSelectNoBarCombo
 * @extends BI.Single
 */
BI.MultiSelectNoBarCombo = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectNoBarCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-combo-no-bar",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      height: 24
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.MultiSelectNoBarCombo.superclass._init.apply(this, arguments);

    var assertShowValue = function assertShowValue() {
      if (BI.isKey(self._startValue)) {
        if (self.storeValue.type === BI.Selection.All) {
          BI.remove(self.storeValue.value, self._startValue);
          self.storeValue.assist = self.storeValue.assist || [];
          BI.pushDistinct(self.storeValue.assist, self._startValue);
        } else {
          BI.pushDistinct(self.storeValue.value, self._startValue);
          BI.remove(self.storeValue.assist, self._startValue);
        }
      }

      self.trigger.getSearcher().setState(self.storeValue);
      self.numberCounter.setButtonChecked(self.storeValue);
    };

    this.storeValue = {
      type: BI.Selection.Multi,
      value: BI.deepClone(o.value) || []
    }; // 标记正在请求数据

    this.requesting = false;
    this.trigger = BI.createWidget({
      type: "bi.multi_select_trigger",
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      text: o.text,
      defaultText: o.defaultText,
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      valueFormatter: o.valueFormatter,
      itemsCreator: BI.bind(this._itemsCreator4Trigger, this),
      itemHeight: o.itemHeight,
      value: {
        type: BI.Selection.Multi,
        value: o.value
      }
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_FOCUS, function () {
      self.fireEvent(BI.MultiSelectNoBarCombo.EVENT_FOCUS);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_BLUR, function () {
      self.fireEvent(BI.MultiSelectNoBarCombo.EVENT_BLUR);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_START, function () {
      self._setStartValue("");

      this.getSearcher().setValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_STOP, function () {
      self._setStartValue("");

      self.fireEvent(BI.MultiSelectNoBarCombo.EVENT_STOP);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_SEARCHING, function (keywords) {
      var last = BI.last(keywords);
      keywords = BI.initial(keywords || []);

      if (keywords.length > 0) {
        self._joinKeywords(keywords, function () {
          if (BI.endWith(last, BI.BlankSplitChar)) {
            self.combo.setValue(self.storeValue);
            assertShowValue();
            self.combo.populate();

            self._setStartValue("");
          } else {
            self.combo.setValue(self.storeValue);
            assertShowValue();
          }

          self._dataChange = true;
        });
      }
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_CHANGE, function (value, obj) {
      if (obj instanceof BI.MultiSelectBar) {
        self._joinAll(this.getValue(), function () {
          assertShowValue();
        });
      } else {
        self._join(this.getValue(), function () {
          assertShowValue();
        });
      }

      self._dataChange = true;
      self.fireEvent(BI.MultiSelectNoBarCombo.EVENT_CLICK_ITEM);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_BEFORE_COUNTER_POPUPVIEW, function () {
      // counter的值随点击项的改变而改变, 点击counter的时候不需要setValue(counter会请求刷新计数)
      // 只需要更新查看面板的selectedValue用以请求已选数据
      self.numberCounter.updateSelectedValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_COUNTER_CLICK, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      cls: o.simple ? "bi-border-bottom" : "bi-border bi-border-radius",
      toggle: false,
      container: o.container,
      el: this.trigger,
      adjustLength: 1,
      popup: {
        type: "bi.multi_select_no_bar_popup_view",
        ref: function ref() {
          self.popup = this;
          self.trigger.setAdapter(this);
          self.numberCounter.setAdapter(this);
        },
        listeners: [{
          eventName: BI.MultiSelectPopupView.EVENT_CHANGE,
          action: function action() {
            self._dataChange = true;
            self.storeValue = this.getValue();

            self._adjust(function () {
              assertShowValue();
            });

            self.fireEvent(BI.MultiSelectNoBarCombo.EVENT_CLICK_ITEM);
          }
        }, {
          eventName: BI.MultiSelectPopupView.EVENT_CLICK_CONFIRM,
          action: function action() {
            self._defaultState();
          }
        }, {
          eventName: BI.MultiSelectPopupView.EVENT_CLICK_CLEAR,
          action: function action() {
            self._dataChange = true;
            self.setValue();

            self._defaultState();
          }
        }],
        itemsCreator: o.itemsCreator,
        itemHeight: o.itemHeight,
        valueFormatter: o.valueFormatter,
        itemFormatter: o.itemFormatter,
        onLoaded: function onLoaded() {
          BI.nextTick(function () {
            self.combo.adjustWidth();
            self.combo.adjustHeight();
            self.numberCounter.adjustView();
            self.trigger.getSearcher().adjustView();
          });
        }
      },
      value: {
        type: BI.Selection.Multi,
        value: o.value
      },
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0 && self.numberCounter.element.find(e.target).length === 0;
      }
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      if (!this.isViewVisible()) {
        self._dataChange = false; // 标记数据是否发生变化
      }

      this.setValue(self.storeValue);
      BI.nextTick(function () {
        self._populate();
      });
    }); // 当退出的时候如果还在处理请求，则等请求结束后再对外发确定事件

    this.wants2Quit = false;
    this.combo.on(BI.Combo.EVENT_AFTER_HIDEVIEW, function () {
      // important:关闭弹出时又可能没有退出编辑状态
      self._stopEditing();

      if (self.requesting === true) {
        self.wants2Quit = true;
      } else {
        self._dataChange && self.fireEvent(BI.MultiSelectNoBarCombo.EVENT_CONFIRM);
      }
    });
    var triggerBtn = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.height,
      height: o.height,
      cls: "multi-select-trigger-icon-button"
    });
    triggerBtn.on(BI.TriggerIconButton.EVENT_CHANGE, function () {
      self.numberCounter.hideView();

      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    this.numberCounter = BI.createWidget({
      type: "bi.multi_select_check_selected_switcher",
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      valueFormatter: o.valueFormatter,
      itemsCreator: BI.bind(this._itemsCreator4Trigger, this),
      value: {
        type: BI.Selection.Multi,
        value: o.value
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_TRIGGER_CHANGE, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_BEFORE_POPUPVIEW, function () {
      this.updateSelectedValue(self.storeValue);
    });
    this.numberCounter.on(BI.Events.VIEW, function (b) {
      BI.nextTick(function () {
        // 自动调整宽度
        self.trigger.refreshPlaceHolderWidth(b === true ? self.numberCounter.element.outerWidth() + 8 : 0);
      });
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_AFTER_HIDEVIEW, function () {
      BI.nextTick(function () {
        // 收起时自动调整宽度
        self.trigger.refreshPlaceHolderWidth(0);
      });
    });
    this.trigger.element.click(function (e) {
      if (self.trigger.element.find(e.target).length > 0) {
        self.numberCounter.hideView();
      }
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.combo,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: triggerBtn,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: {
          type: "bi.vertical_adapt",
          items: [this.numberCounter]
        },
        right: o.height,
        top: 0,
        height: o.height
      }]
    });
  },
  _addItem: function _addItem(assertShowValue, matched) {
    var self = this;
    var keyword = this.trigger.getSearcher().getKeyword();

    this._join({
      type: BI.Selection.Multi,
      value: [keyword]
    }, function () {
      // 如果在不选的状态下直接把该值添加进来
      if (self.storeValue.type === BI.Selection.Multi) {
        BI.pushDistinct(self.storeValue.value, keyword);
      }

      self.combo.setValue(self.storeValue);

      self._setStartValue(keyword);

      assertShowValue();
      self.populate();

      self._setStartValue("");

      self._dataChange = true;
    });
  },
  _itemsCreator4Trigger: function _itemsCreator4Trigger(op, callback) {
    var self = this,
        o = this.options;
    o.itemsCreator(op, function (res) {
      if (op.times === 1 && BI.isNotNull(op.keywords)) {
        // 预防trigger内部把当前的storeValue改掉
        self.trigger.setValue(BI.deepClone(self.storeValue));
      }

      callback.apply(self, arguments);
    });
  },
  _stopEditing: function _stopEditing() {
    this.trigger.stopEditing();
    this.numberCounter.hideView();
  },
  _defaultState: function _defaultState() {
    this._stopEditing();

    this.combo.hideView();
  },
  _assertValue: function _assertValue(val) {
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
  },
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _joinKeywords: function _joinKeywords(keywords, callback) {
    var self = this,
        o = this.options;

    this._assertValue(this.storeValue);

    this.requesting = true;
    o.itemsCreator({
      type: BI.MultiSelectNoBarCombo.REQ_GET_ALL_DATA,
      keywords: keywords
    }, function (ob) {
      var values = BI.map(ob.items, "value");
      digest(values);
    });

    function digest(items) {
      var selectedMap = self._makeMap(items);

      BI.each(keywords, function (i, val) {
        if (BI.isNotNull(selectedMap[val])) {
          self.storeValue.type === BI.Selection.Multi ? BI.pushDistinct(self.storeValue.value, val) : BI.remove(self.storeValue.value, val);
        }
      });

      self._adjust(callback);
    }
  },
  _joinAll: function _joinAll(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this.requesting = true;

    if (this.storeValue.type === res.type) {
      var result = BI.Func.getSearchResult(BI.map(this.storeValue.value, function (_i, v) {
        return {
          text: o.valueFormatter(v) || v,
          value: v
        };
      }), this.trigger.getKey());
      var change = false;

      var map = this._makeMap(this.storeValue.value);

      BI.each(BI.concat(result.match, result.find), function (i, obj) {
        var v = obj.value;

        if (BI.isNotNull(map[v])) {
          change = true;
          self.storeValue.assist && self.storeValue.assist.push(map[v]);
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      this._adjust(callback);

      return;
    }

    o.itemsCreator({
      type: BI.MultiSelectNoBarCombo.REQ_GET_ALL_DATA,
      keywords: [this.trigger.getKey()],
      selectedValues: BI.filter(this.storeValue.value, function (_i, v) {
        return !BI.contains(res.value, v);
      })
    }, function (ob) {
      var items = BI.map(ob.items, "value");

      var selectedMap = self._makeMap(self.storeValue.value);

      var notSelectedMap = self._makeMap(res.value);

      var newItems = [];
      BI.each(items, function (i, item) {
        if (BI.isNotNull(selectedMap[items[i]])) {
          self.storeValue.assist && self.storeValue.assist.push(selectedMap[items[i]]);
          delete selectedMap[items[i]];
        }

        if (BI.isNull(notSelectedMap[items[i]])) {
          BI.remove(self.storeValue.assist, item);
          newItems.push(item);
        }
      });
      self.storeValue.value = newItems.concat(BI.values(selectedMap));

      self._adjust(callback);
    });
  },
  _adjust: function _adjust(callback) {
    var self = this,
        o = this.options;
    adjust();
    callback();

    function adjust() {
      if (self.wants2Quit === true) {
        self._dataChange && self.fireEvent(BI.MultiSelectNoBarCombo.EVENT_CONFIRM);
        self.wants2Quit = false;
      }

      self.requesting = false;
    }
  },
  _join: function _join(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this._assertValue(this.storeValue);

    if (this.storeValue.type === res.type) {
      var map = this._makeMap(this.storeValue.value);

      BI.each(res.value, function (i, v) {
        if (!map[v]) {
          BI.pushDistinct(self.storeValue.value, v);
          BI.remove(self.storeValue.assist, v);
          map[v] = v;
        }
      });
      var change = false;
      BI.each(res.assist, function (i, v) {
        if (BI.isNotNull(map[v])) {
          change = true;
          self.storeValue.assist && self.storeValue.assist.push(map[v]);
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      self._adjust(callback);

      return;
    }

    this._joinAll(res, callback);
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.popup.setStartValue(value);
  },
  _populate: function _populate() {
    this.combo.populate.apply(this.combo, arguments);
  },
  showView: function showView() {
    this.combo.showView();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  setValue: function setValue(v) {
    this.storeValue = {
      type: BI.Selection.Multi,
      value: v || []
    };
    this.combo.setValue(this.storeValue);
    this.numberCounter.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue.value);
  },
  populate: function populate() {
    this._populate.apply(this, arguments);

    this.numberCounter.populateSwitcher.apply(this.numberCounter, arguments);
  }
});
BI.extend(BI.MultiSelectNoBarCombo, {
  REQ_GET_DATA_LENGTH: 1,
  REQ_GET_ALL_DATA: -1
});
BI.MultiSelectNoBarCombo.EVENT_BLUR = "EVENT_BLUR";
BI.MultiSelectNoBarCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiSelectNoBarCombo.EVENT_STOP = "EVENT_STOP";
BI.MultiSelectNoBarCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiSelectNoBarCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.MultiSelectNoBarCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.multi_select_no_bar_combo", BI.MultiSelectNoBarCombo);

/***/ }),
/* 817 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.MultiSelectInsertCombo
 * @extends BI.Single
 */
BI.MultiSelectInsertCombo = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectInsertCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-insert-combo",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      height: 24,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      allowEdit: true
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.MultiSelectInsertCombo.superclass._init.apply(this, arguments);

    var assertShowValue = function assertShowValue() {
      if (BI.isKey(self._startValue)) {
        if (self.storeValue.type === BI.Selection.All) {
          BI.remove(self.storeValue.value, self._startValue);
          self.storeValue.assist = self.storeValue.assist || [];
          BI.pushDistinct(self.storeValue.assist, self._startValue);
        } else {
          BI.pushDistinct(self.storeValue.value, self._startValue);
          BI.remove(self.storeValue.assist, self._startValue);
        }
      }

      self.trigger.getSearcher().setState(self.storeValue);
      self.numberCounter.setButtonChecked(self.storeValue);
    };

    this.storeValue = BI.deepClone(o.value) || {}; // 标记正在请求数据

    this.requesting = false;
    this.trigger = BI.createWidget({
      type: "bi.multi_select_insert_trigger",
      allowEdit: o.allowEdit,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      text: o.text,
      watermark: o.watermark,
      defaultText: o.defaultText,
      // adapter: this.popup,
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      valueFormatter: o.valueFormatter,
      itemsCreator: BI.bind(this._itemsCreator4Trigger, this),
      itemHeight: o.itemHeight,
      value: this.storeValue
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_FOCUS, function () {
      self.fireEvent(BI.MultiSelectInsertCombo.EVENT_FOCUS);
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_BLUR, function () {
      self.fireEvent(BI.MultiSelectInsertCombo.EVENT_BLUR);
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_START, function () {
      self._setStartValue("");

      this.getSearcher().setValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_STOP, function () {
      self._setStartValue("");

      self.fireEvent(BI.MultiSelectInsertCombo.EVENT_STOP);
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_PAUSE, function () {
      self._addItem(assertShowValue, true);

      self.fireEvent(BI.MultiSelectInsertCombo.EVENT_ADD_ITEM, this.getSearcher().getKeyword());
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_SEARCHING, function (keywords) {
      var last = BI.last(keywords);
      keywords = BI.initial(keywords || []);

      if (keywords.length > 0) {
        self._joinKeywords(keywords, function () {
          if (BI.endWith(last, BI.BlankSplitChar)) {
            self.combo.setValue(self.storeValue);
            assertShowValue();
            self.combo.populate();

            self._setStartValue("");
          } else {
            self.combo.setValue(self.storeValue);
            assertShowValue();
          }

          self._dataChange = true;
        });

        this.getSearcher().getKeywordsLength() > 2000 && BI.Msg.alert(BI.i18nText("BI-Basic_Prompt"), BI.i18nText("BI-Basic_Too_Much_Value_Get_Two_Thousand"));
      }

      self.fireEvent(BI.MultiSelectInsertCombo.EVENT_SEARCHING);
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_CHANGE, function (value, obj) {
      if (obj instanceof BI.MultiSelectBar) {
        self._joinAll(this.getValue(), function () {
          assertShowValue();
          self.fireEvent(BI.MultiSelectInsertCombo.EVENT_CLICK_ITEM);
        });
      } else {
        self._join(this.getValue(), function () {
          assertShowValue();
          self.fireEvent(BI.MultiSelectInsertCombo.EVENT_CLICK_ITEM);
        });
      }

      self._dataChange = true;
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_BEFORE_COUNTER_POPUPVIEW, function () {
      // counter的值随点击项的改变而改变, 点击counter的时候不需要setValue(counter会请求刷新计数)
      // 只需要更新查看面板的selectedValue用以请求已选数据
      self.numberCounter.updateSelectedValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_COUNTER_CLICK, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      cls: o.simple ? "bi-border-bottom" : "bi-border bi-border-radius",
      toggle: !o.allowEdit,
      el: this.trigger,
      adjustLength: 1,
      container: o.container,
      popup: {
        type: "bi.multi_select_popup_view",
        ref: function ref() {
          self.popup = this;
          self.trigger.setAdapter(this);
          self.numberCounter.setAdapter(this);
        },
        listeners: [{
          eventName: BI.MultiSelectPopupView.EVENT_CHANGE,
          action: function action() {
            self._dataChange = true;
            self.storeValue = this.getValue();

            self._adjust(function () {
              assertShowValue();
            });

            self.fireEvent(BI.MultiSelectInsertCombo.EVENT_CLICK_ITEM);
          }
        }, {
          eventName: BI.MultiSelectPopupView.EVENT_CLICK_CONFIRM,
          action: function action() {
            self._defaultState();
          }
        }, {
          eventName: BI.MultiSelectPopupView.EVENT_CLICK_CLEAR,
          action: function action() {
            self._dataChange = true;
            self.setValue();

            self._defaultState();
          }
        }],
        itemsCreator: o.itemsCreator,
        valueFormatter: o.valueFormatter,
        itemHeight: o.itemHeight,
        onLoaded: function onLoaded() {
          BI.nextTick(function () {
            self.combo.adjustWidth();
            self.combo.adjustHeight();
            self.numberCounter.adjustView();
            self.trigger.getSearcher().adjustView();
          });
        }
      },
      value: o.value,
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0 && self.numberCounter.element.find(e.target).length === 0;
      }
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      if (!this.isViewVisible()) {
        self._dataChange = false; // 标记数据是否发生变化
      }

      this.setValue(self.storeValue);
      BI.nextTick(function () {
        self._populate();
      });
    }); // 当退出的时候如果还在处理请求，则等请求结束后再对外发确定事件

    this.wants2Quit = false;
    this.combo.on(BI.Combo.EVENT_AFTER_HIDEVIEW, function () {
      // important:关闭弹出时又可能没有退出编辑状态
      self._stopEditing();

      if (self.requesting === true) {
        self.wants2Quit = true;
      } else {
        self._dataChange && self.fireEvent(BI.MultiSelectInsertCombo.EVENT_CONFIRM);
      }
    });
    var triggerBtn = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.height,
      height: o.height,
      cls: "multi-select-trigger-icon-button"
    });
    triggerBtn.on(BI.TriggerIconButton.EVENT_CHANGE, function () {
      self.numberCounter.hideView();

      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    this.numberCounter = BI.createWidget({
      type: "bi.multi_select_check_selected_switcher",
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      valueFormatter: o.valueFormatter,
      itemsCreator: BI.bind(this._itemsCreator4Trigger, this),
      value: o.value
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_TRIGGER_CHANGE, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_BEFORE_POPUPVIEW, function () {
      this.updateSelectedValue(self.storeValue);
    });
    this.numberCounter.on(BI.Events.VIEW, function (b) {
      BI.nextTick(function () {
        // 自动调整宽度
        self.trigger.refreshPlaceHolderWidth(b === true ? self.numberCounter.element.outerWidth() + 8 : 0);
      });
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_AFTER_HIDEVIEW, function () {
      BI.nextTick(function () {
        // 收起时自动调整宽度
        self.trigger.refreshPlaceHolderWidth(0);
      });
    });
    this.trigger.element.click(function (e) {
      if (self.trigger.element.find(e.target).length > 0) {
        self.numberCounter.hideView();
      }
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.combo,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: triggerBtn,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: {
          type: "bi.vertical_adapt",
          items: [this.numberCounter]
        },
        right: o.height,
        top: 0,
        height: o.height
      }]
    });
  },
  _itemsCreator4Trigger: function _itemsCreator4Trigger(op, callback) {
    var self = this,
        o = this.options;
    o.itemsCreator(op, function (res) {
      if (op.times === 1 && BI.isNotNull(op.keywords)) {
        // 预防trigger内部把当前的storeValue改掉
        self.trigger.setValue(BI.deepClone(self.getValue()));
      }

      callback.apply(self, arguments);
    });
  },
  _addItem: function _addItem(assertShowValue) {
    var self = this;
    var keyword = this.trigger.getSearcher().getKeyword();

    this._join({
      type: BI.Selection.Multi,
      value: [keyword]
    }, function () {
      // 如果在不选的状态下直接把该值添加进来
      if (self.storeValue.type === BI.Selection.Multi) {
        BI.pushDistinct(self.storeValue.value, keyword);
      }

      self.combo.setValue(self.storeValue);

      self._setStartValue(keyword);

      assertShowValue();
      self.populate();

      self._setStartValue("");

      self._dataChange = true;
    });
  },
  _stopEditing: function _stopEditing() {
    this.trigger.stopEditing();
    this.numberCounter.hideView();
  },
  _defaultState: function _defaultState() {
    this._stopEditing();

    this.combo.hideView();
  },
  _assertValue: function _assertValue(val) {
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
  },
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _joinKeywords: function _joinKeywords(keywords, callback) {
    var self = this,
        o = this.options;

    this._assertValue(this.storeValue);

    this.requesting = true;
    digest();

    function digest() {
      BI.each(keywords, function (i, val) {
        self.storeValue.type === BI.Selection.Multi ? BI.pushDistinct(self.storeValue.value, val) : BI.remove(self.storeValue.value, val);
      });

      self._adjust(callback);
    }
  },
  _joinAll: function _joinAll(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this.requesting = true;

    if (this.storeValue.type === res.type) {
      var result = BI.Func.getSearchResult(BI.map(this.storeValue.value, function (_i, v) {
        return {
          text: o.valueFormatter(v) || v,
          value: v
        };
      }), this.trigger.getKey());
      var change = false;

      var map = this._makeMap(this.storeValue.value);

      BI.each(BI.concat(result.match, result.find), function (i, obj) {
        var v = obj.value;

        if (BI.isNotNull(map[v])) {
          change = true;
          self.storeValue.assist && self.storeValue.assist.push(map[v]);
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      this._adjust(callback);

      return;
    }

    o.itemsCreator({
      type: BI.MultiSelectInsertCombo.REQ_GET_ALL_DATA,
      keywords: [this.trigger.getKey()],
      selectedValues: BI.filter(this.storeValue.value, function (_i, v) {
        return !BI.contains(res.value, v);
      })
    }, function (ob) {
      var items = BI.map(ob.items, "value");

      var selectedMap = self._makeMap(self.storeValue.value);

      var notSelectedMap = self._makeMap(res.value);

      var newItems = [];
      BI.each(items, function (i, item) {
        if (BI.isNotNull(selectedMap[items[i]])) {
          self.storeValue.assist && self.storeValue.assist.push(selectedMap[items[i]]);
          delete selectedMap[items[i]];
        }

        if (BI.isNull(notSelectedMap[items[i]])) {
          BI.remove(self.storeValue.assist, item);
          newItems.push(item);
        }
      });
      self.storeValue.value = newItems.concat(BI.values(selectedMap));

      self._adjust(callback);
    });
  },
  _adjust: function _adjust(callback) {
    var self = this,
        o = this.options;
    adjust();
    callback();

    function adjust() {
      if (self.wants2Quit === true) {
        self._dataChange && self.fireEvent(BI.MultiSelectInsertCombo.EVENT_CONFIRM);
        self.wants2Quit = false;
      }

      self.requesting = false;
    }
  },
  _join: function _join(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this._assertValue(this.storeValue);

    if (this.storeValue.type === res.type) {
      var map = this._makeMap(this.storeValue.value);

      BI.each(res.value, function (i, v) {
        if (!map[v]) {
          BI.pushDistinct(self.storeValue.value, v); // value更新的时候assist也需要更新

          BI.remove(self.storeValue.assist, v);
          map[v] = v;
        }
      });
      var change = false;
      BI.each(res.assist, function (i, v) {
        if (BI.isNotNull(map[v])) {
          change = true;
          self.storeValue.assist && self.storeValue.assist.push(map[v]);
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      self._adjust(callback);

      return;
    }

    this._joinAll(res, callback);
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.popup.setStartValue(value);
  },
  _populate: function _populate() {
    this.combo.populate.apply(this.combo, arguments);
  },
  showView: function showView() {
    this.combo.showView();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  setValue: function setValue(v) {
    this.storeValue = v || {};

    this._assertValue(this.storeValue);

    this.combo.setValue(this.storeValue);
    this.numberCounter.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue);
  },
  populate: function populate() {
    this._populate.apply(this, arguments);

    this.numberCounter.populateSwitcher.apply(this.numberCounter, arguments);
  }
});
BI.extend(BI.MultiSelectInsertCombo, {
  REQ_GET_DATA_LENGTH: 1,
  REQ_GET_ALL_DATA: -1
});
BI.MultiSelectInsertCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiSelectInsertCombo.EVENT_BLUR = "EVENT_BLUR";
BI.MultiSelectInsertCombo.EVENT_STOP = "EVENT_STOP";
BI.MultiSelectInsertCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiSelectInsertCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.MultiSelectInsertCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.MultiSelectInsertCombo.EVENT_ADD_ITEM = "EVENT_ADD_ITEM";
BI.shortcut("bi.multi_select_insert_combo", BI.MultiSelectInsertCombo);

/***/ }),
/* 818 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.MultiSelectInsertCombo
 * @extends BI.Single
 */
BI.MultiSelectInsertNoBarCombo = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectInsertNoBarCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-insert-combo-no-bar",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      height: 24
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.MultiSelectInsertNoBarCombo.superclass._init.apply(this, arguments);

    var assertShowValue = function assertShowValue() {
      if (BI.isKey(self._startValue)) {
        if (self.storeValue.type === BI.Selection.All) {
          BI.remove(self.storeValue.value, self._startValue);
          self.storeValue.assist = self.storeValue.assist || [];
          BI.pushDistinct(self.storeValue.assist, self._startValue);
        } else {
          BI.pushDistinct(self.storeValue.value, self._startValue);
          BI.remove(self.storeValue.assist, self._startValue);
        }
      }

      self.trigger.getSearcher().setState(self.storeValue);
      self.numberCounter.setButtonChecked(self.storeValue);
    };

    this.storeValue = {
      type: BI.Selection.Multi,
      value: BI.deepClone(o.value) || []
    }; // 标记正在请求数据

    this.requesting = false;
    this.trigger = BI.createWidget({
      type: "bi.multi_select_insert_trigger",
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      text: o.text,
      // adapter: this.popup,
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      valueFormatter: o.valueFormatter,
      itemsCreator: BI.bind(this._itemsCreator4Trigger, this),
      itemHeight: o.itemHeight,
      value: {
        type: BI.Selection.Multi,
        value: o.value
      }
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_START, function () {
      self._setStartValue("");

      this.getSearcher().setValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_STOP, function () {
      self._setStartValue("");
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_PAUSE, function () {
      self._addItem(assertShowValue, true);

      self.fireEvent(BI.MultiSelectInsertNoBarCombo.EVENT_ADD_ITEM, this.getSearcher().getKeyword());
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_SEARCHING, function (keywords) {
      var last = BI.last(keywords);
      keywords = BI.initial(keywords || []);

      if (keywords.length > 0) {
        self._joinKeywords(keywords, function () {
          if (BI.endWith(last, BI.BlankSplitChar)) {
            self.combo.setValue(self.storeValue);
            assertShowValue();
            self.combo.populate();

            self._setStartValue("");
          } else {
            self.combo.setValue(self.storeValue);
            assertShowValue();
          }

          self._dataChange = true;
        });

        this.getSearcher().getKeywordsLength() > 2000 && BI.Msg.alert(BI.i18nText("BI-Basic_Prompt"), BI.i18nText("BI-Basic_Too_Much_Value_Get_Two_Thousand"));
      }
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_CHANGE, function (value, obj) {
      if (obj instanceof BI.MultiSelectBar) {
        self._joinAll(this.getValue(), function () {
          assertShowValue();
        });
      } else {
        self._join(this.getValue(), function () {
          assertShowValue();
        });
      }

      self._dataChange = true;
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_BEFORE_COUNTER_POPUPVIEW, function () {
      // counter的值随点击项的改变而改变, 点击counter的时候不需要setValue(counter会请求刷新计数)
      // 只需要更新查看面板的selectedValue用以请求已选数据
      self.numberCounter.updateSelectedValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectInsertTrigger.EVENT_COUNTER_CLICK, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      cls: o.simple ? "bi-border-bottom" : "bi-border bi-border-radius",
      toggle: false,
      container: o.container,
      el: this.trigger,
      adjustLength: 1,
      popup: {
        type: "bi.multi_select_no_bar_popup_view",
        ref: function ref() {
          self.popup = this;
          self.trigger.setAdapter(this);
          self.numberCounter.setAdapter(this);
        },
        listeners: [{
          eventName: BI.MultiSelectPopupView.EVENT_CHANGE,
          action: function action() {
            self._dataChange = true;
            self.storeValue = this.getValue();

            self._adjust(function () {
              assertShowValue();
            });
          }
        }, {
          eventName: BI.MultiSelectPopupView.EVENT_CLICK_CONFIRM,
          action: function action() {
            self._defaultState();
          }
        }, {
          eventName: BI.MultiSelectPopupView.EVENT_CLICK_CLEAR,
          action: function action() {
            self._dataChange = true;
            self.setValue();

            self._defaultState();
          }
        }],
        itemsCreator: o.itemsCreator,
        itemHeight: o.itemHeight,
        valueFormatter: o.valueFormatter,
        onLoaded: function onLoaded() {
          BI.nextTick(function () {
            self.combo.adjustWidth();
            self.combo.adjustHeight();
            self.numberCounter.adjustView();
            self.trigger.getSearcher().adjustView();
          });
        }
      },
      value: {
        type: BI.Selection.Multi,
        value: o.value
      },
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0 && self.numberCounter.element.find(e.target).length === 0;
      }
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      if (!this.isViewVisible()) {
        self._dataChange = false; // 标记数据是否发生变化
      }

      this.setValue(self.storeValue);
      BI.nextTick(function () {
        self._populate();
      });
    }); // 当退出的时候如果还在处理请求，则等请求结束后再对外发确定事件

    this.wants2Quit = false;
    this.combo.on(BI.Combo.EVENT_AFTER_HIDEVIEW, function () {
      // important:关闭弹出时又可能没有退出编辑状态
      self._stopEditing();

      if (self.requesting === true) {
        self.wants2Quit = true;
      } else {
        self._dataChange && self.fireEvent(BI.MultiSelectInsertNoBarCombo.EVENT_CONFIRM);
      }
    });
    var triggerBtn = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.height,
      height: o.height,
      cls: "multi-select-trigger-icon-button"
    });
    triggerBtn.on(BI.TriggerIconButton.EVENT_CHANGE, function () {
      self.numberCounter.hideView();

      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    this.numberCounter = BI.createWidget({
      type: "bi.multi_select_check_selected_switcher",
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      valueFormatter: o.valueFormatter,
      itemsCreator: BI.bind(this._itemsCreator4Trigger, this),
      value: {
        type: BI.Selection.Multi,
        value: o.value
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_TRIGGER_CHANGE, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_BEFORE_POPUPVIEW, function () {
      this.updateSelectedValue(self.storeValue);
    });
    this.numberCounter.on(BI.Events.VIEW, function (b) {
      BI.nextTick(function () {
        // 自动调整宽度
        self.trigger.refreshPlaceHolderWidth(b === true ? self.numberCounter.element.outerWidth() + 8 : 0);
      });
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_AFTER_HIDEVIEW, function () {
      BI.nextTick(function () {
        // 收起时自动调整宽度
        self.trigger.refreshPlaceHolderWidth(0);
      });
    });
    this.trigger.element.click(function (e) {
      if (self.trigger.element.find(e.target).length > 0) {
        self.numberCounter.hideView();
      }
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.combo,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: triggerBtn,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: {
          type: "bi.vertical_adapt",
          items: [this.numberCounter]
        },
        right: o.height,
        top: 0,
        height: o.height
      }]
    });
  },
  _itemsCreator4Trigger: function _itemsCreator4Trigger(op, callback) {
    var self = this,
        o = this.options;
    o.itemsCreator(op, function (res) {
      if (op.times === 1 && BI.isNotNull(op.keywords)) {
        // 预防trigger内部把当前的storeValue改掉
        self.trigger.setValue(BI.deepClone(self.storeValue));
      }

      callback.apply(self, arguments);
    });
  },
  _addItem: function _addItem(assertShowValue) {
    var self = this;
    var keyword = this.trigger.getSearcher().getKeyword();

    this._join({
      type: BI.Selection.Multi,
      value: [keyword]
    }, function () {
      // 如果在不选的状态下直接把该值添加进来
      if (self.storeValue.type === BI.Selection.Multi) {
        BI.pushDistinct(self.storeValue.value, keyword);
      }

      self.combo.setValue(self.storeValue);

      self._setStartValue(keyword);

      assertShowValue();
      self.populate();

      self._setStartValue("");

      self._dataChange = true;
    });
  },
  _stopEditing: function _stopEditing() {
    this.trigger.stopEditing();
    this.numberCounter.hideView();
  },
  _defaultState: function _defaultState() {
    this._stopEditing();

    this.combo.hideView();
  },
  _assertValue: function _assertValue(val) {
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
  },
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _joinKeywords: function _joinKeywords(keywords, callback) {
    var self = this,
        o = this.options;

    this._assertValue(this.storeValue);

    this.requesting = true;
    digest();

    function digest() {
      BI.each(keywords, function (i, val) {
        self.storeValue.type === BI.Selection.Multi ? BI.pushDistinct(self.storeValue.value, val) : BI.remove(self.storeValue.value, val);
      });

      self._adjust(callback);
    }
  },
  _joinAll: function _joinAll(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this.requesting = true;

    if (this.storeValue.type === res.type) {
      var result = BI.Func.getSearchResult(BI.map(this.storeValue.value, function (_i, v) {
        return {
          text: o.valueFormatter(v) || v,
          value: v
        };
      }), this.trigger.getKey());
      var change = false;

      var map = this._makeMap(this.storeValue.value);

      BI.each(BI.concat(result.match, result.find), function (i, obj) {
        var v = obj.value;

        if (BI.isNotNull(map[v])) {
          change = true;
          self.storeValue.assist && self.storeValue.assist.push(map[v]);
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      this._adjust(callback);

      return;
    }

    o.itemsCreator({
      type: BI.MultiSelectInsertNoBarCombo.REQ_GET_ALL_DATA,
      keywords: [this.trigger.getKey()],
      selectedValues: BI.filter(this.storeValue.value, function (_i, v) {
        return !BI.contains(res.value, v);
      })
    }, function (ob) {
      var items = BI.map(ob.items, "value");

      var selectedMap = self._makeMap(self.storeValue.value);

      var notSelectedMap = self._makeMap(res.value);

      var newItems = [];
      BI.each(items, function (i, item) {
        if (BI.isNotNull(selectedMap[items[i]])) {
          self.storeValue.assist && self.storeValue.assist.push(selectedMap[items[i]]);
          delete selectedMap[items[i]];
        }

        if (BI.isNull(notSelectedMap[items[i]])) {
          BI.remove(self.storeValue.assist, item);
          newItems.push(item);
        }
      });
      self.storeValue.value = newItems.concat(BI.values(selectedMap));

      self._adjust(callback);
    });
  },
  _adjust: function _adjust(callback) {
    var self = this,
        o = this.options;
    adjust();
    callback();

    function adjust() {
      if (self.wants2Quit === true) {
        self._dataChange && self.fireEvent(BI.MultiSelectInsertNoBarCombo.EVENT_CONFIRM);
        self.wants2Quit = false;
      }

      self.requesting = false;
    }
  },
  _join: function _join(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this._assertValue(this.storeValue);

    if (this.storeValue.type === res.type) {
      var map = this._makeMap(this.storeValue.value);

      BI.each(res.value, function (i, v) {
        if (!map[v]) {
          self.storeValue.value.push(v);
          BI.remove(self.storeValue.assist, v);
          map[v] = v;
        }
      });
      var change = false;
      BI.each(res.assist, function (i, v) {
        if (BI.isNotNull(map[v])) {
          change = true;
          self.storeValue.assist && self.storeValue.assist.push(map[v]);
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      self._adjust(callback);

      return;
    }

    this._joinAll(res, callback);
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.popup.setStartValue(value);
  },
  _populate: function _populate() {
    this.combo.populate.apply(this.combo, arguments);
  },
  showView: function showView() {
    this.combo.showView();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  setValue: function setValue(v) {
    this.storeValue = {
      type: BI.Selection.Multi,
      value: v || []
    };
    this.combo.setValue(this.storeValue);
    this.numberCounter.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue.value);
  },
  populate: function populate() {
    this._populate.apply(this, arguments);

    this.numberCounter.populateSwitcher.apply(this.numberCounter, arguments);
  }
});
BI.extend(BI.MultiSelectInsertNoBarCombo, {
  REQ_GET_DATA_LENGTH: 1,
  REQ_GET_ALL_DATA: -1
});
BI.MultiSelectInsertNoBarCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.MultiSelectInsertNoBarCombo.EVENT_ADD_ITEM = "EVENT_ADD_ITEM";
BI.shortcut("bi.multi_select_insert_no_bar_combo", BI.MultiSelectInsertNoBarCombo);

/***/ }),
/* 819 */
/***/ (function(module, exports) {

/**
 *
 * 复选下拉框
 * @class BI.MultiSelectInsertTrigger
 * @extends BI.Trigger
 */
BI.MultiSelectInsertTrigger = BI.inherit(BI.Trigger, {
  constants: {
    height: 14,
    rgap: 4,
    lgap: 4
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectInsertTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-trigger",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      itemHeight: 24,
      searcher: {},
      switcher: {},
      adapter: null,
      masker: {},
      allowEdit: true
    });
  },
  _init: function _init() {
    BI.MultiSelectInsertTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.searcher = BI.createWidget(o.searcher, {
      type: "bi.multi_select_insert_searcher",
      height: o.height,
      text: o.text,
      defaultText: o.defaultText,
      itemsCreator: o.itemsCreator,
      valueFormatter: o.valueFormatter,
      itemHeight: o.itemHeight,
      watermark: o.watermark,
      popup: {},
      adapter: o.adapter,
      masker: o.masker,
      value: o.value
    });
    this.searcher.on(BI.MultiSelectInsertSearcher.EVENT_START, function () {
      self.fireEvent(BI.MultiSelectInsertTrigger.EVENT_START);
    });
    this.searcher.on(BI.MultiSelectInsertSearcher.EVENT_PAUSE, function () {
      self.fireEvent(BI.MultiSelectInsertTrigger.EVENT_PAUSE);
    });
    this.searcher.on(BI.MultiSelectInsertSearcher.EVENT_SEARCHING, function () {
      self.fireEvent(BI.MultiSelectInsertTrigger.EVENT_SEARCHING, arguments);
    });
    this.searcher.on(BI.MultiSelectInsertSearcher.EVENT_STOP, function () {
      self.fireEvent(BI.MultiSelectInsertTrigger.EVENT_STOP);
    });
    this.searcher.on(BI.MultiSelectInsertSearcher.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectInsertTrigger.EVENT_CHANGE, arguments);
    });
    this.searcher.on(BI.MultiSelectInsertSearcher.EVENT_BLUR, function () {
      self.fireEvent(BI.MultiSelectInsertTrigger.EVENT_BLUR);
    });
    this.searcher.on(BI.MultiSelectInsertSearcher.EVENT_FOCUS, function () {
      self.fireEvent(BI.MultiSelectInsertTrigger.EVENT_FOCUS);
    });
    this.wrapNumberCounter = BI.createWidget({
      type: "bi.layout"
    });
    this.wrapper = BI.createWidget({
      type: "bi.htape",
      element: this,
      items: [{
        el: this.searcher,
        width: "fill"
      }, {
        el: this.wrapNumberCounter,
        width: 0
      }, {
        el: BI.createWidget(),
        width: 24
      }]
    });
    !o.allowEdit && BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.text",
          title: function title() {
            return self.searcher.getState();
          }
        },
        left: 0,
        right: 24,
        top: 0,
        bottom: 0
      }]
    });
  },

  /**
   * 重新调整numberCounter的空白占位符
   */
  refreshPlaceHolderWidth: function refreshPlaceHolderWidth(width) {
    this.wrapper.attr("items")[1].width = width;
    this.wrapper.resize();
  },
  getSearcher: function getSearcher() {
    return this.searcher;
  },
  stopEditing: function stopEditing() {
    this.searcher.stopSearch();
  },
  setAdapter: function setAdapter(adapter) {
    this.searcher.setAdapter(adapter);
  },
  setValue: function setValue(ob) {
    this.searcher.setValue(ob);
  },
  getKey: function getKey() {
    return this.searcher.getKey();
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  }
});
BI.MultiSelectInsertTrigger.EVENT_TRIGGER_CLICK = "EVENT_TRIGGER_CLICK";
BI.MultiSelectInsertTrigger.EVENT_COUNTER_CLICK = "EVENT_COUNTER_CLICK";
BI.MultiSelectInsertTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiSelectInsertTrigger.EVENT_START = "EVENT_START";
BI.MultiSelectInsertTrigger.EVENT_STOP = "EVENT_STOP";
BI.MultiSelectInsertTrigger.EVENT_PAUSE = "EVENT_PAUSE";
BI.MultiSelectInsertTrigger.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiSelectInsertTrigger.EVENT_BEFORE_COUNTER_POPUPVIEW = "EVENT_BEFORE_COUNTER_POPUPVIEW";
BI.MultiSelectInsertTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiSelectInsertTrigger.EVENT_BLUR = "EVENT_BLUR";
BI.shortcut("bi.multi_select_insert_trigger", BI.MultiSelectInsertTrigger);

/***/ }),
/* 820 */
/***/ (function(module, exports) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 多选加载数据面板
 * Created by guy on 15/11/2.
 * @class BI.MultiSelectLoader
 * @extends Widget
 */
BI.MultiSelectLoader = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectLoader.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-loader",
      logic: {
        dynamic: true
      },
      el: {
        height: 400
      },
      valueFormatter: BI.emptyFn,
      itemsCreator: BI.emptyFn,
      itemFormatter: BI.emptyFn,
      onLoaded: BI.emptyFn,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      isDefaultInit: false
    });
  },
  _init: function _init() {
    BI.MultiSelectLoader.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    var _hasNext = false;
    this.storeValue = opts.value || {};

    this._assertValue(this.storeValue);

    this.button_group = BI.createWidget({
      type: "bi.select_list",
      logic: opts.logic,
      toolbar: {
        type: "bi.multi_select_bar",
        cls: "bi-list-item-active",
        height: this.options.itemHeight || BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        iconWrapperWidth: 36
      },
      el: BI.extend({
        onLoaded: opts.onLoaded,
        el: {
          type: "bi.multi_select_inner_loader",
          isDefaultInit: opts.isDefaultInit
        }
      }, opts.el),
      itemsCreator: function itemsCreator(op, callback) {
        var startValue = self._startValue;
        self.storeValue && (op = BI.extend(op || {}, {
          selectedValues: BI.isKey(startValue) && self.storeValue.type === BI.Selection.Multi ? self.storeValue.value.concat(startValue) : self.storeValue.value
        }));
        opts.itemsCreator(op, function (ob) {
          _hasNext = ob.hasNext;
          var firstItems = [];

          if (op.times === 1 && self.storeValue) {
            var json = BI.map(self.storeValue.value, function (i, v) {
              var txt = opts.valueFormatter(v) || v;
              return {
                text: txt,
                value: v,
                title: txt,
                selected: self.storeValue.type === BI.Selection.Multi
              };
            });

            if (BI.isKey(self._startValue) && !BI.contains(self.storeValue.value, self._startValue)) {
              var txt = opts.valueFormatter(startValue) || startValue;
              json.unshift({
                text: txt,
                value: startValue,
                title: txt,
                selected: true
              });
            }

            firstItems = self._createItems(json);
          }

          callback(firstItems.concat(self._createItems(ob.items)), ob.keyword || "");

          if (op.times === 1 && self.storeValue) {
            BI.isKey(startValue) && (self.storeValue.type === BI.Selection.All ? BI.remove(self.storeValue.value, startValue) : BI.pushDistinct(self.storeValue.value, startValue));
            self.setValue(self.storeValue);
          }

          op.times === 1 && self._scrollToTop();
        });
      },
      hasNext: function hasNext() {
        return _hasNext;
      },
      value: this.storeValue
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Top), BI.extend({
      scrolly: true,
      vgap: 5
    }, opts.logic, {
      items: BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Top, this.button_group)
    }))));
    this.button_group.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.button_group.on(BI.SelectList.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectLoader.EVENT_CHANGE, arguments);
    });
  },
  _createItems: function _createItems(items) {
    var _this = this;

    var allSelected = this.isAllSelected();
    var itemFormatter = this.options.itemFormatter;
    return BI.map(items, function (i, item) {
      return _objectSpread(_objectSpread({
        type: "bi.multi_select_item",
        logic: _this.options.logic,
        cls: "bi-list-item-active",
        height: _this.options.itemHeight || BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        selected: allSelected,
        iconWrapperWidth: 36
      }, item), itemFormatter(item));
    });
  },
  _scrollToTop: function _scrollToTop() {
    var self = this;
    BI.delay(function () {
      self.button_group.element.scrollTop(0);
    }, 30);
  },
  isAllSelected: function isAllSelected() {
    return this.button_group.isAllSelected();
  },
  _assertValue: function _assertValue(val) {
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
  },
  setStartValue: function setStartValue(v) {
    this._startValue = v;
  },
  setValue: function setValue(v) {
    this.storeValue = v || {};

    this._assertValue(this.storeValue);

    this.button_group.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return this.button_group.getValue();
  },
  getAllButtons: function getAllButtons() {
    return this.button_group.getAllButtons();
  },
  empty: function empty() {
    this.button_group.empty();
  },
  populate: function populate(items) {
    // arguments.length为0时对arguments[0]赋值后不同环境对其length的取值不同(nashorn)
    if (BI.isNotNull(items)) {
      arguments[0] = this._createItems(items);
    }

    this.button_group.populate.apply(this.button_group, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.button_group.resetHeight(h - 10);
  },
  resetWidth: function resetWidth(w) {
    this.button_group.resetWidth(w);
  }
});
BI.MultiSelectLoader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_loader", BI.MultiSelectLoader);

/***/ }),
/* 821 */
/***/ (function(module, exports) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 多选加载数据面板
 * Created by guy on 15/11/2.
 * @class BI.MultiSelectNoBarLoader
 * @extends Widget
 */
BI.MultiSelectNoBarLoader = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectNoBarLoader.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-loader",
      logic: {
        dynamic: true
      },
      el: {
        height: 400
      },
      valueFormatter: BI.emptyFn,
      itemsCreator: BI.emptyFn,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      onLoaded: BI.emptyFn,
      itemFormatter: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.MultiSelectNoBarLoader.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    var _hasNext = false;
    this.storeValue = opts.value || {};

    this._assertValue(this.storeValue);

    this.button_group = BI.createWidget(BI.extend({
      type: "bi.list_pane",
      onLoaded: opts.onLoaded,
      el: {
        type: "bi.loader",
        isDefaultInit: false,
        logic: {
          dynamic: true,
          scrolly: true
        },
        el: {
          chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
          behaviors: {
            redmark: function redmark() {
              return true;
            }
          },
          layouts: [{
            type: "bi.vertical"
          }]
        }
      },
      itemsCreator: function itemsCreator(op, callback) {
        var startValue = self._startValue;
        self.storeValue && (op = BI.extend(op || {}, {
          selectedValues: BI.isKey(startValue) && self.storeValue.type === BI.Selection.Multi ? self.storeValue.value.concat(startValue) : self.storeValue.value
        }));
        opts.itemsCreator(op, function (ob) {
          _hasNext = ob.hasNext;
          var firstItems = [];

          if (op.times === 1 && self.storeValue) {
            var json = BI.map(self.storeValue.value, function (i, v) {
              var txt = opts.valueFormatter(v) || v;
              return {
                text: txt,
                value: v,
                title: txt,
                selected: self.storeValue.type === BI.Selection.Multi
              };
            });

            if (BI.isKey(self._startValue) && !BI.contains(self.storeValue.value, self._startValue)) {
              var txt = opts.valueFormatter(startValue) || startValue;
              json.unshift({
                text: txt,
                value: startValue,
                title: txt,
                selected: true
              });
            }

            firstItems = self._createItems(json);
          }

          callback(firstItems.concat(self._createItems(ob.items)), ob.keyword || "");

          if (op.times === 1 && self.storeValue) {
            BI.isKey(startValue) && (self.storeValue.type === BI.Selection.All ? BI.remove(self.storeValue.value, startValue) : BI.pushDistinct(self.storeValue.value, startValue));
            self.setValue(self.storeValue);
          }

          op.times === 1 && self._scrollToTop();
        });
      },
      hasNext: function hasNext() {
        return _hasNext;
      },
      value: this.storeValue
    }, opts.el));
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      items: [this.button_group],
      vgap: 5
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.button_group.on(BI.SelectList.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectNoBarLoader.EVENT_CHANGE, arguments);
    });
  },
  _createItems: function _createItems(items) {
    var _this = this;

    return BI.map(items, function (index, item) {
      return _objectSpread(_objectSpread({
        type: "bi.multi_select_item",
        cls: "bi-list-item-active",
        logic: _this.options.logic,
        height: _this.options.itemHeight || BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        iconWrapperWidth: 36
      }, item), _this.options.itemFormatter(item));
    });
  },
  _scrollToTop: function _scrollToTop() {
    var self = this;
    BI.delay(function () {
      self.button_group.element.scrollTop(0);
    }, 30);
  },
  _assertValue: function _assertValue(val) {
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
  },
  setStartValue: function setStartValue(v) {
    this._startValue = v;
  },
  setValue: function setValue(v) {
    this.storeValue = v || {};

    this._assertValue(this.storeValue);

    this.button_group.setValue(this.storeValue.value);
  },
  getValue: function getValue() {
    return {
      type: BI.Selection.Multi,
      value: this.button_group.getValue()
    };
  },
  getAllButtons: function getAllButtons() {
    return this.button_group.getAllButtons();
  },
  empty: function empty() {
    this.button_group.empty();
  },
  populate: function populate(items) {
    if (BI.isNotNull(items)) {
      arguments[0] = this._createItems(items);
    }

    this.button_group.populate.apply(this.button_group, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.button_group.element.css({
      "max-height": BI.toPix(h)
    });
  },
  resetWidth: function resetWidth() {}
});
BI.MultiSelectNoBarLoader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_no_bar_loader", BI.MultiSelectNoBarLoader);

/***/ }),
/* 822 */
/***/ (function(module, exports) {

/**
 * 带加载的多选下拉面板
 * @class BI.MultiSelectPopupView
 * @extends Widget
 */
BI.MultiSelectPopupView = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectPopupView.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-popup-view",
      maxWidth: "auto",
      minWidth: 135,
      maxHeight: 400,
      valueFormatter: BI.emptyFn,
      itemsCreator: BI.emptyFn,
      onLoaded: BI.emptyFn,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
    });
  },
  _init: function _init() {
    BI.MultiSelectPopupView.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    this.loader = BI.createWidget({
      type: "bi.multi_select_loader",
      itemsCreator: opts.itemsCreator,
      itemHeight: opts.itemHeight,
      valueFormatter: opts.valueFormatter,
      itemFormatter: opts.itemFormatter,
      onLoaded: opts.onLoaded,
      value: opts.value
    });
    this.popupView = BI.createWidget({
      type: "bi.multi_popup_view",
      stopPropagation: false,
      maxWidth: opts.maxWidth,
      minWidth: opts.minWidth,
      maxHeight: opts.maxHeight,
      element: this,
      buttons: [BI.i18nText("BI-Basic_Clears"), BI.i18nText("BI-Basic_OK")],
      el: this.loader,
      value: opts.value
    });
    this.popupView.on(BI.MultiPopupView.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectPopupView.EVENT_CHANGE);
    });
    this.popupView.on(BI.MultiPopupView.EVENT_CLICK_TOOLBAR_BUTTON, function (index) {
      switch (index) {
        case 0:
          self.fireEvent(BI.MultiSelectPopupView.EVENT_CLICK_CLEAR);
          break;

        case 1:
          self.fireEvent(BI.MultiSelectPopupView.EVENT_CLICK_CONFIRM);
          break;
      }
    });
  },
  isAllSelected: function isAllSelected() {
    return this.loader.isAllSelected();
  },
  setStartValue: function setStartValue(v) {
    this.loader.setStartValue(v);
  },
  setValue: function setValue(v) {
    this.popupView.setValue(v);
  },
  getValue: function getValue() {
    return this.popupView.getValue();
  },
  populate: function populate(items) {
    this.popupView.populate.apply(this.popupView, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.popupView.resetHeight(h);
  },
  resetWidth: function resetWidth(w) {
    this.popupView.resetWidth(w);
  },
  setDirection: function setDirection(direction, position) {
    this.popupView.setDirection(direction, position);
  }
});
BI.MultiSelectPopupView.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiSelectPopupView.EVENT_CLICK_CONFIRM = "EVENT_CLICK_CONFIRM";
BI.MultiSelectPopupView.EVENT_CLICK_CLEAR = "EVENT_CLICK_CLEAR";
BI.shortcut("bi.multi_select_popup_view", BI.MultiSelectPopupView);

/***/ }),
/* 823 */
/***/ (function(module, exports) {

/**
 * 带加载的多选下拉面板
 * @class BI.MultiSelectPopupView
 * @extends Widget
 */
BI.MultiSelectNoBarPopupView = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectNoBarPopupView.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-popup-view",
      maxWidth: "auto",
      minWidth: 135,
      maxHeight: 400,
      valueFormatter: BI.emptyFn,
      itemsCreator: BI.emptyFn,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      onLoaded: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.MultiSelectNoBarPopupView.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    this.loader = BI.createWidget({
      type: "bi.multi_select_no_bar_loader",
      itemsCreator: opts.itemsCreator,
      itemHeight: opts.itemHeight,
      valueFormatter: opts.valueFormatter,
      itemFormatter: opts.itemFormatter,
      onLoaded: opts.onLoaded,
      value: opts.value
    });
    this.popupView = BI.createWidget({
      type: "bi.multi_popup_view",
      stopPropagation: false,
      maxWidth: opts.maxWidth,
      minWidth: opts.minWidth,
      maxHeight: opts.maxHeight,
      element: this,
      buttons: [BI.i18nText("BI-Basic_Clears"), BI.i18nText("BI-Basic_OK")],
      el: this.loader,
      value: opts.value
    });
    this.popupView.on(BI.MultiPopupView.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectNoBarPopupView.EVENT_CHANGE);
    });
    this.popupView.on(BI.MultiPopupView.EVENT_CLICK_TOOLBAR_BUTTON, function (index) {
      switch (index) {
        case 0:
          self.fireEvent(BI.MultiSelectNoBarPopupView.EVENT_CLICK_CLEAR);
          break;

        case 1:
          self.fireEvent(BI.MultiSelectNoBarPopupView.EVENT_CLICK_CONFIRM);
          break;
      }
    });
  },
  setStartValue: function setStartValue(v) {
    this.loader.setStartValue(v);
  },
  setValue: function setValue(v) {
    this.popupView.setValue(v);
  },
  getValue: function getValue() {
    return this.popupView.getValue();
  },
  populate: function populate(items) {
    this.popupView.populate.apply(this.popupView, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.popupView.resetHeight(h);
  },
  resetWidth: function resetWidth(w) {
    this.popupView.resetWidth(w);
  },
  setDirection: function setDirection(direction, position) {
    this.popupView.setDirection(direction, position);
  }
});
BI.MultiSelectNoBarPopupView.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiSelectNoBarPopupView.EVENT_CLICK_CONFIRM = "EVENT_CLICK_CONFIRM";
BI.MultiSelectNoBarPopupView.EVENT_CLICK_CLEAR = "EVENT_CLICK_CLEAR";
BI.shortcut("bi.multi_select_no_bar_popup_view", BI.MultiSelectNoBarPopupView);

/***/ }),
/* 824 */
/***/ (function(module, exports) {

/**
 *
 * 复选下拉框
 * @class BI.MultiSelectTrigger
 * @extends BI.Trigger
 */
BI.MultiSelectTrigger = BI.inherit(BI.Trigger, {
  constants: {
    height: 14,
    rgap: 4,
    lgap: 4
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-trigger",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      searcher: {},
      switcher: {},
      adapter: null,
      masker: {},
      allowEdit: true,
      itemHeight: 24
    });
  },
  _init: function _init() {
    BI.MultiSelectTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.searcher = BI.createWidget(o.searcher, {
      type: "bi.multi_select_searcher",
      height: o.height,
      text: o.text,
      defaultText: o.defaultText,
      itemsCreator: o.itemsCreator,
      itemHeight: o.itemHeight,
      valueFormatter: o.valueFormatter,
      watermark: o.watermark,
      popup: {},
      adapter: o.adapter,
      masker: o.masker,
      value: o.value
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_START, function () {
      self.fireEvent(BI.MultiSelectTrigger.EVENT_START);
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_PAUSE, function () {
      self.fireEvent(BI.MultiSelectTrigger.EVENT_PAUSE);
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_SEARCHING, function () {
      self.fireEvent(BI.MultiSelectTrigger.EVENT_SEARCHING, arguments);
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_STOP, function () {
      self.fireEvent(BI.MultiSelectTrigger.EVENT_STOP);
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectTrigger.EVENT_CHANGE, arguments);
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_BLUR, function () {
      self.fireEvent(BI.MultiSelectTrigger.EVENT_BLUR);
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_FOCUS, function () {
      self.fireEvent(BI.MultiSelectTrigger.EVENT_FOCUS);
    });
    this.wrapNumberCounter = BI.createWidget({
      type: "bi.layout"
    });
    this.wrapper = BI.createWidget({
      type: "bi.htape",
      element: this,
      items: [{
        el: this.searcher,
        width: "fill",
        rgap: 24
      }]
    });
    !o.allowEdit && BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.text",
          title: function title() {
            /** 修正REPORT-73699引入，需要考虑到传递过来的值是方法的情况 */
            var state = self.searcher.getState();

            if (BI.isFunction(state)) {
              return state();
            }

            return state;
          }
        },
        left: 0,
        right: 24,
        top: 0,
        bottom: 0
      }]
    });
  },

  /**
   * 重新调整numberCounter的空白占位符
   */
  refreshPlaceHolderWidth: function refreshPlaceHolderWidth(width) {
    this.wrapper.attr("items")[0].rgap = 24 + width;
    this.wrapper.resize();
  },
  getSearcher: function getSearcher() {
    return this.searcher;
  },
  stopEditing: function stopEditing() {
    this.searcher.stopSearch();
  },
  setAdapter: function setAdapter(adapter) {
    this.searcher.setAdapter(adapter);
  },
  setValue: function setValue(ob) {
    this.searcher.setValue(ob);
  },
  getKey: function getKey() {
    return this.searcher.getKey();
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  },
  focus: function focus() {
    this.searcher.focus();
  },
  blur: function blur() {
    this.searcher.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.searcher.setWaterMark(v);
  }
});
BI.MultiSelectTrigger.EVENT_TRIGGER_CLICK = "EVENT_TRIGGER_CLICK";
BI.MultiSelectTrigger.EVENT_COUNTER_CLICK = "EVENT_COUNTER_CLICK";
BI.MultiSelectTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiSelectTrigger.EVENT_START = "EVENT_START";
BI.MultiSelectTrigger.EVENT_STOP = "EVENT_STOP";
BI.MultiSelectTrigger.EVENT_PAUSE = "EVENT_PAUSE";
BI.MultiSelectTrigger.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiSelectTrigger.EVENT_BEFORE_COUNTER_POPUPVIEW = "EVENT_BEFORE_COUNTER_POPUPVIEW";
BI.MultiSelectTrigger.EVENT_BLUR = "EVENT_BLUR";
BI.MultiSelectTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.shortcut("bi.multi_select_trigger", BI.MultiSelectTrigger);

/***/ }),
/* 825 */
/***/ (function(module, exports) {

/**
 *
 * 在搜索框中输入文本弹出的面板
 * @class BI.MultiSelectSearchInsertPane
 * @extends Widget
 */
BI.MultiSelectSearchInsertPane = BI.inherit(BI.Widget, {
  constants: {
    height: 24,
    lgap: 10,
    tgap: 5
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectSearchInsertPane.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-search-pane bi-card",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      keywordGetter: BI.emptyFn,
      itemHeight: 24
    });
  },
  _init: function _init() {
    BI.MultiSelectSearchInsertPane.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.addNotMatchTip = BI.createWidget({
      type: "bi.label",
      text: BI.i18nText("BI-Basic_Press_Enter_To_Add_Text", ""),
      height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      cls: "bi-keyword-red-mark",
      hgap: 5
    });
    this.loader = BI.createWidget({
      type: "bi.multi_select_search_loader",
      keywordGetter: o.keywordGetter,
      valueFormatter: o.valueFormatter,
      itemFormatter: o.itemFormatter,
      itemsCreator: function itemsCreator(op, callback) {
        o.itemsCreator.apply(self, [op, function (res) {
          callback(res);
          self.setKeyword(o.keywordGetter());
        }]);
      },
      itemHeight: o.itemHeight,
      value: o.value
    });
    this.loader.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.resizer = BI.createWidget({
      type: "bi.vertical_fill",
      rowSize: ["", "fill"],
      element: this,
      items: [{
        el: this.addNotMatchTip
      }, {
        el: this.loader
      }]
    });
  },
  setKeyword: function setKeyword(keyword) {
    this.addNotMatchTip.setText(BI.i18nText("BI-Basic_Press_Enter_To_Add_Text", keyword));
  },
  isAllSelected: function isAllSelected() {
    return this.loader.isAllSelected();
  },
  hasMatched: function hasMatched() {
    return false;
  },
  setValue: function setValue(v) {
    this.loader.setValue(v);
  },
  getValue: function getValue() {
    return this.loader.getValue();
  },
  empty: function empty() {
    this.loader.empty();
  },
  populate: function populate(items) {
    this.loader.populate.apply(this.loader, arguments);
  }
});
BI.MultiSelectSearchInsertPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_search_insert_pane", BI.MultiSelectSearchInsertPane);

/***/ }),
/* 826 */
/***/ (function(module, exports) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 多选加载数据搜索loader面板
 * Created by guy on 15/11/4.
 * @class BI.MultiSelectSearchLoader
 * @extends Widget
 */
BI.MultiSelectSearchLoader = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectSearchLoader.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-search-loader",
      itemsCreator: BI.emptyFn,
      keywordGetter: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      itemFormatter: BI.emptyFn,
      itemHeight: 24
    });
  },
  _init: function _init() {
    BI.MultiSelectSearchLoader.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    var _hasNext = false;
    this.storeValue = BI.deepClone(opts.value);
    this.button_group = BI.createWidget({
      type: "bi.select_list",
      toolbar: {
        type: "bi.multi_select_bar",
        cls: "bi-list-item-active",
        iconWrapperWidth: 36
      },
      element: this,
      logic: {
        dynamic: false
      },
      value: opts.value,
      el: {
        tipText: BI.i18nText("BI-No_Select"),
        el: {
          type: "bi.loader",
          isDefaultInit: false,
          logic: {
            dynamic: true,
            scrolly: true
          },
          el: {
            chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
            behaviors: {
              redmark: function redmark() {
                return true;
              }
            },
            layouts: [{
              type: "bi.vertical"
            }]
          }
        }
      },
      itemsCreator: function itemsCreator(op, callback) {
        self.storeValue && (op = BI.extend(op || {}, {
          selectedValues: self.storeValue.value
        }));
        opts.itemsCreator(op, function (ob) {
          var keyword = ob.keyword = opts.keywordGetter();
          _hasNext = ob.hasNext;
          var firstItems = [];

          if (op.times === 1 && self.storeValue) {
            var json = self._filterValues(self.storeValue);

            firstItems = self._createItems(json);
          }

          var context = {
            tipText: ob.tipText
          };
          callback(firstItems.concat(self._createItems(ob.items)), keyword, context);

          if (op.times === 1 && self.storeValue) {
            self.setValue(self.storeValue);
          }
        });
      },
      hasNext: function hasNext() {
        return _hasNext;
      }
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.button_group.on(BI.SelectList.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectSearchLoader.EVENT_CHANGE, arguments);
    });
  },
  _createItems: function _createItems(items) {
    var allSelected = this.isAllSelected();
    return BI.createItems(items, {
      type: "bi.multi_select_item",
      logic: {
        dynamic: false
      },
      height: this.options.itemHeight || BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      selected: allSelected,
      cls: "bi-list-item-active",
      iconWrapperWidth: 36
    });
  },
  isAllSelected: function isAllSelected() {
    return this.button_group.isAllSelected();
  },
  _filterValues: function _filterValues(src) {
    var o = this.options;
    var keyword = o.keywordGetter();
    var values = BI.deepClone(src.value) || [];
    var newValues = BI.map(values, function (i, v) {
      return {
        text: o.valueFormatter(v) || v,
        value: v
      };
    });

    if (BI.isKey(keyword)) {
      var search = BI.Func.getSearchResult(newValues, keyword);
      values = search.match.concat(search.find);
    }

    return BI.map(values, function (i, v) {
      return _objectSpread({
        text: v.text,
        title: v.text,
        value: v.value,
        selected: src.type === BI.Selection.All
      }, o.itemFormatter(v));
    });
  },
  setValue: function setValue(v) {
    // 暂存的值一定是新的值，不然v改掉后，storeValue也跟着改了
    this.storeValue = BI.deepClone(v);
    this.button_group.setValue(v);
  },
  getValue: function getValue() {
    return this.button_group.getValue();
  },
  getAllButtons: function getAllButtons() {
    return this.button_group.getAllButtons();
  },
  empty: function empty() {
    this.button_group.empty();
  },
  populate: function populate(items) {
    this.button_group.populate.apply(this.button_group, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.button_group.resetHeight(h);
  },
  resetWidth: function resetWidth(w) {
    this.button_group.resetWidth(w);
  }
});
BI.MultiSelectSearchLoader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_search_loader", BI.MultiSelectSearchLoader);

/***/ }),
/* 827 */
/***/ (function(module, exports) {

/**
 *
 * 在搜索框中输入文本弹出的面板
 * @class BI.MultiSelectSearchPane
 * @extends Widget
 */
BI.MultiSelectSearchPane = BI.inherit(BI.Widget, {
  constants: {
    height: 24,
    lgap: 10,
    tgap: 5
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectSearchPane.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-search-pane bi-card",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      keywordGetter: BI.emptyFn,
      itemHeight: 24
    });
  },
  _init: function _init() {
    BI.MultiSelectSearchPane.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.loader = BI.createWidget({
      type: "bi.multi_select_search_loader",
      keywordGetter: o.keywordGetter,
      valueFormatter: o.valueFormatter,
      itemFormatter: o.itemFormatter,
      itemsCreator: function itemsCreator(op, callback) {
        o.itemsCreator.apply(self, [op, function (res) {
          callback(res);
        }]);
      },
      itemHeight: o.itemHeight,
      value: o.value
    });
    this.loader.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.resizer = BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.loader,
        left: 0,
        right: 0,
        bottom: 0,
        top: 0
      }]
    });
  },
  isAllSelected: function isAllSelected() {
    return this.loader.isAllSelected();
  },
  hasMatched: function hasMatched() {},
  setValue: function setValue(v) {
    this.loader.setValue(v);
  },
  getValue: function getValue() {
    return this.loader.getValue();
  },
  empty: function empty() {
    this.loader.empty();
  },
  populate: function populate(items) {
    this.loader.populate.apply(this.loader, arguments);
  }
});
BI.MultiSelectSearchPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_search_pane", BI.MultiSelectSearchPane);

/***/ }),
/* 828 */
/***/ (function(module, exports) {

/**
 * 查看已选按钮
 * Created by guy on 15/11/3.
 * @class BI.MultiSelectCheckSelectedButton
 * @extends BI.Single
 */
BI.MultiSelectCheckSelectedButton = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectCheckSelectedButton.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-check-selected-button",
      itemsCreator: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.MultiSelectCheckSelectedButton.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.numberCounter = BI.createWidget({
      type: "bi.text_button",
      element: this,
      hgap: 4,
      text: "0",
      textAlign: "center",
      textHeight: 16,
      cls: "bi-high-light-background count-tip"
    });
    this.numberCounter.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.numberCounter.on(BI.TextButton.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectCheckSelectedButton.EVENT_CHANGE, arguments);
    });
    this.numberCounter.element.hover(function () {
      self.numberCounter.setTag(self.numberCounter.getText());
      self.numberCounter.setText(BI.i18nText("BI-Check_Selected"));
    }, function () {
      self.numberCounter.setText(self.numberCounter.getTag());
    });
    this.setVisible(false);

    if (BI.isNotNull(o.value)) {
      this.setValue(o.value);
    }
  },
  _populate: function _populate(ob) {
    var self = this,
        o = this.options;

    if (ob.type === BI.Selection.All) {
      o.itemsCreator({
        type: BI.MultiSelectCombo.REQ_GET_DATA_LENGTH
      }, function (res) {
        if (self.options.value.type !== BI.Selection.All) {
          return;
        }

        if (BI.isNotEmptyString(res.count)) {
          BI.nextTick(function () {
            self.numberCounter.setText(res.count);
            self.setVisible(true);
          });
          return;
        }

        var length = res.count - ob.value.length;
        BI.nextTick(function () {
          self.numberCounter.setText(length);
          self.setVisible(length > 0);
        });
      });
      return;
    }

    BI.nextTick(function () {
      self.numberCounter.setText(ob.value.length);
      self.setVisible(ob.value.length > 0);
    });
  },
  _assertValue: function _assertValue(ob) {
    ob || (ob = {});
    ob.type || (ob.type = BI.Selection.Multi);
    ob.value || (ob.value = []);
    return ob;
  },
  setValue: function setValue(ob) {
    ob = this._assertValue(ob);
    this.options.value = ob;

    this._populate(ob);
  },
  populate: function populate() {
    this._populate(this._assertValue(this.options.value));
  },
  getValue: function getValue() {}
});
BI.MultiSelectCheckSelectedButton.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_check_selected_button", BI.MultiSelectCheckSelectedButton);

/***/ }),
/* 829 */
/***/ (function(module, exports) {

/**
 * 多选输入框
 * Created by guy on 15/11/3.
 * @class BI.MultiSelectEditor
 * @extends Widget
 */
BI.MultiSelectEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectEditor.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-editor",
      el: {},
      watermark: BI.i18nText("BI-Basic_Search")
    });
  },
  _init: function _init() {
    BI.MultiSelectEditor.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.el, {
      type: "bi.select_patch_editor",
      element: this,
      height: o.height,
      watermark: o.watermark,
      allowBlank: true,
      value: o.value,
      defaultText: o.defaultText,
      text: o.text,
      tipType: o.tipType,
      warningTitle: o.warningTitle
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.StateEditor.EVENT_FOCUS, function () {
      self.fireEvent(BI.MultiSelectEditor.EVENT_FOCUS);
    });
    this.editor.on(BI.StateEditor.EVENT_BLUR, function () {
      self.fireEvent(BI.MultiSelectEditor.EVENT_BLUR);
    });
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  setState: function setState(state) {
    this.editor.setState(state);
  },
  setValue: function setValue(v) {
    this.editor.setValue(v);
  },
  setTipType: function setTipType(v) {
    this.editor.setTipType(v);
  },
  getValue: function getValue() {
    return this.editor.getValue();
  },
  getState: function getState() {
    return this.editor.getText();
  },
  getKeywords: function getKeywords() {
    var val = this.editor.getValue();
    var keywords = val.split(/\u200b\s\u200b/);

    if (BI.isEmptyString(keywords[keywords.length - 1])) {
      keywords = keywords.slice(0, keywords.length - 1);
    }

    if (/\u200b\s\u200b$/.test(val)) {
      return keywords.concat([BI.BlankSplitChar]);
    }

    return keywords;
  },
  getKeyword: function getKeyword() {
    var val = this.editor.getValue();
    var keywords = val.split(/\u200b\s\u200b/);

    if (BI.isEmptyString(keywords[keywords.length - 1])) {
      keywords = keywords.slice(0, keywords.length - 1);
    }

    return BI.isEmptyArray(keywords) ? "" : keywords[keywords.length - 1];
  },
  populate: function populate(items) {},
  setWaterMark: function setWaterMark(v) {
    this.editor.setWaterMark(v);
  }
});
BI.MultiSelectEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiSelectEditor.EVENT_BLUR = "EVENT_BLUR";
BI.MultiSelectEditor.EVENT_PAUSE = "EVENT_PAUSE";
BI.shortcut("bi.multi_select_editor", BI.MultiSelectEditor);

/***/ }),
/* 830 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2021/5/18
 */
BI.SelectPatchEditor = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-patch-select-editor",
    height: 24
  },
  render: function render() {
    var self = this,
        o = this.options;
    var debounceInputChange = BI.debounce(BI.bind(this._dealChange, this), 300);
    return BI.extend({
      type: "bi.state_editor",
      ref: function ref(_ref) {
        self.editor = _ref;
      },
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap,
      height: o.height,
      watermark: o.watermark,
      allowBlank: true,
      value: o.value,
      defaultText: o.defaultText,
      text: o.text,
      tipType: o.tipType,
      warningTitle: o.warningTitle,
      el: {
        type: 'bi.textarea_editor',
        scrolly: false,
        validationChecker: function validationChecker() {
          return true;
        },
        throttle: true
      },
      listeners: [{
        eventName: BI.Controller.EVENT_CHANGE,
        action: function action(type, v) {
          if (BI.contains(v, "\n")) {
            self._dealChange(type, v);
          } else {
            debounceInputChange(type, v);
          }
        }
      }, {
        eventName: BI.Editor.EVENT_KEY_DOWN,
        action: function action(keyCode) {
          if (keyCode === BI.KeyCode.ENTER) {
            self._clearSplitValue();
          }
        }
      }, {
        eventName: BI.Editor.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.SelectPatchEditor.EVENT_FOCUS, arguments);
        }
      }, {
        eventName: BI.Editor.EVENT_BLUR,
        action: function action() {
          self._start = false;
          self.fireEvent(BI.SelectPatchEditor.EVENT_BLUR, arguments);
        }
      }]
    }, o.el);
  },
  _clearSplitValue: function _clearSplitValue() {
    this.editor.setValue("");
  },
  _dealChange: function _dealChange(type, v) {
    var value = "";

    if (v !== this.editor.getValue()) {
      return;
    }

    if (BI.isKey(v)) {
      value = this._formatText(v);
    }

    if (type === BI.Events.CHANGE) {
      this._setValue(value);

      if (this._trimValue(value) !== "") {
        if (!this._start || !BI.isKey(this._lastValue) || this._pause === true && this._trimValue(this._lastValue) !== this._trimValue(value)) {
          this._start = true;
          this._pause = false;
          this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.STARTEDIT, this.getValue(), this);
        }
      }

      if (this._trimValue(this._lastValue) !== this._trimValue(value)) {
        this.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
      }

      if (BI.endWith(value, BI.BlankSplitChar)) {
        this._pause = true;
        this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.PAUSE, "", this);
      }
    }

    if (type === BI.Events.EMPTY || type === BI.Events.STOPEDIT) {
      this.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.EMPTY);
    }

    this._lastValue = value;
  },
  _trimValue: function _trimValue(v) {
    return BI.trim(BI.replaceAll(v || "", BI.BlankSplitChar, ""));
  },
  _formatText: function _formatText(v) {
    return BI.replaceAll(v || "", "\n", BI.BlankSplitChar);
  },
  setWaterMark: function setWaterMark(v) {
    this.editor.setWaterMark(v);
  },
  doRedMark: function doRedMark() {
    this.editor.doRedMark.apply(this.editor, arguments);
  },
  unRedMark: function unRedMark() {
    this.editor.unRedMark.apply(this.editor, arguments);
  },
  doHighLight: function doHighLight() {
    this.editor.doHighLight.apply(this.editor, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  _setValue: function _setValue(v) {
    this.editor.setValue(this._formatText(v));
  },
  _showInput: function _showInput() {
    this.editor.visible();
    this.text.invisible();
  },
  _showHint: function _showHint() {
    this.editor.invisible();
    this.text.visible();
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  setErrorText: function setErrorText(text) {
    this.editor.setErrorText(text);
  },
  getErrorText: function getErrorText() {
    return this.editor.getErrorText();
  },
  isEditing: function isEditing() {
    return this.editor.isEditing();
  },
  getLastValidValue: function getLastValidValue() {
    return this.editor.getLastValidValue();
  },
  getLastChangedValue: function getLastChangedValue() {
    return this.editor.getLastChangedValue();
  },
  setValue: function setValue(v) {
    this._setValue(v);

    this._lastValue = this._trimValue(v);
  },
  getValue: function getValue() {
    return BI.trim(this.editor.getValue());
  },
  getState: function getState() {
    return this.editor.getState();
  },
  setState: function setState(v) {
    this.editor.setState(v);
  },
  setTipType: function setTipType(v) {
    this.editor.setTipType(v);
  },
  getText: function getText() {
    return this.editor.getText();
  }
});
BI.SelectPatchEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.SelectPatchEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.SelectPatchEditor.EVENT_BLUR = "EVENT_BLUR";
BI.shortcut("bi.select_patch_editor", BI.SelectPatchEditor);

/***/ }),
/* 831 */
/***/ (function(module, exports) {

/**
 * searcher
 * Created by guy on 15/11/3.
 * @class BI.MultiSelectInsertSearcher
 * @extends Widget
 */
BI.MultiSelectInsertSearcher = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectInsertSearcher.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-searcher",
      itemsCreator: BI.emptyFn,
      itemHeight: 24,
      el: {},
      popup: {},
      valueFormatter: BI.emptyFn,
      adapter: null,
      masker: {},
      watermark: BI.i18nText("BI-Basic_Search_And_Patch_Paste")
    });
  },
  _init: function _init() {
    BI.MultiSelectInsertSearcher.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.el, {
      type: "bi.multi_select_editor",
      watermark: o.watermark,
      height: o.height,
      text: o.text,
      defaultText: o.defaultText,
      listeners: [{
        eventName: BI.MultiSelectEditor.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.MultiSelectInsertSearcher.EVENT_FOCUS);
        }
      }, {
        eventName: BI.MultiSelectEditor.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.MultiSelectInsertSearcher.EVENT_BLUR);
        }
      }]
    });
    this.searcher = BI.createWidget({
      type: "bi.searcher",
      element: this,
      height: o.height,
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback();
      },
      el: this.editor,
      popup: BI.extend({
        type: "bi.multi_select_search_insert_pane",
        valueFormatter: o.valueFormatter,
        keywordGetter: function keywordGetter() {
          return self.editor.getKeyword();
        },
        itemsCreator: function itemsCreator(op, callback) {
          var keyword = self.editor.getKeyword();
          op.keywords = [keyword];
          this.setKeyword(keyword);
          o.itemsCreator(op, function () {
            if (keyword === self.editor.getValue()) {
              callback.apply(null, arguments);
            }
          });
        },
        itemHeight: o.itemHeight,
        value: o.value
      }, o.popup),
      adapter: o.adapter,
      masker: o.masker
    });
    this.searcher.on(BI.Searcher.EVENT_START, function () {
      self.fireEvent(BI.MultiSelectInsertSearcher.EVENT_START);
    });
    this.searcher.on(BI.Searcher.EVENT_PAUSE, function () {
      if (this.hasMatched()) {}

      self.fireEvent(BI.MultiSelectInsertSearcher.EVENT_PAUSE);
    });
    this.searcher.on(BI.Searcher.EVENT_STOP, function () {
      self.fireEvent(BI.MultiSelectInsertSearcher.EVENT_STOP);
    });
    this.searcher.on(BI.Searcher.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectInsertSearcher.EVENT_CHANGE, arguments);
    });
    this.searcher.on(BI.Searcher.EVENT_SEARCHING, function () {
      var keywords = this.getKeywords();
      self.fireEvent(BI.MultiSelectInsertSearcher.EVENT_SEARCHING, keywords.length > 2000 ? keywords.slice(0, 2000).concat([BI.BlankSplitChar]) : keywords.slice(0, 2000));
    });

    if (BI.isNotNull(o.value)) {
      this.setState(o.value);
    }
  },
  adjustView: function adjustView() {
    this.searcher.adjustView();
  },
  isSearching: function isSearching() {
    return this.searcher.isSearching();
  },
  stopSearch: function stopSearch() {
    this.searcher.stopSearch();
  },
  getKeywordsLength: function getKeywordsLength() {
    var keywords = this.editor.getKeywords();
    return keywords[keywords.length - 1] === BI.BlankSplitChar ? keywords.length - 1 : keywords.length;
  },
  getKeyword: function getKeyword() {
    var keywords = this.editor.getKeywords().slice(0, 2000);

    if (keywords[keywords.length - 1] === BI.BlankSplitChar) {
      keywords = keywords.slice(0, keywords.length - 1);
    }

    return BI.isEmptyArray(keywords) ? "" : keywords[keywords.length - 1];
  },
  hasMatched: function hasMatched() {
    return this.searcher.hasMatched();
  },
  hasChecked: function hasChecked() {
    return this.searcher.getView() && this.searcher.getView().hasChecked();
  },
  setAdapter: function setAdapter(adapter) {
    this.searcher.setAdapter(adapter);
  },
  setState: function setState(ob) {
    var o = this.options;
    ob || (ob = {});
    ob.value || (ob.value = []);

    if (ob.type === BI.Selection.All) {
      if (ob.value.length === 0) {
        this.editor.setState(BI.Selection.All);
      } else if (BI.size(ob.assist) <= 20) {
        var state = "";
        BI.each(ob.assist, function (i, v) {
          if (i === 0) {
            state += "" + (v === null ? "" : o.valueFormatter(v + "") || v);
          } else {
            state += "," + (v === null ? "" : o.valueFormatter(v + "") || v);
          }
        });
        this.editor.setState(state);
      } else {
        this.editor.setState(BI.Selection.Multi);
      }
    } else {
      if (ob.value.length === 0) {
        this.editor.setState(BI.Selection.None);
      } else if (BI.size(ob.value) <= 20) {
        var state = "";
        BI.each(ob.value, function (i, v) {
          if (i === 0) {
            state += "" + (v === null ? "" : o.valueFormatter(v + "") || v);
          } else {
            state += "," + (v === null ? "" : o.valueFormatter(v + "") || v);
          }
        });
        this.editor.setState(state);
      } else {
        this.editor.setState(BI.Selection.Multi);
      }
    }
  },
  getState: function getState() {
    return this.editor.getState();
  },
  setValue: function setValue(ob) {
    this.setState(ob);
    this.searcher.setValue(ob);
  },
  getKey: function getKey() {
    return this.editor.getValue();
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  },
  populate: function populate(items) {
    this.searcher.populate.apply(this.searcher, arguments);
  }
});
BI.MultiSelectInsertSearcher.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.MultiSelectInsertSearcher.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiSelectInsertSearcher.EVENT_START = "EVENT_START";
BI.MultiSelectInsertSearcher.EVENT_STOP = "EVENT_STOP";
BI.MultiSelectInsertSearcher.EVENT_PAUSE = "EVENT_PAUSE";
BI.MultiSelectInsertSearcher.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiSelectInsertSearcher.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiSelectInsertSearcher.EVENT_BLUR = "EVENT_BLUR";
BI.shortcut("bi.multi_select_insert_searcher", BI.MultiSelectInsertSearcher);

/***/ }),
/* 832 */
/***/ (function(module, exports) {

/**
 * searcher
 * Created by guy on 15/11/3.
 * @class BI.MultiSelectSearcher
 * @extends Widget
 */
BI.MultiSelectSearcher = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectSearcher.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-searcher",
      itemsCreator: BI.emptyFn,
      el: {},
      popup: {},
      valueFormatter: BI.emptyFn,
      adapter: null,
      masker: {},
      defaultText: BI.i18nText("BI-Basic_Please_Select"),
      itemHeight: 24
    });
  },
  _init: function _init() {
    BI.MultiSelectSearcher.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.el, {
      type: "bi.multi_select_editor",
      height: o.height,
      text: o.text,
      defaultText: o.defaultText,
      watermark: o.watermark,
      listeners: [{
        eventName: BI.MultiSelectEditor.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.MultiSelectSearcher.EVENT_FOCUS);
        }
      }, {
        eventName: BI.MultiSelectEditor.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.MultiSelectSearcher.EVENT_BLUR);
        }
      }]
    });
    this.searcher = BI.createWidget({
      type: "bi.searcher",
      element: this,
      height: o.height,
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback();
      },
      el: this.editor,
      popup: BI.extend({
        type: "bi.multi_select_search_pane",
        valueFormatter: o.valueFormatter,
        keywordGetter: function keywordGetter() {
          return self.editor.getValue();
        },
        itemsCreator: function itemsCreator(op, callback) {
          var keyword = self.editor.getValue();
          op.keywords = [keyword];
          o.itemsCreator(op, function () {
            var keyword = self.editor.getValue();
            op.keywords = [keyword];
            o.itemsCreator(op, function () {
              if (keyword === self.editor.getValue()) {
                callback.apply(null, arguments);
              }
            });
          });
        },
        itemHeight: o.itemHeight,
        value: o.value
      }, o.popup),
      adapter: o.adapter,
      masker: o.masker
    });
    this.searcher.on(BI.Searcher.EVENT_START, function () {
      self.fireEvent(BI.MultiSelectSearcher.EVENT_START);
    });
    this.searcher.on(BI.Searcher.EVENT_PAUSE, function () {
      if (this.hasMatched()) {}

      self.fireEvent(BI.MultiSelectSearcher.EVENT_PAUSE);
    });
    this.searcher.on(BI.Searcher.EVENT_STOP, function () {
      self.fireEvent(BI.MultiSelectSearcher.EVENT_STOP);
    });
    this.searcher.on(BI.Searcher.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectSearcher.EVENT_CHANGE, arguments);
    });
    this.searcher.on(BI.Searcher.EVENT_SEARCHING, function () {
      var keywords = this.getKeywords();
      self.fireEvent(BI.MultiSelectSearcher.EVENT_SEARCHING, keywords);
    });

    if (BI.isNotNull(o.value)) {
      this.setState(o.value);
    }
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  adjustView: function adjustView() {
    this.searcher.adjustView();
  },
  isSearching: function isSearching() {
    return this.searcher.isSearching();
  },
  stopSearch: function stopSearch() {
    this.searcher.stopSearch();
  },
  getKeyword: function getKeyword() {
    return this.editor.getValue();
  },
  hasMatched: function hasMatched() {
    return this.searcher.hasMatched();
  },
  hasChecked: function hasChecked() {
    return this.searcher.getView() && this.searcher.getView().hasChecked();
  },
  setAdapter: function setAdapter(adapter) {
    this.searcher.setAdapter(adapter);
  },
  setState: function setState(ob) {
    var o = this.options;
    ob || (ob = {});
    ob.value || (ob.value = []);

    if (ob.type === BI.Selection.All) {
      if (ob.value.length === 0) {
        this.editor.setState(BI.Selection.All);
      } else if (BI.size(ob.assist) <= 20) {
        var state = "";
        BI.each(ob.assist, function (i, v) {
          if (i === 0) {
            state += "" + (v === null ? "" : o.valueFormatter(v + "") || v);
          } else {
            state += "," + (v === null ? "" : o.valueFormatter(v + "") || v);
          }
        });
        this.editor.setState(state);
      } else {
        this.editor.setState(BI.Selection.Multi);
      }
    } else {
      if (ob.value.length === 0) {
        this.editor.setState(BI.Selection.None);
      } else if (BI.size(ob.value) <= 20) {
        var state = "";
        BI.each(ob.value, function (i, v) {
          if (i === 0) {
            state += "" + (v === null ? "" : o.valueFormatter(v + "") || v);
          } else {
            state += "," + (v === null ? "" : o.valueFormatter(v + "") || v);
          }
        });
        this.editor.setState(state);
      } else {
        this.editor.setState(BI.Selection.Multi);
      }
    }
  },
  getState: function getState() {
    return this.editor.getState();
  },
  setValue: function setValue(ob) {
    this.setState(ob);
    this.searcher.setValue(ob);
  },
  getKey: function getKey() {
    return this.editor.getValue();
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  },
  populate: function populate(items) {
    this.searcher.populate.apply(this.searcher, arguments);
  }
});
BI.MultiSelectSearcher.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.MultiSelectSearcher.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiSelectSearcher.EVENT_START = "EVENT_START";
BI.MultiSelectSearcher.EVENT_STOP = "EVENT_STOP";
BI.MultiSelectSearcher.EVENT_PAUSE = "EVENT_PAUSE";
BI.MultiSelectSearcher.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiSelectSearcher.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiSelectSearcher.EVENT_BLUR = "EVENT_BLUR";
BI.shortcut("bi.multi_select_searcher", BI.MultiSelectSearcher);

/***/ }),
/* 833 */
/***/ (function(module, exports) {

/**
 * 查看已选switcher
 * Created by guy on 15/11/3.
 * @class BI.MultiSelectCheckSelectedSwitcher
 * @extends Widget
 */
BI.MultiSelectCheckSelectedSwitcher = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectCheckSelectedSwitcher.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-check-selected-switcher",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      el: {},
      popup: {},
      adapter: null,
      masker: {}
    });
  },
  _init: function _init() {
    BI.MultiSelectCheckSelectedSwitcher.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.button = BI.createWidget(o.el, {
      type: "bi.multi_select_check_selected_button",
      itemsCreator: o.itemsCreator,
      value: o.value
    });
    this.button.on(BI.Events.VIEW, function () {
      self.fireEvent(BI.Events.VIEW, arguments);
    });
    this.switcher = BI.createWidget({
      type: "bi.switcher",
      toggle: false,
      element: this,
      el: this.button,
      popup: BI.extend({
        type: "bi.multi_select_check_pane",
        valueFormatter: o.valueFormatter,
        itemsCreator: o.itemsCreator,
        onClickContinueSelect: function onClickContinueSelect() {
          self.switcher.hideView();
        },
        ref: function ref(_ref) {
          self.checkPane = _ref;
        },
        value: o.value
      }, o.popup),
      adapter: o.adapter,
      masker: o.masker
    });
    this.switcher.on(BI.Switcher.EVENT_TRIGGER_CHANGE, function () {
      self.fireEvent(BI.MultiSelectCheckSelectedSwitcher.EVENT_TRIGGER_CHANGE);
    });
    this.switcher.on(BI.Switcher.EVENT_BEFORE_POPUPVIEW, function () {
      self.fireEvent(BI.MultiSelectCheckSelectedSwitcher.EVENT_BEFORE_POPUPVIEW);
    });
    this.switcher.on(BI.Switcher.EVENT_AFTER_HIDEVIEW, function () {
      self.fireEvent(BI.MultiSelectCheckSelectedSwitcher.EVENT_AFTER_HIDEVIEW);
    });
    this.switcher.on(BI.Switcher.EVENT_AFTER_POPUPVIEW, function () {
      var me = this;
      BI.nextTick(function () {
        me._populate();
      });
    });
  },
  adjustView: function adjustView() {
    this.switcher.adjustView();
  },
  hideView: function hideView() {
    this.switcher.empty();
    this.switcher.hideView();
  },
  setAdapter: function setAdapter(adapter) {
    this.switcher.setAdapter(adapter);
  },
  setValue: function setValue(v) {
    this.switcher.setValue(v);
  },
  // 与setValue的区别是只更新查看已选面板的的selectedValue, 不会更新按钮的计数
  updateSelectedValue: function updateSelectedValue(v) {
    this.checkPane.setValue(v);
  },
  setButtonChecked: function setButtonChecked(v) {
    this.button.setValue(v);
  },
  getValue: function getValue() {},
  populate: function populate(items) {
    this.switcher.populate.apply(this.switcher, arguments);
  },
  populateSwitcher: function populateSwitcher() {
    this.button.populate.apply(this.button, arguments);
  }
});
BI.MultiSelectCheckSelectedSwitcher.EVENT_TRIGGER_CHANGE = "EVENT_TRIGGER_CHANGE";
BI.MultiSelectCheckSelectedSwitcher.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.MultiSelectCheckSelectedSwitcher.EVENT_AFTER_HIDEVIEW = "EVENT_AFTER_HIDEVIEW";
BI.shortcut("bi.multi_select_check_selected_switcher", BI.MultiSelectCheckSelectedSwitcher);

/***/ }),
/* 834 */
/***/ (function(module, exports) {

/**
 * Created by zcf_1 on 2017/5/2.
 */
BI.MultiSelectInsertList = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectInsertList.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-insert-list",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      searcherHeight: BI.SIZE_CONSANTS.TRIGGER_HEIGHT,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
    });
  },
  _init: function _init() {
    BI.MultiSelectInsertList.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.storeValue = this._assertValue(BI.deepClone(o.value) || {});

    var assertShowValue = function assertShowValue() {
      BI.isKey(self._startValue) && (self.storeValue.type === BI.Selection.All ? BI.remove(self.storeValue.value, self._startValue) : BI.pushDistinct(self.storeValue.value, self._startValue)); // self.trigger.setValue(self.storeValue);
    };

    this.adapter = BI.createWidget({
      type: "bi.multi_select_loader",
      cls: "popup-multi-select-list bi-border-left bi-border-right bi-border-bottom",
      itemsCreator: o.itemsCreator,
      itemHeight: o.itemHeight,
      valueFormatter: o.valueFormatter,
      itemFormatter: o.itemFormatter,
      logic: {
        dynamic: false
      },
      // onLoaded: o.onLoaded,
      el: {},
      isDefaultInit: true,
      value: o.value
    });
    this.adapter.on(BI.MultiSelectLoader.EVENT_CHANGE, function () {
      self.storeValue = this.getValue();
      assertShowValue();
      self.fireEvent(BI.MultiSelectInsertList.EVENT_CHANGE);
    });
    this.searcherPane = BI.createWidget({
      type: "bi.multi_select_search_insert_pane",
      cls: "bi-border-left bi-border-right bi-border-bottom",
      valueFormatter: o.valueFormatter,
      itemFormatter: o.itemFormatter,
      keywordGetter: function keywordGetter() {
        return self.trigger.getKeyword();
      },
      itemsCreator: function itemsCreator(op, callback) {
        var keyword = self.trigger.getKeyword();

        if (BI.isNotEmptyString(keyword)) {
          op.keywords = [keyword];
          this.setKeyword(op.keywords[0]);
          o.itemsCreator(op, callback);
        }
      },
      itemHeight: o.itemHeight
    });
    this.searcherPane.setVisible(false);
    this.trigger = BI.createWidget({
      type: "bi.searcher",
      el: {
        type: "bi.select_patch_editor",
        el: {
          type: "bi.search_editor",
          watermark: BI.i18nText("BI-Basic_Search_And_Patch_Paste")
        },
        ref: function ref(_ref) {
          self.editor = _ref;
        }
      },
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback();
      },
      adapter: this.adapter,
      popup: this.searcherPane,
      masker: false,
      listeners: [{
        eventName: BI.Searcher.EVENT_START,
        action: function action() {
          self._showSearcherPane();

          self._setStartValue("");

          this.setValue(BI.deepClone(self.storeValue));
        }
      }, {
        eventName: BI.Searcher.EVENT_STOP,
        action: function action() {
          self._showAdapter();

          self._setStartValue("");

          self.adapter.setValue(self.storeValue); // 需要刷新回到初始界面，否则搜索的结果不能放在最前面

          self.adapter.populate();
        }
      }, {
        eventName: BI.Searcher.EVENT_PAUSE,
        action: function action() {
          var keywords = self._getKeywords();

          if (keywords[keywords.length - 1] === BI.BlankSplitChar) {
            keywords = keywords.slice(0, keywords.length - 1);
          }

          var keyword = BI.isEmptyArray(keywords) ? "" : keywords[keywords.length - 1];

          self._join({
            type: BI.Selection.Multi,
            value: [keyword]
          }, function () {
            if (self.storeValue.type === BI.Selection.Multi) {
              BI.pushDistinct(self.storeValue.value, keyword);
            }

            self._showAdapter();

            self.adapter.setValue(self.storeValue);

            self._setStartValue(keyword);

            assertShowValue();
            self.adapter.populate();

            self._setStartValue("");

            self.fireEvent(BI.MultiSelectInsertList.EVENT_CHANGE);
          });

          self._showAdapter();
        }
      }, {
        eventName: BI.Searcher.EVENT_SEARCHING,
        action: function action() {
          var keywords = self._getKeywords();

          var last = BI.last(keywords);
          keywords = BI.initial(keywords || []);

          if (keywords.length > 0) {
            self._joinKeywords(keywords, function () {
              if (BI.endWith(last, BI.BlankSplitChar)) {
                self.adapter.setValue(self.storeValue);
                assertShowValue();
                self.adapter.populate();

                self._setStartValue("");
              } else {
                self.adapter.setValue(self.storeValue);
                assertShowValue();
              }

              self.fireEvent(BI.MultiSelectInsertList.EVENT_CHANGE);
            });

            self._getKeywordsLength() > 2000 && BI.Msg.alert(BI.i18nText("BI-Basic_Prompt"), BI.i18nText("BI-Basic_Too_Much_Value_Get_Two_Thousand"));
          }
        }
      }, {
        eventName: BI.Searcher.EVENT_CHANGE,
        action: function action(value, obj) {
          if (obj instanceof BI.MultiSelectBar) {
            self._joinAll(this.getValue(), function () {
              assertShowValue();
              self.fireEvent(BI.MultiSelectInsertList.EVENT_CHANGE);
            });
          } else {
            self._join(this.getValue(), function () {
              assertShowValue();
              self.fireEvent(BI.MultiSelectInsertList.EVENT_CHANGE);
            });
          }
        }
      }],
      value: o.value
    });
    BI.createWidget({
      type: "bi.vertical_fill",
      rowSize: ["", "fill"],
      element: this,
      items: [{
        el: this.trigger
      }, {
        el: this.adapter
      }]
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.searcherPane,
        top: o.searcherHeight || BI.SIZE_CONSANTS.TRIGGER_HEIGHT,
        bottom: 0,
        left: 0,
        right: 0
      }]
    });
  },
  _getKeywords: function _getKeywords() {
    var val = this.editor.getValue();
    var keywords = val.split(/\u200b\s\u200b/);

    if (BI.isEmptyString(keywords[keywords.length - 1])) {
      keywords = keywords.slice(0, keywords.length - 1);
    }

    if (/\u200b\s\u200b$/.test(val)) {
      keywords = keywords.concat([BI.BlankSplitChar]);
    }

    return keywords.length > 2000 ? keywords.slice(0, 2000).concat([BI.BlankSplitChar]) : keywords.slice(0, 2000);
  },
  _getKeywordsLength: function _getKeywordsLength() {
    var val = this.editor.getValue();
    var keywords = val.split(/\u200b\s\u200b/);
    return keywords.length - 1;
  },
  _showAdapter: function _showAdapter() {
    this.adapter.setVisible(true);
    this.searcherPane.setVisible(false);
  },
  _showSearcherPane: function _showSearcherPane() {
    this.searcherPane.setVisible(true);
    this.adapter.setVisible(false);
  },
  _defaultState: function _defaultState() {
    this.trigger.stopEditing();
  },
  _assertValue: function _assertValue(val) {
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
    return val;
  },
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _joinKeywords: function _joinKeywords(keywords, callback) {
    var self = this,
        o = this.options;

    this._assertValue(this.storeValue); // 和复选下拉框同步，allData做缓存是会爆炸的


    digest();

    function digest() {
      BI.each(keywords, function (i, val) {
        self.storeValue.type === BI.Selection.Multi ? BI.pushDistinct(self.storeValue.value, val) : BI.remove(self.storeValue.value, val);
      });
      callback();
    }
  },
  _joinAll: function _joinAll(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    if (this.storeValue.type === res.type) {
      var result = BI.Func.getSearchResult(BI.map(this.storeValue.value, function (_i, v) {
        return {
          text: o.valueFormatter(v) || v,
          value: v
        };
      }), this.trigger.getKeyword());
      var change = false;

      var map = this._makeMap(this.storeValue.value);

      BI.each(BI.concat(result.match, result.find), function (i, obj) {
        var v = obj.value;

        if (BI.isNotNull(map[v])) {
          change = true;
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));
      callback();
      return;
    }

    o.itemsCreator({
      type: BI.MultiSelectInsertList.REQ_GET_ALL_DATA,
      keywords: [this.trigger.getKeyword()],
      selectedValues: BI.filter(this.storeValue.value, function (_i, v) {
        return !BI.contains(res.value, v);
      })
    }, function (ob) {
      var items = BI.map(ob.items, "value");

      var selectedMap = self._makeMap(self.storeValue.value);

      var notSelectedMap = self._makeMap(res.value);

      var newItems = [];
      BI.each(items, function (i, item) {
        if (BI.isNotNull(selectedMap[items[i]])) {
          delete selectedMap[items[i]];
        }

        if (BI.isNull(notSelectedMap[items[i]])) {
          newItems.push(item);
        }
      });
      self.storeValue.value = newItems.concat(BI.values(selectedMap));
      callback();
    });
  },
  _join: function _join(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this._assertValue(this.storeValue);

    if (this.storeValue.type === res.type) {
      var map = this._makeMap(this.storeValue.value);

      BI.each(res.value, function (i, v) {
        if (!map[v]) {
          BI.pushDistinct(self.storeValue.value, v);
          map[v] = v;
        }
      });
      var change = false;
      BI.each(res.assist, function (i, v) {
        if (BI.isNotNull(map[v])) {
          change = true;
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));
      callback();
      return;
    }

    this._joinAll(res, callback);
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.adapter.setStartValue(value);
  },
  isAllSelected: function isAllSelected() {
    return this.adapter.isAllSelected();
  },
  resize: function resize() {// this.trigger.getCounter().adjustView();
    // this.trigger.adjustView();
  },
  setValue: function setValue(v) {
    this.storeValue = v || {};

    this._assertValue(this.storeValue);

    this.adapter.setValue(this.storeValue);
    this.trigger.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue);
  },
  populate: function populate() {
    this.adapter.populate.apply(this.adapter, arguments);
    this.trigger.populate.apply(this.trigger, arguments);
  }
});
BI.extend(BI.MultiSelectInsertList, {
  REQ_GET_DATA_LENGTH: 1,
  REQ_GET_ALL_DATA: -1
});
BI.MultiSelectInsertList.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_insert_list", BI.MultiSelectInsertList);

/***/ }),
/* 835 */
/***/ (function(module, exports) {

/**
 * Created by zcf_1 on 2017/5/2.
 */
BI.MultiSelectInsertNoBarList = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectInsertNoBarList.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-insert-list",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      searcherHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
    });
  },
  _init: function _init() {
    BI.MultiSelectInsertNoBarList.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.storeValue = {
      type: BI.Selection.Multi,
      value: BI.deepClone(o.value) || []
    };

    var assertShowValue = function assertShowValue() {
      BI.isKey(self._startValue) && (self.storeValue.type === BI.Selection.All ? BI.remove(self.storeValue.value, self._startValue) : BI.pushDistinct(self.storeValue.value, self._startValue)); // self.trigger.setValue(self.storeValue);
    };

    this.adapter = BI.createWidget({
      type: "bi.multi_select_no_bar_loader",
      cls: "popup-multi-select-list bi-border-left bi-border-right bi-border-bottom",
      itemsCreator: o.itemsCreator,
      itemHeight: o.itemHeight,
      valueFormatter: o.valueFormatter,
      logic: {
        dynamic: false
      },
      // onLoaded: o.onLoaded,
      el: {},
      value: {
        type: BI.Selection.Multi,
        value: o.value || []
      }
    });
    this.adapter.on(BI.MultiSelectLoader.EVENT_CHANGE, function () {
      self.storeValue = this.getValue();
      assertShowValue();
      self.fireEvent(BI.MultiSelectInsertNoBarList.EVENT_CHANGE);
    });
    this.searcherPane = BI.createWidget({
      type: "bi.multi_select_search_insert_pane",
      cls: "bi-border-left bi-border-right bi-border-bottom",
      valueFormatter: o.valueFormatter,
      keywordGetter: function keywordGetter() {
        return self.trigger.getKeyword();
      },
      itemsCreator: function itemsCreator(op, callback) {
        var keyword = self.trigger.getKeyword();

        if (BI.isNotEmptyString(keyword)) {
          op.keywords = [keyword];
          this.setKeyword(op.keywords[0]);
          o.itemsCreator(op, callback);
        }
      }
    });
    this.searcherPane.setVisible(false);
    this.trigger = BI.createWidget({
      type: "bi.searcher",
      el: {
        type: "bi.select_patch_editor",
        el: {
          type: "bi.search_editor",
          watermark: BI.i18nText("BI-Basic_Search_And_Patch_Paste")
        },
        ref: function ref(_ref) {
          self.editor = _ref;
        },
        height: o.searcherHeight
      },
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback();
      },
      adapter: this.adapter,
      popup: this.searcherPane,
      height: 200,
      masker: false,
      listeners: [{
        eventName: BI.Searcher.EVENT_START,
        action: function action() {
          self._showSearcherPane();

          self._setStartValue("");

          this.setValue(BI.deepClone(self.storeValue));
        }
      }, {
        eventName: BI.Searcher.EVENT_STOP,
        action: function action() {
          self._showAdapter();

          self._setStartValue("");

          self.adapter.setValue(self.storeValue); // 需要刷新回到初始界面，否则搜索的结果不能放在最前面

          self.adapter.populate();
        }
      }, {
        eventName: BI.Searcher.EVENT_PAUSE,
        action: function action() {
          var keywords = self._getKeywords();

          if (keywords[keywords.length - 1] === BI.BlankSplitChar) {
            keywords = keywords.slice(0, keywords.length - 1);
          }

          var keyword = BI.isEmptyArray(keywords) ? "" : keywords[keywords.length - 1];

          self._join({
            type: BI.Selection.Multi,
            value: [keyword]
          }, function () {
            if (self.storeValue.type === BI.Selection.Multi) {
              BI.pushDistinct(self.storeValue.value, keyword);
            }

            self._showAdapter();

            self.adapter.setValue(self.storeValue);

            self._setStartValue(keyword);

            assertShowValue();
            self.adapter.populate();

            self._setStartValue("");

            self.fireEvent(BI.MultiSelectInsertNoBarList.EVENT_CHANGE);
          });
        }
      }, {
        eventName: BI.Searcher.EVENT_SEARCHING,
        action: function action() {
          var keywords = self._getKeywords();

          var last = BI.last(keywords);
          keywords = BI.initial(keywords || []);

          if (keywords.length > 0) {
            self._joinKeywords(keywords, function () {
              if (BI.endWith(last, BI.BlankSplitChar)) {
                self.adapter.setValue(self.storeValue);
                assertShowValue();
                self.adapter.populate();

                self._setStartValue("");
              } else {
                self.adapter.setValue(self.storeValue);
                assertShowValue();
              }

              self.fireEvent(BI.MultiSelectInsertNoBarList.EVENT_CHANGE);
            });

            self._getKeywordsLength() > 2000 && BI.Msg.alert(BI.i18nText("BI-Basic_Prompt"), BI.i18nText("BI-Basic_Too_Much_Value_Get_Two_Thousand"));
          }
        }
      }, {
        eventName: BI.Searcher.EVENT_CHANGE,
        action: function action(value, obj) {
          if (obj instanceof BI.MultiSelectBar) {
            self._joinAll(this.getValue(), function () {
              assertShowValue();
              self.fireEvent(BI.MultiSelectInsertNoBarList.EVENT_CHANGE);
            });
          } else {
            self._join(this.getValue(), function () {
              assertShowValue();
              self.fireEvent(BI.MultiSelectInsertNoBarList.EVENT_CHANGE);
            });
          }
        }
      }],
      value: {
        type: BI.Selection.Multi,
        value: o.value || []
      }
    });
    BI.createWidget({
      type: "bi.vtape",
      element: this,
      items: [{
        el: this.trigger,
        height: o.searcherHeight
      }, {
        el: this.adapter,
        height: "fill"
      }]
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.searcherPane,
        top: o.searcherHeight,
        bottom: 0,
        left: 0,
        right: 0
      }]
    });
  },
  _getKeywords: function _getKeywords() {
    var val = this.editor.getValue();
    var keywords = val.split(/\u200b\s\u200b/);

    if (BI.isEmptyString(keywords[keywords.length - 1])) {
      keywords = keywords.slice(0, keywords.length - 1);
    }

    if (/\u200b\s\u200b$/.test(val)) {
      keywords = keywords.concat([BI.BlankSplitChar]);
    }

    return keywords.length > 2000 ? keywords.slice(0, 2000).concat([BI.BlankSplitChar]) : keywords.slice(0, 2000);
  },
  _getKeywordsLength: function _getKeywordsLength() {
    var val = this.editor.getValue();
    var keywords = val.split(/\u200b\s\u200b/);
    return keywords.length - 1;
  },
  _showAdapter: function _showAdapter() {
    this.adapter.setVisible(true);
    this.searcherPane.setVisible(false);
  },
  _showSearcherPane: function _showSearcherPane() {
    this.searcherPane.setVisible(true);
    this.adapter.setVisible(false);
  },
  _defaultState: function _defaultState() {
    this.trigger.stopEditing();
  },
  _assertValue: function _assertValue(val) {
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
  },
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _joinKeywords: function _joinKeywords(keywords, callback) {
    var self = this,
        o = this.options;

    this._assertValue(this.storeValue); // 和复选下拉框同步，allData做缓存是会爆炸的


    digest();

    function digest(items) {
      BI.each(keywords, function (i, val) {
        self.storeValue.type === BI.Selection.Multi ? BI.pushDistinct(self.storeValue.value, val) : BI.remove(self.storeValue.value, val);
      });
      callback();
    }
  },
  _joinAll: function _joinAll(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    if (this.storeValue.type === res.type) {
      var result = BI.Func.getSearchResult(BI.map(this.storeValue.value, function (_i, v) {
        return {
          text: o.valueFormatter(v) || v,
          value: v
        };
      }), this.trigger.getKeyword());
      var change = false;

      var map = this._makeMap(this.storeValue.value);

      BI.each(BI.concat(result.match, result.find), function (i, obj) {
        var v = obj.value;

        if (BI.isNotNull(map[v])) {
          change = true;
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));
      callback();
      return;
    }

    o.itemsCreator({
      type: BI.MultiSelectInsertNoBarList.REQ_GET_ALL_DATA,
      keywords: [this.trigger.getKeyword()],
      selectedValues: BI.filter(this.storeValue.value, function (_i, v) {
        return !BI.contains(res.value, v);
      })
    }, function (ob) {
      var items = BI.map(ob.items, "value");

      var selectedMap = self._makeMap(self.storeValue.value);

      var notSelectedMap = self._makeMap(res.value);

      var newItems = [];
      BI.each(items, function (i, item) {
        if (BI.isNotNull(selectedMap[items[i]])) {
          delete selectedMap[items[i]];
        }

        if (BI.isNull(notSelectedMap[items[i]])) {
          newItems.push(item);
        }
      });
      self.storeValue.value = newItems.concat(BI.values(selectedMap));
      callback();
    });
  },
  _join: function _join(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this._assertValue(this.storeValue);

    if (this.storeValue.type === res.type) {
      var map = this._makeMap(this.storeValue.value);

      BI.each(res.value, function (i, v) {
        if (!map[v]) {
          BI.pushDistinct(self.storeValue.value, v);
          map[v] = v;
        }
      });
      var change = false;
      BI.each(res.assist, function (i, v) {
        if (BI.isNotNull(map[v])) {
          change = true;
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));
      callback();
      return;
    }

    this._joinAll(res, callback);
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.adapter.setStartValue(value);
  },
  isAllSelected: function isAllSelected() {
    return this.adapter.isAllSelected();
  },
  resize: function resize() {// this.trigger.getCounter().adjustView();
    // this.trigger.adjustView();
  },
  setValue: function setValue(v) {
    this.storeValue = {
      type: BI.Selection.Multi,
      value: v || []
    };
    this.adapter.setValue(this.storeValue);
    this.trigger.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue.value);
  },
  populate: function populate() {
    this.adapter.populate.apply(this.adapter, arguments);
    this.trigger.populate.apply(this.trigger, arguments);
  }
});
BI.extend(BI.MultiSelectInsertNoBarList, {
  REQ_GET_DATA_LENGTH: 1,
  REQ_GET_ALL_DATA: -1
});
BI.MultiSelectInsertNoBarList.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_insert_no_bar_list", BI.MultiSelectInsertNoBarList);

/***/ }),
/* 836 */
/***/ (function(module, exports) {

/**
 * Created by zcf_1 on 2017/5/2.
 */
BI.MultiSelectList = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectList.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-list",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      searcherHeight: 24,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
    });
  },
  _init: function _init() {
    BI.MultiSelectList.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.storeValue = this._assertValue(BI.deepClone(o.value) || {});

    var assertShowValue = function assertShowValue() {
      BI.isKey(self._startValue) && (self.storeValue.type === BI.Selection.All ? BI.remove(self.storeValue.value, self._startValue) : BI.pushDistinct(self.storeValue.value, self._startValue)); // self.trigger.setValue(self.storeValue);
    };

    this.adapter = BI.createWidget({
      type: "bi.multi_select_loader",
      cls: "popup-multi-select-list bi-border-left bi-border-right bi-border-bottom",
      itemsCreator: o.itemsCreator,
      valueFormatter: o.valueFormatter,
      itemHeight: o.itemHeight,
      logic: {
        dynamic: false
      },
      value: o.value,
      isDefaultInit: true,
      // onLoaded: o.onLoaded,
      el: {}
    });
    this.adapter.on(BI.MultiSelectLoader.EVENT_CHANGE, function () {
      self.storeValue = this.getValue();

      self._adjust(function () {
        assertShowValue();
        self.fireEvent(BI.MultiSelectList.EVENT_CHANGE);
      });
    });
    this.searcherPane = BI.createWidget({
      type: "bi.multi_select_search_pane",
      cls: "bi-border-left bi-border-right bi-border-bottom",
      valueFormatter: o.valueFormatter,
      keywordGetter: function keywordGetter() {
        return self.trigger.getKeyword();
      },
      itemsCreator: function itemsCreator(op, callback) {
        var keyword = self.trigger.getKeyword();

        if (BI.isNotEmptyString(keyword)) {
          op.keywords = [keyword];
          o.itemsCreator(op, callback);
        }
      },
      itemHeight: o.itemHeight
    });
    this.searcherPane.setVisible(false);
    this.trigger = BI.createWidget({
      type: "bi.searcher",
      el: {
        type: "bi.select_patch_editor",
        el: {
          type: "bi.search_editor"
        },
        ref: function ref(_ref) {
          self.editor = _ref;
        },
        height: o.searcherHeight
      },
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback();
      },
      adapter: this.adapter,
      popup: this.searcherPane,
      height: 200,
      masker: false,
      listeners: [{
        eventName: BI.Searcher.EVENT_START,
        action: function action() {
          self._showSearcherPane();

          self._setStartValue("");

          this.setValue(BI.deepClone(self.storeValue));
        }
      }, {
        eventName: BI.Searcher.EVENT_STOP,
        action: function action() {
          self._showAdapter();

          self._setStartValue("");

          self.adapter.setValue(self.storeValue); // 需要刷新回到初始界面，否则搜索的结果不能放在最前面

          self.adapter.populate();
        }
      }, {
        eventName: BI.Searcher.EVENT_PAUSE,
        action: function action() {
          self._showAdapter();

          self.fireEvent(BI.MultiSelectList.EVENT_CHANGE);
        }
      }, {
        eventName: BI.Searcher.EVENT_SEARCHING,
        action: function action() {
          var keywords = this.getKeyword();
          var last = BI.last(keywords);
          keywords = BI.initial(keywords || []);

          if (keywords.length > 0) {
            self._joinKeywords(keywords, function () {
              if (BI.endWith(last, BI.BlankSplitChar)) {
                self.adapter.setValue(self.storeValue);
                assertShowValue();
                self.adapter.populate();

                self._setStartValue("");
              } else {
                self.adapter.setValue(self.storeValue);
                assertShowValue();
              }

              self.fireEvent(BI.MultiSelectList.EVENT_CHANGE);
            });
          }
        }
      }, {
        eventName: BI.Searcher.EVENT_CHANGE,
        action: function action(value, obj) {
          if (obj instanceof BI.MultiSelectBar) {
            self._joinAll(this.getValue(), function () {
              assertShowValue();
              self.fireEvent(BI.MultiSelectList.EVENT_CHANGE);
            });
          } else {
            self._join(this.getValue(), function () {
              assertShowValue();
              self.fireEvent(BI.MultiSelectList.EVENT_CHANGE);
            });
          }
        }
      }]
    });
    BI.createWidget({
      type: "bi.vtape",
      element: this,
      items: [{
        el: this.trigger,
        height: o.searcherHeight
      }, {
        el: this.adapter,
        height: "fill"
      }]
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.searcherPane,
        top: o.searcherHeight,
        bottom: 0,
        left: 0,
        right: 0
      }]
    });
  },
  _getKeywords: function _getKeywords() {
    var val = this.editor.getValue();
    var keywords = val.split(/\u200b\s\u200b/);

    if (BI.isEmptyString(keywords[keywords.length - 1])) {
      keywords = keywords.slice(0, keywords.length - 1);
    }

    if (/\u200b\s\u200b$/.test(val)) {
      return keywords.concat([BI.BlankSplitChar]);
    }

    return keywords;
  },
  _showAdapter: function _showAdapter() {
    this.adapter.setVisible(true);
    this.searcherPane.setVisible(false);
  },
  _showSearcherPane: function _showSearcherPane() {
    this.searcherPane.setVisible(true);
    this.adapter.setVisible(false);
  },
  _defaultState: function _defaultState() {
    this.trigger.stopEditing();
  },
  _assertValue: function _assertValue(val) {
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
    return val;
  },
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _joinKeywords: function _joinKeywords(keywords, callback) {
    var self = this,
        o = this.options;

    this._assertValue(this.storeValue); // 和复选下拉框同步，allData做缓存是会爆炸的


    o.itemsCreator({
      type: BI.MultiSelectList.REQ_GET_ALL_DATA,
      keywords: keywords
    }, function (ob) {
      var values = BI.map(ob.items, "value");
      digest(values);
    });

    function digest(items) {
      var selectedMap = self._makeMap(items);

      BI.each(keywords, function (i, val) {
        if (BI.isNotNull(selectedMap[val])) {
          self.storeValue.type === BI.Selection.Multi ? BI.pushDistinct(self.storeValue.value, val) : BI.remove(self.storeValue.value, val);
        }
      });

      self._adjust(callback);
    }
  },
  _joinAll: function _joinAll(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    if (this.storeValue.type === res.type) {
      var result = BI.Func.getSearchResult(BI.map(this.storeValue.value, function (_i, v) {
        return {
          text: o.valueFormatter(v) || v,
          value: v
        };
      }), this.trigger.getKeyword());
      var change = false;

      var map = this._makeMap(this.storeValue.value);

      BI.each(BI.concat(result.match, result.find), function (i, obj) {
        var v = obj.value;

        if (BI.isNotNull(map[v])) {
          change = true;
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      this._adjust(callback);

      return;
    }

    o.itemsCreator({
      type: BI.MultiSelectList.REQ_GET_ALL_DATA,
      keywords: [this.trigger.getKeyword()],
      selectedValues: BI.filter(this.storeValue.value, function (_i, v) {
        return !BI.contains(res.value, v);
      })
    }, function (ob) {
      var items = BI.map(ob.items, "value");

      var selectedMap = self._makeMap(self.storeValue.value);

      var notSelectedMap = self._makeMap(res.value);

      var newItems = [];
      BI.each(items, function (i, item) {
        if (BI.isNotNull(selectedMap[items[i]])) {
          delete selectedMap[items[i]];
        }

        if (BI.isNull(notSelectedMap[items[i]])) {
          newItems.push(item);
        }
      });
      self.storeValue.value = newItems.concat(BI.values(selectedMap));

      self._adjust(callback);
    });
  },
  _adjust: function _adjust(callback) {
    var self = this,
        o = this.options;

    if (!this._count) {
      o.itemsCreator({
        type: BI.MultiSelectList.REQ_GET_DATA_LENGTH
      }, function (res) {
        self._count = res.count;
        adjust();
        callback();
      });
    } else {
      adjust();
      callback();
    }

    function adjust() {
      if (self.storeValue.type === BI.Selection.All && self.storeValue.value.length >= self._count) {
        self.storeValue = {
          type: BI.Selection.Multi,
          value: []
        };
      } else if (self.storeValue.type === BI.Selection.Multi && self.storeValue.value.length >= self._count) {
        self.storeValue = {
          type: BI.Selection.All,
          value: []
        };
      }
    }
  },
  _join: function _join(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this._assertValue(this.storeValue);

    if (this.storeValue.type === res.type) {
      var map = this._makeMap(this.storeValue.value);

      BI.each(res.value, function (i, v) {
        if (!map[v]) {
          BI.pushDistinct(self.storeValue.value, v);
          map[v] = v;
        }
      });
      var change = false;
      BI.each(res.assist, function (i, v) {
        if (BI.isNotNull(map[v])) {
          change = true;
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      self._adjust(callback);

      return;
    }

    this._joinAll(res, callback);
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.adapter.setStartValue(value);
  },
  isAllSelected: function isAllSelected() {
    return this.adapter.isAllSelected();
  },
  resize: function resize() {// this.trigger.getCounter().adjustView();
    // this.trigger.adjustView();
  },
  setValue: function setValue(v) {
    this.storeValue = v || {};

    this._assertValue(this.storeValue);

    this.adapter.setValue(this.storeValue);
    this.trigger.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue);
  },
  populate: function populate() {
    this.adapter.populate.apply(this.adapter, arguments);
    this.trigger.populate.apply(this.trigger, arguments);
  }
});
BI.extend(BI.MultiSelectList, {
  REQ_GET_DATA_LENGTH: 1,
  REQ_GET_ALL_DATA: -1
});
BI.MultiSelectList.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_list", BI.MultiSelectList);

/***/ }),
/* 837 */
/***/ (function(module, exports) {

/**
 * Created by zcf_1 on 2017/5/11.
 */
BI.MultiSelectTree = BI.inherit(BI.Single, {
  _constant: {
    EDITOR_HEIGHT: 24
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectTree.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-tree",
      itemsCreator: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.MultiSelectTree.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.storeValue = {
      value: {}
    };
    this.adapter = BI.createWidget({
      type: "bi.multi_select_tree_popup",
      itemsCreator: o.itemsCreator,
      showLine: o.showLine
    });
    this.adapter.on(BI.MultiSelectTreePopup.EVENT_CHANGE, function () {
      if (self.searcher.isSearching()) {
        self.storeValue = {
          value: self.searcherPane.getValue()
        };
      } else {
        self.storeValue = {
          value: self.adapter.getValue()
        };
      }

      self.setSelectedValue(self.storeValue.value);
      self.fireEvent(BI.MultiSelectTree.EVENT_CHANGE);
    }); // 搜索中的时候用的是parttree，同adapter中的synctree不一样

    this.searcherPane = BI.createWidget({
      type: "bi.multi_tree_search_pane",
      cls: "bi-border-left bi-border-right bi-border-bottom",
      keywordGetter: function keywordGetter() {
        return self.searcher.getKeyword();
      },
      itemsCreator: function itemsCreator(op, callback) {
        op.keyword = self.searcher.getKeyword();
        o.itemsCreator(op, callback);
      }
    });
    this.searcherPane.setVisible(false);
    this.searcher = BI.createWidget({
      type: "bi.searcher",
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback({
          keyword: self.searcher.getKeyword()
        });
      },
      adapter: this.adapter,
      popup: this.searcherPane,
      masker: false,
      listeners: [{
        eventName: BI.Searcher.EVENT_START,
        action: function action() {
          self._showSearcherPane(); // self.storeValue = {value: self.adapter.getValue()};
          // self.searcherPane.setSelectedValue(self.storeValue.value);

        }
      }, {
        eventName: BI.Searcher.EVENT_STOP,
        action: function action() {
          self._showAdapter(); // self.storeValue = {value: self.searcherPane.getValue()};
          // self.adapter.setSelectedValue(self.storeValue.value);


          BI.nextTick(function () {
            self.adapter.populate();
          });
        }
      }, {
        eventName: BI.Searcher.EVENT_CHANGE,
        action: function action() {
          if (self.searcher.isSearching()) {
            self.storeValue = {
              value: self.searcherPane.getValue()
            };
          } else {
            self.storeValue = {
              value: self.adapter.getValue()
            };
          }

          self.setSelectedValue(self.storeValue.value);
          self.fireEvent(BI.MultiSelectTree.EVENT_CHANGE);
        }
      }, {
        eventName: BI.Searcher.EVENT_PAUSE,
        action: function action() {
          self._showAdapter(); // BI-64732 pause 和stop一致, 都应该刷新adapter


          BI.nextTick(function () {
            self.adapter.populate();
          });
        }
      }]
    });
    BI.createWidget({
      type: "bi.vertical_fill",
      element: this,
      items: [{
        el: this.searcher,
        height: ""
      }, {
        el: this.adapter,
        height: "fill"
      }]
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.searcherPane,
        top: this._constant.EDITOR_HEIGHT,
        bottom: 0,
        left: 0,
        right: 0
      }]
    });
  },
  _showAdapter: function _showAdapter() {
    this.adapter.setVisible(true);
    this.searcherPane.setVisible(false);
  },
  _showSearcherPane: function _showSearcherPane() {
    this.searcherPane.setVisible(true);
    this.adapter.setVisible(false);
  },
  resize: function resize() {},
  setSelectedValue: function setSelectedValue(v) {
    this.storeValue.value = v || {};
    this.adapter.setSelectedValue(v);
    this.searcherPane.setSelectedValue(v);
    this.searcher.setValue({
      value: v || {}
    });
  },
  setValue: function setValue(v) {
    this.adapter.setValue(v);
  },
  stopSearch: function stopSearch() {
    this.searcher.stopSearch();
  },
  updateValue: function updateValue(v) {
    this.adapter.updateValue(v);
  },
  getValue: function getValue() {
    return this.storeValue.value;
  },
  populate: function populate() {
    this.adapter.populate();
  }
});
BI.MultiSelectTree.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_tree", BI.MultiSelectTree);

/***/ }),
/* 838 */
/***/ (function(module, exports) {

/**
 * Created by zcf on 2016/12/21.
 */
BI.MultiSelectTreePopup = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiSelectTreePopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-tree-popup bi-border-left bi-border-right bi-border-bottom",
      itemsCreator: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.MultiSelectTreePopup.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.popup = BI.createWidget({
      type: "bi.async_tree",
      showLine: o.showLine,
      element: this,
      itemsCreator: o.itemsCreator
    });
    this.popup.on(BI.TreeView.EVENT_AFTERINIT, function () {
      self.fireEvent(BI.MultiSelectTreePopup.EVENT_AFTER_INIT);
    });
    this.popup.on(BI.TreeView.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectTreePopup.EVENT_CHANGE);
    });
  },
  hasChecked: function hasChecked() {
    return this.popup.hasChecked();
  },
  getValue: function getValue() {
    return this.popup.getValue();
  },
  setValue: function setValue(v) {
    v || (v = {});
    this.popup.setValue(v);
  },
  setSelectedValue: function setSelectedValue(v) {
    v || (v = {});
    this.popup.setSelectedValue(v);
  },
  updateValue: function updateValue(v) {
    this.popup.updateValue(v);
    this.popup.refresh();
  },
  populate: function populate(config) {
    this.popup.stroke(config);
  }
});
BI.MultiSelectTreePopup.EVENT_AFTER_INIT = "EVENT_AFTER_INIT";
BI.MultiSelectTreePopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_select_tree_popup", BI.MultiSelectTreePopup);

/***/ }),
/* 839 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.MultiTreeCheckPane
 * @extends BI.Pane
 */
BI.MultiTreeCheckPane = BI.inherit(BI.Pane, {
  constants: {
    height: 25,
    lgap: 10,
    tgap: 5
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiTreeCheckPane.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-tree-check-pane bi-background",
      onClickContinueSelect: BI.emptyFn,
      el: {
        type: "bi.display_tree"
      }
    });
  },
  _init: function _init() {
    BI.MultiTreeCheckPane.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    this.selectedValues = {};
    var continueSelect = BI.createWidget({
      type: "bi.text_button",
      title: BI.i18nText("BI-Continue_Select"),
      text: BI.i18nText("BI-Continue_Select"),
      cls: "multi-tree-check-selected"
    });
    continueSelect.on(BI.TextButton.EVENT_CHANGE, function () {
      opts.onClickContinueSelect();
      BI.nextTick(function () {
        self.empty();
      });
    });
    var backToPopup = BI.createWidget({
      type: "bi.vertical_adapt",
      columnSize: ["auto", "auto"],
      cls: "multi-tree-continue-select",
      items: [{
        el: {
          type: "bi.label",
          title: BI.i18nText("BI-Selected_Data"),
          text: BI.i18nText("BI-Selected_Data")
        },
        lgap: this.constants.lgap,
        tgap: this.constants.tgap
      }, {
        el: continueSelect,
        hgap: this.constants.lgap,
        tgap: this.constants.tgap
      }]
    });
    this.display = BI.createWidget(opts.el, {
      type: "bi.display_tree",
      cls: "bi-multi-tree-display",
      itemsCreator: function itemsCreator(op, callback) {
        op.type = BI.TreeView.REQ_TYPE_GET_SELECTED_DATA;
        opts.itemsCreator(op, callback);
      },
      value: (opts.value || {}).value
    });
    this.display.on(BI.Events.AFTERINIT, function () {
      self.fireEvent(BI.Events.AFTERINIT);
    });
    this.display.on(BI.TreeView.EVENT_INIT, function () {
      backToPopup.setVisible(false);
    });
    this.display.on(BI.TreeView.EVENT_AFTERINIT, function () {
      backToPopup.setVisible(true);
    });
    BI.createWidget({
      type: "bi.vtape",
      element: this,
      items: [{
        height: this.constants.height,
        el: backToPopup
      }, {
        height: "fill",
        el: this.display
      }]
    });
  },
  empty: function empty() {
    this.display.empty();
  },
  populate: function populate(configs) {
    this.display.stroke(configs);
  },
  setValue: function setValue(v) {
    v || (v = {});
    this.display.setSelectedValue(v.value);
  },
  getValue: function getValue() {}
});
BI.MultiTreeCheckPane.EVENT_CONTINUE_CLICK = "EVENT_CONTINUE_CLICK";
BI.shortcut("bi.multi_tree_check_pane", BI.MultiTreeCheckPane);

/***/ }),
/* 840 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.MultiTreeCombo
 * @extends BI.Single
 */
BI.MultiTreeCombo = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiTreeCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-tree-combo",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      height: 24,
      allowEdit: true,
      isNeedAdjustWidth: true
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.MultiTreeCombo.superclass._init.apply(this, arguments);

    var isInit = false;
    var want2showCounter = false;
    this.storeValue = {
      value: o.value || {}
    };
    this.trigger = BI.createWidget({
      type: "bi.multi_select_trigger",
      allowEdit: o.allowEdit,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      valueFormatter: o.valueFormatter,
      text: o.text,
      defaultText: o.defaultText,
      watermark: o.watermark,
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      searcher: {
        type: "bi.multi_tree_searcher",
        itemsCreator: o.itemsCreator
      },
      value: {
        value: o.value || {}
      }
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      cls: o.simple ? "bi-border-bottom" : "bi-border bi-border-radius",
      toggle: !o.allowEdit,
      container: o.container,
      el: this.trigger,
      adjustLength: 1,
      popup: {
        type: "bi.multi_tree_popup_view",
        ref: function ref() {
          self.popup = this;
          self.trigger.setAdapter(this);
          self.numberCounter.setAdapter(this);
        },
        listeners: [{
          eventName: BI.MultiTreePopup.EVENT_AFTERINIT,
          action: function action() {
            self.numberCounter.adjustView();
            isInit = true;

            if (want2showCounter === true) {
              showCounter();
            }
          }
        }, {
          eventName: BI.MultiTreePopup.EVENT_CHANGE,
          action: function action() {
            change = true;
            var val = {
              type: BI.Selection.Multi,
              value: this.hasChecked() ? this.getValue() : {}
            };
            self.trigger.getSearcher().setState(val);
            self.numberCounter.setButtonChecked(val);
            self.storeValue = {
              value: self.combo.getValue()
            };
            self.fireEvent(BI.MultiTreeCombo.EVENT_CLICK_ITEM, self.combo.getValue());
            self._dataChange = true;
          }
        }, {
          eventName: BI.MultiTreePopup.EVENT_CLICK_CONFIRM,
          action: function action() {
            self.combo.hideView();
          }
        }, {
          eventName: BI.MultiTreePopup.EVENT_CLICK_CLEAR,
          action: function action() {
            clear = true;
            self._dataChange = true;
            self.setValue();

            self._defaultState();
          }
        }],
        itemsCreator: o.itemsCreator,
        onLoaded: function onLoaded() {
          BI.nextTick(function () {
            self.numberCounter.adjustView();
            self.trigger.getSearcher().adjustView();
          });
        },
        maxWidth: o.isNeedAdjustWidth ? "auto" : 500
      },
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      value: {
        value: o.value || {}
      },
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0 && self.numberCounter.element.find(e.target).length === 0;
      }
    });
    var change = false;
    var clear = false; // 标识当前是否点击了清空

    var isSearching = function isSearching() {
      return self.trigger.getSearcher().isSearching();
    };

    var isPopupView = function isPopupView() {
      return self.combo.isViewVisible();
    };

    this.trigger.on(BI.MultiSelectTrigger.EVENT_FOCUS, function () {
      self.fireEvent(BI.MultiTreeCombo.EVENT_FOCUS);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_BLUR, function () {
      self.fireEvent(BI.MultiTreeCombo.EVENT_BLUR);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_START, function () {
      self.storeValue = {
        value: self.combo.getValue()
      };
      this.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_STOP, function () {
      self.storeValue = {
        value: this.getValue()
      };
      self.combo.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
      BI.nextTick(function () {
        if (isPopupView()) {
          self.combo.populate();
        }
      });
      self.fireEvent(BI.MultiTreeCombo.EVENT_STOP);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_SEARCHING, function () {
      self.fireEvent(BI.MultiTreeCombo.EVENT_SEARCHING);
    });

    function showCounter() {
      if (isSearching()) {
        self.storeValue = {
          value: self.trigger.getValue()
        };
      } else if (isPopupView()) {
        self.storeValue = {
          value: self.combo.getValue()
        };
      }

      self.trigger.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
    }

    this.trigger.on(BI.MultiSelectTrigger.EVENT_TRIGGER_CLICK, function () {
      self.combo.toggle();
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_COUNTER_CLICK, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_CHANGE, function () {
      var checked = this.getSearcher().hasChecked();
      var val = {
        type: BI.Selection.Multi,
        value: checked ? {
          1: 1
        } : {}
      };
      this.getSearcher().setState(checked ? BI.Selection.Multi : BI.Selection.None);
      self.numberCounter.setButtonChecked(val);
      self.fireEvent(BI.MultiTreeCombo.EVENT_CLICK_ITEM, self.combo.getValue());
      self._dataChange = true;
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      if (isSearching()) {
        return;
      }

      if (!this.isViewVisible()) {
        self._dataChange = false; // 标记数据是否发生变化
      }

      if (change === true) {
        self.storeValue = {
          value: self.combo.getValue()
        };
        change = false;
      }

      self.combo.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
      self.populate();
      self.fireEvent(BI.MultiTreeCombo.EVENT_BEFORE_POPUPVIEW);
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_HIDEVIEW, function () {
      if (isSearching()) {
        self._stopEditing();

        self._dataChange && self.fireEvent(BI.MultiTreeCombo.EVENT_CONFIRM);
      } else {
        if (isPopupView()) {
          self._stopEditing();

          self.storeValue = {
            value: self.combo.getValue()
          };

          if (clear === true) {
            self.storeValue = {
              value: {}
            };
          }

          self._dataChange && self.fireEvent(BI.MultiTreeCombo.EVENT_CONFIRM);
        }
      }

      clear = false;
      change = false;
    });
    this.combo.on(BI.Combo.EVENT_AFTER_HIDEVIEW, function () {
      self.fireEvent(BI.MultiTreeCombo.EVENT_AFTER_HIDEVIEW);
    });
    var triggerBtn = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.height,
      height: o.height,
      cls: "multi-select-trigger-icon-button"
    });
    triggerBtn.on(BI.TriggerIconButton.EVENT_CHANGE, function () {
      self.numberCounter.hideView();

      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    this.numberCounter = BI.createWidget({
      type: "bi.multi_select_check_selected_switcher",
      el: {
        type: "bi.multi_tree_check_selected_button"
      },
      popup: {
        type: "bi.multi_tree_check_pane"
      },
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      itemsCreator: o.itemsCreator,
      valueFormatter: o.valueFormatter,
      value: {
        value: o.value || {}
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_TRIGGER_CHANGE, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_BEFORE_POPUPVIEW, function () {
      if (want2showCounter === false) {
        want2showCounter = true;
      }

      if (isInit === true) {
        want2showCounter = null;
        showCounter();
      }
    });
    this.numberCounter.on(BI.Events.VIEW, function (b) {
      BI.nextTick(function () {
        // 自动调整宽度
        self.trigger.refreshPlaceHolderWidth(b === true ? self.numberCounter.element.outerWidth() + 8 : 0);
      });
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_AFTER_HIDEVIEW, function () {
      BI.nextTick(function () {
        // 收起时自动调整宽度
        self.trigger.refreshPlaceHolderWidth(0);
      });
    });
    this.trigger.element.click(function (e) {
      if (self.trigger.element.find(e.target).length > 0) {
        self.numberCounter.hideView();
      }
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.combo,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: triggerBtn,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: {
          type: "bi.vertical_adapt",
          items: [this.numberCounter]
        },
        right: o.height,
        top: 0,
        bottom: 0
      }]
    });
  },
  _stopEditing: function _stopEditing() {
    this.trigger.stopEditing();
    this.numberCounter.hideView();
  },
  _defaultState: function _defaultState() {
    this._stopEditing();

    this.combo.hideView();
  },
  showView: function showView() {
    this.combo.showView();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  setValue: function setValue(v) {
    this.storeValue.value = v || {};
    this.combo.setValue({
      value: v || {}
    });
    this.numberCounter.setValue({
      value: v || {}
    });
  },
  getSearcher: function getSearcher() {
    return this.trigger.getSearcher();
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue.value);
  },
  populate: function populate() {
    this.combo.populate();
  },
  focus: function focus() {
    this.trigger.focus();
  },
  blur: function blur() {
    this.trigger.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.trigger.setWaterMark(v);
  }
});
BI.MultiTreeCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiTreeCombo.EVENT_BLUR = "EVENT_BLUR";
BI.MultiTreeCombo.EVENT_STOP = "EVENT_STOP";
BI.MultiTreeCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiTreeCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.MultiTreeCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.MultiTreeCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.MultiTreeCombo.EVENT_AFTER_HIDEVIEW = "EVENT_AFTER_HIDEVIEW";
BI.shortcut("bi.multi_tree_combo", BI.MultiTreeCombo);

/***/ }),
/* 841 */
/***/ (function(module, exports) {

/**
 * 可以往当前选中节点下添加新值的下拉树
 * @class BI.MultiTreeInsertCombo
 * @extends BI.Single
 */
BI.MultiTreeInsertCombo = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiTreeInsertCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-tree-insert-combo",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      height: 24,
      allowEdit: true,
      isNeedAdjustWidth: true
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.MultiTreeInsertCombo.superclass._init.apply(this, arguments);

    var isInit = false;
    var want2showCounter = false;
    this.storeValue = {
      value: o.value || {}
    };
    this.trigger = BI.createWidget({
      type: "bi.multi_select_trigger",
      allowEdit: o.allowEdit,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      valueFormatter: o.valueFormatter,
      text: o.text,
      defaultText: o.defaultText,
      watermark: o.watermark,
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      searcher: {
        type: "bi.multi_tree_searcher",
        itemsCreator: o.itemsCreator,
        popup: {
          type: "bi.multi_tree_search_insert_pane",
          listeners: [{
            eventName: BI.MultiTreeSearchInsertPane.EVENT_ADD_ITEM,
            action: function action() {
              self.storeValue.value[self.trigger.getSearcher().getKeyword()] = {};

              self._assertShowValue(); // setValue以更新paras.value, 之后从search popup中拿到的就能有add的值了


              self.combo.setValue(self.storeValue);
              self.numberCounter.setValue(self.storeValue);

              self._stopEditing();

              self._dataChange = true;
            }
          }]
        }
      },
      value: {
        value: o.value || {}
      }
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      cls: o.simple ? "bi-border-bottom" : "bi-border bi-border-radius",
      toggle: !o.allowEdit,
      container: o.container,
      el: this.trigger,
      adjustLength: 1,
      popup: {
        type: "bi.multi_tree_popup_view",
        ref: function ref() {
          self.popup = this;
          self.trigger.setAdapter(this);
          self.numberCounter.setAdapter(this);
        },
        listeners: [{
          eventName: BI.MultiTreePopup.EVENT_AFTERINIT,
          action: function action() {
            self.numberCounter.adjustView();
            isInit = true;

            if (want2showCounter === true) {
              showCounter();
            }
          }
        }, {
          eventName: BI.MultiTreePopup.EVENT_CHANGE,
          action: function action() {
            change = true;
            var val = {
              type: BI.Selection.Multi,
              value: this.hasChecked() ? this.getValue() : {}
            };
            self.trigger.getSearcher().setState(val);
            self.numberCounter.setButtonChecked(val);
            self.storeValue = {
              value: self.combo.getValue()
            };
            self.fireEvent(BI.MultiTreeInsertCombo.EVENT_CLICK_ITEM, self.getValue());
            self._dataChange = true;
          }
        }, {
          eventName: BI.MultiTreePopup.EVENT_CLICK_CONFIRM,
          action: function action() {
            self.combo.hideView();
          }
        }, {
          eventName: BI.MultiTreePopup.EVENT_CLICK_CLEAR,
          action: function action() {
            clear = true;
            self._dataChange = true;
            self.setValue();

            self._defaultState();
          }
        }],
        itemsCreator: o.itemsCreator,
        onLoaded: function onLoaded() {
          BI.nextTick(function () {
            self.numberCounter.adjustView();
            self.trigger.getSearcher().adjustView();
          });
        },
        maxWidth: o.isNeedAdjustWidth ? "auto" : 500
      },
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      value: {
        value: o.value || {}
      },
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0 && self.numberCounter.element.find(e.target).length === 0;
      }
    });
    var change = false;
    var clear = false; // 标识当前是否点击了清空

    var isSearching = function isSearching() {
      return self.trigger.getSearcher().isSearching();
    };

    var isPopupView = function isPopupView() {
      return self.combo.isViewVisible();
    };

    this.trigger.on(BI.MultiSelectTrigger.EVENT_FOCUS, function () {
      self.fireEvent(BI.MultiTreeInsertCombo.EVENT_FOCUS);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_BLUR, function () {
      self.fireEvent(BI.MultiTreeInsertCombo.EVENT_BLUR);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_START, function () {
      self.storeValue = {
        value: self.combo.getValue()
      };
      this.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_STOP, function () {
      self.storeValue = {
        value: this.getValue()
      };
      self.combo.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
      BI.nextTick(function () {
        if (isPopupView()) {
          self.combo.populate();
        }
      });
      self.fireEvent(BI.MultiTreeInsertCombo.EVENT_STOP);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_SEARCHING, function () {
      self.fireEvent(BI.MultiTreeInsertCombo.EVENT_SEARCHING);
    });

    function showCounter() {
      if (isSearching()) {
        self.storeValue = {
          value: self.trigger.getValue()
        };
      } else if (isPopupView()) {
        self.storeValue = {
          value: self.combo.getValue()
        };
      }

      self.trigger.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
    }

    this.trigger.on(BI.MultiSelectTrigger.EVENT_TRIGGER_CLICK, function () {
      self.combo.toggle();
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_CHANGE, function () {
      var checked = this.getSearcher().hasChecked();
      var val = {
        type: BI.Selection.Multi,
        value: checked ? {
          1: 1
        } : {}
      };
      this.getSearcher().setState(checked ? BI.Selection.Multi : BI.Selection.None);
      self.numberCounter.setButtonChecked(val);
      self.fireEvent(BI.MultiTreeInsertCombo.EVENT_CLICK_ITEM, self.combo.getValue());
      self._dataChange = true;
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      if (isSearching()) {
        return;
      }

      if (!this.isViewVisible()) {
        self._dataChange = false; // 标记数据是否发生变化
      }

      if (change === true) {
        self.storeValue = {
          value: self.combo.getValue()
        };
        change = false;
      }

      self.combo.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
      self.populate();
      self.fireEvent(BI.MultiTreeInsertCombo.EVENT_BEFORE_POPUPVIEW);
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_HIDEVIEW, function () {
      if (isSearching()) {
        self._stopEditing();

        self._dataChange && self.fireEvent(BI.MultiTreeInsertCombo.EVENT_CONFIRM);
      } else {
        if (isPopupView()) {
          self._stopEditing();

          self.storeValue = {
            value: self.combo.getValue()
          };

          if (clear === true) {
            self.storeValue = {
              value: {}
            };
          }

          self._dataChange && self.fireEvent(BI.MultiTreeInsertCombo.EVENT_CONFIRM);
        }
      }

      clear = false;
      change = false;
    });
    var triggerBtn = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.height,
      height: o.height,
      cls: "multi-select-trigger-icon-button"
    });
    triggerBtn.on(BI.TriggerIconButton.EVENT_CHANGE, function () {
      self.numberCounter.hideView();

      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    this.numberCounter = BI.createWidget({
      type: "bi.multi_select_check_selected_switcher",
      el: {
        type: "bi.multi_tree_check_selected_button"
      },
      popup: {
        type: "bi.multi_tree_check_pane"
      },
      itemsCreator: o.itemsCreator,
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      valueFormatter: o.valueFormatter,
      value: o.value
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_TRIGGER_CHANGE, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_BEFORE_POPUPVIEW, function () {
      if (want2showCounter === false) {
        want2showCounter = true;
      }

      if (isInit === true) {
        want2showCounter = null;
        showCounter();
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_AFTER_HIDEVIEW, function () {
      BI.nextTick(function () {
        // 收起时自动调整宽度
        self.trigger.refreshPlaceHolderWidth(0);
      });
    });
    this.numberCounter.on(BI.Events.VIEW, function (b) {
      BI.nextTick(function () {
        // 自动调整宽度
        self.trigger.refreshPlaceHolderWidth(b === true ? self.numberCounter.element.outerWidth() + 8 : 0);
      });
    });
    this.trigger.element.click(function (e) {
      if (self.trigger.element.find(e.target).length > 0) {
        self.numberCounter.hideView();
      }
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.combo,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: triggerBtn,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: {
          type: "bi.vertical_adapt",
          items: [this.numberCounter]
        },
        right: o.height,
        top: 0,
        height: o.height
      }]
    });
  },
  _assertShowValue: function _assertShowValue() {
    this.trigger.getSearcher().setState(this.storeValue);
    this.numberCounter.setButtonChecked(this.storeValue);
  },
  _stopEditing: function _stopEditing() {
    this.trigger.stopEditing();
    this.numberCounter.hideView();
  },
  _defaultState: function _defaultState() {
    this._stopEditing();

    this.combo.hideView();
  },
  getSearcher: function getSearcher() {
    return this.trigger.getSearcher();
  },
  showView: function showView() {
    this.combo.showView();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  setValue: function setValue(v) {
    this.storeValue.value = v || {};
    this.combo.setValue({
      value: v || {}
    });
    this.numberCounter.setValue({
      value: v || {}
    });
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue.value);
  },
  populate: function populate() {
    this.combo.populate();
  },
  focus: function focus() {
    this.trigger.focus();
  },
  blur: function blur() {
    this.trigger.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.trigger.setWaterMark(v);
  }
});
BI.MultiTreeInsertCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiTreeInsertCombo.EVENT_BLUR = "EVENT_BLUR";
BI.MultiTreeInsertCombo.EVENT_STOP = "EVENT_STOP";
BI.MultiTreeInsertCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.MultiTreeInsertCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiTreeInsertCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.MultiTreeInsertCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.multi_tree_insert_combo", BI.MultiTreeInsertCombo);

/***/ }),
/* 842 */
/***/ (function(module, exports) {

/**
 * 选中节点不影响父子节点状态的下拉树
 * @class BI.MultiTreeListCombo
 * @extends BI.Single
 */
BI.MultiTreeListCombo = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiTreeListCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-tree-list-combo",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      height: 24,
      allowEdit: true,
      allowInsertValue: true,
      isNeedAdjustWidth: true,
      text: ""
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.MultiTreeListCombo.superclass._init.apply(this, arguments);

    var isInit = false;
    var want2showCounter = false;
    this.storeValue = {
      value: o.value || []
    };
    this.trigger = BI.createWidget({
      type: "bi.multi_select_trigger",
      allowEdit: o.allowEdit,
      text: o.text,
      defaultText: o.defaultText,
      watermark: o.watermark,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      valueFormatter: o.valueFormatter,
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      searcher: {
        type: "bi.multi_list_tree_searcher",
        itemsCreator: o.itemsCreator,
        popup: {
          type: o.allowInsertValue ? "bi.multi_tree_search_insert_pane" : "bi.multi_tree_search_pane",
          el: {
            type: "bi.list_part_tree"
          },
          listeners: [{
            eventName: BI.MultiTreeSearchInsertPane.EVENT_ADD_ITEM,
            action: function action() {
              self.storeValue.value.unshift([self.trigger.getSearcher().getKeyword()]);

              self._assertShowValue(); // setValue以更新paras.value, 之后从search popup中拿到的就能有add的值了


              self.combo.setValue(self.storeValue);
              self.numberCounter.setValue(self.storeValue);

              self._stopEditing();

              self._dataChange = true;
            }
          }]
        }
      },
      switcher: {
        el: {
          type: "bi.multi_tree_check_selected_button"
        },
        popup: {
          type: "bi.multi_tree_check_pane",
          el: {
            type: "bi.list_display_tree"
          },
          itemsCreator: o.itemsCreator
        }
      },
      value: this.storeValue
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      cls: o.simple ? "bi-border-bottom" : "bi-border bi-border-radius",
      toggle: !o.allowEdit,
      container: o.container,
      el: this.trigger,
      adjustLength: 1,
      popup: {
        type: "bi.multi_tree_popup_view",
        ref: function ref() {
          self.popup = this;
          self.trigger.setAdapter(this);
          self.numberCounter.setAdapter(this);
        },
        el: {
          type: "bi.list_async_tree"
        },
        listeners: [{
          eventName: BI.MultiTreePopup.EVENT_AFTERINIT,
          action: function action() {
            self.numberCounter.adjustView();
            isInit = true;

            if (want2showCounter === true) {
              showCounter();
            }
          }
        }, {
          eventName: BI.MultiTreePopup.EVENT_CHANGE,
          action: function action() {
            change = true;
            var val = {
              type: BI.Selection.Multi,
              value: this.hasChecked() ? this.getValue() : []
            };
            self.trigger.getSearcher().setState(val);
            self.numberCounter.setButtonChecked(val);
            self.storeValue = {
              value: self.combo.getValue()
            };
            self.fireEvent(BI.MultiTreeListCombo.EVENT_CLICK_ITEM, self.getValue());
            self._dataChange = true;
          }
        }, {
          eventName: BI.MultiTreePopup.EVENT_CLICK_CONFIRM,
          action: function action() {
            self.combo.hideView();
          }
        }, {
          eventName: BI.MultiTreePopup.EVENT_CLICK_CLEAR,
          action: function action() {
            clear = true;
            self._dataChange = true;
            self.setValue();

            self._defaultState();
          }
        }],
        itemsCreator: o.itemsCreator,
        onLoaded: function onLoaded() {
          BI.nextTick(function () {
            self.numberCounter.adjustView();
            self.trigger.getSearcher().adjustView();
          });
        },
        maxWidth: o.isNeedAdjustWidth ? "auto" : 500
      },
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      value: this.storeValue,
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0 && self.numberCounter.element.find(e.target).length === 0;
      }
    });
    var change = false;
    var clear = false; // 标识当前是否点击了清空

    var isSearching = function isSearching() {
      return self.trigger.getSearcher().isSearching();
    };

    var isPopupView = function isPopupView() {
      return self.combo.isViewVisible();
    };

    this.trigger.on(BI.MultiSelectTrigger.EVENT_FOCUS, function () {
      self.fireEvent(BI.MultiTreeListCombo.EVENT_FOCUS);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_BLUR, function () {
      self.fireEvent(BI.MultiTreeListCombo.EVENT_BLUR);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_START, function () {
      self.storeValue = {
        value: self.combo.getValue()
      };
      this.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_STOP, function () {
      self.storeValue = {
        value: this.getValue()
      };
      self.combo.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
      BI.nextTick(function () {
        if (isPopupView()) {
          self.combo.populate();
        }
      });
      self.fireEvent(BI.MultiTreeListCombo.EVENT_STOP);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_SEARCHING, function () {
      self.fireEvent(BI.MultiTreeListCombo.EVENT_SEARCHING);
    });

    function showCounter() {
      if (isSearching()) {
        self.storeValue = {
          value: self.trigger.getValue()
        };
      } else if (isPopupView()) {
        self.storeValue = {
          value: self.combo.getValue()
        };
      }

      self.trigger.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
    }

    this.trigger.on(BI.MultiSelectTrigger.EVENT_TRIGGER_CLICK, function () {
      self.combo.toggle();
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_CHANGE, function () {
      var checked = this.getSearcher().hasChecked();
      var val = {
        type: BI.Selection.Multi,
        value: checked ? {
          1: 1
        } : {}
      };
      this.getSearcher().setState(checked ? BI.Selection.Multi : BI.Selection.None);
      self.numberCounter.setButtonChecked(val);
      self.fireEvent(BI.MultiTreeListCombo.EVENT_CLICK_ITEM, self.combo.getValue());
      self._dataChange = true;
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      if (isSearching()) {
        return;
      }

      if (!this.isViewVisible()) {
        self._dataChange = false; // 标记数据是否发生变化
      }

      if (change === true) {
        self.storeValue = {
          value: self.combo.getValue()
        };
        change = false;
      }

      self.combo.setValue(self.storeValue);
      self.numberCounter.setValue(self.storeValue);
      self.populate();
      self.fireEvent(BI.MultiTreeListCombo.EVENT_BEFORE_POPUPVIEW);
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_HIDEVIEW, function () {
      if (isSearching()) {
        self.trigger.stopEditing();
        self._dataChange && self.fireEvent(BI.MultiTreeListCombo.EVENT_CONFIRM);
      } else {
        if (isPopupView()) {
          self._stopEditing();

          self.storeValue = {
            value: self.combo.getValue()
          };

          if (clear === true) {
            self.storeValue = {
              value: []
            };
          }

          self._dataChange && self.fireEvent(BI.MultiTreeListCombo.EVENT_CONFIRM);
        }
      }

      clear = false;
      change = false;
    });
    var triggerBtn = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.height,
      height: o.height,
      cls: "multi-select-trigger-icon-button"
    });
    triggerBtn.on(BI.TriggerIconButton.EVENT_CHANGE, function () {
      self.numberCounter.hideView();

      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    this.numberCounter = BI.createWidget({
      type: "bi.multi_select_check_selected_switcher",
      el: {
        type: "bi.multi_tree_check_selected_button"
      },
      popup: {
        type: "bi.multi_tree_check_pane"
      },
      itemsCreator: o.itemsCreator,
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      valueFormatter: o.valueFormatter,
      value: o.value
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_TRIGGER_CHANGE, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_BEFORE_POPUPVIEW, function () {
      if (want2showCounter === false) {
        want2showCounter = true;
      }

      if (isInit === true) {
        want2showCounter = null;
        showCounter();
      }
    });
    this.numberCounter.on(BI.Events.VIEW, function (b) {
      BI.nextTick(function () {
        // 自动调整宽度
        self.trigger.refreshPlaceHolderWidth(b === true ? self.numberCounter.element.outerWidth() + 8 : 0);
      });
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_AFTER_HIDEVIEW, function () {
      BI.nextTick(function () {
        // 收起时自动调整宽度
        self.trigger.refreshPlaceHolderWidth(0);
      });
    });
    this.trigger.element.click(function (e) {
      if (self.trigger.element.find(e.target).length > 0) {
        self.numberCounter.hideView();
      }
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.combo,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: triggerBtn,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: {
          type: "bi.vertical_adapt",
          items: [this.numberCounter]
        },
        right: o.height,
        top: 0,
        height: o.height
      }]
    });
  },
  _assertShowValue: function _assertShowValue() {
    this.trigger.getSearcher().setState(this.storeValue);
    this.numberCounter.setButtonChecked(this.storeValue);
  },
  _stopEditing: function _stopEditing() {
    this.trigger.stopEditing();
    this.numberCounter.hideView();
  },
  _defaultState: function _defaultState() {
    this._stopEditing();

    this.combo.hideView();
  },
  showView: function showView() {
    this.combo.showView();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  getSearcher: function getSearcher() {
    return this.trigger.getSearcher();
  },
  setValue: function setValue(v) {
    this.storeValue.value = v || [];
    this.combo.setValue({
      value: v || []
    });
    this.numberCounter.setValue({
      value: v || []
    });
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue.value);
  },
  populate: function populate() {
    this.combo.populate();
  },
  focus: function focus() {
    this.trigger.focus();
  },
  blur: function blur() {
    this.trigger.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.trigger.setWaterMark(v);
  }
});
BI.MultiTreeListCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.MultiTreeListCombo.EVENT_BLUR = "EVENT_BLUR";
BI.MultiTreeListCombo.EVENT_STOP = "EVENT_STOP";
BI.MultiTreeListCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.MultiTreeListCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiTreeListCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.MultiTreeListCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.multi_tree_list_combo", BI.MultiTreeListCombo);

/***/ }),
/* 843 */
/***/ (function(module, exports) {

/**
 * 带加载的多选下拉面板
 * @class BI.MultiTreePopup
 * @extends BI.Pane
 */
BI.MultiTreePopup = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiTreePopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-tree-popup",
      maxWidth: "auto",
      minWidth: 140,
      maxHeight: 400,
      onLoaded: BI.emptyFn,
      el: {
        type: "bi.async_tree"
      }
    });
  },
  _init: function _init() {
    BI.MultiTreePopup.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options,
        v = opts.value;
    this.selectedValues = {};
    this.tree = BI.createWidget(opts.el, {
      type: "bi.async_tree",
      showLine: opts.showLine,
      height: 400,
      cls: "popup-view-tree",
      itemsCreator: opts.itemsCreator,
      onLoaded: opts.onLoaded,
      value: v.value || {}
    });
    this.popupView = BI.createWidget({
      type: "bi.multi_popup_view",
      element: this,
      stopPropagation: false,
      maxWidth: opts.maxWidth,
      minWidth: opts.minWidth,
      maxHeight: opts.maxHeight,
      buttons: [BI.i18nText("BI-Basic_Clears"), BI.i18nText("BI-Basic_OK")],
      el: this.tree
    });
    this.popupView.on(BI.MultiPopupView.EVENT_CLICK_TOOLBAR_BUTTON, function (index) {
      switch (index) {
        case 0:
          self.fireEvent(BI.MultiTreePopup.EVENT_CLICK_CLEAR);
          break;

        case 1:
          self.fireEvent(BI.MultiTreePopup.EVENT_CLICK_CONFIRM);
          break;
      }
    });
    this.tree.on(BI.TreeView.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiTreePopup.EVENT_CHANGE);
    });
    this.tree.on(BI.TreeView.EVENT_AFTERINIT, function () {
      self.fireEvent(BI.MultiTreePopup.EVENT_AFTERINIT);
    });
  },
  getValue: function getValue() {
    return this.tree.getValue();
  },
  setValue: function setValue(v) {
    v || (v = {});
    this.tree.setSelectedValue(v.value);
  },
  populate: function populate(config) {
    this.tree.stroke(config);
  },
  hasChecked: function hasChecked() {
    return this.tree.hasChecked();
  },
  setDirection: function setDirection(direction, position) {
    this.popupView.setDirection(direction, position);
  },
  resetHeight: function resetHeight(h) {
    this.popupView.resetHeight(h);
  },
  resetWidth: function resetWidth(w) {
    this.popupView.resetWidth(w);
  }
});
BI.MultiTreePopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiTreePopup.EVENT_CLICK_CONFIRM = "EVENT_CLICK_CONFIRM";
BI.MultiTreePopup.EVENT_CLICK_CLEAR = "EVENT_CLICK_CLEAR";
BI.MultiTreePopup.EVENT_AFTERINIT = "EVENT_AFTERINIT";
BI.shortcut("bi.multi_tree_popup_view", BI.MultiTreePopup);

/***/ }),
/* 844 */
/***/ (function(module, exports) {

/**
 * 查看已选按钮
 * Created by guy on 15/11/3.
 * @class BI.MultiTreeCheckSelectedButton
 * @extends BI.Single
 */
BI.MultiTreeCheckSelectedButton = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiTreeCheckSelectedButton.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-tree-check-selected-button",
      itemsCreator: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.MultiTreeCheckSelectedButton.superclass._init.apply(this, arguments);

    var self = this;
    this.indicator = BI.createWidget({
      type: "bi.icon_button",
      cls: "check-font trigger-check-selected icon-size-12",
      width: 16,
      height: 16,
      stopPropagation: true
    });
    this.checkSelected = BI.createWidget({
      type: "bi.text_button",
      cls: "bi-high-light-background trigger-check-text",
      invisible: true,
      hgap: 4,
      text: BI.i18nText("BI-Check_Selected"),
      textAlign: "center"
    });
    this.checkSelected.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.checkSelected.on(BI.TextButton.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiSelectCheckSelectedButton.EVENT_CHANGE, arguments);
    });
    BI.createWidget({
      type: "bi.horizontal",
      element: this,
      items: [this.indicator, this.checkSelected]
    });
    this.element.hover(function () {
      self.indicator.setVisible(false);
      self.checkSelected.setVisible(true);
    }, function () {
      self.indicator.setVisible(true);
      self.checkSelected.setVisible(false);
    });
    this.setVisible(false);
  },
  setValue: function setValue(v) {
    v || (v = {});
    var show = BI.size(v.value) > 0;
    this.setVisible(show);
  }
});
BI.MultiTreeCheckSelectedButton.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.multi_tree_check_selected_button", BI.MultiTreeCheckSelectedButton);

/***/ }),
/* 845 */
/***/ (function(module, exports) {

/**
 *
 * 在搜索框中输入文本弹出的面板
 * @class BI.MultiTreeSearchInsertPane
 * @extends BI.Pane
 */
BI.MultiTreeSearchInsertPane = BI.inherit(BI.Widget, {
  constants: {
    height: 24
  },
  props: {
    baseCls: "bi-multi-tree-search-insert-pane bi-card",
    itemsCreator: BI.emptyFn,
    keywordGetter: BI.emptyFn,
    el: {
      type: "bi.part_tree"
    }
  },
  render: function render() {
    var self = this,
        opts = this.options;
    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.text_button",
          invisible: true,
          ref: function ref(_ref) {
            self.addTip = _ref;
          },
          text: BI.i18nText("BI-Basic_Click_To_Add_Text", ""),
          height: this.constants.height,
          cls: "bi-high-light",
          handler: function handler() {
            self.fireEvent(BI.MultiTreeSearchInsertPane.EVENT_ADD_ITEM, opts.keywordGetter());
          }
        },
        top: 5,
        left: 0,
        right: 0
      }, {
        el: BI.extend({
          type: "bi.part_tree",
          tipText: BI.i18nText("BI-No_Select"),
          itemsCreator: function itemsCreator(op, callback) {
            op.keyword = opts.keywordGetter();
            opts.itemsCreator(op, function (res) {
              callback(res);
              self.setKeyword(opts.keywordGetter(), res.items);
            });
          },
          ref: function ref(_ref) {
            self.partTree = _ref;
          },
          value: opts.value,
          listeners: [{
            eventName: BI.Controller.EVENT_CHANGE,
            action: function action() {
              self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
            }
          }, {
            eventName: BI.TreeView.EVENT_CHANGE,
            action: function action() {
              self.fireEvent(BI.MultiTreeSearchInsertPane.EVENT_CHANGE);
            }
          }]
        }, opts.el),
        left: 0,
        top: 0,
        bottom: 0,
        right: 0
      }]
    };
  },
  setKeyword: function setKeyword(keyword, nodes) {
    var isAddTipVisible = BI.isEmptyArray(nodes);
    this.addTip.setVisible(isAddTipVisible);
    this.partTree.setVisible(!isAddTipVisible);
    isAddTipVisible && this.addTip.setText(BI.i18nText("BI-Basic_Click_To_Add_Text", keyword));
  },
  hasChecked: function hasChecked() {
    return this.partTree.hasChecked();
  },
  setValue: function setValue(v) {
    this.setSelectedValue(v.value);
  },
  setSelectedValue: function setSelectedValue(v) {
    v || (v = {});
    this.partTree.setSelectedValue(v);
  },
  getValue: function getValue() {
    return this.partTree.getValue();
  },
  empty: function empty() {
    this.partTree.empty();
  },
  populate: function populate(op) {
    this.partTree.stroke.apply(this.partTree, arguments);
  }
});
BI.MultiTreeSearchInsertPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiTreeSearchInsertPane.EVENT_CLICK_CONFIRM = "EVENT_CLICK_CONFIRM";
BI.MultiTreeSearchInsertPane.EVENT_CLICK_CLEAR = "EVENT_CLICK_CLEAR";
BI.MultiTreeSearchInsertPane.EVENT_ADD_ITEM = "EVENT_ADD_ITEM";
BI.shortcut("bi.multi_tree_search_insert_pane", BI.MultiTreeSearchInsertPane);

/***/ }),
/* 846 */
/***/ (function(module, exports) {

/**
 *
 * 在搜索框中输入文本弹出的面板
 * @class BI.MultiTreeSearchPane
 * @extends BI.Pane
 */
BI.MultiTreeSearchPane = BI.inherit(BI.Pane, {
  props: {
    baseCls: "bi-multi-tree-search-pane bi-card",
    itemsCreator: BI.emptyFn,
    keywordGetter: BI.emptyFn
  },
  render: function render() {
    var self = this,
        opts = this.options;
    return BI.extend({
      type: "bi.part_tree",
      element: this,
      tipText: BI.i18nText("BI-No_Select"),
      itemsCreator: function itemsCreator(op, callback) {
        op.keyword = opts.keywordGetter();
        opts.itemsCreator(op, callback);
      },
      value: opts.value,
      listeners: [{
        eventName: BI.Controller.EVENT_CHANGE,
        action: function action() {
          self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        }
      }, {
        eventName: BI.TreeView.EVENT_CHANGE,
        action: function action() {
          self.fireEvent(BI.MultiTreeSearchPane.EVENT_CHANGE);
        }
      }],
      ref: function ref(_ref) {
        self.partTree = _ref;
      }
    }, opts.el);
  },
  hasChecked: function hasChecked() {
    return this.partTree.hasChecked();
  },
  setValue: function setValue(v) {
    this.setSelectedValue(v.value);
  },
  setSelectedValue: function setSelectedValue(v) {
    v || (v = {});
    this.partTree.setSelectedValue(v);
  },
  getValue: function getValue() {
    return this.partTree.getValue();
  },
  empty: function empty() {
    this.partTree.empty();
  },
  populate: function populate(op) {
    this.partTree.stroke.apply(this.partTree, arguments);
  }
});
BI.MultiTreeSearchPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiTreeSearchPane.EVENT_CLICK_CONFIRM = "EVENT_CLICK_CONFIRM";
BI.MultiTreeSearchPane.EVENT_CLICK_CLEAR = "EVENT_CLICK_CLEAR";
BI.shortcut("bi.multi_tree_search_pane", BI.MultiTreeSearchPane);

/***/ }),
/* 847 */
/***/ (function(module, exports) {

/**
 * searcher
 * Created by guy on 15/11/3.
 * @class BI.MultiListTreeSearcher
 * @extends Widget
 */
BI.MultiListTreeSearcher = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiListTreeSearcher.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-list-tree-searcher",
      itemsCreator: BI.emptyFn,
      valueFormatter: function valueFormatter(v) {
        return v;
      },
      popup: {},
      adapter: null,
      masker: {}
    });
  },
  _init: function _init() {
    BI.MultiListTreeSearcher.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget({
      type: "bi.multi_select_editor",
      height: o.height,
      text: o.text,
      defaultText: o.defaultText,
      watermark: o.watermark,
      el: {
        type: "bi.simple_state_editor",
        height: o.height
      },
      listeners: [{
        eventName: BI.MultiSelectEditor.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.MultiSelectSearcher.EVENT_FOCUS);
        }
      }, {
        eventName: BI.MultiSelectEditor.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.MultiSelectSearcher.EVENT_BLUR);
        }
      }]
    });
    this.searcher = BI.createWidget({
      type: "bi.searcher",
      element: this,
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback({
          keyword: self.editor.getValue()
        });
      },
      el: this.editor,
      popup: BI.extend({
        type: "bi.multi_tree_search_pane",
        keywordGetter: function keywordGetter() {
          return self.editor.getValue();
        },
        itemsCreator: function itemsCreator(op, callback) {
          op.keyword = self.editor.getValue();
          o.itemsCreator(op, callback);
        },
        value: o.value
      }, o.popup),
      adapter: o.adapter,
      masker: o.masker
    });
    this.searcher.on(BI.Searcher.EVENT_START, function () {
      self.fireEvent(BI.MultiListTreeSearcher.EVENT_START);
    });
    this.searcher.on(BI.Searcher.EVENT_PAUSE, function () {
      if (this.hasMatched()) {}

      self.fireEvent(BI.MultiListTreeSearcher.EVENT_PAUSE);
    });
    this.searcher.on(BI.Searcher.EVENT_STOP, function () {
      self.fireEvent(BI.MultiListTreeSearcher.EVENT_STOP);
    });
    this.searcher.on(BI.Searcher.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiListTreeSearcher.EVENT_CHANGE, arguments);
    });

    if (BI.isNotNull(o.value)) {
      this.setState(o.value);
    }
  },
  adjustView: function adjustView() {
    this.searcher.adjustView();
  },
  setAdapter: function setAdapter(adapter) {
    this.searcher.setAdapter(adapter);
  },
  isSearching: function isSearching() {
    return this.searcher.isSearching();
  },
  stopSearch: function stopSearch() {
    this.searcher.stopSearch();
  },
  getKeyword: function getKeyword() {
    return this.editor.getValue();
  },
  hasMatched: function hasMatched() {
    return this.searcher.hasMatched();
  },
  hasChecked: function hasChecked() {
    return this.searcher.getView() && this.searcher.getView().hasChecked();
  },
  setState: function setState(ob) {
    var o = this.options;
    ob || (ob = {});
    ob.value || (ob.value = []);
    var count = 0;

    if (BI.isNumber(ob)) {
      this.editor.setState(ob);
    } else if (BI.size(ob.value) === 0) {
      this.editor.setState(BI.Selection.None);
    } else {
      var text = "";
      BI.each(ob.value, function (idx, path) {
        var childValue = BI.last(path);
        text += path === "null" ? "" : (o.valueFormatter(childValue + "") || childValue) + "; ";
        count++;
      });

      if (count > 20) {
        this.editor.setState(BI.Selection.Multi);
      } else {
        this.editor.setState(text);
      }
    }
  },
  getState: function getState() {
    return this.editor.getState();
  },
  setValue: function setValue(ob) {
    this.setState(ob);
    this.searcher.setValue(ob);
  },
  getKey: function getKey() {
    return this.editor.getValue();
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  },
  populate: function populate(items) {
    this.searcher.populate.apply(this.searcher, arguments);
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.editor.setWaterMark(v);
  }
});
BI.MultiListTreeSearcher.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.MultiListTreeSearcher.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiListTreeSearcher.EVENT_START = "EVENT_START";
BI.MultiListTreeSearcher.EVENT_STOP = "EVENT_STOP";
BI.MultiListTreeSearcher.EVENT_PAUSE = "EVENT_PAUSE";
BI.shortcut("bi.multi_list_tree_searcher", BI.MultiListTreeSearcher);

/***/ }),
/* 848 */
/***/ (function(module, exports) {

/**
 * searcher
 * Created by guy on 15/11/3.
 * @class BI.MultiTreeSearcher
 * @extends Widget
 */
BI.MultiTreeSearcher = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.MultiTreeSearcher.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-tree-searcher",
      itemsCreator: BI.emptyFn,
      valueFormatter: function valueFormatter(v) {
        return v;
      },
      popup: {},
      adapter: null,
      masker: {}
    });
  },
  _init: function _init() {
    BI.MultiTreeSearcher.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget({
      type: "bi.multi_select_editor",
      watermark: o.watermark,
      height: o.height,
      el: {
        type: "bi.simple_state_editor",
        text: o.text,
        defaultText: o.defaultText,
        height: o.height
      },
      listeners: [{
        eventName: BI.MultiSelectEditor.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.MultiSelectSearcher.EVENT_FOCUS);
        }
      }, {
        eventName: BI.MultiSelectEditor.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.MultiSelectSearcher.EVENT_BLUR);
        }
      }]
    });
    this.searcher = BI.createWidget({
      type: "bi.searcher",
      element: this,
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback({
          keyword: self.editor.getValue()
        });
      },
      el: this.editor,
      popup: BI.extend({
        type: "bi.multi_tree_search_pane",
        keywordGetter: function keywordGetter() {
          return self.editor.getValue();
        },
        itemsCreator: function itemsCreator(op, callback) {
          op.keyword = self.editor.getValue();
          o.itemsCreator(op, callback);
        },
        value: o.value
      }, o.popup),
      adapter: o.adapter,
      masker: o.masker
    });
    this.searcher.on(BI.Searcher.EVENT_START, function () {
      self.fireEvent(BI.MultiTreeSearcher.EVENT_START);
    });
    this.searcher.on(BI.Searcher.EVENT_PAUSE, function () {
      self.fireEvent(BI.MultiTreeSearcher.EVENT_PAUSE);
    });
    this.searcher.on(BI.Searcher.EVENT_STOP, function () {
      self.fireEvent(BI.MultiTreeSearcher.EVENT_STOP);
    });
    this.searcher.on(BI.Searcher.EVENT_CHANGE, function () {
      self.fireEvent(BI.MultiTreeSearcher.EVENT_CHANGE, arguments);
    });
    this.searcher.on(BI.Searcher.EVENT_SEARCHING, function () {
      var keywords = this.getKeywords();
      self.fireEvent(BI.MultiTreeSearcher.EVENT_SEARCHING, keywords);
    });

    if (BI.isNotNull(o.value)) {
      this.setState(o.value);
    }
  },
  adjustView: function adjustView() {
    this.searcher.adjustView();
  },
  setAdapter: function setAdapter(adapter) {
    this.searcher.setAdapter(adapter);
  },
  isSearching: function isSearching() {
    return this.searcher.isSearching();
  },
  stopSearch: function stopSearch() {
    this.searcher.stopSearch();
  },
  getKeyword: function getKeyword() {
    return this.editor.getValue();
  },
  hasMatched: function hasMatched() {
    return this.searcher.hasMatched();
  },
  hasChecked: function hasChecked() {
    return this.searcher.getView() && this.searcher.getView().hasChecked();
  },
  setState: function setState(ob) {
    var o = this.options;
    ob || (ob = {});
    ob.value || (ob.value = {});
    var count = 0;

    if (BI.isNumber(ob)) {
      this.editor.setState(ob);
    } else if (BI.size(ob.value) === 0) {
      this.editor.setState(BI.Selection.None);
    } else {
      var text = "";
      var value = ob.value;
      var names = BI.Func.getSortedResult(BI.keys(value));
      BI.each(names, function (idx, name) {
        var childNodes = getChildrenNode(value[name]);
        text += (name === "null" ? "" : o.valueFormatter(name + "") || name) + (childNodes === "" ? BI.isEmptyObject(value[name]) ? "" : ":" : ":" + childNodes) + "; ";

        if (childNodes === "") {
          count++;
        }
      });

      if (count > 20) {
        this.editor.setState(BI.Selection.Multi);
      } else {
        this.editor.setState(text);
      }
    }

    function getChildrenNode(ob) {
      var text = "";
      var index = 0,
          size = BI.size(ob);
      var names = BI.Func.getSortedResult(BI.keys(ob));
      BI.each(names, function (idx, name) {
        index++;
        var childNodes = getChildrenNode(ob[name]);
        text += (name === "null" ? "" : o.valueFormatter(name + "") || name) + (childNodes === "" ? "" : ":" + childNodes) + (index === size ? "" : ",");

        if (childNodes === "") {
          count++;
        }
      });
      return text;
    }
  },
  getState: function getState() {
    return this.editor.getState();
  },
  setValue: function setValue(ob) {
    this.setState(ob);
    this.searcher.setValue(ob);
  },
  getKey: function getKey() {
    return this.editor.getValue();
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  },
  populate: function populate(items) {
    this.searcher.populate.apply(this.searcher, arguments);
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.editor.setWaterMark(v);
  }
});
BI.MultiTreeSearcher.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.MultiTreeSearcher.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.MultiTreeSearcher.EVENT_CHANGE = "EVENT_CHANGE";
BI.MultiTreeSearcher.EVENT_START = "EVENT_START";
BI.MultiTreeSearcher.EVENT_STOP = "EVENT_STOP";
BI.MultiTreeSearcher.EVENT_PAUSE = "EVENT_PAUSE";
BI.shortcut("bi.multi_tree_searcher", BI.MultiTreeSearcher);

/***/ }),
/* 849 */
/***/ (function(module, exports) {

/**
 * Created by windy on 2017/3/13.
 * 数值微调器
 */
BI.NumberEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig(conf) {
    return BI.extend(BI.NumberEditor.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-number-editor bi-focus-shadow " + (conf.simple ? "bi-border-bottom" : "bi-border bi-border-radius"),
      validationChecker: BI.emptyFn,
      valueFormatter: function valueFormatter(v) {
        return v;
      },
      valueParser: function valueParser(v) {
        return v;
      },
      value: 0,
      allowBlank: false,
      errorText: "",
      step: 1,
      min: BI.MIN,
      max: BI.MAX
    });
  },
  _init: function _init() {
    BI.NumberEditor.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget({
      type: "bi.sign_editor",
      height: BI.toPix(o.height, 2),
      simple: o.simple,
      allowBlank: o.allowBlank,
      value: o.valueFormatter(o.value),
      validationChecker: function validationChecker(v) {
        // 不设置validationChecker就自动检测
        var parsedValue = o.valueParser(v);

        if (o.validationChecker === BI.emptyFn && !self._checkValueInRange(parsedValue)) {
          return false;
        }

        return o.validationChecker(parsedValue);
      },
      errorText: o.errorText
    });
    this.editor.on(BI.TextEditor.EVENT_CHANGE, function () {
      //  大多数时候valueFormatter往往需要配合valueParser一起使用
      var value = this.getValue();
      var parsedValue = o.valueParser(value);
      this.setValue(o.valueFormatter(parsedValue));
      self.fireEvent(BI.NumberEditor.EVENT_CHANGE);
    });
    this.editor.on(BI.TextEditor.EVENT_ERROR, function () {
      o.value = BI.parseFloat(this.getLastValidValue());

      self._checkAdjustDisabled(o.value);

      self.element.addClass("error");
    });
    this.editor.on(BI.TextEditor.EVENT_VALID, function () {
      o.value = BI.parseFloat(this.getValue());

      self._checkAdjustDisabled(o.value);

      self.element.removeClass("error");
    });
    this.editor.on(BI.TextEditor.EVENT_CONFIRM, function () {
      self.fireEvent(BI.NumberEditor.EVENT_CONFIRM);
    });
    this.topBtn = BI.createWidget({
      type: "bi.icon_button",
      forceNotSelected: true,
      trigger: "lclick,",
      debounce: false,
      cls: (o.simple ? "solid-triangle-top-font " : "add-up-font bi-border-left ") + "top-button bi-list-item-active2 icon-size-12"
    });
    this.topBtn.on(BI.IconButton.EVENT_CHANGE, function () {
      self._finetuning(o.step);

      self.fireEvent(BI.NumberEditor.EVENT_CHANGE);
      self.fireEvent(BI.NumberEditor.EVENT_CONFIRM);
    });
    this.bottomBtn = BI.createWidget({
      type: "bi.icon_button",
      trigger: "lclick,",
      forceNotSelected: true,
      debounce: false,
      cls: (o.simple ? "solid-triangle-bottom-font " : "minus-down-font bi-border-left ") + "bottom-button bi-list-item-active2 icon-size-12"
    });
    this.bottomBtn.on(BI.IconButton.EVENT_CHANGE, function () {
      self._finetuning(-o.step);

      self.fireEvent(BI.NumberEditor.EVENT_CHANGE);
      self.fireEvent(BI.NumberEditor.EVENT_CONFIRM);
    });
    BI.createWidget({
      type: "bi.htape",
      height: BI.toPix(o.height, 2),
      element: this,
      items: [this.editor, {
        el: {
          type: "bi.grid",
          columns: 1,
          rows: 2,
          items: [{
            column: 0,
            row: 0,
            el: this.topBtn
          }, {
            column: 0,
            row: 1,
            el: this.bottomBtn
          }]
        },
        width: 23
      }]
    });
  },
  focus: function focus() {
    this.editor.focus();
  },
  isEditing: function isEditing() {
    return this.editor.isEditing();
  },
  _checkValueInRange: function _checkValueInRange(v) {
    var o = this.options;
    return !!(BI.isNumeric(v) && BI.parseFloat(v) >= o.min && BI.parseFloat(v) <= o.max);
  },
  _checkAdjustDisabled: function _checkAdjustDisabled(v) {
    if (this.options.validationChecker === BI.emptyFn) {
      this.bottomBtn.setEnable(BI.parseFloat(v) > this.options.min);
      this.topBtn.setEnable(BI.parseFloat(v) < this.options.max);
    }
  },
  // 微调
  _finetuning: function _finetuning(add) {
    var v = BI.parseFloat(this.getValue());
    this.setValue(BI.add(v, add));
  },
  setUpEnable: function setUpEnable(v) {
    this.topBtn.setEnable(!!v);
  },
  setDownEnable: function setDownEnable(v) {
    this.bottomBtn.setEnable(!!v);
  },
  getLastValidValue: function getLastValidValue() {
    return this.editor.getLastValidValue();
  },
  getLastChangedValue: function getLastChangedValue() {
    return this.editor.getLastChangedValue();
  },
  getValue: function getValue() {
    return this.options.value;
  },
  setValue: function setValue(v) {
    var o = this.options;
    o.value = v;
    this.editor.setValue(o.valueFormatter(v));
  }
});
BI.NumberEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.NumberEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.number_editor", BI.NumberEditor);

/***/ }),
/* 850 */
/***/ (function(module, exports) {

// 小于号的值为：0，小于等于号的值为:1
// closeMIn：最小值的符号，closeMax：最大值的符号

/**
 * Created by roy on 15/9/17.
 *
 */
BI.NumberInterval = BI.inherit(BI.Single, {
  constants: {
    typeError: "typeBubble",
    numberError: "numberBubble",
    signalError: "signalBubble",
    editorWidth: 114,
    columns: 5,
    width: 24,
    rows: 1,
    numberErrorCls: "number-error",
    border: 1,
    less: 0,
    less_equal: 1,
    numTip: "",
    adjustYOffset: 2
  },
  _defaultConfig: function _defaultConfig() {
    var conf = BI.NumberInterval.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-number-interval" + (BI.isIE() && BI.getIEVersion() < 10 ? " hack" : ""),
      height: 24,
      validation: "valid",
      closeMin: true,
      allowBlank: true,
      watermark: BI.i18nText("BI-Basic_Unrestricted")
    });
  },
  _init: function _init() {
    var self = this,
        c = this.constants,
        o = this.options;

    BI.NumberInterval.superclass._init.apply(this, arguments);

    this.smallEditor = BI.createWidget({
      type: "bi.number_interval_single_editor",
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      watermark: o.watermark,
      allowBlank: o.allowBlank,
      value: o.min,
      level: "warning",
      tipType: "success",
      title: function title() {
        return self.smallEditor && self.smallEditor.getValue();
      },
      quitChecker: function quitChecker() {
        return false;
      },
      validationChecker: function validationChecker(v) {
        if (!BI.isNumeric(v)) {
          self.smallEditorBubbleType = c.typeError;
          return false;
        }

        return true;
      },
      cls: "number-interval-small-editor bi-focus-shadow " + (o.simple ? "bi-border-bottom" : "bi-border bi-border-corner-left-radius")
    });
    this.smallTip = BI.createWidget({
      type: "bi.label",
      text: o.numTip,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      invisible: true
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this.smallEditor,
      items: [{
        el: this.smallTip,
        top: 0,
        right: 5
      }]
    });
    this.bigEditor = BI.createWidget({
      type: "bi.number_interval_single_editor",
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      watermark: o.watermark,
      allowBlank: o.allowBlank,
      value: o.max,
      title: function title() {
        return self.bigEditor && self.bigEditor.getValue();
      },
      quitChecker: function quitChecker() {
        return false;
      },
      validationChecker: function validationChecker(v) {
        if (!BI.isNumeric(v)) {
          self.bigEditorBubbleType = c.typeError;
          return false;
        }

        return true;
      },
      cls: "number-interval-big-editor bi-focus-shadow" + (o.simple ? " bi-border-bottom" : " bi-border bi-border-corner-right-radius")
    });
    this.bigTip = BI.createWidget({
      type: "bi.label",
      text: o.numTip,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      invisible: true
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this.bigEditor,
      items: [{
        el: this.bigTip,
        top: 0,
        right: 5
      }]
    });
    this.smallCombo = BI.createWidget({
      type: "bi.icon_combo",
      cls: "number-interval-small-combo" + (o.simple ? "" : " bi-border-top bi-border-bottom bi-border-right bi-border-corner-right-radius"),
      height: BI.toPix(o.height, o.simple ? 0 : 2),
      width: BI.toPix(c.width, c.border),
      items: [{
        text: "(" + BI.i18nText("BI-Less_Than") + ")",
        iconCls: "less-font",
        value: 0
      }, {
        text: "(" + BI.i18nText("BI-Less_And_Equal") + ")",
        value: 1,
        iconCls: "less-equal-font"
      }]
    });

    if (o.closeMin === true) {
      this.smallCombo.setValue(1);
    } else {
      this.smallCombo.setValue(0);
    }

    this.bigCombo = BI.createWidget({
      type: "bi.icon_combo",
      cls: "number-interval-big-combo" + (o.simple ? "" : " bi-border-top bi-border-bottom bi-border-left bi-border-corner-left-radius"),
      height: BI.toPix(o.height, o.simple ? 0 : 2),
      width: BI.toPix(c.width, c.border),
      items: [{
        text: "(" + BI.i18nText("BI-Less_Than") + ")",
        iconCls: "less-font",
        value: 0
      }, {
        text: "(" + BI.i18nText("BI-Less_And_Equal") + ")",
        value: 1,
        iconCls: "less-equal-font"
      }]
    });

    if (o.closeMax === true) {
      this.bigCombo.setValue(1);
    } else {
      this.bigCombo.setValue(0);
    }

    this.label = BI.createWidget({
      type: "bi.label",
      text: BI.i18nText("BI-Basic_Value"),
      textHeight: o.height,
      // width: BI.toPix(o.width, o.simple ? 0 : c.border * 2),
      hgap: 5,
      height: o.height,
      level: "warning",
      tipType: "warning"
    });
    this.left = BI.createWidget({
      type: "bi.horizontal_fill",
      columnSize: ["fill", ""],
      items: [{
        el: self.smallEditor
      }, {
        el: self.smallCombo
      }]
    });
    this.right = BI.createWidget({
      type: "bi.horizontal_fill",
      columnSize: ["", "fill"],
      items: [{
        el: self.bigCombo
      }, {
        el: self.bigEditor // BI-23883 间距考虑边框
        // lgap: 1

      }]
    });
    BI.createWidget({
      element: self,
      type: "bi.horizontal_fill",
      columnSize: ["fill", "", "fill"],
      items: [{
        el: self.left
      }, {
        el: self.label
      }, {
        el: self.right
      }]
    }); // BI.createWidget({
    //     element: self,
    //     type: "bi.horizontal_auto",
    //     items: [
    //         self.label
    //     ]
    // });
    // BI.createWidget({
    //     element: self,
    //     type: "bi.center",
    //     hgap: 15,
    //     height: o.height,
    //     items: [
    //         {
    //             type: "bi.absolute",
    //             items: [{
    //                 el: self.left,
    //                 left: -15,
    //                 right: 0,
    //                 top: 0,
    //                 bottom: 0
    //             }]
    //         }, {
    //             type: "bi.absolute",
    //             items: [{
    //                 el: self.right,
    //                 left: 0,
    //                 right: -15,
    //                 top: 0,
    //                 bottom: 0
    //             }]
    //         }
    //     ]
    // });

    self._setValidEvent(self.bigEditor, c.bigEditor);

    self._setValidEvent(self.smallEditor, c.smallEditor);

    self._setErrorEvent(self.bigEditor, c.bigEditor);

    self._setErrorEvent(self.smallEditor, c.smallEditor);

    self._setBlurEvent(self.bigEditor);

    self._setBlurEvent(self.smallEditor);

    self._setFocusEvent(self.bigEditor);

    self._setFocusEvent(self.smallEditor);

    self._setComboValueChangedEvent(self.bigCombo);

    self._setComboValueChangedEvent(self.smallCombo);

    self._setEditorValueChangedEvent(self.bigEditor);

    self._setEditorValueChangedEvent(self.smallEditor);

    self._checkValidation();
  },
  _checkValidation: function _checkValidation() {
    var self = this,
        c = this.constants,
        o = this.options;

    self._setTitle("");

    BI.Bubbles.hide(c.typeError);
    BI.Bubbles.hide(c.numberError);
    BI.Bubbles.hide(c.signalError);

    if (!self.smallEditor.isValid() || !self.bigEditor.isValid()) {
      self.element.removeClass("number-error");
      o.validation = "invalid";
      return c.typeError;
    }

    if (BI.isEmptyString(self.smallEditor.getValue()) || BI.isEmptyString(self.bigEditor.getValue())) {
      self.element.removeClass("number-error");
      o.validation = "valid";
      return "";
    }

    var smallValue = parseFloat(self.smallEditor.getValue()),
        bigValue = parseFloat(self.bigEditor.getValue()),
        bigComboValue = self.bigCombo.getValue(),
        smallComboValue = self.smallCombo.getValue();

    if (bigComboValue[0] === c.less_equal && smallComboValue[0] === c.less_equal) {
      if (smallValue > bigValue) {
        self.element.addClass("number-error");
        o.validation = "invalid";
        return c.numberError;
      }

      self.element.removeClass("number-error");
      o.validation = "valid";
      return "";
    }

    if (smallValue > bigValue) {
      self.element.addClass("number-error");
      o.validation = "invalid";
      return c.numberError;
    } else if (smallValue === bigValue) {
      self.element.addClass("number-error");
      o.validation = "invalid";
      return c.signalError;
    }

    self.element.removeClass("number-error");
    o.validation = "valid";
    return "";
  },
  _setTitle: function _setTitle(v) {
    this.label.setTitle(v);
  },
  _setFocusEvent: function _setFocusEvent(w) {
    var self = this,
        c = this.constants;
    w.on(BI.NumberIntervalSingleEidtor.EVENT_FOCUS, function () {
      self._setTitle("");

      switch (self._checkValidation()) {
        case c.typeError:
          BI.Bubbles.show(c.typeError, BI.i18nText("BI-Numerical_Interval_Input_Data"), self, {
            offsetStyle: "left",
            adjustYOffset: c.adjustYOffset
          });
          break;

        case c.numberError:
          BI.Bubbles.show(c.numberError, BI.i18nText("BI-Numerical_Interval_Number_Value"), self, {
            offsetStyle: "left",
            adjustYOffset: c.adjustYOffset
          });
          break;

        case c.signalError:
          BI.Bubbles.show(c.signalError, BI.i18nText("BI-Numerical_Interval_Signal_Value"), self, {
            offsetStyle: "left",
            adjustYOffset: c.adjustYOffset
          });
          break;

        default:
          return;
      }
    });
  },
  _setBlurEvent: function _setBlurEvent(w) {
    var c = this.constants,
        self = this;
    w.on(BI.NumberIntervalSingleEidtor.EVENT_BLUR, function () {
      BI.Bubbles.hide(c.typeError);
      BI.Bubbles.hide(c.numberError);
      BI.Bubbles.hide(c.signalError);

      switch (self._checkValidation()) {
        case c.typeError:
          self._setTitle(BI.i18nText("BI-Numerical_Interval_Input_Data"));

          break;

        case c.numberError:
          self._setTitle(BI.i18nText("BI-Numerical_Interval_Number_Value"));

          break;

        case c.signalError:
          self._setTitle(BI.i18nText("BI-Numerical_Interval_Signal_Value"));

          break;

        default:
          self._setTitle("");

      }
    });
  },
  _setErrorEvent: function _setErrorEvent(w) {
    var c = this.constants,
        self = this;
    w.on(BI.NumberIntervalSingleEidtor.EVENT_ERROR, function () {
      self._checkValidation();

      BI.Bubbles.show(c.typeError, BI.i18nText("BI-Numerical_Interval_Input_Data"), self, {
        offsetStyle: "left",
        adjustYOffset: c.adjustYOffset
      });
      self.fireEvent(BI.NumberInterval.EVENT_ERROR);
    });
  },
  _setValidEvent: function _setValidEvent(w) {
    var self = this,
        c = this.constants;
    w.on(BI.NumberIntervalSingleEidtor.EVENT_VALID, function () {
      switch (self._checkValidation()) {
        case c.numberError:
          BI.Bubbles.show(c.numberError, BI.i18nText("BI-Numerical_Interval_Number_Value"), self, {
            offsetStyle: "left",
            adjustYOffset: c.adjustYOffset
          });
          self.fireEvent(BI.NumberInterval.EVENT_ERROR);
          break;

        case c.signalError:
          BI.Bubbles.show(c.signalError, BI.i18nText("BI-Numerical_Interval_Signal_Value"), self, {
            offsetStyle: "left",
            adjustYOffset: c.adjustYOffset
          });
          self.fireEvent(BI.NumberInterval.EVENT_ERROR);
          break;

        default:
          self.fireEvent(BI.NumberInterval.EVENT_VALID);
      }
    });
  },
  _setEditorValueChangedEvent: function _setEditorValueChangedEvent(w) {
    var self = this,
        c = this.constants;
    w.on(BI.NumberIntervalSingleEidtor.EVENT_CHANGE, function () {
      switch (self._checkValidation()) {
        case c.typeError:
          BI.Bubbles.show(c.typeError, BI.i18nText("BI-Numerical_Interval_Input_Data"), self, {
            offsetStyle: "left",
            adjustYOffset: c.adjustYOffset
          });
          break;

        case c.numberError:
          BI.Bubbles.show(c.numberError, BI.i18nText("BI-Numerical_Interval_Number_Value"), self, {
            offsetStyle: "left",
            adjustYOffset: c.adjustYOffset
          });
          break;

        case c.signalError:
          BI.Bubbles.show(c.signalError, BI.i18nText("BI-Numerical_Interval_Signal_Value"), self, {
            offsetStyle: "left",
            adjustYOffset: c.adjustYOffset
          });
          break;

        default:
          break;
      }

      self.fireEvent(BI.NumberInterval.EVENT_CHANGE);
    });
    w.on(BI.NumberIntervalSingleEidtor.EVENT_CONFIRM, function () {
      self.fireEvent(BI.NumberInterval.EVENT_CONFIRM);
    });
  },
  _setComboValueChangedEvent: function _setComboValueChangedEvent(w) {
    var self = this,
        c = this.constants;
    w.on(BI.IconCombo.EVENT_CHANGE, function () {
      switch (self._checkValidation()) {
        case c.typeError:
          self._setTitle(BI.i18nText("BI-Numerical_Interval_Input_Data"));

          self.fireEvent(BI.NumberInterval.EVENT_ERROR);
          break;

        case c.numberError:
          self._setTitle(BI.i18nText("BI-Numerical_Interval_Number_Value"));

          self.fireEvent(BI.NumberInterval.EVENT_ERROR);
          break;

        case c.signalError:
          self._setTitle(BI.i18nText("BI-Numerical_Interval_Signal_Value"));

          self.fireEvent(BI.NumberInterval.EVENT_ERROR);
          break;

        default:
          self.fireEvent(BI.NumberInterval.EVENT_CHANGE);
          self.fireEvent(BI.NumberInterval.EVENT_CONFIRM);
          self.fireEvent(BI.NumberInterval.EVENT_VALID);
      }
    });
  },
  isStateValid: function isStateValid() {
    return this.options.validation === "valid";
  },
  setMinEnable: function setMinEnable(b) {
    this.smallEditor.setEnable(b);
  },
  setCloseMinEnable: function setCloseMinEnable(b) {
    this.smallCombo.setEnable(b);
  },
  setMaxEnable: function setMaxEnable(b) {
    this.bigEditor.setEnable(b);
  },
  setCloseMaxEnable: function setCloseMaxEnable(b) {
    this.bigCombo.setEnable(b);
  },
  showNumTip: function showNumTip() {
    this.smallTip.setVisible(true);
    this.bigTip.setVisible(true);
  },
  hideNumTip: function hideNumTip() {
    this.smallTip.setVisible(false);
    this.bigTip.setVisible(false);
  },
  setNumTip: function setNumTip(numTip) {
    this.smallTip.setText(numTip);
    this.bigTip.setText(numTip);
  },
  getNumTip: function getNumTip() {
    return this.smallTip.getText();
  },
  setValue: function setValue(data) {
    data = data || {};
    var self = this,
        combo_value;

    if (BI.isNumeric(data.min) || BI.isEmptyString(data.min)) {
      self.smallEditor.setValue(data.min);
    }

    if (!BI.isNotNull(data.min)) {
      self.smallEditor.setValue("");
    }

    if (BI.isNumeric(data.max) || BI.isEmptyString(data.max)) {
      self.bigEditor.setValue(data.max);
    }

    if (!BI.isNotNull(data.max)) {
      self.bigEditor.setValue("");
    }

    if (!BI.isNull(data.closeMin)) {
      if (data.closeMin === true) {
        combo_value = 1;
      } else {
        combo_value = 0;
      }

      self.smallCombo.setValue(combo_value);
    }

    if (!BI.isNull(data.closeMax)) {
      if (data.closeMax === true) {
        combo_value = 1;
      } else {
        combo_value = 0;
      }

      self.bigCombo.setValue(combo_value);
    }

    this._checkValidation();
  },
  getValue: function getValue() {
    var self = this,
        value = {},
        minComboValue = self.smallCombo.getValue(),
        maxComboValue = self.bigCombo.getValue();
    value.min = self.smallEditor.getValue();
    value.max = self.bigEditor.getValue();

    if (minComboValue[0] === 0) {
      value.closeMin = false;
    } else {
      value.closeMin = true;
    }

    if (maxComboValue[0] === 0) {
      value.closeMax = false;
    } else {
      value.closeMax = true;
    }

    return value;
  },
  focusMinEditor: function focusMinEditor() {
    this.smallEditor.focus();
  },
  focusMaxEditor: function focusMaxEditor() {
    this.bigEditor.focus();
  },
  destroyed: function destroyed() {
    var c = this.constants;
    BI.Bubbles.remove(c.typeError);
    BI.Bubbles.remove(c.numberError);
    BI.Bubbles.remove(c.signalError);
  }
});
BI.NumberInterval.EVENT_CHANGE = "EVENT_CHANGE";
BI.NumberInterval.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.NumberInterval.EVENT_VALID = "EVENT_VALID";
BI.NumberInterval.EVENT_ERROR = "EVENT_ERROR";
BI.shortcut("bi.number_interval", BI.NumberInterval);

/***/ }),
/* 851 */
/***/ (function(module, exports) {

BI.NumberIntervalSingleEidtor = BI.inherit(BI.Single, {
  props: {
    baseCls: "bi-number-interval-single-editor",
    tipType: "success",
    title: ""
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical",
      items: [{
        type: "bi.editor",
        simple: o.simple,
        ref: function ref(_ref) {
          self.editor = _ref;
        },
        height: o.height,
        watermark: o.watermark,
        allowBlank: o.allowBlank,
        value: o.value,
        quitChecker: o.quitChecker,
        validationChecker: o.validationChecker,
        listeners: [{
          eventName: BI.Editor.EVENT_ERROR,
          action: function action() {
            self.fireEvent(BI.NumberIntervalSingleEidtor.EVENT_ERROR, arguments);
          }
        }, {
          eventName: BI.Editor.EVENT_FOCUS,
          action: function action() {
            self.fireEvent(BI.NumberIntervalSingleEidtor.EVENT_FOCUS, arguments);
          }
        }, {
          eventName: BI.Editor.EVENT_BLUR,
          action: function action() {
            self.fireEvent(BI.NumberIntervalSingleEidtor.EVENT_BLUR, arguments);
          }
        }, {
          eventName: BI.Editor.EVENT_VALID,
          action: function action() {
            self.fireEvent(BI.NumberIntervalSingleEidtor.EVENT_VALID, arguments);
          }
        }, {
          eventName: BI.Editor.EVENT_CHANGE,
          action: function action() {
            self.fireEvent(BI.NumberIntervalSingleEidtor.EVENT_CHANGE, arguments);
          }
        }, {
          eventName: BI.Editor.EVENT_CONFIRM,
          action: function action() {
            self.fireEvent(BI.NumberIntervalSingleEidtor.EVENT_CONFIRM, arguments);
          }
        }, {
          eventName: BI.Editor.EVENT_CHANGE_CONFIRM,
          action: function action() {
            self.fireEvent(BI.NumberIntervalSingleEidtor.EVENT_CHANGE_CONFIRM, arguments);
          }
        }]
      }]
    };
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  getValue: function getValue() {
    return this.editor.getValue();
  },
  setValue: function setValue(v) {
    return this.editor.setValue(v);
  },
  focus: function focus() {
    this.editor.focus();
  }
});
BI.NumberIntervalSingleEidtor.EVENT_FOCUS = "EVENT_FOCUS";
BI.NumberIntervalSingleEidtor.EVENT_BLUR = "EVENT_BLUR";
BI.NumberIntervalSingleEidtor.EVENT_ERROR = "EVENT_ERROR";
BI.NumberIntervalSingleEidtor.EVENT_VALID = "EVENT_VALID";
BI.NumberIntervalSingleEidtor.EVENT_CHANGE = "EVENT_CHANGE";
BI.NumberIntervalSingleEidtor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.NumberIntervalSingleEidtor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.number_interval_single_editor", BI.NumberIntervalSingleEidtor);

/***/ }),
/* 852 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.SearchMultiTextValueCombo
 * @extends BI.Single
 */
BI.SearchMultiTextValueCombo = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SearchMultiTextValueCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-combo bi-search-multi-text-value-combo",
      height: 24,
      items: []
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.SearchMultiTextValueCombo.superclass._init.apply(this, arguments);

    var assertShowValue = function assertShowValue() {
      BI.isKey(self._startValue) && (self.storeValue.type === BI.Selection.All ? BI.remove(self.storeValue.value, self._startValue) : BI.pushDistinct(self.storeValue.value, self._startValue));

      self._updateAllValue();

      self._checkError();

      self.trigger.getSearcher().setState(self.storeValue);
      self.trigger.getCounter().setButtonChecked(self.storeValue);
    };

    this.storeValue = BI.deepClone(o.value || {});

    this._updateAllValue();

    this._assertValue(this.storeValue);

    this._checkError(); // 标记正在请求数据


    this.requesting = false;
    this.trigger = BI.createWidget({
      type: "bi.search_multi_select_trigger",
      text: o.text,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      // adapter: this.popup,
      masker: {
        offset: {
          left: 0,
          top: 0,
          right: 0,
          bottom: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
        }
      },
      allValueGetter: function allValueGetter() {
        return self.allValue;
      },
      valueFormatter: o.valueFormatter,
      itemsCreator: function itemsCreator(op, callback) {
        self._itemsCreator(op, function (res) {
          if (op.times === 1 && BI.isNotNull(op.keywords)) {
            // 预防trigger内部把当前的storeValue改掉
            self.trigger.setValue(BI.deepClone(self.getValue()));
          }

          callback.apply(self, arguments);
        });
      },
      value: this.storeValue,
      warningTitle: o.warningTitle
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_START, function () {
      self._setStartValue("");

      this.getSearcher().setValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_STOP, function () {
      self._setStartValue("");
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_SEARCHING, function (keywords) {
      var last = BI.last(keywords);
      keywords = BI.initial(keywords || []);

      if (keywords.length > 0) {
        self._joinKeywords(keywords, function () {
          if (BI.endWith(last, BI.BlankSplitChar)) {
            self.combo.setValue(self.storeValue);
            assertShowValue();
            self.combo.populate();

            self._setStartValue("");
          } else {
            self.combo.setValue(self.storeValue);
            assertShowValue();
          }

          self._dataChange = true;
        });
      }
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_CHANGE, function (value, obj) {
      if (obj instanceof BI.MultiSelectBar) {
        self._joinAll(this.getValue(), function () {
          assertShowValue();
        });
      } else {
        self._join(this.getValue(), function () {
          assertShowValue();
        });
      }

      self._dataChange = true;
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_BEFORE_COUNTER_POPUPVIEW, function () {
      this.getCounter().setValue(self.storeValue);
    });
    this.trigger.on(BI.MultiSelectTrigger.EVENT_COUNTER_CLICK, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      cls: o.simple ? "bi-border-bottom" : "bi-border bi-border-radius",
      toggle: false,
      container: o.container,
      el: this.trigger,
      adjustLength: 1,
      popup: {
        type: "bi.search_multi_select_popup_view",
        ref: function ref() {
          self.popup = this;
          self.trigger.setAdapter(this);
        },
        listeners: [{
          eventName: BI.MultiSelectPopupView.EVENT_CHANGE,
          action: function action() {
            self._dataChange = true;
            self.storeValue = this.getValue();

            self._adjust(function () {
              assertShowValue();
            });
          }
        }, {
          eventName: BI.MultiSelectPopupView.EVENT_CLICK_CONFIRM,
          action: function action() {
            self._defaultState();
          }
        }, {
          eventName: BI.MultiSelectPopupView.EVENT_CLICK_CLEAR,
          action: function action() {
            self._dataChange = true;
            self.setValue();

            self._defaultState();
          }
        }],
        itemsCreator: BI.bind(self._itemsCreator, this),
        valueFormatter: o.valueFormatter,
        onLoaded: function onLoaded() {
          BI.nextTick(function () {
            self.combo.adjustWidth();
            self.combo.adjustHeight();
            self.trigger.getCounter().adjustView();
            self.trigger.getSearcher().adjustView();
          });
        }
      },
      value: o.value,
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0;
      }
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      if (!this.isViewVisible()) {
        self._dataChange = false; // 标记数据是否发生变化
      }

      this.setValue(self.storeValue);
      BI.nextTick(function () {
        self._populate();
      });
    }); // 当退出的时候如果还在处理请求，则等请求结束后再对外发确定事件

    this.wants2Quit = false;
    this.combo.on(BI.Combo.EVENT_AFTER_HIDEVIEW, function () {
      // important:关闭弹出时又可能没有退出编辑状态
      self.trigger.stopEditing();

      if (self.requesting === true) {
        self.wants2Quit = true;
      } else {
        /**
         * 在存在标红的情况，如果popover没有发生改变就确认需要同步trigger的值，否则对外value值和trigger样式不统一
         */
        assertShowValue();
        self._dataChange && self.fireEvent(BI.SearchMultiTextValueCombo.EVENT_CONFIRM);
      }
    });
    var triggerBtn = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.height,
      height: o.height,
      cls: "multi-select-trigger-icon-button"
    });
    triggerBtn.on(BI.TriggerIconButton.EVENT_CHANGE, function () {
      self.trigger.getCounter().hideView();

      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.combo,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: triggerBtn,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });

    this._checkError();
  },
  _defaultState: function _defaultState() {
    this.trigger.stopEditing();
    this.combo.hideView();
  },
  _assertValue: function _assertValue(val) {
    var o = this.options;
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
    BI.remove(val.value, function (idx, value) {
      return !BI.contains(BI.map(o.items, "value"), value);
    });
  },
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _joinKeywords: function _joinKeywords(keywords, callback) {
    var self = this,
        o = this.options;

    this._assertValue(this.storeValue);

    this.requesting = true;

    this._itemsCreator({
      type: BI.SearchMultiTextValueCombo.REQ_GET_ALL_DATA,
      keywords: keywords
    }, function (ob) {
      var values = BI.map(ob.items, "value");
      digest(values);
    });

    function digest(items) {
      var selectedMap = self._makeMap(items);

      BI.each(keywords, function (i, val) {
        if (BI.isNotNull(selectedMap[val])) {
          self.storeValue.type === BI.Selection.Multi ? BI.pushDistinct(self.storeValue.value, val) : BI.remove(self.storeValue.value, val);
        }
      });

      self._adjust(callback);
    }
  },
  _joinAll: function _joinAll(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this.requesting = true;

    this._itemsCreator({
      type: BI.SearchMultiTextValueCombo.REQ_GET_ALL_DATA,
      keywords: [this.trigger.getKey()]
    }, function (ob) {
      var items = BI.map(ob.items, "value");

      if (self.storeValue.type === res.type) {
        var change = false;

        var map = self._makeMap(self.storeValue.value);

        BI.each(items, function (i, v) {
          if (BI.isNotNull(map[v])) {
            change = true;
            self.storeValue.assist && self.storeValue.assist.push(map[v]);
            delete map[v];
          }
        });
        change && (self.storeValue.value = BI.values(map));

        self._adjust(callback);

        return;
      }

      var selectedMap = self._makeMap(self.storeValue.value);

      var notSelectedMap = self._makeMap(res.value);

      var newItems = [];
      BI.each(items, function (i, item) {
        if (BI.isNotNull(selectedMap[items[i]])) {
          self.storeValue.assist && self.storeValue.assist.push(selectedMap[items[i]]);
          delete selectedMap[items[i]];
        }

        if (BI.isNull(notSelectedMap[items[i]])) {
          BI.remove(self.storeValue.assist, item);
          newItems.push(item);
        }
      });
      self.storeValue.value = newItems.concat(BI.values(selectedMap));

      self._adjust(callback);
    });
  },
  _adjust: function _adjust(callback) {
    var self = this,
        o = this.options;

    if (!this._count) {
      this._itemsCreator({
        type: BI.SearchMultiTextValueCombo.REQ_GET_DATA_LENGTH
      }, function (res) {
        self._count = res.count;
        adjust();
        callback();
      });
    } else {
      adjust();
      callback();
    }

    function adjust() {
      if (self.storeValue.type === BI.Selection.All && self.storeValue.value.length >= self._count) {
        self.storeValue = {
          type: BI.Selection.Multi,
          value: []
        };
      } else if (self.storeValue.type === BI.Selection.Multi && self.storeValue.value.length >= self._count) {
        self.storeValue = {
          type: BI.Selection.All,
          value: []
        };
      }

      self._updateAllValue();

      self._checkError();

      if (self.wants2Quit === true) {
        self._dataChange && self.fireEvent(BI.SearchMultiTextValueCombo.EVENT_CONFIRM);
        self.wants2Quit = false;
      }

      self.requesting = false;
    }
  },
  _join: function _join(res, callback) {
    var self = this,
        o = this.options;

    this._assertValue(res);

    this._assertValue(this.storeValue);

    if (this.storeValue.type === res.type) {
      var map = this._makeMap(this.storeValue.value);

      BI.each(res.value, function (i, v) {
        if (!map[v]) {
          self.storeValue.value.push(v);
          BI.remove(self.storeValue.assist, v);
          map[v] = v;
        }
      });
      var change = false;
      BI.each(res.assist, function (i, v) {
        if (BI.isNotNull(map[v])) {
          change = true;
          self.storeValue.assist && self.storeValue.assist.push(map[v]);
          delete map[v];
        }
      });
      change && (this.storeValue.value = BI.values(map));

      self._adjust(callback);

      return;
    }

    this._joinAll(res, callback);
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.popup.setStartValue(value);
  },
  _getItemsByTimes: function _getItemsByTimes(items, times) {
    var res = [];

    for (var i = (times - 1) * 100; items[i] && i < times * 100; i++) {
      res.push(items[i]);
    }

    return res;
  },
  _hasNextByTimes: function _hasNextByTimes(items, times) {
    return times * 100 < items.length;
  },
  _itemsCreator: function _itemsCreator(options, callback) {
    var self = this,
        o = this.options;
    var items = o.items;
    var keywords = (options.keywords || []).slice();

    if (options.keyword) {
      keywords.push(options.keyword);
    }

    BI.each(keywords, function (i, kw) {
      var search = BI.Func.getSearchResult(items, kw);
      items = search.match.concat(search.find);
    });

    if (options.selectedValues) {
      // 过滤
      var filter = BI.makeObject(options.selectedValues, true);
      items = BI.filter(items, function (i, ob) {
        return !filter[ob.value];
      });
    }

    if (options.type == BI.MultiSelectCombo.REQ_GET_ALL_DATA) {
      callback({
        items: items
      });
      return;
    }

    if (options.type == BI.MultiSelectCombo.REQ_GET_DATA_LENGTH) {
      callback({
        count: items.length
      });
      return;
    }

    callback({
      items: self._getItemsByTimes(items, options.times),
      hasNext: self._hasNextByTimes(items, options.times)
    });
  },
  _checkError: function _checkError() {
    var v = this.storeValue.value || [];

    if (BI.isNotEmptyArray(v)) {
      v = BI.isArray(v) ? v : [v];
      var result = BI.find(this.allValue, function (idx, value) {
        return !BI.contains(v, value);
      });

      if (BI.isNull(result)) {
        BI.isNotNull(this.trigger) && this.trigger.setTipType("success");
        this.element.removeClass("combo-error");
      } else {
        BI.isNotNull(this.trigger) && this.trigger.setTipType("warning");
        this.element.addClass("combo-error");
      }
    } else {
      if (v.length === this.allValue.length) {
        BI.isNotNull(this.trigger) && this.trigger.setTipType("success");
        this.element.removeClass("combo-error");
      } else {
        BI.isNotNull(this.trigger) && this.trigger.setTipType("warning");
        this.element.addClass("combo-error");
      }
    }
  },
  _updateAllValue: function _updateAllValue() {
    this.storeValue = this.storeValue || {};
    this.allValue = BI.deepClone(this.storeValue.value || []);
  },
  setValue: function setValue(v) {
    this.storeValue = BI.deepClone(v || {});

    this._updateAllValue();

    this._assertValue(this.storeValue);

    this.combo.setValue(this.storeValue);

    this._checkError();
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue);
  },
  _populate: function _populate() {
    this._count = null;
    this.combo.populate();
  },
  populate: function populate(items) {
    this.options.items = items;

    this._populate();
  }
});
BI.extend(BI.SearchMultiTextValueCombo, {
  REQ_GET_DATA_LENGTH: 1,
  REQ_GET_ALL_DATA: -1
});
BI.SearchMultiTextValueCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.search_multi_text_value_combo", BI.SearchMultiTextValueCombo);

/***/ }),
/* 853 */
/***/ (function(module, exports) {

BI.SearchMultiSelectTrigger = BI.inherit(BI.Trigger, {
  constants: {
    height: 14,
    rgap: 4,
    lgap: 4
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SearchMultiSelectTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-trigger",
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      searcher: {},
      switcher: {},
      adapter: null,
      masker: {}
    });
  },
  _init: function _init() {
    BI.SearchMultiSelectTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.searcher = BI.createWidget(o.searcher, {
      type: "bi.search_multi_select_searcher",
      height: o.height,
      itemsCreator: o.itemsCreator,
      valueFormatter: o.valueFormatter,
      allValueGetter: o.allValueGetter,
      popup: {},
      adapter: o.adapter,
      masker: o.masker,
      value: o.value,
      text: o.text,
      tipType: o.tipType,
      warningTitle: o.warningTitle
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_START, function () {
      self.fireEvent(BI.SearchMultiSelectTrigger.EVENT_START);
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_PAUSE, function () {
      self.fireEvent(BI.SearchMultiSelectTrigger.EVENT_PAUSE);
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_SEARCHING, function () {
      self.fireEvent(BI.SearchMultiSelectTrigger.EVENT_SEARCHING, arguments);
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_STOP, function () {
      self.fireEvent(BI.SearchMultiSelectTrigger.EVENT_STOP);
    });
    this.searcher.on(BI.MultiSelectSearcher.EVENT_CHANGE, function () {
      self.fireEvent(BI.SearchMultiSelectTrigger.EVENT_CHANGE, arguments);
    });
    this.numberCounter = BI.createWidget(o.switcher, {
      type: "bi.multi_select_check_selected_switcher",
      valueFormatter: o.valueFormatter,
      itemsCreator: o.itemsCreator,
      adapter: o.adapter,
      masker: o.masker,
      value: o.value
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_TRIGGER_CHANGE, function () {
      self.fireEvent(BI.SearchMultiSelectTrigger.EVENT_COUNTER_CLICK);
    });
    this.numberCounter.on(BI.MultiSelectCheckSelectedSwitcher.EVENT_BEFORE_POPUPVIEW, function () {
      self.fireEvent(BI.SearchMultiSelectTrigger.EVENT_BEFORE_COUNTER_POPUPVIEW);
    });
    var wrapNumberCounter = BI.createWidget({
      type: "bi.right_vertical_adapt",
      hgap: 4,
      items: [{
        el: this.numberCounter
      }]
    });
    var wrapper = BI.createWidget({
      type: "bi.htape",
      element: this,
      items: [{
        el: this.searcher,
        width: "fill"
      }, {
        el: wrapNumberCounter,
        width: 0
      }, {
        el: BI.createWidget(),
        width: 24
      }]
    });
    this.numberCounter.on(BI.Events.VIEW, function (b) {
      BI.nextTick(function () {
        // 自动调整宽度
        wrapper.attr("items")[1].width = b === true ? self.numberCounter.element.outerWidth() + 8 : 0;
        wrapper.resize();
      });
    });
    this.element.click(function (e) {
      if (self.element.find(e.target).length > 0) {
        self.numberCounter.hideView();
      }
    });
  },
  getCounter: function getCounter() {
    return this.numberCounter;
  },
  getSearcher: function getSearcher() {
    return this.searcher;
  },
  stopEditing: function stopEditing() {
    this.searcher.stopSearch();
    this.numberCounter.hideView();
  },
  setAdapter: function setAdapter(adapter) {
    this.searcher.setAdapter(adapter);
    this.numberCounter.setAdapter(adapter);
  },
  setValue: function setValue(ob) {
    this.searcher.setValue(ob);
    this.numberCounter.setValue(ob);
  },
  setTipType: function setTipType(v) {
    this.searcher.setTipType(v);
  },
  getKey: function getKey() {
    return this.searcher.getKey();
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  }
});
BI.SearchMultiSelectTrigger.EVENT_TRIGGER_CLICK = "EVENT_TRIGGER_CLICK";
BI.SearchMultiSelectTrigger.EVENT_COUNTER_CLICK = "EVENT_COUNTER_CLICK";
BI.SearchMultiSelectTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.SearchMultiSelectTrigger.EVENT_START = "EVENT_START";
BI.SearchMultiSelectTrigger.EVENT_STOP = "EVENT_STOP";
BI.SearchMultiSelectTrigger.EVENT_PAUSE = "EVENT_PAUSE";
BI.SearchMultiSelectTrigger.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.SearchMultiSelectTrigger.EVENT_BEFORE_COUNTER_POPUPVIEW = "EVENT_BEFORE_COUNTER_POPUPVIEW";
BI.shortcut("bi.search_multi_select_trigger", BI.SearchMultiSelectTrigger);

/***/ }),
/* 854 */
/***/ (function(module, exports) {

/**
 * 多选加载数据面板
 * Created by guy on 15/11/2.
 * @class BI.SearchMultiSelectLoader
 * @extends Widget
 */
BI.SearchMultiSelectLoader = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SearchMultiSelectLoader.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-loader",
      logic: {
        dynamic: true
      },
      el: {
        height: 400
      },
      valueFormatter: BI.emptyFn,
      itemsCreator: BI.emptyFn,
      itemHeight: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      onLoaded: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.SearchMultiSelectLoader.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    var _hasNext = false;
    this.storeValue = opts.value || {};

    this._assertValue(this.storeValue);

    this.button_group = BI.createWidget({
      type: "bi.select_list",
      element: this,
      logic: opts.logic,
      toolbar: {
        type: "bi.multi_select_bar",
        cls: "bi-list-item-active",
        height: this.options.itemHeight,
        iconWrapperWidth: 36
      },
      el: BI.extend({
        onLoaded: opts.onLoaded,
        el: {
          type: "bi.loader",
          isDefaultInit: false,
          logic: {
            dynamic: true,
            scrolly: true
          },
          el: {
            chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
            behaviors: {
              redmark: function redmark() {
                return true;
              }
            },
            layouts: [{
              type: "bi.vertical"
            }]
          }
        }
      }, opts.el),
      itemsCreator: function itemsCreator(op, callback) {
        var startValue = self._startValue;
        self.storeValue && (op = BI.extend(op || {}, {
          selectedValues: BI.isKey(startValue) && self.storeValue.type === BI.Selection.Multi ? self.storeValue.value.concat(startValue) : self.storeValue.value
        }));
        opts.itemsCreator(op, function (ob) {
          _hasNext = ob.hasNext;
          var firstItems = [];

          if (op.times === 1 && self.storeValue) {
            var json = BI.map(self.storeValue.value, function (i, v) {
              var txt = opts.valueFormatter(v) || v;
              return {
                text: txt,
                value: v,
                title: txt,
                selected: self.storeValue.type === BI.Selection.Multi
              };
            });

            if (BI.isKey(self._startValue) && !BI.contains(self.storeValue.value, self._startValue)) {
              var txt = opts.valueFormatter(startValue) || startValue;
              json.unshift({
                text: txt,
                value: startValue,
                title: txt,
                selected: true
              });
            }

            firstItems = self._createItems(json);
          }

          callback(firstItems.concat(self._createItems(ob.items)), ob.keyword || "");

          if (op.times === 1 && self.storeValue) {
            BI.isKey(startValue) && (self.storeValue.type === BI.Selection.All ? BI.remove(self.storeValue.value, startValue) : BI.pushDistinct(self.storeValue.value, startValue));
            self.setValue(self.storeValue);
          }

          op.times === 1 && self._scrollToTop();
        });
      },
      hasNext: function hasNext() {
        return _hasNext;
      },
      value: this.storeValue
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.button_group.on(BI.SelectList.EVENT_CHANGE, function () {
      self.fireEvent(BI.SearchMultiSelectLoader.EVENT_CHANGE, arguments);
    });
  },
  _createItems: function _createItems(items) {
    return BI.createItems(items, {
      type: "bi.multi_select_item",
      logic: this.options.logic,
      cls: "bi-list-item-active",
      height: this.options.itemHeight,
      selected: this.isAllSelected(),
      iconWrapperWidth: 36
    });
  },
  _scrollToTop: function _scrollToTop() {
    var self = this;
    BI.delay(function () {
      self.button_group.element.scrollTop(0);
    }, 30);
  },
  isAllSelected: function isAllSelected() {
    return this.button_group.isAllSelected();
  },
  _assertValue: function _assertValue(val) {
    val || (val = {});
    val.type || (val.type = BI.Selection.Multi);
    val.value || (val.value = []);
  },
  setStartValue: function setStartValue(v) {
    this._startValue = v;
  },
  setValue: function setValue(v) {
    this.storeValue = v || {};

    this._assertValue(this.storeValue);

    this.button_group.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return this.button_group.getValue();
  },
  getAllButtons: function getAllButtons() {
    return this.button_group.getAllButtons();
  },
  empty: function empty() {
    this.button_group.empty();
  },
  populate: function populate(items) {
    if (BI.isNotNull(items)) {
      arguments[0] = this._createItems(items);
    }

    this.button_group.populate.apply(this.button_group, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.button_group.resetHeight(h);
  },
  resetWidth: function resetWidth(w) {
    this.button_group.resetWidth(w);
  }
});
BI.SearchMultiSelectLoader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.search_multi_select_loader", BI.SearchMultiSelectLoader);

/***/ }),
/* 855 */
/***/ (function(module, exports) {

BI.SearchMultiSelectPopupView = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SearchMultiSelectPopupView.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-popup-view",
      maxWidth: "auto",
      minWidth: 135,
      maxHeight: 400,
      valueFormatter: BI.emptyFn,
      itemsCreator: BI.emptyFn,
      onLoaded: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.SearchMultiSelectPopupView.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    this.loader = BI.createWidget({
      type: "bi.search_multi_select_loader",
      itemsCreator: opts.itemsCreator,
      valueFormatter: opts.valueFormatter,
      onLoaded: opts.onLoaded,
      value: opts.value
    });
    this.popupView = BI.createWidget({
      type: "bi.multi_popup_view",
      stopPropagation: false,
      maxWidth: opts.maxWidth,
      minWidth: opts.minWidth,
      maxHeight: opts.maxHeight,
      element: this,
      buttons: [BI.i18nText("BI-Basic_Clears"), BI.i18nText("BI-Basic_OK")],
      el: this.loader,
      value: opts.value
    });
    this.popupView.on(BI.MultiPopupView.EVENT_CHANGE, function () {
      self.fireEvent(BI.SearchMultiSelectPopupView.EVENT_CHANGE);
    });
    this.popupView.on(BI.MultiPopupView.EVENT_CLICK_TOOLBAR_BUTTON, function (index) {
      switch (index) {
        case 0:
          self.fireEvent(BI.SearchMultiSelectPopupView.EVENT_CLICK_CLEAR);
          break;

        case 1:
          self.fireEvent(BI.SearchMultiSelectPopupView.EVENT_CLICK_CONFIRM);
          break;
      }
    });
  },
  isAllSelected: function isAllSelected() {
    return this.loader.isAllSelected();
  },
  setStartValue: function setStartValue(v) {
    this.loader.setStartValue(v);
  },
  setValue: function setValue(v) {
    this.popupView.setValue(v);
  },
  getValue: function getValue() {
    return this.popupView.getValue();
  },
  populate: function populate(items) {
    this.popupView.populate.apply(this.popupView, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.popupView.resetHeight(h);
  },
  resetWidth: function resetWidth(w) {
    this.popupView.resetWidth(w);
  },
  setDirection: function setDirection(direction, position) {
    this.popupView.setDirection(direction, position);
  }
});
BI.SearchMultiSelectPopupView.EVENT_CHANGE = "EVENT_CHANGE";
BI.SearchMultiSelectPopupView.EVENT_CLICK_CONFIRM = "EVENT_CLICK_CONFIRM";
BI.SearchMultiSelectPopupView.EVENT_CLICK_CLEAR = "EVENT_CLICK_CLEAR";
BI.shortcut("bi.search_multi_select_popup_view", BI.SearchMultiSelectPopupView);

/***/ }),
/* 856 */
/***/ (function(module, exports) {

BI.SearchMultiSelectSearcher = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SearchMultiSelectSearcher.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-multi-select-searcher",
      itemsCreator: BI.emptyFn,
      el: {},
      popup: {},
      valueFormatter: BI.emptyFn,
      adapter: null,
      masker: {}
    });
  },
  _init: function _init() {
    BI.SearchMultiSelectSearcher.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.el, {
      type: "bi.multi_select_editor",
      height: o.height,
      text: o.text,
      tipType: o.tipType,
      warningTitle: o.warningTitle
    });
    this.searcher = BI.createWidget({
      type: "bi.searcher",
      element: this,
      height: o.height,
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback();
      },
      el: this.editor,
      popup: BI.extend({
        type: "bi.multi_select_search_pane",
        valueFormatter: o.valueFormatter,
        keywordGetter: function keywordGetter() {
          return self.editor.getValue();
        },
        itemsCreator: function itemsCreator(op, callback) {
          var keyword = self.editor.getValue();
          op.keywords = [keyword];
          o.itemsCreator(op, callback);
        },
        value: o.value
      }, o.popup),
      adapter: o.adapter,
      masker: o.masker
    });
    this.searcher.on(BI.Searcher.EVENT_START, function () {
      self.fireEvent(BI.SearchMultiSelectSearcher.EVENT_START);
    });
    this.searcher.on(BI.Searcher.EVENT_PAUSE, function () {
      if (this.hasMatched()) {}

      self.fireEvent(BI.SearchMultiSelectSearcher.EVENT_PAUSE);
    });
    this.searcher.on(BI.Searcher.EVENT_STOP, function () {
      self.fireEvent(BI.SearchMultiSelectSearcher.EVENT_STOP);
    });
    this.searcher.on(BI.Searcher.EVENT_CHANGE, function () {
      self.fireEvent(BI.SearchMultiSelectSearcher.EVENT_CHANGE, arguments);
    });
    this.searcher.on(BI.Searcher.EVENT_SEARCHING, function () {
      var keywords = this.getKeywords();
      self.fireEvent(BI.SearchMultiSelectSearcher.EVENT_SEARCHING, keywords);
    });

    if (BI.isNotNull(o.value)) {
      this.setState(o.value);
    }
  },
  adjustView: function adjustView() {
    this.searcher.adjustView();
  },
  isSearching: function isSearching() {
    return this.searcher.isSearching();
  },
  stopSearch: function stopSearch() {
    this.searcher.stopSearch();
  },
  getKeyword: function getKeyword() {
    return this.editor.getValue();
  },
  hasMatched: function hasMatched() {
    return this.searcher.hasMatched();
  },
  hasChecked: function hasChecked() {
    return this.searcher.getView() && this.searcher.getView().hasChecked();
  },
  setAdapter: function setAdapter(adapter) {
    this.searcher.setAdapter(adapter);
  },
  setState: function setState(obj) {
    var o = this.options;
    var ob = {};
    ob.type = obj.type;
    ob.value = o.allValueGetter() || [];
    ob.assist = obj.assist;

    if (ob.type === BI.Selection.All) {
      if (ob.value.length === 0) {
        this.editor.setState(BI.Selection.All);
      } else if (BI.size(ob.assist) <= 20) {
        var state = "";
        BI.each(ob.assist, function (i, v) {
          if (i === 0) {
            state += "" + (o.valueFormatter(v + "") || v);
          } else {
            state += "," + (o.valueFormatter(v + "") || v);
          }
        });
        this.editor.setState(state);
      } else {
        this.editor.setState(BI.Selection.Multi);
      }
    } else {
      if (ob.value.length === 0) {
        this.editor.setState(BI.Selection.None);
      } else if (BI.size(ob.value) <= 20) {
        var state = "";
        BI.each(ob.value, function (i, v) {
          if (i === 0) {
            state += "" + (o.valueFormatter(v + "") || v);
          } else {
            state += "," + (o.valueFormatter(v + "") || v);
          }
        });
        this.editor.setState(state);
      } else {
        this.editor.setState(BI.Selection.Multi);
      }
    }
  },
  setTipType: function setTipType(v) {
    this.editor.setTipType(v);
  },
  setValue: function setValue(ob) {
    this.setState(ob);
    this.searcher.setValue(ob);
  },
  getKey: function getKey() {
    return this.editor.getValue();
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  },
  populate: function populate(items) {
    this.searcher.populate.apply(this.searcher, arguments);
  }
});
BI.SearchMultiSelectSearcher.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.SearchMultiSelectSearcher.EVENT_CHANGE = "EVENT_CHANGE";
BI.SearchMultiSelectSearcher.EVENT_START = "EVENT_START";
BI.SearchMultiSelectSearcher.EVENT_STOP = "EVENT_STOP";
BI.SearchMultiSelectSearcher.EVENT_PAUSE = "EVENT_PAUSE";
BI.SearchMultiSelectSearcher.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.shortcut("bi.search_multi_select_searcher", BI.SearchMultiSelectSearcher);

/***/ }),
/* 857 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 * Created by GUY on 2015/9/6.
 * @class BI.SelectTreeFirstPlusGroupNode
 * @extends BI.NodeButton
 */
BI.SelectTreeFirstPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SelectTreeFirstPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-select-tree-first-plus-group-node bi-list-item-active",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      readonly: true,
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.SelectTreeFirstPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.first_tree_node_checkbox",
      stopPropagation: true,
      iconHeight: o.height,
      iconWidth: o.height
    });
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      keyword: o.keyword,
      py: o.py
    });
    this.checkbox.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        if (this.isSelected()) {
          self.triggerExpand();
        } else {
          self.triggerCollapse();
        }
      }
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      el: this.checkbox
    }, this.text);
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }))));
  },
  isOnce: function isOnce() {
    return true;
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.NodeButton.superclass.doClick.apply(this, arguments);
  },
  setOpened: function setOpened(v) {
    BI.SelectTreeFirstPlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.checkbox)) {
      this.checkbox.setSelected(v);
    }
  }
});
BI.shortcut("bi.select_tree_first_plus_group_node", BI.SelectTreeFirstPlusGroupNode);

/***/ }),
/* 858 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 * Created by GUY on 2015/9/6.
 * @class BI.SelectTreeLastPlusGroupNode
 * @extends BI.NodeButton
 */
BI.SelectTreeLastPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SelectTreeLastPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-select-tree-last-plus-group-node bi-list-item-active",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      readonly: true,
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.SelectTreeLastPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.last_tree_node_checkbox",
      stopPropagation: true,
      iconHeight: o.height,
      iconWidth: o.height
    });
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      keyword: o.keyword,
      py: o.py
    });
    this.checkbox.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        if (this.isSelected()) {
          self.triggerExpand();
        } else {
          self.triggerCollapse();
        }
      }
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      el: this.checkbox
    }, this.text);
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }))));
  },
  isOnce: function isOnce() {
    return true;
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.NodeButton.superclass.doClick.apply(this, arguments);
  },
  setOpened: function setOpened(v) {
    BI.SelectTreeLastPlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.checkbox)) {
      this.checkbox.setSelected(v);
    }
  }
});
BI.shortcut("bi.select_tree_last_plus_group_node", BI.SelectTreeLastPlusGroupNode);

/***/ }),
/* 859 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 * Created by GUY on 2015/9/6.
 * @class BI.SelectTreeMidPlusGroupNode
 * @extends BI.NodeButton
 */
BI.SelectTreeMidPlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SelectTreeMidPlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-select-tree-mid-plus-group-node bi-list-item-active",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      readonly: true,
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.SelectTreeMidPlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.mid_tree_node_checkbox",
      stopPropagation: true,
      iconHeight: o.height,
      iconWidth: o.height
    });
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      keyword: o.keyword,
      py: o.py
    });
    this.checkbox.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        if (this.isSelected()) {
          self.triggerExpand();
        } else {
          self.triggerCollapse();
        }
      }
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, {
      width: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
      el: this.checkbox
    }, this.text);
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }))));
  },
  isOnce: function isOnce() {
    return true;
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.NodeButton.superclass.doClick.apply(this, arguments);
  },
  setOpened: function setOpened(v) {
    BI.SelectTreeMidPlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.checkbox)) {
      this.checkbox.setSelected(v);
    }
  }
});
BI.shortcut("bi.select_tree_mid_plus_group_node", BI.SelectTreeMidPlusGroupNode);

/***/ }),
/* 860 */
/***/ (function(module, exports) {

/**
 * 加号表示的组节点
 * Created by GUY on 2015/9/6.
 * @class BI.SelectTreePlusGroupNode
 * @extends BI.NodeButton
 */
BI.SelectTreePlusGroupNode = BI.inherit(BI.NodeButton, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SelectTreePlusGroupNode.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-select-tree-plus-group-node bi-list-item-active",
      logic: {
        dynamic: false
      },
      id: "",
      pId: "",
      readonly: true,
      open: false,
      height: 24
    });
  },
  _init: function _init() {
    BI.SelectTreePlusGroupNode.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.checkbox = BI.createWidget({
      type: "bi.tree_node_checkbox",
      stopPropagation: true,
      iconHeight: o.height,
      iconWidth: o.iconWrapperWidth || o.height
    });
    this.text = BI.createWidget({
      type: "bi.label",
      textAlign: "left",
      whiteSpace: "nowrap",
      textHeight: o.height,
      height: o.height,
      hgap: o.hgap,
      text: o.text,
      value: o.value,
      keyword: o.keyword,
      py: o.py
    });
    this.checkbox.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        if (this.isSelected()) {
          self.triggerExpand();
        } else {
          self.triggerCollapse();
        }
      }
    });
    var type = BI.LogicFactory.createLogicTypeByDirection(BI.Direction.Left);
    var items = BI.LogicFactory.createLogicItemsByDirection(BI.Direction.Left, {
      width: 24,
      el: this.checkbox
    }, this.text);
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(type, BI.extend(o.logic, {
      items: items
    }))));
  },
  isOnce: function isOnce() {
    return true;
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    BI.NodeButton.superclass.doClick.apply(this, arguments);
  },
  setOpened: function setOpened(v) {
    BI.SelectTreePlusGroupNode.superclass.setOpened.apply(this, arguments);

    if (BI.isNotNull(this.checkbox)) {
      this.checkbox.setSelected(v);
    }
  }
});
BI.shortcut("bi.select_tree_plus_group_node", BI.SelectTreePlusGroupNode);

/***/ }),
/* 861 */
/***/ (function(module, exports) {

/**
 * @class BI.SelectTreeCombo
 * @extends BI.Widget
 */
BI.SelectTreeCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SelectTreeCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-select-tree-combo bi-border bi-border-radius",
      height: 24,
      text: "",
      items: [],
      value: "",
      allowClear: false
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.SelectTreeCombo.superclass._init.apply(this, arguments);

    this.trigger = BI.createWidget({
      type: "bi.single_tree_trigger",
      text: o.text,
      height: BI.toPix(o.height, 2),
      items: o.items,
      value: o.value,
      allowClear: o.allowClear,
      warningTitle: o.warningTitle
    });
    this.trigger.on(BI.SingleTreeTrigger.EVENT_CLEAR, function () {
      self._clear();
    });
    this.popup = BI.createWidget({
      type: "bi.select_level_tree",
      items: o.items,
      value: o.value
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      width: BI.toPix(o.width, 2),
      height: BI.toPix(o.height, 2),
      container: o.container,
      element: this,
      adjustLength: 2,
      el: this.trigger,
      popup: {
        el: this.popup
      }
    });
    this.combo.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.popup.on(BI.SingleTreePopup.EVENT_CHANGE, function () {
      self.setValue(self.popup.getValue());
      self.combo.hideView();
    });

    if (BI.isKey(o.value)) {
      this._checkError(o.value);
    }
  },
  _checkError: function _checkError(v) {
    if (BI.isNull(v) || BI.isEmptyArray(v) || BI.isEmptyString(v)) {
      this.trigger.options.tipType = "success";
      this.trigger.element.removeClass("error");
      this.element.removeClass("error");
    } else {
      v = BI.isArray(v) ? v : [v];
      var result = BI.find(this.options.items, function (idx, item) {
        return BI.contains(v, item.value);
      });

      if (BI.isNull(result)) {
        this.trigger.setTipType("warning");
        this.element.removeClass("error").addClass("error");
        this.trigger.element.removeClass("error").addClass("error");
      } else {
        this.trigger.setTipType("success");
        this.trigger.element.removeClass("error");
        this.element.removeClass("error");
      }
    }
  },
  _clear: function _clear() {
    this.setValue([]);
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.trigger.setValue(v);
    this.popup.setValue(v);

    this._checkError(v);
  },
  getValue: function getValue() {
    return this.popup.getValue();
  },
  populate: function populate(items) {
    this.combo.populate(items);
  }
});
BI.shortcut("bi.select_tree_combo", BI.SelectTreeCombo);

/***/ }),
/* 862 */
/***/ (function(module, exports) {

/**
 * @class BI.SelectTreeExpander
 * @extends BI.Widget
 */
BI.SelectTreeExpander = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SelectTreeExpander.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-select-tree-expander",
      trigger: "",
      toggle: true,
      direction: "bottom",
      isDefaultInit: true,
      el: {},
      popup: {}
    });
  },
  _init: function _init() {
    BI.SelectTreeExpander.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.trigger = BI.createWidget(o.el);
    this.trigger.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        if (this.isSelected()) {
          self.expander.setValue([]);
        }
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.expander = BI.createWidget({
      type: "bi.expander",
      element: this,
      trigger: o.trigger,
      toggle: o.toggle,
      direction: o.direction,
      isDefaultInit: o.isDefaultInit,
      el: this.trigger,
      popup: o.popup
    });
    this.expander.on(BI.Controller.EVENT_CHANGE, function (type) {
      if (type === BI.Events.CLICK) {
        self.trigger.setSelected(false);
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
  },
  getAllLeaves: function getAllLeaves() {
    return this.expander.getAllLeaves();
  },
  setValue: function setValue(v) {
    if (BI.contains(v, this.trigger.getValue())) {
      this.trigger.setSelected(true);
      this.expander.setValue([]);
    } else {
      this.trigger.setSelected(false);
      this.expander.setValue(v);
    }
  },
  getValue: function getValue() {
    if (this.trigger.isSelected()) {
      return [this.trigger.getValue()];
    }

    return this.expander.getValue();
  },
  populate: function populate(items) {
    this.expander.populate(items);
  }
});
BI.shortcut("bi.select_tree_expander", BI.SelectTreeExpander);

/***/ }),
/* 863 */
/***/ (function(module, exports) {

/**
 * @class BI.SelectTreePopup
 * @extends BI.Pane
 */
BI.SelectTreePopup = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SelectTreePopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-select-level-tree",
      tipText: BI.i18nText("BI-No_Selected_Item"),
      items: [],
      value: ""
    });
  },
  _formatItems: function _formatItems(nodes, layer, pNode) {
    var self = this;
    BI.each(nodes, function (i, node) {
      var extend = {
        layer: layer,
        isFirstNode: i === 0,
        isLastNode: i === nodes.length - 1,
        height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        pNode: pNode
      };
      node.id = node.id || BI.UUID();

      if (node.isParent === true || node.parent === true || BI.isNotEmptyArray(node.children)) {
        extend.type = "bi.tree_node";
        extend.selectable = true;
        BI.defaults(node, extend);

        self._formatItems(node.children, layer + 1, node);
      } else {
        extend.type = "bi.tree_item";
        BI.defaults(node, extend);
      }
    });
    return nodes;
  },
  _init: function _init() {
    BI.SelectTreePopup.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.tree = BI.createWidget({
      type: "bi.level_tree",
      expander: {
        type: "bi.tree_expander",
        // isDefaultInit: true,
        selectable: true
      },
      items: this._formatItems(BI.Tree.transformToTreeFormat(o.items), 0),
      value: o.value,
      chooseType: BI.Selection.Single
    });
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      vgap: 5,
      items: [this.tree]
    });
    this.tree.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.tree.on(BI.LevelTree.EVENT_CHANGE, function () {
      self.fireEvent(BI.SelectTreePopup.EVENT_CHANGE);
    });
    this.check();
  },
  getValue: function getValue() {
    return this.tree.getValue();
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.tree.setValue(v);
  },
  populate: function populate(items) {
    BI.SelectTreePopup.superclass.populate.apply(this, arguments);
    this.tree.populate(this._formatItems(BI.Tree.transformToTreeFormat(items)));
  }
});
BI.SelectTreePopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.select_level_tree", BI.SelectTreePopup);

/***/ }),
/* 864 */
/***/ (function(module, exports) {

/**
 * 单选加载数据搜索loader面板
 * Created by guy on 15/11/4.
 * @class BI.SingleSelectSearchLoader
 * @extends Widget
 */
BI.SingleSelectSearchLoader = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectSearchLoader.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-search-loader",
      allowNoSelect: false,
      logic: {
        dynamic: false
      },
      itemsCreator: BI.emptyFn,
      keywordGetter: BI.emptyFn,
      valueFormatter: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.SingleSelectSearchLoader.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    var _hasNext = false;
    this.button_group = BI.createWidget({
      type: "bi.single_select_list",
      allowNoSelect: opts.allowNoSelect,
      element: this,
      logic: {
        dynamic: false
      },
      value: opts.value,
      el: {
        tipText: BI.i18nText("BI-No_Select"),
        el: {
          type: "bi.loader",
          isDefaultInit: false,
          logic: {
            dynamic: true,
            scrolly: true
          },
          el: {
            chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
            behaviors: {
              redmark: function redmark() {
                return true;
              }
            },
            layouts: [{
              type: "bi.vertical"
            }]
          }
        }
      },
      itemsCreator: function itemsCreator(op, callback) {
        self.storeValue && (op = BI.extend(op || {}, {
          selectedValues: [self.storeValue]
        }));
        opts.itemsCreator(op, function (ob) {
          var keyword = ob.keyword = opts.keywordGetter();
          _hasNext = ob.hasNext;
          var firstItems = [];

          if (op.times === 1 && !BI.isUndefined(self.storeValue)) {
            var json = self._filterValues(self.storeValue);

            firstItems = self._createItems(json);
          }

          var context = {
            tipText: ob.tipText
          };
          callback(firstItems.concat(self._createItems(ob.items)), keyword || "", context);

          if (op.times === 1 && self.storeValue) {
            self.setValue(self.storeValue);
          }
        });
      },
      hasNext: function hasNext() {
        return _hasNext;
      }
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.button_group.on(BI.SingleSelectList.EVENT_CHANGE, function () {
      self.fireEvent(BI.SingleSelectSearchLoader.EVENT_CHANGE, arguments);
    });
  },
  _createItems: function _createItems(items) {
    var o = this.options;
    return BI.map(items, function (i, item) {
      return BI.extend({
        type: o.allowNoSelect ? "bi.single_select_item" : "bi.single_select_radio_item",
        logic: o.logic,
        cls: "bi-list-item-active",
        height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        selected: false,
        iconWrapperWidth: 26,
        hgap: o.allowNoSelect ? 10 : 0,
        title: item.title || item.text
      }, item);
    });
  },
  _filterValues: function _filterValues(src) {
    var o = this.options;
    var keyword = o.keywordGetter();
    var values = src || [];
    var newValues = BI.map(BI.isArray(values) ? values : [values], function (i, v) {
      return {
        text: o.valueFormatter(v) || v,
        value: v
      };
    });

    if (BI.isKey(keyword)) {
      var search = BI.Func.getSearchResult(newValues, keyword);
      values = search.match.concat(search.find);
    }

    return BI.map(values, function (i, v) {
      return {
        text: v.text,
        title: v.text,
        value: v.value,
        selected: false
      };
    });
  },
  setValue: function setValue(v) {
    // 暂存的值一定是新的值，不然v改掉后，storeValue也跟着改了
    this.storeValue = v;
    this.button_group.setValue(v);
  },
  getValue: function getValue() {
    return this.button_group.getValue();
  },
  getAllButtons: function getAllButtons() {
    return this.button_group.getAllButtons();
  },
  empty: function empty() {
    this.button_group.empty();
  },
  populate: function populate(items) {
    this.button_group.populate.apply(this.button_group, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.button_group.resetHeight(h);
  },
  resetWidth: function resetWidth(w) {
    this.button_group.resetWidth(w);
  }
});
BI.SingleSelectSearchLoader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_select_search_loader", BI.SingleSelectSearchLoader);

/***/ }),
/* 865 */
/***/ (function(module, exports) {

/**
 *
 * 在搜索框中输入文本弹出的面板
 * @class BI.SingleSelectSearchInsertPane
 * @extends Widget
 */
BI.SingleSelectSearchInsertPane = BI.inherit(BI.Widget, {
  constants: {
    height: 25,
    lgap: 10,
    tgap: 5
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectSearchInsertPane.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-search-pane-insert bi-card",
      allowNoSelect: false,
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      keywordGetter: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.SingleSelectSearchInsertPane.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.addNotMatchTip = BI.createWidget({
      type: "bi.label",
      text: BI.i18nText("BI-Basic_Press_Enter_To_Add_Text", ""),
      height: this.constants.height,
      cls: "bi-keyword-red-mark",
      hgap: 5
    });
    this.loader = BI.createWidget({
      type: "bi.single_select_search_loader",
      allowNoSelect: o.allowNoSelect,
      keywordGetter: o.keywordGetter,
      valueFormatter: o.valueFormatter,
      itemsCreator: function itemsCreator(op, callback) {
        o.itemsCreator.apply(self, [op, function (res) {
          callback(res);
          self.setKeyword(o.keywordGetter());
        }]);
      },
      value: o.value
    });
    this.loader.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.resizer = BI.createWidget({
      type: "bi.vertical_fill",
      rowSize: ["", "fill"],
      element: this,
      items: [{
        type: "bi.vertical",
        items: [this.addNotMatchTip],
        height: this.constants.height
      }, {
        el: this.loader
      }]
    });
  },
  setKeyword: function setKeyword(keyword) {
    this.addNotMatchTip.setText(BI.i18nText("BI-Basic_Press_Enter_To_Add_Text", keyword));
  },
  hasMatched: function hasMatched() {
    return false;
  },
  setValue: function setValue(v) {
    this.loader.setValue(v);
  },
  getValue: function getValue() {
    return this.loader.getValue();
  },
  empty: function empty() {
    this.loader.empty();
  },
  populate: function populate(items) {
    this.loader.populate.apply(this.loader, arguments);
  }
});
BI.SingleSelectSearchInsertPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_select_search_insert_pane", BI.SingleSelectSearchInsertPane);

/***/ }),
/* 866 */
/***/ (function(module, exports) {

/**
 *
 * 在搜索框中输入文本弹出的面板
 * @class BI.SingleSelectSearchPane
 * @extends Widget
 */
BI.SingleSelectSearchPane = BI.inherit(BI.Widget, {
  constants: {
    height: 25,
    lgap: 10,
    tgap: 5
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectSearchPane.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-search-pane bi-card",
      allowNoSelect: false,
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      keywordGetter: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.SingleSelectSearchPane.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.tooltipClick = BI.createWidget({
      type: "bi.label",
      invisible: true,
      text: BI.i18nText("BI-Click_Blank_To_Select"),
      cls: "single-select-toolbar",
      height: this.constants.height
    });
    this.loader = BI.createWidget({
      type: "bi.single_select_search_loader",
      allowNoSelect: o.allowNoSelect,
      keywordGetter: o.keywordGetter,
      valueFormatter: o.valueFormatter,
      itemsCreator: function itemsCreator(op, callback) {
        o.itemsCreator.apply(self, [op, function (res) {
          callback(res);
          self.setKeyword(o.keywordGetter());
        }]);
      },
      value: o.value
    });
    this.loader.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.resizer = BI.createWidget({
      type: "bi.vertical_fill",
      rowSize: ["", "fill"],
      element: this,
      items: [{
        el: this.tooltipClick
      }, {
        el: this.loader
      }]
    });
    this.tooltipClick.setVisible(false);
  },
  setKeyword: function setKeyword(keyword) {
    var btn,
        o = this.options;
    var isVisible = this.loader.getAllButtons().length > 0 && (btn = this.loader.getAllButtons()[0]) && keyword === (o.valueFormatter(btn.getValue()) || btn.getValue());

    if (isVisible !== this.tooltipClick.isVisible()) {
      this.tooltipClick.setVisible(isVisible);
      this.resizer.attr("items")[0].height = isVisible ? this.constants.height : 0;
      this.resizer.resize();
    }
  },
  hasMatched: function hasMatched() {
    return this.tooltipClick.isVisible();
  },
  setValue: function setValue(v) {
    this.loader.setValue(v);
  },
  getValue: function getValue() {
    return this.loader.getValue();
  },
  empty: function empty() {
    this.loader.empty();
  },
  populate: function populate(items) {
    this.loader.populate.apply(this.loader, arguments);
  }
});
BI.SingleSelectSearchPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_select_search_pane", BI.SingleSelectSearchPane);

/***/ }),
/* 867 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.SingleSelectCombo
 * @extends BI.Single
 */
BI.SingleSelectCombo = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-combo",
      allowNoSelect: false,
      itemsCreator: BI.emptyFn,
      itemWrapper: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      height: 24,
      allowEdit: true
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.SingleSelectCombo.superclass._init.apply(this, arguments);

    var assertShowValue = function assertShowValue() {
      BI.isKey(self._startValue) && (self.storeValue = self._startValue);
      self.trigger.getSearcher().setState(self.storeValue);
    };

    this.storeValue = o.value; // 标记正在请求数据

    this.requesting = false;
    this.trigger = BI.createWidget({
      type: "bi.single_select_trigger",
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      // adapter: this.popup,
      allowNoSelect: o.allowNoSelect,
      allowEdit: o.allowEdit,
      valueFormatter: o.valueFormatter,
      itemsCreator: function itemsCreator(op, callback) {
        o.itemsCreator(op, function (res) {
          if (op.times === 1 && BI.isNotNull(op.keywords)) {
            // 预防trigger内部把当前的storeValue改掉
            self.trigger.setValue(self.getValue());
          }

          callback.apply(self, arguments);
        });
      },
      text: o.text,
      value: this.storeValue
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_FOCUS, function () {
      self.fireEvent(BI.SingleSelectCombo.EVENT_FOCUS);
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_BLUR, function () {
      self.fireEvent(BI.SingleSelectCombo.EVENT_BLUR);
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_START, function () {
      self._setStartValue();

      this.getSearcher().setValue(self.storeValue);
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_STOP, function () {
      self._setStartValue();

      self.fireEvent(BI.SingleSelectCombo.EVENT_STOP);
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_SEARCHING, function () {
      self._dataChange = true;
      self.fireEvent(BI.SingleSelectCombo.EVENT_SEARCHING);
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_CHANGE, function (value, obj) {
      self.storeValue = this.getValue();
      assertShowValue();

      self._defaultState();

      self._dataChange = true;
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_COUNTER_CLICK, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      cls: o.simple ? "bi-border-bottom" : "bi-border bi-border-radius",
      container: o.container,
      toggle: false,
      el: this.trigger,
      adjustLength: 1,
      popup: {
        type: "bi.single_select_popup_view",
        allowNoSelect: o.allowNoSelect,
        ref: function ref() {
          self.popup = this;
          self.trigger.setAdapter(this);
        },
        listeners: [{
          eventName: BI.SingleSelectPopupView.EVENT_CHANGE,
          action: function action() {
            self._dataChange = true;
            self.storeValue = this.getValue();

            self._adjust(function () {
              assertShowValue();

              self._defaultState();
            });

            self.fireEvent(BI.SingleSelectCombo.EVENT_CLICK_ITEM);
          }
        }],
        itemsCreator: o.itemsCreator,
        itemWrapper: o.itemWrapper,
        valueFormatter: o.valueFormatter,
        onLoaded: function onLoaded() {
          BI.nextTick(function () {
            self.combo.adjustWidth();
            self.combo.adjustHeight();
            self.trigger.getSearcher().adjustView();
          });
        }
      },
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0;
      },
      value: o.value
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      if (!this.isViewVisible()) {
        self._dataChange = false; // 标记数据是否发生变化
      }

      this.setValue(self.storeValue);
      BI.nextTick(function () {
        self.populate();
      });
    }); // 当退出的时候如果还在处理请求，则等请求结束后再对外发确定事件

    this.wants2Quit = false;
    this.combo.on(BI.Combo.EVENT_AFTER_HIDEVIEW, function () {
      // important:关闭弹出时又可能没有退出编辑状态
      self.trigger.stopEditing();

      if (self.requesting === true) {
        self.wants2Quit = true;
      } else {
        self._dataChange && self.fireEvent(BI.SingleSelectCombo.EVENT_CONFIRM);
      }
    });
    var triggerBtn = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.height,
      height: o.height,
      cls: "single-select-trigger-icon-button"
    });
    triggerBtn.on(BI.TriggerIconButton.EVENT_CHANGE, function () {
      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.combo,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: triggerBtn,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
  },
  _defaultState: function _defaultState() {
    this.trigger.stopEditing();
    this.combo.hideView();
  },
  _assertValue: function _assertValue(val) {},
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _joinKeywords: function _joinKeywords(keywords, callback) {
    var self = this,
        o = this.options;

    this._assertValue(this.storeValue);

    this.requesting = true;
    o.itemsCreator({
      type: BI.SingleSelectCombo.REQ_GET_ALL_DATA,
      keywords: keywords
    }, function (ob) {
      var values = BI.map(ob.items, "value");
      digest(values);
    });

    function digest(items) {
      var selectedMap = self._makeMap(items);

      BI.each(keywords, function (i, val) {
        if (BI.isNotNull(selectedMap[val])) {
          BI.remove(self.storeValue.value, val);
        }
      });

      self._adjust(callback);
    }
  },
  _adjust: function _adjust(callback) {
    var self = this,
        o = this.options;

    if (!this._count) {
      o.itemsCreator({
        type: BI.SingleSelectCombo.REQ_GET_DATA_LENGTH
      }, function (res) {
        self._count = res.count;
        adjust();
        callback();
      });
    } else {
      adjust();
      callback();
    }

    function adjust() {
      if (self.wants2Quit === true) {
        self._dataChange && self.fireEvent(BI.SingleSelectCombo.EVENT_CONFIRM);
        self.wants2Quit = false;
      }

      self.requesting = false;
    }
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.popup.setStartValue(value);
  },
  setValue: function setValue(v) {
    this.storeValue = v;

    this._assertValue(this.storeValue);

    this.combo.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  populate: function populate() {
    this._count = null;
    this.combo.populate.apply(this.combo, arguments);
  }
});
BI.extend(BI.SingleSelectCombo, {
  REQ_GET_DATA_LENGTH: 0,
  REQ_GET_ALL_DATA: -1
});
BI.SingleSelectCombo.EVENT_BLUR = "EVENT_BLUR";
BI.SingleSelectCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.SingleSelectCombo.EVENT_STOP = "EVENT_STOP";
BI.SingleSelectCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.SingleSelectCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.SingleSelectCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.single_select_combo", BI.SingleSelectCombo);

/***/ }),
/* 868 */
/***/ (function(module, exports) {

/**
 *
 * @class BI.SingleSelectInsertCombo
 * @extends BI.Single
 */
BI.SingleSelectInsertCombo = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectInsertCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-combo",
      allowNoSelect: false,
      itemsCreator: BI.emptyFn,
      itemWrapper: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      height: 24,
      allowEdit: true,
      watermark: BI.i18nText("BI-Basic_Search_And_Patch_Paste")
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.SingleSelectInsertCombo.superclass._init.apply(this, arguments);

    var assertShowValue = function assertShowValue() {
      BI.isKey(self._startValue) && (self.storeValue = self._startValue);
      self.trigger.getSearcher().setState(self.storeValue);
    };

    this.storeValue = o.value; // 标记正在请求数据

    this.requesting = false;
    this.trigger = BI.createWidget({
      type: "bi.single_select_trigger",
      watermark: o.watermark,
      height: BI.toPix(o.height, o.simple ? 1 : 2),
      allowNoSelect: o.allowNoSelect,
      allowEdit: o.allowEdit,
      // adapter: this.popup,
      valueFormatter: o.valueFormatter,
      itemsCreator: function itemsCreator(op, callback) {
        o.itemsCreator(op, function (res) {
          if (op.times === 1 && BI.isNotNull(op.keywords)) {
            // 预防trigger内部把当前的storeValue改掉
            self.trigger.setValue(self.getValue());
          }

          callback.apply(self, arguments);
        });
      },
      text: o.text,
      value: this.storeValue,
      searcher: {
        popup: {
          type: "bi.single_select_search_insert_pane"
        }
      }
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_FOCUS, function () {
      self.fireEvent(BI.SingleSelectInsertCombo.EVENT_FOCUS);
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_BLUR, function () {
      self.fireEvent(BI.SingleSelectInsertCombo.EVENT_BLUR);
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_START, function () {
      self._setStartValue();

      this.getSearcher().setValue(self.storeValue);
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_STOP, function () {
      self._setStartValue();

      self.fireEvent(BI.SingleSelectInsertCombo.EVENT_STOP);
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_PAUSE, function () {
      self.storeValue = self.trigger.getSearcher().getKeyword();
      assertShowValue();

      self._defaultState();
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_SEARCHING, function () {
      self._dataChange = true;
      self.fireEvent(BI.SingleSelectInsertCombo.EVENT_SEARCHING);
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_CHANGE, function (value, obj) {
      self.storeValue = this.getValue();
      assertShowValue();

      self._defaultState();

      self._dataChange = true;
    });
    this.trigger.on(BI.SingleSelectTrigger.EVENT_COUNTER_CLICK, function () {
      if (!self.combo.isViewVisible()) {
        self.combo.showView();
      }
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      cls: o.simple ? "bi-border-bottom" : "bi-border bi-border-radius",
      container: o.container,
      toggle: false,
      el: this.trigger,
      adjustLength: 1,
      popup: {
        type: "bi.single_select_popup_view",
        allowNoSelect: o.allowNoSelect,
        ref: function ref() {
          self.popup = this;
          self.trigger.setAdapter(this);
        },
        listeners: [{
          eventName: BI.SingleSelectPopupView.EVENT_CHANGE,
          action: function action() {
            self._dataChange = true;
            self.storeValue = this.getValue();

            self._adjust(function () {
              assertShowValue();

              self._defaultState();
            });

            self.fireEvent(BI.SingleSelectInsertCombo.EVENT_CLICK_ITEM);
          }
        }],
        itemsCreator: o.itemsCreator,
        itemWrapper: o.itemWrapper,
        valueFormatter: o.valueFormatter,
        onLoaded: function onLoaded() {
          BI.nextTick(function () {
            self.combo.adjustWidth();
            self.combo.adjustHeight();
            self.trigger.getSearcher().adjustView();
          });
        }
      },
      hideChecker: function hideChecker(e) {
        return triggerBtn.element.find(e.target).length === 0;
      },
      value: o.value
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      if (!this.isViewVisible()) {
        self._dataChange = false; // 标记数据是否发生变化
      }

      this.setValue(self.storeValue);
      BI.nextTick(function () {
        self.populate();
      });
    }); // 当退出的时候如果还在处理请求，则等请求结束后再对外发确定事件

    this.wants2Quit = false;
    this.combo.on(BI.Combo.EVENT_AFTER_HIDEVIEW, function () {
      // important:关闭弹出时又可能没有退出编辑状态
      self.trigger.stopEditing();

      if (self.requesting === true) {
        self.wants2Quit = true;
      } else {
        self._dataChange && self.fireEvent(BI.SingleSelectInsertCombo.EVENT_CONFIRM);
      }
    });
    var triggerBtn = BI.createWidget({
      type: "bi.trigger_icon_button",
      width: o.height,
      height: o.height,
      cls: "single-select-trigger-icon-button"
    });
    triggerBtn.on(BI.TriggerIconButton.EVENT_CHANGE, function () {
      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      } else {
        self.combo.showView();
      }
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.combo,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, {
        el: triggerBtn,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
  },
  _defaultState: function _defaultState() {
    this.trigger.stopEditing();
    this.combo.hideView();
  },
  _assertValue: function _assertValue(val) {},
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _adjust: function _adjust(callback) {
    var self = this,
        o = this.options;
    adjust();
    callback();

    function adjust() {
      if (self.wants2Quit === true) {
        self._dataChange && self.fireEvent(BI.SingleSelectInsertCombo.EVENT_CONFIRM);
        self.wants2Quit = false;
      }

      self.requesting = false;
    }
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.popup.setStartValue(value);
  },
  setValue: function setValue(v) {
    this.storeValue = v;

    this._assertValue(this.storeValue);

    this.combo.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  populate: function populate() {
    this.combo.populate.apply(this.combo, arguments);
  }
});
BI.extend(BI.SingleSelectInsertCombo, {
  REQ_GET_DATA_LENGTH: 0,
  REQ_GET_ALL_DATA: -1
});
BI.SingleSelectInsertCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.SingleSelectInsertCombo.EVENT_BLUR = "EVENT_BLUR";
BI.SingleSelectInsertCombo.EVENT_STOP = "EVENT_STOP";
BI.SingleSelectInsertCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.SingleSelectInsertCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.SingleSelectInsertCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.single_select_insert_combo", BI.SingleSelectInsertCombo);

/***/ }),
/* 869 */
/***/ (function(module, exports) {

/**
 * 选择列表
 *
 * Created by GUY on 2015/11/1.
 * @class BI.SingleSelectList
 * @extends BI.Widget
 */
BI.SingleSelectList = BI.inherit(BI.Widget, {
  _constants: {
    itemHeight: 24
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectList.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-select-list",
      direction: BI.Direction.Top,
      // toolbar的位置
      logic: {
        dynamic: true
      },
      items: [],
      itemsCreator: BI.emptyFn,
      hasNext: BI.emptyFn,
      onLoaded: BI.emptyFn,
      el: {
        type: "bi.list_pane"
      },
      allowNoSelect: false
    });
  },
  _init: function _init() {
    BI.SingleSelectList.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.list = BI.createWidget(o.el, {
      type: "bi.list_pane",
      items: o.items,
      itemsCreator: function itemsCreator(op, callback) {
        op.times === 1 && self.toolbar && self.toolbar.setVisible(false);
        o.itemsCreator(op, function (items) {
          callback.apply(self, arguments);

          if (op.times === 1) {
            self.toolbar && self.toolbar.setVisible(items && items.length > 0);
            self.toolbar && self.toolbar.setEnable(items && items.length > 0);
          }
        });
      },
      onLoaded: o.onLoaded,
      hasNext: o.hasNext,
      value: o.value
    });
    this.list.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
      if (type === BI.Events.CLICK) {
        self.fireEvent(BI.SingleSelectList.EVENT_CHANGE, value, obj);
      }

      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    BI.createWidget(BI.extend({
      element: this
    }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(o.direction), BI.extend({
      scrolly: true
    }, o.logic, {
      items: o.allowNoSelect ? BI.LogicFactory.createLogicItemsByDirection(o.direction, {
        type: "bi.single_select_item",
        cls: "bi-list-item-active",
        height: this._constants.itemHeight,
        forceNotSelected: true,
        text: BI.i18nText("BI-Basic_No_Select"),
        ref: function ref(_ref) {
          self.toolbar = _ref;
        },
        listeners: [{
          eventName: BI.Controller.EVENT_CHANGE,
          action: function action(type) {
            if (type === BI.Events.CLICK) {
              self.list.setValue();
              self.fireEvent(BI.SingleSelectList.EVENT_CHANGE);
            }

            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
          }
        }]
      }, this.list) : BI.LogicFactory.createLogicItemsByDirection(o.direction, this.list)
    }))));
  },
  hasPrev: function hasPrev() {
    return this.list.hasPrev();
  },
  hasNext: function hasNext() {
    return this.list.hasNext();
  },
  prependItems: function prependItems(items) {
    this.list.prependItems.apply(this.list, arguments);
  },
  addItems: function addItems(items) {
    this.list.addItems.apply(this.list, arguments);
  },
  setValue: function setValue(v) {
    this.list.setValue([v]);
  },
  getValue: function getValue() {
    return this.list.getValue()[0];
  },
  empty: function empty() {
    this.list.empty();
  },
  populate: function populate(items) {
    this.list.populate.apply(this.list, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.list.resetHeight ? this.list.resetHeight(h) : this.list.element.css({
      "max-height": BI.pixFormat(h - (this.options.allowNoSelect ? this._constants.itemHeight : 0))
    });
  },
  setNotSelectedValue: function setNotSelectedValue() {
    this.list.setNotSelectedValue.apply(this.list, arguments);
  },
  getNotSelectedValue: function getNotSelectedValue() {
    return this.list.getNotSelectedValue();
  },
  getAllButtons: function getAllButtons() {
    return this.list.getAllButtons();
  },
  getAllLeaves: function getAllLeaves() {
    return this.list.getAllLeaves();
  },
  getSelectedButtons: function getSelectedButtons() {
    return this.list.getSelectedButtons();
  },
  getNotSelectedButtons: function getNotSelectedButtons() {
    return this.list.getNotSelectedButtons();
  },
  getIndexByValue: function getIndexByValue(value) {
    return this.list.getIndexByValue(value);
  },
  getNodeById: function getNodeById(id) {
    return this.list.getNodeById(id);
  },
  getNodeByValue: function getNodeByValue(value) {
    return this.list.getNodeByValue(value);
  }
});
BI.SingleSelectList.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_select_list", BI.SingleSelectList);

/***/ }),
/* 870 */
/***/ (function(module, exports) {

/**
 * 单选加载数据面板
 * Created by guy on 15/11/2.
 * @class BI.SingleSelectLoader
 * @extends Widget
 */
BI.SingleSelectLoader = BI.inherit(BI.Widget, {
  _constants: {
    itemVgap: 5
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectLoader.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-loader",
      logic: {
        dynamic: true
      },
      el: {
        height: 400
      },
      allowNoSelect: false,
      valueFormatter: BI.emptyFn,
      itemsCreator: BI.emptyFn,
      itemWrapper: BI.emptyFn,
      onLoaded: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.SingleSelectLoader.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    var _hasNext = false;
    this.storeValue = opts.value;
    this.button_group = BI.createWidget({
      type: "bi.single_select_list",
      allowNoSelect: opts.allowNoSelect,
      logic: opts.logic,
      el: BI.extend({
        onLoaded: opts.onLoaded,
        el: {
          type: "bi.loader",
          isDefaultInit: false,
          logic: {
            dynamic: true,
            scrolly: true
          },
          el: {
            chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
            behaviors: {
              redmark: function redmark() {
                return true;
              }
            },
            layouts: [{
              type: "bi.vertical"
            }]
          }
        }
      }, opts.el),
      itemsCreator: function itemsCreator(op, callback) {
        var startValue = self._startValue;
        !BI.isUndefined(self.storeValue) && (op = BI.extend(op || {}, {
          selectedValues: [self.storeValue]
        }));
        opts.itemsCreator(op, function (ob) {
          _hasNext = ob.hasNext;
          var firstItems = [];

          if (op.times === 1 && !BI.isUndefined(self.storeValue)) {
            var json = BI.map([self.storeValue], function (i, v) {
              var txt = opts.valueFormatter(v) || v;
              return opts.itemWrapper({
                text: txt,
                value: v,
                title: txt,
                selected: true
              }) || {
                text: txt,
                value: v,
                title: txt,
                selected: true
              };
            });
            firstItems = self._createItems(json);
          }

          callback(firstItems.concat(self._createItems(ob.items)), ob.keyword || "");

          if (op.times === 1 && self.storeValue) {
            BI.isKey(startValue) && (self.storeValue = startValue);
            self.setValue(self.storeValue);
          }

          op.times === 1 && self._scrollToTop();
        });
      },
      hasNext: function hasNext() {
        return _hasNext;
      },
      value: this.storeValue
    });
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      items: [this.button_group],
      vgap: this._constants.itemVgap
    });
    this.button_group.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.button_group.on(BI.SingleSelectList.EVENT_CHANGE, function () {
      self.fireEvent(BI.SingleSelectLoader.EVENT_CHANGE, arguments);
    });
  },
  _createItems: function _createItems(items) {
    var o = this.options;
    return BI.map(items, function (i, item) {
      return BI.extend({
        type: o.allowNoSelect ? "bi.single_select_item" : "bi.single_select_radio_item",
        logic: o.logic,
        cls: "bi-list-item-active",
        height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT,
        selected: false,
        iconWrapperWidth: 26,
        textHgap: o.allowNoSelect ? 10 : 0,
        title: item.title || item.text
      }, item);
    });
  },
  _scrollToTop: function _scrollToTop() {
    var self = this;
    BI.delay(function () {
      self.button_group.element.scrollTop(0);
    }, 30);
  },
  _assertValue: function _assertValue(val) {},
  setStartValue: function setStartValue(v) {
    this._startValue = v;
  },
  setValue: function setValue(v) {
    this.storeValue = v;

    this._assertValue(this.storeValue);

    this.button_group.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return this.button_group.getValue();
  },
  getAllButtons: function getAllButtons() {
    return this.button_group.getAllButtons();
  },
  empty: function empty() {
    this.button_group.empty();
  },
  populate: function populate(items) {
    this.button_group.populate.apply(this.button_group, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.button_group.resetHeight(h - this._constants.itemVgap * 2);
  },
  resetWidth: function resetWidth(w) {
    this.button_group.resetWidth(w);
  }
});
BI.SingleSelectLoader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_select_loader", BI.SingleSelectLoader);

/***/ }),
/* 871 */
/***/ (function(module, exports) {

/**
 * 带加载的单选下拉面板
 * @class BI.SingleSelectPopupView
 * @extends Widget
 */
BI.SingleSelectPopupView = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectPopupView.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-popup-view",
      allowNoSelect: false,
      maxWidth: "auto",
      minWidth: 135,
      maxHeight: 400,
      valueFormatter: BI.emptyFn,
      itemsCreator: BI.emptyFn,
      itemWrapper: BI.emptyFn,
      onLoaded: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.SingleSelectPopupView.superclass._init.apply(this, arguments);

    var self = this,
        opts = this.options;
    this.loader = BI.createWidget({
      type: "bi.single_select_loader",
      allowNoSelect: opts.allowNoSelect,
      itemsCreator: opts.itemsCreator,
      itemWrapper: opts.itemWrapper,
      valueFormatter: opts.valueFormatter,
      onLoaded: opts.onLoaded,
      value: opts.value
    });
    this.popupView = BI.createWidget({
      type: "bi.popup_view",
      stopPropagation: false,
      maxWidth: opts.maxWidth,
      minWidth: opts.minWidth,
      maxHeight: opts.maxHeight,
      element: this,
      el: this.loader,
      value: opts.value
    });
    this.popupView.on(BI.MultiPopupView.EVENT_CHANGE, function () {
      self.fireEvent(BI.SingleSelectPopupView.EVENT_CHANGE);
    });
  },
  setStartValue: function setStartValue(v) {
    this.loader.setStartValue(v);
  },
  setValue: function setValue(v) {
    this.popupView.setValue(v);
  },
  getValue: function getValue() {
    return this.popupView.getValue();
  },
  populate: function populate(items) {
    this.popupView.populate.apply(this.popupView, arguments);
  },
  resetHeight: function resetHeight(h) {
    this.popupView.resetHeight(h);
  },
  resetWidth: function resetWidth(w) {
    this.popupView.resetWidth(w);
  },
  setDirection: function setDirection(direction, position) {
    this.popupView.setDirection(direction, position);
  }
});
BI.SingleSelectPopupView.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_select_popup_view", BI.SingleSelectPopupView);

/***/ }),
/* 872 */
/***/ (function(module, exports) {

/**
 *
 * 单选下拉框
 * @class BI.SingleSelectTrigger
 * @extends BI.Trigger
 */
BI.SingleSelectTrigger = BI.inherit(BI.Trigger, {
  constants: {
    height: 14,
    rgap: 4,
    lgap: 4
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-trigger",
      allowNoSelect: false,
      itemsCreator: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      searcher: {},
      switcher: {},
      adapter: null,
      masker: {},
      allowEdit: true
    });
  },
  _init: function _init() {
    BI.SingleSelectTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.searcher = BI.createWidget(o.searcher, {
      type: "bi.single_select_searcher",
      watermark: o.watermark,
      allowNoSelect: o.allowNoSelect,
      text: o.text,
      height: o.height,
      itemsCreator: o.itemsCreator,
      valueFormatter: o.valueFormatter,
      popup: {},
      adapter: o.adapter,
      masker: o.masker,
      value: o.value
    });
    this.searcher.on(BI.SingleSelectSearcher.EVENT_START, function () {
      self.fireEvent(BI.SingleSelectTrigger.EVENT_START);
    });
    this.searcher.on(BI.SingleSelectSearcher.EVENT_PAUSE, function () {
      self.fireEvent(BI.SingleSelectTrigger.EVENT_PAUSE);
    });
    this.searcher.on(BI.SingleSelectSearcher.EVENT_SEARCHING, function () {
      self.fireEvent(BI.SingleSelectTrigger.EVENT_SEARCHING, arguments);
    });
    this.searcher.on(BI.SingleSelectSearcher.EVENT_STOP, function () {
      self.fireEvent(BI.SingleSelectTrigger.EVENT_STOP);
    });
    this.searcher.on(BI.SingleSelectSearcher.EVENT_CHANGE, function () {
      self.fireEvent(BI.SingleSelectTrigger.EVENT_CHANGE, arguments);
    });
    this.searcher.on(BI.SingleSelectSearcher.EVENT_FOCUS, function () {
      self.fireEvent(BI.SingleSelectTrigger.EVENT_FOCUS);
    });
    this.searcher.on(BI.SingleSelectSearcher.EVENT_BLUR, function () {
      self.fireEvent(BI.SingleSelectTrigger.EVENT_BLUR, arguments);
    });
    var wrapper = BI.createWidget({
      type: "bi.htape",
      element: this,
      items: [{
        el: this.searcher,
        width: "fill"
      }, {
        el: BI.createWidget(),
        width: 24
      }]
    });
    !o.allowEdit && BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.text",
          title: function title() {
            return self.searcher.getState();
          }
        },
        left: 0,
        right: 24,
        top: 0,
        bottom: 0
      }]
    });
  },
  getSearcher: function getSearcher() {
    return this.searcher;
  },
  stopEditing: function stopEditing() {
    this.searcher.stopSearch();
  },
  setAdapter: function setAdapter(adapter) {
    this.searcher.setAdapter(adapter);
  },
  setValue: function setValue(v) {
    this.searcher.setValue(v);
  },
  getKey: function getKey() {
    return this.searcher.getKey();
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  }
});
BI.SingleSelectTrigger.EVENT_TRIGGER_CLICK = "EVENT_TRIGGER_CLICK";
BI.SingleSelectTrigger.EVENT_COUNTER_CLICK = "EVENT_COUNTER_CLICK";
BI.SingleSelectTrigger.EVENT_CHANGE = "EVENT_CHANGE";
BI.SingleSelectTrigger.EVENT_START = "EVENT_START";
BI.SingleSelectTrigger.EVENT_STOP = "EVENT_STOP";
BI.SingleSelectTrigger.EVENT_PAUSE = "EVENT_PAUSE";
BI.SingleSelectTrigger.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.SingleSelectTrigger.EVENT_BEFORE_COUNTER_POPUPVIEW = "EVENT_BEFORE_COUNTER_POPUPVIEW";
BI.SingleSelectTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.SingleSelectTrigger.EVENT_BLUR = "EVENT_BLUR";
BI.shortcut("bi.single_select_trigger", BI.SingleSelectTrigger);

/***/ }),
/* 873 */
/***/ (function(module, exports) {

/**
 * @author: Teller
 * @createdAt: 2018/3/28
 * @Description
*/
BI.SingleSelectInsertList = BI.inherit(BI.Single, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectInsertList.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-insert-list",
      allowNoSelect: false,
      itemsCreator: BI.emptyFn,
      itemWrapper: BI.emptyFn,
      valueFormatter: BI.emptyFn,
      searcherHeight: 24
    });
  },
  _init: function _init() {
    BI.SingleSelectInsertList.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.storeValue = o.value;

    var assertShowValue = function assertShowValue() {
      BI.isKey(self._startValue) && (self.storeValue = self._startValue); // self.trigger.setValue(self.storeValue);
    };

    this.adapter = BI.createWidget({
      type: "bi.single_select_loader",
      allowNoSelect: o.allowNoSelect,
      cls: "popup-single-select-list bi-border-left bi-border-right bi-border-bottom",
      itemsCreator: o.itemsCreator,
      valueFormatter: o.valueFormatter,
      itemWrapper: o.itemWrapper,
      logic: {
        dynamic: true
      },
      // onLoaded: o.onLoaded,
      el: {},
      value: o.value
    });
    this.adapter.on(BI.SingleSelectLoader.EVENT_CHANGE, function () {
      self.storeValue = this.getValue();
      assertShowValue();
      self.fireEvent(BI.SingleSelectInsertList.EVENT_CHANGE);
    });
    this.searcherPane = BI.createWidget({
      type: "bi.single_select_search_insert_pane",
      allowNoSelect: o.allowNoSelect,
      cls: "bi-border-left bi-border-right bi-border-bottom",
      valueFormatter: o.valueFormatter,
      keywordGetter: function keywordGetter() {
        return self.trigger.getKeyword();
      },
      itemsCreator: function itemsCreator(op, callback) {
        op.keywords = [self.trigger.getKeyword()];
        this.setKeyword(op.keywords[0]);
        o.itemsCreator(op, callback);
      }
    });
    this.searcherPane.setVisible(false);
    this.trigger = BI.createWidget({
      type: "bi.searcher",
      el: {
        type: "bi.select_patch_editor",
        el: {
          type: "bi.search_editor",
          watermark: BI.i18nText("BI-Basic_Search_And_Patch_Paste")
        },
        ref: function ref(_ref) {
          self.editor = _ref;
        },
        height: o.searcherHeight
      },
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback();
      },
      adapter: this.adapter,
      popup: this.searcherPane,
      masker: false,
      value: o.value,
      listeners: [{
        eventName: BI.Searcher.EVENT_START,
        action: function action() {
          self._showSearcherPane();

          self._setStartValue();

          this.setValue(BI.deepClone(self.storeValue));
        }
      }, {
        eventName: BI.Searcher.EVENT_STOP,
        action: function action() {
          self._showAdapter();

          self._setStartValue();

          self.adapter.setValue(self.storeValue); // 需要刷新回到初始界面，否则搜索的结果不能放在最前面

          self.adapter.populate();
        }
      }, {
        eventName: BI.Searcher.EVENT_PAUSE,
        action: function action() {
          var keyword = this.getKeyword();
          self.storeValue = keyword;

          self._showAdapter();

          self.adapter.setValue(self.storeValue);

          self._setStartValue(keyword);

          assertShowValue();
          self.adapter.populate();

          self._setStartValue();

          self.fireEvent(BI.SingleSelectInsertList.EVENT_CHANGE);
        }
      }, {
        eventName: BI.Searcher.EVENT_CHANGE,
        action: function action() {
          self.storeValue = this.getValue();
          self.fireEvent(BI.SingleSelectInsertList.EVENT_CHANGE);
        }
      }]
    });
    BI.createWidget({
      type: "bi.vertical_fill",
      rowSize: ["", "fill"],
      element: this,
      items: [{
        el: this.trigger
      }, {
        el: this.adapter
      }]
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.searcherPane,
        top: 24,
        bottom: 0,
        left: 0,
        right: 0
      }]
    });
  },
  _showAdapter: function _showAdapter() {
    this.adapter.setVisible(true);
    this.searcherPane.setVisible(false);
  },
  _showSearcherPane: function _showSearcherPane() {
    this.searcherPane.setVisible(true);
    this.adapter.setVisible(false);
  },
  _defaultState: function _defaultState() {
    this.trigger.stopEditing();
  },
  _assertValue: function _assertValue() {},
  _makeMap: function _makeMap(values) {
    return BI.makeObject(values || []);
  },
  _setStartValue: function _setStartValue(value) {
    this._startValue = value;
    this.adapter.setStartValue(value);
  },
  isAllSelected: function isAllSelected() {
    return this.adapter.isAllSelected();
  },
  resize: function resize() {// this.trigger.getCounter().adjustView();
    // this.trigger.adjustView();
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    this.adapter.setValue(this.storeValue);
    this.trigger.setValue(this.storeValue);
  },
  getValue: function getValue() {
    return BI.deepClone(this.storeValue);
  },
  populate: function populate() {
    this._count = null;
    this._allData = null;
    this.adapter.populate.apply(this.adapter, arguments);
    this.trigger.populate.apply(this.trigger, arguments);
  }
});
BI.extend(BI.SingleSelectInsertList, {
  REQ_GET_DATA_LENGTH: 0,
  REQ_GET_ALL_DATA: -1
});
BI.SingleSelectInsertList.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_select_insert_list", BI.SingleSelectInsertList);

/***/ }),
/* 874 */
/***/ (function(module, exports) {

/**
 * 单选输入框
 * Created by guy on 15/11/3.
 * @class BI.SingleSelectEditor
 * @extends Widget
 */
BI.SingleSelectEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectEditor.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-editor",
      el: {},
      text: BI.i18nText("BI-Basic_Please_Select"),
      watermark: BI.i18nText("BI-Basic_Search")
    });
  },
  _init: function _init() {
    BI.SingleSelectEditor.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.el, {
      type: "bi.select_patch_editor",
      element: this,
      height: o.height,
      watermark: o.watermark,
      allowBlank: true,
      value: o.value,
      defaultText: o.text,
      text: o.text
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.StateEditor.EVENT_FOCUS, function () {
      self.fireEvent(BI.SingleSelectEditor.EVENT_FOCUS);
    });
    this.editor.on(BI.StateEditor.EVENT_BLUR, function () {
      self.fireEvent(BI.SingleSelectEditor.EVENT_BLUR);
    });
  },
  focus: function focus() {
    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();
  },
  setState: function setState(state) {
    this.editor.setState(state);
  },
  setValue: function setValue(v) {
    this.editor.setValue(v);
  },
  getValue: function getValue() {
    return this.editor.getValue();
  },
  getKeywords: function getKeywords() {
    var val = this.editor.getValue();
    var keywords = val.split(/\u200b\s\u200b/);

    if (BI.isEmptyString(keywords[keywords.length - 1])) {
      keywords = keywords.slice(0, keywords.length - 1);
    }

    if (/\u200b\s\u200b$/.test(val)) {
      return keywords.concat([BI.BlankSplitChar]);
    }

    return keywords;
  },
  getKeyword: function getKeyword() {
    var val = this.editor.getValue();
    var keywords = val.split(/\u200b\s\u200b/);

    if (BI.isEmptyString(keywords[keywords.length - 1])) {
      keywords = keywords.slice(0, keywords.length - 1);
    }

    return BI.isEmptyArray(keywords) ? "" : keywords[keywords.length - 1];
  },
  populate: function populate(items) {}
});
BI.SingleSelectEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.SingleSelectEditor.EVENT_BLUR = "EVENT_BLUR";
BI.shortcut("bi.single_select_editor", BI.SingleSelectEditor);

/***/ }),
/* 875 */
/***/ (function(module, exports) {

/**
 * searcher
 * Created by guy on 15/11/3.
 * @class BI.SingleSelectSearcher
 * @extends Widget
 */
BI.SingleSelectSearcher = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleSelectSearcher.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-select-searcher",
      itemsCreator: BI.emptyFn,
      el: {},
      popup: {},
      valueFormatter: BI.emptyFn,
      adapter: null,
      masker: {},
      allowNoSelect: false
    });
  },
  _init: function _init() {
    BI.SingleSelectSearcher.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget(o.el, {
      type: "bi.single_select_editor",
      height: o.height,
      watermark: o.watermark,
      text: o.text,
      listeners: [{
        eventName: BI.SingleSelectEditor.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.SingleSelectSearcher.EVENT_FOCUS);
        }
      }, {
        eventName: BI.SingleSelectEditor.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.SingleSelectSearcher.EVENT_BLUR);
        }
      }]
    });
    this.searcher = BI.createWidget({
      type: "bi.searcher",
      element: this,
      height: o.height,
      isAutoSearch: false,
      isAutoSync: false,
      onSearch: function onSearch(op, callback) {
        callback();
      },
      el: this.editor,
      popup: BI.extend({
        type: "bi.single_select_search_pane",
        allowNoSelect: o.allowNoSelect,
        valueFormatter: o.valueFormatter,
        keywordGetter: function keywordGetter() {
          return self.editor.getValue();
        },
        itemsCreator: function itemsCreator(op, callback) {
          var keyword = self.editor.getValue();
          op.keywords = [keyword];
          this.setKeyword(keyword);
          o.itemsCreator(op, callback);
        },
        value: o.value
      }, o.popup),
      adapter: o.adapter,
      masker: o.masker
    });
    this.searcher.on(BI.Searcher.EVENT_START, function () {
      self.fireEvent(BI.SingleSelectSearcher.EVENT_START);
    });
    this.searcher.on(BI.Searcher.EVENT_PAUSE, function () {
      if (this.hasMatched()) {}

      self.fireEvent(BI.SingleSelectSearcher.EVENT_PAUSE);
    });
    this.searcher.on(BI.Searcher.EVENT_STOP, function () {
      self.fireEvent(BI.SingleSelectSearcher.EVENT_STOP);
    });
    this.searcher.on(BI.Searcher.EVENT_CHANGE, function () {
      self.fireEvent(BI.SingleSelectSearcher.EVENT_CHANGE, arguments);
    });
    this.searcher.on(BI.Searcher.EVENT_SEARCHING, function () {
      var keywords = this.getKeywords();
      self.fireEvent(BI.SingleSelectSearcher.EVENT_SEARCHING, keywords);
    });

    if (BI.isNotNull(o.value)) {
      this.setState(o.value);
    }
  },
  adjustView: function adjustView() {
    this.searcher.adjustView();
  },
  isSearching: function isSearching() {
    return this.searcher.isSearching();
  },
  stopSearch: function stopSearch() {
    this.searcher.stopSearch();
  },
  getKeyword: function getKeyword() {
    return this.editor.getKeyword();
  },
  hasMatched: function hasMatched() {
    return this.searcher.hasMatched();
  },
  hasChecked: function hasChecked() {
    return this.searcher.getView() && this.searcher.getView().hasChecked();
  },
  setAdapter: function setAdapter(adapter) {
    this.searcher.setAdapter(adapter);
  },
  setState: function setState(v) {
    var o = this.options;

    if (BI.isUndefined(v)) {
      this.editor.setState(BI.Selection.None);
    } else {
      var _v;

      v = (_v = v) !== null && _v !== void 0 ? _v : "";
      this.editor.setState(o.valueFormatter(v + "") || v + "");
    }
  },
  setValue: function setValue(ob) {
    this.setState(ob);
    this.searcher.setValue(ob);
  },
  getKey: function getKey() {
    return this.editor.getValue();
  },
  getValue: function getValue() {
    return this.searcher.getValue();
  },
  populate: function populate(items) {
    this.searcher.populate.apply(this.searcher, arguments);
  }
});
BI.SingleSelectSearcher.EVENT_FOCUS = "EVENT_FOCUS";
BI.SingleSelectSearcher.EVENT_BLUR = "EVENT_BLUR";
BI.SingleSelectSearcher.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.SingleSelectSearcher.EVENT_CHANGE = "EVENT_CHANGE";
BI.SingleSelectSearcher.EVENT_START = "EVENT_START";
BI.SingleSelectSearcher.EVENT_STOP = "EVENT_STOP";
BI.SingleSelectSearcher.EVENT_PAUSE = "EVENT_PAUSE";
BI.SingleSelectSearcher.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.shortcut("bi.single_select_searcher", BI.SingleSelectSearcher);

/***/ }),
/* 876 */
/***/ (function(module, exports) {

BI.SignTextEditor = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    var conf = BI.SignTextEditor.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      baseCls: (conf.baseCls || "") + " bi-sign-initial-editor",
      validationChecker: BI.emptyFn,
      text: "",
      height: 24
    });
  },
  _init: function _init() {
    BI.SignTextEditor.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.editor = BI.createWidget({
      type: "bi.editor",
      simple: o.simple,
      height: o.height,
      hgap: 4,
      vgap: 2,
      value: o.value,
      validationChecker: o.validationChecker,
      allowBlank: false
    });
    this.text = BI.createWidget({
      type: "bi.text_button",
      cls: "sign-editor-text",
      title: function title() {
        return self.getValue();
      },
      textAlign: o.textAlign,
      height: o.height,
      hgap: 4,
      handler: function handler() {
        self._showInput();

        self.editor.focus();
        self.editor.selectAll();
      }
    });
    this.text.on(BI.TextButton.EVENT_CHANGE, function () {
      BI.nextTick(function () {
        self.fireEvent(BI.SignTextEditor.EVENT_CLICK_LABEL);
      });
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.text,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
    this.editor.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CONFIRM, function () {
      self._showHint();

      self._checkText();

      self.fireEvent(BI.SignTextEditor.EVENT_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_CHANGE_CONFIRM, function () {
      self._showHint();

      self._checkText();

      self.fireEvent(BI.SignTextEditor.EVENT_CHANGE_CONFIRM, arguments);
    });
    this.editor.on(BI.Editor.EVENT_ERROR, function () {
      self._checkText();
    });
    BI.createWidget({
      type: "bi.vertical",
      scrolly: false,
      element: this,
      items: [this.editor]
    });

    this._showHint();

    self._checkText();
  },
  _checkText: function _checkText() {
    var o = this.options;
    BI.nextTick(BI.bind(function () {
      if (this.editor.getValue() === "") {
        this.text.setValue(o.watermark || "");
        this.text.element.addClass("bi-water-mark");
      } else {
        var v = this.editor.getValue();
        v = BI.isEmpty(v) || v == o.text ? o.text : v + o.text;
        this.text.setValue(v);
        this.text.element.removeClass("bi-water-mark");
      }
    }, this));
  },
  _showInput: function _showInput() {
    this.editor.visible();
    this.text.invisible();
  },
  _showHint: function _showHint() {
    this.editor.invisible();
    this.text.visible();
  },
  setTitle: function setTitle(title) {
    this.text.setTitle(title);
  },
  setWarningTitle: function setWarningTitle(title) {
    this.text.setWarningTitle(title);
  },
  focus: function focus() {
    this._showInput();

    this.editor.focus();
  },
  blur: function blur() {
    this.editor.blur();

    this._showHint();

    this._checkText();
  },
  doRedMark: function doRedMark() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doHighLight: function doHighLight() {
    if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
      return;
    }

    this.text.doHighLight.apply(this.text, arguments);
  },
  unHighLight: function unHighLight() {
    this.text.unHighLight.apply(this.text, arguments);
  },
  isValid: function isValid() {
    return this.editor.isValid();
  },
  setErrorText: function setErrorText(text) {
    this.editor.setErrorText(text);
  },
  getErrorText: function getErrorText() {
    return this.editor.getErrorText();
  },
  isEditing: function isEditing() {
    return this.editor.isEditing();
  },
  getLastValidValue: function getLastValidValue() {
    return this.editor.getLastValidValue();
  },
  getLastChangedValue: function getLastChangedValue() {
    return this.editor.getLastChangedValue();
  },
  setValue: function setValue(v) {
    this.editor.setValue(v);

    this._checkText();
  },
  getValue: function getValue() {
    return this.editor.getValue();
  },
  getState: function getState() {
    return this.text.getValue();
  },
  setState: function setState(v) {
    var o = this.options;

    this._showHint();

    v = BI.isEmpty(v) || v == o.text ? o.text : v + o.text;
    this.text.setValue(v);
  }
});
BI.SignTextEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.SignTextEditor.EVENT_CHANGE_CONFIRM = "EVENT_CHANGE_CONFIRM";
BI.SignTextEditor.EVENT_CLICK_LABEL = "EVENT_CLICK_LABEL";
BI.shortcut("bi.sign_text_editor", BI.SignTextEditor);

/***/ }),
/* 877 */
/***/ (function(module, exports) {

/**
 * Created by zcf on 2016/9/22.
 */
BI.SliderIconButton = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-single-slider-button slider-button bi-high-light-border",
    height: 8,
    width: 8
  },
  constants: {
    LARGE_SIZE: 16,
    NORMAL_SIZE: 12,
    LARGE_OFFSET: 4,
    NORMAL_OFFSET: 6
  },
  render: function render() {
    var self = this;
    return {
      type: "bi.layout"
    };
  }
});
BI.shortcut("bi.single_slider_button", BI.SliderIconButton);

/***/ }),
/* 878 */
/***/ (function(module, exports) {

/**
 * Created by zcf on 2016/9/22.
 */
BI.SingleSlider = BI.inherit(BI.Single, {
  _constant: {
    EDITOR_WIDTH: 90,
    EDITOR_HEIGHT: 20,
    SLIDER_WIDTH_HALF: 15,
    SLIDER_WIDTH: 30,
    SLIDER_HEIGHT: 30,
    TRACK_HEIGHT: 24,
    TRACK_GAP_HALF: 7,
    TRACK_GAP: 14
  },
  props: {
    baseCls: "bi-single-slider bi-slider-track",
    digit: false,
    unit: "",
    value: "",
    min: 0,
    max: 100
  },
  beforeMount: function beforeMount() {
    var _this$options = this.options,
        value = _this$options.value,
        min = _this$options.min,
        max = _this$options.max;
    this.setMinAndMax({
      min: min,
      max: max
    });
    this.setValue(value);
    this.populate();
  },
  render: function render() {
    var self = this,
        o = this.options;
    var c = this._constant;
    this.enable = false;
    this.value = "";
    this.grayTrack = BI.createWidget({
      type: "bi.layout",
      cls: "gray-track",
      height: 6
    });
    this.blueTrack = BI.createWidget({
      type: "bi.layout",
      cls: "blue-track bi-high-light-background",
      height: 6
    });
    this.track = this._createTrackWrapper();
    this.slider = BI.createWidget({
      type: "bi.single_slider_button"
    });

    this._draggable(this.slider);

    var sliderVertical = BI.createWidget({
      type: "bi.vertical_adapt",
      cls: "slider-wrapper",
      columnSize: ["fill"],
      items: [{
        type: "bi.absolute",
        items: [{
          el: this.slider,
          top: 8
        }],
        height: c.SLIDER_HEIGHT
      }],
      hgap: c.SLIDER_WIDTH_HALF,
      height: c.SLIDER_HEIGHT
    }); // 这边其实是有问题的，拖拽区域是个圆，在圆的边缘拖拽后放开，这边计算出来的蓝条宽度实际上会比放开时长一点或者短一点

    sliderVertical.element.click(function (e) {
      if (self.enable && self.isEnabled() && sliderVertical.element[0] === e.originalEvent.target) {
        var offset = e.clientX - self.element.offset().left - c.SLIDER_WIDTH_HALF;
        var trackLength = self.track.element[0].scrollWidth - c.TRACK_GAP;
        var percent = 0;

        if (offset < 0) {
          percent = 0;
        }

        if (offset > 0 && offset < trackLength) {
          percent = offset * 100 / self._getGrayTrackLength();
        }

        if (offset >= trackLength) {
          percent = 100;
        }

        var significantPercent = BI.parseFloat(percent.toFixed(1));

        self._setAllPosition(significantPercent);

        var v = self._getValueByPercent(significantPercent);

        v = o.digit === false ? v : v.toFixed(o.digit);
        self.label.setValue(v);
        self.value = v;
        self.fireEvent(BI.SingleSlider.EVENT_CHANGE);
      }
    });
    this.label = BI.createWidget({
      type: "bi.sign_text_editor",
      cls: "slider-editor-button",
      text: o.unit,
      width: BI.toPix(c.EDITOR_WIDTH, 2),
      height: BI.toPix(c.EDITOR_HEIGHT, 2),
      allowBlank: false,
      textAlign: "center",
      validationChecker: function validationChecker(v) {
        return self._checkValidation(v);
      }
    });
    this.label.element.hover(function () {
      self.label.element.removeClass("bi-border").addClass("bi-border");
    }, function () {
      self.label.element.removeClass("bi-border");
    });
    this.label.on(BI.SignEditor.EVENT_CONFIRM, function () {
      var v = BI.parseFloat(this.getValue());

      var percent = self._getPercentByValue(v);

      var significantPercent = BI.parseFloat(percent.toFixed(1));

      self._setAllPosition(significantPercent);

      this.setValue(v);
      self.value = v;
      self.fireEvent(BI.SingleSlider.EVENT_CHANGE);
    });

    this._setVisible(false);

    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.vertical",
          items: [{
            type: "bi.absolute",
            items: [{
              el: this.track,
              width: "100%",
              height: c.TRACK_HEIGHT
            }]
          }],
          hgap: c.TRACK_GAP_HALF,
          height: c.TRACK_HEIGHT
        },
        top: 23,
        left: 0,
        width: "100%"
      }, {
        el: sliderVertical,
        top: 20,
        left: 0,
        width: "100%"
      }, {
        el: {
          type: "bi.vertical",
          items: [{
            type: "bi.horizontal_auto",
            items: [this.label]
          }] // height: c.EDITOR_HEIGHT

        },
        top: 0,
        left: 0,
        width: "100%"
      }]
    };
  },
  _draggable: function _draggable(widget) {
    var self = this,
        o = this.options;
    var startDrag = false;
    var size = 0,
        offset = 0,
        defaultSize = 0;
    var mouseMoveTracker = new BI.MouseMoveTracker(function (deltaX) {
      if (mouseMoveTracker.isDragging()) {
        startDrag = true;
        offset += deltaX;
        size = optimizeSize(defaultSize + offset);
        widget.element.addClass("dragging");

        var percent = size * 100 / self._getGrayTrackLength();

        var significantPercent = BI.parseFloat(percent.toFixed(1)); // 直接对计算出来的百分数保留到小数点后一位，相当于分成了1000份。

        self._setBlueTrack(significantPercent);

        self._setLabelPosition(significantPercent);

        self._setSliderPosition(significantPercent);

        var v = self._getValueByPercent(significantPercent);

        v = o.digit === false ? v : v.toFixed(o.digit);
        self.label.setValue(v);
        self.value = v;
      }
    }, function () {
      if (startDrag === true) {
        size = optimizeSize(size);

        var percent = size * 100 / self._getGrayTrackLength();

        var significantPercent = BI.parseFloat(percent.toFixed(1));

        self._setSliderPosition(significantPercent);

        size = 0;
        offset = 0;
        defaultSize = size;
        startDrag = false;
      }

      widget.element.removeClass("dragging");
      mouseMoveTracker.releaseMouseMoves();
      self.fireEvent(BI.SingleSlider.EVENT_CHANGE);
    }, window);
    widget.element.on("mousedown", function (event) {
      if (!widget.isEnabled()) {
        return;
      }

      defaultSize = this.offsetLeft;
      optimizeSize(defaultSize);
      mouseMoveTracker.captureMouseMoves(event);
    });

    function optimizeSize(s) {
      return BI.clamp(s, 0, self._getGrayTrackLength());
    }
  },
  _createTrackWrapper: function _createTrackWrapper() {
    return BI.createWidget({
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.vertical",
          items: [{
            type: "bi.absolute",
            items: [{
              el: this.grayTrack,
              top: 0,
              left: 0,
              width: "100%"
            }, {
              el: this.blueTrack,
              top: 0,
              left: 0,
              width: "0%"
            }]
          }],
          hgap: 8,
          height: 8
        },
        top: 8,
        left: 0,
        width: "100%"
      }]
    });
  },
  _checkValidation: function _checkValidation(v) {
    var o = this.options;
    var valid = false;

    if (BI.isNumeric(v) && !(BI.isNull(v) || v < this.min || v > this.max)) {
      if (o.digit === false) {
        valid = true;
      } else {
        var dotText = (v + "").split(".")[1] || "";
        valid = dotText.length === o.digit;
      }
    }

    return valid;
  },
  _setBlueTrack: function _setBlueTrack(percent) {
    this.blueTrack.element.css({
      width: percent + "%"
    });
  },
  _setLabelPosition: function _setLabelPosition(percent) {// this.label.element.css({left: percent + "%"});
  },
  _setSliderPosition: function _setSliderPosition(percent) {
    this.slider.element.css({
      left: percent + "%"
    });
  },
  _setAllPosition: function _setAllPosition(percent) {
    this._setSliderPosition(percent);

    this._setLabelPosition(percent);

    this._setBlueTrack(percent);
  },
  _setVisible: function _setVisible(visible) {
    this.slider.setVisible(visible);
    this.label.setVisible(visible);
  },
  _getGrayTrackLength: function _getGrayTrackLength() {
    return this.grayTrack.element[0].scrollWidth;
  },
  _getValueByPercent: function _getValueByPercent(percent) {
    var thousandth = BI.parseInt(percent * 10);
    return (this.max - this.min) * thousandth / 1000 + this.min;
  },
  _getPercentByValue: function _getPercentByValue(v) {
    return (v - this.min) * 100 / (this.max - this.min);
  },
  getValue: function getValue() {
    return this.value;
  },
  setValue: function setValue(v) {
    var o = this.options;
    v = BI.parseFloat(v);
    v = o.digit === false ? v : v.toFixed(o.digit);

    if (!isNaN(v)) {
      if (this._checkValidation(v)) {
        this.value = v;
      }

      if (v > this.max) {
        this.value = this.max;
      }

      if (v < this.min) {
        this.value = this.min;
      }
    }
  },
  _setEnable: function _setEnable(b) {
    BI.SingleSlider.superclass._setEnable.apply(this, [b]);

    if (b) {
      this.blueTrack.element.removeClass("disabled-blue-track").addClass("blue-track");
    } else {
      this.blueTrack.element.removeClass("blue-track").addClass("disabled-blue-track");
    }
  },
  setMinAndMax: function setMinAndMax(v) {
    var minNumber = BI.parseFloat(v.min);
    var maxNumber = BI.parseFloat(v.max);

    if (!isNaN(minNumber) && !isNaN(maxNumber) && maxNumber > minNumber) {
      this.min = minNumber;
      this.max = maxNumber;
    }
  },
  reset: function reset() {
    this._setVisible(false);

    this.enable = false;
    this.value = "";
    this.min = 0;
    this.max = 0;

    this._setBlueTrack(0);
  },
  populate: function populate() {
    var o = this.options;

    if (!isNaN(this.min) && !isNaN(this.max)) {
      this._setVisible(true);

      this.enable = true;

      if (o.digit) {
        this.label.setErrorText(BI.i18nText("BI-Basic_Please_Enter_Number_Between", this.min, this.max));
      } else {
        this.label.setErrorText(BI.i18nText("BI-Basic_Please_Enter_Integer_Number_Between", this.min, this.max));
      }

      if (BI.isNumeric(this.value) || BI.isNotEmptyString(this.value)) {
        this.label.setValue(this.value);

        this._setAllPosition(this._getPercentByValue(this.value));
      } else {
        this.label.setValue(this.max);

        this._setAllPosition(100);
      }
    }
  }
});
BI.SingleSlider.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_slider", BI.SingleSlider);

/***/ }),
/* 879 */
/***/ (function(module, exports) {

/**
 * Created by Urthur on 2017/9/12.
 */
BI.SingleSliderLabel = BI.inherit(BI.Single, {
  _constant: {
    EDITOR_WIDTH: 90,
    EDITOR_HEIGHT: 20,
    HEIGHT: 20,
    SLIDER_WIDTH_HALF: 15,
    SLIDER_WIDTH: 30,
    SLIDER_HEIGHT: 30,
    TRACK_HEIGHT: 24,
    TRACK_GAP_HALF: 7,
    TRACK_GAP: 14
  },
  props: {
    baseCls: "bi-single-slider-label bi-slider-track",
    digit: false,
    unit: "",
    value: "",
    min: 0,
    max: 100
  },
  beforeMount: function beforeMount() {
    var _this$options = this.options,
        value = _this$options.value,
        min = _this$options.min,
        max = _this$options.max;
    this.setMinAndMax({
      min: min,
      max: max
    });
    this.setValue(value);
    this.populate();
  },
  render: function render() {
    var self = this,
        o = this.options;
    var c = this._constant;
    this.enable = false;
    this.value = "";
    this.grayTrack = BI.createWidget({
      type: "bi.layout",
      cls: "gray-track",
      height: 6
    });
    this.blueTrack = BI.createWidget({
      type: "bi.layout",
      cls: "blue-track bi-high-light-background",
      height: 6
    });
    this.track = this._createTrackWrapper();
    this.slider = BI.createWidget({
      type: "bi.single_slider_button"
    });

    this._draggable(this.slider);

    var sliderVertical = BI.createWidget({
      type: "bi.vertical_adapt",
      columnSize: ["fill"],
      items: [{
        type: "bi.absolute",
        items: [{
          el: this.slider,
          top: 8
        }],
        height: c.SLIDER_HEIGHT
      }],
      hgap: c.SLIDER_WIDTH_HALF,
      height: c.SLIDER_HEIGHT
    });
    sliderVertical.element.click(function (e) {
      if (self.enable && self.isEnabled() && sliderVertical.element[0] === e.originalEvent.target) {
        var offset = e.clientX - self.element.offset().left - c.SLIDER_WIDTH_HALF;
        var trackLength = self.track.element[0].scrollWidth - c.TRACK_GAP;
        var percent = 0;

        if (offset < 0) {
          percent = 0;
        }

        if (offset > 0 && offset < trackLength) {
          percent = offset * 100 / self._getGrayTrackLength();
        }

        if (offset >= trackLength) {
          percent = 100;
        }

        var significantPercent = BI.parseFloat(percent.toFixed(1));

        self._setAllPosition(significantPercent);

        var v = self._getValueByPercent(significantPercent);

        v = o.digit === false ? v : v.toFixed(o.digit);
        self.label.setText(v + o.unit);
        self.value = v;
        self.fireEvent(BI.SingleSliderLabel.EVENT_CHANGE);
      }
    });
    this.label = BI.createWidget({
      type: "bi.label",
      height: c.HEIGHT,
      width: BI.toPix(c.EDITOR_WIDTH, 2)
    });

    this._setVisible(false);

    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.vertical",
          items: [{
            type: "bi.absolute",
            items: [{
              el: this.track,
              width: "100%",
              height: c.TRACK_HEIGHT
            }]
          }],
          hgap: c.TRACK_GAP_HALF,
          height: c.TRACK_HEIGHT
        },
        top: 13,
        left: 0,
        width: "100%"
      }, {
        el: sliderVertical,
        top: 10,
        left: 0,
        width: "100%"
      }, {
        el: {
          type: "bi.vertical",
          items: [{
            type: "bi.horizontal_auto",
            items: [this.label]
          }],
          height: c.EDITOR_HEIGHT
        },
        top: 0,
        left: 0,
        width: "100%"
      }]
    };
  },
  _draggable: function _draggable(widget) {
    var self = this,
        o = this.options;
    var startDrag = false;
    var size = 0,
        offset = 0,
        defaultSize = 0;
    var mouseMoveTracker = new BI.MouseMoveTracker(function (deltaX) {
      if (mouseMoveTracker.isDragging()) {
        startDrag = true;
        offset += deltaX;
        size = optimizeSize(defaultSize + offset);
        widget.element.addClass("dragging");

        var percent = size * 100 / self._getGrayTrackLength();

        var significantPercent = BI.parseFloat(percent.toFixed(1)); // 直接对计算出来的百分数保留到小数点后一位，相当于分成了1000份。

        self._setBlueTrack(significantPercent);

        self._setLabelPosition(significantPercent);

        self._setSliderPosition(significantPercent);

        var v = self._getValueByPercent(significantPercent);

        v = o.digit === false ? v : v.toFixed(o.digit);
        self.label.setValue(v + o.unit);
        self.value = v;
        self.fireEvent(BI.SingleSliderLabel.EVENT_CHANGE);
      }
    }, function () {
      if (startDrag === true) {
        size = optimizeSize(size);

        var percent = size * 100 / self._getGrayTrackLength();

        var significantPercent = BI.parseFloat(percent.toFixed(1));

        self._setSliderPosition(significantPercent);

        size = 0;
        offset = 0;
        defaultSize = size;
        startDrag = false;
      }

      widget.element.removeClass("dragging");
      mouseMoveTracker.releaseMouseMoves();
      self.fireEvent(BI.SingleSliderLabel.EVENT_CHANGE);
    }, window);
    widget.element.on("mousedown", function (event) {
      if (!widget.isEnabled()) {
        return;
      }

      defaultSize = this.offsetLeft;
      optimizeSize(defaultSize);
      mouseMoveTracker.captureMouseMoves(event);
    });

    function optimizeSize(s) {
      return BI.clamp(s, 0, self._getGrayTrackLength());
    }
  },
  _createTrackWrapper: function _createTrackWrapper() {
    return BI.createWidget({
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.vertical",
          items: [{
            type: "bi.absolute",
            items: [{
              el: this.grayTrack,
              top: 0,
              left: 0,
              width: "100%"
            }, {
              el: this.blueTrack,
              top: 0,
              left: 0,
              width: "0%"
            }]
          }],
          hgap: 8,
          height: 8
        },
        top: 8,
        left: 0,
        width: "100%"
      }]
    });
  },
  _checkValidation: function _checkValidation(v) {
    return BI.isNumeric(v) && !(BI.isNull(v) || v < this.min || v > this.max);
  },
  _setBlueTrack: function _setBlueTrack(percent) {
    this.blueTrack.element.css({
      width: percent + "%"
    });
  },
  _setLabelPosition: function _setLabelPosition(percent) {// this.label.element.css({left: percent + "%"});
  },
  _setSliderPosition: function _setSliderPosition(percent) {
    this.slider.element.css({
      left: percent + "%"
    });
  },
  _setAllPosition: function _setAllPosition(percent) {
    this._setSliderPosition(percent);

    this._setLabelPosition(percent);

    this._setBlueTrack(percent);
  },
  _setVisible: function _setVisible(visible) {
    this.slider.setVisible(visible);
    this.label.setVisible(visible);
  },
  _getGrayTrackLength: function _getGrayTrackLength() {
    return this.grayTrack.element[0].scrollWidth;
  },
  _getValueByPercent: function _getValueByPercent(percent) {
    var thousandth = BI.parseInt(percent * 10);
    return (this.max - this.min) * thousandth / 1000 + this.min;
  },
  _getPercentByValue: function _getPercentByValue(v) {
    return (v - this.min) * 100 / (this.max - this.min);
  },
  _setEnable: function _setEnable(b) {
    BI.SingleSliderLabel.superclass._setEnable.apply(this, [b]);

    if (b) {
      this.blueTrack.element.removeClass("disabled-blue-track").addClass("blue-track");
    } else {
      this.blueTrack.element.removeClass("blue-track").addClass("disabled-blue-track");
    }
  },
  getValue: function getValue() {
    return this.value;
  },
  setValue: function setValue(v) {
    var o = this.options;
    v = BI.parseFloat(v);
    v = o.digit === false ? v : v.toFixed(o.digit);

    if (!isNaN(v)) {
      if (this._checkValidation(v)) {
        this.value = v;
      }

      if (v > this.max) {
        this.value = this.max;
      }

      if (v < this.min) {
        this.value = this.min;
      }
    }
  },
  setMinAndMax: function setMinAndMax(v) {
    var minNumber = BI.parseFloat(v.min);
    var maxNumber = BI.parseFloat(v.max);

    if (!isNaN(minNumber) && !isNaN(maxNumber) && maxNumber > minNumber) {
      this.min = minNumber;
      this.max = maxNumber;
    }
  },
  reset: function reset() {
    this._setVisible(false);

    this.enable = false;
    this.value = "";
    this.min = 0;
    this.max = 0;

    this._setBlueTrack(0);
  },
  populate: function populate() {
    var o = this.options;

    if (!isNaN(this.min) && !isNaN(this.max)) {
      this._setVisible(true);

      this.enable = true;

      if (BI.isNumeric(this.value) || BI.isNotEmptyString(this.value)) {
        this.label.setValue(this.value + o.unit);

        this._setAllPosition(this._getPercentByValue(this.value));
      } else {
        this.label.setValue(this.max + o.unit);

        this._setAllPosition(100);
      }
    }
  }
});
BI.SingleSliderLabel.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_slider_label", BI.SingleSliderLabel);

/***/ }),
/* 880 */
/***/ (function(module, exports) {

/**
 * normal single slider
 * Created by Young on 2017/6/21.
 */
BI.SingleSliderNormal = BI.inherit(BI.Single, {
  _constant: {
    HEIGHT: 28,
    SLIDER_WIDTH_HALF: 15,
    SLIDER_WIDTH: 30,
    SLIDER_HEIGHT: 30,
    TRACK_HEIGHT: 24,
    TRACK_GAP_HALF: 7,
    TRACK_GAP: 14
  },
  props: {
    baseCls: "bi-single-slider-normal bi-slider-track",
    min: 0,
    max: 100,
    value: "" // color: "#3f8ce8"

  },
  beforeMount: function beforeMount() {
    var _this$options = this.options,
        value = _this$options.value,
        min = _this$options.min,
        max = _this$options.max;
    this.setMinAndMax({
      min: min,
      max: max
    });
    this.setValue(value);
    this.populate();
  },
  render: function render() {
    var self = this;
    var o = this.options;
    var c = this._constant;

    var track = this._createTrack();

    this.slider = BI.createWidget({
      type: "bi.single_slider_button"
    });

    this._draggable(this.slider);

    var sliderVertical = BI.createWidget({
      type: "bi.vertical_adapt",
      columnSize: ["fill"],
      items: [{
        type: "bi.absolute",
        items: [{
          el: this.slider,
          top: 8
        }],
        height: c.SLIDER_HEIGHT
      }],
      hgap: c.SLIDER_WIDTH_HALF,
      height: c.SLIDER_HEIGHT
    });
    sliderVertical.element.click(function (e) {
      if (self.enable && self.isEnabled() && sliderVertical.element[0] === e.originalEvent.target) {
        var offset = e.clientX - self.element.offset().left - c.SLIDER_WIDTH_HALF;
        var trackLength = self.track.element[0].scrollWidth - c.TRACK_GAP;
        var percent = 0;

        if (offset < 0) {
          percent = 0;
        }

        if (offset > 0 && offset < trackLength) {
          percent = offset * 100 / self._getGrayTrackLength();
        }

        if (offset >= trackLength) {
          percent = 100;
        }

        var significantPercent = BI.parseFloat(percent.toFixed(1));

        self._setAllPosition(significantPercent);

        var v = self._getValueByPercent(significantPercent);

        self.value = v;
        self.fireEvent(BI.SingleSlider.EVENT_CHANGE);
      }
    });
    return {
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.vertical",
          items: [{
            type: "bi.absolute",
            items: [{
              el: track,
              width: "100%",
              height: c.TRACK_HEIGHT
            }]
          }],
          hgap: c.TRACK_GAP_HALF,
          height: c.TRACK_HEIGHT
        },
        top: 3,
        left: 0,
        width: "100%"
      }, {
        el: sliderVertical,
        top: 0,
        left: 0,
        width: "100%"
      }]
    };
  },
  _draggable: function _draggable(widget) {
    var self = this,
        o = this.options;
    var startDrag = false;
    var size = 0,
        offset = 0,
        defaultSize = 0;
    var mouseMoveTracker = new BI.MouseMoveTracker(function (deltaX) {
      if (mouseMoveTracker.isDragging()) {
        startDrag = true;
        offset += deltaX;
        size = optimizeSize(defaultSize + offset);
        widget.element.addClass("dragging");

        var percent = size * 100 / self._getGrayTrackLength();

        var significantPercent = BI.parseFloat(percent.toFixed(1)); // 直接对计算出来的百分数保留到小数点后一位，相当于分成了1000份。

        self._setBlueTrack(significantPercent);

        self._setSliderPosition(significantPercent);

        var v = self._getValueByPercent(significantPercent);

        v = o.digit === false ? v : v.toFixed(o.digit);
        self.value = v;
        self.fireEvent(BI.SingleSliderNormal.EVENT_DRAG, v);
      }
    }, function () {
      if (startDrag === true) {
        size = optimizeSize(size);

        var percent = size * 100 / self._getGrayTrackLength();

        var significantPercent = BI.parseFloat(percent.toFixed(1));

        self._setSliderPosition(significantPercent);

        size = 0;
        offset = 0;
        defaultSize = size;
        startDrag = false;
      }

      widget.element.removeClass("dragging");
      mouseMoveTracker.releaseMouseMoves();
      self.fireEvent(BI.SingleSlider.EVENT_CHANGE);
    }, window);
    widget.element.on("mousedown", function (event) {
      if (!widget.isEnabled()) {
        return;
      }

      defaultSize = this.offsetLeft;
      optimizeSize(defaultSize);
      mouseMoveTracker.captureMouseMoves(event);
    });

    function optimizeSize(s) {
      return BI.clamp(s, 0, self._getGrayTrackLength());
    }
  },
  _createTrack: function _createTrack() {
    var self = this;
    var c = this._constant;
    this.grayTrack = BI.createWidget({
      type: "bi.layout",
      cls: "gray-track",
      height: 6
    });
    this.blueTrack = BI.createWidget({
      type: "bi.layout",
      cls: "blue-track bi-high-light-background",
      height: 6
    });

    if (this.options.color) {
      this.blueTrack.element.css({
        "background-color": this.options.color
      });
    }

    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.vertical",
          items: [{
            type: "bi.absolute",
            items: [{
              el: this.grayTrack,
              top: 0,
              left: 0,
              width: "100%"
            }, {
              el: this.blueTrack,
              top: 0,
              left: 0,
              width: "0%"
            }]
          }],
          hgap: 8,
          height: 8
        },
        top: 8,
        left: 0,
        width: "100%"
      }],
      ref: function ref(_ref) {
        self.track = _ref;
      }
    };
  },
  _checkValidation: function _checkValidation(v) {
    return !(BI.isNull(v) || v < this.min || v > this.max);
  },
  _setBlueTrack: function _setBlueTrack(percent) {
    this.blueTrack.element.css({
      width: percent + "%"
    });
  },
  _setSliderPosition: function _setSliderPosition(percent) {
    this.slider.element.css({
      left: percent + "%"
    });
  },
  _setAllPosition: function _setAllPosition(percent) {
    this._setSliderPosition(percent);

    this._setBlueTrack(percent);
  },
  _setVisible: function _setVisible(visible) {
    this.slider.setVisible(visible);
  },
  _getGrayTrackLength: function _getGrayTrackLength() {
    return this.grayTrack.element[0].scrollWidth;
  },
  _getValueByPercent: function _getValueByPercent(percent) {
    var thousandth = BI.parseInt(percent * 10);
    return (this.max - this.min) * thousandth / 1000 + this.min;
  },
  _getPercentByValue: function _getPercentByValue(v) {
    return (v - this.min) * 100 / (this.max - this.min);
  },
  _setEnable: function _setEnable(b) {
    BI.SingleSliderNormal.superclass._setEnable.apply(this, [b]);

    if (b) {
      this.blueTrack.element.removeClass("disabled-blue-track").addClass("blue-track");
    } else {
      this.blueTrack.element.removeClass("blue-track").addClass("disabled-blue-track");
    }
  },
  getValue: function getValue() {
    return this.value;
  },
  setValue: function setValue(v) {
    var value = BI.parseFloat(v);

    if (!isNaN(value)) {
      if (this._checkValidation(value)) {
        this.value = value;
      }

      if (value > this.max) {
        this.value = this.max;
      }

      if (value < this.min) {
        this.value = this.min;
      }
    }
  },
  setMinAndMax: function setMinAndMax(v) {
    var minNumber = BI.parseFloat(v.min);
    var maxNumber = BI.parseFloat(v.max);

    if (!isNaN(minNumber) && !isNaN(maxNumber) && maxNumber > minNumber) {
      this.min = minNumber;
      this.max = maxNumber;
    }
  },
  reset: function reset() {
    this._setVisible(false);

    this.enable = false;
    this.value = "";
    this.min = 0;
    this.max = 0;

    this._setBlueTrack(0);
  },
  populate: function populate() {
    if (!isNaN(this.min) && !isNaN(this.max)) {
      this._setVisible(true);

      this.enable = true;

      if (BI.isNumeric(this.value) || BI.isNotEmptyString(this.value)) {
        this._setAllPosition(this._getPercentByValue(this.value));
      } else {
        this._setAllPosition(100);
      }
    }
  }
});
BI.SingleSliderNormal.EVENT_DRAG = "EVENT_DRAG";
BI.shortcut("bi.single_slider_normal", BI.SingleSliderNormal);

/***/ }),
/* 881 */
/***/ (function(module, exports) {

/**
 * @class BI.SingleTreeCombo
 * @extends BI.Widget
 */
BI.SingleTreeCombo = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig(config) {
    return BI.extend(BI.SingleTreeCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-tree-combo " + (config.simple ? "bi-border-bottom" : "bi-border bi-border-radius"),
      trigger: {},
      height: 24,
      text: "",
      items: [],
      value: "",
      allowClear: false
    });
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.SingleTreeCombo.superclass._init.apply(this, arguments);

    this.trigger = BI.createWidget(BI.extend({
      type: "bi.single_tree_trigger",
      text: o.text,
      defaultText: o.defaultText,
      height: BI.toPix(o.height, 2),
      items: o.items,
      value: o.value,
      allowClear: o.allowClear,
      warningTitle: o.warningTitle
    }, o.trigger));
    this.trigger.on(BI.SingleTreeTrigger.EVENT_CLEAR, function () {
      self._clear();
    });
    this.popup = BI.createWidget({
      type: "bi.single_level_tree",
      items: o.items,
      value: o.value
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      width: BI.toPix(o.width, 2),
      height: BI.toPix(o.height, 2),
      container: o.container,
      element: this,
      adjustLength: 2,
      el: this.trigger,
      popup: {
        el: this.popup
      }
    });
    this.combo.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      self.fireEvent(BI.SingleTreeCombo.EVENT_BEFORE_POPUPVIEW, arguments);
    });
    this.popup.on(BI.SingleTreePopup.EVENT_CHANGE, function () {
      self.setValue(self.popup.getValue());
      self.combo.hideView();
      self.fireEvent(BI.SingleTreeCombo.EVENT_CHANGE);
    });

    if (BI.isKey(o.value)) {
      this._checkError(o.value);
    }
  },
  _checkError: function _checkError(v) {
    if (BI.isNull(v) || BI.isEmptyArray(v) || BI.isEmptyString(v)) {
      this.trigger.options.tipType = "success";
      this.trigger.element.removeClass("error");
      this.element.removeClass("error");
    } else {
      v = BI.isArray(v) ? v : [v];
      var result = BI.find(this.options.items, function (idx, item) {
        return BI.contains(v, item.value);
      });

      if (BI.isNull(result)) {
        this.trigger.setTipType("warning");
        this.element.removeClass("error").addClass("error");
        this.trigger.element.removeClass("error").addClass("error");
      } else {
        this.trigger.setTipType("success");
        this.trigger.element.removeClass("error");
        this.element.removeClass("error");
      }
    }
  },
  _clear: function _clear() {
    this.setValue([]);
  },
  populate: function populate(items) {
    this.combo.populate(items);
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.trigger.setValue(v);
    this.popup.setValue(v);

    this._checkError(v);
  },
  getValue: function getValue() {
    return this.popup.getValue();
  }
});
BI.SingleTreeCombo.EVENT_CHANGE = "EVENT_CHANGE";
BI.SingleTreeCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.single_tree_combo", BI.SingleTreeCombo);

/***/ }),
/* 882 */
/***/ (function(module, exports) {

/**
 * @class BI.SingleTreePopup
 * @extends BI.Pane
 */
BI.SingleTreePopup = BI.inherit(BI.Pane, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleTreePopup.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-level-tree",
      tipText: BI.i18nText("BI-No_Selected_Item"),
      items: [],
      value: ""
    });
  },
  _init: function _init() {
    BI.SingleTreePopup.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.tree = BI.createWidget({
      type: "bi.level_tree",
      expander: {
        isDefaultInit: true
      },
      items: o.items,
      value: o.value,
      chooseType: BI.Selection.Single
    });
    BI.createWidget({
      type: "bi.vertical",
      element: this,
      vgap: 5,
      items: [this.tree]
    });
    this.tree.on(BI.Controller.EVENT_CHANGE, function () {
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
    });
    this.tree.on(BI.LevelTree.EVENT_CHANGE, function () {
      self.fireEvent(BI.SingleTreePopup.EVENT_CHANGE);
    });
    this.check();
  },
  getValue: function getValue() {
    return this.tree.getValue();
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.tree.setValue(v);
  },
  populate: function populate(items) {
    BI.SingleTreePopup.superclass.populate.apply(this, arguments);
    this.tree.populate(items);
  }
});
BI.SingleTreePopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.single_level_tree", BI.SingleTreePopup);

/***/ }),
/* 883 */
/***/ (function(module, exports) {

/**
 * @class BI.SingleTreeTrigger
 * @extends BI.Trigger
 */
BI.SingleTreeTrigger = BI.inherit(BI.Trigger, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SingleTreeTrigger.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-single-tree-trigger",
      height: 24,
      text: "",
      items: [],
      value: "",
      allowClear: false,
      valueFormatter: BI.emptyFn
    });
  },
  _init: function _init() {
    BI.SingleTreeTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.trigger = BI.createWidget({
      type: "bi.select_text_trigger",
      element: this,
      text: o.text,
      defaultText: o.defaultText,
      items: o.items,
      height: o.height,
      warningTitle: o.warningTitle,
      tipType: o.tipType,
      value: o.value,
      allowClear: o.allowClear,
      valueFormatter: o.valueFormatter,
      listeners: [{
        eventName: BI.SelectTextTrigger.EVENT_CLEAR,
        action: function action() {
          self.fireEvent(BI.SingleTreeTrigger.EVENT_CLEAR);
        }
      }]
    });
  },
  _checkTitle: function _checkTitle() {
    var self = this,
        val = this.getValue();
    BI.any(this.options.items, function (i, item) {
      if (BI.contains(val, item.value)) {
        self.trigger.setTitle(item.text || item.value);
        return true;
      }
    });
  },
  setValue: function setValue(v) {
    v = BI.isArray(v) ? v : [v];
    this.options.value = v;
    this.trigger.setValue(v);

    this._checkTitle();
  },
  setTipType: function setTipType(v) {
    this.options.tipType = v;
    this.trigger.setTipType(v);
  },
  getValue: function getValue() {
    return this.options.value || [];
  },
  getTextor: function getTextor() {
    return this.trigger.getTextor();
  },
  populate: function populate(items) {
    this.trigger.populate(items);
  }
});
BI.SingleTreeTrigger.EVENT_CLEAR = "EVENT_CLEAR";
BI.shortcut("bi.single_tree_trigger", BI.SingleTreeTrigger);

/***/ }),
/* 884 */
/***/ (function(module, exports) {

!function () {
  BI.TimePopup = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-date-time-popup",
      height: 68
    },
    render: function render() {
      var self = this,
          o = this.options;
      return {
        type: "bi.vtape",
        items: [{
          el: {
            type: "bi.center_adapt",
            cls: "bi-split-top",
            items: [{
              type: "bi.dynamic_date_time_select",
              value: o.value,
              ref: function ref(_ref) {
                self.timeSelect = _ref;
              }
            }]
          },
          hgap: 10,
          height: 44
        }, {
          el: {
            type: "bi.grid",
            items: [[{
              type: "bi.text_button",
              cls: "bi-high-light bi-split-top",
              shadow: true,
              text: BI.i18nText("BI-Basic_Clears"),
              listeners: [{
                eventName: BI.TextButton.EVENT_CHANGE,
                action: function action() {
                  self.fireEvent(BI.TimePopup.BUTTON_CLEAR_EVENT_CHANGE);
                }
              }]
            }, {
              type: "bi.text_button",
              cls: "bi-split-left bi-split-right bi-high-light bi-split-top",
              shadow: true,
              text: BI.i18nText("BI-Basic_Now"),
              listeners: [{
                eventName: BI.TextButton.EVENT_CHANGE,
                action: function action() {
                  self.fireEvent(BI.TimePopup.BUTTON_NOW_EVENT_CHANGE);
                }
              }]
            }, {
              type: "bi.text_button",
              cls: "bi-high-light bi-split-top",
              shadow: true,
              text: BI.i18nText("BI-Basic_OK"),
              listeners: [{
                eventName: BI.TextButton.EVENT_CHANGE,
                action: function action() {
                  self.fireEvent(BI.TimePopup.BUTTON_OK_EVENT_CHANGE);
                }
              }]
            }]]
          },
          height: 24
        }]
      };
    },
    setValue: function setValue(value) {
      if (this._checkValueValid(value)) {
        this.timeSelect.setValue();
      } else {
        this.timeSelect.setValue({
          hour: value.hour,
          minute: value.minute,
          second: value.second
        });
      }
    },
    getValue: function getValue() {
      return this.timeSelect.getValue();
    },
    _checkValueValid: function _checkValueValid(value) {
      return BI.isNull(value) || BI.isEmptyObject(value) || BI.isEmptyString(value);
    }
  });
  BI.TimePopup.BUTTON_OK_EVENT_CHANGE = "BUTTON_OK_EVENT_CHANGE";
  BI.TimePopup.BUTTON_CLEAR_EVENT_CHANGE = "BUTTON_CLEAR_EVENT_CHANGE";
  BI.TimePopup.BUTTON_NOW_EVENT_CHANGE = "BUTTON_NOW_EVENT_CHANGE";
  BI.TimePopup.CALENDAR_EVENT_CHANGE = "CALENDAR_EVENT_CHANGE";
  BI.shortcut("bi.time_popup", BI.TimePopup);
}();

/***/ }),
/* 885 */
/***/ (function(module, exports) {

/**
 * 时间选择
 * qcc
 * 2019/2/28
 */
!function () {
  BI.TimeCombo = BI.inherit(BI.Single, {
    constants: {
      popupHeight: 80,
      popupWidth: 240,
      comboAdjustHeight: 1,
      border: 1,
      iconWidth: 24
    },
    props: {
      baseCls: "bi-time-combo",
      height: 24,
      format: "",
      allowEdit: false,
      isNeedAdjustHeight: false,
      isNeedAdjustWidth: false
    },
    _init: function _init() {
      var o = this.options;

      BI.TimeCombo.superclass._init.apply(this, arguments);
    },
    render: function render() {
      var self = this,
          opts = this.options;
      this.storeTriggerValue = "";
      this.storeValue = opts.value;
      var popup = {
        type: "bi.time_popup",
        value: opts.value,
        listeners: [{
          eventName: BI.TimePopup.BUTTON_CLEAR_EVENT_CHANGE,
          action: function action() {
            self.setValue();
            self.hidePopupView();
            self.fireEvent(BI.TimeCombo.EVENT_CONFIRM);
          }
        }, {
          eventName: BI.TimePopup.BUTTON_OK_EVENT_CHANGE,
          action: function action() {
            self.setValue(self.popup.getValue());
            self.hidePopupView();
            self.fireEvent(BI.TimeCombo.EVENT_CONFIRM);
          }
        }, {
          eventName: BI.TimePopup.BUTTON_NOW_EVENT_CHANGE,
          action: function action() {
            self._setNowTime();
          }
        }],
        ref: function ref(_ref) {
          self.popup = _ref;
        }
      };
      return {
        type: "bi.absolute",
        items: [{
          el: {
            type: "bi.combo",
            cls: "bi-border bi-border-radius",
            container: opts.container,
            toggle: false,
            isNeedAdjustHeight: opts.isNeedAdjustHeight,
            isNeedAdjustWidth: opts.isNeedAdjustWidth,
            el: {
              type: "bi.horizontal_fill",
              columnSize: ["fill", this.constants.iconWidth],
              height: BI.toPix(opts.height, 2),
              items: [{
                type: "bi.time_trigger",
                height: BI.toPix(opts.height, 2),
                allowEdit: opts.allowEdit,
                watermark: opts.watermark,
                format: opts.format,
                value: opts.value,
                ref: function ref(_ref) {
                  self.trigger = _ref;
                },
                listeners: [{
                  eventName: "EVENT_KEY_DOWN",
                  action: function action() {
                    if (self.combo.isViewVisible()) {
                      self.combo.hideView();
                    }

                    self.fireEvent(BI.TimeCombo.EVENT_KEY_DOWN, arguments);
                  }
                }, {
                  eventName: "EVENT_STOP",
                  action: function action() {
                    if (!self.combo.isViewVisible()) {
                      self.combo.showView();
                    }
                  }
                }, {
                  eventName: "EVENT_FOCUS",
                  action: function action() {
                    self.storeTriggerValue = self.trigger.getKey();

                    if (!self.combo.isViewVisible()) {
                      self.combo.showView();
                    }

                    self.fireEvent("EVENT_FOCUS");
                  }
                }, {
                  eventName: "EVENT_BLUR",
                  action: function action() {
                    self.fireEvent("EVENT_BLUR");
                  }
                }, {
                  eventName: "EVENT_ERROR",
                  action: function action() {
                    var date = BI.getDate();
                    self.storeValue = {
                      hour: date.getHours(),
                      minute: date.getMinutes(),
                      second: date.getSeconds()
                    };
                    self.fireEvent("EVENT_ERROR");
                  }
                }, {
                  eventName: "EVENT_VALID",
                  action: function action() {
                    self.fireEvent("EVENT_VALID");
                  }
                }, {
                  eventName: "EVENT_CHANGE",
                  action: function action() {
                    self.fireEvent("EVENT_CHANGE");
                  }
                }, {
                  eventName: "EVENT_CONFIRM",
                  action: function action() {
                    if (self.combo.isViewVisible()) {
                      return;
                    }

                    var dateStore = self.storeTriggerValue;
                    var dateObj = self.trigger.getKey();

                    if (BI.isNotEmptyString(dateObj) && !BI.isEqual(dateObj, dateStore)) {
                      self.storeValue = self.trigger.getValue();
                      self.setValue(self.trigger.getValue());
                    } else if (BI.isEmptyString(dateObj)) {
                      self.storeValue = null;
                      self.trigger.setValue();
                    }

                    self.fireEvent("EVENT_CONFIRM");
                  }
                }]
              }, {
                el: {
                  type: "bi.icon_button",
                  cls: "bi-trigger-icon-button time-font",
                  width: this.constants.iconWidth,
                  listeners: [{
                    eventName: BI.IconButton.EVENT_CHANGE,
                    action: function action() {
                      if (self.combo.isViewVisible()) {// self.combo.hideView();
                      } else {
                        self.combo.showView();
                      }
                    }
                  }],
                  ref: function ref(_ref) {
                    self.triggerBtn = _ref;
                  }
                }
              }]
            },
            adjustLength: this.constants.comboAdjustHeight,
            popup: {
              el: popup,
              width: opts.isNeedAdjustWidth ? opts.width : this.constants.popupWidth,
              stopPropagation: false
            },
            hideChecker: function hideChecker(e) {
              return self.triggerBtn.element.find(e.target).length === 0;
            },
            listeners: [{
              eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
              action: function action() {
                self.popup.setValue(self.storeValue);
                self.fireEvent(BI.TimeCombo.EVENT_BEFORE_POPUPVIEW);
              }
            }],
            ref: function ref(_ref) {
              self.combo = _ref;
            }
          },
          top: 0,
          left: 0,
          right: 0,
          bottom: 0
        }]
      };
    },
    setValue: function setValue(v) {
      this.storeValue = v;
      this.trigger.setValue(v);
    },
    getValue: function getValue() {
      return this.storeValue;
    },
    hidePopupView: function hidePopupView() {
      this.combo.hideView();
    },
    _setNowTime: function _setNowTime() {
      var date = BI.getDate();
      var nowTome = {
        hour: date.getHours(),
        minute: date.getMinutes(),
        second: date.getSeconds()
      };
      this.setValue(nowTome);
      this.hidePopupView();
      this.fireEvent(BI.TimeCombo.EVENT_CONFIRM);
    },
    focus: function focus() {
      this.trigger.focus();
    },
    blur: function blur() {
      this.trigger.blur();
    },
    setWaterMark: function setWaterMark(v) {
      this.trigger.setWaterMark(v);
    }
  });
  BI.TimeCombo.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
  BI.TimeCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
  BI.TimeCombo.EVENT_CHANGE = "EVENT_CHANGE";
  BI.TimeCombo.EVENT_VALID = "EVENT_VALID";
  BI.TimeCombo.EVENT_ERROR = "EVENT_ERROR";
  BI.TimeCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
  BI.shortcut("bi.time_combo", BI.TimeCombo);
}();

/***/ }),
/* 886 */
/***/ (function(module, exports) {

!function () {
  BI.TimeTrigger = BI.inherit(BI.Trigger, {
    _const: {
      COMPARE_FORMAT: "%H:%M:%S",
      COMPLETE_COMPARE_FORMAT: "%Y-%M-%d %H:%M:%S %P",
      FORMAT_ARRAY: ["%H:%M:%S", // HH:mm:ss
      "%I:%M:%S", // hh:mm:ss
      "%l:%M:%S", // h:mm:ss
      "%k:%M:%S", // H:mm:ss
      "%l:%M:%S %p", // h:mm:ss a
      "%l:%M:%S %P", // h:mm:ss a
      "%H:%M:%S %p", // HH:mm:ss a
      "%H:%M:%S %P", // HH:mm:ss a
      "%l:%M", // h:mm
      "%k:%M", // H:mm
      "%I:%M", // hh:mm
      "%H:%M", // HH:mm
      "%M:%S" // mm:ss
      ],
      DEFAULT_DATE_STRING: "2000-01-01",
      DEFAULT_HOUR: "00"
    },
    props: function props() {
      return {
        extraCls: "bi-time-trigger",
        value: {},
        format: "",
        allowEdit: false,
        watermark: BI.i18nText("BI-Basic_Unrestricted")
      };
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.storeTriggerValue = "";
      this.storeValue = o.value;
      return {
        type: "bi.absolute",
        items: [{
          el: {
            type: "bi.sign_editor",
            height: o.height,
            validationChecker: function validationChecker(v) {
              return self._dateCheck(v);
            },
            quitChecker: function quitChecker() {
              return false;
            },
            ref: function ref(_ref) {
              self.editor = _ref;
            },
            value: this._formatValue(o.value),
            hgap: 4,
            allowBlank: true,
            watermark: o.watermark,
            title: BI.bind(this._getTitle, this),
            listeners: [{
              eventName: "EVENT_KEY_DOWN",
              action: function action() {
                self.fireEvent("EVENT_KEY_DOWN", arguments);
              }
            }, {
              eventName: "EVENT_FOCUS",
              action: function action() {
                self.storeTriggerValue = self.getKey();
                self.fireEvent("EVENT_FOCUS");
              }
            }, {
              eventName: "EVENT_BLUR",
              action: function action() {
                self.fireEvent("EVENT_BLUR");
              }
            }, {
              eventName: "EVENT_STOP",
              action: function action() {
                self.fireEvent("EVENT_STOP");
              }
            }, {
              eventName: "EVENT_VALID",
              action: function action() {
                self.fireEvent("EVENT_VALID");
              }
            }, {
              eventName: "EVENT_ERROR",
              action: function action() {
                self.fireEvent("EVENT_ERROR");
              }
            }, {
              eventName: "EVENT_CONFIRM",
              action: function action() {
                var value = self.editor.getValue();

                if (BI.isNotNull(value)) {
                  self.editor.setState(value);
                }

                if (BI.isNotEmptyString(value) && !BI.isEqual(self.storeTriggerValue, self.getKey())) {
                  var date = value.match(/\d+/g);
                  self.storeValue = {
                    hour: date[0] | 0,
                    minute: date[1] | 0,
                    second: date[2] | 0
                  };
                }

                self.fireEvent("EVENT_CONFIRM");
              }
            }, {
              eventName: "EVENT_START",
              action: function action() {
                self.fireEvent("EVENT_START");
              }
            }, {
              eventName: "EVENT_CHANGE",
              action: function action() {
                self.fireEvent("EVENT_CHANGE");
              }
            }]
          },
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }, {
          el: {
            type: "bi.text",
            invisible: o.allowEdit,
            cls: "show-text",
            title: BI.bind(this._getTitle, this),
            hgap: 4
          },
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }]
      };
    },
    _dateCheck: function _dateCheck(date) {
      var c = this._const;
      var self = this;
      return BI.any(c.FORMAT_ARRAY, function (idx, format) {
        return BI.print(BI.parseDateTime(c.DEFAULT_DATE_STRING + " " + self._getCompleteHMS(date, format), c.COMPLETE_COMPARE_FORMAT), format) === date;
      });
    },
    _getCompleteHMS: function _getCompleteHMS(str, format) {
      var c = this._const;

      switch (format) {
        case "%M:%S":
          str = c.DEFAULT_HOUR + ":" + str;
          break;

        default:
          break;
      }

      return str;
    },
    _getTitle: function _getTitle() {
      var storeValue = this.storeValue || {};

      if (BI.isEmptyObject(storeValue)) {
        return this.options.watermark;
      }

      var date = BI.getDate();
      return BI.print(BI.getDate(date.getFullYear(), 0, 1, storeValue.hour, storeValue.minute, storeValue.second), this._getFormatString());
    },
    _getFormatString: function _getFormatString() {
      return this.options.format || this._const.COMPARE_FORMAT;
    },
    _formatValue: function _formatValue(v) {
      var now = BI.getDate();
      return BI.isNotEmptyObject(v) ? BI.print(BI.getDate(now.getFullYear(), now.getMonth(), now.getDay(), v.hour, v.minute, v.second), this._getFormatString()) : "";
    },
    getKey: function getKey() {
      return this.editor.getValue();
    },
    setValue: function setValue(v) {
      this.storeValue = v;
      this.editor.setValue(this._formatValue(v));
    },
    getValue: function getValue() {
      return this.storeValue;
    },
    focus: function focus() {
      this.editor.focus();
    },
    blur: function blur() {
      this.editor.blur();
    },
    setWaterMark: function setWaterMark(v) {
      this.editor.setWaterMark(v);
    }
  });
  BI.shortcut("bi.time_trigger", BI.TimeTrigger);
}();

/***/ }),
/* 887 */
/***/ (function(module, exports) {

/**
 * Created by Baron on 2015/10/19.
 */
BI.DateInterval = BI.inherit(BI.Single, {
  constants: {
    height: 24,
    width: 24,
    lgap: 15,
    offset: 0,
    timeErrorCls: "time-error"
  },
  _defaultConfig: function _defaultConfig() {
    var conf = BI.DateInterval.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-date-interval",
      minDate: "1900-01-01",
      maxDate: "2099-12-31",
      height: 24,
      supportDynamic: true
    });
  },
  render: function render() {
    var _o$watermark, _o$watermark2;

    var self = this,
        o = this.options;
    o.value = o.value || {};
    this.left = this._createCombo(o.value.start, (_o$watermark = o.watermark) === null || _o$watermark === void 0 ? void 0 : _o$watermark.start);
    this.right = this._createCombo(o.value.end, (_o$watermark2 = o.watermark) === null || _o$watermark2 === void 0 ? void 0 : _o$watermark2.end);
    return {
      type: "bi.horizontal_fill",
      columnSize: ["fill", "", "fill"],
      items: [{
        el: self.left
      }, {
        el: {
          type: "bi.label",
          height: o.height,
          hgap: 5,
          text: "-",
          ref: function ref(_ref) {
            self.label = _ref;
          }
        }
      }, {
        el: self.right
      }]
    };
  },
  _createCombo: function _createCombo(v, watermark) {
    var self = this,
        o = this.options;
    var combo = BI.createWidget({
      type: "bi.dynamic_date_combo",
      supportDynamic: o.supportDynamic,
      minDate: o.minDate,
      maxDate: o.maxDate,
      simple: o.simple,
      behaviors: o.behaviors,
      watermark: watermark,
      value: v,
      height: o.height,
      listeners: [{
        eventName: BI.DynamicDateCombo.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.DateInterval.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW);
        }
      }]
    });
    combo.on(BI.DynamicDateCombo.EVENT_ERROR, function () {
      self._clearTitle();

      BI.Bubbles.hide("error");
      self.element.removeClass(self.constants.timeErrorCls);
      self.fireEvent(BI.DateInterval.EVENT_ERROR);
    });
    combo.on(BI.DynamicDateCombo.EVENT_VALID, function () {
      BI.Bubbles.hide("error");
      var smallDate = self.left.getKey(),
          bigDate = self.right.getKey();

      if (self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
        self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

        self.element.addClass(self.constants.timeErrorCls);
        BI.Bubbles.show("error", BI.i18nText("BI-Time_Interval_Error_Text"), self, {
          offsetStyle: "center"
        });
        self.fireEvent(BI.DateInterval.EVENT_ERROR);
      } else {
        self._clearTitle();

        self.element.removeClass(self.constants.timeErrorCls);
      }
    });
    combo.on(BI.DynamicDateCombo.EVENT_FOCUS, function () {
      BI.Bubbles.hide("error");
      var smallDate = self.left.getKey(),
          bigDate = self.right.getKey();

      if (self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
        self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

        self.element.addClass(self.constants.timeErrorCls);
        BI.Bubbles.show("error", BI.i18nText("BI-Time_Interval_Error_Text"), self, {
          offsetStyle: "center"
        });
        self.fireEvent(BI.DateInterval.EVENT_ERROR);
      } else {
        self._clearTitle();

        self.element.removeClass(self.constants.timeErrorCls);
      }
    }); // combo.on(BI.DynamicDateCombo.EVENT_BEFORE_POPUPVIEW, function () {
    //     self.left.hidePopupView();
    //     self.right.hidePopupView();
    // });

    combo.on(BI.DynamicDateCombo.EVENT_CONFIRM, function () {
      BI.Bubbles.hide("error");
      var smallDate = self.left.getKey(),
          bigDate = self.right.getKey();

      if (self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
        self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

        self.element.addClass(self.constants.timeErrorCls);
        self.fireEvent(BI.DateInterval.EVENT_ERROR);
      } else {
        self._clearTitle();

        self.element.removeClass(self.constants.timeErrorCls);
        self.fireEvent(BI.DateInterval.EVENT_CHANGE);
      }
    });
    return combo;
  },
  _dateCheck: function _dateCheck(date) {
    return BI.print(BI.parseDateTime(date, "%Y-%x-%d"), "%Y-%x-%d") === date || BI.print(BI.parseDateTime(date, "%Y-%X-%d"), "%Y-%X-%d") === date || BI.print(BI.parseDateTime(date, "%Y-%x-%e"), "%Y-%x-%e") === date || BI.print(BI.parseDateTime(date, "%Y-%X-%e"), "%Y-%X-%e") === date;
  },
  _checkVoid: function _checkVoid(obj) {
    var o = this.options;
    return !BI.checkDateVoid(obj.year, obj.month, obj.day, o.minDate, o.maxDate)[0];
  },
  _check: function _check(smallDate, bigDate) {
    var smallObj = smallDate.match(/\d+/g),
        bigObj = bigDate.match(/\d+/g);
    return this._dateCheck(smallDate) && BI.checkDateLegal(smallDate) && this._checkVoid({
      year: smallObj[0],
      month: smallObj[1],
      day: smallObj[2]
    }) && this._dateCheck(bigDate) && BI.checkDateLegal(bigDate) && this._checkVoid({
      year: bigObj[0],
      month: bigObj[1],
      day: bigObj[2]
    });
  },
  _compare: function _compare(smallDate, bigDate) {
    smallDate = BI.print(BI.parseDateTime(smallDate, "%Y-%X-%d"), "%Y-%X-%d");
    bigDate = BI.print(BI.parseDateTime(bigDate, "%Y-%X-%d"), "%Y-%X-%d");
    return BI.isNotNull(smallDate) && BI.isNotNull(bigDate) && smallDate > bigDate;
  },
  _setTitle: function _setTitle(v) {
    this.left.setTitle(v);
    this.right.setTitle(v);
    this.label.setTitle(v);
  },
  _clearTitle: function _clearTitle() {
    this.left.setTitle("");
    this.right.setTitle("");
    this.label.setTitle("");
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;
    o.minDate = minDate;
    this.left.setMinDate(minDate);
    this.right.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;
    o.maxDate = maxDate;
    this.left.setMaxDate(maxDate);
    this.right.setMaxDate(maxDate);
  },
  setValue: function setValue(date) {
    date = date || {};
    this.left.setValue(date.start);
    this.right.setValue(date.end);
  },
  getValue: function getValue() {
    return {
      start: this.left.getValue(),
      end: this.right.getValue()
    };
  }
});
BI.DateInterval.EVENT_VALID = "EVENT_VALID";
BI.DateInterval.EVENT_ERROR = "EVENT_ERROR";
BI.DateInterval.EVENT_CHANGE = "EVENT_CHANGE";
BI.DateInterval.EVENT_BEFORE_YEAR_MONTH_POPUPVIEW = "EVENT_BEFORE_YEAR_MONTH_POPUPVIEW";
BI.shortcut("bi.date_interval", BI.DateInterval);

/***/ }),
/* 888 */
/***/ (function(module, exports) {

/**
 * Created by Baron on 2015/10/19.
 */
BI.TimeInterval = BI.inherit(BI.Single, {
  constants: {
    height: 24,
    width: 24,
    lgap: 15,
    offset: 0,
    timeErrorCls: "time-error"
  },
  _defaultConfig: function _defaultConfig() {
    var conf = BI.TimeInterval.superclass._defaultConfig.apply(this, arguments);

    return BI.extend(conf, {
      extraCls: "bi-time-interval",
      minDate: "1900-01-01",
      maxDate: "2099-12-31",
      height: 24,
      supportDynamic: true
    });
  },
  render: function render() {
    var _o$watermark, _o$watermark2;

    var self = this,
        o = this.options;
    o.value = o.value || {};
    this.left = this._createCombo(o.value.start, (_o$watermark = o.watermark) === null || _o$watermark === void 0 ? void 0 : _o$watermark.start);
    this.right = this._createCombo(o.value.end, (_o$watermark2 = o.watermark) === null || _o$watermark2 === void 0 ? void 0 : _o$watermark2.end);
    return {
      type: "bi.horizontal_fill",
      columnSize: ["fill", "", "fill"],
      items: [{
        el: self.left
      }, {
        el: {
          type: "bi.label",
          height: o.height,
          hgap: 5,
          text: "-",
          ref: function ref(_ref) {
            self.label = _ref;
          }
        }
      }, {
        el: self.right
      }]
    };
  },
  _createCombo: function _createCombo(v, watermark) {
    var self = this,
        o = this.options;
    var combo = BI.createWidget({
      type: "bi.dynamic_date_time_combo",
      simple: o.simple,
      supportDynamic: o.supportDynamic,
      minDate: o.minDate,
      maxDate: o.maxDate,
      behaviors: o.behaviors,
      watermark: watermark,
      value: v,
      height: o.height
    });
    combo.on(BI.DynamicDateTimeCombo.EVENT_ERROR, function () {
      self._clearTitle();

      BI.Bubbles.hide("error");
      self.element.removeClass(self.constants.timeErrorCls);
      self.fireEvent(BI.TimeInterval.EVENT_ERROR);
    });
    combo.on(BI.DynamicDateTimeCombo.EVENT_VALID, function () {
      BI.Bubbles.hide("error");
      var smallDate = self.left.getKey(),
          bigDate = self.right.getKey();

      if (self.left.isValid() && self.right.isValid() && self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
        self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

        self.element.addClass(self.constants.timeErrorCls);
        BI.Bubbles.show("error", BI.i18nText("BI-Time_Interval_Error_Text"), self, {
          offsetStyle: "center"
        });
        self.fireEvent(BI.TimeInterval.EVENT_ERROR);
      } else {
        self._clearTitle();

        self.element.removeClass(self.constants.timeErrorCls);
      }
    });
    combo.on(BI.DynamicDateTimeCombo.EVENT_FOCUS, function () {
      BI.Bubbles.hide("error");
      var smallDate = self.left.getKey(),
          bigDate = self.right.getKey();

      if (self.left.isValid() && self.right.isValid() && self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
        self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

        self.element.addClass(self.constants.timeErrorCls);
        BI.Bubbles.show("error", BI.i18nText("BI-Time_Interval_Error_Text"), self, {
          offsetStyle: "center"
        });
        self.fireEvent(BI.TimeInterval.EVENT_ERROR);
      } else {
        self._clearTitle();

        self.element.removeClass(self.constants.timeErrorCls);
      }
    }); // 不知道干啥的,先注释掉
    // combo.on(BI.DynamicDateTimeCombo.EVENT_BEFORE_POPUPVIEW, function () {
    //     self.left.hidePopupView();
    //     self.right.hidePopupView();
    // });

    combo.on(BI.DynamicDateTimeCombo.EVENT_CONFIRM, function () {
      BI.Bubbles.hide("error");
      var smallDate = self.left.getKey(),
          bigDate = self.right.getKey();

      if (self.left.isValid() && self.right.isValid() && self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
        self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

        self.element.addClass(self.constants.timeErrorCls);
        self.fireEvent(BI.TimeInterval.EVENT_ERROR);
      } else {
        self._clearTitle();

        self.element.removeClass(self.constants.timeErrorCls);
        self.fireEvent(BI.TimeInterval.EVENT_CHANGE);
      }
    });
    return combo;
  },
  _dateCheck: function _dateCheck(date) {
    return BI.print(BI.parseDateTime(date, "%Y-%x-%d %H:%M:%S"), "%Y-%x-%d %H:%M:%S") === date || BI.print(BI.parseDateTime(date, "%Y-%X-%d %H:%M:%S"), "%Y-%X-%d %H:%M:%S") === date || BI.print(BI.parseDateTime(date, "%Y-%x-%e %H:%M:%S"), "%Y-%x-%e %H:%M:%S") === date || BI.print(BI.parseDateTime(date, "%Y-%X-%e %H:%M:%S"), "%Y-%X-%e %H:%M:%S") === date;
  },
  _checkVoid: function _checkVoid(obj) {
    var o = this.options;
    return !BI.checkDateVoid(obj.year, obj.month, obj.day, o.minDate, o.maxDate)[0];
  },
  _check: function _check(smallDate, bigDate) {
    var smallObj = smallDate.match(/\d+/g),
        bigObj = bigDate.match(/\d+/g);
    return this._dateCheck(smallDate) && BI.checkDateLegal(smallDate) && this._checkVoid({
      year: smallObj[0],
      month: smallObj[1],
      day: smallObj[2]
    }) && this._dateCheck(bigDate) && BI.checkDateLegal(bigDate) && this._checkVoid({
      year: bigObj[0],
      month: bigObj[1],
      day: bigObj[2]
    });
  },
  _compare: function _compare(smallDate, bigDate) {
    smallDate = BI.print(BI.parseDateTime(smallDate, "%Y-%X-%d %H:%M:%S"), "%Y-%X-%d %H:%M:%S");
    bigDate = BI.print(BI.parseDateTime(bigDate, "%Y-%X-%d %H:%M:%S"), "%Y-%X-%d %H:%M:%S");
    return BI.isNotNull(smallDate) && BI.isNotNull(bigDate) && smallDate > bigDate;
  },
  _setTitle: function _setTitle(v) {
    this.left.setTitle(v);
    this.right.setTitle(v);
    this.label.setTitle(v);
  },
  _clearTitle: function _clearTitle() {
    this.left.setTitle("");
    this.right.setTitle("");
    this.label.setTitle("");
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;
    o.minDate = minDate;
    this.left.setMinDate(minDate);
    this.right.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;
    o.maxDate = maxDate;
    this.left.setMaxDate(maxDate);
    this.right.setMaxDate(maxDate);
  },
  setValue: function setValue(date) {
    date = date || {};
    this.left.setValue(date.start);
    this.right.setValue(date.end);
  },
  getValue: function getValue() {
    return {
      start: this.left.getValue(),
      end: this.right.getValue()
    };
  }
});
BI.TimeInterval.EVENT_VALID = "EVENT_VALID";
BI.TimeInterval.EVENT_ERROR = "EVENT_ERROR";
BI.TimeInterval.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.time_interval", BI.TimeInterval);

/***/ }),
/* 889 */
/***/ (function(module, exports) {

/**
 * 时间区间
 * qcc
 * 2019/2/28
 */
!function () {
  BI.TimePeriods = BI.inherit(BI.Single, {
    constants: {
      height: 24,
      width: 24,
      hgap: 15,
      offset: -15
    },
    props: {
      extraCls: "bi-time-interval",
      value: {}
    },
    render: function render() {
      var _o$watermark, _o$watermark2;

      var self = this,
          o = this.options;
      return {
        type: "bi.horizontal_fill",
        columnSize: ["fill", "", "fill"],
        items: [{
          el: BI.extend({
            ref: function ref(_ref) {
              self.left = _ref;
            }
          }, this._createCombo(o.value.start, (_o$watermark = o.watermark) === null || _o$watermark === void 0 ? void 0 : _o$watermark.start))
        }, {
          el: {
            type: "bi.label",
            height: o.height,
            hgap: 5,
            text: "-",
            ref: function ref(_ref) {
              self.label = _ref;
            }
          }
        }, {
          el: BI.extend({
            ref: function ref(_ref) {
              self.right = _ref;
            }
          }, this._createCombo(o.value.end, (_o$watermark2 = o.watermark) === null || _o$watermark2 === void 0 ? void 0 : _o$watermark2.end))
        }]
      };
    },
    _createCombo: function _createCombo(v, watermark) {
      var self = this;
      var o = this.options;
      return {
        type: "bi.time_combo",
        value: v,
        height: o.height,
        watermark: watermark,
        listeners: [{
          eventName: BI.TimeCombo.EVENT_BEFORE_POPUPVIEW,
          action: function action() {
            self.left.hidePopupView();
            self.right.hidePopupView();
          }
        }, {
          eventName: BI.TimeCombo.EVENT_CHANGE,
          action: function action() {
            self.fireEvent(BI.TimePeriods.EVENT_CHANGE);
          }
        }, {
          eventName: BI.TimeCombo.EVENT_CONFIRM,
          action: function action() {
            self.fireEvent(BI.TimePeriods.EVENT_CONFIRM);
          }
        }]
      };
    },
    setValue: function setValue(date) {
      date = date || {};
      this.left.setValue(date.start);
      this.right.setValue(date.end);
    },
    getValue: function getValue() {
      return {
        start: this.left.getValue(),
        end: this.right.getValue()
      };
    }
  });
  BI.TimePeriods.EVENT_CONFIRM = "EVENT_CONFIRM";
  BI.TimePeriods.EVENT_CHANGE = "EVENT_CHANGE";
  BI.shortcut("bi.time_periods", BI.TimePeriods);
}();

/***/ }),
/* 890 */
/***/ (function(module, exports) {

/**
 * 年份展示面板
 *
 * Created by GUY on 2015/9/2.
 * @class BI.YearCard
 * @extends BI.Trigger
 */
BI.DynamicYearCard = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-year-card"
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.vertical",
      ref: function ref(_ref) {
        self.wrapper = _ref;
      },
      items: [{
        type: "bi.label",
        text: BI.i18nText("BI-Multi_Date_Relative_Current_Time"),
        textAlign: "left",
        height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
      }, {
        type: "bi.dynamic_date_param_item",
        ref: function ref() {
          self.item = this;
        },
        listeners: [{
          eventName: "EVENT_CHANGE",
          action: function action() {
            self.fireEvent("EVENT_CHANGE");
          }
        }, {
          eventName: "EVENT_INPUT_CHANGE",
          action: function action() {
            BI.Bubbles.hide("dynamic-year-error");
          }
        }]
      }],
      vgap: 10,
      hgap: 10
    };
  },
  _checkDate: function _checkDate(obj) {
    var o = this.options;
    var date = BI.DynamicDateHelper.getCalculation(this._getValue());
    return !BI.checkDateVoid(date.getFullYear(), date.getMonth() + 1, date.getDate(), o.min, o.max)[0];
  },
  _createValue: function _createValue(type, v) {
    return {
      dateType: type,
      value: Math.abs(v),
      offset: v > 0 ? 1 : 0
    };
  },
  _getErrorText: function _getErrorText() {
    var o = this.options;
    var start = BI.parseDateTime(o.min, "%Y-%X-%d");
    var end = BI.parseDateTime(o.max, "%Y-%X-%d");
    return BI.i18nText("BI-Basic_Year_Range_Error", start.getFullYear(), end.getFullYear());
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
    }
  },
  setValue: function setValue(v) {
    v = v || {
      year: 0
    };
    this.item.setValue(this._createValue(BI.DynamicDateCard.TYPE.YEAR, v.year));
  },
  _getValue: function _getValue() {
    var value = this.item.getValue();
    return {
      year: value.offset === 0 ? -value.value : +value.value
    };
  },
  getInputValue: function getInputValue() {
    return this._getValue();
  },
  getValue: function getValue() {
    return this.checkValidation() ? this._getValue() : {};
  },
  checkValidation: function checkValidation(show) {
    var errorText;
    var invalid = !this.item.checkValidation();

    if (invalid) {
      errorText = BI.i18nText("BI-Please_Input_Natural_Number");
    } else {
      invalid = !this._checkDate(this._getValue());
      errorText = this._getErrorText();
    }

    invalid && show && BI.Bubbles.show("dynamic-year-error", errorText, this.item);
    return !invalid;
  }
});
BI.DynamicYearCard.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.dynamic_year_card", BI.DynamicYearCard);

/***/ }),
/* 891 */
/***/ (function(module, exports) {

/**
 * 年份展示面板
 *
 * Created by GUY on 2015/9/2.
 * @class BI.StaticYearCard
 * @extends BI.Trigger
 */
BI.StaticYearCard = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.StaticYearCard.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-year-card",
      behaviors: {},
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31" // 最大日期

    });
  },
  _createYearCalendar: function _createYearCalendar(v) {
    var o = this.options,
        y = this._year;
    var calendar = BI.createWidget({
      type: "bi.year_calendar",
      behaviors: o.behaviors,
      min: o.min,
      max: o.max,
      logic: {
        dynamic: true
      },
      year: y + v * 12
    });
    calendar.setValue(this._year);
    return calendar;
  },
  _init: function _init() {
    BI.StaticYearCard.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.selectedYear = this._year = BI.getDate().getFullYear();
    this.backBtn = BI.createWidget({
      type: "bi.icon_button",
      cls: "pre-page-h-font",
      width: 25,
      height: 25,
      value: -1,
      listeners: [{
        eventName: BI.IconButton.EVENT_CHANGE,
        action: function action() {
          self.navigation.setSelect(self.navigation.getSelect() - 1);

          self._checkLeftValid();

          self._checkRightValid();
        }
      }]
    });
    this.preBtn = BI.createWidget({
      type: "bi.icon_button",
      cls: "next-page-h-font",
      width: 25,
      height: 25,
      value: 1,
      listeners: [{
        eventName: BI.IconButton.EVENT_CHANGE,
        action: function action() {
          self.navigation.setSelect(self.navigation.getSelect() + 1);

          self._checkLeftValid();

          self._checkRightValid();
        }
      }]
    });
    this.navigation = BI.createWidget({
      type: "bi.navigation",
      direction: "top",
      element: this,
      single: true,
      logic: {
        dynamic: true
      },
      tab: {
        type: "bi.htape",
        cls: "bi-split-top bi-split-bottom",
        height: 30,
        items: [{
          el: {
            type: "bi.center_adapt",
            items: [self.backBtn]
          },
          width: 25
        }, {
          type: "bi.layout"
        }, {
          el: {
            type: "bi.center_adapt",
            items: [self.preBtn]
          },
          width: 25
        }]
      },
      cardCreator: BI.bind(this._createYearCalendar, this),
      afterCardShow: function afterCardShow() {
        this.setValue(self.selectedYear); // var calendar = this.getSelectedCard();
        // self.backBtn.setEnable(!calendar.isFrontYear());
        // self.preBtn.setEnable(!calendar.isFinalYear());
      }
    });
    this.navigation.on(BI.Navigation.EVENT_CHANGE, function () {
      self.selectedYear = this.getValue();
      self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
      self.fireEvent(BI.StaticYearCard.EVENT_CHANGE, self.selectedYear);
    });

    if (BI.isKey(o.value)) {
      this.setValue(o.value);
    }
  },
  _checkLeftValid: function _checkLeftValid() {
    var o = this.options;
    var valid = true;
    this.backBtn.setEnable(valid);
    return valid;
  },
  _checkRightValid: function _checkRightValid() {
    var o = this.options;
    var valid = true;
    this.preBtn.setEnable(valid);
    return valid;
  },
  _checkMin: function _checkMin() {
    var o = this.options;
    BI.each(this.navigation.getAllCard(), function (idx, calendar) {
      calendar.setMinDate(o.min);
    });
  },
  _checkMax: function _checkMax() {
    var o = this.options;
    BI.each(this.navigation.getAllCard(), function (idx, calendar) {
      calendar.setMaxDate(o.max);
    });
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;

      this._checkLeftValid();

      this._checkRightValid();

      this._checkMin();
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;

      this._checkLeftValid();

      this._checkRightValid();

      this._checkMax();
    }
  },
  getValue: function getValue() {
    return {
      year: this.selectedYear
    };
  },
  setValue: function setValue(obj) {
    var o = this.options;
    obj = obj || {};
    var v = obj.year;

    if (BI.checkDateVoid(v, 1, 1, o.min, o.max)[0]) {
      v = BI.getDate().getFullYear();
      this.selectedYear = "";
      this.navigation.setSelect(BI.YearCalendar.getPageByYear(v));
      this.navigation.setValue("");
    } else {
      this.selectedYear = BI.parseInt(v);
      this.navigation.setSelect(BI.YearCalendar.getPageByYear(v));
      this.navigation.setValue(this.selectedYear);
    }

    this._checkLeftValid();

    this._checkRightValid();
  }
});
BI.StaticYearCard.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.static_year_card", BI.StaticYearCard);

/***/ }),
/* 892 */
/***/ (function(module, exports) {

BI.DynamicYearCombo = BI.inherit(BI.Widget, {
  _const: {
    iconWidth: 24
  },
  props: {
    baseCls: "bi-year-combo",
    behaviors: {},
    minDate: "1900-01-01",
    // 最小日期
    maxDate: "2099-12-31",
    // 最大日期
    height: 24,
    supportDynamic: true
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.DynamicYearCombo.superclass._init.apply(this, arguments);

    this.storeValue = o.value;
    var border = o.simple ? 1 : 2;
    this.trigger = BI.createWidget({
      type: "bi.dynamic_year_trigger",
      simple: o.simple,
      min: o.minDate,
      max: o.maxDate,
      height: BI.toPix(o.height, border),
      value: o.value || "",
      watermark: o.watermark
    });
    this.trigger.on(BI.DynamicYearTrigger.EVENT_KEY_DOWN, function () {
      if (self.combo.isViewVisible()) {
        self.combo.hideView();
      }
    });
    this.trigger.on(BI.DynamicYearTrigger.EVENT_FOCUS, function () {
      self.storeTriggerValue = this.getKey();
      self.fireEvent(BI.DynamicYearCombo.EVENT_FOCUS);
    });
    this.trigger.on(BI.DynamicYearTrigger.EVENT_START, function () {
      self.combo.isViewVisible() && self.combo.hideView();
    });
    this.trigger.on(BI.DynamicYearTrigger.EVENT_STOP, function () {
      self.combo.showView();
    });
    this.trigger.on(BI.DynamicYearTrigger.EVENT_ERROR, function () {
      self.combo.isViewVisible() && self.combo.hideView();
      self.comboWrapper.element.addClass("error");
      self.fireEvent(BI.DynamicYearCombo.EVENT_ERROR);
    });
    this.trigger.on(BI.DynamicYearTrigger.EVENT_VALID, function () {
      self.comboWrapper.element.removeClass("error");
      self.fireEvent(BI.DynamicYearCombo.EVENT_VALID);
    });
    this.trigger.on(BI.DynamicYearTrigger.EVENT_CONFIRM, function () {
      if (self.combo.isViewVisible()) {
        return;
      }

      if (this.getKey() && this.getKey() !== self.storeTriggerValue) {
        self.storeValue = self.trigger.getValue();
        self.setValue(self.storeValue);
      } else if (!this.getKey()) {
        self.storeValue = null;
        self.setValue();
      }

      self._checkDynamicValue(self.storeValue);

      self.fireEvent(BI.DynamicYearCombo.EVENT_CONFIRM);
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      container: o.container,
      isNeedAdjustHeight: false,
      isNeedAdjustWidth: false,
      el: this.trigger,
      destroyWhenHide: true,
      adjustLength: 1,
      popup: {
        minWidth: 85,
        stopPropagation: false,
        el: {
          type: "bi.dynamic_year_popup",
          supportDynamic: o.supportDynamic,
          ref: function ref() {
            self.popup = this;
          },
          listeners: [{
            eventName: BI.DynamicYearPopup.EVENT_CHANGE,
            action: function action() {
              self.setValue(self.popup.getValue());
              self.combo.hideView();
              self.fireEvent(BI.DynamicYearCombo.EVENT_CONFIRM);
            }
          }, {
            eventName: BI.DynamicYearPopup.BUTTON_CLEAR_EVENT_CHANGE,
            action: function action() {
              self.setValue();
              self.combo.hideView();
              self.fireEvent(BI.DynamicYearCombo.EVENT_CONFIRM);
            }
          }, {
            eventName: BI.DynamicYearPopup.BUTTON_lABEL_EVENT_CHANGE,
            action: function action() {
              var date = BI.getDate();
              self.setValue({
                type: BI.DynamicYearCombo.Static,
                value: {
                  year: date.getFullYear()
                }
              });
              self.combo.hideView();
              self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
            }
          }, {
            eventName: BI.DynamicYearPopup.BUTTON_OK_EVENT_CHANGE,
            action: function action() {
              self.setValue(self.popup.getValue());
              self.combo.hideView();
              self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
            }
          }],
          behaviors: o.behaviors,
          min: o.minDate,
          max: o.maxDate
        },
        value: o.value || ""
      }
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      self.popup.setMinDate(o.minDate);
      self.popup.setMaxDate(o.maxDate);
      self.popup.setValue(self.storeValue);
      self.fireEvent(BI.DynamicYearCombo.EVENT_BEFORE_POPUPVIEW);
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.horizontal_fill",
          columnSize: ["", "fill"],
          cls: (o.simple ? "bi-border-bottom" : "bi-border bi-border-radius") + " bi-focus-shadow",
          ref: function ref() {
            self.comboWrapper = this;
          },
          items: [{
            el: {
              type: "bi.icon_button",
              cls: "bi-trigger-icon-button date-change-h-font",
              width: this._const.iconWidth,
              height: BI.toPix(o.height, border),
              ref: function ref() {
                self.changeIcon = this;
              }
            }
          }, this.combo]
        },
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      }]
    });

    this._checkDynamicValue(o.value);
  },
  _checkDynamicValue: function _checkDynamicValue(v) {
    var type = null;

    if (BI.isNotNull(v)) {
      type = v.type;
    }

    switch (type) {
      case BI.DynamicYearCombo.Dynamic:
        this.changeIcon.setVisible(true);
        break;

      default:
        this.changeIcon.setVisible(false);
        break;
    }
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;
    o.minDate = minDate;
    this.trigger.setMinDate(minDate);
    this.popup && this.popup.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;
    o.maxDate = maxDate;
    this.trigger.setMaxDate(maxDate);
    this.popup && this.popup.setMaxDate(maxDate);
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  getKey: function getKey() {
    return this.trigger.getKey() + "";
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    this.trigger.setValue(v);

    this._checkDynamicValue(v);
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  isStateValid: function isStateValid() {
    return this.trigger.isValid();
  },
  setWaterMark: function setWaterMark(v) {
    this.trigger.setWaterMark(v);
  }
});
BI.DynamicYearCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DynamicYearCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.DynamicYearCombo.EVENT_ERROR = "EVENT_ERROR";
BI.DynamicYearCombo.EVENT_VALID = "EVENT_VALID";
BI.DynamicYearCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.shortcut("bi.dynamic_year_combo", BI.DynamicYearCombo);
BI.extend(BI.DynamicYearCombo, {
  Static: 1,
  Dynamic: 2
});

/***/ }),
/* 893 */
/***/ (function(module, exports) {

/**
 * 年份展示面板
 *
 * Created by GUY on 2015/9/2.
 * @class BI.DynamicYearPopup
 * @extends BI.Trigger
 */
BI.DynamicYearPopup = BI.inherit(BI.Widget, {
  constants: {
    tabHeight: 40
  },
  props: {
    baseCls: "bi-dynamic-year-popup",
    behaviors: {},
    min: "1900-01-01",
    // 最小日期
    max: "2099-12-31",
    // 最大日期,
    width: 180,
    supportDynamic: true
  },
  render: function render() {
    var self = this,
        opts = this.options,
        c = this.constants;
    this.storeValue = {
      type: BI.DynamicYearCombo.Static
    };
    return {
      type: "bi.vertical",
      items: [{
        el: this._getTabJson()
      }, {
        el: {
          type: "bi.grid",
          items: [[{
            type: "bi.text_button",
            cls: "bi-split-top bi-high-light",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            shadow: true,
            text: BI.i18nText("BI-Basic_Clear"),
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.DynamicYearPopup.BUTTON_CLEAR_EVENT_CHANGE);
              }
            }]
          }, {
            type: "bi.text_button",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            cls: "bi-split-left bi-split-right bi-high-light bi-split-top",
            shadow: true,
            text: BI.i18nText("BI-Basic_Current_Year"),
            disabled: this._checkTodayValid(),
            ref: function ref() {
              self.yearButton = this;
            },
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.DynamicYearPopup.BUTTON_lABEL_EVENT_CHANGE);
              }
            }]
          }, {
            type: "bi.text_button",
            cls: "bi-split-top bi-high-light",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            shadow: true,
            text: BI.i18nText("BI-Basic_OK"),
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                var type = self.dateTab.getSelect();

                if (type === BI.DynamicDateCombo.Dynamic) {
                  self.dynamicPane.checkValidation(true) && self.fireEvent(BI.DynamicYearMonthPopup.BUTTON_OK_EVENT_CHANGE);
                } else {
                  self.fireEvent(BI.DynamicYearPopup.BUTTON_OK_EVENT_CHANGE);
                }
              }
            }]
          }]],
          height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT
        }
      }]
    };
  },
  _setInnerValue: function _setInnerValue() {
    if (this.dateTab.getSelect() === BI.DynamicDateCombo.Static) {
      this.yearButton.setValue(BI.i18nText("BI-Basic_Current_Year"));
      this.yearButton.setEnable(!this._checkYearValid());
    } else {
      var date = BI.DynamicDateHelper.getCalculation(this.dynamicPane.getInputValue());
      date = BI.print(date, "%Y");
      this.yearButton.setValue(date);
      this.yearButton.setEnable(false);
    }
  },
  _checkYearValid: function _checkYearValid() {
    var o = this.options;
    var today = BI.getDate();
    return !!BI.checkDateVoid(today.getFullYear(), today.getMonth() + 1, today.getDate(), o.min, o.max)[0];
  },
  _getTabJson: function _getTabJson() {
    var self = this,
        o = this.options;
    return {
      type: "bi.tab",
      logic: {
        dynamic: true
      },
      ref: function ref() {
        self.dateTab = this;
      },
      tab: {
        type: "bi.linear_segment",
        invisible: !o.supportDynamic,
        height: this.constants.tabHeight,
        items: BI.createItems([{
          text: BI.i18nText("BI-Basic_Year_Fen"),
          value: BI.DynamicYearCombo.Static
        }, {
          text: BI.i18nText("BI-Basic_Dynamic_Title"),
          value: BI.DynamicYearCombo.Dynamic
        }], {
          textAlign: "center"
        })
      },
      cardCreator: function cardCreator(v) {
        switch (v) {
          case BI.DynamicYearCombo.Dynamic:
            return {
              type: "bi.dynamic_year_card",
              cls: "dynamic-year-pane",
              min: self.options.min,
              max: self.options.max,
              listeners: [{
                eventName: "EVENT_CHANGE",
                action: function action() {
                  self._setInnerValue(self.year, v);
                }
              }],
              ref: function ref() {
                self.dynamicPane = this;
              }
            };

          case BI.DynamicYearCombo.Static:
          default:
            return {
              type: "bi.static_year_card",
              behaviors: o.behaviors,
              min: self.options.min,
              max: self.options.max,
              listeners: [{
                eventName: BI.StaticYearCard.EVENT_CHANGE,
                action: function action() {
                  self.fireEvent(BI.DynamicYearPopup.EVENT_CHANGE);
                }
              }],
              ref: function ref() {
                self.year = this;
              }
            };
        }
      },
      listeners: [{
        eventName: BI.Tab.EVENT_CHANGE,
        action: function action() {
          var v = self.dateTab.getSelect();

          switch (v) {
            case BI.DynamicYearCombo.Static:
              var date = BI.DynamicDateHelper.getCalculation(self.dynamicPane.getValue());
              self.year.setValue({
                year: date.getFullYear()
              });

              self._setInnerValue();

              break;

            case BI.DynamicYearCombo.Dynamic:
            default:
              if (self.storeValue && self.storeValue.type === BI.DynamicYearCombo.Dynamic) {
                self.dynamicPane.setValue(self.storeValue.value);
              } else {
                self.dynamicPane.setValue({
                  year: 0
                });
              }

              self._setInnerValue();

              break;
          }
        }
      }]
    };
  },
  _checkTodayValid: function _checkTodayValid() {
    var o = this.options;
    var today = BI.getDate();
    return !!BI.checkDateVoid(today.getFullYear(), today.getMonth() + 1, today.getDate(), o.min, o.max)[0];
  },
  setMinDate: function setMinDate(minDate) {
    if (this.options.min !== minDate) {
      this.options.min = minDate;
      this.year && this.year.setMinDate(minDate);
      this.dynamicPane && this.dynamicPane.setMinDate(minDate);
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (this.options.max !== maxDate) {
      this.options.max = maxDate;
      this.year && this.year.setMaxDate(maxDate);
      this.dynamicPane && this.dynamicPane.setMaxDate(maxDate);
    }
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    var self = this;
    var type, value;
    v = v || {};
    type = v.type || BI.DynamicDateCombo.Static;
    value = v.value || v;
    this.dateTab.setSelect(type);

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        this.dynamicPane.setValue(value);

        self._setInnerValue();

        break;

      case BI.DynamicDateCombo.Static:
      default:
        this.year.setValue(value);
        this.yearButton.setValue(BI.i18nText("BI-Basic_Current_Year"));
        this.yearButton.setEnable(!this._checkTodayValid());
        break;
    }
  },
  getValue: function getValue() {
    return {
      type: this.dateTab.getSelect(),
      value: this.dateTab.getValue()
    };
  }
});
BI.DynamicYearPopup.BUTTON_CLEAR_EVENT_CHANGE = "BUTTON_CLEAR_EVENT_CHANGE";
BI.DynamicYearPopup.BUTTON_lABEL_EVENT_CHANGE = "BUTTON_lABEL_EVENT_CHANGE";
BI.DynamicYearPopup.BUTTON_OK_EVENT_CHANGE = "BUTTON_OK_EVENT_CHANGE";
BI.DynamicYearPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.dynamic_year_popup", BI.DynamicYearPopup);

/***/ }),
/* 894 */
/***/ (function(module, exports) {

BI.DynamicYearTrigger = BI.inherit(BI.Trigger, {
  _const: {
    hgap: 4,
    vgap: 2,
    iconWidth: 24
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DynamicYearTrigger.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-year-trigger",
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      height: 24,
      watermark: BI.i18nText("BI-Basic_Unrestricted")
    });
  },
  beforeInit: function beforeInit(callback) {
    var o = this.options;
    o.title = BI.bind(this._titleCreator, this);
    callback();
  },
  _init: function _init() {
    BI.DynamicYearTrigger.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options,
        c = this._const;
    this.editor = BI.createWidget({
      type: "bi.sign_editor",
      simple: o.simple,
      height: o.height,
      validationChecker: function validationChecker(v) {
        return v === "" || BI.isPositiveInteger(v) && !BI.checkDateVoid(v, 1, 1, o.min, o.max)[0];
      },
      quitChecker: function quitChecker(v) {
        return false;
      },
      hgap: c.hgap,
      vgap: c.vgap,
      watermark: o.watermark,
      allowBlank: true,
      errorText: function errorText(v) {
        if (BI.isPositiveInteger(v)) {
          var start = BI.parseDateTime(o.min, "%Y-%X-%d");
          var end = BI.parseDateTime(o.max, "%Y-%X-%d");
          return BI.i18nText("BI-Basic_Year_Range_Error", start.getFullYear(), end.getFullYear());
        }

        return BI.i18nText("BI-Year_Trigger_Invalid_Text");
      }
    });
    this.editor.on(BI.SignEditor.EVENT_KEY_DOWN, function () {
      self.fireEvent(BI.DynamicYearTrigger.EVENT_KEY_DOWN, arguments);
    });
    this.editor.on(BI.SignEditor.EVENT_FOCUS, function () {
      self.fireEvent(BI.DynamicYearTrigger.EVENT_FOCUS);
    });
    this.editor.on(BI.SignEditor.EVENT_STOP, function () {
      self.fireEvent(BI.DynamicYearTrigger.EVENT_STOP);
    });
    this.editor.on(BI.SignEditor.EVENT_CONFIRM, function () {
      var value = self.editor.getValue();

      if (BI.isNotNull(value)) {
        self.editor.setValue(value);
      }

      if (BI.isNotEmptyString(value)) {
        self.storeValue = {
          type: BI.DynamicDateCombo.Static,
          value: {
            year: value
          }
        };
      }

      self.fireEvent(BI.DynamicYearTrigger.EVENT_CONFIRM);
    });
    this.editor.on(BI.SignEditor.EVENT_SPACE, function () {
      if (self.editor.isValid()) {
        self.editor.blur();
      }
    });
    this.editor.on(BI.SignEditor.EVENT_START, function () {
      self.fireEvent(BI.DynamicYearTrigger.EVENT_START);
    });
    this.editor.on(BI.SignEditor.EVENT_ERROR, function () {
      self.fireEvent(BI.DynamicYearTrigger.EVENT_ERROR);
    });
    this.editor.on(BI.SignEditor.EVENT_VALID, function () {
      self.fireEvent(BI.DynamicYearTrigger.EVENT_VALID);
    });
    BI.createWidget({
      element: this,
      type: "bi.horizontal_fill",
      columnSize: ["fill", "", ""],
      items: [{
        el: this.editor
      }, {
        el: {
          type: "bi.text_button",
          baseCls: "bi-trigger-year-text",
          text: BI.i18nText("BI-Multi_Date_Year")
        }
      }, {
        el: {
          type: "bi.trigger_icon_button",
          width: this._const.iconWidth
        }
      }]
    });
    this.setValue(o.value);
  },
  _getText: function _getText(obj) {
    var value = "";

    if (BI.isNotNull(obj.year) && BI.parseInt(obj.year) !== 0) {
      value += Math.abs(obj.year) + BI.i18nText("BI-Basic_Year") + (obj.year < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
    }

    return value;
  },
  _setInnerValue: function _setInnerValue(date, text) {
    var dateStr = BI.print(date, "%Y");
    this.editor.setState(dateStr);
    this.editor.setValue(dateStr);
  },
  _titleCreator: function _titleCreator() {
    var storeValue = this.storeValue || {};
    var type = storeValue.type || BI.DynamicDateCombo.Static;
    var value = storeValue.value;

    if (!this.editor.isValid()) {
      return "";
    }

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        var text = this._getText(value);

        var date = BI.getDate();
        date = BI.DynamicDateHelper.getCalculation(value);
        var dateStr = BI.print(date, "%Y");
        return BI.isEmptyString(text) ? dateStr : text + ":" + dateStr;

      case BI.DynamicDateCombo.Static:
      default:
        value = value || {};
        return value.year;
    }
  },
  setValue: function setValue(v) {
    var type, value;
    var date = BI.getDate();
    this.storeValue = v;

    if (BI.isNotNull(v)) {
      type = v.type || BI.DynamicDateCombo.Static;
      value = v.value || v;
    }

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        var text = this._getText(value);

        date = BI.DynamicDateHelper.getCalculation(value);

        this._setInnerValue(date, text);

        break;

      case BI.DynamicDateCombo.Static:
      default:
        value = value || {};
        this.editor.setState(value.year);
        this.editor.setValue(value.year);
        break;
    }
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
    }
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  getKey: function getKey() {
    return this.editor.getValue() | 0;
  },
  setWaterMark: function setWaterMark(v) {
    this.editor.setWaterMark(v);
  }
});
BI.DynamicYearTrigger.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.DynamicYearTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.DynamicYearTrigger.EVENT_ERROR = "EVENT_ERROR";
BI.DynamicYearTrigger.EVENT_START = "EVENT_START";
BI.DynamicYearTrigger.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DynamicYearTrigger.EVENT_STOP = "EVENT_STOP";
BI.DynamicYearTrigger.EVENT_VALID = "EVENT_VALID";
BI.shortcut("bi.dynamic_year_trigger", BI.DynamicYearTrigger);

/***/ }),
/* 895 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2021/1/25
 */
BI.YearInterval = BI.inherit(BI.Single, {
  constants: {
    height: 24,
    width: 25,
    lgap: 15,
    offset: -15,
    timeErrorCls: "time-error"
  },
  props: {
    extraCls: "bi-year-interval",
    minDate: "1900-01-01",
    maxDate: "2099-12-31",
    supportDynamic: true
  },
  render: function render() {
    var _o$watermark, _o$watermark2;

    var self = this,
        o = this.options;
    o.value = o.value || {};
    this.left = this._createCombo(o.value.start, (_o$watermark = o.watermark) === null || _o$watermark === void 0 ? void 0 : _o$watermark.start);
    this.right = this._createCombo(o.value.end, (_o$watermark2 = o.watermark) === null || _o$watermark2 === void 0 ? void 0 : _o$watermark2.end);
    return {
      type: "bi.horizontal_fill",
      columnSize: ["fill", "", "fill"],
      items: [{
        el: self.left
      }, {
        el: {
          type: "bi.label",
          height: o.height,
          hgap: 5,
          text: "-",
          ref: function ref(_ref) {
            self.label = _ref;
          }
        }
      }, {
        el: self.right
      }]
    };
  },
  _createCombo: function _createCombo(v, watermark) {
    var self = this,
        o = this.options;
    var combo = BI.createWidget({
      type: "bi.dynamic_year_combo",
      supportDynamic: o.supportDynamic,
      minDate: o.minDate,
      maxDate: o.maxDate,
      height: o.height,
      behaviors: o.behaviors,
      value: v,
      watermark: watermark,
      listeners: [{
        eventName: BI.DynamicYearCombo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.YearInterval.EVENT_BEFORE_POPUPVIEW);
        }
      }]
    });
    combo.on(BI.DynamicYearCombo.EVENT_ERROR, function () {
      self._clearTitle();

      BI.Bubbles.hide("error");
      self.element.removeClass(self.constants.timeErrorCls);
      self.fireEvent(BI.YearInterval.EVENT_ERROR);
    });
    combo.on(BI.DynamicYearCombo.EVENT_VALID, function () {
      self._checkValid();
    });
    combo.on(BI.DynamicYearCombo.EVENT_FOCUS, function () {
      self._checkValid();
    });
    combo.on(BI.DynamicYearCombo.EVENT_CONFIRM, function () {
      BI.Bubbles.hide("error");
      var smallDate = self.left.getKey(),
          bigDate = self.right.getKey();

      if (self.left.isStateValid() && self.right.isStateValid() && self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
        self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

        self.element.addClass(self.constants.timeErrorCls);
        self.fireEvent(BI.YearInterval.EVENT_ERROR);
      } else {
        self._clearTitle();

        self.element.removeClass(self.constants.timeErrorCls);
        self.fireEvent(BI.YearInterval.EVENT_CHANGE);
      }
    });
    return combo;
  },
  _dateCheck: function _dateCheck(date) {
    return BI.print(BI.parseDateTime(date, "%Y"), "%Y") === date || BI.print(BI.parseDateTime(date, "%Y"), "%Y") === date;
  },
  // 判是否在最大最小之间
  _checkVoid: function _checkVoid(obj) {
    var o = this.options;
    return !BI.checkDateVoid(obj.year, 1, 1, o.minDate, o.maxDate)[0];
  },
  // 判格式合法
  _check: function _check(smallDate, bigDate) {
    var smallObj = smallDate.match(/\d+/g),
        bigObj = bigDate.match(/\d+/g);
    var smallDate4Check = "";

    if (BI.isNotNull(smallObj)) {
      smallDate4Check = smallObj[0] || "";
    }

    var bigDate4Check = "";

    if (BI.isNotNull(bigObj)) {
      bigDate4Check = bigObj[0] || "";
    }

    return this._dateCheck(smallDate4Check) && BI.checkDateLegal(smallDate4Check) && this._checkVoid({
      year: smallObj[0],
      month: 1,
      day: 1
    }) && this._dateCheck(bigDate4Check) && BI.checkDateLegal(bigDate4Check) && this._checkVoid({
      year: bigObj[0],
      month: 12,
      day: 1
    });
  },
  _compare: function _compare(smallDate, bigDate) {
    smallDate = BI.print(BI.parseDateTime(smallDate, "%Y"), "%Y");
    bigDate = BI.print(BI.parseDateTime(bigDate, "%Y"), "%Y");
    return BI.isNotNull(smallDate) && BI.isNotNull(bigDate) && smallDate > bigDate;
  },
  _setTitle: function _setTitle(v) {
    this.setTitle(v);
  },
  _clearTitle: function _clearTitle() {
    this.setTitle("");
  },
  _checkValid: function _checkValid() {
    var self = this;
    BI.Bubbles.hide("error");
    var smallDate = self.left.getKey(),
        bigDate = self.right.getKey();

    if (self.left.isValid() && self.right.isValid() && self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
      self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

      self.element.addClass(self.constants.timeErrorCls);
      BI.Bubbles.show("error", BI.i18nText("BI-Time_Interval_Error_Text"), self, {
        offsetStyle: "center"
      });
      self.fireEvent(BI.YearInterval.EVENT_ERROR);
    } else {
      self._clearTitle();

      self.element.removeClass(self.constants.timeErrorCls);
    }
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;
    o.minDate = minDate;
    this.left.setMinDate(minDate);
    this.right.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;
    o.maxDate = maxDate;
    this.left.setMaxDate(maxDate);
    this.right.setMaxDate(maxDate);
  },
  setValue: function setValue(date) {
    date = date || {};
    this.left.setValue(date.start);
    this.right.setValue(date.end);

    this._checkValid();
  },
  getValue: function getValue() {
    return {
      start: this.left.getValue(),
      end: this.right.getValue()
    };
  }
});
BI.YearInterval.EVENT_VALID = "EVENT_VALID";
BI.YearInterval.EVENT_ERROR = "EVENT_ERROR";
BI.YearInterval.EVENT_CHANGE = "EVENT_CHANGE";
BI.YearInterval.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.year_interval", BI.YearInterval);

/***/ }),
/* 896 */
/***/ (function(module, exports) {

/**
 * 年月展示面板
 *
 * Created by GUY on 2015/9/2.
 * @class BI.YearCard
 * @extends BI.Trigger
 */
BI.DynamicYearMonthCard = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-year-month-card"
  },
  render: function render() {
    var self = this;
    return {
      type: "bi.vertical",
      items: [{
        type: "bi.label",
        text: BI.i18nText("BI-Multi_Date_Relative_Current_Time"),
        textAlign: "left",
        height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
      }, {
        type: "bi.vertical",
        ref: function ref(_ref) {
          self.wrapper = _ref;
        },
        items: [{
          el: {
            type: "bi.dynamic_date_param_item",
            validationChecker: BI.bind(self._checkDate, self),
            ref: function ref() {
              self.year = this;
            },
            listeners: [{
              eventName: "EVENT_CHANGE",
              action: function action() {
                self.fireEvent("EVENT_CHANGE");
              }
            }, {
              eventName: "EVENT_INPUT_CHANGE",
              action: function action() {
                BI.Bubbles.hide("dynamic-year-month-error");
              }
            }]
          },
          bgap: 10
        }, {
          type: "bi.dynamic_date_param_item",
          dateType: BI.DynamicDateCard.TYPE.MONTH,
          ref: function ref() {
            self.month = this;
          },
          listeners: [{
            eventName: "EVENT_CHANGE",
            action: function action() {
              self.fireEvent("EVENT_CHANGE");
            }
          }, {
            eventName: "EVENT_INPUT_CHANGE",
            action: function action() {
              BI.Bubbles.hide("dynamic-year-month-error");
            }
          }]
        }]
      }],
      vgap: 10,
      hgap: 10
    };
  },
  _getErrorText: function _getErrorText() {
    var o = this.options;
    var start = BI.parseDateTime(o.min, "%Y-%X-%d");
    var end = BI.parseDateTime(o.max, "%Y-%X-%d");
    return BI.i18nText("BI-Basic_Year_Month_Range_Error", start.getFullYear(), start.getMonth() + 1, end.getFullYear(), end.getMonth() + 1);
  },
  _checkDate: function _checkDate(obj) {
    var o = this.options;
    var date = BI.DynamicDateHelper.getCalculation(BI.extend(this._getValue(), this._digestDateTypeValue(obj)));
    return !BI.checkDateVoid(date.getFullYear(), date.getMonth() + 1, date.getDate(), o.min, o.max)[0];
  },
  _digestDateTypeValue: function _digestDateTypeValue(value) {
    var valueMap = {};

    switch (value.dateType) {
      case BI.DynamicDateCard.TYPE.YEAR:
        valueMap.year = value.offset === 0 ? -value.value : +value.value;
        break;

      case BI.DynamicDateCard.TYPE.MONTH:
        valueMap.month = value.offset === 0 ? -value.value : +value.value;
        break;

      default:
        break;
    }

    return valueMap;
  },
  _createValue: function _createValue(type, v) {
    return {
      dateType: type,
      value: Math.abs(v),
      offset: v > 0 ? 1 : 0
    };
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
    }
  },
  setValue: function setValue(v) {
    v = v || {
      year: 0,
      month: 0
    };
    this.year.setValue(this._createValue(BI.DynamicDateCard.TYPE.YEAR, v.year));
    this.month.setValue(this._createValue(BI.DynamicDateCard.TYPE.MONTH, v.month));
  },
  _getValue: function _getValue() {
    var year = this.year.getValue();
    var month = this.month.getValue();
    return {
      year: year.offset === 0 ? -year.value : year.value,
      month: month.offset === 0 ? -month.value : month.value
    };
  },
  getInputValue: function getInputValue() {
    return this._getValue();
  },
  getValue: function getValue() {
    return this.checkValidation() ? this._getValue() : {};
  },
  checkValidation: function checkValidation(show) {
    var errorText;
    var yearInvalid = !this.year.checkValidation();
    var monthInvalid = !this.month.checkValidation();
    var invalid = yearInvalid || monthInvalid;

    if (invalid) {
      errorText = BI.i18nText("BI-Please_Input_Natural_Number");
    } else {
      invalid = !this._checkDate(this._getValue());
      errorText = this._getErrorText();
    }

    invalid && show && BI.Bubbles.show("dynamic-year-month-error", errorText, this.wrapper);
    return !invalid;
  }
});
BI.DynamicYearMonthCard.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.dynamic_year_month_card", BI.DynamicYearMonthCard);

/***/ }),
/* 897 */
/***/ (function(module, exports) {

BI.StaticYearMonthCard = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-static-year-month-card",
    behaviors: {}
  },
  _createMonths: function _createMonths() {
    var self = this; // 纵向排列月

    var month = [1, 7, 2, 8, 3, 9, 4, 10, 5, 11, 6, 12];
    var items = BI.chunk(month, 2);
    return BI.map(items, function (i, item) {
      return BI.map(item, function (j, td) {
        return {
          type: "bi.text_item",
          cls: "bi-list-item-select",
          textAlign: "center",
          whiteSpace: "nowrap",
          once: false,
          forceSelected: true,
          height: BI.toPix(BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT, 1),
          width: 38,
          value: td,
          text: td,
          ref: function ref(_ref) {
            self.monthMap[j === 0 ? i : i + 6] = _ref;
          }
        };
      });
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.monthMap = {};
    return {
      type: "bi.vertical",
      items: [{
        type: "bi.year_picker",
        cls: "bi-split-bottom",
        min: o.min,
        max: o.max,
        ref: function ref() {
          self.yearPicker = this;
        },
        behaviors: o.behaviors,
        height: 30,
        listeners: [{
          eventName: BI.YearPicker.EVENT_CHANGE,
          action: function action() {
            var value = this.getValue();

            self._checkMonthStatus(value);

            self._setYear(value);
          }
        }]
      }, {
        el: {
          type: "bi.button_group",
          behaviors: o.behaviors,
          ref: function ref() {
            self.month = this;
          },
          items: this._createMonths(),
          layouts: [BI.LogicFactory.createLogic("table", BI.extend({
            dynamic: true
          }, {
            columns: 2,
            rows: 6,
            columnSize: [1 / 2, 1 / 2],
            rowSize: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT + 1
          })), {
            type: "bi.center_adapt",
            vgap: 1,
            hgap: 2
          }],
          value: o.value,
          listeners: [{
            eventName: BI.ButtonGroup.EVENT_CHANGE,
            action: function action() {
              self.selectedYear = self.yearPicker.getValue();
              self.selectedMonth = this.getValue()[0];
              self.fireEvent(BI.StaticYearMonthCard.EVENT_CHANGE);
            }
          }]
        },
        vgap: 5
      }]
    };
  },
  created: function created() {
    this._checkMonthStatus(this.selectedYear);
  },
  _checkMonthStatus: function _checkMonthStatus(year) {
    var o = this.options;
    var minDate = BI.parseDateTime(o.min, "%Y-%X-%d"),
        maxDate = BI.parseDateTime(o.max, "%Y-%X-%d");
    var minYear = minDate.getFullYear(),
        maxYear = maxDate.getFullYear();
    var minMonth = 0;
    var maxMonth = 11;
    minYear === year && (minMonth = minDate.getMonth());
    maxYear === year && (maxMonth = maxDate.getMonth());
    var yearInvalid = year < minYear || year > maxYear;
    BI.each(this.monthMap, function (month, obj) {
      var monthInvalid = month < minMonth || month > maxMonth;
      obj.setEnable(!yearInvalid && !monthInvalid);
    });
  },
  _setYear: function _setYear(year) {
    var o = this.options;
    var dateVoid = BI.checkDateVoid(year, this.selectedMonth, 1, o.min, o.max); //  在切换年的时候,如果月份不在区间内了,取消选中

    if (BI.contains(["y", "m"], dateVoid[0])) {
      this.selectedYear = year;
      this.month.setValue();
      return;
    }

    this.selectedYear = year;
    this.month.setValue(this.selectedMonth);
  },
  setMinDate: function setMinDate(minDate) {
    if (this.options.min !== minDate) {
      this.options.min = minDate;
      this.yearPicker.setMinDate(minDate);

      this._checkMonthStatus(this.selectedYear);
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (this.options.max !== maxDate) {
      this.options.max = maxDate;
      this.yearPicker.setMaxDate(maxDate);

      this._checkMonthStatus(this.selectedYear);
    }
  },
  getValue: function getValue() {
    return {
      year: this.selectedYear,
      month: this.selectedMonth
    };
  },
  setValue: function setValue(obj) {
    var o = this.options;
    var newObj = {};
    newObj.year = obj.year || 0;
    newObj.month = obj.month || 0;

    if (newObj.year === 0 || newObj.month === 0 || BI.checkDateVoid(newObj.year, newObj.month, 1, o.min, o.max)[0]) {
      var year = newObj.year || BI.getDate().getFullYear();
      this.selectedYear = year;
      this.selectedMonth = "";
      this.yearPicker.setValue(year);
      this.month.setValue();
    } else {
      this.selectedYear = BI.parseInt(newObj.year);
      this.selectedMonth = BI.parseInt(newObj.month);
      this.yearPicker.setValue(this.selectedYear);
      this.month.setValue(this.selectedMonth);
    }

    this._checkMonthStatus(this.selectedYear);
  }
});
BI.StaticYearMonthCard.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.static_year_month_card", BI.StaticYearMonthCard);

/***/ }),
/* 898 */
/***/ (function(module, exports) {

BI.DynamicYearMonthCombo = BI.inherit(BI.Single, {
  props: {
    baseCls: "bi-year-month-combo",
    behaviors: {},
    minDate: "1900-01-01",
    // 最小日期
    maxDate: "2099-12-31",
    // 最大日期
    height: 24,
    supportDynamic: true,
    isNeedAdjustHeight: false,
    isNeedAdjustWidth: false
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.DynamicYearMonthCombo.superclass._init.apply(this, arguments);

    this.storeValue = o.value;
    this.storeTriggerValue = "";
    var border = o.simple ? 1 : 2;
    this.trigger = BI.createWidget({
      type: "bi.dynamic_year_month_trigger",
      simple: o.simple,
      min: o.minDate,
      max: o.maxDate,
      height: BI.toPix(o.height, border),
      value: o.value || "",
      watermark: o.watermark
    });
    this.trigger.on(BI.DynamicYearMonthTrigger.EVENT_KEY_DOWN, function () {
      self.combo.isViewVisible() && self.combo.hideView();
    });
    this.trigger.on(BI.DynamicYearMonthTrigger.EVENT_START, function () {
      self.combo.isViewVisible() && self.combo.hideView();
    });
    this.trigger.on(BI.DynamicYearMonthTrigger.EVENT_STOP, function () {
      self.combo.showView();
    });
    this.trigger.on(BI.DynamicYearMonthTrigger.EVENT_ERROR, function () {
      self.combo.isViewVisible() && self.combo.hideView();
      self.comboWrapper.element.addClass("error");
      self.fireEvent(BI.DynamicYearMonthCombo.EVENT_ERROR);
    });
    this.trigger.on(BI.DynamicYearMonthTrigger.EVENT_VALID, function () {
      self.comboWrapper.element.removeClass("error");
      self.fireEvent(BI.DynamicYearMonthCombo.EVENT_VALID);
    });
    this.trigger.on(BI.DynamicYearMonthTrigger.EVENT_CONFIRM, function () {
      var dateStore = self.storeTriggerValue;
      var dateObj = self.trigger.getKey();

      if (BI.isEqual(dateObj, dateStore)) {
        return;
      }

      if (BI.isNotEmptyString(dateObj) && !BI.isEqual(dateObj, dateStore)) {
        self.storeValue = self.trigger.getValue();
        self.setValue(self.trigger.getValue());
      }

      self._checkDynamicValue(self.storeValue);

      self.fireEvent(BI.DynamicYearMonthCombo.EVENT_CONFIRM);
    });
    this.trigger.on(BI.DynamicYearMonthTrigger.EVENT_FOCUS, function () {
      self.storeTriggerValue = self.trigger.getKey();
      self.fireEvent(BI.DynamicYearMonthCombo.EVENT_FOCUS);
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      container: o.container,
      isNeedAdjustHeight: o.isNeedAdjustHeight,
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      el: this.trigger,
      destroyWhenHide: true,
      adjustLength: 1,
      popup: {
        minWidth: 100,
        stopPropagation: false,
        el: {
          type: "bi.dynamic_year_month_popup",
          width: o.isNeedAdjustWidth ? o.width : undefined,
          supportDynamic: o.supportDynamic,
          ref: function ref() {
            self.popup = this;
          },
          listeners: [{
            eventName: BI.DynamicYearMonthPopup.EVENT_CHANGE,
            action: function action() {
              self.setValue(self.popup.getValue());
              self.combo.hideView();
              self.fireEvent(BI.DynamicYearMonthCombo.EVENT_CONFIRM);
            }
          }, {
            eventName: BI.DynamicYearMonthPopup.BUTTON_CLEAR_EVENT_CHANGE,
            action: function action() {
              self.setValue();
              self.combo.hideView();
              self.fireEvent(BI.DynamicYearMonthCombo.EVENT_CONFIRM);
            }
          }, {
            eventName: BI.DynamicYearMonthPopup.BUTTON_lABEL_EVENT_CHANGE,
            action: function action() {
              var date = BI.getDate();
              self.setValue({
                type: BI.DynamicYearMonthCombo.Static,
                value: {
                  year: date.getFullYear(),
                  month: date.getMonth() + 1
                }
              });
              self.combo.hideView();
              self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
            }
          }, {
            eventName: BI.DynamicYearMonthPopup.BUTTON_OK_EVENT_CHANGE,
            action: function action() {
              var value = self.popup.getValue();

              if (self._checkValue(value)) {
                self.setValue(value);
              }

              self.combo.hideView();
              self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
            }
          }],
          behaviors: o.behaviors,
          min: o.minDate,
          max: o.maxDate
        },
        value: o.value || ""
      }
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      self.popup.setMinDate(o.minDate);
      self.popup.setMaxDate(o.maxDate);
      self.popup.setValue(self.storeValue);
      self.fireEvent(BI.DynamicYearMonthCombo.EVENT_BEFORE_POPUPVIEW);
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.horizontal_fill",
          columnSize: ["", "fill"],
          cls: (o.simple ? "bi-border-bottom" : "bi-border bi-border-radius") + " bi-focus-shadow",
          ref: function ref() {
            self.comboWrapper = this;
          },
          items: [{
            el: {
              type: "bi.icon_button",
              cls: "bi-trigger-icon-button date-change-h-font",
              width: BI.toPix(o.height, border),
              height: BI.toPix(o.height, border),
              ref: function ref() {
                self.changeIcon = this;
              }
            }
          }, this.combo]
        },
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      }]
    });

    this._checkDynamicValue(o.value);
  },
  _checkDynamicValue: function _checkDynamicValue(v) {
    var type = null;

    if (BI.isNotNull(v)) {
      type = v.type;
    }

    switch (type) {
      case BI.DynamicYearMonthCombo.Dynamic:
        this.changeIcon.setVisible(true);
        break;

      default:
        this.changeIcon.setVisible(false);
        break;
    }
  },
  _checkValue: function _checkValue(v) {
    var o = this.options;

    switch (v.type) {
      case BI.DynamicDateCombo.Dynamic:
        return BI.isNotEmptyObject(v.value);

      case BI.DynamicDateCombo.Static:
        var value = v.value || {};
        return !BI.checkDateVoid(value.year, value.month, 1, o.minDate, o.maxDate)[0];

      default:
        return true;
    }
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;
    o.minDate = minDate;
    this.trigger.setMinDate(minDate);
    this.popup && this.popup.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;
    o.maxDate = maxDate;
    this.trigger.setMaxDate(maxDate);
    this.popup && this.popup.setMaxDate(maxDate);
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    this.trigger.setValue(v);

    this._checkDynamicValue(v);
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  getKey: function getKey() {
    return this.trigger.getKey();
  },
  isStateValid: function isStateValid() {
    return this.trigger.isStateValid();
  }
});
BI.DynamicYearMonthCombo.EVENT_ERROR = "EVENT_ERROR";
BI.DynamicYearMonthCombo.EVENT_VALID = "EVENT_VALID";
BI.DynamicYearMonthCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.DynamicYearMonthCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DynamicYearMonthCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.dynamic_year_month_combo", BI.DynamicYearMonthCombo);
BI.extend(BI.DynamicYearMonthCombo, {
  Static: 1,
  Dynamic: 2
});

/***/ }),
/* 899 */
/***/ (function(module, exports) {

/**
 * 年月
 *
 * Created by GUY on 2015/9/2.
 * @class BI.DynamicYearMonthPopup
 * @extends BI.Trigger
 */
BI.DynamicYearMonthPopup = BI.inherit(BI.Widget, {
  constants: {
    tabHeight: 40
  },
  props: {
    baseCls: "bi-year-month-popup",
    behaviors: {},
    min: "1900-01-01",
    // 最小日期
    max: "2099-12-31",
    // 最大日期,
    width: 180,
    supportDynamic: true
  },
  render: function render() {
    var self = this,
        opts = this.options,
        c = this.constants;
    this.storeValue = {
      type: BI.DynamicYearMonthCombo.Static
    };
    return {
      type: "bi.vertical",
      items: [{
        el: this._getTabJson()
      }, {
        el: {
          type: "bi.grid",
          items: [[{
            type: "bi.text_button",
            cls: "bi-split-top bi-high-light",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            shadow: true,
            text: BI.i18nText("BI-Basic_Clear"),
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.DynamicYearMonthPopup.BUTTON_CLEAR_EVENT_CHANGE);
              }
            }]
          }, {
            type: "bi.text_button",
            cls: "bi-split-left bi-split-right bi-high-light bi-split-top",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            shadow: true,
            text: BI.i18nText("BI-Basic_Current_Month"),
            disabled: this._checkTodayValid(),
            ref: function ref() {
              self.textButton = this;
            },
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.DynamicYearMonthPopup.BUTTON_lABEL_EVENT_CHANGE);
              }
            }]
          }, {
            type: "bi.text_button",
            cls: "bi-split-top bi-high-light",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            shadow: true,
            text: BI.i18nText("BI-Basic_OK"),
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                var type = self.dateTab.getSelect();

                if (type === BI.DynamicDateCombo.Dynamic) {
                  self.dynamicPane.checkValidation(true) && self.fireEvent(BI.DynamicYearMonthPopup.BUTTON_OK_EVENT_CHANGE);
                } else {
                  self.fireEvent(BI.DynamicYearMonthPopup.BUTTON_OK_EVENT_CHANGE);
                }
              }
            }]
          }]],
          height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT
        }
      }]
    };
  },
  _setInnerValue: function _setInnerValue() {
    if (this.dateTab.getSelect() === BI.DynamicDateCombo.Static) {
      this.textButton.setValue(BI.i18nText("BI-Basic_Current_Month"));
      this.textButton.setEnable(!this._checkTodayValid());
    } else {
      var date = BI.DynamicDateHelper.getCalculation(this.dynamicPane.getInputValue());
      date = BI.print(date, "%Y-%x");
      this.textButton.setValue(date);
      this.textButton.setEnable(false);
    }
  },
  _checkTodayValid: function _checkTodayValid() {
    var o = this.options;
    var today = BI.getDate();
    return !!BI.checkDateVoid(today.getFullYear(), today.getMonth() + 1, today.getDate(), o.min, o.max)[0];
  },
  _getTabJson: function _getTabJson() {
    var self = this,
        o = this.options;
    return {
      type: "bi.tab",
      logic: {
        dynamic: true
      },
      ref: function ref() {
        self.dateTab = this;
      },
      tab: {
        type: "bi.linear_segment",
        cls: "bi-split-bottom",
        invisible: !o.supportDynamic,
        height: this.constants.tabHeight,
        items: BI.createItems([{
          text: BI.i18nText("BI-Basic_Year_Month"),
          value: BI.DynamicYearCombo.Static
        }, {
          text: BI.i18nText("BI-Basic_Dynamic_Title"),
          value: BI.DynamicYearCombo.Dynamic
        }], {
          textAlign: "center"
        })
      },
      cardCreator: function cardCreator(v) {
        switch (v) {
          case BI.DynamicYearCombo.Dynamic:
            return {
              type: "bi.dynamic_year_month_card",
              cls: "dynamic-year-month-pane",
              min: self.options.min,
              max: self.options.max,
              listeners: [{
                eventName: "EVENT_CHANGE",
                action: function action() {
                  self._setInnerValue(self.year, v);
                }
              }],
              ref: function ref() {
                self.dynamicPane = this;
              }
            };

          case BI.DynamicYearCombo.Static:
          default:
            return {
              type: "bi.static_year_month_card",
              behaviors: o.behaviors,
              min: self.options.min,
              max: self.options.max,
              listeners: [{
                eventName: BI.StaticYearMonthCard.EVENT_CHANGE,
                action: function action() {
                  self.fireEvent(BI.DynamicYearMonthPopup.EVENT_CHANGE);
                }
              }],
              ref: function ref() {
                self.year = this;
              }
            };
        }
      },
      listeners: [{
        eventName: BI.Tab.EVENT_CHANGE,
        action: function action() {
          var v = self.dateTab.getSelect();

          switch (v) {
            case BI.DynamicYearCombo.Static:
              var date = BI.DynamicDateHelper.getCalculation(self.dynamicPane.getValue());
              self.year.setValue({
                year: date.getFullYear(),
                month: date.getMonth() + 1
              });

              self._setInnerValue();

              break;

            case BI.DynamicYearCombo.Dynamic:
            default:
              if (self.storeValue && self.storeValue.type === BI.DynamicYearCombo.Dynamic) {
                self.dynamicPane.setValue(self.storeValue.value);
              } else {
                self.dynamicPane.setValue({
                  year: 0
                });
              }

              self._setInnerValue();

              break;
          }
        }
      }]
    };
  },
  setMinDate: function setMinDate(minDate) {
    if (this.options.min !== minDate) {
      this.options.min = minDate;
      this.year && this.year.setMinDate(minDate);
      this.dynamicPane && this.dynamicPane.setMinDate(minDate);
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (this.options.max !== maxDate) {
      this.options.max = maxDate;
      this.year && this.year.setMaxDate(maxDate);
      this.dynamicPane && this.dynamicPane.setMaxDate(maxDate);
    }
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    var self = this;
    var type, value;
    v = v || {};
    type = v.type || BI.DynamicDateCombo.Static;
    value = v.value || v;
    this.dateTab.setSelect(type);

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        this.dynamicPane.setValue(value);

        self._setInnerValue();

        break;

      case BI.DynamicDateCombo.Static:
      default:
        this.year.setValue(value);
        this.textButton.setValue(BI.i18nText("BI-Basic_Current_Month"));
        this.textButton.setEnable(!this._checkTodayValid());
        break;
    }
  },
  getValue: function getValue() {
    return {
      type: this.dateTab.getSelect(),
      value: this.dateTab.getValue()
    };
  }
});
BI.DynamicYearMonthPopup.BUTTON_CLEAR_EVENT_CHANGE = "BUTTON_CLEAR_EVENT_CHANGE";
BI.DynamicYearMonthPopup.BUTTON_lABEL_EVENT_CHANGE = "BUTTON_lABEL_EVENT_CHANGE";
BI.DynamicYearMonthPopup.BUTTON_OK_EVENT_CHANGE = "BUTTON_OK_EVENT_CHANGE";
BI.DynamicYearMonthPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.dynamic_year_month_popup", BI.DynamicYearMonthPopup);

/***/ }),
/* 900 */
/***/ (function(module, exports) {

BI.DynamicYearMonthTrigger = BI.inherit(BI.Trigger, {
  _const: {
    hgap: 4,
    vgap: 2,
    iconWidth: 24
  },
  props: function props() {
    return {
      extraCls: "bi-year-month-trigger",
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      height: 24,
      watermark: {
        year: BI.i18nText("BI-Basic_Unrestricted"),
        month: BI.i18nText("BI-Basic_Unrestricted")
      }
    };
  },
  beforeInit: function beforeInit(callback) {
    var o = this.options;
    o.title = BI.bind(this._titleCreator, this);
    callback();
  },
  _init: function _init() {
    BI.DynamicYearMonthTrigger.superclass._init.apply(this, arguments);

    var o = this.options;
    this.yearEditor = this._createEditor(true);
    this.monthEditor = this._createEditor(false);
    BI.createWidget({
      element: this,
      type: "bi.htape",
      items: [{
        type: "bi.center",
        items: [{
          type: "bi.horizontal_fill",
          columnSize: ["fill", ""],
          items: [this.yearEditor, {
            el: {
              type: "bi.text_button",
              text: BI.i18nText("BI-Multi_Date_Year")
            }
          }]
        }, {
          type: "bi.horizontal_fill",
          columnSize: ["fill", ""],
          items: [this.monthEditor, {
            el: {
              type: "bi.text_button",
              text: BI.i18nText("BI-Multi_Date_Month")
            }
          }]
        }]
      }, {
        el: {
          type: "bi.trigger_icon_button",
          width: this._const.iconWidth
        },
        width: this._const.iconWidth
      }]
    });
    this.setValue(o.value);
  },
  _createEditor: function _createEditor(isYear) {
    var _o$watermark;

    var self = this,
        o = this.options,
        c = this._const;
    var editor = BI.createWidget({
      type: "bi.sign_editor",
      simple: o.simple,
      height: o.height,
      validationChecker: function validationChecker(v) {
        if (isYear) {
          var month = self.monthEditor.getValue();

          if (BI.isEmptyString(month)) {
            month = parseInt(v, 10) === BI.parseDateTime(o.min, "%Y-%X-%d").getFullYear() ? BI.parseDateTime(o.min, "%Y-%X-%d").getMonth() + 1 : 1;
          }

          return v === "" || BI.isPositiveInteger(v) && !BI.checkDateVoid(v, month, 1, o.min, o.max)[0];
        }

        var year = self.yearEditor.getValue();
        return v === "" || BI.isPositiveInteger(v) && v >= 1 && v <= 12 && (BI.isEmptyString(year) ? true : !BI.checkDateVoid(self.yearEditor.getValue(), v, 1, o.min, o.max)[0]);
      },
      quitChecker: function quitChecker() {
        return false;
      },
      watermark: isYear ? (_o$watermark = o.watermark) === null || _o$watermark === void 0 ? void 0 : _o$watermark.year : o.watermark.month,
      errorText: function errorText(v) {
        var year = isYear ? v : self.yearEditor.getValue();
        var month = isYear ? self.monthEditor.getValue() : v;

        if (!BI.isPositiveInteger(year) || !BI.isPositiveInteger(month) || month > 12) {
          return BI.i18nText("BI-Year_Trigger_Invalid_Text");
        }

        var start = BI.parseDateTime(o.min, "%Y-%X-%d");
        var end = BI.parseDateTime(o.max, "%Y-%X-%d");
        return BI.i18nText("BI-Basic_Year_Month_Range_Error", start.getFullYear(), start.getMonth() + 1, end.getFullYear(), end.getMonth() + 1);
      },
      hgap: c.hgap,
      vgap: c.vgap,
      allowBlank: true
    });
    editor.on(BI.SignEditor.EVENT_KEY_DOWN, function () {
      self.fireEvent(BI.DynamicYearMonthTrigger.EVENT_KEY_DOWN);
    });
    editor.on(BI.SignEditor.EVENT_FOCUS, function () {
      self.fireEvent(BI.DynamicYearMonthTrigger.EVENT_FOCUS);
    });
    editor.on(BI.SignEditor.EVENT_STOP, function () {
      self.fireEvent(BI.DynamicYearMonthTrigger.EVENT_STOP);
    });
    editor.on(BI.SignEditor.EVENT_CONFIRM, function () {
      self._doEditorConfirm(editor);

      self.fireEvent(BI.DynamicYearMonthTrigger.EVENT_CONFIRM);
    });
    editor.on(BI.SignEditor.EVENT_SPACE, function () {
      if (editor.isValid()) {
        editor.blur();
      }
    });
    editor.on(BI.SignEditor.EVENT_START, function () {
      self.fireEvent(BI.DynamicYearMonthTrigger.EVENT_START);
    });
    editor.on(BI.SignEditor.EVENT_ERROR, function () {
      self.fireEvent(BI.DynamicYearMonthTrigger.EVENT_ERROR);
    });
    editor.on(BI.SignEditor.EVENT_VALID, function () {
      var year = self.yearEditor.getValue();
      var month = self.monthEditor.getValue();

      if (BI.isNotEmptyString(year) && BI.isNotEmptyString(month)) {
        if (BI.isPositiveInteger(year) && month >= 1 && month <= 12 && !BI.checkDateVoid(year, month, 1, o.min, o.max)[0]) {
          self.fireEvent(BI.DynamicYearMonthTrigger.EVENT_VALID);
        }
      }
    });
    editor.on(BI.SignEditor.EVENT_CHANGE, function () {
      if (isYear) {
        self._autoSwitch(editor);
      }
    });
    return editor;
  },
  _titleCreator: function _titleCreator() {
    var storeValue = this.storeValue || {};
    var type = storeValue.type || BI.DynamicDateCombo.Static;
    var value = storeValue.value;

    if (!this.monthEditor.isValid() || !this.yearEditor.isValid()) {
      return "";
    }

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        var text = this._getText(value);

        var date = BI.getDate();
        date = BI.DynamicDateHelper.getCalculation(value);
        var dateStr = BI.print(date, "%Y-%x");
        return BI.isEmptyString(text) ? dateStr : text + ":" + dateStr;

      case BI.DynamicDateCombo.Static:
      default:
        value = value || {};
        return this._getStaticTitle(value);
    }
  },
  _doEditorConfirm: function _doEditorConfirm(editor) {
    var value = editor.getValue();

    if (BI.isNotNull(value)) {
      editor.setValue(value);
    }

    var monthValue = this.monthEditor.getValue();
    this.storeValue = {
      type: BI.DynamicDateCombo.Static,
      value: {
        year: this.yearEditor.getValue(),
        month: BI.isEmptyString(this.monthEditor.getValue()) ? "" : monthValue
      }
    };
  },
  _yearCheck: function _yearCheck(v) {
    var date = BI.print(BI.parseDateTime(v, "%Y-%X-%d"), "%Y-%X-%d");
    return BI.print(BI.parseDateTime(v, "%Y"), "%Y") === v && date >= this.options.min && date <= this.options.max;
  },
  _autoSwitch: function _autoSwitch(editor) {
    var v = editor.getValue();

    if (BI.isNotEmptyString(v) && BI.checkDateLegal(v)) {
      if (v.length === 4 && this._yearCheck(v)) {
        this._doEditorConfirm(editor);

        this.fireEvent(BI.DynamicYearMonthTrigger.EVENT_CONFIRM);
        this.monthEditor.focus();
      }
    }
  },
  _getText: function _getText(obj) {
    var value = "";

    if (BI.isNotNull(obj.year) && BI.parseInt(obj.year) !== 0) {
      value += Math.abs(obj.year) + BI.i18nText("BI-Basic_Year") + (obj.year < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
    }

    if (BI.isNotNull(obj.month) && BI.parseInt(obj.month) !== 0) {
      value += Math.abs(obj.month) + BI.i18nText("BI-Basic_Month") + (obj.month < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
    }

    return value;
  },
  _setInnerValue: function _setInnerValue(date, text) {
    this.yearEditor.setValue(date.getFullYear());
    this.monthEditor.setValue(date.getMonth() + 1);
  },
  _getStaticTitle: function _getStaticTitle(value) {
    value = value || {};
    var hasYear = !(BI.isNull(value.year) || BI.isEmptyString(value.year));
    var hasMonth = !(BI.isNull(value.month) || BI.isEmptyString(value.month));

    switch (hasYear << 1 | hasMonth) {
      // !hasYear && !hasMonth
      case 0:
        return "";
      // !hasYear && hasMonth

      case 1:
        return value.month;
      // hasYear && !hasMonth

      case 2:
        return value.year;
      // hasYear && hasMonth

      case 3:
      default:
        return value.year + "-" + value.month;
    }
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
    }
  },
  setValue: function setValue(v) {
    var type, value;
    var date = BI.getDate();
    this.storeValue = v;

    if (BI.isNotNull(v)) {
      type = v.type || BI.DynamicDateCombo.Static;
      value = v.value || v;
    }

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        var text = this._getText(value);

        date = BI.DynamicDateHelper.getCalculation(value);

        this._setInnerValue(date, text);

        break;

      case BI.DynamicDateCombo.Static:
      default:
        value = value || {};
        var month = BI.isNull(value.month) ? null : value.month;
        this.yearEditor.setValue(value.year);
        this.monthEditor.setValue(month);
        break;
    }
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  getKey: function getKey() {
    return this.yearEditor.getValue() + "-" + this.monthEditor.getValue();
  },
  isStateValid: function isStateValid() {
    return this.yearEditor.isValid() && this.monthEditor.isValid();
  }
});
BI.DynamicYearMonthTrigger.EVENT_VALID = "EVENT_VALID";
BI.DynamicYearMonthTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.DynamicYearMonthTrigger.EVENT_ERROR = "EVENT_ERROR";
BI.DynamicYearMonthTrigger.EVENT_START = "EVENT_START";
BI.DynamicYearMonthTrigger.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DynamicYearMonthTrigger.EVENT_STOP = "EVENT_STOP";
BI.DynamicYearMonthTrigger.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.shortcut("bi.dynamic_year_month_trigger", BI.DynamicYearMonthTrigger);

/***/ }),
/* 901 */
/***/ (function(module, exports) {

BI.YearMonthInterval = BI.inherit(BI.Single, {
  constants: {
    width: 25,
    lgap: 15,
    offset: -15,
    timeErrorCls: "time-error"
  },
  props: {
    extraCls: "bi-year-month-interval",
    minDate: "1900-01-01",
    maxDate: "2099-12-31",
    supportDynamic: true,
    height: 24
  },
  render: function render() {
    var _o$watermark, _o$watermark2;

    var self = this,
        o = this.options;
    o.value = o.value || {};
    this.left = this._createCombo(o.value.start, (_o$watermark = o.watermark) === null || _o$watermark === void 0 ? void 0 : _o$watermark.start);
    this.right = this._createCombo(o.value.end, (_o$watermark2 = o.watermark) === null || _o$watermark2 === void 0 ? void 0 : _o$watermark2.end);
    return {
      type: "bi.horizontal_fill",
      columnSize: ["fill", "", "fill"],
      items: [{
        el: self.left
      }, {
        el: {
          type: "bi.label",
          height: o.height,
          hgap: 5,
          text: "-",
          ref: function ref(_ref) {
            self.label = _ref;
          }
        }
      }, {
        el: self.right
      }]
    };
  },
  _createCombo: function _createCombo(v, watermark) {
    var self = this,
        o = this.options;
    var combo = BI.createWidget({
      type: "bi.dynamic_year_month_combo",
      supportDynamic: o.supportDynamic,
      height: o.height,
      minDate: o.minDate,
      maxDate: o.maxDate,
      behaviors: o.behaviors,
      value: v,
      watermark: watermark,
      listeners: [{
        eventName: BI.DynamicYearMonthCombo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.YearMonthInterval.EVENT_BEFORE_POPUPVIEW);
        }
      }]
    });
    combo.on(BI.DynamicYearMonthCombo.EVENT_ERROR, function () {
      self._clearTitle();

      BI.Bubbles.hide("error");
      self.element.removeClass(self.constants.timeErrorCls);
      self.fireEvent(BI.YearMonthInterval.EVENT_ERROR);
    });
    combo.on(BI.DynamicYearMonthCombo.EVENT_VALID, function () {
      self._checkValid();
    });
    combo.on(BI.DynamicYearMonthCombo.EVENT_FOCUS, function () {
      self._checkValid();
    });
    combo.on(BI.DynamicYearMonthCombo.EVENT_CONFIRM, function () {
      BI.Bubbles.hide("error");
      var smallDate = self.left.getKey(),
          bigDate = self.right.getKey();

      if (self.left.isStateValid() && self.right.isStateValid() && self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
        self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

        self.element.addClass(self.constants.timeErrorCls);
        self.fireEvent(BI.YearMonthInterval.EVENT_ERROR);
      } else {
        self._clearTitle();

        self.element.removeClass(self.constants.timeErrorCls);
        self.fireEvent(BI.YearMonthInterval.EVENT_CHANGE);
      }
    });
    return combo;
  },
  _dateCheck: function _dateCheck(date) {
    return BI.print(BI.parseDateTime(date, "%Y-%x"), "%Y-%x") === date || BI.print(BI.parseDateTime(date, "%Y-%X"), "%Y-%X") === date;
  },
  // 判是否在最大最小之间
  _checkVoid: function _checkVoid(obj) {
    var o = this.options;
    return !BI.checkDateVoid(obj.year, obj.month, 1, o.minDate, o.maxDate)[0];
  },
  // 判格式合法
  _check: function _check(smallDate, bigDate) {
    var smallObj = smallDate.match(/\d+/g),
        bigObj = bigDate.match(/\d+/g);
    var smallDate4Check = "";

    if (BI.isNotNull(smallObj)) {
      smallDate4Check = (smallObj[0] || "") + "-" + (smallObj[1] || 1);
    }

    var bigDate4Check = "";

    if (BI.isNotNull(bigObj)) {
      bigDate4Check = (bigObj[0] || "") + "-" + (bigObj[1] || 1);
    }

    return this._dateCheck(smallDate4Check) && BI.checkDateLegal(smallDate4Check) && this._checkVoid({
      year: smallObj[0],
      month: smallObj[1] || 1,
      day: 1
    }) && this._dateCheck(bigDate4Check) && BI.checkDateLegal(bigDate4Check) && this._checkVoid({
      year: bigObj[0],
      month: bigObj[1] || 1,
      day: 1
    });
  },
  _compare: function _compare(smallDate, bigDate) {
    smallDate = BI.print(BI.parseDateTime(smallDate, "%Y-%X"), "%Y-%X");
    bigDate = BI.print(BI.parseDateTime(bigDate, "%Y-%X"), "%Y-%X");
    return BI.isNotNull(smallDate) && BI.isNotNull(bigDate) && smallDate > bigDate;
  },
  _setTitle: function _setTitle(v) {
    this.setTitle(v);
  },
  _clearTitle: function _clearTitle() {
    this.setTitle("");
  },
  _checkValid: function _checkValid() {
    var self = this;
    BI.Bubbles.hide("error");
    var smallDate = self.left.getKey(),
        bigDate = self.right.getKey();

    if (self.left.isValid() && self.right.isValid() && self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
      self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

      self.element.addClass(self.constants.timeErrorCls);
      BI.Bubbles.show("error", BI.i18nText("BI-Time_Interval_Error_Text"), self, {
        offsetStyle: "center"
      });
      self.fireEvent(BI.YearMonthInterval.EVENT_ERROR);
    } else {
      self._clearTitle();

      self.element.removeClass(self.constants.timeErrorCls);
    }
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;
    o.minDate = minDate;
    this.left.setMinDate(minDate);
    this.right.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;
    o.maxDate = maxDate;
    this.left.setMaxDate(maxDate);
    this.right.setMaxDate(maxDate);
  },
  setValue: function setValue(date) {
    date = date || {};
    this.left.setValue(date.start);
    this.right.setValue(date.end);

    this._checkValid();
  },
  getValue: function getValue() {
    return {
      start: this.left.getValue(),
      end: this.right.getValue()
    };
  }
});
BI.YearMonthInterval.EVENT_VALID = "EVENT_VALID";
BI.YearMonthInterval.EVENT_ERROR = "EVENT_ERROR";
BI.YearMonthInterval.EVENT_CHANGE = "EVENT_CHANGE";
BI.YearMonthInterval.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.year_month_interval", BI.YearMonthInterval);

/***/ }),
/* 902 */
/***/ (function(module, exports) {

/**
 * 年季度展示面板
 *
 * Created by GUY on 2015/9/2.
 * @class BI.YearCard
 * @extends BI.Trigger
 */
BI.DynamicYearQuarterCard = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-year-quarter-card"
  },
  render: function render() {
    var self = this;
    return {
      type: "bi.vertical",
      items: [{
        type: "bi.label",
        text: BI.i18nText("BI-Multi_Date_Relative_Current_Time"),
        textAlign: "left",
        height: BI.SIZE_CONSANTS.LIST_ITEM_HEIGHT
      }, {
        type: "bi.vertical",
        ref: function ref(_ref) {
          self.wrapper = _ref;
        },
        items: [{
          el: {
            type: "bi.dynamic_date_param_item",
            validationChecker: BI.bind(self._checkDate, self),
            ref: function ref() {
              self.year = this;
            },
            listeners: [{
              eventName: "EVENT_CHANGE",
              action: function action() {
                self.fireEvent("EVENT_CHANGE");
              }
            }, {
              eventName: "EVENT_INPUT_CHANGE",
              action: function action() {
                BI.Bubbles.hide("dynamic-year-quarter-error");
              }
            }]
          },
          bgap: 10
        }, {
          type: "bi.dynamic_date_param_item",
          dateType: BI.DynamicDateCard.TYPE.QUARTER,
          ref: function ref() {
            self.quarter = this;
          },
          listeners: [{
            eventName: "EVENT_CHANGE",
            action: function action() {
              self.fireEvent("EVENT_CHANGE");
            }
          }, {
            eventName: "EVENT_INPUT_CHANGE",
            action: function action() {
              BI.Bubbles.hide("dynamic-year-quarter-error");
            }
          }]
        }]
      }],
      vgap: 10,
      hgap: 10
    };
  },
  _getErrorText: function _getErrorText() {
    var o = this.options;
    var start = BI.parseDateTime(o.min, "%Y-%X-%d");
    var end = BI.parseDateTime(o.max, "%Y-%X-%d");
    return BI.i18nText("BI-Basic_Year_Quarter_Range_Error", start.getFullYear(), BI.getQuarter(start), end.getFullYear(), BI.getQuarter(end));
  },
  _checkDate: function _checkDate(obj) {
    var o = this.options;
    var date = BI.DynamicDateHelper.getCalculation(BI.extend(this._getValue(), this._digestDateTypeValue(obj)));
    return !BI.checkDateVoid(date.getFullYear(), date.getMonth() + 1, date.getDate(), o.min, o.max)[0];
  },
  _digestDateTypeValue: function _digestDateTypeValue(value) {
    var valueMap = {};

    switch (value.dateType) {
      case BI.DynamicDateCard.TYPE.YEAR:
        valueMap.year = value.offset === 0 ? -value.value : +value.value;
        break;

      case BI.DynamicDateCard.TYPE.QUARTER:
        valueMap.quarter = value.offset === 0 ? -value.value : +value.value;
        break;

      default:
        break;
    }

    return valueMap;
  },
  _createValue: function _createValue(type, v) {
    return {
      dateType: type,
      value: Math.abs(v),
      offset: v > 0 ? 1 : 0
    };
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
    }
  },
  setValue: function setValue(v) {
    v = v || {
      year: 0,
      quarter: 0
    };
    this.year.setValue(this._createValue(BI.DynamicDateCard.TYPE.YEAR, v.year));
    this.quarter.setValue(this._createValue(BI.DynamicDateCard.TYPE.QUARTER, v.quarter));
  },
  _getValue: function _getValue() {
    var year = this.year.getValue();
    var quarter = this.quarter.getValue();
    return {
      year: year.offset === 0 ? -year.value : year.value,
      quarter: quarter.offset === 0 ? -quarter.value : quarter.value
    };
  },
  getInputValue: function getInputValue() {
    return this._getValue();
  },
  getValue: function getValue() {
    return this.checkValidation() ? this._getValue() : {};
  },
  checkValidation: function checkValidation(show) {
    var errorText;
    var yearInvalid = !this.year.checkValidation();
    var quarterInvalid = !this.quarter.checkValidation();
    var invalid = yearInvalid || quarterInvalid;

    if (invalid) {
      errorText = BI.i18nText("BI-Please_Input_Natural_Number");
    } else {
      invalid = !this._checkDate(this._getValue());
      errorText = this._getErrorText();
    }

    invalid && show && BI.Bubbles.show("dynamic-year-quarter-error", errorText, this.wrapper);
    return !invalid;
  }
});
BI.DynamicYearQuarterCard.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.dynamic_year_quarter_card", BI.DynamicYearQuarterCard);

/***/ }),
/* 903 */
/***/ (function(module, exports) {

BI.StaticYearQuarterCard = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-static-year-quarter-card",
    behaviors: {}
  },
  _createQuarter: function _createQuarter() {
    var self = this;
    var items = [{
      text: BI.getQuarterName(1),
      value: 1
    }, {
      text: BI.getQuarterName(2),
      value: 2
    }, {
      text: BI.getQuarterName(3),
      value: 3
    }, {
      text: BI.getQuarterName(4),
      value: 4
    }];
    return BI.map(items, function (j, item) {
      return BI.extend(item, {
        type: "bi.text_item",
        cls: "bi-border-radius bi-list-item-select",
        textAlign: "center",
        whiteSpace: "nowrap",
        once: false,
        forceSelected: true,
        height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT,
        ref: function ref(_ref) {
          self.quarterMap[j + 1] = _ref;
        }
      });
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.quarterMap = {};
    return {
      type: "bi.vertical",
      items: [{
        type: "bi.year_picker",
        cls: "bi-split-bottom",
        ref: function ref() {
          self.yearPicker = this;
        },
        min: o.min,
        max: o.max,
        behaviors: o.behaviors,
        height: 30,
        listeners: [{
          eventName: BI.YearPicker.EVENT_CHANGE,
          action: function action() {
            var value = this.getValue();

            self._checkQuarterStatus(value);

            self.setValue({
              year: value,
              quarter: self.selectedQuarter
            });
          }
        }]
      }, {
        el: {
          type: "bi.button_group",
          behaviors: o.behaviors,
          ref: function ref() {
            self.quarter = this;
          },
          items: this._createQuarter(),
          layouts: [{
            type: "bi.vertical",
            vgap: 10,
            hgap: 12
          }],
          value: o.value,
          listeners: [{
            eventName: BI.ButtonGroup.EVENT_CHANGE,
            action: function action() {
              self.selectedYear = self.yearPicker.getValue();
              self.selectedQuarter = this.getValue()[0];
              self.fireEvent(BI.StaticYearQuarterCard.EVENT_CHANGE);
            }
          }]
        },
        vgap: 5
      }]
    };
  },
  _checkQuarterStatus: function _checkQuarterStatus(year) {
    var o = this.options;
    var minDate = BI.parseDateTime(o.min, "%Y-%X-%d"),
        maxDate = BI.parseDateTime(o.max, "%Y-%X-%d");
    var minYear = minDate.getFullYear(),
        maxYear = maxDate.getFullYear();
    var minQuarter = 1;
    var maxQuarter = 4;
    minYear === year && (minQuarter = BI.parseInt(BI.getQuarter(minDate)));
    maxYear === year && (maxQuarter = BI.parseInt(BI.getQuarter(maxDate)));
    var yearInvalid = year < minYear || year > maxYear;
    BI.each(this.quarterMap, function (quarter, obj) {
      var quarterInvalid = quarter < minQuarter || quarter > maxQuarter;
      obj.setEnable(!yearInvalid && !quarterInvalid);
    });
  },
  setMinDate: function setMinDate(minDate) {
    if (this.options.min !== minDate) {
      this.options.min = minDate;
      this.yearPicker.setMinDate(minDate);

      this._checkQuarterStatus(this.selectedYear);
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (this.options.max !== maxDate) {
      this.options.max = maxDate;
      this.yearPicker.setMaxDate(maxDate);

      this._checkQuarterStatus(this.selectedYear);
    }
  },
  getValue: function getValue() {
    return {
      year: this.selectedYear,
      quarter: this.selectedQuarter
    };
  },
  setValue: function setValue(obj) {
    var o = this.options;
    var newObj = {};
    newObj.year = obj.year || 0;
    newObj.quarter = obj.quarter || 0;

    if (newObj.quarter === 0 || newObj.year === 0 || BI.checkDateVoid(newObj.year, newObj.quarter, 1, o.min, o.max)[0]) {
      var year = newObj.year || BI.getDate().getFullYear();
      this.selectedYear = year;
      this.selectedQuarter = "";
      this.yearPicker.setValue(year);
      this.quarter.setValue();
    } else {
      this.selectedYear = BI.parseInt(newObj.year);
      this.selectedQuarter = BI.parseInt(newObj.quarter);
      this.yearPicker.setValue(this.selectedYear);
      this.quarter.setValue(this.selectedQuarter);
    }

    this._checkQuarterStatus(this.selectedYear);
  }
});
BI.StaticYearQuarterCard.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.static_year_quarter_card", BI.StaticYearQuarterCard);

/***/ }),
/* 904 */
/***/ (function(module, exports) {

BI.DynamicYearQuarterCombo = BI.inherit(BI.Widget, {
  _consts: {
    iconWidth: 24
  },
  props: {
    baseCls: "bi-year-quarter-combo",
    behaviors: {},
    minDate: "1900-01-01",
    // 最小日期
    maxDate: "2099-12-31",
    // 最大日期
    height: 24,
    supportDynamic: true,
    isNeedAdjustHeight: false,
    isNeedAdjustWidth: false
  },
  _init: function _init() {
    var self = this,
        o = this.options;

    BI.DynamicYearQuarterCombo.superclass._init.apply(this, arguments);

    this.storeValue = o.value;
    var border = o.simple ? 1 : 2;
    self.storeTriggerValue = "";
    this.trigger = BI.createWidget({
      type: "bi.dynamic_year_quarter_trigger",
      simple: o.simple,
      min: o.minDate,
      max: o.maxDate,
      height: BI.toPix(o.height, border),
      value: o.value || "",
      watermark: o.watermark
    });
    this.trigger.on(BI.DynamicYearQuarterTrigger.EVENT_KEY_DOWN, function () {
      self.combo.isViewVisible() && self.combo.hideView();
    });
    this.trigger.on(BI.DynamicYearQuarterTrigger.EVENT_START, function () {
      self.combo.isViewVisible() && self.combo.hideView();
    });
    this.trigger.on(BI.DynamicYearQuarterTrigger.EVENT_STOP, function () {
      self.combo.showView();
    });
    this.trigger.on(BI.DynamicYearQuarterTrigger.EVENT_ERROR, function () {
      self.combo.isViewVisible() && self.combo.hideView();
      self.comboWrapper.element.addClass("error");
      self.fireEvent(BI.DynamicYearQuarterCombo.EVENT_ERROR);
    });
    this.trigger.on(BI.DynamicYearQuarterTrigger.EVENT_VALID, function () {
      self.comboWrapper.element.removeClass("error");
      self.fireEvent(BI.DynamicYearMonthCombo.EVENT_VALID);
    });
    this.trigger.on(BI.DynamicYearQuarterTrigger.EVENT_CONFIRM, function () {
      var dateStore = self.storeTriggerValue;
      var dateObj = self.trigger.getKey();

      if (BI.isEqual(dateObj, dateStore)) {
        return;
      }

      if (BI.isNotEmptyString(dateObj) && !BI.isEqual(dateObj, dateStore)) {
        self.storeValue = self.trigger.getValue();
        self.setValue(self.trigger.getValue());
      }

      self._checkDynamicValue(self.storeValue);

      self.fireEvent(BI.DynamicYearQuarterCombo.EVENT_CONFIRM);
    });
    this.trigger.on(BI.DynamicYearQuarterTrigger.EVENT_FOCUS, function () {
      self.storeTriggerValue = self.trigger.getKey();
      self.fireEvent(BI.DynamicYearQuarterCombo.EVENT_FOCUS);
    });
    this.combo = BI.createWidget({
      type: "bi.combo",
      container: o.container,
      isNeedAdjustHeight: o.isNeedAdjustHeight,
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      el: this.trigger,
      destroyWhenHide: true,
      adjustLength: 1,
      popup: {
        minWidth: 85,
        stopPropagation: false,
        el: {
          type: "bi.dynamic_year_quarter_popup",
          width: o.isNeedAdjustWidth ? o.width : undefined,
          supportDynamic: o.supportDynamic,
          ref: function ref() {
            self.popup = this;
          },
          listeners: [{
            eventName: BI.DynamicYearQuarterPopup.EVENT_CHANGE,
            action: function action() {
              self.setValue(self.popup.getValue());
              self.combo.hideView();
              self.fireEvent(BI.DynamicYearQuarterCombo.EVENT_CONFIRM);
            }
          }, {
            eventName: BI.DynamicYearQuarterPopup.BUTTON_CLEAR_EVENT_CHANGE,
            action: function action() {
              self.setValue();
              self.combo.hideView();
              self.fireEvent(BI.DynamicYearQuarterCombo.EVENT_CONFIRM);
            }
          }, {
            eventName: BI.DynamicYearQuarterPopup.BUTTON_lABEL_EVENT_CHANGE,
            action: function action() {
              var date = BI.getDate();
              self.setValue({
                type: BI.DynamicYearMonthCombo.Static,
                value: {
                  year: date.getFullYear(),
                  quarter: BI.getQuarter(date)
                }
              });
              self.combo.hideView();
              self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
            }
          }, {
            eventName: BI.DynamicYearQuarterPopup.BUTTON_OK_EVENT_CHANGE,
            action: function action() {
              var value = self.popup.getValue();

              if (self._checkValue(value)) {
                self.setValue(value);
              }

              self.combo.hideView();
              self.fireEvent(BI.DynamicDateCombo.EVENT_CONFIRM);
            }
          }],
          behaviors: o.behaviors,
          min: o.minDate,
          max: o.maxDate
        },
        value: o.value || ""
      }
    });
    this.combo.on(BI.Combo.EVENT_BEFORE_POPUPVIEW, function () {
      self.popup.setMinDate(o.minDate);
      self.popup.setMaxDate(o.maxDate);
      self.popup.setValue(self.storeValue);
      self.fireEvent(BI.DynamicYearQuarterCombo.EVENT_BEFORE_POPUPVIEW);
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: {
          type: "bi.horizontal_fill",
          columnSize: ["", "fill"],
          cls: (o.simple ? "bi-border-bottom" : "bi-border bi-border-radius") + " bi-focus-shadow",
          ref: function ref() {
            self.comboWrapper = this;
          },
          items: [{
            el: {
              type: "bi.icon_button",
              cls: "bi-trigger-icon-button date-change-h-font",
              width: this._consts.iconWidth,
              height: BI.toPix(o.height, border),
              ref: function ref() {
                self.changeIcon = this;
              }
            }
          }, this.combo]
        },
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      }]
    });

    this._checkDynamicValue(o.value);
  },
  _checkDynamicValue: function _checkDynamicValue(v) {
    var type = null;

    if (BI.isNotNull(v)) {
      type = v.type;
    }

    switch (type) {
      case BI.DynamicYearQuarterCombo.Dynamic:
        this.changeIcon.setVisible(true);
        break;

      default:
        this.changeIcon.setVisible(false);
        break;
    }
  },
  _checkValue: function _checkValue(v) {
    var o = this.options;

    switch (v.type) {
      case BI.DynamicDateCombo.Dynamic:
        return BI.isNotEmptyObject(v.value);

      case BI.DynamicDateCombo.Static:
        var value = v.value || {};
        return !BI.checkDateVoid(value.year, (value.quarter - 1) * 3 + 1, 1, o.minDate, o.maxDate)[0];

      default:
        return true;
    }
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;
    o.minDate = minDate;
    this.trigger.setMinDate(minDate);
    this.popup && this.popup.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;
    o.maxDate = maxDate;
    this.trigger.setMaxDate(maxDate);
    this.popup && this.popup.setMaxDate(maxDate);
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  getKey: function getKey() {
    return this.trigger.getKey();
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    this.trigger.setValue(v);

    this._checkDynamicValue(v);
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  isStateValid: function isStateValid() {
    return this.trigger.isStateValid();
  }
});
BI.DynamicYearQuarterCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DynamicYearQuarterCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.DynamicYearQuarterCombo.EVENT_ERROR = "EVENT_ERROR";
BI.DynamicYearQuarterCombo.EVENT_VALID = "EVENT_VALID";
BI.DynamicYearQuarterCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.shortcut("bi.dynamic_year_quarter_combo", BI.DynamicYearQuarterCombo);
BI.extend(BI.DynamicYearQuarterCombo, {
  Static: 1,
  Dynamic: 2
});

/***/ }),
/* 905 */
/***/ (function(module, exports) {

BI.DynamicYearQuarterPopup = BI.inherit(BI.Widget, {
  constants: {
    tabHeight: 40,
    buttonHeight: 24
  },
  props: {
    baseCls: "bi-year-quarter-popup",
    behaviors: {},
    min: "1900-01-01",
    // 最小日期
    max: "2099-12-31",
    // 最大日期,
    width: 180,
    supportDynamic: true
  },
  render: function render() {
    var self = this,
        opts = this.options,
        c = this.constants;
    this.storeValue = {
      type: BI.DynamicYearQuarterCombo.Static
    };
    return {
      type: "bi.vertical",
      items: [{
        el: this._getTabJson()
      }, {
        el: {
          type: "bi.grid",
          items: [[{
            type: "bi.text_button",
            cls: "bi-split-top bi-high-light",
            shadow: true,
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            text: BI.i18nText("BI-Basic_Clear"),
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.DynamicYearQuarterPopup.BUTTON_CLEAR_EVENT_CHANGE);
              }
            }]
          }, {
            type: "bi.text_button",
            cls: "bi-split-left bi-split-right bi-high-light bi-split-top",
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            shadow: true,
            text: BI.i18nText("BI-Basic_Current_Quarter"),
            disabled: this._checkTodayValid(),
            ref: function ref() {
              self.textButton = this;
            },
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                self.fireEvent(BI.DynamicYearQuarterPopup.BUTTON_lABEL_EVENT_CHANGE);
              }
            }]
          }, {
            type: "bi.text_button",
            cls: "bi-split-top bi-high-light",
            shadow: true,
            textHeight: BI.toPix(BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT, 1),
            text: BI.i18nText("BI-Basic_OK"),
            listeners: [{
              eventName: BI.TextButton.EVENT_CHANGE,
              action: function action() {
                var type = self.dateTab.getSelect();

                if (type === BI.DynamicDateCombo.Dynamic) {
                  self.dynamicPane.checkValidation(true) && self.fireEvent(BI.DynamicDatePopup.BUTTON_OK_EVENT_CHANGE);
                } else {
                  self.fireEvent(BI.DynamicYearQuarterPopup.BUTTON_OK_EVENT_CHANGE);
                }
              }
            }]
          }]],
          height: BI.SIZE_CONSANTS.TOOL_BAR_HEIGHT
        }
      }]
    };
  },
  _setInnerValue: function _setInnerValue() {
    if (this.dateTab.getSelect() === BI.DynamicYearQuarterCombo.Static) {
      this.textButton.setValue(BI.i18nText("BI-Basic_Current_Quarter"));
      this.textButton.setEnable(!this._checkTodayValid());
    } else {
      var date = BI.DynamicDateHelper.getCalculation(this.dynamicPane.getInputValue());
      date = BI.print(date, "%Y-%Q");
      this.textButton.setValue(date);
      this.textButton.setEnable(false);
    }
  },
  _checkTodayValid: function _checkTodayValid() {
    var o = this.options;
    var today = BI.getDate();
    return !!BI.checkDateVoid(today.getFullYear(), today.getMonth() + 1, today.getDate(), o.min, o.max)[0];
  },
  _getTabJson: function _getTabJson() {
    var self = this,
        o = this.options;
    return {
      type: "bi.tab",
      logic: {
        dynamic: true
      },
      ref: function ref() {
        self.dateTab = this;
      },
      tab: {
        type: "bi.linear_segment",
        cls: "bi-split-bottom",
        invisible: !o.supportDynamic,
        height: this.constants.tabHeight,
        items: BI.createItems([{
          text: BI.i18nText("BI-Basic_Year_Quarter"),
          value: BI.DynamicYearQuarterCombo.Static
        }, {
          text: BI.i18nText("BI-Basic_Dynamic_Title"),
          value: BI.DynamicYearQuarterCombo.Dynamic
        }], {
          textAlign: "center"
        })
      },
      cardCreator: function cardCreator(v) {
        switch (v) {
          case BI.DynamicYearQuarterCombo.Dynamic:
            return {
              type: "bi.dynamic_year_quarter_card",
              cls: "dynamic-year-quarter-pane",
              min: self.options.min,
              max: self.options.max,
              listeners: [{
                eventName: "EVENT_CHANGE",
                action: function action() {
                  self._setInnerValue(self.year, v);
                }
              }],
              ref: function ref() {
                self.dynamicPane = this;
              }
            };

          case BI.DynamicYearQuarterCombo.Static:
          default:
            return {
              type: "bi.static_year_quarter_card",
              behaviors: o.behaviors,
              min: self.options.min,
              max: self.options.max,
              listeners: [{
                eventName: BI.DynamicYearCard.EVENT_CHANGE,
                action: function action() {
                  self.fireEvent(BI.DynamicYearQuarterPopup.EVENT_CHANGE);
                }
              }],
              ref: function ref() {
                self.year = this;
              }
            };
        }
      },
      listeners: [{
        eventName: BI.Tab.EVENT_CHANGE,
        action: function action() {
          var v = self.dateTab.getSelect();

          switch (v) {
            case BI.DynamicYearQuarterCombo.Static:
              var date = BI.DynamicDateHelper.getCalculation(self.dynamicPane.getValue());
              self.year.setValue({
                year: date.getFullYear(),
                quarter: BI.getQuarter(date)
              });

              self._setInnerValue();

              break;

            case BI.DynamicYearQuarterCombo.Dynamic:
            default:
              if (self.storeValue && self.storeValue.type === BI.DynamicYearQuarterCombo.Dynamic) {
                self.dynamicPane.setValue(self.storeValue.value);
              } else {
                self.dynamicPane.setValue({
                  year: 0
                });
              }

              self._setInnerValue();

              break;
          }
        }
      }]
    };
  },
  setMinDate: function setMinDate(minDate) {
    if (this.options.min !== minDate) {
      this.options.min = minDate;
      this.year && this.year.setMinDate(minDate);
      this.dynamicPane && this.dynamicPane.setMinDate(minDate);
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (this.options.max !== maxDate) {
      this.options.max = maxDate;
      this.year && this.year.setMaxDate(maxDate);
      this.dynamicPane && this.dynamicPane.setMaxDate(maxDate);
    }
  },
  setValue: function setValue(v) {
    this.storeValue = v;
    var self = this;
    var type, value;
    v = v || {};
    type = v.type || BI.DynamicDateCombo.Static;
    value = v.value || v;
    this.dateTab.setSelect(type);

    switch (type) {
      case BI.DynamicDateCombo.Dynamic:
        this.dynamicPane.setValue(value);

        self._setInnerValue();

        break;

      case BI.DynamicDateCombo.Static:
      default:
        this.year.setValue(value);
        this.textButton.setValue(BI.i18nText("BI-Basic_Current_Quarter"));
        this.textButton.setEnable(!this._checkTodayValid());
        break;
    }
  },
  getValue: function getValue() {
    return {
      type: this.dateTab.getSelect(),
      value: this.dateTab.getValue()
    };
  }
});
BI.DynamicYearQuarterPopup.BUTTON_CLEAR_EVENT_CHANGE = "BUTTON_CLEAR_EVENT_CHANGE";
BI.DynamicYearQuarterPopup.BUTTON_lABEL_EVENT_CHANGE = "BUTTON_lABEL_EVENT_CHANGE";
BI.DynamicYearQuarterPopup.BUTTON_OK_EVENT_CHANGE = "BUTTON_OK_EVENT_CHANGE";
BI.DynamicYearQuarterPopup.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.dynamic_year_quarter_popup", BI.DynamicYearQuarterPopup);

/***/ }),
/* 906 */
/***/ (function(module, exports) {

BI.DynamicYearQuarterTrigger = BI.inherit(BI.Trigger, {
  _const: {
    hgap: 4,
    vgap: 2,
    iconWidth: 24
  },
  props: function props() {
    return {
      extraCls: "bi-year-quarter-trigger",
      min: "1900-01-01",
      // 最小日期
      max: "2099-12-31",
      // 最大日期
      height: 24,
      watermark: {
        year: BI.i18nText("BI-Basic_Unrestricted"),
        quarter: BI.i18nText("BI-Basic_Unrestricted")
      }
    };
  },
  _init: function _init() {
    BI.DynamicYearQuarterTrigger.superclass._init.apply(this, arguments);

    var o = this.options;
    this.yearEditor = this._createEditor(true);
    this.quarterEditor = this._createEditor(false); // 暂时的解决方法

    var height = o.height + 2;
    BI.createWidget({
      element: this,
      type: "bi.htape",
      items: [{
        type: "bi.center",
        items: [{
          type: "bi.horizontal_fill",
          columnSize: ["fill", ""],
          items: [this.yearEditor, {
            el: {
              type: "bi.text_button",
              text: BI.i18nText("BI-Multi_Date_Year")
            }
          }]
        }, {
          type: "bi.horizontal_fill",
          columnSize: ["fill", ""],
          items: [this.quarterEditor, {
            el: {
              type: "bi.text_button",
              text: BI.i18nText("BI-Multi_Date_Quarter")
            }
          }]
        }]
      }, {
        el: {
          type: "bi.trigger_icon_button",
          width: this._const.iconWidth
        },
        width: this._const.iconWidth
      }]
    });
    this.setValue(o.value);
  },
  _createEditor: function _createEditor(isYear) {
    var _o$watermark, _o$watermark2;

    var self = this,
        o = this.options,
        c = this._const;
    var editor = BI.createWidget({
      type: "bi.sign_editor",
      simple: o.simple,
      height: o.height,
      validationChecker: function validationChecker(v) {
        if (isYear) {
          var month = self.quarterEditor.getValue();

          if (BI.isEmptyString(month)) {
            month = parseInt(v, 10) === BI.parseDateTime(o.min, "%Y-%X-%d").getFullYear() ? BI.parseDateTime(o.min, "%Y-%X-%d").getMonth() + 1 : 1;
          } else {
            month = (parseInt(month, 10) - 1) * 3 + 1;
          }

          return v === "" || BI.isPositiveInteger(v) && !BI.checkDateVoid(v, month, 1, o.min, o.max)[0];
        }

        var year = self.yearEditor.getValue();
        return v === "" || BI.isPositiveInteger(v) && v >= 1 && v <= 4 && (BI.isEmptyString(year) ? true : !BI.checkDateVoid(self.yearEditor.getValue(), (v - 1) * 3 + 1, 1, o.min, o.max)[0]);
      },
      quitChecker: function quitChecker() {
        return false;
      },
      errorText: function errorText(v) {
        var year = isYear ? v : self.yearEditor.getValue();
        var quarter = isYear ? self.quarterEditor.getValue() : v;

        if (!BI.isPositiveInteger(year) || !BI.isPositiveInteger(quarter) || quarter > 4) {
          return BI.i18nText("BI-Year_Trigger_Invalid_Text");
        }

        var start = BI.parseDateTime(o.min, "%Y-%X-%d");
        var end = BI.parseDateTime(o.max, "%Y-%X-%d");
        return BI.i18nText("BI-Basic_Year_Quarter_Range_Error", start.getFullYear(), BI.getQuarter(start), end.getFullYear(), BI.getQuarter(end));
      },
      watermark: isYear ? (_o$watermark = o.watermark) === null || _o$watermark === void 0 ? void 0 : _o$watermark.year : (_o$watermark2 = o.watermark) === null || _o$watermark2 === void 0 ? void 0 : _o$watermark2.quarter,
      hgap: c.hgap,
      vgap: c.vgap,
      allowBlank: true
    });
    editor.on(BI.SignEditor.EVENT_KEY_DOWN, function () {
      self.fireEvent(BI.DynamicYearQuarterTrigger.EVENT_KEY_DOWN);
    });
    editor.on(BI.SignEditor.EVENT_FOCUS, function () {
      self.fireEvent(BI.DynamicYearQuarterTrigger.EVENT_FOCUS);
    });
    editor.on(BI.SignEditor.EVENT_STOP, function () {
      self.fireEvent(BI.DynamicYearQuarterTrigger.EVENT_STOP);
    });
    editor.on(BI.SignEditor.EVENT_CONFIRM, function () {
      self._doEditorConfirm(editor);

      self.fireEvent(BI.DynamicYearQuarterTrigger.EVENT_CONFIRM);
    });
    editor.on(BI.SignEditor.EVENT_SPACE, function () {
      if (editor.isValid()) {
        editor.blur();
      }
    });
    editor.on(BI.SignEditor.EVENT_START, function () {
      self.fireEvent(BI.DynamicYearQuarterTrigger.EVENT_START);
    });
    editor.on(BI.SignEditor.EVENT_ERROR, function () {
      self.fireEvent(BI.DynamicYearQuarterTrigger.EVENT_ERROR);
    });
    editor.on(BI.SignEditor.EVENT_VALID, function () {
      var year = self.yearEditor.getValue();
      var quarter = self.quarterEditor.getValue();

      if (BI.isNotEmptyString(year) && BI.isNotEmptyString(quarter)) {
        if (BI.isPositiveInteger(year) && quarter >= 1 && quarter <= 4 && !BI.checkDateVoid(year, (quarter - 1) * 3 + 1, 1, o.min, o.max)[0]) {
          self.fireEvent(BI.DynamicYearMonthTrigger.EVENT_VALID);
        }
      }
    });
    editor.on(BI.SignEditor.EVENT_CHANGE, function () {
      if (isYear) {
        self._autoSwitch(editor);
      }
    });
    return editor;
  },
  _doEditorConfirm: function _doEditorConfirm(editor) {
    var value = editor.getValue();

    if (BI.isNotNull(value)) {
      editor.setValue(value);
    }

    var quarterValue = this.quarterEditor.getValue();
    this.storeValue = {
      type: BI.DynamicYearQuarterCombo.Static,
      value: {
        year: this.yearEditor.getValue(),
        quarter: BI.isEmptyString(this.quarterEditor.getValue()) ? "" : quarterValue
      }
    };
    this.setTitle(this._getStaticTitle(this.storeValue.value));
  },
  _yearCheck: function _yearCheck(v) {
    var date = BI.print(BI.parseDateTime(v, "%Y-%X-%d"), "%Y-%X-%d");
    return BI.print(BI.parseDateTime(v, "%Y"), "%Y") === v && date >= this.options.min && date <= this.options.max;
  },
  _autoSwitch: function _autoSwitch(editor) {
    var v = editor.getValue();

    if (BI.isNotEmptyString(v) && BI.checkDateLegal(v)) {
      if (v.length === 4 && this._yearCheck(v)) {
        this._doEditorConfirm(editor);

        this.fireEvent(BI.DynamicYearQuarterTrigger.EVENT_CONFIRM);
        this.quarterEditor.focus();
      }
    }
  },
  _getStaticTitle: function _getStaticTitle(value) {
    value = value || {};
    var hasYear = !(BI.isNull(value.year) || BI.isEmptyString(value.year));
    var hasMonth = !(BI.isNull(value.quarter) || BI.isEmptyString(value.quarter));

    switch (hasYear << 1 | hasMonth) {
      // !hasYear && !hasMonth
      case 0:
        return "";
      // !hasYear && hasMonth

      case 1:
        return value.quarter;
      // hasYear && !hasMonth

      case 2:
        return value.year;
      // hasYear && hasMonth

      case 3:
      default:
        return value.year + "-" + value.quarter;
    }
  },
  _getText: function _getText(obj) {
    var value = "";

    if (BI.isNotNull(obj.year) && BI.parseInt(obj.year) !== 0) {
      value += Math.abs(obj.year) + BI.i18nText("BI-Basic_Year") + (obj.year < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
    }

    if (BI.isNotNull(obj.quarter) && BI.parseInt(obj.quarter) !== 0) {
      value += Math.abs(obj.quarter) + BI.i18nText("BI-Basic_Single_Quarter") + (obj.quarter < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
    }

    return value;
  },
  _setInnerValue: function _setInnerValue(date, text) {
    var dateStr = BI.print(date, "%Y-%Q");
    this.yearEditor.setValue(date.getFullYear());
    this.quarterEditor.setValue(BI.getQuarter(date));
    this.setTitle(BI.isEmptyString(text) ? dateStr : text + ":" + dateStr);
  },
  setMinDate: function setMinDate(minDate) {
    if (BI.isNotEmptyString(this.options.min)) {
      this.options.min = minDate;
    }
  },
  setMaxDate: function setMaxDate(maxDate) {
    if (BI.isNotEmptyString(this.options.max)) {
      this.options.max = maxDate;
    }
  },
  setValue: function setValue(v) {
    var type, value;
    var date = BI.getDate();
    this.storeValue = v;

    if (BI.isNotNull(v)) {
      type = v.type || BI.DynamicYearQuarterCombo.Static;
      value = v.value || v;
    }

    switch (type) {
      case BI.DynamicYearQuarterCombo.Dynamic:
        var text = this._getText(value);

        date = BI.DynamicDateHelper.getCalculation(value);

        this._setInnerValue(date, text);

        break;

      case BI.DynamicYearQuarterCombo.Static:
      default:
        value = value || {};
        var quarter = BI.isNull(value.quarter) ? null : value.quarter;
        this.yearEditor.setValue(value.year);
        this.quarterEditor.setValue(quarter);
        this.setTitle(this._getStaticTitle(value));
        break;
    }
  },
  getValue: function getValue() {
    return this.storeValue;
  },
  getKey: function getKey() {
    return this.yearEditor.getValue() + "-" + this.quarterEditor.getValue();
  },
  isStateValid: function isStateValid() {
    return this.yearEditor.isValid() && this.quarterEditor.isValid();
  }
});
BI.DynamicYearQuarterTrigger.EVENT_FOCUS = "EVENT_FOCUS";
BI.DynamicYearQuarterTrigger.EVENT_ERROR = "EVENT_ERROR";
BI.DynamicYearQuarterTrigger.EVENT_START = "EVENT_START";
BI.DynamicYearQuarterTrigger.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.DynamicYearQuarterTrigger.EVENT_STOP = "EVENT_STOP";
BI.DynamicYearQuarterTrigger.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.DynamicYearQuarterTrigger.EVENT_VALID = "EVENT_VALID";
BI.shortcut("bi.dynamic_year_quarter_trigger", BI.DynamicYearQuarterTrigger);

/***/ }),
/* 907 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2021/1/25
 */
BI.YearQuarterInterval = BI.inherit(BI.Single, {
  constants: {
    height: 24,
    width: 25,
    lgap: 15,
    offset: -15,
    timeErrorCls: "time-error"
  },
  props: {
    extraCls: "bi-year-quarter-interval",
    minDate: "1900-01-01",
    maxDate: "2099-12-31",
    supportDynamic: true
  },
  render: function render() {
    var _o$watermark, _o$watermark2;

    var self = this,
        o = this.options;
    o.value = o.value || {};
    this.left = this._createCombo(o.value.start, (_o$watermark = o.watermark) === null || _o$watermark === void 0 ? void 0 : _o$watermark.start);
    this.right = this._createCombo(o.value.end, (_o$watermark2 = o.watermark) === null || _o$watermark2 === void 0 ? void 0 : _o$watermark2.end);
    return {
      type: "bi.horizontal_fill",
      columnSize: ["fill", "", "fill"],
      items: [{
        el: self.left
      }, {
        el: {
          type: "bi.label",
          height: o.height,
          hgap: 5,
          text: "-",
          ref: function ref(_ref) {
            self.label = _ref;
          }
        }
      }, {
        el: self.right
      }]
    };
  },
  _createCombo: function _createCombo(v, watermark) {
    var self = this,
        o = this.options;
    var combo = BI.createWidget({
      type: "bi.dynamic_year_quarter_combo",
      supportDynamic: o.supportDynamic,
      minDate: o.minDate,
      maxDate: o.maxDate,
      behaviors: o.behaviors,
      value: v,
      height: o.height,
      watermark: watermark,
      listeners: [{
        eventName: BI.DynamicYearQuarterCombo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.YearQuarterInterval.EVENT_BEFORE_POPUPVIEW);
        }
      }]
    });
    combo.on(BI.DynamicYearQuarterCombo.EVENT_ERROR, function () {
      self._clearTitle();

      BI.Bubbles.hide("error");
      self.element.removeClass(self.constants.timeErrorCls);
      self.fireEvent(BI.YearQuarterInterval.EVENT_ERROR);
    });
    combo.on(BI.DynamicYearQuarterCombo.EVENT_VALID, function () {
      self._checkValid();
    });
    combo.on(BI.DynamicYearQuarterCombo.EVENT_FOCUS, function () {
      self._checkValid();
    });
    combo.on(BI.DynamicYearQuarterCombo.EVENT_CONFIRM, function () {
      BI.Bubbles.hide("error");
      var smallDate = self.left.getKey(),
          bigDate = self.right.getKey();

      if (self.left.isStateValid() && self.right.isStateValid() && self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
        self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

        self.element.addClass(self.constants.timeErrorCls);
        self.fireEvent(BI.YearQuarterInterval.EVENT_ERROR);
      } else {
        self._clearTitle();

        self.element.removeClass(self.constants.timeErrorCls);
        self.fireEvent(BI.YearQuarterInterval.EVENT_CHANGE);
      }
    });
    return combo;
  },
  _dateCheck: function _dateCheck(date) {
    return BI.print(BI.parseDateTime(date, "%Y-%Q"), "%Y-%Q") === date || BI.print(BI.parseDateTime(date, "%Y-%q"), "%Y-%q") === date;
  },
  // 判是否在最大最小之间
  _checkVoid: function _checkVoid(obj) {
    var o = this.options;
    return !BI.checkDateVoid(obj.year, (obj.quarter - 1) * 3 + 1, 1, o.minDate, o.maxDate)[0];
  },
  // 判格式合法
  _check: function _check(smallDate, bigDate) {
    var smallObj = smallDate.match(/\d+/g),
        bigObj = bigDate.match(/\d+/g);
    var smallDate4Check = "";

    if (BI.isNotNull(smallObj)) {
      smallDate4Check = (smallObj[0] || "") + "-" + (smallObj[1] || 1);
    }

    var bigDate4Check = "";

    if (BI.isNotNull(bigObj)) {
      bigDate4Check = (bigObj[0] || "") + "-" + (bigObj[1] || 1);
    }

    return this._dateCheck(smallDate4Check) && BI.checkDateLegal(smallDate4Check) && this._checkVoid({
      year: smallObj[0],
      quarter: smallObj[1] || 1
    }) && this._dateCheck(bigDate4Check) && BI.checkDateLegal(bigDate4Check) && this._checkVoid({
      year: bigObj[0],
      quarter: bigObj[1] || 1
    });
  },
  _compare: function _compare(smallDate, bigDate) {
    smallDate = BI.print(BI.parseDateTime(smallDate, "%Y-%Q"), "%Y-%Q");
    bigDate = BI.print(BI.parseDateTime(bigDate, "%Y-%Q"), "%Y-%Q");
    return BI.isNotNull(smallDate) && BI.isNotNull(bigDate) && smallDate > bigDate;
  },
  _setTitle: function _setTitle(v) {
    this.setTitle(v);
  },
  _clearTitle: function _clearTitle() {
    this.setTitle("");
  },
  _checkValid: function _checkValid() {
    var self = this;
    BI.Bubbles.hide("error");
    var smallDate = self.left.getKey(),
        bigDate = self.right.getKey();

    if (self.left.isValid() && self.right.isValid() && self._check(smallDate, bigDate) && self._compare(smallDate, bigDate)) {
      self._setTitle(BI.i18nText("BI-Time_Interval_Error_Text"));

      self.element.addClass(self.constants.timeErrorCls);
      BI.Bubbles.show("error", BI.i18nText("BI-Time_Interval_Error_Text"), self, {
        offsetStyle: "center"
      });
      self.fireEvent(BI.YearQuarterInterval.EVENT_ERROR);
    } else {
      self._clearTitle();

      self.element.removeClass(self.constants.timeErrorCls);
    }
  },
  setMinDate: function setMinDate(minDate) {
    var o = this.options;
    o.minDate = minDate;
    this.left.setMinDate(minDate);
    this.right.setMinDate(minDate);
  },
  setMaxDate: function setMaxDate(maxDate) {
    var o = this.options;
    o.maxDate = maxDate;
    this.left.setMaxDate(maxDate);
    this.right.setMaxDate(maxDate);
  },
  setValue: function setValue(date) {
    date = date || {};
    this.left.setValue(date.start);
    this.right.setValue(date.end);

    this._checkValid();
  },
  getValue: function getValue() {
    return {
      start: this.left.getValue(),
      end: this.right.getValue()
    };
  }
});
BI.YearQuarterInterval.EVENT_VALID = "EVENT_VALID";
BI.YearQuarterInterval.EVENT_ERROR = "EVENT_ERROR";
BI.YearQuarterInterval.EVENT_CHANGE = "EVENT_CHANGE";
BI.YearQuarterInterval.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.year_quarter_interval", BI.YearQuarterInterval);

/***/ }),
/* 908 */
/***/ (function(module, exports) {

/**
 * 简单的复选下拉框控件, 适用于数据量少的情况， 与valuechooser的区别是allvaluechooser setValue和getValue返回的是所有值
 * 封装了字段处理逻辑
 *
 * Created by GUY on 2015/10/29.
 * @class BI.AbstractAllValueChooser
 * @extends BI.Widget
 */
BI.AbstractAllValueChooser = BI.inherit(BI.Widget, {
  _const: {
    perPage: 100
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.AbstractAllValueChooser.superclass._defaultConfig.apply(this, arguments), {
      width: 200,
      height: 30,
      items: null,
      itemsCreator: BI.emptyFn,
      cache: true
    });
  },
  _valueFormatter: function _valueFormatter(v) {
    var text = v;

    if (this.options.valueFormatter) {
      return this.options.valueFormatter(v);
    }

    if (BI.isNotNull(this.items)) {
      BI.some(this.items, function (i, item) {
        // 把value都换成字符串
        // 需要考虑到value也可能是数字
        if (item.value === v || item.value + "" === v) {
          text = item.text;
          return true;
        }
      });
    }

    return text;
  },
  _getItemsByTimes: function _getItemsByTimes(items, times) {
    var res = [];

    for (var i = (times - 1) * this._const.perPage; items[i] && i < times * this._const.perPage; i++) {
      res.push(items[i]);
    }

    return res;
  },
  _hasNextByTimes: function _hasNextByTimes(items, times) {
    return times * this._const.perPage < items.length;
  },
  _itemsCreator: function _itemsCreator(options, callback) {
    var self = this,
        o = this.options;

    if (!o.cache || !this.items) {
      o.itemsCreator({}, function (items) {
        self.items = items;
        call(items);
      });
    } else {
      call(this.items);
    }

    function call(items) {
      var keywords = (options.keywords || []).slice();

      if (options.keyword) {
        keywords.push(options.keyword);
      }

      var resultItems = items;

      if (BI.isNotEmptyArray(keywords)) {
        resultItems = [];
        BI.each(keywords, function (i, kw) {
          var search = BI.Func.getSearchResult(items, kw);
          resultItems = resultItems.concat(search.match).concat(search.find);
        });
        resultItems = BI.uniq(resultItems);
      }

      if (options.selectedValues) {
        // 过滤
        var filter = BI.makeObject(options.selectedValues, true);
        resultItems = BI.filter(resultItems, function (i, ob) {
          return !filter[ob.value];
        });
      }

      if (options.type === BI.MultiSelectCombo.REQ_GET_ALL_DATA) {
        callback({
          items: resultItems
        });
        return;
      }

      if (options.type === BI.MultiSelectCombo.REQ_GET_DATA_LENGTH) {
        callback({
          count: resultItems.length
        });
        return;
      }

      callback({
        items: self._getItemsByTimes(resultItems, options.times),
        hasNext: self._hasNextByTimes(resultItems, options.times)
      });
    }
  },
  _assertValue: function _assertValue(v) {
    v = v || {};
    var value = v;

    if (BI.isNotNull(this.items)) {
      var isAllSelect = BI.difference(BI.map(this.items, "value"), v.value).length === 0;

      if (isAllSelect) {
        value = {
          type: BI.Selection.All,
          value: []
        };
      }
    }

    return value;
  }
});

/***/ }),
/* 909 */
/***/ (function(module, exports) {

/**
 * 简单的复选下拉框控件, 适用于数据量少的情况， 与valuechooser的区别是allvaluechooser setValue和getValue返回的是所有值
 * 封装了字段处理逻辑
 *
 * Created by GUY on 2015/10/29.
 * @class BI.AllValueChooserCombo
 * @extends BI.AbstractAllValueChooser
 */
BI.AllValueChooserCombo = BI.inherit(BI.AbstractAllValueChooser, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.AllValueChooserCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-all-value-chooser-combo",
      width: 200,
      height: 24,
      items: null,
      itemsCreator: BI.emptyFn,
      cache: true
    });
  },
  _init: function _init() {
    BI.AllValueChooserCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    if (BI.isNotNull(o.items)) {
      this.items = o.items;
    }

    this.combo = BI.createWidget({
      type: "bi.multi_select_combo",
      simple: o.simple,
      text: o.text,
      element: this,
      itemsCreator: BI.bind(this._itemsCreator, this),
      valueFormatter: BI.bind(this._valueFormatter, this),
      width: o.width,
      height: o.height,
      value: this._assertValue({
        type: BI.Selection.Multi,
        value: o.value || []
      })
    });
    this.combo.on(BI.MultiSelectCombo.EVENT_CONFIRM, function () {
      self.fireEvent(BI.AllValueChooserCombo.EVENT_CONFIRM);
    });
  },
  setValue: function setValue(v) {
    this.combo.setValue(this._assertValue({
      type: BI.Selection.Multi,
      value: v || []
    }));
  },
  getValue: function getValue() {
    return this.getAllValue();
  },
  getAllValue: function getAllValue() {
    var val = this.combo.getValue() || {};

    if (val.type === BI.Selection.Multi) {
      return val.value || [];
    }

    return BI.difference(BI.map(this.items, "value"), val.value || []);
  },
  populate: function populate(items) {
    // 直接用combo的populate不会作用到AbstractValueChooser上
    if (BI.isNotNull(items)) {
      this.items = items;
    }

    this.combo.populate();
  }
});
BI.AllValueChooserCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.all_value_chooser_combo", BI.AllValueChooserCombo);

/***/ }),
/* 910 */
/***/ (function(module, exports) {

/**
 * 简单的复选面板, 适用于数据量少的情况， 与valuechooser的区别是allvaluechooser setValue和getValue返回的是所有值
 * 封装了字段处理逻辑
 *
 * Created by GUY on 2015/10/29.
 * @class BI.AllValueChooserPane
 * @extends BI.AbstractAllValueChooser
 */
BI.AllValueChooserPane = BI.inherit(BI.AbstractAllValueChooser, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.AllValueChooserPane.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-all-value-chooser-pane",
      width: 200,
      height: 30,
      items: null,
      itemsCreator: BI.emptyFn,
      cache: true
    });
  },
  _init: function _init() {
    BI.AllValueChooserPane.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.list = BI.createWidget({
      type: "bi.multi_select_list",
      element: this,
      itemsCreator: BI.bind(this._itemsCreator, this),
      valueFormatter: BI.bind(this._valueFormatter, this),
      width: o.width,
      height: o.height
    });
    this.list.on(BI.MultiSelectList.EVENT_CHANGE, function () {
      self.fireEvent(BI.AllValueChooserPane.EVENT_CHANGE);
    });

    if (BI.isNotNull(o.items)) {
      this.items = o.items;
      this.list.populate();
    }
  },
  setValue: function setValue(v) {
    this.list.setValue({
      type: BI.Selection.Multi,
      value: v || []
    });
  },
  getValue: function getValue() {
    var val = this.list.getValue() || {};

    if (val.type === BI.Selection.Multi) {
      return val.value || [];
    }

    return BI.difference(BI.map(this.items, "value"), val.value || []);
  },
  populate: function populate(items) {
    // 直接用combo的populate不会作用到AbstractValueChooser上
    if (BI.isNotNull(items)) {
      this.items = items;
    }

    this.list.populate();
  }
});
BI.AllValueChooserPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.all_value_chooser_pane", BI.AllValueChooserPane);

/***/ }),
/* 911 */
/***/ (function(module, exports) {

BI.AllValueMultiTextValueCombo = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-all-value-multi-text-value-combo",
    width: 200,
    height: 24,
    items: []
  },
  render: function render() {
    var self = this,
        o = this.options;

    var value = this._digestValue(o.value);

    return {
      type: "bi.search_multi_text_value_combo",
      simple: o.simple,
      text: o.text,
      height: o.height,
      items: o.items,
      value: value,
      numOfPage: 100,
      valueFormatter: o.valueFormatter,
      warningTitle: o.warningTitle,
      listeners: [{
        eventName: BI.SearchMultiTextValueCombo.EVENT_CONFIRM,
        action: function action() {
          self.fireEvent(BI.AllValueMultiTextValueCombo.EVENT_CONFIRM);
        }
      }],
      ref: function ref() {
        self.combo = this;
      }
    };
  },
  setValue: function setValue(v) {
    var value = this._digestValue(v);

    this.combo.setValue(value);
  },
  getValue: function getValue() {
    var obj = this.combo.getValue() || {};
    obj.value = obj.value || [];

    if (obj.type === BI.Selection.All) {
      var values = [];
      BI.each(this.options.items, function (idx, item) {
        !BI.contains(obj.value, item.value) && values.push(item.value);
      });
      return values;
    }

    return obj.value || [];
  },
  populate: function populate(items) {
    this.options.items = items;
    this.combo.populate.apply(this.combo, arguments);
  },
  _digestValue: function _digestValue(v) {
    return {
      type: BI.Selection.Multi,
      value: v || []
    };
  }
});
BI.AllValueMultiTextValueCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.all_value_multi_text_value_combo", BI.AllValueMultiTextValueCombo);

/***/ }),
/* 912 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2022/1/11
 */
BI.FormField = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-form-field",
    label: "",
    el: {},
    headerCls: "",
    labelAlign: "right",
    // 文字默认右对齐
    validate: function validate() {
      return true;
    } // 默认返回true

  },
  render: function render() {
    var self = this,
        o = this.options;
    var field = {
      type: "bi.absolute",
      items: [{
        el: BI.extend({}, o.el, {
          ref: function ref(_ref) {
            self.field = _ref;
            o.el.ref && o.el.ref.call(this, _ref);
          },
          height: o.el.height || 28,
          listeners: BI.concat(o.el.listeners, [{
            eventName: "EVENT_CHANGE",
            action: function action() {
              self.fireEvent("EVENT_CHANGE");
            }
          }, {
            eventName: "EVENT_CONFIRM",
            action: function action() {
              self.fireEvent("EVENT_CONFIRM");
            }
          }])
        }),
        left: 0,
        bottom: 0,
        right: 0,
        top: 0
      }, {
        el: {
          type: "bi.label",
          cls: "error-tip bi-error",
          ref: function ref(_ref) {
            self.error = _ref;
          },
          invisible: true
        },
        bottom: -20,
        left: 0,
        right: 0,
        height: 20
      }]
    };
    return {
      type: "bi.vertical_adapt",
      columnSize: ["auto", "fill"],
      verticalAlign: BI.VerticalAlign.Stretch,
      items: BI.isKey(o.label) ? [{
        el: {
          type: "bi.label",
          textAlign: o.labelAlign,
          text: o.label,
          width: o.labelWidth,
          cls: o.headerCls,
          rgap: 20 // 表单文字与右侧输入间距均为20px

        }
      }, field] : [field]
    };
  },
  getValue: function getValue() {
    return this.field.getValue();
  },
  validate: function validate() {
    var isValid = this.validateWithNoTip();
    !isValid && this.error.setText(this.options.tip(this.field.getValue(), this.field));
    this.error.setVisible(!isValid);
    this.field.element[isValid ? "removeClass" : "addClass"]("bi-error");
    return isValid;
  },
  validateWithNoTip: function validateWithNoTip() {
    return this.options.validate(this.field.getValue(), this.field);
  }
});
BI.shortcut("bi.form_field", BI.FormField);

/***/ }),
/* 913 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2022/1/11
 */
BI.Form = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-form",
    labelAlign: "right",
    layout: {
      type: "bi.vertical",
      vgap: 20
    },
    items: [{
      validate: BI.emptyFn,
      tip: BI.emptyFn,
      label: "",
      el: {}
    }],
    labelWidth: "",
    headerCls: "" // 左侧文字样式

  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.button_group",
      items: this._createItems(),
      layouts: [o.layout],
      ref: function ref(_ref) {
        self.group = _ref;
      }
    };
  },
  _createItems: function _createItems() {
    var self = this;
    var o = this.options;
    return BI.map(o.items, function (idx, item) {
      return {
        type: "bi.form_field",
        height: item.el.height || 28,
        labelAlign: o.labelAlign,
        labelWidth: o.labelWidth,
        headerCls: o.headerCls,
        el: item.el,
        label: item.label,
        tip: item.tip,
        validate: item.validate,
        listeners: [{
          eventName: "EVENT_CHANGE",
          action: function action() {
            self.fireEvent(BI.Form.EVENT_CHANGE, this.validate());
          }
        }]
      };
    });
  },
  isAllValid: function isAllValid() {
    return !BI.some(this.validateWithNoTip(), function (idx, v) {
      return !v;
    });
  },
  validateWithNoTip: function validateWithNoTip() {
    var validInfo = [];
    BI.each(this.group.getAllButtons(), function (idx, button) {
      validInfo.push(button.validateWithNoTip());
    });
    return validInfo;
  },
  validate: function validate() {
    var validInfo = [];
    BI.each(this.group.getAllButtons(), function (idx, button) {
      validInfo.push(button.validate());
    });
    return validInfo;
  },
  getValue: function getValue() {
    return !this.isAllValid() ? null : BI.map(this.group.getAllButtons(), function (idx, button) {
      return button.getValue();
    });
  }
});
BI.Form.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.custom_form", BI.Form);

/***/ }),
/* 914 */
/***/ (function(module, exports) {

BI.AbstractTreeValueChooser = BI.inherit(BI.Widget, {
  _const: {
    perPage: 100
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.AbstractTreeValueChooser.superclass._defaultConfig.apply(this, arguments), {
      items: null,
      itemsCreator: BI.emptyFn,
      open: false
    });
  },
  _valueFormatter: function _valueFormatter(v) {
    var text = v;

    if (this.options.valueFormatter) {
      return this.options.valueFormatter(v);
    }

    if (BI.isNotNull(this.items)) {
      BI.some(this.items, function (i, item) {
        if (item.value === v || item.value + "" === v) {
          text = item.text;
          return true;
        }
      });
    }

    return text;
  },
  _initData: function _initData(items) {
    this.items = items;
    var nodes = BI.Tree.treeFormat(items);
    this.tree = new BI.Tree();
    this.tree.initTree(nodes);
  },
  _itemsCreator: function _itemsCreator(options, callback) {
    var self = this,
        o = this.options;

    if (!this.items) {
      o.itemsCreator({}, function (items) {
        self._initData(items);

        call();
      });
    } else {
      call();
    }

    function call() {
      switch (options.type) {
        case BI.TreeView.REQ_TYPE_INIT_DATA:
          self._reqInitTreeNode(options, callback);

          break;

        case BI.TreeView.REQ_TYPE_ADJUST_DATA:
          self._reqAdjustTreeNode(options, callback);

          break;

        case BI.TreeView.REQ_TYPE_SELECT_DATA:
          self._reqSelectedTreeNode(options, callback);

          break;

        case BI.TreeView.REQ_TYPE_GET_SELECTED_DATA:
          self._reqDisplayTreeNode(options, callback);

          break;

        default:
          self._reqTreeNode(options, callback);

          break;
      }
    }
  },
  _reqDisplayTreeNode: function _reqDisplayTreeNode(op, callback) {
    var self = this;
    var result = [];
    var selectedValues = op.selectedValues;

    if (selectedValues == null || BI.isEmpty(selectedValues)) {
      callback({});
      return;
    }

    doCheck([], this.tree.getRoot(), selectedValues);
    callback({
      items: result
    });

    function doCheck(parentValues, node, selected) {
      if (selected == null || BI.isEmpty(selected)) {
        BI.each(node.getChildren(), function (i, child) {
          var newParents = BI.clone(parentValues);
          newParents.push(child.value);

          var llen = self._getChildCount(newParents);

          createOneJson(child, node.id, llen);
          doCheck(newParents, child, {});
        });
        return;
      }

      BI.each(selected, function (k) {
        var node = self._getTreeNode(parentValues, k); // 找不到就是新增值


        if (BI.isNull(node)) {
          createOneJson({
            id: BI.UUID(),
            text: k,
            value: k
          }, BI.UUID(), 0);
        } else {
          var newParents = BI.clone(parentValues);
          newParents.push(node.value);
          createOneJson(node, node.parent && node.parent.id, getCount(selected[k], newParents));
          doCheck(newParents, node, selected[k]);
        }
      });
    }

    function getCount(jo, parentValues) {
      if (jo == null) {
        return 0;
      }

      if (BI.isEmpty(jo)) {
        return self._getChildCount(parentValues);
      }

      return BI.size(jo);
    }

    function createOneJson(node, pId, llen) {
      result.push({
        id: node.id,
        pId: pId,
        text: node.text + (llen > 0 ? "(" + BI.i18nText("BI-Basic_Altogether") + llen + BI.i18nText("BI-Basic_Count") + ")" : ""),
        value: node.value,
        open: true,
        disabled: node.disabled
      });
    }
  },
  _reqSelectedTreeNode: function _reqSelectedTreeNode(op, callback) {
    var self = this;
    var selectedValues = BI.deepClone(op.selectedValues);
    var notSelectedValue = op.notSelectedValue || {};
    var keyword = op.keyword || "";
    var parentValues = op.parentValues || [];

    if (selectedValues == null || BI.isEmpty(selectedValues)) {
      callback({});
      return;
    }

    dealWithSelectedValues(selectedValues);
    callback(selectedValues);

    function dealWithSelectedValues(selectedValues) {
      var p = parentValues.concat(notSelectedValue); // 存储的值中存在这个值就把它删掉
      // 例如选中了中国-江苏-南京， 取消中国或江苏或南京
      // p长度不大于selectedValues的情况才可能找到，这样可以直接删除selectedValues的节点

      if (canFindKey(selectedValues, p)) {
        // 如果搜索的值在父亲链中
        if (isSearchValueInParent(p)) {
          // 例如选中了 中国-江苏， 搜索江苏， 取消江苏(干掉了江苏)
          self._deleteNode(selectedValues, p);
        } else {
          var searched = []; // 要找到所有以notSelectedValue为叶子节点的链路

          var find = search(parentValues, notSelectedValue, [], searched);

          if (find && BI.isNotEmptyArray(searched)) {
            BI.each(searched, function (i, arr) {
              var node = self._getNode(selectedValues, arr);

              if (node) {
                // 例如选中了 中国-江苏， 搜索江苏， 取消中国（实际上只想删除中国-江苏，因为搜的是江苏）
                // 例如选中了 中国-江苏-南京，搜索南京，取消中国（实际上只想删除中国-江苏-南京，因为搜的是南京）
                self._deleteNode(selectedValues, arr);
              } else {
                // 例如选中了 中国-江苏，搜索南京，取消中国（实际上只想删除中国-江苏-南京，因为搜的是南京）
                expandSelectedValue(selectedValues, arr, BI.last(arr));
              }
            });
          }
        }
      } // 存储的值中不存在这个值，但父亲节点是全选的情况
      // 例如选中了中国-江苏，取消南京
      // important 选中了中国-江苏，取消了江苏，但是搜索的是南京


      if (isChild(selectedValues, p)) {
        var result = [],
            find = false; // 如果parentValues中有匹配的值，说明搜索结果不在当前值下

        if (isSearchValueInParent(p)) {
          find = true;
        } else {
          // 从当前值开始搜
          find = search(parentValues, notSelectedValue, result);
          p = parentValues;
        }

        if (find === true) {
          // 去掉点击的节点之后的结果集
          expandSelectedValue(selectedValues, p, notSelectedValue); // 添加去掉搜索的结果集

          if (result.length > 0) {
            BI.each(result, function (i, strs) {
              self._buildTree(selectedValues, strs);
            });
          }
        }
      }
    }

    function expandSelectedValue(selectedValues, parents, notSelectedValue) {
      var next = selectedValues;
      var childrenCount = [];
      var path = []; // 去掉点击的节点之后的结果集

      BI.some(parents, function (i, v) {
        var t = next[v];

        if (t == null) {
          if (i === 0) {
            return true;
          }

          if (BI.isEmpty(next)) {
            var split = parents.slice(0, i);

            var expanded = self._getChildren(split);

            path.push(split);
            childrenCount.push(expanded.length); // 如果只有一个值且取消的就是这个值

            if (i === parents.length - 1 && expanded.length === 1 && expanded[0].value === notSelectedValue) {
              for (var j = childrenCount.length - 1; j >= 0; j--) {
                if (childrenCount[j] === 1) {
                  self._deleteNode(selectedValues, path[j]);
                } else {
                  break;
                }
              }
            } else {
              BI.each(expanded, function (m, child) {
                if (i === parents.length - 1 && child.value === notSelectedValue) {
                  return true;
                }

                next[child.value] = {};
              });
            }

            next = next[v];
          } else {
            return true; // next = {};
            // next[v] = {};
          }
        } else {
          next = t;
        }
      });
    }

    function search(parents, current, result, searched) {
      var newParents = BI.clone(parents);
      newParents.push(current);

      if (self._isMatch(parents, current, keyword)) {
        searched && searched.push(newParents);
        return true;
      }

      var children = self._getChildren(newParents);

      var notSearch = [];
      var can = false;
      BI.each(children, function (i, child) {
        if (search(newParents, child.value, result, searched)) {
          can = true;
        } else {
          notSearch.push(child.value);
        }
      });

      if (can === true) {
        BI.each(notSearch, function (i, v) {
          var next = BI.clone(newParents);
          next.push(v);
          result.push(next);
        });
      }

      return can;
    }

    function isSearchValueInParent(parentValues) {
      for (var i = 0, len = parentValues.length; i < len; i++) {
        if (self._isMatch(parentValues.slice(0, i), parentValues[i], keyword)) {
          return true;
        }
      }

      return false;
    }

    function canFindKey(selectedValues, parents) {
      var t = selectedValues;

      for (var i = 0; i < parents.length; i++) {
        var v = parents[i];
        t = t[v];

        if (t == null) {
          return false;
        }
      }

      return true;
    }

    function isChild(selectedValues, parents) {
      var t = selectedValues;

      for (var i = 0; i < parents.length; i++) {
        var v = parents[i];

        if (!BI.has(t, v)) {
          return false;
        }

        t = t[v];

        if (BI.isEmpty(t)) {
          return true;
        }
      }

      return false;
    }
  },
  _reqAdjustTreeNode: function _reqAdjustTreeNode(op, callback) {
    var self = this;
    var result = [];
    var selectedValues = op.selectedValues;

    if (selectedValues == null || BI.isEmpty(selectedValues)) {
      callback({});
      return;
    }

    BI.each(selectedValues, function (k, v) {
      result.push([k]);
    });
    dealWithSelectedValues(selectedValues, []);
    var jo = {};
    BI.each(result, function (i, strs) {
      self._buildTree(jo, strs);
    });
    callback(jo);

    function dealWithSelectedValues(selected, parents) {
      if (selected == null || BI.isEmpty(selected)) {
        return true;
      }

      var can = true;
      BI.each(selected, function (k, v) {
        var p = BI.clone(parents);
        p.push(k);

        if (!dealWithSelectedValues(selected[k], p)) {
          BI.each(selected[k], function (nk, nv) {
            var t = BI.clone(p);
            t.push(nk);
            result.push(t);
          });
          can = false;
        }
      });
      return can && isAllSelected(selected, parents);
    }

    function isAllSelected(selected, parents) {
      return BI.isEmpty(selected) || self._getChildCount(parents) === BI.size(selected);
    }
  },
  _reqInitTreeNode: function _reqInitTreeNode(op, callback) {
    var self = this;
    var result = [];
    var keyword = op.keyword || "";
    var selectedValues = op.selectedValues;
    var lastSearchValue = op.lastSearchValue || ""; // 一次请求100个，但是搜索是拿全部的，lastSearchValue是上一次遍历到的节点索引

    var output = search();
    BI.nextTick(function () {
      callback({
        hasNext: output.length > self._const.perPage,
        items: result,
        lastSearchValue: BI.last(output)
      });
    });

    function search() {
      var children = self._getChildren([]);

      var start = children.length;

      if (lastSearchValue !== "") {
        for (var j = 0, len = start; j < len; j++) {
          if (children[j].value === lastSearchValue) {
            start = j + 1;
            break;
          }
        }
      } else {
        start = 0;
      }

      var output = [];

      for (var i = start, len = children.length; i < len; i++) {
        if (output.length < self._const.perPage) {
          var find = nodeSearch(1, [], children[i].value, false, result);
        } else if (output.length === self._const.perPage) {
          var find = nodeSearch(1, [], children[i].value, false, []);
        }

        if (find[0] === true) {
          output.push(children[i].value);
        }

        if (output.length > self._const.perPage) {
          break;
        }
      } // 深层嵌套的比较麻烦，这边先实现的是在根节点添加


      if (op.times === 1) {
        var nodes = self._getAddedValueNode([], selectedValues);

        result = BI.concat(BI.filter(nodes, function (idx, node) {
          var find = BI.Func.getSearchResult([node.text || node.value], keyword);
          return find.find.length > 0 || find.match.length > 0;
        }), result);
      }

      return output;
    }

    function nodeSearch(deep, parentValues, current, isAllSelect, result) {
      if (self._isMatch(parentValues, current, keyword)) {
        var checked = isAllSelect || isSelected(parentValues, current);
        createOneJson(parentValues, current, false, checked, !isAllSelect && isHalf(parentValues, current), true, result);
        return [true, checked];
      }

      var newParents = BI.clone(parentValues);
      newParents.push(current);

      var children = self._getChildren(newParents);

      var can = false,
          checked = false;
      var isCurAllSelected = isAllSelect || isAllSelected(parentValues, current);
      BI.each(children, function (i, child) {
        var state = nodeSearch(deep + 1, newParents, child.value, isCurAllSelected, result); // 当前节点的子节点是否选中，并不确定全选还是半选

        if (state[1] === true) {
          checked = true;
        } // 当前节点的子节点要不要加入到结果集中


        if (state[0] === true) {
          can = true;
        }
      }); // 子节点匹配, 补充父节点

      if (can === true) {
        checked = isCurAllSelected || isSelected(parentValues, current) && checked;
        createOneJson(parentValues, current, true, checked, false, false, result);
      }

      return [can, checked];
    }

    function createOneJson(parentValues, value, isOpen, checked, half, flag, result) {
      var node = self._getTreeNode(parentValues, value);

      result.push({
        id: node.id,
        pId: node.pId,
        text: node.text,
        value: node.value,
        title: node.title,
        isParent: node.getChildrenLength() > 0,
        open: isOpen,
        checked: checked,
        halfCheck: half,
        flag: flag,
        disabled: node.disabled
      });
    }

    function isHalf(parentValues, value) {
      var find = findSelectedObj(parentValues);

      if (find == null) {
        return null;
      }

      return BI.any(find, function (v, ob) {
        if (v === value) {
          if (ob != null && !BI.isEmpty(ob)) {
            return true;
          }
        }
      });
    }

    function isAllSelected(parentValues, value) {
      var find = findSelectedObj(parentValues);

      if (find == null) {
        return null;
      }

      return BI.any(find, function (v, ob) {
        if (v === value) {
          if (ob != null && BI.isEmpty(ob)) {
            return true;
          }
        }
      });
    }

    function isSelected(parentValues, value) {
      var find = findSelectedObj(parentValues);

      if (find == null) {
        return false;
      }

      return BI.any(find, function (v) {
        if (v === value) {
          return true;
        }
      });
    }

    function findSelectedObj(parentValues) {
      var find = selectedValues;

      if (find == null) {
        return null;
      }

      BI.every(parentValues, function (i, v) {
        find = find[v];

        if (find == null) {
          return false;
        }

        return true;
      });
      return find;
    }
  },
  _reqTreeNode: function _reqTreeNode(op, callback) {
    var self = this,
        o = this.options;
    var result = [];
    var times = op.times;
    var checkState = op.checkState || {};
    var parentValues = op.parentValues || [];
    var selectedValues = op.selectedValues || {};

    function getResult(parentValues, checkState) {
      var valueMap = {}; // if (judgeState(parentValues, selectedValues, checkState)) {

      valueMap = dealWithSelectedValue(parentValues, selectedValues); // }

      var nodes = self._getChildren(parentValues);

      for (var i = (times - 1) * self._const.perPage; nodes[i] && i < times * self._const.perPage; i++) {
        var state = getCheckState(nodes[i].value, parentValues, valueMap, checkState);
        var openState = o.open || nodes[i].open;
        result.push({
          id: nodes[i].id,
          pId: nodes[i].pId,
          value: nodes[i].value,
          text: nodes[i].text,
          times: 1,
          isParent: nodes[i].isParent || nodes[i].getChildrenLength() > 0,
          checked: state[0],
          half: state[1],
          halfCheck: openState ? false : state[1],
          open: openState,
          disabled: nodes[i].disabled,
          title: nodes[i].title || nodes[i].text,
          warningTitle: nodes[i].warningTitle
        });

        if (openState) {
          getResult(parentValues.concat([nodes[i].value]), {
            checked: state[0],
            half: state[1]
          });
        }
      }
    }

    getResult(parentValues, checkState); // 如果指定节点全部打开
    // if (o.open) {
    //     var allNodes = [];
    //     // 获取所有节点
    //     BI.each(nodes, function (idx, node) {
    //         allNodes = BI.concat(allNodes, self._getAllChildren(parentValues.concat([node.value])));
    //     });
    //     var lastFind;
    //     BI.each(allNodes, function (idx, node) {
    //         var valueMap = dealWithSelectedValue(node.parentValues, selectedValues);
    //         // REPORT-24409 fix: 设置节点全部展开，添加的节点没有给状态
    //         var parentCheckState = {};
    //         var find = BI.find(result, function (idx, pNode) {
    //             return pNode.id === node.pId;
    //         });
    //         if (find) {
    //             parentCheckState.checked = find.halfCheck ? false : find.checked;
    //             parentCheckState.half = find.halfCheck;
    //             // 默认展开也需要重置父节点的halfCheck
    //             if (BI.isNotNull(lastFind) && (lastFind !== find || allNodes.length - 1 === idx)) {
    //                 lastFind.half = lastFind.halfCheck;
    //                 lastFind.halfCheck = false;
    //             }
    //         }
    //         lastFind = find;
    //         var state = getCheckState(node.value, node.parentValues, valueMap, parentCheckState);
    //         result.push({
    //             id: node.id,
    //             pId: node.pId,
    //             value: node.value,
    //             text: node.text,
    //             times: 1,
    //             isParent: node.getChildrenLength() > 0,
    //             checked: state[0],
    //             halfCheck: state[1],
    //             open: true,
    //             disabled: node.disabled,
    //             title: node.title || node.text,
    //             warningTitle: node.warningTitle,
    //         });
    //     });
    // }
    // 深层嵌套的比较麻烦，这边先实现的是在根节点添加

    if (parentValues.length === 0 && times === 1) {
      result = BI.concat(self._getAddedValueNode(parentValues, selectedValues), result);
    }

    BI.nextTick(function () {
      callback({
        items: result,
        hasNext: self._getChildren(parentValues).length > times * self._const.perPage
      });
    }); // function judgeState(parentValues, selected_value, checkState) {
    //     var checked = checkState.checked, half = checkState.half;
    //     if (parentValues.length > 0 && !checked) {
    //         return false;
    //     }
    //     return (parentValues.length === 0 || (checked && half) && !BI.isEmpty(selected_value));
    // }

    function dealWithSelectedValue(parentValues, selectedValues) {
      var valueMap = {},
          parents = (parentValues || []).slice(0);
      BI.each(parentValues, function (i, v) {
        parents.push(v);
        selectedValues = selectedValues[v] || {};
      });
      BI.each(selectedValues, function (value, obj) {
        var currentParents = BI.concat(parents, value);

        if (BI.isNull(obj)) {
          valueMap[value] = [0, 0];
          return;
        }

        if (BI.isEmpty(obj)) {
          valueMap[value] = [2, 0];
          return;
        }

        var nextNames = {};
        BI.each(obj, function (t, o) {
          if (BI.isNull(o) || BI.isEmpty(o)) {
            nextNames[t] = true;
          } else {
            isAllSelected(o, BI.concat(currentParents, [t])) && (nextNames[t] = true);
          }
        }); // valueMap的数组第一个参数为不选: 0, 半选: 1, 全选：2， 第二个参数为改节点下选中的子节点个数(子节点全选或者不存在)

        valueMap[value] = [1, BI.size(nextNames)];
      });
      return valueMap;
    }

    function isAllSelected(selected, parents) {
      if (BI.isEmpty(selected)) {
        return true;
      }

      if (self._getChildCount(parents) !== BI.size(selected)) {
        return false;
      }

      return BI.every(selected, function (value) {
        return isAllSelected(selected[value], BI.concat(parents, value));
      });
    }

    function getCheckState(current, parentValues, valueMap, checkState) {
      // 节点本身的checked和half优先级最高
      var checked = checkState.checked,
          half = checkState.half;
      var tempCheck = false,
          halfCheck = false;

      if (BI.has(valueMap, current)) {
        // 可能是半选
        if (valueMap[current][0] === 1) {
          var values = BI.clone(parentValues);
          values.push(current);

          var childCount = self._getChildCount(values);

          if (childCount > 0 && childCount !== valueMap[current][1]) {
            halfCheck = true;
          }
        } else if (valueMap[current][0] === 2) {
          tempCheck = true;
        }
      }

      var check; // 展开的节点checked为false 且没有明确得出当前子节点是半选或者全选, 则check状态取决于valueMap

      if (!checked && !halfCheck && !tempCheck) {
        check = BI.has(valueMap, current);
      } else {
        // 不是上面那种情况就先看在节点没有带有明确半选的时候，通过节点自身的checked和valueMap的状态能都得到选中信息
        check = (tempCheck || checked) && !half || BI.has(valueMap, current);
      }

      return [check, halfCheck];
    }
  },
  _getAddedValueNode: function _getAddedValueNode(parentValues, selectedValues) {
    var nodes = this._getChildren(parentValues);

    return BI.map(BI.difference(BI.keys(selectedValues), BI.map(nodes, "value")), function (idx, v) {
      return {
        id: BI.UUID(),
        pId: nodes.length > 0 ? nodes[0].pId : BI.UUID(),
        value: v,
        text: v,
        times: 1,
        isParent: false,
        checked: true,
        halfCheck: false
      };
    });
  },
  _getNode: function _getNode(selectedValues, parentValues) {
    var pNode = selectedValues;

    for (var i = 0, len = parentValues.length; i < len; i++) {
      if (pNode == null) {
        return null;
      }

      pNode = pNode[parentValues[i]];
    }

    return pNode;
  },
  _deleteNode: function _deleteNode(selectedValues, values) {
    var name = values[values.length - 1];
    var p = values.slice(0, values.length - 1);

    var pNode = this._getNode(selectedValues, p);

    if (pNode != null && pNode[name]) {
      delete pNode[name]; // 递归删掉空父节点

      while (p.length > 0 && BI.isEmpty(pNode)) {
        name = p[p.length - 1];
        p = p.slice(0, p.length - 1);
        pNode = this._getNode(selectedValues, p);

        if (pNode != null) {
          delete pNode[name];
        }
      }
    }
  },
  _buildTree: function _buildTree(jo, values) {
    var t = jo;
    BI.each(values, function (i, v) {
      if (!BI.has(t, v)) {
        t[v] = {};
      }

      t = t[v];
    });
  },
  _isMatch: function _isMatch(parentValues, value, keyword) {
    var o = this.options;

    var node = this._getTreeNode(parentValues, value);

    if (!node) {
      return false;
    }

    var find = BI.Func.getSearchResult([node.text || node.value], keyword);

    if (o.allowSearchValue && node.value) {
      var valueFind = BI.Func.getSearchResult([node.value], keyword);
      return valueFind.find.length > 0 || valueFind.match.length > 0 || find.find.length > 0 || find.match.length > 0;
    }

    return find.find.length > 0 || find.match.length > 0;
  },
  _getTreeNode: function _getTreeNode(parentValues, v) {
    var self = this;
    var findParentNode;
    var index = 0;
    var currentParent = this.tree.getRoot();
    this.tree.traverse(function (node) {
      if (self.tree.isRoot(node)) {
        return;
      }

      if (index > parentValues.length) {
        return false;
      }
      /**
       * 一个树结构。要找root_1_3的子节点
       * {root: { 1: {1: {}, 2: {}, 3: {}}, 3: {1: {}, 2: {}} } }
       * 当遍历到root_1节点时，index++，而下一个节点root_3时，符合下面的if逻辑，这样找到的节点就是root_3节点了，需要加步判断是否是root_1的子节点
       */


      if (index === parentValues.length && node.value === v) {
        if (node.getParent() !== currentParent) {
          return;
        }

        findParentNode = node;
        return false;
      }

      if (node.value === parentValues[index] && node.getParent() === currentParent) {
        index++;
        currentParent = node;
        return;
      }

      return true;
    });
    return findParentNode;
  },
  _getChildren: function _getChildren(parentValues) {
    if (parentValues.length > 0) {
      var value = BI.last(parentValues);

      var parent = this._getTreeNode(parentValues.slice(0, parentValues.length - 1), value);
    } else {
      var parent = this.tree.getRoot();
    }

    return parent ? parent.getChildren() : [];
  },
  _getAllChildren: function _getAllChildren(parentValues) {
    var children = this._getChildren(parentValues);

    var nodes = [].concat(children);
    BI.each(nodes, function (idx, node) {
      node.parentValues = parentValues;
    });
    var queue = BI.map(children, function (idx, node) {
      return {
        parentValues: parentValues,
        value: node.value
      };
    });

    while (BI.isNotEmptyArray(queue)) {
      var node = queue.shift();
      var pValues = node.parentValues.concat(node.value);

      var childNodes = this._getChildren(pValues);

      BI.each(childNodes, function (idx, node) {
        node.parentValues = pValues;
      });
      queue = queue.concat(childNodes);
      nodes = nodes.concat(childNodes);
    }

    return nodes;
  },
  _getChildCount: function _getChildCount(parentValues) {
    return this._getChildren(parentValues).length;
  },
  assertSelectedValue: function assertSelectedValue(selectedValues) {
    var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (BI.isPlainObject(selectedValues)) {
      return selectedValues;
    }

    var tree = BI.Tree.transformToTreeFormat(items);
    var value2ParentMap = {};
    BI.Tree.traversal(tree, function (index, node, pNode) {
      value2ParentMap[node.value] = pNode;
    });
    var result = {};
    BI.each(selectedValues, function (index, value) {
      var _value2ParentMap$valu, _value2ParentMap$valu2;

      var curr = value;
      var parentPath = [];

      while (curr) {
        var _value2ParentMap$curr;

        parentPath.unshift(curr);
        curr = (_value2ParentMap$curr = value2ParentMap[curr]) === null || _value2ParentMap$curr === void 0 ? void 0 : _value2ParentMap$curr.value;
      }

      BI.each(parentPath, function (index) {
        if (BI.isNull(BI.get(result, parentPath.slice(0, index + 1)))) {
          BI.set(result, parentPath.slice(0, index + 1), {});
        }
      }); //  执行完一条路径,check一下

      var lengths = BI.size(BI.get(result, parentPath.slice(0, -1)));

      if (lengths === ((_value2ParentMap$valu = value2ParentMap[value]) === null || _value2ParentMap$valu === void 0 ? void 0 : (_value2ParentMap$valu2 = _value2ParentMap$valu.children) === null || _value2ParentMap$valu2 === void 0 ? void 0 : _value2ParentMap$valu2.length)) {
        BI.set(result, parentPath.slice(0, -1), {});
      }
    });
    return result;
  },
  buildCompleteTree: function buildCompleteTree(selectedValues) {
    var self = this;
    var result = {};

    if (selectedValues !== null && !BI.isEmpty(selectedValues)) {
      fill([], this.tree.getRoot(), selectedValues, result);
    }

    return result;

    function fill(parentValues, node, selected, r) {
      if (selected === null || BI.isEmpty(selected)) {
        BI.each(node.getChildren(), function (i, child) {
          var newParents = BI.clone(parentValues);
          newParents.push(child.value);
          r[child.value] = {};
          fill(newParents, child, null, r[child.value]);
        });
        return;
      }

      BI.each(selected, function (k) {
        var node = self._getTreeNode(parentValues, k);

        var newParents = BI.clone(parentValues);
        newParents.push(node.value);
        r[k] = {};
        fill(newParents, node, selected[k], r[k]);
      });
    }
  }
});

/***/ }),
/* 915 */
/***/ (function(module, exports) {

BI.AbstractListTreeValueChooser = BI.inherit(BI.AbstractTreeValueChooser, {
  _reqDisplayTreeNode: function _reqDisplayTreeNode(op, callback) {
    var self = this;
    var result = {};
    var selectedValues = op.selectedValues;

    if (selectedValues == null || BI.isEmpty(selectedValues)) {
      callback({});
      return;
    }

    doCheck([], this.tree.getRoot(), selectedValues);
    callback({
      items: BI.values(result)
    });

    function doCheck(parentValues, node, selected) {
      BI.each(selected, function (idx, path) {
        BI.each(path, function (id, value) {
          var nodeValue = value;

          var node = self._getTreeNode(path.slice(0, id), nodeValue); // 找不到就是新增值


          if (BI.isNull(node)) {
            createOneJson({
              id: BI.UUID(),
              text: nodeValue,
              value: nodeValue,
              isLeaf: true
            }, BI.UUID());
          } else {
            if (!BI.has(result, node.id)) {
              createOneJson(node, node.parent && node.parent.id);
            }

            result[node.id].isLeaf !== true && (result[node.id].isLeaf = id === path.length - 1);
          }
        });
      });
    }

    function createOneJson(node, pId) {
      result[node.id] = {
        id: node.id,
        pId: pId,
        text: node.text,
        value: node.value,
        open: true,
        isLeaf: node.isLeaf
      };
    }
  },
  _reqInitTreeNode: function _reqInitTreeNode(op, callback) {
    var self = this;
    var result = [];
    var keyword = op.keyword || "";
    var selectedValues = op.selectedValues;
    var lastSearchValue = op.lastSearchValue || ""; // 一次请求100个，但是搜索是拿全部的，lastSearchValue是上一次遍历到的节点索引

    var output = search();
    BI.nextTick(function () {
      callback({
        hasNext: output.length > self._const.perPage,
        items: result,
        lastSearchValue: BI.last(output)
      });
    });

    function search() {
      var children = self._getChildren([]);

      var start = children.length;

      if (lastSearchValue !== "") {
        for (var j = 0, len = start; j < len; j++) {
          if (children[j].value === lastSearchValue) {
            start = j + 1;
            break;
          }
        }
      } else {
        start = 0;
      }

      var output = [];

      for (var i = start, len = children.length; i < len; i++) {
        if (output.length < self._const.perPage) {
          var find = nodeSearch(1, [], children[i].value, result);
        } else if (output.length === self._const.perPage) {
          var find = nodeSearch(1, [], children[i].value, []);
        }

        if (find[0] === true) {
          output.push(children[i].value);
        }

        if (output.length > self._const.perPage) {
          break;
        }
      } // 深层嵌套的比较麻烦，这边先实现的是在根节点添加


      if (op.times === 1) {
        var nodes = self._getAddedValueNode([], selectedValues);

        result = BI.concat(BI.filter(nodes, function (idx, node) {
          var find = BI.Func.getSearchResult([node.text || node.value], keyword);
          return find.find.length > 0 || find.match.length > 0;
        }), result);
      }

      return output;
    }

    function nodeSearch(deep, parentValues, current, result) {
      if (self._isMatch(parentValues, current, keyword)) {
        var checked = isSelected(parentValues, current);
        createOneJson(parentValues, current, false, checked, true, result);
        return [true, checked];
      }

      var newParents = BI.clone(parentValues);
      newParents.push(current);

      var children = self._getChildren(newParents);

      var can = false,
          checked = false;
      BI.each(children, function (i, child) {
        var state = nodeSearch(deep + 1, newParents, child.value, result);

        if (state[1] === true) {
          checked = true;
        }

        if (state[0] === true) {
          can = true;
        }
      });

      if (can === true) {
        checked = isSelected(parentValues, current);
        createOneJson(parentValues, current, true, checked, false, result);
      }

      return [can, checked];
    }

    function createOneJson(parentValues, value, isOpen, checked, flag, result) {
      var node = self._getTreeNode(parentValues, value);

      result.push({
        id: node.id,
        pId: node.pId,
        text: node.text,
        value: node.value,
        title: node.title,
        isParent: node.getChildrenLength() > 0,
        open: isOpen,
        checked: checked,
        halfCheck: false,
        flag: flag,
        disabled: node.disabled
      });
    }

    function isHalf(parentValues, value) {
      var find = findSelectedObj(parentValues);

      if (find == null) {
        return null;
      }

      return BI.any(find, function (v, ob) {
        if (v === value) {
          if (ob != null && !BI.isEmpty(ob)) {
            return true;
          }
        }
      });
    }

    function isAllSelected(parentValues, value) {
      var find = findSelectedObj(parentValues);

      if (find == null) {
        return null;
      }

      return BI.any(find, function (v, ob) {
        if (v === value) {
          if (ob != null && BI.isEmpty(ob)) {
            return true;
          }
        }
      });
    }

    function isSelected(parentValues, value) {
      return BI.any(selectedValues, function (idx, array) {
        return BI.isEqual(parentValues, array.slice(0, parentValues.length)) && BI.last(array) === value;
      });
    }

    function findSelectedObj(parentValues) {
      var find = selectedValues;

      if (find == null) {
        return null;
      }

      BI.every(parentValues, function (i, v) {
        find = find[v];

        if (find == null) {
          return false;
        }

        return true;
      });
      return find;
    }
  },
  _reqTreeNode: function _reqTreeNode(op, callback) {
    var self = this,
        o = this.options;
    var result = [];
    var times = op.times;
    var parentValues = op.parentValues || [];
    var selectedValues = op.selectedValues || [];
    var valueMap = dealWithSelectedValue(parentValues, selectedValues);

    var nodes = this._getChildren(parentValues);

    for (var i = (times - 1) * this._const.perPage; nodes[i] && i < times * this._const.perPage; i++) {
      var checked = BI.has(valueMap, nodes[i].value);
      result.push({
        id: nodes[i].id,
        pId: nodes[i].pId,
        value: nodes[i].value,
        text: nodes[i].text,
        times: 1,
        isParent: nodes[i].getChildrenLength() > 0,
        checked: checked,
        halfCheck: false,
        open: o.open,
        disabled: nodes[i].disabled
      });
    } // 如果指定节点全部打开


    if (o.open) {
      var allNodes = []; // 获取所有节点

      BI.each(nodes, function (idx, node) {
        allNodes = BI.concat(allNodes, self._getAllChildren(parentValues.concat([node.value])));
      });
      BI.each(allNodes, function (idx, node) {
        var valueMap = dealWithSelectedValue(node.parentValues, selectedValues);
        var checked = BI.has(valueMap, node.value);
        result.push({
          id: node.id,
          pId: node.pId,
          value: node.value,
          text: node.text,
          times: 1,
          isParent: node.getChildrenLength() > 0,
          checked: checked,
          halfCheck: false,
          open: o.open,
          disabled: node.disabled
        });
      });
    } // 深层嵌套的比较麻烦，这边先实现的是在根节点添加


    if (parentValues.length === 0 && times === 1) {
      result = BI.concat(self._getAddedValueNode(parentValues, selectedValues), result);
    }

    BI.nextTick(function () {
      callback({
        items: result,
        hasNext: nodes.length > times * self._const.perPage
      });
    });

    function dealWithSelectedValue(parentValues, selectedValues) {
      var valueMap = {};
      BI.each(selectedValues, function (idx, v) {
        if (BI.isEqual(parentValues, v.slice(0, parentValues.length))) {
          valueMap[BI.last(v)] = [2, 0];
        }
      });
      return valueMap;
    }
  },
  _getAddedValueNode: function _getAddedValueNode(parentValues, selectedValues) {
    var nodes = this._getChildren(parentValues);

    var values = BI.flatten(BI.filter(selectedValues, function (idx, array) {
      return array.length === 1;
    }));
    return BI.map(BI.difference(values, BI.map(nodes, "value")), function (idx, v) {
      return {
        id: BI.UUID(),
        pId: nodes.length > 0 ? nodes[0].pId : BI.UUID(),
        value: v,
        text: v,
        times: 1,
        isParent: false,
        checked: true,
        halfCheck: false
      };
    });
  }
});

/***/ }),
/* 916 */
/***/ (function(module, exports) {

/**
 * 简单的复选下拉树控件, 适用于数据量少的情况, 可以自增值
 *
 * Created by GUY on 2015/10/29.
 * @class BI.ListTreeValueChooserInsertCombo
 * @extends BI.Widget
 */
BI.ListTreeValueChooserInsertCombo = BI.inherit(BI.AbstractListTreeValueChooser, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ListTreeValueChooserInsertCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-list-tree-value-chooser-insert-combo",
      width: 200,
      height: 24,
      items: null,
      itemsCreator: BI.emptyFn,
      isNeedAdjustWidth: true
    });
  },
  _init: function _init() {
    BI.ListTreeValueChooserInsertCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    if (BI.isNotNull(o.items)) {
      this._initData(o.items);
    }

    this.combo = BI.createWidget({
      type: "bi.multi_tree_list_combo",
      simple: o.simple,
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      element: this,
      text: o.text,
      defaultText: o.defaultText,
      value: o.value,
      watermark: o.watermark,
      allowInsertValue: o.allowInsertValue,
      allowEdit: o.allowEdit,
      itemsCreator: BI.bind(this._itemsCreator, this),
      valueFormatter: BI.bind(this._valueFormatter, this),
      width: o.width,
      height: o.height,
      listeners: [{
        eventName: BI.MultiTreeListCombo.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.ListTreeValueChooserInsertCombo.EVENT_FOCUS);
        }
      }, {
        eventName: BI.MultiTreeListCombo.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.ListTreeValueChooserInsertCombo.EVENT_BLUR);
        }
      }, {
        eventName: BI.MultiTreeListCombo.EVENT_STOP,
        action: function action() {
          self.fireEvent(BI.ListTreeValueChooserInsertCombo.EVENT_STOP);
        }
      }, {
        eventName: BI.MultiTreeListCombo.EVENT_CLICK_ITEM,
        action: function action(v) {
          self.fireEvent(BI.ListTreeValueChooserInsertCombo.EVENT_CLICK_ITEM, v);
        }
      }, {
        eventName: BI.MultiTreeListCombo.EVENT_SEARCHING,
        action: function action() {
          self.fireEvent(BI.ListTreeValueChooserInsertCombo.EVENT_SEARCHING);
        }
      }, {
        eventName: BI.MultiTreeListCombo.EVENT_CONFIRM,
        action: function action() {
          self.fireEvent(BI.ListTreeValueChooserInsertCombo.EVENT_CONFIRM);
        }
      }, {
        eventName: BI.MultiTreeCombo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserInsertCombo.EVENT_BEFORE_POPUPVIEW);
        }
      }]
    });
  },
  showView: function showView() {
    this.combo.showView();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  getSearcher: function getSearcher() {
    return this.combo.getSearcher();
  },
  setValue: function setValue(v) {
    this.combo.setValue(v);
  },
  getValue: function getValue() {
    return this.combo.getValue();
  },
  populate: function populate(items) {
    if (BI.isNotNull(items)) {
      this._initData(items);
    }

    this.combo.populate();
  },
  focus: function focus() {
    this.combo.focus();
  },
  blur: function blur() {
    this.combo.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.combo.setWaterMark(v);
  }
});
BI.ListTreeValueChooserInsertCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.ListTreeValueChooserInsertCombo.EVENT_BLUR = "EVENT_BLUR";
BI.ListTreeValueChooserInsertCombo.EVENT_STOP = "EVENT_STOP";
BI.ListTreeValueChooserInsertCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.ListTreeValueChooserInsertCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.ListTreeValueChooserInsertCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.ListTreeValueChooserInsertCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.list_tree_value_chooser_insert_combo", BI.ListTreeValueChooserInsertCombo);

/***/ }),
/* 917 */
/***/ (function(module, exports) {

/**
 * 简单的复选下拉树控件, 适用于数据量少的情况, 可以自增值
 *
 * Created by GUY on 2015/10/29.
 * @class BI.TreeValueChooserInsertCombo
 * @extends BI.Widget
 */
BI.TreeValueChooserInsertCombo = BI.inherit(BI.AbstractTreeValueChooser, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TreeValueChooserInsertCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-tree-value-chooser-insert-combo",
      width: 200,
      height: 24,
      items: null,
      itemsCreator: BI.emptyFn,
      isNeedAdjustWidth: true
    });
  },
  _init: function _init() {
    BI.TreeValueChooserInsertCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    if (BI.isNotNull(o.items)) {
      this._initData(o.items);
    }

    this.combo = BI.createWidget({
      type: "bi.multi_tree_insert_combo",
      simple: o.simple,
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      allowEdit: o.allowEdit,
      text: o.text,
      defaultText: o.defaultText,
      value: o.value,
      watermark: o.watermark,
      element: this,
      itemsCreator: BI.bind(this._itemsCreator, this),
      valueFormatter: BI.bind(this._valueFormatter, this),
      width: o.width,
      height: o.height,
      listeners: [{
        eventName: BI.MultiTreeInsertCombo.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserCombo.EVENT_FOCUS);
        }
      }, {
        eventName: BI.MultiTreeInsertCombo.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserCombo.EVENT_BLUR);
        }
      }, {
        eventName: BI.MultiTreeInsertCombo.EVENT_STOP,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserInsertCombo.EVENT_STOP);
        }
      }, {
        eventName: BI.MultiTreeInsertCombo.EVENT_CLICK_ITEM,
        action: function action(v) {
          self.fireEvent(BI.TreeValueChooserInsertCombo.EVENT_CLICK_ITEM, v);
        }
      }, {
        eventName: BI.MultiTreeInsertCombo.EVENT_SEARCHING,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserInsertCombo.EVENT_SEARCHING);
        }
      }, {
        eventName: BI.MultiTreeInsertCombo.EVENT_CONFIRM,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserInsertCombo.EVENT_CONFIRM);
        }
      }, {
        eventName: BI.MultiTreeCombo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserInsertCombo.EVENT_BEFORE_POPUPVIEW);
        }
      }]
    });
  },
  showView: function showView() {
    this.combo.showView();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  getSearcher: function getSearcher() {
    return this.combo.getSearcher();
  },
  setValue: function setValue(v) {
    this.combo.setValue(v);
  },
  getValue: function getValue() {
    return this.combo.getValue();
  },
  populate: function populate(items) {
    if (BI.isNotNull(items)) {
      this._initData(items);
    }

    this.combo.populate();
  },
  focus: function focus() {
    this.combo.focus();
  },
  blur: function blur() {
    this.combo.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.combo.setWaterMark(v);
  }
});
BI.TreeValueChooserInsertCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.TreeValueChooserInsertCombo.EVENT_BLUR = "EVENT_BLUR";
BI.TreeValueChooserInsertCombo.EVENT_STOP = "EVENT_STOP";
BI.TreeValueChooserInsertCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.TreeValueChooserInsertCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.TreeValueChooserInsertCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.TreeValueChooserInsertCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.shortcut("bi.tree_value_chooser_insert_combo", BI.TreeValueChooserInsertCombo);

/***/ }),
/* 918 */
/***/ (function(module, exports) {

/**
 * 简单的复选下拉树控件, 适用于数据量少的情况
 *
 * Created by GUY on 2015/10/29.
 * @class BI.TreeValueChooserCombo
 * @extends BI.Widget
 */
BI.TreeValueChooserCombo = BI.inherit(BI.AbstractTreeValueChooser, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TreeValueChooserCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-tree-value-chooser-combo",
      width: 200,
      height: 24,
      items: null,
      itemsCreator: BI.emptyFn,
      isNeedAdjustWidth: true
    });
  },
  _init: function _init() {
    BI.TreeValueChooserCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    if (BI.isNotNull(o.items)) {
      this._initData(o.items);
    }

    this.combo = BI.createWidget({
      type: "bi.multi_tree_combo",
      simple: o.simple,
      text: o.text,
      defaultText: o.defaultText,
      allowEdit: o.allowEdit,
      value: this.assertSelectedValue(o.value, o.items),
      watermark: o.watermark,
      element: this,
      itemsCreator: BI.bind(this._itemsCreator, this),
      valueFormatter: BI.bind(this._valueFormatter, this),
      width: o.width,
      height: o.height,
      isNeedAdjustWidth: o.isNeedAdjustWidth,
      listeners: [{
        eventName: BI.MultiTreeCombo.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserCombo.EVENT_FOCUS);
        }
      }, {
        eventName: BI.MultiTreeCombo.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserCombo.EVENT_BLUR);
        }
      }, {
        eventName: BI.MultiTreeCombo.EVENT_STOP,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserCombo.EVENT_STOP);
        }
      }, {
        eventName: BI.MultiTreeCombo.EVENT_CLICK_ITEM,
        action: function action(v) {
          self.fireEvent(BI.TreeValueChooserCombo.EVENT_CLICK_ITEM, v);
        }
      }, {
        eventName: BI.MultiTreeCombo.EVENT_SEARCHING,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserCombo.EVENT_SEARCHING);
        }
      }, {
        eventName: BI.MultiTreeCombo.EVENT_CONFIRM,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserCombo.EVENT_CONFIRM);
        }
      }, {
        eventName: BI.MultiTreeCombo.EVENT_BEFORE_POPUPVIEW,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserCombo.EVENT_BEFORE_POPUPVIEW);
        }
      }, {
        eventName: BI.MultiTreeCombo.EVENT_AFTER_HIDEVIEW,
        action: function action() {
          self.fireEvent(BI.TreeValueChooserCombo.EVENT_AFTER_HIDEVIEW);
        }
      }]
    });
  },
  showView: function showView() {
    this.combo.showView();
  },
  hideView: function hideView() {
    this.combo.hideView();
  },
  getSearcher: function getSearcher() {
    return this.combo.getSearcher();
  },
  setValue: function setValue(v) {
    this.combo.setValue(v);
  },
  getValue: function getValue() {
    return this.combo.getValue();
  },
  getAllValue: function getAllValue() {
    return this.buildCompleteTree(this.combo.getValue());
  },
  populate: function populate(items) {
    if (BI.isNotNull(items)) {
      this._initData(items);
    }

    this.combo.populate();
  },
  focus: function focus() {
    this.combo.focus();
  },
  blur: function blur() {
    this.combo.blur();
  },
  setWaterMark: function setWaterMark(v) {
    this.combo.setWaterMark(v);
  }
});
BI.TreeValueChooserCombo.EVENT_BEFORE_POPUPVIEW = "EVENT_BEFORE_POPUPVIEW";
BI.TreeValueChooserCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.TreeValueChooserCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.TreeValueChooserCombo.EVENT_BLUR = "EVENT_BLUR";
BI.TreeValueChooserCombo.EVENT_STOP = "EVENT_STOP";
BI.TreeValueChooserCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.TreeValueChooserCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.TreeValueChooserCombo.EVENT_AFTER_HIDEVIEW = "EVENT_AFTER_HIDEVIEW";
BI.shortcut("bi.tree_value_chooser_combo", BI.TreeValueChooserCombo);

/***/ }),
/* 919 */
/***/ (function(module, exports) {

/**
 * 简单的树面板, 适用于数据量少的情况
 *
 * Created by GUY on 2015/10/29.
 * @class BI.TreeValueChooserPane
 * @extends BI.AbstractTreeValueChooser
 */
BI.TreeValueChooserPane = BI.inherit(BI.AbstractTreeValueChooser, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TreeValueChooserPane.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-tree-value-chooser-pane",
      items: null,
      itemsCreator: BI.emptyFn,
      showLine: true
    });
  },
  _init: function _init() {
    BI.TreeValueChooserPane.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.pane = BI.createWidget({
      type: o.hideSearch ? "bi.multi_select_tree_popup" : "bi.multi_select_tree",
      element: this,
      showLine: o.showLine,
      itemsCreator: BI.bind(this._itemsCreator, this)
    });
    this.pane.on(BI.MultiSelectTree.EVENT_CHANGE, function () {
      self.fireEvent(BI.TreeValueChooserPane.EVENT_CHANGE);
    });

    if (BI.isNotNull(o.value)) {
      var selectedValues = this.assertSelectedValue(o.value, o.items);
      this.pane.setSelectedValue(selectedValues);
    }

    if (BI.isNotNull(o.items)) {
      this._initData(o.items);

      this.pane.populate();
    }
  },
  setSelectedValue: function setSelectedValue(v) {
    this.pane.setSelectedValue(v);
  },
  setValue: function setValue(v) {
    this.pane.setValue(v);
  },
  getValue: function getValue() {
    return this.pane.getValue();
  },
  getAllValue: function getAllValue() {
    return this.buildCompleteTree(this.pane.getValue());
  },
  populate: function populate(items) {
    if (BI.isNotNull(items)) {
      this._initData(items);
    }

    this.pane.populate();
  }
});
BI.TreeValueChooserPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.tree_value_chooser_pane", BI.TreeValueChooserPane);

/***/ }),
/* 920 */
/***/ (function(module, exports) {

/**
 * 简单的复选下拉框控件, 适用于数据量少的情况
 * 封装了字段处理逻辑
 *
 * Created by GUY on 2015/10/29.
 * @class BI.AbstractValueChooser
 * @extends BI.Widget
 */
BI.AbstractValueChooser = BI.inherit(BI.Widget, {
  _const: {
    perPage: 100
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.AbstractValueChooser.superclass._defaultConfig.apply(this, arguments), {
      items: null,
      itemsCreator: BI.emptyFn,
      cache: true
    });
  },
  _valueFormatter: function _valueFormatter(v) {
    var text = v;

    if (this.options.valueFormatter) {
      return this.options.valueFormatter(v);
    }

    if (BI.isNotNull(this.items)) {
      BI.some(this.items, function (i, item) {
        // 把value都换成字符串
        if (item.value === v || item.value + "" === v) {
          text = item.text;
          return true;
        }
      });
    }

    return text;
  },
  _getItemsByTimes: function _getItemsByTimes(items, times) {
    var res = [];

    for (var i = (times - 1) * this._const.perPage; items[i] && i < times * this._const.perPage; i++) {
      res.push(items[i]);
    }

    return res;
  },
  _hasNextByTimes: function _hasNextByTimes(items, times) {
    return times * this._const.perPage < items.length;
  },
  _itemsCreator: function _itemsCreator(options, callback) {
    var self = this,
        o = this.options;

    if (!o.cache || !this.items) {
      o.itemsCreator({}, function (items) {
        self.items = items;
        call(items);
      });
    } else {
      call(this.items);
    }

    function call(items) {
      var keywords = (options.keywords || []).slice();
      var resultItems = items;

      if (BI.isNotEmptyArray(keywords)) {
        resultItems = [];
        BI.each(keywords, function (i, kw) {
          var search = BI.Func.getSearchResult(items, kw);
          resultItems = resultItems.concat(search.match).concat(search.find);
        });
        resultItems = BI.uniq(resultItems);
      }

      if (options.selectedValues) {
        // 过滤
        var filter = BI.makeObject(options.selectedValues, true);
        resultItems = BI.filter(resultItems, function (i, ob) {
          return !filter[ob.value];
        });
      }

      if (options.type === BI.MultiSelectCombo.REQ_GET_ALL_DATA) {
        callback({
          items: resultItems
        });
        return;
      }

      if (options.type === BI.MultiSelectCombo.REQ_GET_DATA_LENGTH) {
        callback({
          count: resultItems.length
        });
        return;
      }

      callback({
        items: self._getItemsByTimes(resultItems, options.times),
        hasNext: self._hasNextByTimes(resultItems, options.times)
      });
    }
  },
  _assertValue: function _assertValue(v) {
    v = v || {};
    var value = v;

    if (v.type === BI.Selection.Multi && BI.isNotNull(this.items)) {
      var isAllSelect = BI.difference(BI.map(this.items, "value"), v.value).length === 0;

      if (isAllSelect) {
        value = {
          type: BI.Selection.All,
          value: []
        };
      }
    }

    return value;
  }
});

/***/ }),
/* 921 */
/***/ (function(module, exports) {

/**
 * 简单的复选下拉框控件, 适用于数据量少的情况
 * 封装了字段处理逻辑
 */
BI.ValueChooserInsertCombo = BI.inherit(BI.AbstractValueChooser, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ValueChooserInsertCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-value-chooser-insert-combo",
      width: 200,
      height: 24,
      items: null,
      itemsCreator: BI.emptyFn,
      cache: true
    });
  },
  _init: function _init() {
    BI.ValueChooserInsertCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    if (BI.isNotNull(o.items)) {
      this.items = o.items;
    }

    this.combo = BI.createWidget({
      type: "bi.multi_select_insert_combo",
      simple: o.simple,
      element: this,
      allowEdit: o.allowEdit,
      text: o.text,
      value: this._assertValue(o.value),
      itemsCreator: BI.bind(this._itemsCreator, this),
      valueFormatter: BI.bind(this._valueFormatter, this),
      width: o.width,
      height: o.height,
      listeners: [{
        eventName: BI.MultiSelectCombo.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.ValueChooserInsertCombo.EVENT_FOCUS);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.ValueChooserInsertCombo.EVENT_BLUR);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_STOP,
        action: function action() {
          self.fireEvent(BI.ValueChooserInsertCombo.EVENT_STOP);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_CLICK_ITEM,
        action: function action() {
          self.fireEvent(BI.ValueChooserInsertCombo.EVENT_CLICK_ITEM);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_SEARCHING,
        action: function action() {
          self.fireEvent(BI.ValueChooserInsertCombo.EVENT_SEARCHING);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_CONFIRM,
        action: function action() {
          self.fireEvent(BI.ValueChooserInsertCombo.EVENT_CONFIRM);
        }
      }]
    });
  },
  setValue: function setValue(v) {
    this.combo.setValue(this._assertValue(v));
  },
  getValue: function getValue() {
    var val = this.combo.getValue() || {};
    return {
      type: val.type,
      value: val.value
    };
  },
  getAllValue: function getAllValue() {
    var val = this.combo.getValue() || {};

    if (val.type === BI.Selection.Multi) {
      return val.value || [];
    }

    return BI.difference(BI.map(this.items, "value"), val.value || []);
  },
  populate: function populate(items) {
    // 直接用combo的populate不会作用到AbstractValueChooser上
    if (BI.isNotNull(items)) {
      this.items = items;
    }

    this.combo.populate();
  }
});
BI.ValueChooserInsertCombo.EVENT_BLUR = "EVENT_BLUR";
BI.ValueChooserInsertCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.ValueChooserInsertCombo.EVENT_STOP = "EVENT_STOP";
BI.ValueChooserInsertCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.ValueChooserInsertCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.ValueChooserInsertCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.value_chooser_insert_combo", BI.ValueChooserInsertCombo);

/***/ }),
/* 922 */
/***/ (function(module, exports) {

/**
 * 简单的复选下拉框控件, 适用于数据量少的情况
 * 封装了字段处理逻辑
 *
 * Created by GUY on 2015/10/29.
 * @class BI.ValueChooserCombo
 * @extends BI.Widget
 */
BI.ValueChooserCombo = BI.inherit(BI.AbstractValueChooser, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ValueChooserCombo.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-value-chooser-combo",
      width: 200,
      height: 24,
      items: null,
      itemsCreator: BI.emptyFn,
      cache: true
    });
  },
  _init: function _init() {
    BI.ValueChooserCombo.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    if (BI.isNotNull(o.items)) {
      this.items = o.items;
    }

    this.combo = BI.createWidget({
      type: "bi.multi_select_combo",
      simple: o.simple,
      element: this,
      allowEdit: o.allowEdit,
      text: o.text,
      defaultText: o.defaultText,
      value: this._assertValue(o.value),
      itemsCreator: BI.bind(this._itemsCreator, this),
      valueFormatter: BI.bind(this._valueFormatter, this),
      width: o.width,
      height: o.height,
      listeners: [{
        eventName: BI.MultiSelectCombo.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.ValueChooserCombo.EVENT_FOCUS);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.ValueChooserCombo.EVENT_BLUR);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_STOP,
        action: function action() {
          self.fireEvent(BI.ValueChooserCombo.EVENT_STOP);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_CLICK_ITEM,
        action: function action() {
          self.fireEvent(BI.ValueChooserCombo.EVENT_CLICK_ITEM);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_SEARCHING,
        action: function action() {
          self.fireEvent(BI.ValueChooserCombo.EVENT_SEARCHING);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_CONFIRM,
        action: function action() {
          self.fireEvent(BI.ValueChooserCombo.EVENT_CONFIRM);
        }
      }]
    });
  },
  setValue: function setValue(v) {
    this.combo.setValue(this._assertValue(v));
  },
  getValue: function getValue() {
    var val = this.combo.getValue() || {};
    return {
      type: val.type,
      value: val.value
    };
  },
  getAllValue: function getAllValue() {
    var val = this.combo.getValue() || {};

    if (val.type === BI.Selection.Multi) {
      return val.value || [];
    }

    return BI.difference(BI.map(this.items, "value"), val.value || []);
  },
  populate: function populate(items) {
    // 直接用combo的populate不会作用到AbstractValueChooser上
    if (BI.isNotNull(items)) {
      this.items = items;
    }

    this.combo.populate();
  }
});
BI.ValueChooserCombo.EVENT_BLUR = "EVENT_BLUR";
BI.ValueChooserCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.ValueChooserCombo.EVENT_STOP = "EVENT_STOP";
BI.ValueChooserCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.ValueChooserCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.ValueChooserCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.value_chooser_combo", BI.ValueChooserCombo);

/***/ }),
/* 923 */
/***/ (function(module, exports) {

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2020/12/31
 */
BI.ValueChooserNoBarCombo = BI.inherit(BI.AbstractValueChooser, {
  props: {
    baseCls: "bi-value-chooser-combo",
    width: 200,
    height: 24,
    items: null,
    itemsCreator: BI.emptyFn,
    cache: true
  },
  render: function render() {
    var self = this,
        o = this.options;

    if (BI.isNotNull(o.items)) {
      this.items = o.items;
    }

    return {
      type: "bi.multi_select_no_bar_combo",
      simple: o.simple,
      allowEdit: o.allowEdit,
      text: o.text,
      defaultText: o.defaultText,
      value: this._assertValue(o.value),
      itemsCreator: BI.bind(this._itemsCreator, this),
      valueFormatter: BI.bind(this._valueFormatter, this),
      width: o.width,
      height: o.height,
      ref: function ref(_ref) {
        self.combo = _ref;
      },
      listeners: [{
        eventName: BI.MultiSelectCombo.EVENT_FOCUS,
        action: function action() {
          self.fireEvent(BI.ValueChooserNoBarCombo.EVENT_FOCUS);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_BLUR,
        action: function action() {
          self.fireEvent(BI.ValueChooserNoBarCombo.EVENT_BLUR);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_STOP,
        action: function action() {
          self.fireEvent(BI.ValueChooserNoBarCombo.EVENT_STOP);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_CLICK_ITEM,
        action: function action() {
          self.fireEvent(BI.ValueChooserNoBarCombo.EVENT_CLICK_ITEM);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_SEARCHING,
        action: function action() {
          self.fireEvent(BI.ValueChooserNoBarCombo.EVENT_SEARCHING);
        }
      }, {
        eventName: BI.MultiSelectCombo.EVENT_CONFIRM,
        action: function action() {
          self.fireEvent(BI.ValueChooserNoBarCombo.EVENT_CONFIRM);
        }
      }]
    };
  },
  setValue: function setValue(v) {
    this.combo.setValue(v);
  },
  getValue: function getValue() {
    return this.combo.getValue();
  },
  getAllValue: function getAllValue() {
    return this.getValue();
  },
  populate: function populate(items) {
    // 直接用combo的populate不会作用到AbstractValueChooser上
    if (BI.isNotNull(items)) {
      this.items = items;
    }

    this.combo.populate();
  }
});
BI.ValueChooserNoBarCombo.EVENT_BLUR = "EVENT_BLUR";
BI.ValueChooserNoBarCombo.EVENT_FOCUS = "EVENT_FOCUS";
BI.ValueChooserNoBarCombo.EVENT_STOP = "EVENT_STOP";
BI.ValueChooserNoBarCombo.EVENT_SEARCHING = "EVENT_SEARCHING";
BI.ValueChooserNoBarCombo.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.ValueChooserNoBarCombo.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.shortcut("bi.value_chooser_no_bar_combo", BI.ValueChooserNoBarCombo);

/***/ }),
/* 924 */
/***/ (function(module, exports) {

/**
 * 简单的复选面板, 适用于数据量少的情况
 * 封装了字段处理逻辑
 *
 * Created by GUY on 2015/10/29.
 * @class BI.ValueChooserPane
 * @extends BI.Widget
 */
BI.ValueChooserPane = BI.inherit(BI.AbstractValueChooser, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ValueChooserPane.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-value-chooser-pane",
      items: null,
      itemsCreator: BI.emptyFn,
      cache: true
    });
  },
  _init: function _init() {
    BI.ValueChooserPane.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.list = BI.createWidget({
      type: "bi.multi_select_list",
      element: this,
      value: o.value,
      itemsCreator: BI.bind(this._itemsCreator, this),
      valueFormatter: BI.bind(this._valueFormatter, this)
    });
    this.list.on(BI.MultiSelectList.EVENT_CHANGE, function () {
      self.fireEvent(BI.ValueChooserPane.EVENT_CHANGE);
    });

    if (BI.isNotNull(o.items)) {
      this.items = o.items;
      this.list.populate();
    }
  },
  setValue: function setValue(v) {
    this.list.setValue(v);
  },
  getValue: function getValue() {
    var val = this.list.getValue() || {};
    return {
      type: val.type,
      value: val.value
    };
  },
  getAllValue: function getAllValue() {
    var val = this.combo.getValue() || {};

    if (val.type === BI.Selection.Multi) {
      return val.value || [];
    }

    return BI.difference(BI.map(this.items, "value"), val.value || []);
  },
  populate: function populate(items) {
    // 直接用combo的populate不会作用到AbstractValueChooser上
    if (BI.isNotNull(items)) {
      this.items = items;
    }

    this.list.populate();
  }
});
BI.ValueChooserPane.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.value_chooser_pane", BI.ValueChooserPane);

/***/ }),
/* 925 */
/***/ (function(module, exports) {

;

(function () {
  function initWatch(vm, watch) {
    vm._watchers || (vm._watchers = []);

    for (var key in watch) {
      var handler = watch[key];

      if (BI.isArray(handler)) {
        for (var i = 0; i < handler.length; i++) {
          vm._watchers.push(createWatcher(vm, key, handler[i]));
        }
      } else {
        vm._watchers.push(createWatcher(vm, key, handler));
      }
    }

    BI.each(vm.$watchDelayCallbacks, function (i, watchDelayCallback) {
      var innerWatch = watchDelayCallback[0];
      var innerHandler = watchDelayCallback[1];

      if (BI.isKey(innerWatch)) {
        var key = innerWatch;
        innerWatch = {};
        innerWatch[key] = innerHandler;
      }

      for (var key in innerWatch) {
        var handler = innerWatch[key];

        if (BI.isArray(handler)) {
          for (var i = 0; i < handler.length; i++) {
            vm._watchers.push(createWatcher(vm, key, handler[i]));
          }
        } else {
          vm._watchers.push(createWatcher(vm, key, handler));
        }
      }
    });
  }

  function createWatcher(vm, keyOrFn, cb, options) {
    if (BI.isPlainObject(cb)) {
      options = cb;
      cb = cb.handler;
    }

    options = options || {};
    return Fix.watch(vm.model, keyOrFn, BI._.bind(cb, vm), BI.extend(options, {
      store: vm.store
    }));
  }

  var target = null;
  var targetStack = [];

  function pushTarget(_target) {
    if (target) targetStack.push(target);
    Fix.Model.target = target = _target;
  }

  function popTarget() {
    Fix.Model.target = target = targetStack.pop();
  }

  BI.Model = Fix.Model;
  var oldWatch = Fix.watch;

  Fix.watch = function (model, expOrFn, cb, options) {
    if (BI.isPlainObject(cb)) {
      options = cb;
      cb = cb.handler;
    }

    if (typeof cb === "string") {
      cb = model[cb];
    }

    return oldWatch.call(this, model, expOrFn, function () {
      options && options.store && pushTarget(options.store);

      try {
        var res = cb.apply(this, arguments);
      } catch (e) {
        console.error(e);
      }

      options && options.store && popTarget();
      return res;
    }, options);
  };

  BI.Widget.findStore = function findStore(widget) {
    if (target != null) {
      return target;
    }

    widget = widget || BI.Widget.context;
    var p = widget;

    while (p) {
      if (p instanceof Fix.Model || p.store || p.__cacheStore) {
        break;
      }

      p = p._parent || p.options && p.options.element || p._context;
    }

    if (p) {
      if (p instanceof Fix.Model) {
        return widget.__cacheStore = p;
      }

      widget.__cacheStore = p.store || p.__cacheStore;
      return p.__cacheStore || p.store;
    }
  };

  function createStore() {
    var needPop = false;
    var workerMode = BI.Providers.getProvider("bi.provider.system").getWorkerMode();

    if (workerMode && this._worker) {
      return;
    }

    if (this.store) {
      pushTarget(this.store);
      return true;
    }

    if (this._store || this.options._store) {
      var store = BI.Widget.findStore(this.options.context || this._parent || this.options.element || this._context);

      if (store) {
        pushTarget(store);
        needPop = true;
      }

      this.store = (this._store || this.options._store).call(this);
      this.store && (this.store._widget = this);
      needPop && popTarget();
      needPop = false;
      pushTarget(this.store);

      if (this.store instanceof Fix.Model) {
        this.model = this.store.model;
      } else {
        this.model = this.store;
      }

      needPop = true;
    }

    return needPop;
  }

  var _init = BI.Widget.prototype._init;

  BI.Widget.prototype._init = function () {
    var self = this;
    var needPop = createStore.call(this);

    try {
      _init.apply(this, arguments);
    } catch (e) {
      console.error(e);
    }

    needPop && popTarget();
  };

  var __initWatch = BI.Widget.prototype.__initWatch;

  BI.Widget.prototype.__initWatch = function () {
    __initWatch.apply(this, arguments);

    var workerMode = BI.Providers.getProvider("bi.provider.system").getWorkerMode();

    if (workerMode && this._worker) {
      return;
    }

    if (this._store) {
      initWatch(this, this.watch);
    }
  };

  var unMount = BI.Widget.prototype.__destroy;

  BI.Widget.prototype.__destroy = function () {
    try {
      unMount.apply(this, arguments);
    } catch (e) {
      console.error(e);
    }

    this.store && BI.isFunction(this.store.destroy) && this.store.destroy();
    BI.each(this._watchers, function (i, unwatches) {
      unwatches = BI.isArray(unwatches) ? unwatches : [unwatches];
      BI.each(unwatches, function (j, unwatch) {
        unwatch();
      });
    });
    this._watchers && (this._watchers = []);

    if (this.store) {
      this.store._parent && (this.store._parent = null);
      this.store._widget && (this.store._widget = null);
      this.store = null;
    }

    delete this.__cacheStore;
  };

  BI._.each(["_render", "__afterRender", "_mount", "__afterMount"], function (name) {
    var old = BI.Widget.prototype[name];
    old && (BI.Widget.prototype[name] = function () {
      this.store && pushTarget(this.store);

      try {
        var res = old.apply(this, arguments);
      } catch (e) {
        console.error(e);
      }

      this.store && popTarget();
      return res;
    });
  });
})();

/***/ }),
/* 926 */
/***/ (function(module, exports) {



/***/ }),
/* 927 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var decorator_namespaceObject = {};
__webpack_require__.r(decorator_namespaceObject);
__webpack_require__.d(decorator_namespaceObject, "shortcut", function() { return shortcut; });
__webpack_require__.d(decorator_namespaceObject, "provider", function() { return provider; });
__webpack_require__.d(decorator_namespaceObject, "model", function() { return model; });
__webpack_require__.d(decorator_namespaceObject, "store", function() { return store; });
__webpack_require__.d(decorator_namespaceObject, "mixin", function() { return mixin; });
__webpack_require__.d(decorator_namespaceObject, "mixins", function() { return mixins; });
__webpack_require__.d(decorator_namespaceObject, "Model", function() { return Model; });

// CONCATENATED MODULE: ./typescript/core/ob.ts

// CONCATENATED MODULE: ./typescript/core/widget.ts

// CONCATENATED MODULE: ./typescript/base/combination/combo.ts

// CONCATENATED MODULE: ./typescript/base/combination/group.button.ts

// CONCATENATED MODULE: ./typescript/base/combination/tab.ts

// CONCATENATED MODULE: ./typescript/base/pane.ts

// CONCATENATED MODULE: ./typescript/base/single/single.ts

// CONCATENATED MODULE: ./typescript/base/single/button/button.basic.ts

// CONCATENATED MODULE: ./typescript/base/single/button/button.node.ts

// CONCATENATED MODULE: ./typescript/base/single/button/buttons/button.ts

// CONCATENATED MODULE: ./typescript/base/single/button/buttons/button.text.ts

// CONCATENATED MODULE: ./typescript/base/single/button/listitem/icontextitem.ts

// CONCATENATED MODULE: ./typescript/base/single/editor/editor.ts

// CONCATENATED MODULE: ./typescript/base/single/iframe/iframe.ts

// CONCATENATED MODULE: ./typescript/base/single/input/checkbox.ts

// CONCATENATED MODULE: ./typescript/base/single/input/input.ts

// CONCATENATED MODULE: ./typescript/base/single/label/abstract.label.ts

// CONCATENATED MODULE: ./typescript/base/single/label/label.ts

// CONCATENATED MODULE: ./typescript/base/single/text.ts

// CONCATENATED MODULE: ./typescript/base/single/trigger/trigger.ts

// CONCATENATED MODULE: ./typescript/case/button/icon/icon.change.ts

// CONCATENATED MODULE: ./typescript/case/button/item.multiselect.ts

// CONCATENATED MODULE: ./typescript/case/combo/bubblecombo/combo.bubble.ts

// CONCATENATED MODULE: ./typescript/case/combo/combo.textvalue.ts

// CONCATENATED MODULE: ./typescript/case/combo/popup.textvalue.ts

// CONCATENATED MODULE: ./typescript/case/combo/combo.textvaluesmall.ts

// CONCATENATED MODULE: ./typescript/case/combo/searchtextvaluecombo/combo.searchtextvalue.ts

// CONCATENATED MODULE: ./typescript/case/editor/editor.sign.ts

// CONCATENATED MODULE: ./typescript/case/editor/editor.state.ts

// CONCATENATED MODULE: ./typescript/component/allvaluemultitextvaluecombo/allvalue.multitextvalue.combo.ts

// CONCATENATED MODULE: ./typescript/component/form/form.ts

// CONCATENATED MODULE: ./typescript/component/treevaluechooser/abstract.treevaluechooser.ts

// CONCATENATED MODULE: ./typescript/component/treevaluechooser/abstract.treevaluechooser.list.ts

// CONCATENATED MODULE: ./typescript/core/action/action.ts

// CONCATENATED MODULE: ./typescript/core/action/action.show.ts

// CONCATENATED MODULE: ./typescript/core/behavior/behavior.ts

// CONCATENATED MODULE: ./typescript/core/behavior/behavior.highlight.ts

// CONCATENATED MODULE: ./typescript/core/behavior/behavior.redmark.ts

// CONCATENATED MODULE: ./typescript/core/decorator/decorator.ts
function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

/**
 * 注册widget
 */
function shortcut() {
  return function decorator(Target) {
    BI.shortcut(Target.xtype, Target);
  };
}
/**
 * 注册provider
 */

function provider() {
  return function decorator(Target) {
    BI.provider(Target.xtype, Target);
  };
}
/**
 * 注册model
 */

function model() {
  return function decorator(Target) {
    BI.model(Target.xtype, Target);
  };
}
/**
 * 类注册_store属性
 * @param Model model类
 * @param opts 额外条件
 */

function store(Model) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function classDecorator(constructor) {
    return /*#__PURE__*/function (_constructor) {
      _inheritsLoose(_class, _constructor);

      function _class() {
        return _constructor.apply(this, arguments) || this;
      }

      var _proto = _class.prototype;

      _proto._store = function _store() {
        var props = opts.props ? opts.props.apply(this) : undefined;
        return BI.Models.getModel(Model.xtype, props);
      };

      return _class;
    }(constructor);
  };
}
/**
 * 注册mixin
 * ie8下不能使用
 */

function mixin() {
  return function decorator(Target) {
    var mixin = {};
    Object.getOwnPropertyNames(Target.prototype).forEach(function (name) {
      if (name === 'constructor') {
        return;
      }

      mixin[name] = Target.prototype[name];
    });
    Fix.mixin(Target.xtype, mixin);
  };
}
/**
 * 类注册mixins属性
 * ie8下不能使用
 * @param Mixins
 */

function mixins() {
  for (var _len = arguments.length, Mixins = new Array(_len), _key = 0; _key < _len; _key++) {
    Mixins[_key] = arguments[_key];
  }

  return function classDecorator(constructor) {
    var mixins = [];
    Mixins.forEach(function (mixin) {
      mixin.xtype && mixins.push(mixin.xtype);
    });
    return /*#__PURE__*/function (_constructor2) {
      _inheritsLoose(_class3, _constructor2);

      function _class3() {
        var _this;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        _this = _constructor2.call.apply(_constructor2, [this].concat(args)) || this;

        _defineProperty(_assertThisInitialized(_this), "mixins", mixins);

        return _this;
      }

      return _class3;
    }(constructor);
  };
}
/**
 * Model基类
 */

var Model = /*#__PURE__*/function (_Fix$Model) {
  _inheritsLoose(Model, _Fix$Model);

  function Model() {
    var _this2;

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    _this2 = _Fix$Model.call.apply(_Fix$Model, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this2), "model", void 0);

    _defineProperty(_assertThisInitialized(_this2), "store", void 0);

    _defineProperty(_assertThisInitialized(_this2), "context", void 0);

    _defineProperty(_assertThisInitialized(_this2), "actions", void 0);

    _defineProperty(_assertThisInitialized(_this2), "childContext", void 0);

    _defineProperty(_assertThisInitialized(_this2), "TYPE", void 0);

    _defineProperty(_assertThisInitialized(_this2), "computed", void 0);

    return _this2;
  }

  var _proto2 = Model.prototype;

  _proto2.state = function state() {
    return {};
  };

  return Model;
}(Fix.Model);
/* 分享一段很好看的代码
// union to intersection of functions
type UnionToIoF<U> =
    (U extends any ? (k: (x: U) => void) => void : never) extends
    ((k: infer I) => void) ? I : never

// return last element from Union
type UnionPop<U> = UnionToIoF<U> extends { (a: infer A): void; } ? A : never;

// prepend an element to a tuple.
type Prepend<U, T extends ReadonlyArray<any>> =
    ((a: U, ...r: T) => void) extends (...r: infer R) => void ? R : never;

type UnionToTupleRecursively<Union, Result extends ReadonlyArray<any>> = {
    1: Result;
    0: UnionToTupleRecursively_<Union, UnionPop<Union>, Result>;
    // 0: UnionToTupleRecursively<Exclude<Union, UnionPop<Union>>, Prepend<UnionPop<Union>, Result>>
}[[Union] extends [never] ? 1 : 0];

type UnionToTupleRecursively_<Union, Element, Result extends ReadonlyArray<any>> =
    UnionToTupleRecursively<Exclude<Union, Element>, Prepend<Element, Result>>;

type UnionToTuple<U> = UnionToTupleRecursively<U, []>;
*/
// CONCATENATED MODULE: ./typescript/core/wrapper/layout.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.absolute.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.tape.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/fill/fill.horizontal.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/fill/fill.vertical.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.vertical.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.default.ts

// CONCATENATED MODULE: ./typescript/widget/downlist/combo.downlist.ts

// CONCATENATED MODULE: ./typescript/widget/downlist/popup.downlist.ts

// CONCATENATED MODULE: ./typescript/base/single/icon/icon.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/adapt/adapt.leftvertical.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/adapt/adapt.leftrightvertical.ts

// CONCATENATED MODULE: ./typescript/base/single/button/listitem/icontexticonitem.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/adapt/auto.horizontal.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/adapt/inline.vertical.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/adapt/adapt.table.ts

// CONCATENATED MODULE: ./typescript/base/single/button/buttons/button.icon.ts

// CONCATENATED MODULE: ./typescript/widget/editor/editor.text.ts

// CONCATENATED MODULE: ./typescript/base/single/label/icon.label.ts

// CONCATENATED MODULE: ./typescript/base/layer/layer.popover.ts

// CONCATENATED MODULE: ./typescript/case/combo/iconcombo/combo.icon.ts

// CONCATENATED MODULE: ./typescript/widget/dynamicdate/dynamicdate.combo.ts

// CONCATENATED MODULE: ./typescript/base/tree/customtree.ts

// CONCATENATED MODULE: ./typescript/base/combination/tree.button.ts

// CONCATENATED MODULE: ./typescript/case/button/node/node.icon.arrow.ts

// CONCATENATED MODULE: ./typescript/case/button/treeitem/item.mid.treeleaf.ts

// CONCATENATED MODULE: ./typescript/case/button/treeitem/item.first.treeleaf.ts

// CONCATENATED MODULE: ./typescript/case/button/treeitem/item.last.treeleaf.ts

// CONCATENATED MODULE: ./typescript/widget/editor/editor.text.small.ts

// CONCATENATED MODULE: ./typescript/widget/editor/editor.multifile.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/adapt/absolute.center.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/adapt/adapt.horizontal.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.flow.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/adapt/adapt.center.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/adapt/adapt.vertical.ts

// CONCATENATED MODULE: ./typescript/widget/multiselect/multiselect.insert.combo.ts

// CONCATENATED MODULE: ./typescript/widget/multiselect/multiselect.combo.ts

// CONCATENATED MODULE: ./typescript/widget/editor/editor.search.ts

// CONCATENATED MODULE: ./typescript/widget/multilayersingletree/multilayersingletree.leveltree.ts

// CONCATENATED MODULE: ./typescript/case/colorchooser/colorchooser.simple.ts

// CONCATENATED MODULE: ./typescript/case/colorchooser/colorchooser.ts

// CONCATENATED MODULE: ./typescript/base/a/a.ts

// CONCATENATED MODULE: ./typescript/base/single/html/html.ts

// CONCATENATED MODULE: ./typescript/base/combination/switcher.ts

// CONCATENATED MODULE: ./typescript/base/combination/expander.ts

// CONCATENATED MODULE: ./typescript/base/combination/loader.ts

// CONCATENATED MODULE: ./typescript/case/layer/pane.list.ts

// CONCATENATED MODULE: ./typescript/base/layer/layer.popup.ts

// CONCATENATED MODULE: ./typescript/case/layer/layer.multipopup.ts

// CONCATENATED MODULE: ./typescript/case/toolbar/toolbar.multiselect.ts

// CONCATENATED MODULE: ./typescript/case/list/list.select.ts

// CONCATENATED MODULE: ./typescript/component/allvaluechooser/abstract.allvaluechooser.ts

// CONCATENATED MODULE: ./typescript/component/allvaluechooser/combo.allvaluechooser.ts

// CONCATENATED MODULE: ./typescript/base/single/editor/editor.textarea.ts

// CONCATENATED MODULE: ./typescript/case/button/item.singleselect.ts

// CONCATENATED MODULE: ./typescript/widget/dynamicdatetime/dynamicdatetime.combo.ts

// CONCATENATED MODULE: ./typescript/widget/multitree/multi.tree.combo.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/middle/middle.center.ts

// CONCATENATED MODULE: ./typescript/base/combination/group.virtual.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.grid.ts

// CONCATENATED MODULE: ./typescript/case/button/icon/icon.trigger.ts

// CONCATENATED MODULE: ./typescript/base/combination/searcher.ts

// CONCATENATED MODULE: ./typescript/component/treevaluechooser/combo.listtreevaluechooser.ts

// CONCATENATED MODULE: ./typescript/component/treevaluechooser/combo.treevaluechooser.ts

// CONCATENATED MODULE: ./typescript/component/treevaluechooser/combo.treevaluechooser.insert.ts

// CONCATENATED MODULE: ./typescript/base/single/input/radio/radio.ts

// CONCATENATED MODULE: ./typescript/widget/multilayerselecttree/multilayerselecttree.popup.ts

// CONCATENATED MODULE: ./typescript/widget/multilayersingletree/multilayersingletree.popup.ts

// CONCATENATED MODULE: ./typescript/widget/multilayerdownlist/multilayerdownlist.popup.ts

// CONCATENATED MODULE: ./typescript/base/tree/ztree/treeview.ts

// CONCATENATED MODULE: ./typescript/widget/multitree/multi.tree.popup.ts

// CONCATENATED MODULE: ./typescript/case/button/item.singleselect.radio.ts

// CONCATENATED MODULE: ./typescript/widget/singleselect/singleselect.insert.combo.ts

// CONCATENATED MODULE: ./typescript/widget/singleselect/singleselect.combo.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.card.ts

// CONCATENATED MODULE: ./typescript/widget/yearmonth/combo.yearmonth.ts

// CONCATENATED MODULE: ./typescript/widget/time/time.combo.ts

// CONCATENATED MODULE: ./typescript/base/tree/ztree/list/listtreeview.ts

// CONCATENATED MODULE: ./typescript/base/tree/ztree/list/listasynctree.ts

// CONCATENATED MODULE: ./typescript/base/tree/ztree/asynctree.ts

// CONCATENATED MODULE: ./typescript/widget/multilayersingletree/multilayersingletree.combo.ts

// CONCATENATED MODULE: ./typescript/widget/multilayerselecttree/multilayerselecttree.combo.ts

// CONCATENATED MODULE: ./typescript/widget/multilayerdownlist/multilayerdownlist.combo.ts

// CONCATENATED MODULE: ./typescript/widget/multitree/multi.tree.list.combo.ts

// CONCATENATED MODULE: ./typescript/widget/multitree/multi.tree.insert.combo.ts

// CONCATENATED MODULE: ./typescript/widget/textvaluedownlistcombo/combo.textvaluedownlist.ts

// CONCATENATED MODULE: ./typescript/case/button/switch.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.horizontal.ts

// CONCATENATED MODULE: ./typescript/case/editor/editor.shelter.ts

// CONCATENATED MODULE: ./typescript/case/trigger/trigger.text.ts

// CONCATENATED MODULE: ./typescript/case/trigger/trigger.text.select.ts

// CONCATENATED MODULE: ./typescript/widget/timeinterval/dateinterval.ts

// CONCATENATED MODULE: ./typescript/widget/datepane/datepane.ts

// CONCATENATED MODULE: ./typescript/case/pager/pager.all.count.ts

// CONCATENATED MODULE: ./typescript/case/pager/pager.direction.ts

// CONCATENATED MODULE: ./typescript/case/combo/bubblecombo/popup.bubble.ts


// CONCATENATED MODULE: ./typescript/case/checkbox/check.arrownode.ts

// CONCATENATED MODULE: ./typescript/widget/numberinterval/numberinterval.ts

// CONCATENATED MODULE: ./typescript/widget/yearquarter/combo.yearquarter.ts

// CONCATENATED MODULE: ./typescript/widget/year/combo.year.ts

// CONCATENATED MODULE: ./typescript/widget/year/popup.year.ts

// CONCATENATED MODULE: ./typescript/widget/intervalslider/intervalslider.ts

// CONCATENATED MODULE: ./typescript/widget/multiselectlist/multiselectlist.insert.ts

// CONCATENATED MODULE: ./typescript/widget/yearmonthinterval/yearmonthinterval.ts

// CONCATENATED MODULE: ./typescript/widget/numbereditor/numbereditor.ts

// CONCATENATED MODULE: ./typescript/case/combo/textvaluecheckcombo/combo.textvaluecheck.ts

// CONCATENATED MODULE: ./typescript/case/segment/segment.ts

// CONCATENATED MODULE: ./typescript/case/linersegment/linear.segment.ts

// CONCATENATED MODULE: ./typescript/base/single/img/img.ts

// CONCATENATED MODULE: ./typescript/case/combo/editoriconcheckcombo/combo.editiconcheck.ts

// CONCATENATED MODULE: ./typescript/case/combo/icontextvaluecombo/combo.icontextvalue.ts

// CONCATENATED MODULE: ./typescript/base/list/listview.ts

// CONCATENATED MODULE: ./typescript/base/list/virtuallist.ts

// CONCATENATED MODULE: ./typescript/base/list/virtualgrouplist.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/middle/middle.float.center.ts

// CONCATENATED MODULE: ./typescript/widget/yearmonth/popup.yearmonth.ts

// CONCATENATED MODULE: ./typescript/core/controller/controller.ts

// CONCATENATED MODULE: ./typescript/core/controller/controller.layer.ts

// CONCATENATED MODULE: ./typescript/widget/date/calendar/popup.calendar.date.ts

// CONCATENATED MODULE: ./typescript/core/utils/tree.ts

// CONCATENATED MODULE: ./typescript/base/single/button/node/textnode.ts

// CONCATENATED MODULE: ./typescript/case/combo/textvaluecheckcombo/popup.textvaluecheck.ts

// CONCATENATED MODULE: ./typescript/base/single/button/buttons/button.image.ts

// CONCATENATED MODULE: ./typescript/router/router.ts

// CONCATENATED MODULE: ./typescript/widget/datetime/datetime.combo.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/adapt/float.horizontal.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.adaptive.ts

// CONCATENATED MODULE: ./typescript/case/colorchooser/colorchooser.popup.hex.ts

// CONCATENATED MODULE: ./typescript/base/single/button/listitem/blankicontextitem.ts

// CONCATENATED MODULE: ./typescript/core/controller/controller.broadcast.ts

// CONCATENATED MODULE: ./typescript/base/pager/pager.ts

// CONCATENATED MODULE: ./typescript/widget/timeinterval/timeinterval.ts

// CONCATENATED MODULE: ./typescript/widget/datetimepane/datetimepane.ts

// CONCATENATED MODULE: ./typescript/widget/singleselect/singleselectlist.insert.ts

// CONCATENATED MODULE: ./typescript/widget/multiselecttree/multiselecttree.ts

// CONCATENATED MODULE: ./typescript/base/single/label/html.label.ts

// CONCATENATED MODULE: ./typescript/component/treevaluechooser/pane.treevaluechooser.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.td.ts

// CONCATENATED MODULE: ./typescript/widget/multilayerselecttree/multilayerselecttree.leveltree.ts

// CONCATENATED MODULE: ./typescript/widget/selecttree/selecttree.expander.ts

// CONCATENATED MODULE: ./typescript/widget/downlist/item.downlistgroup.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/sticky/sticky.vertical.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/sticky/sticky.horizontal.ts

// CONCATENATED MODULE: ./typescript/core/wrapper/layout/layout.table.ts

// EXTERNAL MODULE: ./typescript/shims-tsx.ts
var shims_tsx = __webpack_require__(926);

// CONCATENATED MODULE: ./typescript/core/worker/worker.core.ts
/**
 * 会话消息类型枚举
 */
var WorkerMessageType = {
  REQUEST: 'REQUEST',
  REPLY: 'REPLY'
};
/**
 * 会话消息
 */
// CONCATENATED MODULE: ./typescript/core/worker/worker.channel.ts
function worker_channel_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


var COMMUNICATION_TIMEOUT = 30000;
/**
 * 通信通道
 */

var worker_channel_WorkerChannel = /*#__PURE__*/function () {
  /**
   * Web Worker 实例
   */

  /**
   * 上层通信控制器
   */

  /**
   * 会话响应器 Map
   */
  function WorkerChannel(worker, controller) {
    worker_channel_defineProperty(this, "worker", void 0);

    worker_channel_defineProperty(this, "controller", void 0);

    worker_channel_defineProperty(this, "sessionHandlerMap", void 0);

    this.worker = worker;
    this.controller = controller;
    this.sessionHandlerMap = {}; // 绑定 worker onmessage 事件的回调

    this.worker.addEventListener('message', this.onmessage.bind(this));
  }
  /**
   * 发送响应
   *
   * @param sessionId 会话 Id
   * @param payload 负载
   */


  var _proto = WorkerChannel.prototype;

  _proto.response = function response(sessionId, actionType, payload) {
    this.postMessage({
      messageType: WorkerMessageType.REPLY,
      actionType: actionType,
      payload: payload,
      sessionId: sessionId
    });
  }
  /**
   * 发送请求, 不等待响应
   *
   * @param actionType 事务类型
   * @param payload 负载
   */
  ;

  _proto.request = function request(actionType, payload) {
    var sessionId = this.generateSessionId();
    this.postMessage({
      messageType: WorkerMessageType.REQUEST,
      actionType: actionType,
      payload: payload,
      sessionId: sessionId
    }); // 不等待结果, 还会收到响应, 添加个空的会话响应器

    this.addSessionHandler(sessionId, function () {});
  }
  /**
   * 发送请求, 并等待响应
   *
   * @param actionType 事务类型
   * @param payload 负载
   * @param timeout 响应超时
   * @returns {Promise<IWorkerMessage>} 等待响应的 Promise
   */
  ;

  _proto.requestPromise = function requestPromise(actionType, payload) {
    var _this = this;

    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : COMMUNICATION_TIMEOUT;
    var sessionId = this.generateSessionId();
    var message = {
      messageType: WorkerMessageType.REQUEST,
      actionType: actionType,
      payload: payload,
      sessionId: sessionId
    }; // 请求封装为一个 Promise, 等待会话响应器进行 resolve

    var PromiseFunction = function PromiseFunction(resolve, reject) {
      // 启动请求超时计时器
      var timeoutHandler = setTimeout(function () {
        clearTimeout(timeoutHandler);
        reject();
      }, timeout);

      var sessionHandler = function sessionHandler(message) {
        // 会话回调函数, 开始处理响应
        _this.deleteSessionHandler(message.sessionId);

        clearTimeout(timeoutHandler);
        resolve(message.payload);
      };

      _this.addSessionHandler(sessionId, sessionHandler); // 开始发送请求


      _this.postMessage(message);
    };

    return new Promise(PromiseFunction);
  }
  /**
   * 收到会话消息的处理函数
   *
   * 发现是请求, 调用通信控制器的事务处理器进行处理, 获取事务结果并响应;
   * 发现是响应，调用会话响应器
   * @param event worker 通信事件
   */
  ;

  _proto.onmessage = function onmessage(event) {
    var _this2 = this;

    var message = event.data;
    var messageType = message.messageType,
        sessionId = message.sessionId,
        actionType = message.actionType; // 接收到请求

    if (messageType === WorkerMessageType.REQUEST) {
      // 处理请求
      this.controller.actionHandler(message).then(function (actionResult) {
        // 响应请求
        _this2.response(sessionId, actionType, actionResult);
      });
    } // 接收到响应


    if (messageType === WorkerMessageType.REPLY) {
      // 处理响应
      if (this.hasSessionHandler(sessionId)) {
        this.sessionHandlerMap[sessionId](message);
      } else {
        throw new Error("Session `".concat(sessionId, "` handler no exist"));
      }
    }
  }
  /**
   * 封装的 worker 原生 postMessage 接口
   * 支持 structured clone 和 transfer 2种通信模式
   *
   * @param message 会话消息
   */
  ;

  _proto.postMessage = function postMessage(message) {
    this.worker.postMessage(message);
  }
  /**
   * 添加会话响应器
   *
   * @param sessionId 会话 Id
   * @param handler 会话响应器
   */
  ;

  _proto.addSessionHandler = function addSessionHandler(sessionId, handler) {
    if (!this.hasSessionHandler(sessionId)) {
      this.sessionHandlerMap[sessionId] = handler;
    } else {
      throw new Error("SessionId `".concat(sessionId, "` already exist!"));
    }
  }
  /**
   * 移除会话响应器
   *
   * @param sessionId
   */
  ;

  _proto.deleteSessionHandler = function deleteSessionHandler(sessionId) {
    if (this.hasSessionHandler(sessionId)) {
      delete this.sessionHandlerMap[sessionId];
    }
  }
  /**
   * 生成每次独立会话的 Id
   *
   * @returns 会话 Id
   */
  ;

  _proto.generateSessionId = function generateSessionId() {
    var sessionId = "w_".concat(BI.UUID());
    return sessionId;
  }
  /**
   * 判断是否有指定会话的处理器
   *
   * @param sessionId 会话 Id
   * @returns {boolean} 判断结果
   */
  ;

  _proto.hasSessionHandler = function hasSessionHandler(sessionId) {
    return !!this.sessionHandlerMap[sessionId];
  };

  return WorkerChannel;
}();
// CONCATENATED MODULE: ./typescript/core/worker/controller/worker.controller.ts
function worker_controller_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 通信控制器
 *
 * @class WorkerBaseController
 */
var WorkerBaseController = /*#__PURE__*/function () {
  /**
   * 原生 worker, 在子类中实例化
   */

  /**
   * 通信 Channel, 在子类中实例化
   */

  /**
   * 事务处理器 Map
   */
  function WorkerBaseController() {
    worker_controller_defineProperty(this, "worker", void 0);

    worker_controller_defineProperty(this, "channel", void 0);

    worker_controller_defineProperty(this, "actionHandlerMap", void 0);

    this.actionHandlerMap = {};
  }
  /**
   * 发送事务，不等待结果
   *
   * @param actionType 事务类型
   * @param payload 负载
   */


  var _proto = WorkerBaseController.prototype;

  _proto.request = function request(actionType, payload) {
    if (this.channel) {
      return this.channel.request(actionType, payload);
    }

    console.error('No channel.');
    return;
  }
  /**
   * 发送 Promise 形式的事务, 在 then 中获取响应
   *
   * @param actionType 事务类型
   * @param payload 负载
   * @param [timeout] 响应的超时; Worker 通道是可靠的, 超时后只上报, 不阻止当前请求
   */
  ;

  _proto.requestPromise = function requestPromise(actionType) {
    var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var timeout = arguments.length > 2 ? arguments[2] : undefined;

    // 有 Channel 实例才能进行通信, 此时还没有实例化是浏览器不支持创建 worker
    if (this.channel) {
      return this.channel.requestPromise(actionType, payload, timeout);
    } // 兼容上层调用的 .then().catch()


    return Promise.reject(new Error('No channel.'));
  }
  /**
   * 添加事务处理器, 不允许重复添加
   *
   * @param actionType 事务类型
   * @param handler 事务处理器
   */
  ;

  _proto.addActionHandler = function addActionHandler(actionType, handler) {
    if (this.hasActionHandler(actionType)) {
      throw new Error("Add action `".concat(actionType, "` handler repeat"));
    }

    this.actionHandlerMap[actionType] = handler;
  }
  /**
   * 事务处理器, 提供给通信 Channel 调用
   *
   * @param message 会话消息
   * @returns
   */
  ;

  _proto.actionHandler = function actionHandler(message) {
    var actionType = message.actionType,
        payload = message.payload;

    if (this.hasActionHandler(actionType)) {
      // 执行指定的事务处理器, 并返回 Promise 封装的事务结果
      try {
        var actionResult = this.actionHandlerMap[actionType](payload); // 对于 Promise 形式的结果, 需要进行 Promise 错误捕获

        if (BI.isPromise(actionResult)) {
          return actionResult.catch(function (error) {
            return Promise.reject(error);
          });
        } // 对数据结果, 包装为 Promise


        return Promise.resolve(actionResult);
      } catch (error) {
        // 继续抛出给外层
        return Promise.reject(error);
      }
    } else {
      throw new Error("Not Found Session Handler `".concat(actionType, "`."));
    }
  }
  /**
   * 添加 worker onmessage 事件的回调
   *
   * @param {(event: any) => void} onmessage 回调函数
   * @returns {() => void} 移除监听函数
   */
  ;

  _proto.addOnmessageListener = function addOnmessageListener(onmessage) {
    var _this = this;

    this.worker.addEventListener('message', onmessage); // 返回移除监听函数

    return function () {
      _this.worker.removeEventListener('message', onmessage);
    };
  }
  /**
   * 判断是否有指定事务的处理器
   *
   * @param actionType 事务类型
   * @returns {boolean}
   */
  ;

  _proto.hasActionHandler = function hasActionHandler(actionType) {
    return !!this.actionHandlerMap[actionType];
  };

  return WorkerBaseController;
}();
// CONCATENATED MODULE: ./typescript/core/worker/controller/worker.main_thread.controller.ts
function worker_main_thread_controller_defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function worker_main_thread_controller_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function worker_main_thread_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; worker_main_thread_controller_setPrototypeOf(subClass, superClass); }

function worker_main_thread_controller_setPrototypeOf(o, p) { worker_main_thread_controller_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { worker_main_thread_controller_defaults(o, p); return o; }; return worker_main_thread_controller_setPrototypeOf(o, p); }

function worker_main_thread_controller_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var worker_main_thread_controller_WorkerMainThreadController = /*#__PURE__*/function (_WorkerBaseController) {
  worker_main_thread_controller_inheritsLoose(WorkerMainThreadController, _WorkerBaseController);

  /**
   * 浏览器是否实现了 HTML 规范的 Worker Class
   */

  /**
   * 是否支持 new Worker, 默认为 Wroker Class 是否实现
   * 由于Blob url支持度问题  规避Safari 12以下版本
   */

  /**
   * 主线程 new Worker 起始时刻
   */

  /**
   * 主线程 new Worker 完毕时刻
   */
  function WorkerMainThreadController(options) {
    var _this;

    _this = _WorkerBaseController.call(this) || this;

    worker_main_thread_controller_defineProperty(worker_main_thread_controller_assertThisInitialized(_this), "canNewWorker", WorkerMainThreadController.hasWorkerClass && !(BI.isSafari() && BI.getSafariVersion() < 12));

    worker_main_thread_controller_defineProperty(worker_main_thread_controller_assertThisInitialized(_this), "timeBeforeNewWorker", void 0);

    worker_main_thread_controller_defineProperty(worker_main_thread_controller_assertThisInitialized(_this), "timeAfterNewWorker", void 0);

    if (!_this.canNewWorker) {
      // 都没有 Worker Class, 没法继续了
      return worker_main_thread_controller_assertThisInitialized(_this);
    }

    _this.newWorker(options);

    return _this;
  }
  /**
   * 销毁 Worker 线程实例
   */


  var _proto = WorkerMainThreadController.prototype;

  _proto.terminate = function terminate() {
    var _this$worker;

    (_this$worker = this.worker) === null || _this$worker === void 0 ? void 0 : _this$worker.terminate();
  };

  _proto.reportActionHandlerError = function reportActionHandlerError(actionType, error) {
    console.error("Worker aciton ".concat(actionType, ":"), error); // 主线程的报错, 在 window.onerror 中可以拿到报错堆栈, 直接抛出即可

    throw new Error(error);
  }
  /**
   * 创建 Worker 线程实例
   */
  ;

  _proto.newWorker = function newWorker(options) {
    this.timeBeforeNewWorker = Date.now();

    try {
      // 主线程通过 new Worker() 获取 Worker 实例
      this.worker = new Worker(options.workerUrl, {
        name: options.workerName
      });
      /**
       * 监控和上报 worker 中的报错
       * window.onerror 中也能监控到 worker.onerror( Worker 运行报错)
       */

      this.worker.onerror = function (error) {
        console.error('Worker onerror:', error);
      };

      this.timeAfterNewWorker = Date.now(); // 实例化 Channel

      this.channel = new worker_channel_WorkerChannel(this.worker, {
        actionHandler: this.actionHandler.bind(this)
      });
    } catch (error) {
      console.error('Init worker fail:', error); // 创建 worker 失败, 标识改为不支持

      this.canNewWorker = false;
    }
  };

  return WorkerMainThreadController;
}(WorkerBaseController);

worker_main_thread_controller_defineProperty(worker_main_thread_controller_WorkerMainThreadController, "hasWorkerClass", !!_global.Worker);
// CONCATENATED MODULE: ./typescript/core/worker/controller/worker.worker_thread.controller.ts
function worker_worker_thread_controller_defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function worker_worker_thread_controller_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function worker_worker_thread_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; worker_worker_thread_controller_setPrototypeOf(subClass, superClass); }

function worker_worker_thread_controller_setPrototypeOf(o, p) { worker_worker_thread_controller_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { worker_worker_thread_controller_defaults(o, p); return o; }; return worker_worker_thread_controller_setPrototypeOf(o, p); }



var worker_worker_thread_controller_WorkerThreadController = /*#__PURE__*/function (_WorkerBaseController) {
  worker_worker_thread_controller_inheritsLoose(WorkerThreadController, _WorkerBaseController);

  function WorkerThreadController() {
    var _this;

    _this = _WorkerBaseController.call(this) || this; // Worker 线程中的全局环境 self 就是 Worker 实例

    _this.worker = self;
    _this.channel = new worker_channel_WorkerChannel(_this.worker, {
      actionHandler: _this.actionHandler.bind(worker_worker_thread_controller_assertThisInitialized(_this))
    });
    return _this;
  }

  var _proto = WorkerThreadController.prototype;

  _proto.reportActionHandlerError = function reportActionHandlerError(actionType, error) {
    console.error("Worker aciton ".concat(actionType, ":"), error); // 正常抛出

    throw new Error(error);
  };

  return WorkerThreadController;
}(WorkerBaseController);
// CONCATENATED MODULE: ./typescript/core/worker/action/worker.action.ts
function worker_action_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 事务的基类
 */
var WorkerBaseAction = /*#__PURE__*/function () {
  /**
   * 通信控制器
   */

  /**
   * 线程上的 action 集合, 用于调用其他命名空间下的事务
   */
  function WorkerBaseAction(controller, threadAction) {
    worker_action_defineProperty(this, "controller", void 0);

    worker_action_defineProperty(this, "threadAction", void 0);

    this.controller = controller;
    this.threadAction = threadAction;
    this.addActionHandler();
  }
  /**
   * 添加事务的处理器
   */


  var _proto = WorkerBaseAction.prototype;

  _proto.addActionHandler = function addActionHandler() {};

  return WorkerBaseAction;
}();
// CONCATENATED MODULE: ./typescript/core/worker/worker.main_thread.ts
function worker_main_thread_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



/**
 * 主线程Worker
 */
var worker_main_thread_MainThreadWorker = /*#__PURE__*/function () {
  /**
   * Worker 名称
   */

  /**
   * 主线程通信控制器
   */

  /**
   * 是否已经终止掉 Worker
   */
  function MainThreadWorker(options) {
    worker_main_thread_defineProperty(this, "name", void 0);

    worker_main_thread_defineProperty(this, "controller", void 0);

    worker_main_thread_defineProperty(this, "isTerminated", false);

    this.name = options.workerName;
    this.controller = new worker_main_thread_controller_WorkerMainThreadController(options);
  }
  /**
   * 初始化业务actions
   */


  var _proto = MainThreadWorker.prototype;

  _proto.initActions = function initActions() {}
  /**
   * 销毁 worker 实例
   * 子实例需要销毁action
   */
  ;

  _proto.terminate = function terminate() {
    this.controller.terminate(); // 设置终止标志位

    this.isTerminated = true;
  }
  /**
   * 实例化action
   * @param Action action类
   */
  ;

  _proto.createAction = function createAction(Action) {
    return new Action(this.controller, this);
  };

  return MainThreadWorker;
}();
// CONCATENATED MODULE: ./typescript/core/worker/worker.worker_thread.ts
function worker_worker_thread_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


/**
 * worker线程实例
 */

var worker_worker_thread_WorkerThreadWorker = /*#__PURE__*/function () {
  /**
   * Worker 线程通信控制器
   */
  function WorkerThreadWorker() {
    worker_worker_thread_defineProperty(this, "controller", void 0);

    this.controller = new worker_worker_thread_controller_WorkerThreadController();
  }
  /**
   * 初始化业务actions
   */


  var _proto = WorkerThreadWorker.prototype;

  _proto.initActions = function initActions() {}
  /**
   * 实例化action
   * @param Action action类
   */
  ;

  _proto.createAction = function createAction(Action) {
    return new Action(this.controller, this);
  };

  return WorkerThreadWorker;
}();
// CONCATENATED MODULE: ./typescript/core/worker/workers.ts









function createWorker(ThreadWorker, options) {
  var threadWorker = new ThreadWorker(options);
  threadWorker.initActions();
  return threadWorker;
}

var Workers = {
  WorkerChannel: worker_channel_WorkerChannel,
  WorkerBaseController: WorkerBaseController,
  WorkerMainThreadController: worker_main_thread_controller_WorkerMainThreadController,
  WorkerThreadController: worker_worker_thread_controller_WorkerThreadController,
  WorkerBaseAction: WorkerBaseAction,
  MainThreadWorker: worker_main_thread_MainThreadWorker,
  WorkerThreadWorker: worker_worker_thread_WorkerThreadWorker,
  WorkerMessageType: WorkerMessageType,
  createWorker: createWorker
};
// CONCATENATED MODULE: ./typescript/index.ts

























































































































































































/* harmony default export */ var typescript = ({
  Decorators: decorator_namespaceObject,
  Workers: Workers
});

// CONCATENATED MODULE: ./typescript/bundle.ts

BI.extend(BI, typescript);

/***/ }),
/* 928 */,
/* 929 */
/***/ (function(module, exports) {

;

(function () {
  var contexts = {};
  var init = false;
  var WORKER;

  var enableWorker = function enableWorker() {
    if (init) {
      return init;
    } // 开启Worker模式


    BI.config("bi.provider.system", function (provider) {
      provider.setWorkerMode(true);
    });
    var _init = BI.Widget.prototype._init;

    BI.Widget.prototype._init = function () {
      this.$destroyWorker = createWorker.call(this);

      try {
        _init.apply(this, arguments);
      } catch (e) {
        console.error(e);
      }
    };

    var _initRender = BI.Widget.prototype._initRender;

    var postMessage = function postMessage(data) {
      switch (data.eventType) {
        case "create":
          this.model = data.msg;

          _initRender.call(this);

          break;

        case "watch":
          var watchArgs = data.args;
          this.watch[data.currentWatchType].apply(this, watchArgs);
          break;
      }
    };

    BI.Widget.prototype._initRender = function () {
      if (WORKER && this._worker) {
        this.__asking = true;
        this.__async = true;
      } else {
        _initRender.apply(this, arguments);
      }
    };

    var unMount = BI.Widget.prototype.__d;

    BI.Widget.prototype.__d = function () {
      this.$destroyWorker && this.$destroyWorker();

      try {
        unMount.apply(this, arguments);
      } catch (e) {
        console.error(e);
      }
    };

    init = postMessage;
    return postMessage;
  };

  BI.useWorker = function (wk) {
    if (!_global.Worker || !_global.Proxy) {
      return;
    }

    var postMessage = enableWorker();
    WORKER = wk;

    if (WORKER) {
      WORKER.addEventListener("message", function (e) {
        var data = e.data;
        postMessage.apply(contexts[data.name], [data]);
      }, false);
    }
  };

  function createWorker() {
    var self = this;

    if (this._worker) {
      var name = this.getName();

      var modelType = this._worker();

      var options;

      if (BI.isArray(modelType)) {
        options = modelType[1];
        modelType = modelType[0];
      }

      if (WORKER) {
        contexts[name] = this;
        WORKER.postMessage({
          type: modelType,
          name: name,
          eventType: "create",
          options: options,
          watches: BI.map(this.$watch || this.watch, function (key) {
            return key;
          })
        });
        var store = {};
        this.store = new Proxy(store, {
          get: function get(target, key) {
            return function () {
              WORKER.postMessage({
                type: modelType,
                name: name,
                eventType: "action",
                action: key,
                args: [].slice.call(arguments)
              });
            };
          },
          set: function set(target, key, value) {
            return Reflect.set(target, key, value);
          }
        });
        return function () {
          delete contexts[name];
          WORKER.postMessage({
            type: modelType,
            name: name,
            eventType: "destroy"
          });
        };
      }
    }
  }
})();

/***/ }),
/* 930 */,
/* 931 */,
/* 932 */,
/* 933 */,
/* 934 */,
/* 935 */,
/* 936 */,
/* 937 */,
/* 938 */,
/* 939 */,
/* 940 */,
/* 941 */,
/* 942 */,
/* 943 */,
/* 944 */,
/* 945 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["Fix"] = __webpack_require__(946);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(27)))

/***/ }),
/* 946 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(setImmediate) {function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function (global, factory) {
     true ? factory(exports) : undefined;
})(this, function (exports) {
    'use strict';

    function noop(a, b, c) {}

    function isNative(Ctor) {
        return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
    }

    var hasProto = '__proto__' in {};

    var _toString = Object.prototype.toString;

    function isPlainObject(obj) {
        return _toString.call(obj) === '[object Object]';
    }

    function isConfigurable(obj, key) {
        var configurable = true;
        var property = Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(obj, key);
        if (property && property.configurable === false) {
            configurable = false;
        }
        return configurable;
    }

    function isExtensible(obj) {
        if (Object.isExtensible) {
            return Object.isExtensible(obj);
        }
        var name = '';
        while (obj.hasOwnProperty(name)) {
            name += '?';
        }
        obj[name] = true;
        var returnValue = obj.hasOwnProperty(name);
        delete obj[name];
        return returnValue;
    }

    function remove(arr, item) {
        if (arr && arr.length) {
            var _index = arr.indexOf(item);
            if (_index > -1) {
                return arr.splice(_index, 1);
            }
        }
    }

    // const bailRE = /[^\w.$]/

    function parsePath(path) {
        // 正常表达式比较慢，能不要的就不要了
        // if (bailRE.test(path)) {
        //     return
        // }
        var segments = path.split('.');
        return function (obj) {
            for (var i = 0; i < segments.length; i++) {
                if (!obj) return;
                obj = obj[segments[i]];
            }
            return obj;
        };
    }

    var nextTick = function () {
        var callbacks = [];
        var pending = false;
        var timerFunc = void 0;

        function nextTickHandler() {
            pending = false;
            var copies = callbacks.slice(0);
            callbacks.length = 0;
            for (var i = 0; i < copies.length; i++) {
                copies[i]();
            }
        }

        // An asynchronous deferring mechanism.
        // In pre 2.4, we used to use microtasks (Promise/MutationObserver)
        // but microtasks actually has too high a priority and fires in between
        // supposedly sequential events (e.g. #4521, #6690) or even between
        // bubbling of the same event (#6566). Technically setImmediate should be
        // the ideal choice, but it's not available everywhere; and the only polyfill
        // that consistently queues the callback after all DOM events triggered in the
        // same loop is by using MessageChannel.
        /* istanbul ignore if */
        if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
            timerFunc = function timerFunc() {
                setImmediate(nextTickHandler);
            };
        } else if (typeof MessageChannel !== 'undefined' && (isNative(MessageChannel) ||
        // PhantomJS
        MessageChannel.toString() === '[object MessageChannelConstructor]')) {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = nextTickHandler;
            timerFunc = function timerFunc() {
                port.postMessage(1);
            };
        } else
            /* istanbul ignore next */
            if (typeof Promise !== 'undefined' && isNative(Promise)) {
                // use microtask in non-DOM environments, e.g. Weex
                var p = Promise.resolve();
                timerFunc = function timerFunc() {
                    p.then(nextTickHandler);
                };
            } else {
                // fallback to setTimeout
                timerFunc = function timerFunc() {
                    setTimeout(nextTickHandler, 0);
                };
            }

        return function queueNextTick(cb, ctx) {
            var _resolve = void 0;
            callbacks.push(function () {
                if (cb) {
                    try {
                        cb.call(ctx);
                    } catch (e) {
                        console.error(e);
                    }
                } else if (_resolve) {
                    _resolve(ctx);
                }
            });
            if (!pending) {
                pending = true;
                timerFunc();
            }
            // $flow-disable-line
            if (!cb && typeof Promise !== 'undefined') {
                return new Promise(function (resolve, reject) {
                    _resolve = resolve;
                });
            }
        };
    }();

    var falsy;
    var $$skipArray = {
        __ob__: falsy,
        $accessors: falsy,
        $vbthis: falsy,
        $vbsetter: falsy
    };

    var uid = 0;

    /**
     * A dep is an observable that can have multiple
     * directives subscribing to it.
     */

    var Dep = function () {
        function Dep() {
            _classCallCheck(this, Dep);

            this.id = uid++;
            this.subs = [];
        }

        Dep.prototype.addSub = function addSub(sub) {
            this.subs.push(sub);
        };

        Dep.prototype.removeSub = function removeSub(sub) {
            remove(this.subs, sub);
        };

        Dep.prototype.depend = function depend() {
            if (Dep.target) {
                Dep.target.addDep(this);
            }
        };

        Dep.prototype.notify = function notify(options) {
            // stabilize the subscriber list first
            var subs = this.subs.slice();
            for (var i = 0, l = subs.length; i < l; i++) {
                subs[i].update(options);
            }
        };

        return Dep;
    }();

    // the current target watcher being evaluated.
    // this is globally unique because there could be only one
    // watcher being evaluated at any time.


    Dep.target = null;
    var targetStack = [];

    function pushTarget(_target) {
        if (Dep.target) targetStack.push(Dep.target);
        Dep.target = _target;
    }

    function popTarget() {
        Dep.target = targetStack.pop();
    }

    //如果浏览器不支持ecma262v5的Object.defineProperties或者存在BUG，比如IE8
    //标准浏览器使用__defineGetter__, __defineSetter__实现
    var canHideProperty = true;
    try {
        Object.defineProperty({}, '_', {
            value: 'x'
        });
        delete $$skipArray.$vbsetter;
        delete $$skipArray.$vbthis;
    } catch (e) {
        /* istanbul ignore next*/
        canHideProperty = false;
    }

    var createViewModel = Object.defineProperties;
    var defineProperty = void 0;

    /* istanbul ignore if*/
    if (!canHideProperty) {
        if ('__defineGetter__' in {}) {
            defineProperty = function defineProperty(obj, prop, desc) {
                if ('value' in desc) {
                    obj[prop] = desc.value;
                }
                if ('get' in desc) {
                    obj.__defineGetter__(prop, desc.get);
                }
                if ('set' in desc) {
                    obj.__defineSetter__(prop, desc.set);
                }
                return obj;
            };
            createViewModel = function createViewModel(obj, descs) {
                for (var prop in descs) {
                    if (descs.hasOwnProperty(prop)) {
                        defineProperty(obj, prop, descs[prop]);
                    }
                }
                return obj;
            };
        }
    }

    var createViewModel$1 = createViewModel;

    var queue = [];
    var activatedChildren = [];
    var has = {};
    var waiting = false;
    var flushing = false;
    var index = 0;

    function resetSchedulerState() {
        index = queue.length = activatedChildren.length = 0;
        has = {};
        waiting = flushing = false;
    }

    function flushSchedulerQueue() {
        flushing = true;
        var watcher = void 0,
            id = void 0,
            options = void 0;

        // Sort queue before flush.
        // This ensures that:
        // 1. Components are updated from parent to child. (because parent is always
        //    created before the child)
        // 2. A component's user watchers are run before its render watcher (because
        //    user watchers are created before the render watcher)
        // 3. If a component is destroyed during a parent component's watcher run,
        //    its watchers can be skipped.
        queue.sort(function (a, b) {
            return a.id - b.id;
        });

        // do not cache length because more watchers might be pushed
        // as we run existing watchers
        for (index = 0; index < queue.length; index++) {
            watcher = queue[index].watcher;
            options = queue[index].options;
            id = watcher.id;
            has[id] = null;
            watcher.run(options);
        }

        resetSchedulerState();
    }

    function queueWatcher(watcher, options) {
        var id = watcher.id;
        if (has[id] == null) {
            has[id] = true;
            if (!flushing) {
                queue.push({ watcher: watcher, options: options });
            } else {
                // if already flushing, splice the watcher based on its id
                // if already past its id, it will be run next immediately.
                var i = queue.length - 1;
                while (i > index && queue[i].watcher.id > watcher.id) {
                    i--;
                }
                queue.splice(i + 1, 0, { watcher: watcher, options: options });
            }
            // queue the flush
            if (!waiting) {
                waiting = true;
                nextTick(flushSchedulerQueue);
            }
        }
    }

    var uid$1 = 0;

    var Watcher = function () {
        function Watcher(vm, expOrFn, cb, options) {
            _classCallCheck(this, Watcher);

            this.vm = vm;
            // vm._watchers || (vm._watchers = [])
            // vm._watchers.push(this)
            // options
            if (options) {
                this.deep = !!options.deep;
                this.user = !!options.user;
                this.lazy = !!options.lazy;
                this.sync = !!options.sync;
            } else {
                this.deep = this.user = this.lazy = this.sync = false;
            }
            this.cb = cb;
            this.id = ++uid$1; // uid for batching
            this.active = true;
            this.dirty = this.lazy; // for lazy watchers
            this.deps = [];
            this.newDeps = [];
            this.depIds = new Set();
            this.newDepIds = new Set();
            this.expression = '';
            // parse expression for getter
            if (typeof expOrFn === 'function') {
                this.getter = expOrFn;
            } else {
                this.getter = parsePath(expOrFn);
                if (!this.getter) {
                    this.getter = function () {};
                }
            }
            this.value = this.lazy ? undefined : this.get();
        }

        Watcher.prototype.get = function get() {
            pushTarget(this);
            var value = void 0;
            var vm = this.vm;
            try {
                value = this.getter.call(vm, vm);
            } catch (e) {
                // if (this.user) {
                // } else {
                // console.error(e)
                // }
            } finally {
                // "touch" every property so they are all tracked as
                // dependencies for deep watching
                if (this.deep) {
                    traverse(value);
                }
                popTarget();
                this.cleanupDeps();
            }
            return value;
        };

        Watcher.prototype.addDep = function addDep(dep) {
            var id = dep.id;
            if (!this.newDepIds.has(id)) {
                this.newDepIds.add(id);
                this.newDeps.push(dep);
                if (!this.depIds.has(id)) {
                    dep.addSub(this);
                }
            }
        };

        Watcher.prototype.cleanupDeps = function cleanupDeps() {
            var i = this.deps.length;
            while (i--) {
                var dep = this.deps[i];
                if (!this.newDepIds.has(dep.id)) {
                    dep.removeSub(this);
                }
            }
            var tmp = this.depIds;
            this.depIds = this.newDepIds;
            this.newDepIds = tmp;
            this.newDepIds.clear();
            tmp = this.deps;
            this.deps = this.newDeps;
            this.newDeps = tmp;
            this.newDeps.length = 0;
        };

        Watcher.prototype.update = function update(options) {
            /* istanbul ignore else */
            if (this.lazy) {
                this.dirty = true;
            } else if (this.sync) {
                this.run(options);
            } else {
                queueWatcher(this, options);
            }
        };

        Watcher.prototype.run = function run(options) {
            if (this.active) {
                var value = this.get();
                if (value !== this.value ||
                // Deep watchers and watchers on Object/Arrays should fire even
                // when the value is the same, because the value may
                // have mutated.
                BI._.isObject(value) && options && options.refresh || this.deep) {
                    // set new value
                    var oldValue = this.value;
                    this.value = value;
                    if (this.user) {
                        try {
                            this.cb.call(this.vm, value, oldValue, options);
                        } catch (e) {
                            console.error(e);
                        }
                    } else {
                        try {
                            this.cb.call(this.vm, value, oldValue, options);
                        } catch (e) {
                            console.error(e);
                        }
                    }
                }
            }
        };

        Watcher.prototype.evaluate = function evaluate() {
            this.value = this.get();
            this.dirty = false;
        };

        Watcher.prototype.depend = function depend() {
            var i = this.deps.length;
            while (i--) {
                this.deps[i].depend();
            }
        };

        Watcher.prototype.teardown = function teardown() {
            if (this.active) {
                // remove self from vm's watcher list
                // this is a somewhat expensive operation so we skip it
                // if the vm is being destroyed.
                remove(this.vm && this.vm._watchers, this);
                var i = this.deps.length;
                while (i--) {
                    this.deps[i].removeSub(this);
                }
                this.active = false;
            }
        };

        return Watcher;
    }();

    var seenObjects = new Set();

    function traverse(val) {
        seenObjects.clear();
        _traverse(val, seenObjects);
    }

    function _traverse(val, seen) {
        var i = void 0,
            keys = void 0;
        var isA = BI._.isArray(val);
        if (!isA && !BI._.isObject(val)) {
            return;
        }
        if (val.__ob__) {
            var depId = val.__ob__.dep.id;
            if (seen.has(depId)) {
                return;
            }
            seen.add(depId);
        }
        if (isA) {
            i = val.length;
            while (i--) {
                _traverse(val[i], seen);
            }
        } else {
            keys = BI._.keys(val);
            i = keys.length;
            while (i--) {
                _traverse(val[keys[i]], seen);
            }
        }
    }

    var arrayProto = Array.prototype;
    var arrayMethods = [];
    BI._.each(['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'], function (method) {
        var original = arrayProto[method];
        arrayMethods[method] = function mutator() {
            for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
                args[_key2] = arguments[_key2];
            }

            var ob = this.__ob__;
            var inserted = void 0;
            switch (method) {
                case 'push':
                case 'unshift':
                    inserted = args;
                    break;
                case 'splice':
                    inserted = args.slice(2);
                    break;
            }
            if (inserted) inserted = ob.observeArray(inserted);
            switch (method) {
                case 'push':
                case 'unshift':
                    args = inserted;
                    break;
                case 'splice':
                    if (args.length > 2) {
                        args = [args[0], args[1]].concat(inserted ? inserted : []);
                    }
                    break;
            }
            var result = original.apply(this, args);
            notify(ob.parent, ob.parentKey, ob.dep, true);
            return result;
        };
    });

    var arrayKeys = BI._.keys(arrayMethods);

    var observerState = {
        shouldConvert: true
    };

    function def(obj, key, val, enumerable) {
        Object.defineProperty(obj, key, {
            value: val,
            enumerable: !!enumerable,
            writable: true,
            configurable: true
        });
    }

    /**
     * Observer class that are attached to each observed
     * object. Once attached, the observer converts target
     * object's property keys into getter/setters that
     * collect dependencies and dispatches updates.
     */

    var Observer = function () {
        function Observer(value) {
            _classCallCheck(this, Observer);

            this.value = value;
            this.dep = new Dep();
            this.vmCount = 0;
            if (BI._.isArray(value)) {
                var augment = hasProto ? protoAugment : copyAugment;
                augment(value, arrayMethods, arrayKeys);
                this.model = this.observeArray(value);
            } else {
                this.model = this.walk(value);
            }
            def(this.model, "__ob__", this);
        }

        Observer.prototype.walk = function walk(obj) {
            return defineReactive(obj, this);
        };

        Observer.prototype.observeArray = function observeArray(items) {
            for (var i = 0, l = items.length; i < l; i++) {
                var ob = observe(items[i], this, i);
                items[i] = ob ? ob.model : items[i];
            }
            return items;
        };

        return Observer;
    }();

    function protoAugment(target, src, keys) {
        /* eslint-disable no-proto */
        target.__proto__ = src;
        /* eslint-enable no-proto */
    }

    /* istanbul ignore next */
    function copyAugment(target, src, keys) {
        for (var i = 0, l = keys.length; i < l; i++) {
            var key = keys[i];
            target[key] = src[key];
        }
    }

    function observe(value, parentObserver, parentKey) {
        if (!BI._.isObject(value)) {
            return;
        }
        var ob = void 0;
        if (value.__ob__ instanceof Observer) {
            ob = value.__ob__;
        } else if (observerState.shouldConvert && isExtensible(value) && (BI._.isArray(value) || isPlainObject(value))) {
            ob = new Observer(value);
        }
        if (ob) {
            ob.parent = parentObserver || ob.parent;
            ob.parentKey = parentKey;
        }
        return ob;
    }

    function notify(observer, key, dep, refresh) {
        dep.notify({ observer: observer, key: key, refresh: refresh });
        if (observer) {
            //触发a.*绑定的依赖
            BI._.each(observer._deps, function (dep) {
                dep.notify({ observer: observer, key: key });
            });
            //触发a.**绑定的依赖
            var parent = observer,
                root = observer,
                route = key || "";
            while (parent) {
                BI._.each(parent._scopeDeps, function (dep) {
                    dep.notify({ observer: observer, key: key });
                });
                if (parent.parentKey != null) {
                    route = parent.parentKey + '.' + route;
                }
                root = parent;
                parent = parent.parent;
            }
            for (var _key in root._globalDeps) {
                var reg = new RegExp(_key);
                if (reg.test(route)) {
                    for (var i = 0; i < root._globalDeps[_key].length; i++) {
                        root._globalDeps[_key][i].notify({ observer: observer, key: _key });
                    }
                }
            }
        }
    }

    function defineReactive(obj, observer, shallow) {
        var props = {};
        var model = void 0;
        BI._.each(obj, function (val, key) {
            if (key in $$skipArray) {
                return;
            }
            var configurable = isConfigurable(obj, key);
            var dep = observer && observer['__dep' + key] || new Dep();
            observer && (observer['__dep' + key] = dep);
            var childOb = configurable && !shallow && observe(val, observer, key);
            props[key] = {
                enumerable: true,
                configurable: true,
                get: function reactiveGetter() {
                    var value = childOb ? childOb.model : val;
                    if (Dep.target) {
                        dep.depend();
                        if (childOb) {
                            childOb.dep.depend();
                            if (BI._.isArray(value)) {
                                dependArray(value);
                            }
                        }
                    }
                    return value;
                },
                set: function reactiveSetter(newVal) {
                    var value = childOb ? childOb.model : val;
                    if (newVal === value || newVal !== newVal && value !== value) {
                        return;
                    }
                    val = newVal;
                    childOb = configurable && !shallow && observe(newVal, observer, key);
                    if (childOb && value && value.__ob__) {
                        childOb._scopeDeps = value.__ob__._scopeDeps;
                        childOb._deps = value.__ob__._deps;
                    }
                    obj[key] = childOb ? childOb.model : newVal;
                    notify(model.__ob__, key, dep);
                }
            };
        });
        return model = createViewModel$1(obj, props);
    }

    function defineReactiveProperty(obj, key, val, shallow) {

        var dep = new Dep();

        var configurable = isConfigurable(obj, key);
        if (!configurable) {
            return;
        }

        if (arguments.length === 2) {
            val = obj[key];
        }

        var childOb = !shallow && observe(val);
        Object.defineProperty(obj, key, {
            enumerable: true,
            configurable: true,
            get: function reactiveGetter() {
                var value = childOb ? childOb.model : val;
                if (Dep.target) {
                    dep.depend();
                    if (childOb) {
                        childOb.dep.depend();
                        if (BI._.isArray(value)) {
                            dependArray(value);
                        }
                    }
                }
                return value;
            },
            set: function reactiveSetter(newVal) {
                var value = childOb ? childOb.model : val;
                if (newVal === value || newVal !== newVal && value !== value) {
                    return;
                }

                childOb = configurable && !shallow && observe(newVal);
                val = newVal;
                obj[key] = childOb ? childOb.model : newVal;
                dep.notify();
            }
        });
    }

    /**
     * Set a property on an object. Adds the new property and
     * triggers change notification if the property doesn't
     * already exist.
     */
    function set(target, key, val) {
        if (BI._.isArray(target)) {
            target.length = Math.max(target.length, key);
            target.splice(key, 1, val);
            return val;
        }
        if (BI._.has(target, key)) {
            target[key] = val;
            return val;
        }
        var ob = target.__ob__;
        if (!ob) {
            target[key] = val;
            return val;
        }
        ob.value[key] = val;
        target = defineReactive(ob.value, ob);
        notify(ob, key, ob.dep);
        return target;
    }

    function freeze() {
        return Object.freeze.apply(null, arguments);
    }

    /**
     * Delete a property and trigger change if necessary.
     */
    function del(target, key) {
        if (BI._.isArray(target)) {
            target.splice(key, 1);
            return;
        }
        var ob = target.__ob__;
        if (!BI._.has(target, key)) {
            return;
        }
        if (!ob) {
            delete target[key];
            return target;
        }
        delete ob.value[key];
        target = defineReactive(ob.value, ob);
        notify(ob, key, ob.dep);
        return target;
    }

    /**
     * Collect dependencies on array elements when the array is touched, since
     * we cannot intercept array element access like property getters.
     */
    function dependArray(value) {
        for (var e, i = 0, l = value.length; i < l; i++) {
            e = value[i];
            e && e.__ob__ && e.__ob__.dep.depend();
            if (BI._.isArray(e)) {
                dependArray(e);
            }
        }
    }

    var falsy$1;
    var operators = {
        '||': falsy$1,
        '&&': falsy$1,
        '(': falsy$1,
        ')': falsy$1
    };

    function runBinaryFunction(binarys) {
        var expr = '';
        for (var i = 0, len = binarys.length; i < len; i++) {
            if (BI._.isBoolean(binarys[i]) || BI._.has(operators, binarys[i])) {
                expr += binarys[i];
            } else {
                expr += 'false';
            }
        }
        return new Function('return ' + expr)();
    }

    function routeToRegExp(route) {
        route = route.replace(/\*\*/g, '[a-zA-Z0-9_]+').replace(/\*./g, '[a-zA-Z0-9_]+.');
        return '^' + route + '$';
    }

    function watch(model, expOrFn, cb, options) {
        if (isPlainObject(cb)) {
            options = cb;
            cb = cb.handler;
        }
        if (typeof cb === 'string') {
            cb = model[cb];
        }
        options = options || {};
        options.user = true;
        var exps = void 0;
        if (BI._.isFunction(expOrFn) || !(exps = expOrFn.match(/[a-zA-Z0-9BI._.*]+|[|][|]|[&][&]|[(]|[)]/g)) || exps.length === 1 && expOrFn.indexOf("*") < 0) {
            var watcher = new Watcher(model, expOrFn, cb, options);
            if (options.immediate) {
                cb(watcher.value);
            }
            return function unwatchFn() {
                watcher.teardown();
            };
        }
        var watchers = [];
        var fns = exps.slice();
        var complete = false,
            running = false;
        var callback = function callback(index, newValue, oldValue, attrs) {
            if (complete === true) {
                return;
            }
            fns[index] = true;
            if (runBinaryFunction(fns)) {
                complete = true;
                cb(newValue, oldValue, attrs);
            }
            if (options && options.sync) {
                complete = false;
                running = false;
                fns = exps.slice();
            } else {
                if (!running) {
                    running = true;
                    nextTick(function () {
                        complete = false;
                        running = false;
                        fns = exps.slice();
                    });
                }
            }
        };
        BI._.each(exps, function (exp, i) {
            if (BI._.has(operators, exp)) {
                return;
            }
            if (exp.indexOf("*") >= 0) {
                //a.**或a.*形式
                if (/^[1-9a-zA-Z.]+(\*\*$|\*$)/.test(exp) || exp === "**" || exp === "*") {
                    var isGlobal = exp.indexOf("**") >= 0;
                    if (isGlobal) {
                        //a.**的形式
                        exp = exp.replace(".**", "");
                    } else {
                        //a.*的形式
                        exp = exp.replace(".*", "");
                    }
                    var getter = exp === "**" || exp === "*" ? function (m) {
                        return m;
                    } : parsePath(exp);
                    var v = getter.call(model, model);
                    var _dep = new Dep();
                    if (isGlobal) {
                        (v.__ob__._scopeDeps || (v.__ob__._scopeDeps = [])).push(_dep);
                    } else {
                        (v.__ob__._deps || (v.__ob__._deps = [])).push(_dep);
                    }
                    var _w = new Watcher(model, function () {
                        _dep.depend();
                        return NaN;
                    }, function (newValue, oldValue, attrs) {
                        callback(i, newValue, oldValue, BI._.extend({ index: i }, attrs));
                    }, options);
                    watchers.push(function unwatchFn() {
                        _w.teardown();
                        v.__ob__._scopeDeps && remove(v.__ob__._scopeDeps, _dep);
                        v.__ob__._deps && remove(v.__ob__._deps, _dep);
                    });
                    return;
                }
                // **.a.**的情况，场景：a.b.c, 如果用b.**监听, a被重新赋值b上的_scopeDes就不存在了
                if (/^(\*\*\.)+[1-9a-zA-Z]+(\.\*\*$)/.test(exp)) {
                    //先获取到能获取到的对象
                    var _paths = exp.split(".");
                    var _currentModel = model[_paths[1]];
                    exp = _paths[1] + ".**";
                    //补全路径
                    var _parent = _currentModel.__ob__.parent,
                        _root = _currentModel.__ob__;
                    while (_parent) {
                        exp = '*.' + exp;
                        _root = _parent;
                        _parent = _parent.parent;
                    }
                    var _regStr = routeToRegExp(exp);
                    var _dep2 = new Dep();
                    _root._globalDeps || (_root._globalDeps = {});
                    if (BI._.isArray(_root._globalDeps[_regStr])) {
                        _root._globalDeps[_regStr].push(_dep2);
                    } else {
                        _root._globalDeps[_regStr] = [_dep2];
                    }

                    var _w2 = new Watcher(_currentModel, function () {
                        _dep2.depend();
                        return NaN;
                    }, function (newValue, oldValue, attrs) {
                        callback(i, newValue, oldValue, BI._.extend({ index: i }, attrs));
                    }, options);
                    watchers.push(function unwatchFn() {
                        if (_root._globalDeps) {
                            remove(_root._globalDeps[_regStr], _dep2);

                            if (_root._globalDeps[_regStr].length === 0) {
                                delete _root._globalDeps[_regStr];
                                _w2.teardown();
                            }
                        }
                    });
                    return;
                }
                // 再有结尾有*的就不支持了
                if (exp[exp.length - 1] === "*") {
                    throw new Error('not support');
                }
                //其他含有*的情况，如*.a,*.*.a,a.*.a
                var currentModel = model;
                //先获取到能获取到的对象
                var paths = exp.split(".");
                for (var _i = 0, len = paths.length; _i < len; _i++) {
                    if (paths[_i] === "*") {
                        break;
                    }
                    currentModel = model[paths[_i]];
                }
                exp = exp.substr(exp.indexOf("*"));
                //补全路径
                var parent = currentModel.__ob__.parent,
                    root = currentModel.__ob__;
                while (parent) {
                    exp = '*.' + exp;
                    root = parent;
                    parent = parent.parent;
                }
                var regStr = routeToRegExp(exp);
                var dep = new Dep();
                root._globalDeps || (root._globalDeps = {});
                if (BI._.isArray(root._globalDeps[regStr])) {
                    root._globalDeps[regStr].push(dep);
                } else {
                    root._globalDeps[regStr] = [dep];
                }

                var w = new Watcher(currentModel, function () {
                    dep.depend();
                    return NaN;
                }, function (newValue, oldValue, attrs) {
                    callback(i, newValue, oldValue, BI._.extend({ index: i }, attrs));
                }, options);
                watchers.push(function unwatchFn() {
                    if (root._globalDeps) {
                        remove(root._globalDeps[regStr], dep);
                        if (root._globalDeps[regStr].length === 0) {
                            delete root._globalDeps[regStr];
                            w.teardown();
                        }
                    }
                });
                return;
            }
            var watcher = new Watcher(model, exp, function (newValue, oldValue, attrs) {
                callback(i, newValue, oldValue, BI._.extend({ index: i }, attrs));
            }, options);
            watchers.push(function unwatchFn() {
                watcher.teardown();
            });
        });
        return watchers;
    }

    var mixinInjection = {};

    function getMixins(type) {
        return mixinInjection[type];
    }

    function mixin(xtype, cls) {
        mixinInjection[xtype] = BI._.cloneDeep(cls);
    }

    var computedWatcherOptions = { lazy: true };
    var REACTIVE = true;

    function initState(vm, state) {
        if (state) {
            vm.$$state = REACTIVE ? observe(state).model : state;
        }
    }

    function initComputed(vm, computed) {
        var watchers = vm._computedWatchers = {};
        defineComputed(vm, computed);
        for (var key in computed) {
            watchers[key] = defineComputedWatcher(vm, computed[key]);
        }
    }

    function defineComputedWatcher(vm, userDef) {
        var context = vm.$$model ? vm.model : vm;
        var getter = typeof userDef === "function" ? userDef : userDef.get;

        return new Watcher(context, getter || noop, noop, computedWatcherOptions);
    }

    function defineOneComputedGetter(vm, key, userDef) {
        var shouldCache = true;
        var sharedPropertyDefinition = {
            enumerable: true,
            configurable: true,
            get: noop,
            set: noop
        };
        if (typeof userDef === "function") {
            sharedPropertyDefinition.get = createComputedGetter(vm, key);
            sharedPropertyDefinition.set = noop;
        } else {
            sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(vm, key) : userDef.get : noop;
            sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;
        }
        return sharedPropertyDefinition;
    }

    function defineComputed(vm, computed) {
        var props = {};
        for (var key in computed) {
            if (!(key in vm)) {
                props[key] = defineOneComputedGetter(vm, key, computed[key]);
            }
        }
        vm.$$computed = createViewModel$1({}, props);
    }

    function createComputedGetter(vm, key) {
        return function computedGetter() {
            var watcher = vm._computedWatchers && vm._computedWatchers[key];
            if (watcher) {
                if (watcher.dirty) {
                    watcher.evaluate();
                }
                if (REACTIVE && Dep.target) {
                    watcher.depend();
                }
                return watcher.value;
            }
        };
    }

    function initWatch(vm, watch$$1) {
        vm._watchers || (vm._watchers = []);
        for (var key in watch$$1) {
            var handler = watch$$1[key];
            if (BI._.isArray(handler)) {
                for (var i = 0; i < handler.length; i++) {
                    vm._watchers.push(createWatcher(vm, key, handler[i]));
                }
            } else {
                vm._watchers.push(createWatcher(vm, key, handler));
            }
        }
    }

    function createWatcher(vm, keyOrFn, cb, options) {
        if (isPlainObject(cb)) {
            options = cb;
            cb = cb.handler;
        }
        if (typeof cb === 'string') {
            cb = vm[cb];
        }
        return watch(vm.model, keyOrFn, BI._.bind(cb, vm.$$model ? vm.model : vm), options);
    }

    function initMethods(vm, methods) {
        for (var key in methods) {
            vm[key] = methods[key] == null ? noop : BI._.bind(methods[key], vm.$$model ? vm.model : vm);
        }
    }

    function initMixins(vm, mixins) {
        mixins = (mixins || []).slice(0);

        BI._.each(mixins.reverse(), function (mixinType) {
            var mixin$$1 = getMixins(mixinType);

            for (var key in mixin$$1) {
                if (typeof mixin$$1[key] !== "function") continue;

                if (BI._.has(vm, key)) continue;

                vm[key] = BI._.bind(mixin$$1[key], vm.$$model ? vm.model : vm);
            }
        });
    }

    function defineProps(vm, keys) {
        var props = {};
        // if (typeof Proxy === 'function') {
        //     return vm.model = new Proxy(props, {
        //         has: function (target, key) {
        //             return keys.indexOf(key) > -1;
        //         },
        //         get: function (target, key) {
        //             if (key in $$skipArray) {
        //                 return props[key]
        //             }
        //             if (vm.$$computed && key in vm.$$computed) {
        //                 return vm.$$computed[key]
        //             }
        //             if (vm.$$state && key in vm.$$state) {
        //                 return vm.$$state[key]
        //             }
        //             return vm.$$model[key]
        //         },
        //         set: function (target, key, val) {
        //             if (key in $$skipArray) {
        //                 return props[key] = val
        //             }
        //             if (vm.$$state && key in vm.$$state) {
        //                 return vm.$$state[key] = val
        //             }
        //             if (vm.$$model && key in vm.$$model) {
        //                 return vm.$$model[key] = val
        //             }
        //         }
        //     })
        // }

        var _loop = function _loop(i, len) {
            var key = keys[i];
            if (!(key in $$skipArray)) {
                props[key] = {
                    enumerable: true,
                    configurable: true,
                    get: function get() {
                        if (vm.$$computed && key in vm.$$computed) {
                            return vm.$$computed[key];
                        }
                        if (vm.$$state && key in vm.$$state) {
                            return vm.$$state[key];
                        }
                        if (vm.$$model && key in vm.$$model) {
                            return vm.$$model[key];
                        }
                        var p = vm._parent;
                        while (p) {
                            if (p.$$context && key in p.$$context) {
                                return p.$$context[key];
                            }
                            p = p._parent;
                        }
                    },
                    set: function set(val) {
                        if (vm.$$state && key in vm.$$state) {
                            return vm.$$state[key] = val;
                        }
                        if (vm.$$model && key in vm.$$model) {
                            return vm.$$model[key] = val;
                        }
                        var p = vm._parent;
                        while (p) {
                            if (p.$$context && key in p.$$context) {
                                return p.$$context[key] = val;
                            }
                            p = p._parent;
                        }
                    }
                };
            }
        };

        for (var i = 0, len = keys.length; i < len; i++) {
            _loop(i, len);
        }
        vm.model = createViewModel$1({}, props);
    }

    function defineContext(vm, keys) {
        var props = {};

        var _loop2 = function _loop2(i, len) {
            var key = keys[i];
            if (!(key in $$skipArray)) {
                props[key] = {
                    enumerable: true,
                    configurable: true,
                    get: function get() {
                        return vm.model[key];
                    },
                    set: function set(val) {
                        return vm.model[key] = val;
                    }
                };
            }
        };

        for (var i = 0, len = keys.length; i < len; i++) {
            _loop2(i, len);
        }
        vm.$$context = createViewModel$1({}, props);
    }

    function getInjectValue(vm, key) {
        var p = vm._parent;
        while (p) {
            if (p.$$context && key in p.$$context) {
                return p.$$context[key];
            }
            p = p._parent;
        }
    }

    function getInjectValues(vm) {
        var inject = vm.inject || [];
        var result = {};
        BI._.each(inject, function (key) {
            result[key] = getInjectValue(vm, key);
        });
        return result;
    }

    var Model = function () {
        function Model() {
            _classCallCheck(this, Model);
        }

        Model.prototype._constructor = function _constructor(model, destroyHandler) {
            if (model instanceof Observer || model instanceof Model) {
                model = model.model;
            }
            if (model && model.__ob__) {
                this.$$model = model;
            } else {
                this.options = model || {};
            }
            this._parent = Model.target;
            var state = BI._.isFunction(this.state) ? this.state() : this.state;
            var computed = this.computed;
            var context = this.context;
            var inject = this.inject;
            var childContext = this.childContext;
            var provide = this.provide;
            var watch$$1 = this.watch;
            var actions = this.actions;
            var keys = BI._.keys(this.$$model).concat(BI._.keys(state)).concat(BI._.keys(computed)).concat(inject || []).concat(context || []);
            var mixins = this.mixins;
            defineProps(this, keys);
            // deprecated
            childContext && defineContext(this, childContext);
            provide && defineContext(this, provide);
            this.$$model && (this.model.__ob__ = this.$$model.__ob__);
            initMixins(this, mixins);
            this.init();
            initState(this, BI._.extend(getInjectValues(this), state));
            initComputed(this, computed);
            REACTIVE && initWatch(this, watch$$1);
            initMethods(this, actions);
            this.created && this.created();
            this._destroyHandler = destroyHandler;
            if (this.$$model) {
                return this.model;
            }
        };

        Model.prototype._init = function _init() {};

        Model.prototype.init = function init() {
            this._init();
        };

        Model.prototype.destroy = function destroy() {
            for (var _key3 in this._computedWatchers) {
                this._computedWatchers[_key3].teardown();
            }
            BI._.each(this._watchers, function (unwatches) {
                unwatches = BI._.isArray(unwatches) ? unwatches : [unwatches];
                BI._.each(unwatches, function (unwatch) {
                    unwatch();
                });
            });
            this._watchers && (this._watchers = []);
            this.destroyed && this.destroyed();
            this.$$model = null;
            this.$$computed = null;
            this.$$state = null;
            this._destroyHandler && this._destroyHandler();
        };

        return Model;
    }();

    function define(model) {
        return REACTIVE ? new Observer(model).model : model;
    }

    var reactive = define;

    function config(options) {
        options || (options = {});
        if ("reactive" in options) {
            REACTIVE = options.reactive;
        }
    }

    function toJSON(model) {
        var result = void 0;
        if (BI._.isArray(model)) {
            result = [];
            for (var i = 0, len = model.length; i < len; i++) {
                result[i] = toJSON(model[i]);
            }
        } else if (model && isPlainObject(model)) {
            result = {};
            for (var _key4 in model) {
                if (!BI._.has($$skipArray, _key4)) {
                    result[_key4] = toJSON(model[_key4]);
                }
            }
        } else {
            result = model;
        }
        return result;
    }

    var version = '2.0';

    exports.version = version;
    exports.$$skipArray = $$skipArray;
    exports.mixin = mixin;
    exports.Model = Model;
    exports.define = define;
    exports.reactive = reactive;
    exports.config = config;
    exports.observerState = observerState;
    exports.Observer = Observer;
    exports.observe = observe;
    exports.notify = notify;
    exports.defineReactive = defineReactive;
    exports.defineReactiveProperty = defineReactiveProperty;
    exports.set = set;
    exports.freeze = freeze;
    exports.del = del;
    exports.Watcher = Watcher;
    exports.pushTarget = pushTarget;
    exports.popTarget = popTarget;
    exports.watch = watch;
    exports.toJSON = toJSON;

    exports.__esModule = true;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(104).setImmediate))

/***/ }),
/* 947 */,
/* 948 */,
/* 949 */,
/* 950 */,
/* 951 */,
/* 952 */,
/* 953 */,
/* 954 */,
/* 955 */,
/* 956 */,
/* 957 */,
/* 958 */,
/* 959 */,
/* 960 */,
/* 961 */,
/* 962 */,
/* 963 */
/***/ (function(module, exports) {



/***/ }),
/* 964 */,
/* 965 */,
/* 966 */,
/* 967 */,
/* 968 */,
/* 969 */,
/* 970 */,
/* 971 */,
/* 972 */,
/* 973 */,
/* 974 */,
/* 975 */,
/* 976 */,
/* 977 */,
/* 978 */,
/* 979 */,
/* 980 */,
/* 981 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(530);
__webpack_require__(716);
__webpack_require__(138);
__webpack_require__(139);
__webpack_require__(142);
__webpack_require__(144);
__webpack_require__(158);
__webpack_require__(145);
__webpack_require__(159);
__webpack_require__(160);
__webpack_require__(161);
__webpack_require__(162);
__webpack_require__(163);
__webpack_require__(164);
__webpack_require__(294);
__webpack_require__(146);
__webpack_require__(147);
__webpack_require__(718);
__webpack_require__(719);
__webpack_require__(720);
__webpack_require__(721);
__webpack_require__(722);
__webpack_require__(723);
__webpack_require__(724);
__webpack_require__(725);
__webpack_require__(726);
__webpack_require__(727);
__webpack_require__(16);
__webpack_require__(165);
__webpack_require__(51);
__webpack_require__(52);
__webpack_require__(53);
__webpack_require__(54);
__webpack_require__(55);
__webpack_require__(56);
__webpack_require__(57);
__webpack_require__(50);
__webpack_require__(58);
__webpack_require__(59);
__webpack_require__(60);
__webpack_require__(61);
__webpack_require__(62);
__webpack_require__(148);
__webpack_require__(149);
__webpack_require__(150);
__webpack_require__(151);
__webpack_require__(152);
__webpack_require__(153);
__webpack_require__(166);
__webpack_require__(167);
__webpack_require__(168);
__webpack_require__(169);
__webpack_require__(170);
__webpack_require__(171);
__webpack_require__(172);
__webpack_require__(173);
__webpack_require__(174);
__webpack_require__(175);
__webpack_require__(176);
__webpack_require__(177);
__webpack_require__(178);
__webpack_require__(179);
__webpack_require__(180);
__webpack_require__(181);
__webpack_require__(182);
__webpack_require__(183);
__webpack_require__(184);
__webpack_require__(154);
__webpack_require__(155);
__webpack_require__(185);
__webpack_require__(186);
__webpack_require__(187);
__webpack_require__(156);
__webpack_require__(188);
__webpack_require__(189);
__webpack_require__(190);
__webpack_require__(191);
__webpack_require__(192);
__webpack_require__(193);
__webpack_require__(194);
__webpack_require__(195);
__webpack_require__(196);
__webpack_require__(197);
__webpack_require__(198);
__webpack_require__(199);
__webpack_require__(200);
__webpack_require__(201);
__webpack_require__(202);
__webpack_require__(203);
__webpack_require__(204);
__webpack_require__(205);
__webpack_require__(206);
__webpack_require__(207);
__webpack_require__(208);
__webpack_require__(209);
__webpack_require__(210);
__webpack_require__(211);
__webpack_require__(212);
__webpack_require__(213);
__webpack_require__(214);
__webpack_require__(215);
__webpack_require__(216);
__webpack_require__(217);
__webpack_require__(218);
__webpack_require__(219);
__webpack_require__(220);
__webpack_require__(221);
__webpack_require__(222);
__webpack_require__(223);
__webpack_require__(224);
__webpack_require__(225);
__webpack_require__(226);
__webpack_require__(227);
__webpack_require__(228);
__webpack_require__(229);
__webpack_require__(230);
__webpack_require__(231);
__webpack_require__(232);
__webpack_require__(233);
__webpack_require__(234);
__webpack_require__(235);
__webpack_require__(236);
__webpack_require__(237);
__webpack_require__(238);
__webpack_require__(239);
__webpack_require__(240);
__webpack_require__(241);
__webpack_require__(242);
__webpack_require__(243);
__webpack_require__(244);
__webpack_require__(245);
__webpack_require__(246);
__webpack_require__(247);
__webpack_require__(248);
__webpack_require__(945);
__webpack_require__(728);
__webpack_require__(376);
__webpack_require__(729);
__webpack_require__(730);
__webpack_require__(731);
__webpack_require__(732);
__webpack_require__(377);
__webpack_require__(733);
__webpack_require__(734);
__webpack_require__(735);
__webpack_require__(736);
__webpack_require__(737);
__webpack_require__(738);
__webpack_require__(739);
__webpack_require__(740);
__webpack_require__(741);
__webpack_require__(742);
__webpack_require__(743);
__webpack_require__(744);
__webpack_require__(378);
__webpack_require__(379);
__webpack_require__(380);
__webpack_require__(381);
__webpack_require__(745);
__webpack_require__(746);
__webpack_require__(747);
__webpack_require__(748);
__webpack_require__(382);
__webpack_require__(383);
__webpack_require__(384);
__webpack_require__(385);
__webpack_require__(386);
__webpack_require__(387);
__webpack_require__(388);
__webpack_require__(389);
__webpack_require__(390);
__webpack_require__(391);
__webpack_require__(392);
__webpack_require__(393);
__webpack_require__(394);
__webpack_require__(395);
__webpack_require__(396);
__webpack_require__(397);
__webpack_require__(398);
__webpack_require__(399);
__webpack_require__(400);
__webpack_require__(401);
__webpack_require__(402);
__webpack_require__(403);
__webpack_require__(404);
__webpack_require__(405);
__webpack_require__(406);
__webpack_require__(407);
__webpack_require__(408);
__webpack_require__(409);
__webpack_require__(410);
__webpack_require__(411);
__webpack_require__(412);
__webpack_require__(413);
__webpack_require__(414);
__webpack_require__(415);
__webpack_require__(416);
__webpack_require__(417);
__webpack_require__(418);
__webpack_require__(419);
__webpack_require__(420);
__webpack_require__(421);
__webpack_require__(422);
__webpack_require__(423);
__webpack_require__(424);
__webpack_require__(425);
__webpack_require__(749);
__webpack_require__(426);
__webpack_require__(427);
__webpack_require__(428);
__webpack_require__(429);
__webpack_require__(430);
__webpack_require__(431);
__webpack_require__(432);
__webpack_require__(433);
__webpack_require__(434);
__webpack_require__(435);
__webpack_require__(436);
__webpack_require__(437);
__webpack_require__(438);
__webpack_require__(439);
__webpack_require__(440);
__webpack_require__(441);
__webpack_require__(442);
__webpack_require__(443);
__webpack_require__(444);
__webpack_require__(445);
__webpack_require__(446);
__webpack_require__(447);
__webpack_require__(448);
__webpack_require__(449);
__webpack_require__(450);
__webpack_require__(451);
__webpack_require__(452);
__webpack_require__(453);
__webpack_require__(454);
__webpack_require__(455);
__webpack_require__(456);
__webpack_require__(457);
__webpack_require__(458);
__webpack_require__(459);
__webpack_require__(460);
__webpack_require__(461);
__webpack_require__(462);
__webpack_require__(463);
__webpack_require__(464);
__webpack_require__(465);
__webpack_require__(466);
__webpack_require__(467);
__webpack_require__(468);
__webpack_require__(469);
__webpack_require__(470);
__webpack_require__(471);
__webpack_require__(472);
__webpack_require__(473);
__webpack_require__(474);
__webpack_require__(475);
__webpack_require__(476);
__webpack_require__(477);
__webpack_require__(478);
__webpack_require__(479);
__webpack_require__(480);
__webpack_require__(481);
__webpack_require__(482);
__webpack_require__(483);
__webpack_require__(484);
__webpack_require__(485);
__webpack_require__(486);
__webpack_require__(487);
__webpack_require__(488);
__webpack_require__(489);
__webpack_require__(490);
__webpack_require__(491);
__webpack_require__(492);
__webpack_require__(493);
__webpack_require__(494);
__webpack_require__(495);
__webpack_require__(496);
__webpack_require__(497);
__webpack_require__(498);
__webpack_require__(499);
__webpack_require__(500);
__webpack_require__(750);
__webpack_require__(751);
__webpack_require__(752);
__webpack_require__(753);
__webpack_require__(501);
__webpack_require__(502);
__webpack_require__(754);
__webpack_require__(755);
__webpack_require__(756);
__webpack_require__(757);
__webpack_require__(758);
__webpack_require__(759);
__webpack_require__(760);
__webpack_require__(503);
__webpack_require__(504);
__webpack_require__(761);
__webpack_require__(762);
__webpack_require__(763);
__webpack_require__(764);
__webpack_require__(505);
__webpack_require__(506);
__webpack_require__(507);
__webpack_require__(508);
__webpack_require__(509);
__webpack_require__(510);
__webpack_require__(511);
__webpack_require__(512);
__webpack_require__(249);
__webpack_require__(250);
__webpack_require__(251);
__webpack_require__(252);
__webpack_require__(253);
__webpack_require__(254);
__webpack_require__(255);
__webpack_require__(256);
__webpack_require__(257);
__webpack_require__(258);
__webpack_require__(259);
__webpack_require__(260);
__webpack_require__(261);
__webpack_require__(262);
__webpack_require__(263);
__webpack_require__(264);
__webpack_require__(265);
__webpack_require__(266);
__webpack_require__(267);
__webpack_require__(268);
__webpack_require__(269);
__webpack_require__(270);
__webpack_require__(271);
__webpack_require__(272);
__webpack_require__(273);
__webpack_require__(274);
__webpack_require__(275);
__webpack_require__(276);
__webpack_require__(277);
__webpack_require__(278);
__webpack_require__(279);
__webpack_require__(280);
__webpack_require__(281);
__webpack_require__(282);
__webpack_require__(283);
__webpack_require__(284);
__webpack_require__(285);
__webpack_require__(286);
__webpack_require__(287);
__webpack_require__(288);
__webpack_require__(289);
__webpack_require__(290);
__webpack_require__(291);
__webpack_require__(292);
__webpack_require__(293);
__webpack_require__(765);
__webpack_require__(515);
__webpack_require__(516);
__webpack_require__(517);
__webpack_require__(518);
__webpack_require__(519);
__webpack_require__(520);
__webpack_require__(521);
__webpack_require__(522);
__webpack_require__(766);
__webpack_require__(767);
__webpack_require__(768);
__webpack_require__(769);
__webpack_require__(770);
__webpack_require__(771);
__webpack_require__(772);
__webpack_require__(523);
__webpack_require__(524);
__webpack_require__(525);
__webpack_require__(526);
__webpack_require__(527);
__webpack_require__(773);
__webpack_require__(774);
__webpack_require__(775);
__webpack_require__(776);
__webpack_require__(777);
__webpack_require__(778);
__webpack_require__(779);
__webpack_require__(780);
__webpack_require__(781);
__webpack_require__(782);
__webpack_require__(783);
__webpack_require__(784);
__webpack_require__(785);
__webpack_require__(786);
__webpack_require__(787);
__webpack_require__(788);
__webpack_require__(789);
__webpack_require__(790);
__webpack_require__(791);
__webpack_require__(792);
__webpack_require__(793);
__webpack_require__(794);
__webpack_require__(795);
__webpack_require__(796);
__webpack_require__(797);
__webpack_require__(798);
__webpack_require__(799);
__webpack_require__(800);
__webpack_require__(801);
__webpack_require__(802);
__webpack_require__(803);
__webpack_require__(804);
__webpack_require__(805);
__webpack_require__(806);
__webpack_require__(807);
__webpack_require__(808);
__webpack_require__(809);
__webpack_require__(810);
__webpack_require__(811);
__webpack_require__(812);
__webpack_require__(813);
__webpack_require__(814);
__webpack_require__(815);
__webpack_require__(816);
__webpack_require__(817);
__webpack_require__(818);
__webpack_require__(819);
__webpack_require__(820);
__webpack_require__(821);
__webpack_require__(822);
__webpack_require__(823);
__webpack_require__(824);
__webpack_require__(825);
__webpack_require__(826);
__webpack_require__(827);
__webpack_require__(828);
__webpack_require__(829);
__webpack_require__(830);
__webpack_require__(831);
__webpack_require__(832);
__webpack_require__(833);
__webpack_require__(834);
__webpack_require__(835);
__webpack_require__(836);
__webpack_require__(837);
__webpack_require__(838);
__webpack_require__(839);
__webpack_require__(840);
__webpack_require__(841);
__webpack_require__(842);
__webpack_require__(843);
__webpack_require__(844);
__webpack_require__(845);
__webpack_require__(846);
__webpack_require__(847);
__webpack_require__(848);
__webpack_require__(849);
__webpack_require__(850);
__webpack_require__(851);
__webpack_require__(852);
__webpack_require__(853);
__webpack_require__(854);
__webpack_require__(855);
__webpack_require__(856);
__webpack_require__(857);
__webpack_require__(858);
__webpack_require__(859);
__webpack_require__(860);
__webpack_require__(861);
__webpack_require__(862);
__webpack_require__(863);
__webpack_require__(864);
__webpack_require__(865);
__webpack_require__(866);
__webpack_require__(867);
__webpack_require__(868);
__webpack_require__(869);
__webpack_require__(870);
__webpack_require__(871);
__webpack_require__(872);
__webpack_require__(873);
__webpack_require__(874);
__webpack_require__(875);
__webpack_require__(876);
__webpack_require__(877);
__webpack_require__(878);
__webpack_require__(879);
__webpack_require__(880);
__webpack_require__(881);
__webpack_require__(882);
__webpack_require__(883);
__webpack_require__(528);
__webpack_require__(529);
__webpack_require__(884);
__webpack_require__(885);
__webpack_require__(886);
__webpack_require__(887);
__webpack_require__(888);
__webpack_require__(889);
__webpack_require__(890);
__webpack_require__(891);
__webpack_require__(892);
__webpack_require__(893);
__webpack_require__(894);
__webpack_require__(895);
__webpack_require__(896);
__webpack_require__(897);
__webpack_require__(898);
__webpack_require__(899);
__webpack_require__(900);
__webpack_require__(901);
__webpack_require__(902);
__webpack_require__(903);
__webpack_require__(904);
__webpack_require__(905);
__webpack_require__(906);
__webpack_require__(907);
__webpack_require__(908);
__webpack_require__(909);
__webpack_require__(910);
__webpack_require__(911);
__webpack_require__(912);
__webpack_require__(913);
__webpack_require__(914);
__webpack_require__(915);
__webpack_require__(916);
__webpack_require__(917);
__webpack_require__(918);
__webpack_require__(919);
__webpack_require__(920);
__webpack_require__(921);
__webpack_require__(922);
__webpack_require__(923);
__webpack_require__(924);
__webpack_require__(925);
__webpack_require__(929);
__webpack_require__(963);
module.exports = __webpack_require__(927);


/***/ })
/******/ ]);