import type { IWorkerController, IWorkerMessage } from '../worker.core';
import { WorkerChannel } from '../worker.channel';
/**
 * 通信控制器
 *
 * @class WorkerBaseController
 */
export declare class WorkerBaseController implements IWorkerController {
    /**
     * 原生 worker, 在子类中实例化
     */
    protected worker: Worker;
    /**
     * 通信 Channel, 在子类中实例化
     */
    protected channel: WorkerChannel;
    /**
     * 事务处理器 Map
     */
    protected actionHandlerMap: {
        [propsName: string]: (payload: any) => any;
    };
    constructor();
    /**
     * 发送事务，不等待结果
     *
     * @param actionType 事务类型
     * @param payload 负载
     */
    request(actionType: string, payload: any): void;
    /**
     * 发送 Promise 形式的事务, 在 then 中获取响应
     *
     * @param actionType 事务类型
     * @param payload 负载
     * @param [timeout] 响应的超时; Worker 通道是可靠的, 超时后只上报, 不阻止当前请求
     */
    requestPromise<T = any>(actionType: string, payload?: any, timeout?: number): Promise<T>;
    /**
     * 添加事务处理器, 不允许重复添加
     *
     * @param actionType 事务类型
     * @param handler 事务处理器
     */
    addActionHandler(actionType: string, handler: (payload: any) => any): void;
    /**
     * 事务处理器, 提供给通信 Channel 调用
     *
     * @param message 会话消息
     * @returns
     */
    actionHandler(message: IWorkerMessage): Promise<any>;
    /**
     * 添加 worker onmessage 事件的回调
     *
     * @param {(event: any) => void} onmessage 回调函数
     * @returns {() => void} 移除监听函数
     */
    addOnmessageListener(onmessage: (event: any) => void): () => void;
    /**
     * 判断是否有指定事务的处理器
     *
     * @param actionType 事务类型
     * @returns {boolean}
     */
    protected hasActionHandler(actionType: string): boolean;
}
