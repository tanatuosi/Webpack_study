import { FormulaInserter } from "./inserter/inserter.basic";
import { ButtonGroup, CustomTree, SearchEditor, Text } from '@fui/core';
export declare class FormulaOpeartingPanel extends BI.Pane {
    static xtype: string;
    private functionTypeGroup;
    private functionNameGroup;
    private model;
    private store;
    private descriptionLabel;
    private searchEditor;
    private relatedFunctionNameGroup;
    private formulaEditor;
    private varTree;
    props: {
        inserterType: string;
        value: {
            formula: string;
            [key: string]: any;
        };
        configLoader: (..._args: any[]) => Promise<{
            vars: {
                text: string;
                value: string;
                type: string;
                def: string;
            }[];
            JSONs: {
                def: string;
                name: string;
                type: string;
            }[];
        }>;
    };
    watch: {
        functionNames: () => void;
        selectedFunctionNameOrVarName: () => void;
        selectedFunctionType: () => void;
        functionDescription: () => void;
        relatedFunctionNames: () => void;
        isCached: () => void;
    };
    render(): {
        type: string;
        items: ({
            el: {
                type: string;
                items: {
                    left: {
                        type: string;
                        text: string;
                    }[];
                    right: ({
                        type: string;
                        ref: (_ref: SearchEditor) => void;
                        width: number;
                        listeners: {
                            eventName: string;
                            action: () => void;
                        }[];
                        lgap?: undefined;
                        el?: undefined;
                    } | {
                        lgap: number;
                        el: {
                            type: string;
                            text: string;
                            minWidth: number;
                            width: number;
                            handler: () => void;
                        };
                        type?: undefined;
                        ref?: undefined;
                        width?: undefined;
                        listeners?: undefined;
                    })[];
                };
            };
            height: number;
            tgap?: undefined;
            type?: undefined;
            items?: undefined;
        } | {
            el: {
                type: string;
                items: ({
                    type: string;
                    ref: (_ref: FormulaInserter) => void;
                    value: {
                        [key: string]: any;
                        formula: string;
                    };
                    rgap: number;
                    listeners: {
                        eventName: string;
                        action: (hint: string) => void;
                    }[];
                    el?: undefined;
                    width?: undefined;
                } | {
                    el: {
                        type: string;
                        ref: (_ref: ButtonGroup) => void;
                        cls: string;
                        items: {
                            text: string;
                            value: string;
                            title: string;
                        }[];
                        layouts: {
                            type: string;
                        }[];
                        listeners: {
                            eventName: string;
                            action: (val: string) => void;
                        }[];
                    };
                    width: number;
                    type?: undefined;
                    ref?: undefined;
                    value?: undefined;
                    rgap?: undefined;
                    listeners?: undefined;
                })[];
            };
            height: number;
            tgap: number;
            type?: undefined;
            items?: undefined;
        } | {
            type: string;
            items: ({
                el: {
                    type: string;
                    items: ({
                        el: {
                            type: string;
                            text: string;
                            textAlign: string;
                        };
                        height: number;
                        type?: undefined;
                        ref?: undefined;
                        value?: undefined;
                        cls?: undefined;
                        items?: undefined;
                        layouts?: undefined;
                        listeners?: undefined;
                    } | {
                        type: string;
                        ref: (_ref: ButtonGroup) => void;
                        value: string;
                        cls: string;
                        items: {
                            text: string;
                            value: string;
                            title: string;
                        }[];
                        layouts: {
                            type: string;
                        }[];
                        listeners: {
                            eventName: string;
                            action: (val: string) => void;
                        }[];
                        el?: undefined;
                        height?: undefined;
                    })[];
                };
                width: number;
                lgap?: undefined;
            } | {
                el: {
                    type: string;
                    items: ({
                        el: {
                            type: string;
                            text: string;
                            textAlign: string;
                        };
                        height: number;
                        type?: undefined;
                        ref?: undefined;
                        value?: undefined;
                        cls?: undefined;
                        items?: undefined;
                        layouts?: undefined;
                        listeners?: undefined;
                    } | {
                        type: string;
                        ref: (_ref: ButtonGroup) => void;
                        value: string;
                        cls: string;
                        items: {
                            text: string;
                            value: string;
                            title: string;
                        }[];
                        layouts: {
                            type: string;
                        }[];
                        listeners: {
                            eventName: string;
                            action: (_type: string, val: string, _widget: any, e: any) => void;
                        }[];
                        el?: undefined;
                        height?: undefined;
                    })[];
                };
                lgap: number;
                width: number;
            } | {
                el: {
                    type: string;
                    items: ({
                        el: {
                            type: string;
                            text: string;
                            textAlign: string;
                            layouts?: undefined;
                        };
                        height: number;
                        type?: undefined;
                        cls?: undefined;
                        chooseType?: undefined;
                        ref?: undefined;
                        items?: undefined;
                        listeners?: undefined;
                    } | {
                        type: string;
                        cls: string;
                        chooseType: number;
                        ref: (_ref: CustomTree) => void;
                        el: {
                            type: string;
                            layouts: {
                                type: string;
                            }[];
                            text?: undefined;
                            textAlign?: undefined;
                        };
                        items: {
                            id: string;
                            pId: string;
                            open?: boolean | undefined;
                            text: string;
                            value: string;
                            height: number;
                            type: string;
                        }[];
                        listeners: {
                            eventName: string;
                            action: (type: string, val: string, _widget: any, e: any) => void;
                        }[];
                        height?: undefined;
                    })[];
                };
                lgap: number;
                width: number;
            } | {
                el: {
                    type: string;
                    items: ({
                        el: {
                            type: string;
                            text: string;
                            textAlign: string;
                        };
                        height: number;
                        type?: undefined;
                        cls?: undefined;
                        items?: undefined;
                    } | {
                        type: string;
                        cls: string;
                        items: {
                            el: {
                                type: string;
                                ref: (_ref: Text) => void;
                                text: string;
                                whiteSpace: string;
                                hgap: number;
                            };
                        }[];
                        el?: undefined;
                        height?: undefined;
                    })[];
                };
                lgap: number;
                width?: undefined;
            })[];
            el?: undefined;
            height?: undefined;
            tgap?: undefined;
        })[];
    };
    beforeRender(callback: Function): void;
    /**
     * functionName滚动到可见区域
     */
    private scrollFunctionName2View;
    getValue(): {
        formula: string;
    };
    /**
     * 对外加载数据的接口
     * @param data 数据
     */
    loadConfigData(data: {
        vars: {
            text: string;
            value: string;
            type: string;
            def: string;
        }[];
        JSONs: {
            def: string;
            name: string;
            type: string;
        }[];
    }): void;
}
