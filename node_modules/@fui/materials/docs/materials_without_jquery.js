/*! time: 2022/11/29 14:07:13 */
/*! time: 2022/11/29 14:07:13 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 577);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.store = exports.shortcut = exports.model = exports.Model = void 0;
var _BI$Decorators = BI.Decorators,
    shortcut = _BI$Decorators.shortcut,
    Model = _BI$Decorators.Model,
    model = _BI$Decorators.model,
    store = _BI$Decorators.store;
exports.store = store;
exports.model = model;
exports.Model = Model;
exports.shortcut = shortcut;

/***/ }),
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInput = getInput;
exports.input = input;
var inputs = {};

function input(key) {
  return function (target) {
    inputs[key] = target;
  };
}

function getInput(type) {
  var inputWidget = inputs[type];

  if (BI.isNull(inputWidget)) {
    throw new TypeError();
  }

  return inputWidget.xtype;
}

/***/ }),
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormulaInserter = void 0;

var _decorator = __webpack_require__(1);

var CodeMirror = _interopRequireWildcard(__webpack_require__(302));

var _formula = __webpack_require__(45);

var _dec, _class, _class2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var paramRegex = /(\$[{][^}]*[}])/;
var FormulaInserter = (_dec = (0, _decorator.shortcut)(), _dec(_class = (_class2 = /*#__PURE__*/function (_BI$Widget) {
  _inheritsLoose(FormulaInserter, _BI$Widget);

  function FormulaInserter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$Widget.call.apply(_BI$Widget, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "formulaEditor", void 0);

    _defineProperty(_assertThisInitialized(_this), "props", {
      value: {
        formula: ""
      }
    });

    return _this;
  }

  var _proto = FormulaInserter.prototype;

  _proto.getToolbarLayout = function getToolbarLayout() {
    return {
      type: BI.Layout.xtype
    };
  };

  _proto.render = function render() {
    var _this2 = this;

    return {
      type: BI.VTapeLayout.xtype,
      items: [{
        el: {
          type: BI.FormulaEditor.xtype,
          cls: "bi-border",
          ref: function ref(_ref) {
            _this2.formulaEditor = _ref;
          },
          watermark: BI.i18nText("BI-Basic_Formula_Watermark"),
          listeners: [{
            eventName: BI.FormulaEditor.EVENT_CHANGE,
            action: function action() {
              _this2.validate();
            }
          }, {
            eventName: "EVENT_SHOW_HINT",
            action: function action(list) {
              _this2.fireEvent("EVENT_SHOW_HINT", BI.first(list));
            }
          }, {
            eventName: "EVENT_SELECT_HINT",
            action: function action(hint) {
              _this2.fireEvent("EVENT_SELECT_HINT", hint);
            }
          }]
        },
        height: 155
      }, this.getToolbarLayout()]
    };
  };

  _proto.mounted = function mounted() {
    this.setValue(this.options.value.formula);
  }
  /**
   * 插入function
   * @param val function值
   */
  ;

  _proto.insertFunction = function insertFunction(val) {
    this.formulaEditor.insertFunction(val);
  }
  /**
   * 插入字段
   * @param val 字段值
   */
  ;

  _proto.insertField = function insertField(val) {
    this.formulaEditor.insertField(val, true);
  };

  _proto.getValue = function getValue() {
    return {
      formula: this.formulaEditor.getValue()
    };
  }
  /**
   * 校验
   */
  ;

  _proto.validate = function validate() {
    var val = this.formulaEditor.getValue();

    if (val === "") {
      this.formulaEditor.hideTip();
      return;
    }

    this.fireEvent("EVENT_VALIDATE");
  };

  _proto.setValidation = function setValidation(data) {
    data.validation ? this.formulaEditor.hideTip() : this.formulaEditor.showTip(BI.i18nText("BI-Basic_Formula_Invalid"));
  };

  _proto.setValue = function setValue(value) {
    this.formulaEditor.refresh();
    this.formulaEditor.setValue("");
    this.insertFormula(value);
    this.validate();
  }
  /**
   * 分割字符串
   * @param v 字符串
   */
  ;

  _proto.analyzeContent = function analyzeContent(v) {
    // \w*\w 这是干啥呢, 至少匹配一次\w ? 那可以用\w+
    var regx = /\$[{][^}]*[}]|\w+|\$\{[^$()+\-*/)$,]*\w\}|\$\{[^$()+\-*/]*\w\}|\$\{[^$()+\-*/]*[\u4e00-\u9fa5]\}|\w|(.)|\n/g;
    return v.match(regx);
  }
  /**
   * 参数转译为显示值
   * @param v 实际值
   */
  ;

  _proto.paramFormatter = function paramFormatter(v) {
    return (0, _formula.getVarDisplayNameByValue)(v);
  }
  /**
   * 插入公式
   * @param value 公式值
   * @param position 位置
   */
  ;

  _proto.insertFormula = function insertFormula() {
    var _this3 = this;

    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var position = arguments.length > 1 ? arguments[1] : undefined;
    var result = this.analyzeContent(value) || [];
    var fieldArray = [],
        functionArray = [];
    var lineNum = 0,
        offset = 0,
        valueString = "";

    if (BI.isNotNull(position)) {
      lineNum = position.line;
      offset = position.ch;
    }

    var wrapChar = this.formulaEditor.getParamWrap();
    result.forEach(function (str) {
      if (paramRegex.test(str)) {
        // 是函数
        var fieldId = str.substring(2, str.length - 1);

        var formattedParam = _this3.paramFormatter(fieldId);

        var fieldName = wrapChar + formattedParam.replaceAll("^<!.*!>$", function (str) {
          return str.substring(2, str.length - 2);
        }) + wrapChar;
        var fromPos = CodeMirror.Pos(lineNum, offset);
        valueString += fieldName;
        offset += fieldName.length;
        var endPos = CodeMirror.Pos(lineNum, offset);
        fieldArray.push({
          from: fromPos,
          to: endPos,
          value: fieldId,
          invalid: /^<!.*!>$/.test(formattedParam),
          text: fieldName
        });
      } else {
        if (BI.isNotNull((0, _formula.isBelong2FormulaFunction)(str))) {
          var _fromPos = CodeMirror.Pos(lineNum, offset);

          var _endPos = CodeMirror.Pos(lineNum, offset + str.length);

          functionArray.push({
            from: _fromPos,
            to: _endPos,
            value: str
          });
        }

        if (str === "\n") {
          lineNum++;
          offset = 0;
        }

        valueString += str;
        str !== "\n" && (offset += str.length);
      }
    });
    this.formulaEditor.insertString(valueString);
    BI.each(fieldArray, function (_idx, field) {
      _this3.formulaEditor.markField(field);
    });
    BI.each(functionArray, function (_idx, field) {
      _this3.formulaEditor.markFunction(field);
    });
  };

  return FormulaInserter;
}(BI.Widget), _defineProperty(_class2, "xtype", "bi.formula_operating_panel.inserter"), _class2)) || _class);
exports.FormulaInserter = FormulaInserter;

/***/ }),
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_CONFIG = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @author guy
 * @version 2.0
 * Created by guy on 2022/9/25
 */
var DEFAULT_CONFIG = {
  type: "bi.pure_text",
  lineHeight: 30,
  textAlign: "left",
  whiteSpace: "normal",
  expandIcon: "expander-down-font",
  collapseIcon: "expander-right-font",
  sortableIcon: "text-align-center-font"
};
exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
var StickyTableRow = BI.inherit(BI.Widget, {
  props: {
    baseCls: 'bi-sticky-table-row',
    tagName: "tr",
    id: "",
    dimension: DEFAULT_CONFIG,
    layer: 0,
    columnSize: [],
    minColumnSize: [],
    maxColumnSize: [],
    freezeCols: [],
    items: [],
    draggable: true,
    checkable: true,
    checked: false,
    half: false,
    prevComponent: null
  },
  render: function render() {
    var _this = this;

    return {
      type: 'bi.adaptive',
      cls: this.options.draggable ? "enabled" : "",
      ref: function ref(_ref) {
        _this.layout = _ref;
      },
      items: this.getItems()
    };
  },
  getItems: function getItems() {
    var _this2 = this;

    var self = this,
        o = this.options;

    var dimension = _objectSpread(_objectSpread({}, DEFAULT_CONFIG), o.dimension);

    this.text = BI.createWidget(dimension);
    return [{
      type: "bi.adaptive",
      tagName: "td",
      cls: "".concat(o.freezeCols.includes(0) ? "sticky-table-fix-first-col" : "", " first-col"),
      items: [{
        type: "bi.vertical_adapt",
        css: {
          minWidth: o.minColumnSize[0],
          maxWidth: o.maxColumnSize[0]
        },
        items: [o.prevComponent, o.draggable ? {
          type: "bi.icon_label",
          extraCls: "bi-sticky-table-draggable-handler",
          cls: dimension.sortableIcon,
          width: 30,
          height: 30
        } : null, o.isParent ? {
          _lgap: o.layer * 30,
          type: "bi.icon_change_button",
          ref: function ref(_ref) {
            _this2.arrow = _ref;
          },
          handler: function handler() {
            _this2.fireEvent(BI.Controller.EVENT_CHANGE, o.open ? BI.Events.COLLAPSE : BI.Events.EXPAND);
          },
          iconCls: this._getExpandIcon(),
          width: 30,
          height: 30
        } : null, o.checkable ? {
          _lgap: !o.isParent ? (o.layer + 0.5) * 30 : 0,
          type: "bi.multi_select_bar",
          ref: function ref(_ref) {
            _this2.checkbox = _ref;
          },
          selected: o.checked,
          halfSelected: o.half,
          width: 30,
          iconWrapperWidth: 30,
          height: 30,
          text: "",
          listeners: _defineProperty({}, BI.MultiSelectBar.EVENT_CHANGE, function (v) {
            self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CHANGE, v);
          })
        } : null, {
          _lgap: !o.checkable && !o.isParent ? o.layer * 30 : 0,
          width: "fill",
          el: this.text
        }]
      }]
    }].concat(BI.map(o.items, function (i, item) {
      var isFirstCols = o.freezeCols.includes(i + 1) && i < o.items.length - 1;
      var isLastCols = o.freezeCols.includes(i + 1) && i === o.items.length - 1;
      return {
        type: "bi.adaptive",
        extraCls: isLastCols ? "sticky-table-fix-last-col" : isFirstCols ? "sticky-table-fix-first-col" : "",
        cls: "sticky-table-fix-index-".concat(i + 1, "-col"),
        css: {
          // left: isFirstCols ? o.columnSize.slice(0, i + 1).reduce((item, sum) => sum + item, 0) : "",
          minWidth: o.minColumnSize[i + 1],
          maxWidth: o.maxColumnSize[i + 1]
        },
        tagName: "td",
        items: [_objectSpread(_objectSpread({}, DEFAULT_CONFIG), item)]
      };
    }));
  },
  _getExpandIcon: function _getExpandIcon() {
    var self = this,
        o = this.options;
    var dimension = BI.extend({}, DEFAULT_CONFIG, o.dimension);
    return o.open ? dimension.expandIcon : dimension.collapseIcon;
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  shouldUpdate: function shouldUpdate(opt) {
    var o = this.options;
    var keys = ["open", "layer", "pId", "id", "dimension", "items", "draggable", "prevComponent", "columnSize", "checked", "half", "cls"];
    return BI.some(keys, function (idx, key) {
      return opt[key] !== o[key];
    });
  },
  update: function update(opt) {
    var o = this.options;

    if (opt.prevComponent !== o.prevComponent) {
      o.prevComponent = opt.prevComponent;
    }

    if (opt.cls !== o.cls) {
      this.element.removeClass(o.cls).addClass(opt.cls);
      o.cls = opt.cls;
    }

    if (BI.isNotNull(opt.draggable) && opt.draggable !== o.draggable) {
      this.element[opt.draggable ? "addClass" : "removeClass"]("enabled");
    }

    if (opt.dimension !== o.dimension) {
      this.text.setText(opt.dimension.text || opt.dimension.value);
      o.dimension = opt.dimension;
    }

    if (opt.open !== o.open) {
      o.open = opt.open;
      this.arrow && this.arrow.setIcon(this._getExpandIcon());
    }

    if (opt.items !== o.items || BI.isNotNull(opt.draggable) && opt.draggable !== o.draggable) {
      o.items = opt.items;
      o.draggable = opt.draggable;
      this.layout.populate(this.getItems());
    }

    if (opt.checked !== o.checked || opt.half !== o.half) {
      o.checked = opt.checked;
      o.half = opt.half;
      this.checkbox && this.checkbox.setSelected(o.checked);
      this.checkbox && this.checkbox.setHalfSelected(o.half);
    }
  }
});
BI.shortcut("bi.sticky_table_row", StickyTableRow);

/***/ }),
/* 43 */,
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFunctionDescriptionByFunctionName = getFunctionDescriptionByFunctionName;
exports.getFunctionTypeByFunctionName = getFunctionTypeByFunctionName;
exports.getSearchedFunctionNames = getSearchedFunctionNames;
exports.getVarDescriptionByVarName = getVarDescriptionByVarName;
exports.getVarDisplayNameByValue = getVarDisplayNameByValue;
exports.isBelong2FormulaFunction = isBelong2FormulaFunction;
exports.isFormulaConfigCached = isFormulaConfigCached;
exports.setFormulaConfigCache = setFormulaConfigCache;
exports.transformFormulaJSONs2FunctionNames = transformFormulaJSONs2FunctionNames;
exports.transformFormulaJSONs2FunctionTypes = transformFormulaJSONs2FunctionTypes;
exports.transformFormulaVarItems = transformFormulaVarItems;

var _item = __webpack_require__(303);

var _formula = __webpack_require__(46);

var _item2 = __webpack_require__(304);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var isCached = false;
var formulaVarItemsCache = [];
var formulaJSONs = [];
/**
 * 查看是否已经缓存
 */

function isFormulaConfigCached() {
  return isCached;
}
/**
 * 获取公式参数显示值
 * @param v 参数实际值
 */


function getVarDisplayNameByValue(v) {
  var varItem = formulaVarItemsCache.find(function (varItem) {
    return varItem.value === v;
  });
  return varItem ? varItem.text : "undefined";
}
/**
 * 缓存配置
 * @param config 所需配置信息
 */


function setFormulaConfigCache(config) {
  isCached = true;
  formulaVarItemsCache = config.vars;
  BI.FormulaJSONs = config.JSONs;
  BI.FormulaCollections = config.JSONs.reduce(function (result, json) {
    result.push(json.name.toLowerCase(), json.name.toUpperCase());
    return result;
  }, []);
  formulaJSONs = config.JSONs;
}
/**
 * 获取所有FunctionTypes
 */


function transformFormulaJSONs2FunctionTypes() {
  return Object.keys(formulaJSONs.reduce(function (resultMap, formulaJSON) {
    if (!(formulaJSON.type in resultMap)) {
      resultMap[formulaJSON.type] = [];
    }

    return resultMap;
  }, {})).map(function (type) {
    return {
      text: type,
      title: type,
      value: type,
      cls: "bi-list-item-select",
      textAlign: "left",
      height: 20,
      hgap: 5
    };
  });
}
/**
 * 获取所有FunctionNames
 * @param functionType 方法类型
 */


function transformFormulaJSONs2FunctionNames(functionType) {
  return Object.keys(formulaJSONs.reduce(function (resultMap, formulaJSON) {
    if (!(formulaJSON.name in resultMap) && (!functionType || formulaJSON.type === functionType)) {
      resultMap[formulaJSON.name] = [];
    }

    return resultMap;
  }, {})).map(function (type) {
    return {
      type: _item.FormulaFunctionItem.xtype,
      text: type,
      title: type,
      value: type,
      height: 20
    };
  });
}
/**
 * 根据方法名获取方法类型
 * @param functionName 方法名
 */


function getFunctionTypeByFunctionName(functionName) {
  var formulaJSON = formulaJSONs.find(function (formulaJSON) {
    return formulaJSON.name === functionName;
  });

  if (BI.isNotNull(formulaJSON)) {
    return formulaJSON.type;
  }

  return null;
}
/**
 * 根据方法名获取方法类型
 * @param functionName 方法名
 */


function getFunctionDescriptionByFunctionName(functionName) {
  var formulaJSON = formulaJSONs.find(function (formulaJSON) {
    return formulaJSON.name === functionName;
  });
  return BI.isNotNull(formulaJSON) ? formulaJSON.def : "";
}
/**
 * 根据关键字搜索functionNames
 * @param keyword 关键字
 */


function getSearchedFunctionNames(keyword) {
  if (keyword === "") {
    return [];
  }

  var _BI$Func$getSearchRes = BI.Func.getSearchResult(transformFormulaJSONs2FunctionNames(), keyword, "val"),
      match = _BI$Func$getSearchRes.match,
      find = _BI$Func$getSearchRes.find;

  match.sort(function (a, b) {
    return a.value > b.value ? 1 : -1;
  });
  find.sort(function (a, b) {
    return a.value > b.value ? 1 : -1;
  });
  return [].concat(_toConsumableArray(match), _toConsumableArray(find));
}
/**
 * 获取公式框变量结构
 */


function transformFormulaVarItems() {
  if (!isCached) {
    return [];
  }

  var nodeLeavesMap = {},
      height = 25;
  var leaves = formulaVarItemsCache;
  leaves.forEach(function (leaf) {
    if (leaf.type in nodeLeavesMap) {
      nodeLeavesMap[leaf.type].push(leaf);
    } else {
      nodeLeavesMap[leaf.type] = [leaf];
    }
  });

  var items = _formula.FORMULA_VAR_NODES.map(function (node) {
    var size = BI.size(nodeLeavesMap[node.value]);
    return _objectSpread(_objectSpread({}, node), {}, {
      open: true,
      height: height,
      text: BI.i18nText(node.i18nText) + (size > 0 ? " - [".concat(size, "]") : "")
    });
  });

  Object.keys(nodeLeavesMap).forEach(function (nodeType) {
    var node = _formula.FORMULA_VAR_NODES.find(function (node) {
      return node.value === nodeType;
    });

    if (!node) {
      return;
    }

    var pId = node.id,
        nodeLeaves = nodeLeavesMap[nodeType],
        size = BI.size(nodeLeaves);
    items.push.apply(items, _toConsumableArray(nodeLeaves.map(function (leaf, index) {
      return {
        pId: pId,
        id: BI.UUID(),
        text: leaf.text,
        value: leaf.value,
        lgap: 16,
        layoutType: index === size - 1 ? BI.LastTreeLeafItem.xtype : BI.MidTreeLeafItem.xtype,
        type: _item2.FormulaVarItem.xtype,
        height: height
      };
    })));
  });
  return items;
}
/**
 * 根据变量名获取方法类型
 * @param varName 变量名
 */


function getVarDescriptionByVarName(varName) {
  var formulaVarItem = formulaVarItemsCache.find(function (formulaVarItem) {
    return formulaVarItem.value === varName;
  });
  return BI.isNotNull(formulaVarItem) ? formulaVarItem.def : "";
}
/**
 * 检查字符串是否是公式方法名
 * @param str 字符串
 */


function isBelong2FormulaFunction(str) {
  return transformFormulaJSONs2FunctionNames().find(function (item) {
    return item.text.toLowerCase() === str.toLowerCase();
  });
}

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FORMULA_VAR_TYPES = exports.FORMULA_VAR_NODES = exports.DEFAULT_FUNCTION_TYPE = exports.DEFAULT_FUNCTION_NAME = void 0;
var DEFAULT_FUNCTION_NAME = "ABS";
exports.DEFAULT_FUNCTION_NAME = DEFAULT_FUNCTION_NAME;
var DEFAULT_FUNCTION_TYPE = "MATH";
exports.DEFAULT_FUNCTION_TYPE = DEFAULT_FUNCTION_TYPE;
var FORMULA_VAR_TYPES = {
  DATA_ITEMS: "DATA_ITEMS",
  VARS: "VARS",
  DATA_SET_VARS: "DATA_SET_VARS",
  REPORT_VARS: "REPORT_VARS",
  GLOBAL_VARS: "GLOBAL_VARS"
};
exports.FORMULA_VAR_TYPES = FORMULA_VAR_TYPES;
var FORMULA_VAR_NODES = [{
  id: "1",
  pId: "-1",
  i18nText: "BI-Basic_Formula_Data_Items",
  value: FORMULA_VAR_TYPES.DATA_ITEMS,
  type: BI.IconArrowNode.xtype,
  iconCls: "search-font"
}, {
  id: "2",
  pId: "-1",
  i18nText: "BI-Basic_Formula_Vars",
  value: FORMULA_VAR_TYPES.VARS,
  type: BI.IconArrowNode.xtype,
  iconCls: "search-font"
}, {
  id: "3",
  pId: "-1",
  i18nText: "BI-Basic_Formula_Data_Set_Vars",
  value: FORMULA_VAR_TYPES.DATA_SET_VARS,
  type: BI.IconArrowNode.xtype,
  iconCls: "search-font"
}, {
  id: "4",
  pId: "-1",
  i18nText: "BI-Basic_Formula_Report_Vars",
  value: FORMULA_VAR_TYPES.REPORT_VARS,
  type: BI.IconArrowNode.xtype,
  iconCls: "search-font"
}, {
  id: "5",
  pId: "-1",
  i18nText: "BI-Basic_Formula_Global_Vars",
  value: FORMULA_VAR_TYPES.GLOBAL_VARS,
  type: BI.IconArrowNode.xtype,
  iconCls: "search-font"
}];
exports.FORMULA_VAR_NODES = FORMULA_VAR_NODES;

/***/ }),
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),
/* 69 */,
/* 70 */,
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _stickytable = __webpack_require__(42);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @author guy
 * @version 2.0
 * Created by guy on 2022/9/25
 */
var StickyTableHeader = BI.inherit(BI.Widget, {
  props: {
    baseCls: 'bi-sticky-table-header',
    columnSize: [],
    minColumnSize: [],
    maxColumnSize: [],
    freezeCols: [],
    header: [],
    headerRowSize: "auto"
  },
  render: function render() {
    var _this = this;

    var self = this,
        o = this.options;
    this.tds = [];
    return {
      type: "bi.sticky_table_layout",
      sortable: false,
      ref: function ref(_ref) {
        _this.layout = _ref;
      },
      columnSize: o.columnSize,
      freezeCols: o.freezeCols,
      items: this._formatItems(o.header)
    };
  },
  _formatItems: function _formatItems(items) {
    var _this2 = this;

    var o = this.options;
    return items.map(function (tds) {
      return {
        type: "bi.adaptive",
        tagName: "tr",
        height: o.headerRowSize,
        items: tds.map(function (item, i) {
          return {
            type: "bi.default",
            tagName: "td",
            ref: function ref(_ref) {
              _this2.tds[i] = _ref;
            },
            extraCls: o.freezeCols.includes(i) ? i === tds.length - 1 ? "sticky-table-fix-last-col" : "sticky-table-fix-first-col" : "",
            cls: "sticky-table-fix-index-".concat(i, "-col first-row ").concat(i === 0 ? "first-col" : ""),
            css: {
              minWidth: o.minColumnSize[i],
              maxWidth: o.maxColumnSize[i]
            },
            items: [_objectSpread(_objectSpread({}, _stickytable.DEFAULT_CONFIG), item)]
          };
        })
      };
    });
  },
  _populate: function _populate(items) {
    this.layout.populate(this._formatItems(items));
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.layout.setColumnSize(columnSize);
  },
  populate: function populate(items) {
    this._populate(items);
  },
  getRealColumnSize: function getRealColumnSize() {
    return this.tds.map(function (td) {
      return td.element.width();
    });
  }
});
BI.shortcut("bi.sticky_table_header", StickyTableHeader);

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StickyTableLayout = void 0;

var _draggable = __webpack_require__(300);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @author guy
 * @version 2.0
 * Created by guy on 2022/9/25
 */
var StickyTableLayout = BI.inherit(BI.Widget, {
  props: {
    baseCls: 'bi-sticky-table-layout',
    sortable: true,
    checkable: true,
    columnSize: [],
    minColumnSize: [],
    maxColumnSize: [],
    freezeCols: [],
    mirror: {}
  },
  render: function render() {
    var _this = this;

    var self = this,
        o = this.options;
    return {
      type: "bi.default",
      items: [{
        type: 'bi.default',
        tagName: "table",
        ref: function ref(_ref) {
          _this.table = _ref;
        },
        width: BI.sum(o.columnSize),
        cls: "border-sizing",
        css: {
          border: 0,
          borderSpacing: 0,
          borderCollapse: "collapse",
          tableLayout: "fixed",
          minWidth: "100%"
        },
        items: [{
          type: "bi.default",
          ref: function ref(_ref) {
            _this.colgroup = _ref;
          },
          tagName: "colgroup",
          items: this._formatCol(o.columnSize)
        }, {
          type: "bi.default",
          tagName: "tbody",
          ref: function ref(_ref) {
            _this.layout = _ref;
          },
          items: this._formatItems(o.items)
        }]
      }]
    };
  },
  mounted: function mounted() {
    var _this2 = this;

    if (this.options.sortable) {
      var draggable = new _draggable.Draggable(this.table.element[0], {
        draggable: 'tr.enabled',
        handle: ".bi-sticky-table-draggable-handler",
        classes: {
          "draggable:over": ["bi-sticky-table-draggable-drag-over"],
          "mirror": ["bi-sticky-table-draggable-mirror"]
        },
        mirror: this.options.mirror
      });
      var lastDragElement;
      var lock = false;
      var lockFn = BI.debounce(function () {
        lock = false;
      }, 300);
      draggable.on("drag:start", function (e) {
        var source = e.data.source; // source.style.visibility = "hidden";

        source.style.transform = "";
        source.style.transitionDuration = "";

        _this2.fireEvent(StickyTableLayout.EVENT_START_DRAG, e.data.source.getAttribute("dataid"));
      });
      draggable.on('drag:stop', function (e) {
        var sourceId = e.data.source.getAttribute("dataid");
        var childNodes = e.data.source.parentElement.childNodes;
        childNodes.forEach(function (node) {
          node.style.visibility = "";
          node.style.transform = "";
          node.style.transitionDuration = ""; // node.style.pointerEvents = "";
        });

        if (!e.data.sourceContainer.contains(e.data.originalSource)) {
          e.data.originalSource.remove();
          e.data.source.remove();
        }

        if (lastDragElement) {
          _this2.fireEvent(StickyTableLayout.EVENT_STOP_DRAG, [sourceId, lastDragElement.getAttribute("dataid")]);
        }

        lastDragElement = null;
      });
      draggable.on("drag:over", function (e) {
        var over = e.data.over;
        var source = e.data.source;
        source.style.visibility = "hidden";

        if (over === source || over === e.data.originalSource) {
          return;
        }

        if (over === lastDragElement) {
          if (lock) {
            return;
          }
        }

        lock = true;
        lockFn();

        if (over.style.transform) {
          over.style.transform = "";

          var _filterNodes = getFilterNodes();

          if (lastDragElement === over) {
            if (_filterNodes[0] === over) {
              lastDragElement = over.nextSibling;
            } else {
              lastDragElement = over.previousSibling;
            }

            if (!lastDragElement) {
              lastDragElement = over;
            }

            return;
          }

          lastDragElement = over;
          return;
        }

        lastDragElement = over;

        function getFilterNodes() {
          var childNodes = over.parentElement.childNodes;
          var startPush = false; // source到over这一段的节点

          var filterNodes = [];
          childNodes.forEach(function (node) {
            if (startPush === true && (node === source || node === over)) {
              startPush = false;
              filterNodes.push(node);
              return;
            }

            if (node === source || node === over) {
              startPush = true;
            }

            if (startPush) {
              filterNodes.push(node);
            } else {
              node.style.transform = "";
            }
          });
          return filterNodes;
        }

        var filterNodes = getFilterNodes();
        var transform = "translateY(-100%)";

        if (filterNodes[0] === over) {
          transform = "translateY(100%)";
        }

        filterNodes.forEach(function (node) {
          if (node === source) {
            return;
          }

          node.style.transform = transform;
          node.style.transitionDuration = "300ms"; // node.style.pointerEvents = "none";
        });
      });
      draggable.on("mirror:created", function (e) {
        var o = _this2.options;
      });
    }
  },
  _formatCol: function _formatCol(columnSize) {
    return columnSize.map(function (width) {
      return {
        type: "bi.default",
        tagName: "col",
        width: width
      };
    });
  },
  _formatItems: function _formatItems(items) {
    var o = this.options;
    return items.map(function (item, i) {
      return _objectSpread(_objectSpread({
        isNeedFreeze: o.isNeedFreeze,
        draggable: o.sortable,
        checkable: o.checkable,
        freezeCols: o.freezeCols,
        columnSize: o.columnSize,
        minColumnSize: o.minColumnSize,
        maxColumnSize: o.maxColumnSize,
        attributes: {
          dataid: item.id
        }
      }, item), {}, {
        cls: "".concat(item.cls || "", " ").concat(i % 2 ? "even" : "odd")
      });
    });
  },
  _populate: function _populate(items) {
    this.layout.populate(this._formatItems(items));
  },
  setColumnSize: function setColumnSize(columnSize) {
    var o = this.options;
    o.columnSize = columnSize;
    this.colgroup.populate(this._formatCol(o.columnSize));
    this.table.setWidth(BI.sum(o.columnSize));
  },
  addItems: function addItems(items) {
    this.layout.addItems(this._formatItems(items));
  },
  populate: function populate(items) {
    this._populate(items);
  }
});
exports.StickyTableLayout = StickyTableLayout;
StickyTableLayout.EVENT_START_DRAG = "EVENT_START_DRAG";
StickyTableLayout.EVENT_STOP_DRAG = "EVENT_STOP_DRAG";
BI.shortcut("bi.sticky_table_layout", StickyTableLayout);

/***/ }),
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.headerItemsData = exports.defaultHeaderItems = void 0;
var defaultHeaderItems = ["add", "delete", "moveUp", "moveDown", "refresh"];
exports.defaultHeaderItems = defaultHeaderItems;
var headerItemsData = [{
  type: "add",
  cls: "text-add-tip-font",
  title: "BI-Basic_Parameter_Insert",
  event: "EVENT_INSERT"
}, {
  type: "delete",
  cls: "close-font bi-error",
  title: "BI-Basic_Parameter_Delete",
  event: "EVENT_DELETE"
}, {
  type: "moveUp",
  cls: "add-up-font",
  title: "BI-Basic_Parameter_Move_Up",
  event: "EVENT_MOVE_UP"
}, {
  type: "moveDown",
  cls: "minus-down-font",
  title: "BI-Basic_Parameter_Move_Down",
  event: "EVENT_MOVE_DOWN"
}, {
  type: "refresh",
  cls: "parameter-refresh-font",
  title: "BI-Basic_Parameter_Refresh",
  event: "EVENT_REFRESH"
}];
exports.headerItemsData = headerItemsData;

/***/ }),
/* 111 */,
/* 112 */,
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Created by richie on 15/7/8.
 */

/**
 * 初始化BI对象
 */
var _global;

if (typeof window !== "undefined") {
  _global = window;
} else if (typeof global !== "undefined") {
  _global = global;
} else if (typeof self !== "undefined") {
  _global = self;
} else {
  _global = void 0;
}

if (_global.BI == null) {
  _global.BI = {
    prepares: []
  };
}

if (_global.BI.prepares == null) {
  _global.BI.prepares = [];
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(68)))

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** Constants used for time computations */
Date.SECOND = 1000;
Date.MINUTE = 60 * Date.SECOND;
Date.HOUR = 60 * Date.MINUTE;
Date.DAY = 24 * Date.HOUR;
Date.WEEK = 7 * Date.DAY;
/**
 * 获取时区
 * @returns {String}
 */

Object.defineProperty(Date.prototype, 'getTimezone', {
  value: function value() {
    return BI.getTimezone(this);
  }
});
/** Returns the number of days in the current month */

Object.defineProperty(Date.prototype, 'getMonthDays', {
  value: function value(month) {
    return BI.getMonthDays(this, month);
  }
});
/**
 * 获取每月的最后一天
 * @returns {Date}
 */

Object.defineProperty(Date.prototype, 'getLastDateOfMonth', {
  value: function value() {
    return BI.getLastDateOfMonth(this);
  }
});
/** Returns the number of day in the year. */

Object.defineProperty(Date.prototype, 'getDayOfYear', {
  value: function value() {
    return BI.getDayOfYear(this);
  }
});
/** Returns the number of the week in year, as defined in ISO 8601. */

Object.defineProperty(Date.prototype, 'getWeekNumber', {
  value: function value() {
    return BI.getWeekNumber(this);
  }
});
Object.defineProperty(Date.prototype, 'getQuarter', {
  value: function value() {
    return BI.getQuarter(this);
  }
}); // 离当前时间多少天的时间

Object.defineProperty(Date.prototype, 'getOffsetDate', {
  value: function value(offset) {
    return BI.getOffsetDate(this, offset);
  }
});
Object.defineProperty(Date.prototype, 'getOffsetQuarter', {
  value: function value(n) {
    return BI.getOffsetQuarter(this, n);
  }
}); // 得到本季度的起始月份

Object.defineProperty(Date.prototype, 'getQuarterStartMonth', {
  value: function value() {
    return BI.getQuarter(this);
  }
}); // 获得本季度的起始日期

Object.defineProperty(Date.prototype, 'getQuarterStartDate', {
  value: function value() {
    return BI.getQuarterStartDate(this);
  }
}); // 得到本季度的结束日期

Object.defineProperty(Date.prototype, 'getQuarterEndDate', {
  value: function value() {
    return BI.getQuarterEndDate(this);
  }
}); // 指定日期n个月之前或之后的日期

Object.defineProperty(Date.prototype, 'getOffsetMonth', {
  value: function value(n) {
    return BI.getOffsetMonth(this, n);
  }
}); // 获得本周的起始日期

Object.defineProperty(Date.prototype, 'getWeekStartDate', {
  value: function value() {
    return BI.getWeekStartDate(this);
  }
}); // 得到本周的结束日期

Object.defineProperty(Date.prototype, 'getWeekEndDate', {
  value: function value() {
    return BI.getWeekEndDate(this);
  }
}); // 格式化打印日期

Object.defineProperty(Date.prototype, 'print', {
  value: function value(str) {
    return BI.print(this, str);
  }
});

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Function.prototype.before = function (func) {
  return BI.beforeFunc(this, func);
};

Function.prototype.after = function (func) {
  return BI.afterFunc(this, func);
};

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 ** 加法函数，用来得到精确的加法结果
 ** 说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。
 ** 调用：accAdd(arg1,arg2)
 ** 返回值：arg1加上arg2的精确结果
 **/
// 给Number类型增加一个add方法，调用起来更加方便。
Number.prototype.add = function (arg) {
  return BI.add(this, arg);
};
/**
 ** 减法函数，用来得到精确的减法结果
 ** 说明：javascript的减法结果会有误差，在两个浮点数相减的时候会比较明显。这个函数返回较为精确的减法结果。
 ** 调用：accSub(arg1,arg2)
 ** 返回值：arg1加上arg2的精确结果
 **/
// 给Number类型增加一个mul方法，调用起来更加方便。


Number.prototype.sub = function (arg) {
  return BI.sub(this, arg);
};
/**
 ** 乘法函数，用来得到精确的乘法结果
 ** 说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。
 ** 调用：accMul(arg1,arg2)
 ** 返回值：arg1乘以 arg2的精确结果
 **/
// 给Number类型增加一个mul方法，调用起来更加方便。


Number.prototype.mul = function (arg) {
  return BI.mul(this, arg);
}; // 给Number类型增加一个div方法，调用起来更加方便。


Number.prototype.div = function (arg) {
  return BI.div(this, arg);
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 对字符串对象的扩展
 * @class String
 */
_.extend(String.prototype, {
  /**
   * 判断字符串是否已指定的字符串开始
   * @param {String} startTag   指定的开始字符串
   * @return {Boolean}  如果字符串以指定字符串开始则返回true，否则返回false
   */
  startWith: function startWith(startTag) {
    return BI.startWith(this, startTag);
  },

  /**
   * 判断字符串是否以指定的字符串结束
   * @param {String} endTag 指定的字符串
   * @return {Boolean}  如果字符串以指定字符串结束则返回true，否则返回false
   */
  endWith: function endWith(endTag) {
    return BI.endWith(this, endTag);
  },

  /**
   * 获取url中指定名字的参数
   * @param {String} name 参数的名字
   * @return {String} 参数的值
   */
  getQuery: function getQuery(name) {
    return BI.getQuery(this, name);
  },

  /**
   * 给url加上给定的参数
   * @param {Object} paras 参数对象，是一个键值对对象
   * @return {String} 添加了给定参数的url
   */
  appendQuery: function appendQuery(paras) {
    return BI.appendQuery(this, paras);
  },

  /**
   * 将所有符合第一个字符串所表示的字符串替换成为第二个字符串
   * @param {String} s1 要替换的字符串的正则表达式
   * @param {String} s2 替换的结果字符串
   * @returns {String} 替换后的字符串
   */
  replaceAll: function replaceAll(s1, s2) {
    return BI.replaceAll(this, s1, s2);
  },

  /**
   * 总是让字符串以指定的字符开头
   * @param {String} start 指定的字符
   * @returns {String} 以指定字符开头的字符串
   */
  perfectStart: function perfectStart(start) {
    return BI.perfectStart(this, start);
  },

  /**
   * 获取字符串中某字符串的所有项位置数组
   * @param {String} sub 子字符串
   * @return {Number[]} 子字符串在父字符串中出现的所有位置组成的数组
   */
  allIndexOf: function allIndexOf(sub) {
    return BI.allIndexOf(this, sub);
  }
});

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  BI.extend(BI, {
    /**
     * same with Window.open()
     * @param strUrl
     * @param strWindowName
     * @param windowFeatures
     * @returns {Window}
     */
    openWindow: function openWindow(strUrl, strWindowName, windowFeatures) {
      var windowObjectReference = null;

      try {
        windowObjectReference = window.top.open.apply(window.top, arguments);
      } catch (e) {
        windowObjectReference = window.open.apply(window, arguments);
      }

      return windowObjectReference;
    }
  });
}();

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var MD5 = function MD5(hexcase) {
    this.hexcase = !hexcase ? 0 : 1;
    /* hex output format. 0 - lowercase; 1 - uppercase */

    this.b64pad = "";
    /* base-64 pad character. "=" for strict RFC compliance */

    this.chrsz = 8;
    /* bits per input character. 8 - ASCII; 16 - Unicode */
  };
  /*
  * These are the functions you'll usually want to call
  * They take string arguments and return either hex or base-64 encoded strings
  */


  MD5.prototype.hex_md5 = function (s) {
    return this.binl2hex(this.core_md5(this.str2binl(s), s.length * this.chrsz));
  };

  MD5.prototype.hex_md5_salt = function (s) {
    var md5ed = this.hex_md5(s);
    var items1 = [];
    var items2 = [];

    for (var i = 0; i < md5ed.length; i++) {
      if (i % 2 === 0) {
        items1.push(md5ed.charAt(i));
      } else {
        items2.push(md5ed.charAt(i));
      }
    }

    var result = ":" + items1.join("") + items2.join("");
    return result;
  };

  MD5.prototype.b64_md5 = function (s) {
    return this.binl2b64(this.core_md5(this.str2binl(s), s.length * this.chrsz));
  };

  MD5.prototype.hex_hmac_md5 = function (key, data) {
    return this.binl2hex(this.core_hmac_md5(key, data));
  };

  MD5.prototype.b64_hmac_md5 = function (key, data) {
    return this.binl2b64(this.core_hmac_md5(key, data));
  };
  /* Backwards compatibility - same as hex_md5() */


  MD5.prototype.calcMD5 = function (s) {
    return this.binl2hex(this.core_md5(this.str2binl(s), s.length * this.chrsz));
  };

  MD5.prototype.core_md5 = function (x, len) {
    /* append padding */
    x[len >> 5] |= 0x80 << len % 32;
    x[(len + 64 >>> 9 << 4) + 14] = len;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;

    for (var i = 0; i < x.length; i += 16) {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;
      a = this.md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
      d = this.md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
      c = this.md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
      b = this.md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
      a = this.md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
      d = this.md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
      c = this.md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
      b = this.md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
      a = this.md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
      d = this.md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
      c = this.md5_ff(c, d, a, b, x[i + 10], 17, -42063);
      b = this.md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
      a = this.md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
      d = this.md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
      c = this.md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
      b = this.md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
      a = this.md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
      d = this.md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
      c = this.md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
      b = this.md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
      a = this.md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
      d = this.md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
      c = this.md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
      b = this.md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
      a = this.md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
      d = this.md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
      c = this.md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
      b = this.md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
      a = this.md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
      d = this.md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
      c = this.md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
      b = this.md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
      a = this.md5_hh(a, b, c, d, x[i + 5], 4, -378558);
      d = this.md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
      c = this.md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
      b = this.md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
      a = this.md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
      d = this.md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
      c = this.md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
      b = this.md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
      a = this.md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
      d = this.md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
      c = this.md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
      b = this.md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
      a = this.md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
      d = this.md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
      c = this.md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
      b = this.md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
      a = this.md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
      d = this.md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
      c = this.md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
      b = this.md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
      a = this.md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
      d = this.md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
      c = this.md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
      b = this.md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
      a = this.md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
      d = this.md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
      c = this.md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
      b = this.md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
      a = this.md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
      d = this.md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
      c = this.md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
      b = this.md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
      a = this.safe_add(a, olda);
      b = this.safe_add(b, oldb);
      c = this.safe_add(c, oldc);
      d = this.safe_add(d, oldd);
    }

    return Array(a, b, c, d);
  };
  /*
  * These functions implement the four basic operations the algorithm uses.
  */


  MD5.prototype.md5_cmn = function (q, a, b, x, s, t) {
    return this.safe_add(this.bit_rol(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);
  };

  MD5.prototype.md5_ff = function (a, b, c, d, x, s, t) {
    return this.md5_cmn(b & c | ~b & d, a, b, x, s, t);
  };

  MD5.prototype.md5_gg = function (a, b, c, d, x, s, t) {
    return this.md5_cmn(b & d | c & ~d, a, b, x, s, t);
  };

  MD5.prototype.md5_hh = function (a, b, c, d, x, s, t) {
    return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);
  };

  MD5.prototype.md5_ii = function (a, b, c, d, x, s, t) {
    return this.md5_cmn(c ^ (b | ~d), a, b, x, s, t);
  };
  /*
  * Calculate the HMAC-MD5, of a key and some data
  */


  MD5.prototype.core_hmac_md5 = function (key, data) {
    var bkey = this.str2binl(key);

    if (bkey.length > 16) {
      bkey = this.core_md5(bkey, key.length * this.chrsz);
    }

    var ipad = Array(16),
        opad = Array(16);

    for (var i = 0; i < 16; i++) {
      ipad[i] = bkey[i] ^ 0x36363636;
      opad[i] = bkey[i] ^ 0x5C5C5C5C;
    }

    var hash = this.core_md5(ipad.concat(this.str2binl(data)), 512 + data.length * this.chrsz);
    return this.core_md5(opad.concat(hash), 512 + 128);
  };
  /*
  * Add integers, wrapping at 2^32. This uses 16-bit operations internally
  * to work around bugs in some JS interpreters.
  */


  MD5.prototype.safe_add = function (x, y) {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 0xFFFF;
  };
  /*
  * Bitwise rotate a 32-bit number to the left.
  */


  MD5.prototype.bit_rol = function (num, cnt) {
    return num << cnt | num >>> 32 - cnt;
  };
  /*
  * Convert a string to an array of little-endian words
  * If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
  */


  MD5.prototype.str2binl = function (str) {
    var bin = Array();
    var mask = (1 << this.chrsz) - 1;

    for (var i = 0; i < str.length * this.chrsz; i += this.chrsz) {
      bin[i >> 5] |= (str.charCodeAt(i / this.chrsz) & mask) << i % 32;
    }

    return bin;
  };
  /*
  * Convert an array of little-endian words to a hex string.
  */


  MD5.prototype.binl2hex = function (binarray) {
    var hex_tab = this.hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    var str = "";

    for (var i = 0; i < binarray.length * 4; i++) {
      str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);
    }

    return str;
  };
  /*
  * Convert an array of little-endian words to a base-64 string
  */


  MD5.prototype.binl2b64 = function (binarray) {
    var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var str = "";

    for (var i = 0; i < binarray.length * 4; i += 3) {
      var triplet = (binarray[i >> 2] >> 8 * (i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4) & 0xFF;

      for (var j = 0; j < 4; j++) {
        if (i * 8 + j * 6 > binarray.length * 32) {
          str += this.b64pad;
        } else {
          str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);
        }
      }
    }

    return str;
  };

  BI.MD5 = new MD5();
}();

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var DECRYPT = 0;
  var ROUND = 32;
  var BLOCK = 16; // S盒

  var Sbox = [0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05, 0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62, 0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6, 0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8, 0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35, 0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87, 0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e, 0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1, 0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3, 0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f, 0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51, 0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8, 0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0, 0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84, 0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48]; // 固定参数 CK

  var CK = [0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269, 0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9, 0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249, 0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9, 0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229, 0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299, 0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209, 0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279];
  var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

  function rotl(x, y) {
    return x << y | x >>> 32 - y;
  }

  function byteSub(a) {
    return (Sbox[a >>> 24 & 0xFF] & 0xFF) << 24 | (Sbox[a >>> 16 & 0xFF] & 0xFF) << 16 | (Sbox[a >>> 8 & 0xFF] & 0xFF) << 8 | Sbox[a & 0xFF] & 0xFF;
  }

  function l1(b) {
    return b ^ rotl(b, 2) ^ rotl(b, 10) ^ rotl(b, 18) ^ rotl(b, 24);
  }

  function l2(b) {
    return b ^ rotl(b, 13) ^ rotl(b, 23);
  }

  function sms4Crypt(input, output, roundKey) {
    var r;
    var mid;
    var x = new Array(4);
    var tmp = new Array(4);

    for (var i = 0; i < 4; i++) {
      tmp[0] = input[0 + 4 * i] & 0xff;
      tmp[1] = input[1 + 4 * i] & 0xff;
      tmp[2] = input[2 + 4 * i] & 0xff;
      tmp[3] = input[3 + 4 * i] & 0xff;
      x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3];
    }

    for (r = 0; r < 32; r += 4) {
      mid = x[1] ^ x[2] ^ x[3] ^ roundKey[r + 0];
      mid = byteSub(mid);
      x[0] = x[0] ^ l1(mid); // x4

      mid = x[2] ^ x[3] ^ x[0] ^ roundKey[r + 1];
      mid = byteSub(mid);
      x[1] = x[1] ^ l1(mid); // x5

      mid = x[3] ^ x[0] ^ x[1] ^ roundKey[r + 2];
      mid = byteSub(mid);
      x[2] = x[2] ^ l1(mid); // x6

      mid = x[0] ^ x[1] ^ x[2] ^ roundKey[r + 3];
      mid = byteSub(mid);
      x[3] = x[3] ^ l1(mid); // x7
    } // Reverse


    for (var j = 0; j < 16; j += 4) {
      output[j] = x[3 - j / 4] >>> 24 & 0xff;
      output[j + 1] = x[3 - j / 4] >>> 16 & 0xff;
      output[j + 2] = x[3 - j / 4] >>> 8 & 0xff;
      output[j + 3] = x[3 - j / 4] & 0xff;
    }
  }
  /**
  * 密钥扩展算法
  * @param key
  * @param roundKey
  * @param cryptFlag
  */


  function sms4KeyExt(key, roundKey, cryptFlag) {
    var r;
    var mid;
    var x = new Array(4);
    var tmp = new Array(4);

    for (var i = 0; i < 4; i++) {
      tmp[0] = key[0 + 4 * i] & 0xff;
      tmp[1] = key[1 + 4 * i] & 0xff;
      tmp[2] = key[2 + 4 * i] & 0xff;
      tmp[3] = key[3 + 4 * i] & 0xff;
      x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3];
    }

    x[0] ^= 0xa3b1bac6;
    x[1] ^= 0x56aa3350;
    x[2] ^= 0x677d9197;
    x[3] ^= 0xb27022dc;

    for (r = 0; r < 32; r += 4) {
      mid = x[1] ^ x[2] ^ x[3] ^ CK[r + 0];
      mid = byteSub(mid);
      roundKey[r + 0] = x[0] ^= l2(mid); // roundKey0 = K4

      mid = x[2] ^ x[3] ^ x[0] ^ CK[r + 1];
      mid = byteSub(mid);
      roundKey[r + 1] = x[1] ^= l2(mid); // roundKey1 = K5

      mid = x[3] ^ x[0] ^ x[1] ^ CK[r + 2];
      mid = byteSub(mid);
      roundKey[r + 2] = x[2] ^= l2(mid); // roundKey2 = K6

      mid = x[0] ^ x[1] ^ x[2] ^ CK[r + 3];
      mid = byteSub(mid);
      roundKey[r + 3] = x[3] ^= l2(mid); // roundKey3 = K7
    } // 解密时轮密钥使用顺序：roundKey31, roundKey30, ..., roundKey0


    if (cryptFlag === DECRYPT) {
      for (r = 0; r < 16; r++) {
        mid = roundKey[r];
        roundKey[r] = roundKey[31 - r];
        roundKey[31 - r] = mid;
      }
    }
  }

  function sm4(inArray, key, cryptFlag) {
    var outArray = [];
    var point = 0;
    var roundKey = new Array(ROUND);
    sms4KeyExt(key, roundKey, cryptFlag);
    var input = new Array(16);
    var output = new Array(16);
    var inLen = inArray.length;

    while (inLen >= BLOCK) {
      input = inArray.slice(point, point + 16);
      sms4Crypt(input, output, roundKey);

      for (var i = 0; i < BLOCK; i++) {
        outArray[point + i] = output[i];
      }

      inLen -= BLOCK;
      point += BLOCK;
    }

    return outArray;
  }
  /**
  * 填充
  * @param input 输入
  * @param cryptFlag
  * @returns {*}
  */


  function padding(input, cryptFlag) {
    if (cryptFlag === DECRYPT) {
      return input.slice(0, input.lastIndexOf(0x80));
    }

    var paddingLen = 16 - input.length % 16;

    if (paddingLen > 0) {
      input.push(0x80);
    }

    for (var i = 0; i < paddingLen - 1; i++) {
      input.push(0x00);
    }

    return input;
  }
  /**
  * 字符串转bytes
  * @param str
  * @returns {[]}
  */


  function utf8StrToBytes(str) {
    var input = unescape(encodeURIComponent(str));
    var words = [];

    for (var i = 0; i < input.length; i++) {
      words[i] = input.charCodeAt(i);
    }

    return words;
  }
  /**
  * bytes转字符串
  * @param arr
  * @returns {string}
  */


  function arrayToUtf8(arr) {
    var utf8Byte = arr;
    var latin1Chars = [];

    for (var i = 0; i < utf8Byte.length; i++) {
      latin1Chars.push(String.fromCharCode(utf8Byte[i]));
    }

    return decodeURIComponent(escape(latin1Chars.join("")));
  }
  /**
  * btoa方法
  * base64编码
  * https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/btoa
  * @param string
  * @returns {string|string}
  */


  function encode(string) {
    string = String(string);
    var bitmap,
        a,
        b,
        c,
        result = "",
        i = 0,
        rest = string.length % 3; // To determine the final padding

    for (; i < string.length;) {
      if ((a = string.charCodeAt(i++)) > 255 || (b = string.charCodeAt(i++)) > 255 || (c = string.charCodeAt(i++)) > 255) {
        throw new TypeError("Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.");
      }

      bitmap = a << 16 | b << 8 | c;
      result += b64.charAt(bitmap >> 18 & 63) + b64.charAt(bitmap >> 12 & 63) + b64.charAt(bitmap >> 6 & 63) + b64.charAt(bitmap & 63);
    } // If there's need of padding, replace the last 'A's with equal signs


    return rest ? result.slice(0, rest - 3) + "===".substring(rest) : result;
  }
  /**
  * atob方法
  * base64解码
  * https://github.com/MaxArt2501/base64-js/blob/master/base64.js#L54
  * @param string
  * @returns {string}
  */


  function decode(str) {
    // atob can work with strings with whitespaces, even inside the encoded part,
    // but only \t, \n, \f, \r and ' ', which can be stripped.
    str = String(str).replace(/[\t\n\f\r ]+/g, "");

    if (!/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/.test(str)) {
      throw new TypeError("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");
    } // Adding the padding if missing, for semplicity


    str += "==".slice(2 - (str.length & 3));
    var bitmap,
        result = "",
        r1,
        r2,
        i = 0;

    for (; i < str.length;) {
      bitmap = b64.indexOf(str.charAt(i++)) << 18 | b64.indexOf(str.charAt(i++)) << 12 | (r1 = b64.indexOf(str.charAt(i++))) << 6 | (r2 = b64.indexOf(str.charAt(i++)));
      result += r1 === 64 ? String.fromCharCode(bitmap >> 16 & 255) : r2 === 64 ? String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255) : String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255, bitmap & 255);
    }

    return result;
  }
  /**
  * byte数组转base64字符串
  * @param buffer
  * @returns {string}
  */


  function arrayBuffer2Base64(buffer) {
    var binary = "";
    var len = buffer.length;

    for (var i = 0; i < len; i++) {
      binary += String.fromCharCode(buffer[i]);
    }

    return encode(binary);
  }
  /**
  * base64字符串转byte数组
  * @param str
  * @returns {[]}
  */


  function base642ArrayBuffer(str) {
    var input = decode(str);
    var arr = [];

    for (var i = 0; i < input.length; i++) {
      arr[i] = input.charCodeAt(i);
    }

    return arr;
  }
  /**
  * 16进制字符串转数组
  * @param hex
  * @returns {[]}
  */


  function hex2Array(hex) {
    var arr = [];

    for (var i = 0; i < hex.length; i += 2) {
      arr.push(parseInt(hex.substr(i, 2), 16));
    }

    return arr;
  }

  var SM4 = function SM4() {
    /**
    * 国密sm4算法 ecb模式加密
    * @param str 明文字符串
    * @param key 长度为16位的16进制字符串
    * @returns {string} 密文字符串
    */
    this.ecbEncrypt = function (str, key) {
      if (key.length !== 32 || /[^0-9a-fA-F]/.test(key)) {
        throw new Error("key error");
      }

      return arrayBuffer2Base64(sm4(padding(utf8StrToBytes(str)), hex2Array(key), 1));
    };
    /**
    * 国密sm4算法 ecb模式解密
    * @param str 密文字符串
    * @param key 长度为16位的16进制字符串
    * @returns {string} 明文字符串
    */


    this.ecbDecrypt = function (str, key) {
      if (key.length !== 32 || /[^0-9a-fA-F]/.test(key)) {
        throw new Error("key error");
      }

      return arrayToUtf8(padding(sm4(base642ArrayBuffer(str), hex2Array(key), 0), 0));
    };
  };

  BI.SM4 = new SM4();
}();

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 校验器
 * qcc
 * 2019/12/23
 */
!function () {
  // 一些规则参考，实际使用覆盖掉
  var ruleMap = {
    required: {
      message: "required",
      validate: function validate(value) {
        return BI.isNotEmptyString(value) || BI.isNotEmptyArray(value) || BI.isNotEmptyObject(value);
      }
    },
    range: {
      validate: function validate(value, pars) {
        if (BI.isNumeric(value)) {
          return value >= pars.min && value <= pars.max;
        } else if (BI.isString(value)) {
          return BI.size(value) >= pars.min && BI.size(value) <= pars.max;
        }

        return false;
      },
      message: "not in range",
      expects: ["min", "max"]
    },
    min: {
      message: "not min",
      validate: function validate(value, pars) {
        return BI.size(value) >= pars.value;
      },
      expects: ["value"]
    },
    max: {
      message: function message(value, pars) {
        return value + " max than " + pars.value;
      },
      validate: function validate(value, pars) {
        return BI.size(value) <= pars.value;
      },
      expects: ["value"]
    },
    equal: {
      message: "not equal",
      validate: function validate(value, pars) {
        return BI.isEqual(value, pars.value);
      },
      expects: ["value"]
    },
    regex: {
      message: "not match",
      validate: function validate(value, pars) {
        if (BI.isRegExp(pars.value)) {
          return pars.value.test(value);
        }

        _global.console && console.error(pars.value + " is not a valid regular expression");
      },
      expects: ["value"]
    }
  };
  /**
   * 执行校验
   * @param value
   * @param rules
   * @param stop
   * @returns {{approved: boolean, errors: Array, rules: {}}}
   * @private
   */

  function _start(value, rules, stop) {
    var result = {
      approved: true,
      errors: [],
      rules: {}
    };
    BI.each(rules, function (ruleName, rule) {
      if (stop && !result.approved) {
        return false;
      }

      if (BI.has(ruleMap, ruleName)) {
        if (rule === false) {
          return;
        }

        var args = _getArgs(rule, ruleMap[ruleName]),
            res = ruleMap[ruleName].validate(value, args);

        var errMsg = BI.has(rule, "message") ? rule.message : ruleMap[ruleName].message;
        errMsg = BI.isFunction(errMsg) ? errMsg(value, args) : errMsg; // errMsg = BI.i18nText.apply(BI, [errMsg].concat(BI.values(args)));

        result["rules"][ruleName] = {
          approved: res,
          errors: res ? "" : errMsg
        };

        if (!res) {
          result.errors.push(errMsg);
          result.approved = false;
        }
      } else {
        _global.console && console.error(ruleName + " is not support");
      }
    });
    return result;
  }
  /**
   * 获取校验方法的参数
   * @param constraint
   * @param rule
   * @private
   */


  function _getArgs(constraint, rule) {
    var pars = {},
        options = rule.options,
        expects = rule.expects,
        len = BI.size(expects);

    if (BI.isNotEmptyArray(expects)) {
      BI.each(expects, function (i, expect) {
        if (BI.has(constraint, expect)) {
          pars[expect] = constraint[expect];
        } else if (len <= 1 && (BI.isKey(constraint) || BI.isRegExp(constraint))) {
          pars[expect] = constraint;
        } else if (len <= 1 && BI.isFunction(constraint)) {
          pars[expect] = constraint();
        } else {
          _global.console && console.error("expects the " + expects + " parameter");
        }
      });
    }

    if (BI.isNotEmptyArray(options)) {
      BI.each(options, function (i, option) {
        if (BI.has(constraint, option)) {
          pars[option] = constraint[option];
        }
      });
    }

    return pars;
  }

  var validator = function validator() {
    /**
     * 初始化规则
     * 定义统一的规则
     * @param rules
     */
    this.init = function (rules) {
      ruleMap = BI.extend(ruleMap, rules);
    };
    /**
     * 校验是否符合规则
     * @param val: any 校验值
     * @param rules: Object 规则
     * @param stop: boolean 是否出现错误就停止
     * @returns {{approved: boolean, errors: Array, rules: {}}}
     */


    this.validate = function (val, rules, stop) {
      if (BI.isObject(rules)) {
        return _start(val, rules, stop);
      }
    };
    /**
     * 添加校验规则，不能覆盖已有规则
     * @param name: string 规则名称
     * @param rule: Object 规则
     */


    this.addRule = function (name, rule) {
      if (BI.has(ruleMap, name)) {
        _global.console && console.error("rule:[" + name + "] has been registed");
        return;
      }

      ruleMap[name] = rule;
    };
  };

  BI.validator = new validator();
}();

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by lei.wang on 2018/11/2.
 */
(function () {
  BI.SearchIconTextValueCombo = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-material-search-icon-text-value-combo",
      height: 24,
      text: "",
      items: [],
      iconCls: "",
      tipType: "",
      warningTitle: "",
      attributes: {
        tabIndex: 0
      }
    },
    render: function render() {
      var self = this,
          o = this.options;
      return {
        type: "bi.absolute",
        items: [{
          el: {
            type: "bi.combo",
            container: o.container,
            adjustLength: 2,
            toggle: false,
            ref: function ref() {
              self.combo = this;
            },
            el: {
              type: "bi.material.search_icon_text_value_trigger",
              simple: o.simple,
              cls: "search-text-value-trigger",
              ref: function ref() {
                self.trigger = this;
              },
              items: o.items,
              height: o.height - (o.simple ? 1 : 2),
              text: o.text,
              value: o.value,
              tipType: o.tipType,
              iconCls: o.iconCls,
              warningTitle: o.warningTitle,
              title: o.title,
              listeners: [{
                eventName: BI.SearchTextValueTrigger.EVENT_CHANGE,
                action: function action() {
                  self.setValue(this.getValue());
                  self.combo.hideView();
                  self.fireEvent("EVENT_CHANGE");
                }
              }]
            },
            popup: {
              el: {
                type: "bi.icon_text_value_combo_popup",
                chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
                value: o.value,
                items: o.items,
                ref: function ref() {
                  self.popup = this;
                  self.trigger.getSearcher().setAdapter(self.popup);
                },
                listeners: [{
                  eventName: BI.TextValueComboPopup.EVENT_CHANGE,
                  action: function action() {
                    self.setValue(this.getValue());
                    self.combo.hideView();
                    self.fireEvent("EVENT_CHANGE");
                  }
                }]
              },
              maxHeight: 252
            },
            listeners: [{
              eventName: BI.Combo.EVENT_AFTER_HIDEVIEW,
              action: function action() {
                self.trigger.stopEditing();
              }
            }, {
              eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
              action: function action() {
                self.fireEvent("EVENT_BEFORE_POPUPVIEW");
              }
            }],
            hideChecker: function hideChecker(e) {
              return self.triggerBtn.element.find(e.target).length === 0;
            }
          },
          left: 0,
          right: 0,
          bottom: 0,
          top: 0
        }, {
          el: {
            type: "bi.trigger_icon_button",
            cls: "trigger-icon-button",
            ref: function ref() {
              self.triggerBtn = this;
            },
            width: o.height,
            height: o.height,
            handler: function handler() {
              if (self.combo.isViewVisible()) {
                self.combo.hideView();
              } else {
                self.combo.showView();
              }
            }
          },
          right: 0,
          bottom: 0,
          top: 0
        }]
      };
    },
    mounted: function mounted() {
      var o = this.options;

      if (BI.isKey(o.value)) {
        this._checkError(o.value);
      }
    },
    _checkError: function _checkError(v) {
      if (BI.isNotNull(v)) {
        v = BI.isArray(v) ? v : [v];
        var result = BI.find(this.options.items, function (idx, item) {
          return BI.contains(v, item.value);
        });

        if (BI.isNull(result)) {
          this.element.removeClass("combo-error").addClass("combo-error");
          this.trigger.attr("tipType", "warning");
        } else {
          this.element.removeClass("combo-error");
          this.trigger.attr("tipType", "success");
        }
      }
    },
    populate: function populate(items) {
      this.options.items = items;
      this.combo.populate(items);
    },
    setValue: function setValue(v) {
      this.combo.setValue(v);

      this._checkError(v);
    },
    getValue: function getValue() {
      var value = this.popup.getValue();
      return BI.isNull(value) ? [] : BI.isArray(value) ? value : [value];
    }
  });
  BI.shortcut("bi.material.search_icon_text_value_combo", BI.SearchIconTextValueCombo);
})();

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by lei.wang on 2018/11/2.
 */
(function () {
  var Trigger = BI.inherit(BI.Trigger, {
    props: function props(opt) {
      return {
        extraCls: "bi-material-search-icon-text-trigger " + (opt.simple ? "bi-border-bottom" : "bi-border"),
        height: 24
      };
    },
    render: function render() {
      var self = this,
          o = this.options;

      var iconCls = this._digistIcon(o.value, o.items);

      return {
        type: "bi.htape",
        items: [{
          el: {
            type: "bi.icon_change_button",
            cls: "icon-combo-trigger-icon",
            iconCls: iconCls,
            ref: function ref(_ref) {
              self.icon = _ref;
            },
            disableSelected: true
          },
          vgap: 3,
          width: !BI.isKey(iconCls) ? 0 : o.iconWrapperWidth || o.height
        }, {
          el: {
            type: "bi.searcher",
            ref: function ref() {
              self.searcher = this;
            },
            isAutoSearch: false,
            el: {
              type: "bi.state_editor",
              ref: function ref() {
                self.editor = this;
              },
              defaultText: this._getText(),
              text: o.text,
              value: o.value,
              height: o.height,
              tipText: ""
            },
            popup: {
              type: "bi.icon_text_value_combo_popup",
              cls: "bi-card",
              chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE
            },
            onSearch: function onSearch(obj, callback) {
              var keyword = obj.keyword;
              var finding = BI.Func.getSearchResult(o.items, keyword);
              var matched = finding.match,
                  find = finding.find;
              var items = BI.concat(find, matched);
              callback(items);
            },
            listeners: [{
              eventName: BI.Searcher.EVENT_CHANGE,
              action: function action() {
                self.fireEvent("EVENT_CHANGE");
              }
            }]
          }
        }, {
          el: {
            type: "bi.layout",
            width: 24
          },
          width: 24
        }],
        ref: function ref(_ref) {
          self.wrapper = _ref;
        }
      };
    },
    _setState: function _setState(v) {
      this.editor.setState(v);
    },
    _getText: function _getText() {
      var o = this.options;
      return BI.isKey(o.value) && o.text === this._digest(o.value, o.items) ? "" : o.text;
    },
    _digest: function _digest(vals, items) {
      var o = this.options;
      vals = BI.isArray(vals) ? vals : [vals];
      var result = [];
      var formatItems = BI.Tree.transformToArrayFormat(items);
      BI.each(formatItems, function (i, item) {
        if (BI.deepContains(vals, item.value) && !BI.contains(result, item.text || item.value)) {
          result.push(item.text || item.value);
        }
      });

      if (result.length > 0) {
        return result.join(",");
      }

      return o.text;
    },
    _digistIcon: function _digistIcon(vals, items) {
      var o = this.options;
      vals = BI.isArray(vals) ? vals : [vals];
      var result;
      var formatItems = BI.Tree.transformToArrayFormat(items);
      BI.any(formatItems, function (i, item) {
        if (BI.deepContains(vals, item.value)) {
          result = {
            text: item.text || item.value,
            iconCls: item.iconCls
          };
          return true;
        }
      });

      if (BI.isNotNull(result)) {
        return result.iconCls;
      }

      return o.iconCls;
    },
    stopEditing: function stopEditing() {
      this.searcher.stopSearch();
    },
    getSearcher: function getSearcher() {
      return this.searcher;
    },
    populate: function populate(items) {
      this.options.items = items;
    },
    setValue: function setValue(vals) {
      var iconCls = this._digistIcon(vals, this.options.items);

      this.setIcon(iconCls);

      this._setState(this._digest(vals, this.options.items));
    },
    setIcon: function setIcon(iconCls) {
      var o = this.options;
      this.icon.setIcon(iconCls);
      var iconItem = this.wrapper.attr("items")[0];

      if (!BI.isKey(iconCls)) {
        if (iconItem.width !== 0) {
          iconItem.width = 0;
          this.wrapper.resize();
        }
      } else {
        if (iconItem.width !== (o.iconWrapperWidth || o.height)) {
          iconItem.width = o.iconWrapperWidth || o.height;
          this.wrapper.resize();
        }
      }
    },
    getValue: function getValue() {
      return this.searcher.getValue();
    }
  });
  BI.shortcut("bi.material.search_icon_text_value_trigger", Trigger);
})();

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *@desc  全屏操作控制器
 *@author dailer
 *@date 2018/09/29
 */
!function () {
  BI.FullScreenController = BI.inherit(BI.Controller, {
    props: {},
    _init: function _init() {
      BI.FullScreenController.superclass._init.apply(this, arguments);

      this.exitHandlers = [];
    },
    requestFullScreen: function requestFullScreen(target, complete, exitHandler) {
      if (BI.isNull(this.support)) {
        this.support = this._checkSupportScreenHandler();
      }

      if (!this.support) {
        BI.Msg.toast(BI.i18nText("fullscreen api not support"), {
          level: "error"
        });
        complete(false);
        return;
      }

      if (BI.isWidget(target)) {
        target = target.element[0];
      }

      this._launchFullScreen(target, exitHandler);

      complete.call(this, true);
    },
    //  获取当前全屏的元素
    getFullScreenElement: function getFullScreenElement() {
      return document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || null;
    },
    //  是否全屏
    isFullScreen: function isFullScreen(doc) {
      doc = doc || document;
      return !!(doc.fullscreenElement || doc.webkitFullscreenElement || doc.mozFullScreenElement || doc.msFullscreenElement || null);
    },
    //  退出全屏
    exitFullScreen: function exitFullScreen() {
      this._existFullscreenHandler();

      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      }

      BI.each(this.exitHandlers, function (index, handler) {
        BI.isFunction(handler) && handler();
      });
      return this;
    },
    _launchFullScreen: function _launchFullScreen(element, exitHandler) {
      var self = this;

      if (element.requestFullscreen) {
        element.requestFullscreen();
      } else if (element.mozRequestFullScreen) {
        element.mozRequestFullScreen();
      } else if (element.msRequestFullscreen) {
        element.msRequestFullscreen();
      } else if (element.webkitRequestFullscreen) {
        element.webkitRequestFullScreen();
      }

      BI.$(element).addClass("bi-fullscreen-element");
      this.fullscreenElement = element; //  解决按esc键的状态问题

      BI.$(document).bind("fullscreenchange webkitfullscreenchange mozfullscreenchange MSFullscreenChange", function () {
        if (!self.isFullScreen()) {
          BI.isFunction(exitHandler) && exitHandler();
          self.exitHandlers = [];

          self._existFullscreenHandler();

          BI.$(document).unbind("fullscreenchange webkitfullscreenchange mozfullscreenchange MSFullscreenChange");
        }
      });
    },
    _checkSupportScreenHandler: function _checkSupportScreenHandler() {
      var requestFullScreen;

      if (document.body) {
        requestFullScreen = document.body.requestFullscreen || document.body.webkitRequestFullscreen || document.body.mozRequestFullScreen || document.body.msRequestFullscreen;
      }

      var fullscreenEnabled = document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      return !!(requestFullScreen && fullscreenEnabled);
    },
    _existFullscreenHandler: function _existFullscreenHandler() {
      var element = this.getFullScreenElement() || this.fullscreenElement;

      if (element) {
        BI.$(element).removeClass("bi-fullscreen-element");
      }

      this.fullscreenElement = null;
    }
  });
  BI.FullScreen = new BI.FullScreenController();
}();

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 过滤条件抽象类
 *
 * @class BI.AbstractFilterItem
 * @extend BI.Widget
 */
BI.AbstractFilterItem = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-filter-item bi-border-right bi-border-bottom"
  },
  isSelectedCondition: function isSelectedCondition() {
    return this.emptyItem && this.emptyItem.isVisible();
  },
  setSelectedCondition: function setSelectedCondition(b) {
    if (b) {
      if (!this.emptyItem) {
        this.emptyItem = BI.createWidget({
          type: "bi.absolute",
          height: 40,
          cls: "filter-item-empty-item bi-border-top",
          items: [{
            el: {
              type: "bi.center_adapt",
              cls: "empty-filter-item-leaf"
            }
          }],
          hgap: 10,
          vgap: 5
        });
        BI.createWidget({
          type: "bi.vertical",
          element: this,
          items: [this.emptyItem],
          scrolly: false
        });
      }
    }

    this.emptyItem && this.emptyItem.setVisible(b);
  }
});
BI.extend(BI.AbstractFilterItem, {
  FILTER_OPERATION_FORMULA: 1,
  FILTER_OPERATION_CONDITION: 2,
  FILTER_OPERATION_CONDITION_AND: 3,
  FILTER_OPERATION_CONDITION_OR: 4,
  FILTER_OPERATION_FORMULA_AND: 5,
  FILTER_OPERATION_FORMULA_OR: 6,
  FILTER_OPERATION_SHAKE: 7
});

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by Urthur on 2017/11/21.
 */
!function () {
  BI.AndOrFilterExpander = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-filter-expander",
      el: {},
      popup: {}
    },
    render: function render() {
      var self = this,
          o = this.options;
      return {
        type: "bi.filter_expander",
        switchable: o.switchable,
        el: o.el,
        popup: o.popup,
        id: o.id,
        value: o.value,
        listeners: [{
          eventName: BI.Controller.EVENT_CHANGE,
          action: function action() {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
          }
        }],
        ref: function ref(_ref) {
          self.expander = _ref;
        }
      };
    },
    populate: function populate() {
      this.expander.populate.apply(this.expander, arguments);
    },
    getValue: function getValue() {
      var val = this.expander.getValue();
      return {
        filterType: val.type,
        filterValue: val.value,
        id: val.id
      };
    }
  });
  BI.shortcut("bi.and.or.filter.expander", BI.AndOrFilterExpander);
}();

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @class BI.FilterExpander
 * @extend BI.AbstractFilterItem
 * 过滤树的一个expander节点
 */
!function () {
  var FilterExpander = BI.inherit(BI.AbstractFilterItem, {
    _constant: {
      EXPANDER_WIDTH: 30
    },
    props: {
      baseCls: "bi-filter-expander-item bi-filter-expander bi-border-left bi-border-bottom",
      el: {},
      popup: {},
      switchable: true
    },
    render: function render() {
      var self = this,
          o = this.options;
      var value = o.el.value;
      return {
        type: "bi.horizontal_adapt",
        cls: "filter-item-empty-item",
        horizontalAlign: BI.HorizontalAlign.Stretch,
        columnSize: [this._constant.EXPANDER_WIDTH, "fill"],
        verticalAlign: BI.VerticalAlign.Middle,
        items: [{
          type: "bi.absolute",
          cls: "filter-item-expander-wrapper",
          items: [{
            el: {
              type: "bi.text_button",
              $testId: "bi-materials-filter-and-or-expander",
              cls: "condition-and-or",
              text: this._getText(value),
              value: value,
              id: o.id,
              width: this._constant.EXPANDER_WIDTH,
              height: "100%",
              ref: function ref(_ref) {
                self.expander = _ref;
              },
              listeners: [{
                eventName: BI.TextButton.EVENT_CHANGE,
                action: function action() {
                  self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CLICK, "", self);
                }
              }]
            },
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
          }, {
            el: {
              type: "bi.icon_button",
              invisible: !o.switchable,
              stopPropagation: true,
              cls: "change-and-or-font",
              title: BI.i18nText("BI-Basic_Switch"),
              handler: function handler() {
                self.switchText();
                self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CLICK, true, self);
              }
            },
            top: 10,
            width: 16,
            height: 16,
            left: 7
          }],
          width: this._constant.EXPANDER_WIDTH,
          height: "100%"
        }, BI.extend(o.popup, {
          ref: function ref(_ref) {
            self.conditionsView = _ref;
          },
          listeners: [{
            eventName: BI.Controller.EVENT_CHANGE,
            action: function action() {
              self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
            }
          }]
        })]
      };
    },
    _getText: function _getText(value) {
      var text = "";

      if (value === BI.Filter.FILTER_TYPE.AND) {
        text = BI.i18nText("BI-Basic_And");
      } else {
        text = BI.i18nText("BI-Basic_Or");
      }

      return text;
    },
    switchText: function switchText() {
      var value = this.expander.getValue() === BI.Filter.FILTER_TYPE.AND ? BI.Filter.FILTER_TYPE.OR : BI.Filter.FILTER_TYPE.AND;
      this.expander.setValue(value);
      this.expander.setText(this._getText(value));
    },
    getValue: function getValue() {
      return {
        type: this.expander.getValue(),
        value: this.conditionsView.getValue(),
        id: this.options.id
      };
    },
    populate: function populate() {
      this.conditionsView.populate.apply(this.conditionsView, arguments);
    }
  });
  BI.shortcut("bi.filter_expander", FilterExpander);
}();

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 过滤
 *
 * Created by GUY on 2015/11/20.
 * @class BI.Filter
 * @extend BI.Widget
 */
BI.Filter = BI.inherit(BI.Widget, {
  constants: {
    FIELD_TYPE_NUMBER: 1,
    FIELD_TYPE_STRING: 0,
    FIELD_TYPE_DATE: 2
  },
  props: {
    baseCls: "bi-filter",
    expander: {},
    items: [],
    el: {},
    itemCreator: BI.empty
  },
  _store: function _store() {
    return BI.Models.getModel("bi.model.material.filter");
  },
  watch: {
    shakeTree: function shakeTree() {
      this.shakeTree();
    }
  },
  render: function render() {
    var self = this,
        o = this.options;
    return BI.extend({
      type: "bi.filter_operation",
      addWarningTitle: o.addWarningTitle,
      expander: o.expander,
      listeners: [{
        eventName: "EVENT_OPERATION",
        action: function action(type) {
          switch (type) {
            case BI.AbstractFilterItem.FILTER_OPERATION_CONDITION:
              self.store.addCondition();

              self._addAndOrCondition(BI.Filter.FILTER_TYPE.EMPTY_CONDITION);

              break;

            case BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_AND:
              self.store.addAndCondition();

              self._addAndOrCondition(BI.Filter.FILTER_TYPE.EMPTY_CONDITION);

              break;

            case BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_OR:
              self.store.addOrCondition();

              self._addAndOrCondition(BI.Filter.FILTER_TYPE.EMPTY_CONDITION, 1);

              break;

            case BI.AbstractFilterItem.FILTER_OPERATION_FORMULA:
              self.store.addFormula();

              self._addAndOrCondition(BI.Filter.FILTER_TYPE.EMPTY_FORMULA);

              break;

            case BI.AbstractFilterItem.FILTER_OPERATION_FORMULA_AND:
              self.store.addAndFormula();

              self._addAndOrCondition(BI.Filter.FILTER_TYPE.EMPTY_FORMULA);

              break;

            case BI.AbstractFilterItem.FILTER_OPERATION_FORMULA_OR:
              self.store.addOrFormula();

              self._addAndOrCondition(BI.Filter.FILTER_TYPE.EMPTY_FORMULA, 1);

              break;

            case BI.AbstractFilterItem.FILTER_OPERATION_SHAKE:
              self.store.shakeTree();
              break;
          }
        }
      }, {
        eventName: "BI.FilterOperation.EVENT_DESTROY_ITEM",
        action: function action(id) {
          self._removeCondition(id);
        }
      }, {
        eventName: "EVENT_CLICK_EXPANDER",
        action: function action(type, value, obj) {
          self._switchConditionLink(obj);

          self._checkBeautifyLevelNecessary();

          self.fireEvent("EVENT_CHANGE");
        }
      }],
      ref: function ref(_ref) {
        self.filter = _ref;
      }
    }, o.el);
  },
  mounted: function mounted() {
    this.tree = new BI.Tree();
    this.tree.initTree(this.options.items);

    this._populate(this.tree.toJSONWithNode());
  },
  _checkBeautifyLevelNecessary: function _checkBeautifyLevelNecessary() {
    this.filter.setBeautifyButtonVisible(this._checkLevelStructure(this.tree.getRoot()));
  },
  _checkLevelStructure: function _checkLevelStructure(node, pnode) {
    var self = this;
    var children = node.getChildren();

    if (BI.isNotNull(pnode)) {
      var pdata = pnode.get("data"),
          data = node.get("data"); // 父子节点类型相同, 就是存在可合并类型，直接返回

      if (BI.isNotNull(pdata) && pdata.value === data.value) {
        return true;
      }
    }

    return BI.any(children, function (idx, child) {
      return self._checkLevelStructure(child, node);
    });
  },
  _switchConditionLink: function _switchConditionLink(obj) {
    var finded = this.tree.search(obj.attr("id"));

    if (BI.isNotNull(finded)) {
      var data = finded.get("data");
      data.value = data.value === BI.Filter.FILTER_TYPE.AND ? BI.Filter.FILTER_TYPE.OR : BI.Filter.FILTER_TYPE.AND;
    }
  },
  _createEmptyNode: function _createEmptyNode(type) {
    var node = new BI.Node(BI.UUID());
    node.set("data", {
      value: type
    });
    return node;
  },
  _insertAndOrCondition: function _insertAndOrCondition(id, formulaOrField, type) {
    var ANDOR = ["AND", "OR"];
    type || (type = 0);
    var finded = this.tree.search(id); // finded节点是selectItem的父节点

    if (BI.isNotNull(finded)) {
      var data = finded.get("data"); // 父亲的数据

      var parent = finded.getParent(); // 祖父节点

      var index = parent.getChildIndex(finded.id); // 父亲所在祖父下的索引

      var pdata = parent.get("data") || {}; // 祖父数据

      var node = this._createEmptyNode(formulaOrField);

      if (data.value === BI.Filter.FILTER_TYPE[ANDOR[type]]) {
        this.tree.addNode(finded, node); // 和父亲节点类型相同直接作为儿子节点添加进去

        return;
      }

      if (data.value === BI.Filter.FILTER_TYPE[ANDOR[1 - type]]) {
        // 相反
        if (pdata.value === BI.Filter.FILTER_TYPE[ANDOR[type]]) {
          // 但是和祖父相同
          parent.addChild(node, index + 1); // 作为父亲的兄弟，添加到父亲之后

          return;
        }
      } // 类型与父亲节点相反 && 和祖父节点不同(祖父有可能为空) 或者 与祖父节点相反 或者 祖父节点类型不是and且祖父节点不是or(为空)


      if (data.value === BI.Filter.FILTER_TYPE[ANDOR[1 - type]] && pdata.value !== BI.Filter.FILTER_TYPE[ANDOR[type]] || pdata.value === BI.Filter.FILTER_TYPE[ANDOR[1 - type]] || pdata.value !== BI.Filter.FILTER_TYPE.AND && pdata.value !== BI.Filter.FILTER_TYPE.OR) {
        var andor = new BI.Node(BI.UUID());
        andor.set("data", {
          value: BI.Filter.FILTER_TYPE[ANDOR[type]],
          children: [finded.get("data"), node.get("data")]
        });
        parent.removeChildByIndex(index); // 删除整个父节点，重新构造放到祖父下

        parent.addChild(andor, index);
        andor.addChild(finded);
        andor.addChild(node);
        return;
      }

      parent.addChild(node, index + 1);
    }
  },
  _removeCondition: function _removeCondition(id) {
    var finded = this.tree.search(id);

    if (BI.isNotNull(finded)) {
      var parent = finded.getParent();
      parent.removeChild(id);

      if (parent.getChildrenLength() <= 1) {
        var prev = parent.getParent();

        if (BI.isNotNull(prev)) {
          var index = prev.getChildIndex(parent.id);
          prev.removeChildByIndex(index);

          if (parent.getChildrenLength() === 1) {
            prev.addChild(parent.getFirstChild(), index);
          }
        }
      }

      this._populate(this.tree.toJSONWithNode());

      this.fireEvent("EVENT_CHANGE");
    }
  },
  _addAndOrCondition: function _addAndOrCondition(formulaOrField, type) {
    var ANDOR = ["AND", "OR"];
    type || (type = 0);
    var currentSelectItem = this.filter.getCurrentSelectItem();

    if (BI.isNotNull(currentSelectItem)) {
      var id = currentSelectItem.attr("id");

      this._insertAndOrCondition(id, formulaOrField, type);
    } else {
      var node = this._createEmptyNode(formulaOrField);

      var root = this.tree.getRoot();
      var child = root.getLastChild(); // 获取第一层最后一个节点, 需要整个替换掉

      if (BI.isNotNull(child)) {
        var data = child.get("data");

        if (data.value === BI.Filter.FILTER_TYPE[ANDOR[type]]) {
          // 和父亲节点类型相同直接作为儿子节点添加进去
          this.tree.addNode(child, node);
        } else {
          // 重新组织节点andor, 此节点为第一层最后一个节点和新增节点的父亲, 作为第一层最后一个节点
          var andor = new BI.Node(BI.UUID());
          andor.set("data", {
            value: BI.Filter.FILTER_TYPE[ANDOR[type]],
            children: [child.get("data"), node.get("data")]
          });
          root.removeChild(child.id); // 删除原来的节点，一个个添加

          this.tree.addNode(andor);
          this.tree.addNode(andor, child);
          this.tree.addNode(andor, node);
        }
      } else {
        this.tree.addNode(node);
      }
    }

    this._populate(this.tree.toJSONWithNode());

    this.fireEvent("EVENT_CHANGE");
  },
  _shakeTree: function _shakeTree(node, pnode) {
    var self = this;
    var count = 0,
        i;
    var children = node.getChildren();

    for (i = 0; i < children.length; i++) {
      var childCount = self._shakeTree(children[i], node);

      childCount > 0 && (i += childCount - 1); // 索引要向前加上增加的节点格式 - 1
    }

    if (BI.isNotNull(pnode)) {
      var pdata = pnode.get("data"),
          data = node.get("data");

      if (BI.isNotNull(pdata) && pdata.value === data.value) {
        // 父子节点类型相同, 就把子节点的儿子全部移动到父节点中去
        var removeIndex = pnode.getChildIndex(node.id);
        pnode.removeChild(node.id); // 父亲删除现有子节点

        BI.each(node.getChildren(), function (i, cNode) {
          // 父亲添加儿子节点的子节点
          count++; // 向祖父添加了n个节点

          self.tree.addNode(pnode, cNode, removeIndex + i);
        });
      }
    }

    return count;
  },
  // 将整棵树中可以合并的节点全都合并起来
  shakeTree: function shakeTree() {
    var root = this.tree.getRoot();

    this._shakeTree(root);

    this._populate(this.tree.toJSONWithNode());

    this.fireEvent("EVENT_CHANGE");
  },
  _populate: function _populate(items) {
    this.filter.defaultState();
    var o = this.options;
    o.items = items;
    BI.Tree.traversal(items, function (i, item) {
      o.itemCreator(item);
    });
    this.filter.populate.apply(this.filter, [items]);

    this._checkBeautifyLevelNecessary();
  },
  populate: function populate(conditions) {
    this.tree.initTree(conditions);

    this._populate(this.tree.toJSONWithNode());
  },
  getValue: function getValue() {
    return this.filter.getValue();
  }
});
BI.shortcut("bi.filter", BI.Filter);
BI.Filter.FILTER_TYPE = {};
BI.Filter.FILTER_TYPE.FORMULA = 33;
BI.Filter.FILTER_TYPE.AND = 34;
BI.Filter.FILTER_TYPE.OR = 35;
BI.Filter.FILTER_TYPE.EMPTY_FORMULA = 36;
BI.Filter.FILTER_TYPE.EMPTY_CONDITION = 37;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by windy on 2017/3/28.
 */
!function () {
  var FilterList = BI.inherit(BI.ButtonTree, {
    props: {
      baseCls: "bi-button-map"
    },
    _createBtns: function _createBtns(items) {
      var o = this.options;
      var buttons = BI.createWidgets(BI.createItems(items, {
        type: "bi.text_button",
        once: o.chooseType === 0
      }));
      var keys = BI.map(items, function (i, item) {
        item = BI.stripEL(item);

        if (!(item.id || item.value)) {
          throw new Error("item must have 'id' or 'value' as its property");
        }

        return item.id || item.value;
      });
      return BI.zipObject(keys, buttons);
    },
    setValue: function setValue(v) {
      v = BI.isArray(v) ? v : [v];
      BI.each(this.buttons, function (val, item) {
        if (!BI.isFunction(item.setSelected)) {
          item.setValue(v);
          return;
        }

        if (BI.contains(v, val)) {
          item.setSelected && item.setSelected(true);
        } else {
          item.setSelected && item.setSelected(false);
        }
      });
    },
    setNotSelectedValue: function setNotSelectedValue(v) {
      v = BI.isArray(v) ? v : [v];
      BI.each(this.buttons, function (val, item) {
        if (!BI.isFunction(item.setSelected)) {
          item.setNotSelectedValue(v);
          return;
        }

        if (BI.contains(v, val)) {
          item.setSelected && item.setSelected(false);
        } else {
          item.setSelected && item.setSelected(true);
        }
      });
    },
    populate: function populate(items) {
      var self = this;
      var args = [].slice.call(arguments);
      var linkHashMap = new BI.LinkHashMap();

      var val = function val(item) {
        return item.id || item.value;
      };

      if (!this.buttons) {
        this.buttons = {};
      } // 所有已存在的和新添加的


      var willCreated = [];
      BI.each(items, function (i, item) {
        item = BI.stripEL(item);

        if (self.buttons[val(item)]) {
          var ob = self.buttons[val(item)];
          args[0] = item.items;
          args[2] = item;
          ob.populate && ob.populate.apply(ob, args);
        } else {
          willCreated.push(item);
        }
      }); // 创建新元素

      args[0] = willCreated;

      var newBtns = this._btnsCreator.apply(this, args); // 整理


      var array = [];
      BI.each(items, function (i, item) {
        item = BI.stripEL(item);
        var button = self.buttons[val(item)] || newBtns[val(item)];
        linkHashMap.add(val(item), button);
        array.push(button);
      });
      this.buttons = linkHashMap.map;
      BI.DOM.hang(this.buttons);
      this.element.empty();

      var packages = this._packageItems(items, this._packageBtns(array));

      BI.createWidget(BI.extend({
        element: this
      }, this._packageLayout(packages)));
    },
    getIndexByValue: function getIndexByValue() {
      throw new Error("Can not use getIndexByValue");
    }
  });
  BI.shortcut("bi.filter_list", FilterList);
}();

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var Model = BI.inherit(Fix.Model, {
    state: function state() {
      return {
        setSelectedCondition: false,
        shakeTree: false
      };
    },
    childContext: ["setSelectedCondition"],
    computed: {},
    actions: {
      addCondition: function addCondition() {},
      addAndCondition: function addAndCondition() {},
      addOrCondition: function addOrCondition() {},
      addFormula: function addFormula() {},
      addAndFormula: function addAndFormula() {},
      addOrFormula: function addOrFormula() {},
      shakeTree: function shakeTree() {
        this.model.shakeTree = !this.model.shakeTree;
      }
    }
  });
  BI.model("bi.model.material.filter", Model);
}();

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 过滤条件
 *
 * Created by GUY on 2015/9/25.
 * @class BI.FilterOperation
 * @extend BI.Widget
 */
!function () {
  BI.FilterOperation = BI.inherit(BI.Widget, {
    _defaultConfig: function _defaultConfig() {
      return BI.extend(BI.FilterOperation.superclass._defaultConfig.apply(this, arguments), {
        constants: {
          FORMULA_COMBO: [{
            text: BI.i18nText("BI-Conf_Formula_And"),
            $testId: "bi-materials-formula-add",
            value: BI.AbstractFilterItem.FILTER_OPERATION_FORMULA_AND
          }, {
            text: BI.i18nText("BI-Conf_Formula_Or"),
            $testId: "bi-materials-formula-or",
            value: BI.AbstractFilterItem.FILTER_OPERATION_FORMULA_OR
          }],
          CONDITION_COMBO: [{
            text: BI.i18nText("BI-Conf_Condition_And"),
            $testId: "bi-materials-condition-add",
            value: BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_AND
          }, {
            text: BI.i18nText("BI-Conf_Condition_Or"),
            $testId: "bi-materials-condition-or",
            value: BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_OR
          }]
        }
      });
    },
    props: {
      baseCls: "bi-filter-operation",
      expander: {},
      items: [],
      logic: {
        dynamic: false
      },
      selections: [BI.AbstractFilterItem.FILTER_OPERATION_CONDITION, BI.AbstractFilterItem.FILTER_OPERATION_FORMULA],
      itemsCreator: BI.emptyFn
    },
    _store: function _store() {
      return BI.Models.getModel("bi.model.material.filter_operation");
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.currentSelected = null;
      return BI.extend({
        items: [{
          el: {
            type: "bi.left_right_vertical_adapt",
            items: {
              left: self._buildOperationButton(),
              right: [{
                type: "bi.icon_button",
                cls: "combine-level-font",
                title: BI.i18nText("BI-Basic_Beautify_Level"),
                ref: function ref(_ref) {
                  self.beautifyButton = _ref;
                },
                listeners: [{
                  eventName: BI.IconButton.EVENT_CHANGE,
                  action: function action() {
                    self.fireEvent("EVENT_OPERATION", BI.AbstractFilterItem.FILTER_OPERATION_SHAKE);
                  }
                }]
              }]
            },
            height: 24,
            lrgap: 20,
            rrgap: 10
          },
          height: 24
        }, {
          el: BI.extend({
            tgap: 10,
            items: [{
              el: {
                type: "bi.left",
                items: [{
                  type: "bi.filter_pane",
                  expander: o.expander,
                  items: o.items,
                  itemsCreator: o.itemsCreator,
                  listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function action(type, value, obj) {
                      if (type === BI.Events.CLICK && value !== true) {
                        if (BI.isNotNull(self.currentSelected) && self.currentSelected === obj) {
                          self.store.setSelectedCondition(!obj.isSelectedCondition());
                          obj.setSelectedCondition(!obj.isSelectedCondition());
                        } else {
                          if (BI.isNotNull(self.currentSelected)) {
                            self.store.setSelectedCondition(false);
                            self.currentSelected.setSelectedCondition(false);
                          }

                          self.currentSelected = obj;
                          self.store.setSelectedCondition(true);
                          obj.setSelectedCondition(true);
                        }
                      }

                      if (type === BI.Events.CLICK && value === true) {
                        self.fireEvent("EVENT_CLICK_EXPANDER", arguments);
                      }

                      if (type === BI.Events.DESTROY) {
                        if (self.currentSelected === obj) {
                          self.currentSelected = null;
                        }

                        self.fireEvent("BI.FilterOperation.EVENT_DESTROY_ITEM", value, obj);
                      }
                    }
                  }],
                  ref: function ref(_ref) {
                    self.filter = _ref;
                  }
                }]
              },
              // for absolute
              top: 0,
              right: 2,
              bottom: 0,
              left: 0,
              // for vertical
              rgap: 2
            }]
          }, o.logic.dynamic ? {
            type: "bi.vertical",
            scrolly: false
          } : {
            type: "bi.absolute",
            scrollable: true
          })
        }]
      }, o.logic.dynamic ? {
        type: "bi.vertical",
        scrolly: false
      } : {
        type: "bi.vtape"
      });
    },
    _buildOperationButton: function _buildOperationButton() {
      var self = this,
          combos = [],
          o = this.options;
      BI.each(this.options.selections, function (i, type) {
        switch (type) {
          case BI.AbstractFilterItem.FILTER_OPERATION_FORMULA:
            combos.push({
              type: "bi.filter_operation_switch",
              warningTitle: o.addWarningTitle,
              addType: BI.AbstractFilterItem.FILTER_OPERATION_FORMULA_AND,
              listeners: [{
                eventName: "EVENT_CHANGE",
                action: function action(v) {
                  doAdd(v);
                }
              }]
            });
            break;

          case BI.AbstractFilterItem.FILTER_OPERATION_CONDITION:
          default:
            combos.push({
              type: "bi.filter_operation_switch",
              warningTitle: o.addWarningTitle,
              addType: BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_AND,
              listeners: [{
                eventName: "EVENT_CHANGE",
                action: function action(v) {
                  doAdd(v);
                }
              }]
            });
            break;
        }
      });
      return combos;

      function doAdd(v) {
        self.fireEvent("EVENT_OPERATION", v);
        self.defaultState();
      }
    },
    defaultState: function defaultState() {
      if (BI.isNotNull(this.currentSelected)) {
        this.store.setSelectedCondition(false);
        this.currentSelected.setSelectedCondition(false);
      }
    },
    getCurrentSelectItem: function getCurrentSelectItem() {
      if (BI.isNotNull(this.currentSelected) && this.currentSelected.isSelectedCondition()) {
        return this.currentSelected;
      }
    },
    setBeautifyButtonVisible: function setBeautifyButtonVisible(b) {
      this.beautifyButton.setVisible(!!b);
    },
    populate: function populate() {
      this.filter.populate.apply(this.filter, arguments);
    },
    getValue: function getValue() {
      return this.filter.getValue();
    }
  });
  BI.shortcut("bi.filter_operation", BI.FilterOperation);
}();

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var Model = BI.inherit(Fix.Model, {
    context: ["setSelectedCondition"],
    computed: {},
    actions: {
      setSelectedCondition: function setSelectedCondition(selected) {
        this.model.setSelectedCondition = selected;
      }
    }
  });
  BI.model("bi.model.material.filter_operation", Model);
}();

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  BI.FilterOperationSwitch = BI.inherit(BI.Single, {
    props: {
      baseCls: "bi-filter-operation-switch",
      width: 112,
      height: 24,
      addType: BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_AND
    },
    render: function render() {
      var self = this;
      return {
        type: "bi.htape",
        items: [{
          el: {
            type: "bi.text_button",
            cls: "filter-add-item left-item-radius",
            $testId: "bi-filter-operation-switch-add-button",
            text: this._getShowText(this._getDefaultValue()),
            ref: function ref(_ref) {
              self.addButton = _ref;
            },
            value: this._getDefaultValue(),
            listeners: [{
              eventName: "EVENT_CHANGE",
              action: function action() {
                self.fireEvent("EVENT_CHANGE", this.getValue());
              }
            }]
          },
          rgap: 1
        }, {
          el: {
            type: "bi.down_list_combo",
            el: {
              cls: "filter-add-item",
              title: BI.i18nText("BI-Basic_Switch")
            },
            iconCls: "filter-down-font icon-size-12",
            $testId: "bi-filter-operation-switch-combo",
            cls: "filter-add-item right-item-radius",
            items: this._getItemsByType(),
            value: [{
              value: this._getDefaultValue()
            }],
            listeners: [{
              eventName: "EVENT_CHANGE",
              action: function action() {
                var value = this.getValue()[0].value;
                self.addButton.setValue(value);
                self.addButton.setText(self._getShowText(value));
                self.fireEvent("EVENT_CHANGE", value);
              }
            }]
          },
          width: 16
        }]
      };
    },
    _getShowText: function _getShowText(v) {
      switch (v) {
        case BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_OR:
          return BI.i18nText("BI-Basic_Add_Or_Condition");

        case BI.AbstractFilterItem.FILTER_OPERATION_FORMULA_AND:
          return BI.i18nText("BI-Basic_Add_And_Formula");

        case BI.AbstractFilterItem.FILTER_OPERATION_FORMULA_OR:
          return BI.i18nText("BI-Basic_Add_Or_Formula");

        case BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_AND:
        default:
          return BI.i18nText("BI-Basic_Add_And_Condition");
      }
    },
    _getDefaultValue: function _getDefaultValue() {
      return this.options.addType === BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_AND ? BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_AND : BI.AbstractFilterItem.FILTER_OPERATION_FORMULA_AND;
    },
    _getItemsByType: function _getItemsByType() {
      return this.options.addType === BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_AND ? [[{
        text: BI.i18nText("BI-Basic_And_Condition"),
        cls: "dot-e-font",
        value: BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_AND,
        $testId: "bi-filter-operation-switch-combo-item-condition-and"
      }, {
        text: BI.i18nText("BI-Basic_Or_Condition"),
        cls: "dot-e-font",
        value: BI.AbstractFilterItem.FILTER_OPERATION_CONDITION_OR,
        $testId: "bi-filter-operation-switch-combo-item-condition-or"
      }]] : [[{
        text: BI.i18nText("BI-Basic_And_Formula"),
        cls: "dot-e-font",
        value: BI.AbstractFilterItem.FILTER_OPERATION_FORMULA_AND,
        $testId: "bi-filter-operation-switch-combo-item-formula-and"
      }, {
        text: BI.i18nText("BI-Basic_Or_Formula"),
        cls: "dot-e-font",
        value: BI.AbstractFilterItem.FILTER_OPERATION_FORMULA_OR,
        $testId: "bi-filter-operation-switch-combo-item-formula-or"
      }]];
    }
  });
  BI.shortcut("bi.filter_operation_switch", BI.FilterOperationSwitch);
}();

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @class BI.FilterPane
 * @extend BI.Widget
 * 过滤面板
 */
!function () {
  var FilterPane = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-filter-pane",
      expander: {},
      items: [],
      itemsCreator: BI.emptyFn
    },
    render: function render() {
      var self = this,
          o = this.options;
      return {
        type: "bi.custom_tree",
        cls: BI.isNotEmptyArray(o.items) ? "bi-border-right bi-border-top" : "",
        expander: BI.extend({
          type: "bi.filter_expander",
          el: {},
          popup: {
            type: "bi.custom_tree"
          }
        }, o.expander),
        el: {
          type: "bi.filter_list",
          cls: "filter-list-pane",
          chooseType: BI.ButtonGroup.CHOOSE_TYPE_DEFAULT,
          layouts: [{
            type: "bi.vertical",
            scrolly: false
          }]
        },
        items: o.items,
        listeners: [{
          eventName: BI.Controller.EVENT_CHANGE,
          action: function action() {
            self.fireEvent("EVENT_CHANGE", arguments);
          }
        }],
        ref: function ref(_ref) {
          self.tree = _ref;
        }
      };
    },
    populate: function populate(items) {
      if (BI.isNotEmptyArray(items)) {
        this.element.addClass("bi-border-right bi-border-top");
      } else {
        this.element.removeClass("bi-border-right bi-border-top");
      }

      this.tree.populate.apply(this.tree, arguments);
    },
    getValue: function getValue() {
      return this.tree.getValue();
    }
  });
  BI.shortcut("bi.filter_pane", FilterPane);
}();

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 表单
 * qcc
 * 2019/12/26
 */
!function () {
  var Form = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-form",
      items: [],
      rules: {},
      // 对每个表单项都生效，会被表单项相同规则覆盖
      stop: false,
      // 是否出现错误即中断校验
      layouts: [{
        type: "bi.vertical"
      }]
    },
    _init: function _init() {
      Form.superclass._init.apply(this, arguments);

      this.populate(this.options.items);
    },
    _createItems: function _createItems(items) {
      var rules = this.options.rules;
      return BI.createWidgets(BI.map(items, function (i, item) {
        return BI.extend({
          type: "bi.form.item"
        }, item, {
          rules: BI.extend({}, rules, item.rules)
        });
      }));
    },
    _itemsCreator: function _itemsCreator(items) {
      var self = this;

      var formItems = this._createItems(items);

      BI.each(formItems, function (i, btn) {
        btn.on(BI.Events.DESTROY, function () {
          BI.remove(self.formItems, btn);
        });
      });
      return formItems;
    },
    _packageItemLayout: function _packageItemLayout(items) {
      var o = this.options;

      for (var i = o.layouts.length - 1; i > 0; i--) {
        items = BI.map(items, function (k, it) {
          return BI.extend({}, o.layouts[i], {
            items: [BI.extend({}, o.layouts[i].el, {
              el: it
            })]
          });
        });
      }

      return items;
    },
    _packageSimpleItems: function _packageSimpleItems(nodes) {
      var o = this.options;
      return BI.map(o.items, function (i, item) {
        if (BI.stripEL(item) === item) {
          return nodes[i];
        }

        return BI.extend({}, item, {
          el: nodes[i]
        });
      });
    },
    _packageItems: function _packageItems(items, packBtns) {
      return BI.createItems(BI.makeArrayByArray(items, {}), BI.clone(packBtns));
    },
    _packageLayout: function _packageLayout(items) {
      var o = this.options,
          layout = BI.deepClone(o.layouts[0]);
      var lay = BI.formatEL(layout).el;

      while (lay && lay.items && !BI.isEmpty(lay.items)) {
        lay = BI.formatEL(lay.items[0]).el;
      }

      lay.items = items;
      return layout;
    },
    // 简单的layout
    _isSimpleLayout: function _isSimpleLayout() {
      var o = this.options;
      return o.layouts.length === 1 && !BI.isArray(o.items[0]);
    },

    /**
     * 提交表单
     * 会进行校验且显示错误提示
     * @param callback
     */
    submit: function submit(callback) {
      var stop = this.options.stop,
          approved = true,
          result;
      BI.each(this.formItems, function (i, item) {
        if (!approved && stop) {
          return true;
        }

        if (!item.isEnabled() || !BI.isFunction(item.getValidations)) {
          return;
        }

        result = item.getValidations();

        if (result && !result.approved) {
          item.showError && item.showError(result.errors[0]);
          approved = false;
        } else {
          item.hideError && item.hideError();
        }
      });
      approved && BI.isFunction(callback) && callback(this.getValue());
      return approved;
    },

    /**
     * 表单校验
     * @returns {boolean}
     */
    validate: function validate() {
      var approved = true,
          stop = this.options.stop;
      BI.each(this.formItems, function (i, item) {
        if (!approved && stop) {
          return true;
        }

        if (item.isEnabled() && BI.isFunction(item.validate) && !item.validate()) {
          approved = false;
        }
      });
      return approved;
    },

    /**
     * 获取表单校验结果
     * 包含错误信息
     * @returns {Array}
     */
    getValidations: function getValidations() {
      var v = [];
      BI.each(this.formItems, function (i, item) {
        if (item.isEnabled() && BI.isFunction(item.getValidations)) {
          v.push(item.getValidations());
        }
      });
      return v;
    },

    /**
     * 设置表单项值
     * 需要给表单项传递name属性
     * @param val
     * @param name
     */
    setValue: function setValue(val, name) {
      var node = this.getNodeByName(name);
      node && node.setValue(val);
    },

    /**
     * 获取表单结果
     * @returns {Array}
     */
    getValue: function getValue() {
      var v = [];
      BI.each(this.formItems, function (i, item) {
        if (item.isEnabled()) {
          v.push(item.getValue());
        }
      });
      return v;
    },

    /**
     * 获取具名表单值
     * @returns {Object}
     */
    getFormValue: function getFormValue() {
      var v = {};
      BI.each(this.formItems, function (i, item) {
        if (item.options.name) {
          v[item.options.name] = item.getValue();
        }
      });
      return v;
    },

    /**
     * 刷新整个表单
     * @param items
     */
    populate: function populate(items) {
      items = items || [];
      this.empty();
      this.options.items = items;
      this.formItems = this._itemsCreator.apply(this, arguments);

      if (this._isSimpleLayout()) {
        items = this._packageSimpleItems(this.formItems);
      } else {
        items = this._packageItems(items, this._packageItemLayout(this.formItems));
      }

      this.layouts = BI.createWidget(BI.extend({
        element: this
      }, this._packageLayout(items)));
    },

    /**
     * 通过name使能某些表单项
     * @param v
     */
    setEnabledItems: function setEnabledItems(v) {
      v = BI.isArray(v) ? v : [v];
      BI.each(this.formItems, function (i, item) {
        if (BI.contains(v, item.options.name)) {
          item.setEnable(true);
        } else {
          item.setEnable(false);
        }
      });
    },
    getAllItems: function getAllItems() {
      return this.formItems;
    },
    getIndexByName: function getIndexByName(name) {
      var index = -1;
      BI.some(this.formItems, function (i, item) {
        if (item.isEnabled() && item.options.name === name) {
          index = i;
          return true;
        }
      });
      return index;
    },
    getNodeByName: function getNodeByName(name) {
      var node;
      BI.some(this.formItems, function (i, item) {
        if (item.isEnabled() && item.options.name === name) {
          node = item;
          return true;
        }
      });
      return node;
    },
    empty: function empty() {
      Form.superclass.empty.apply(this, arguments);
      this.options.items = [];
    },
    destroy: function destroy() {
      Form.superclass.destroy.apply(this, arguments);
      this.options.items = [];
    }
  });
  BI.shortcut("bi.form", Form);
}();

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 使用absolute显示错误的表单项
 * 更多场景是基于此再封装通用项
 * qcc
 * 2019/12/26
 */
!function () {
  var Item = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-form-error-item",
      errorText: "",
      stop: true,
      rules: {}
    },
    render: function render() {
      var self = this,
          o = this.options;
      this._formItem = BI.createWidget(o.el);

      if (o.label) {
        return {
          type: "bi.vertical_adapt",
          items: [{
            el: BI.isKey(o.label) ? {
              type: "bi.label",
              textAlign: "left",
              textHeight: 24,
              text: o.label,
              title: o.label,
              rgap: 10
            } : o.label
          }, {
            el: this._formItem
          }]
        };
      }

      return {
        type: "bi.vertical_adapt",
        items: [{
          el: this._formItem
        }]
      };
    },
    getValue: function getValue() {
      return this._formItem.getValue();
    },
    validate: function validate() {
      var o = this.options;
      var res = BI.validator.validate(this.getValue(), o.rules, o.stop);
      return BI.isNull(res) || res.approved;
    },
    getValidations: function getValidations() {
      var o = this.options;
      return BI.validator.validate(this.getValue(), o.rules, o.stop);
    },
    showError: function showError(text) {
      text && BI.Bubbles.show(this.getName(), text, this._formItem);
    },
    hideError: function hideError() {
      BI.Bubbles.hide(this.getName());
    }
  });
  BI.shortcut("bi.form.error.item", Item);
}();

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 包装成表单项
 * qcc
 * 2019/12/26
 */
!function () {
  var Item = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-form-item",
      stop: true,
      rules: {}
    },
    render: function render() {
      var o = this.options;

      if (o.label) {
        this.item = BI.createWidget({
          rules: o.rules,
          stop: o.stop
        }, o.el);
        return {
          type: "bi.vertical_adapt",
          items: [{
            el: BI.isKey(o.label) ? {
              type: "bi.label",
              textAlign: "left",
              textHeight: 24,
              text: o.label,
              title: o.label,
              rgap: 10
            } : o.label
          }, {
            el: this.item
          }]
        };
      }

      this.item = BI.createWidget({
        rules: o.rules,
        stop: o.stop,
        element: this
      }, o.el);
    },
    getValue: function getValue() {
      return this.item.getValue();
    },
    validate: function validate() {
      return BI.isFunction(this.item.validate) ? this.item.validate() : this._validate();
    },
    getValidations: function getValidations() {
      var o = this.options;
      return BI.isFunction(this.item.getValidations) ? this.item.getValidations() : BI.validator.validate(this.getValue(), o.rules, o.stop);
    },
    showError: function showError(text) {
      BI.isFunction(this.item.showError) && this.item.showError(text);
    },
    hideError: function hideError() {
      BI.isFunction(this.item.hideError) && this.item.hideError();
    },
    _validate: function _validate() {
      var o = this.options;
      var res = BI.validator.validate(this.getValue(), o.rules, o.stop);
      return BI.isNull(res) || res.approved;
    }
  });
  BI.shortcut("bi.form.item", Item);
}();

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  BI.Func = BI.Func || {};
  BI.extend(BI.Func, {
    paintWaterMark: function paintWaterMark(canvas, conf) {
      var markConfig = BI.extend({
        text: "watermark",
        fontSize: 16,
        fontFamily: "Microsoft YaHei, PingFangSC-Light, SimHei, SimSun, FangSong, KaiTi, Arial, Tahoma, Verdana, Times New Roman",
        color: "#999999",
        opacity: 0.15,
        angle: 20,
        fontWeight: "bold",
        horizontalGap: 200,
        verticalGap: 100
      }, conf);
      var deg = markConfig.angle * Math.PI / 180;
      var watermarkCanvas = BI.Func.createEmptyCanvas();
      var cheight = canvas.height,
          cwidth = canvas.width;
      var texts = (markConfig.text + "").split("\n");
      var actualWidth = cwidth * Math.cos(deg) + cheight * Math.sin(deg),
          actualHeight = cwidth * Math.sin(deg) + cheight / Math.cos(deg);
      watermarkCanvas.width = actualWidth;
      watermarkCanvas.height = actualHeight;
      var watermarkCtx = watermarkCanvas.getContext("2d");
      watermarkCtx.rotate(-deg);
      watermarkCtx.font = markConfig.fontWeight + " " + markConfig.fontSize + "px " + markConfig.fontFamily;
      watermarkCtx.fillStyle = markConfig.color;
      watermarkCtx.globalAlpha = markConfig.opacity;
      watermarkCtx.textAlign = "center"; // 用measureText在canvas渲染前就计算宽度确保宽度正确
      // 计算\n处理后最长的文本宽度

      var maxTextWidth = 0;

      for (var t = 0; t < texts.length; t++) {
        maxTextWidth = Math.max(maxTextWidth, watermarkCtx.measureText(texts[t]).width);
      }

      var markWidth = maxTextWidth + markConfig.horizontalGap,
          textHeight = BI.DOM.getTextSizeHeight(markConfig.text, markConfig.fontSize),
          markHeight = textHeight * texts.length + markConfig.verticalGap;
      var col = BI.parseInt(actualWidth / markWidth);
      var row = BI.parseInt(actualHeight / markHeight);
      var fillLeft = canvas.height * Math.tan(deg);

      for (var r = 0; r < row + 1; r++) {
        for (var c = 0; c < col + 3; c++) {
          var left = c * markWidth - fillLeft + (r % 2 === 0 ? -(markWidth / 2) : 0);

          for (var textLen = 0; textLen < texts.length; textLen++) {
            watermarkCtx.fillText(texts[textLen], left, r * markHeight + textHeight * textLen);
          }
        }
      }

      var ctxr = canvas.getContext("2d");
      ctxr.fillStyle = ctxr.createPattern(watermarkCanvas, "no-repeat");
      ctxr.fillRect(0, 0, watermarkCanvas.width, watermarkCanvas.height);
    },
    createEmptyCanvas: function createEmptyCanvas() {
      var canvas = document.createElement("canvas");

      if (!document.createElement("canvas").getContext) {
        canvas = window.G_vmlCanvasManager.initElement(canvas);
      }

      return canvas;
    }
  });
}();

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 预览表列
 *
 * Created by GUY on 2015/12/25.
 * @class BI.PreviewTableCell
 * @extends BI.Widget
 */
BI.WarningLabel = BI.inherit(BI.Single, {
  props: {
    baseCls: "bi-warning-label",
    textAlign: "center",
    whiteSpace: "nowrap",
    // normal  or  nowrap
    forceCenter: false,
    // 是否无论如何都要居中, 不考虑超出边界的情况, 在未知宽度和高度时有效
    textWidth: null,
    textHeight: null,
    hgap: 0,
    vgap: 0,
    lgap: 0,
    rgap: 0,
    tgap: 0,
    bgap: 0,
    text: ""
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.label",
      ref: function ref() {
        self.label = this;
      },
      textAlign: o.textAlign,
      whiteSpace: o.whiteSpace,
      // normal  or  nowrap
      forceCenter: o.forceCenter,
      // 是否无论如何都要居中, 不考虑超出边界的情况, 在未知宽度和高度时有效
      textWidth: o.textWidth,
      textHeight: o.textHeight,
      hgap: o.hgap,
      vgap: o.vgap,
      lgap: o.lgap,
      rgap: o.rgap,
      tgap: o.tgap,
      bgap: o.bgap
    };
  },
  mounted: function mounted() {
    var o = this.options;

    if (BI.isKey(o.text)) {
      this.setText(o.text);
    }
  },
  _digest: function _digest(text) {
    text = BI.htmlEncode(text || "");
    return text.replaceAll("\\$\\{(.*?)\\}", function (ori, str) {
      return "<span class='warning-label'>" + str + "</span>";
    });
  },
  setText: function setText(v) {
    this.options.text = v;
    this.label.text.text.element.html(this._digest(v));
  },
  getText: function getText() {
    return this.options.text;
  },
  setValue: function setValue(v) {
    this.label.setValue(v);
  }
});
BI.shortcut("bi.warning_label", BI.WarningLabel);

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  /**
   * 一个button选中的时候下面有条线
   *
   * Created by GUY on 2015/9/30.
   * @class BI.LineSegmentButton
   * @extends BI.BasicButton
   */
  var LineSegmentButton = BI.inherit(BI.BasicButton, {
    props: {
      baseCls: "bi-line-segment-button bi-list-item-effect",
      once: true,
      readonly: true,
      hgap: 10,
      height: 25,
      lineHeight: 3
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.text = BI.createWidget({
        type: "bi.label",
        element: this,
        text: o.text,
        height: o.height,
        value: o.value,
        hgap: o.hgap
      });
      BI.createWidget({
        type: "bi.absolute",
        element: this,
        items: [{
          el: {
            type: "bi.layout",
            cls: "line-segment-button-line",
            height: o.lineHeight,
            ref: function ref(_ref) {
              self.line = _ref;
            }
          },
          left: 0,
          right: 0,
          bottom: 0
        }]
      });
    },
    setSelected: function setSelected(v) {
      LineSegmentButton.superclass.setSelected.apply(this, arguments);

      if (v) {
        this.line.element.addClass("bi-high-light-background");
      } else {
        this.line.element.removeClass("bi-high-light-background");
      }
    },
    setText: function setText(text) {
      LineSegmentButton.superclass.setText.apply(this, arguments);
      this.text.setText(text);
    }
  });
  BI.shortcut("bi.line_segment_button", LineSegmentButton);
}();

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author windy
 * @version 2.0
 * Created by windy on 2021/9/2
 */
BI.VirtaulTreeListItem = BI.inherit(BI.Widget, {
  props: {
    layer: 0,
    id: "",
    pId: "",
    height: 24
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: "bi.htape",
      items: [{
        el: {
          type: 'bi.layout'
        },
        width: o.layer * 15
      }, {
        type: "bi.text_item",
        logic: {
          dynamic: true
        },
        id: o.id,
        pId: o.pId,
        height: o.height,
        hgap: o.hgap,
        text: o.text,
        value: o.value,
        py: o.py,
        keyword: o.keyword,
        listeners: [{
          eventName: '__EVENT_CHANGE__',
          action: function action() {
            self.fireEvent('__EVENT_CHANGE__');
          }
        }],
        ref: function ref(_ref) {
          self.item = _ref;
        }
      }]
    };
  },
  doHighLight: function doHighLight() {
    this.item.doHighLight.apply(this.item, arguments);
  },
  unHighLight: function unHighLight() {
    this.item.unHighLight.apply(this.item, arguments);
  },
  getId: function getId() {
    return this.options.id;
  },
  getPId: function getPId() {
    return this.options.pId;
  },
  doClick: function doClick() {
    BI.VirtaulTreeListItem.superclass.doClick.apply(this, arguments);
    this.item.setSelected(this.isSelected());
  },
  setSelected: function setSelected(v) {
    BI.VirtaulTreeListItem.superclass.setSelected.apply(this, arguments);
    this.item.setSelected(v);
  }
});
BI.shortcut("bi.virtual_tree_list_item", BI.VirtaulTreeListItem);

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * author: young
 * createdDate: 2019-07-10
 * description: 适用简单列表场景的grid_view
 * @Maintainers: young
 */
BI.GridList = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-grid-list",
    items: [],
    // 一维数组
    // itemFormatter
    itemHeight: 30,
    showLoader: false,
    itemsCreator: BI.emptyFn,
    onLoaded: BI.emptyFn,
    hasNext: BI.emptyFn,
    count: false,
    overscanRowCount: 0,
    overflowX: true,
    overflowY: true
  },
  mounted: function mounted() {
    var self = this;
    this._resizeHandler = BI.debounce(function () {
      var width = self._getListWidth(),
          height = self._getListHeight();

      if (self.list.getWidth() !== width || self.list.getHeight() !== height) {
        self._populate();
      }
    }, 30);
    this.removeListener = BI.ResizeDetector.addResizeListener(this.wrapper, function () {
      self._resizeHandler();
    });

    if (BI.isNotEmptyArray(this.options.items)) {
      this._populate();
    }
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.times = 1;
    this.count = 0;
    this.loaderStatus = "loaded";
    return {
      type: "bi.absolute",
      items: [{
        el: {
          type: "bi.grid_view",
          overflowX: o.overflowX,
          overflowY: o.overflowY,
          estimatedRowSize: o.itemHeight,
          estimatedColumnSize: this._getListWidth(),
          overscanRowCount: o.overscanRowCount,
          itemFormatter: o.itemFormatter,
          rowHeightGetter: function rowHeightGetter() {
            return o.itemHeight;
          },
          columnWidthGetter: function columnWidthGetter() {
            return self.listWidth - BI.DOM.getScrollWidth();
          },
          ref: function ref(_ref2) {
            self.list = _ref2;
          },
          listeners: [{
            eventName: BI.GridView.EVENT_SCROLL,
            action: function action(sc) {
              self.fireEvent("EVENT_SCROLL", sc.scrollTop);
            }
          }]
        },
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }],
      ref: function ref(_ref) {
        self.wrapper = _ref;
      }
    };
  },
  _getListWidth: function _getListWidth() {
    return this.element.width();
  },
  _getListHeight: function _getListHeight() {
    return this.element.height();
  },
  _populate: function _populate() {
    var o = this.options,
        self = this;
    this.listWidth = this._getListWidth();
    this.list.setEstimatedColumnSize(this.listWidth - BI.DOM.getScrollWidth());
    this.list.setWidth(this.listWidth);
    this.list.setHeight(this._getListHeight());
    var items = BI.map(this.options.items, function (i, item) {
      return [item];
    });

    if (o.showLoader && (this._hasNext() || this.loaderStatus === "end")) {
      items.push([{
        type: "bi.loading_bar",
        ref: function ref() {
          switch (self.loaderStatus) {
            case "end":
              this.setEnd();
              break;

            case "loaded":
            default:
              this.setLoaded();
              break;
          }
        },
        listeners: [{
          eventName: BI.Controller.EVENT_CHANGE,
          action: function action(type) {
            if (type === BI.Events.CLICK) {
              this.setLoading();

              self._nextLoad();
            }
          }
        }]
      }]);
    }

    this.list.populate(items);
  },
  _nextLoad: function _nextLoad() {
    var self = this,
        o = this.options;
    o.itemsCreator.apply(this, [{
      times: ++this.times
    }, function () {
      self._addItems.apply(self, arguments);
    }]);
  },
  _addItems: function _addItems(items) {
    var o = this.options;
    this.count += items.length;
    o.items = BI.concat(o.items, items);

    if (this._hasNext()) {
      this.setLoaded();
    } else {
      this.setEnd();
    }

    this._populate();
  },
  _hasNext: function _hasNext() {
    var o = this.options;

    if (BI.isNumber(o.count)) {
      return this.count < o.count;
    }

    return !!o.hasNext.apply(this, [{
      times: this.times,
      count: this.count
    }]);
  },
  populate: function populate(items) {
    var o = this.options,
        self = this;

    if (arguments.length === 0 && BI.isFunction(o.itemsCreator)) {
      o.itemsCreator.apply(this, [{
        times: 1
      }, function () {
        if (arguments.length === 0) {
          throw new Error("参数不能为空");
        }

        self.populate.apply(self, arguments);
        o.onLoaded();
      }]);
      return;
    }

    if (items && items !== o.items) {
      o.items = items;
    }

    this.times = 1;
    this.count = items.length;
    this.loaderStatus = "loaded";

    this._populate();
  },
  setScrollTop: function setScrollTop(top) {
    this.list.setScrollTop(top);
  },
  setLoaded: function setLoaded() {
    this.loaderStatus = "loaded";
  },
  setEnd: function setEnd() {
    this.loaderStatus = "end";
  },
  setLoading: function setLoading() {
    this.loaderStatus = "loading";
  },
  destroyed: function destroyed() {
    this.removeListener && this.removeListener();
  }
});
BI.GridList.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.grid_list", BI.GridList);

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @author windy
 * @version 2.0
 * Created by windy on 2021/9/2
 */
BI.VirtualTreeList = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-virtual-tree-list",
    itemsCreator: BI.emptyFn,
    items: [],
    el: {
      type: 'bi.virtual_group_list',
      rowHeight: 32
    }
  },
  render: function render() {
    var self = this,
        o = this.options;
    return BI.extend({
      items: this._getNodes(),
      ref: function ref(_ref) {
        self.treeList = _ref;
      },
      overscanHeight: 200,
      blockSize: 20
    }, o.el);
  },
  _initTree: function _initTree(nodes) {
    if (BI.isNull(this.tree)) {
      this.tree = new BI.Tree();
    }

    var tree = BI.Tree.transformToTreeFormat(nodes);
    this.tree.initTree(tree);
  },
  _fillTree: function _fillTree(pId, nodes) {
    var self = this;
    var root = this.tree.getRoot();
    var parentNode = this.tree.search(root, pId) || root;
    BI.each(nodes, function (_idx, node) {
      var tNode = new BI.Node(node);
      tNode.set("data", _objectSpread({
        checked: parentNode.data.checked
      }, node));
      self.tree.addNode(parentNode, tNode);
    });

    this._populate();
  },
  _cutTree: function _cutTree(id) {
    var root = this.tree.getRoot();
    var parentNode = this.tree.search(root, id);

    if (BI.isNotNull(parentNode)) {
      parentNode.data.open = false;
    }

    this._populate();
  },
  _getNodes: function _getNodes() {
    var self = this;
    var nodes = [];

    if (!this.tree) {
      this._initTree(this.options.items);
    }

    this.tree.recursion(function (node) {
      nodes.push(BI.extend({
        id: node.id,
        pId: node.pId,
        key: node.key || node.id
      }, node.data));

      if (node.data.open !== true) {
        return true;
      }
    });
    return self._wrapperEvent(nodes);
  },
  _triggerNode: function _triggerNode(id) {
    var self = this;
    var node = this.tree.search(this.tree.getRoot(), id) || this.tree.getRoot();

    if (node.data.open === true) {
      // 收起
      this._cutTree(id);
    } else {
      if (node.getChildrenLength() === 0 && node.isParent) {
        this.options.itemsCreator({
          node: node
        }, function (nodes) {
          // 初次展开
          node.data.open = true;

          self._fillTree(node.id, nodes);
        });
      } else {
        node.data.open = true;

        this._populate();
      }
    }
  },
  _triggerNodeChecked: function _triggerNodeChecked(id, checked) {
    var self = this;
    var node = this.tree.search(this.tree.getRoot(), id);

    if (node) {
      // 把子节点设置成选中状态
      node.data.checked = checked;
      node.data.half = false;
      var queue = node.getChildren().slice();

      while (queue.length) {
        var _node = queue.shift();

        if (checked === _node.data.checked && !_node.data.half) {
          continue;
        }

        _node.data.checked = checked;
        _node.data.half = false;
        queue = queue.concat(_node.getChildren());
      }

      if (checked) {
        var parent = node.getParent();

        while (parent !== this.tree.getRoot()) {
          var exist = BI.some(parent.getChildren(), function (i, child) {
            if (!child.data.checked || child.data.half) {
              return true;
            }
          });

          if (exist) {
            parent.data.checked = false;
            parent.data.half = true;
          } else {
            parent.data.checked = true;
            parent.data.half = false;
          }

          parent = parent.getParent();
        }
      } else {
        var _parent = node.getParent();

        while (_parent !== this.tree.getRoot()) {
          var _exist = BI.some(_parent.getChildren(), function (i, child) {
            if (child.data.checked || child.data.half) {
              return true;
            }
          });

          if (_exist) {
            _parent.data.checked = false;
            _parent.data.half = true;
          } else {
            _parent.data.checked = false;
            _parent.data.half = false;
          }

          _parent = _parent.getParent();
        }
      }
    }

    this._populate();
  },
  _populate: function _populate() {
    this.treeList.populate(this._getNodes());
  },
  _wrapperEvent: function _wrapperEvent(nodes) {
    var self = this;
    return BI.map(nodes, function (_idx, node) {
      node.listeners = node.listeners || [];
      var has = BI.find(node.listeners, function (idx, listener) {
        return listener.eventName === '__EVENT_CHANGE__';
      });

      if (!has) {
        node.listeners.push({
          eventName: '__EVENT_CHANGE__',
          action: function action(v, value) {
            if (v === BI.Events.COLLAPSE || v === BI.Events.EXPAND) {
              self._triggerNode(node.id);

              self.fireEvent(BI.VirtualTreeList.EVENT_NODE_CHANGE, self.tree.search(self.tree.getRoot(), node.id) || self.tree.getRoot());
            }

            if (v === BI.Events.CHANGE) {
              self._triggerNodeChecked(node.id, value);

              self.fireEvent("EVENT_CHANGE", self.getTree());
            }
          }
        });
      }

      return node;
    });
  },
  move: function move(start, end) {
    if (start == null || end == null || start === end) {
      return;
    }

    var node1 = this.tree.search(this.tree.getRoot(), start);
    var node2 = this.tree.search(this.tree.getRoot(), end);

    if (node1.getParent() !== node2.getParent()) {
      return false;
    }

    var parent = node1.getParent();
    var indexStart = parent.getChildIndex(start);
    var indexEnd = parent.getChildIndex(end);

    if (indexStart < indexEnd) {
      parent.addChild(node1, indexEnd + 1);
      parent.removeChildByIndex(indexStart);
    } else {
      parent.addChild(node1, indexEnd);
      parent.removeChildByIndex(indexStart + 1);
    }

    this._populate();
  },
  getTree: function getTree() {
    return this.tree;
  },
  setOpened: function setOpened(nodeId, b) {
    var self = this;

    function openTree(nodeId) {
      var node = self.tree.search(self.tree.getRoot(), nodeId);
      var open = node && node.data.open;

      if (node && open === false) {
        node.data.open = true;
        openTree(node.pId);
      }
    }

    if (b) {
      openTree(nodeId);

      this._populate();
    } else {
      this._cutTree(nodeId);
    }
  },
  scrollToViewPosition: function scrollToViewPosition(nodeId) {
    // 暂时只支持传了rowHeight属性的滚动对应节点到可视位置
    if (BI.isKey(this.options.el.rowHeight)) {
      var count = 0;
      this.tree.recursion(function (node) {
        if (node.id === nodeId) {
          return false;
        }

        if (BI.get(node, ['parent', 'data', 'open']) !== false) {
          count++;
        }
      });
      var currentScrollTop = this.element.scrollTop();
      var itemPosition = (count + 1) * this.options.el.rowHeight;

      if (itemPosition < currentScrollTop || itemPosition > currentScrollTop + this.element.height()) {
        var scrollTop = BI.max([0, (count + 1) * this.options.el.rowHeight - this.element.height()]);
        this.element.scrollTop(scrollTop);
      }
    }
  },
  getValue: function getValue() {
    var result = [];
    this.tree.recursion(function (node) {
      var data = node.data;

      if (data.checked) {
        result.push(BI.isNull(data.value) ? data.id : data.value);
      }
    });
    return result;
  },
  populate: function populate(nodes) {
    this.options.items = nodes;

    this._initTree(this.options.items);

    this._populate();
  }
});
BI.VirtualTreeList.EVENT_CHANGE = "EVENT_CHANGE";
BI.VirtualTreeList.EVENT_NODE_CHANGE = "EVENT_NODE_CHANGE";
BI.shortcut("bi.virtual_tree_list", BI.VirtualTreeList);

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author windy
 * @version 2.0
 * Created by windy on 2021/9/2
 */
BI.VirtualTreeListNode = BI.inherit(BI.NodeButton, {
  props: {
    baseCls: 'bi-virtual-tree-list-node',
    id: "",
    height: 24,
    layer: 0,
    expandIcon: "expander-down-font",
    narrowIcon: "expander-right-font"
  },
  render: function render() {
    var self = this,
        o = this.options;
    return {
      type: 'bi.htape',
      items: [{
        el: {
          type: 'bi.layout'
        },
        width: o.layer * 15
      }, {
        el: {
          type: "bi.arrow_group_node_checkbox",
          cls: o.open ? o.expandIcon : o.narrowIcon,
          ref: function ref(_ref) {
            self.arrow = _ref;
          }
        },
        width: 16
      }, {
        type: "bi.label",
        textAlign: "left",
        whiteSpace: "nowrap",
        textHeight: o.height,
        height: o.height,
        text: o.text,
        value: o.value,
        py: o.py,
        keyword: o.keyword,
        ref: function ref(_ref2) {
          self.text = _ref2;
        }
      }]
    };
  },
  doRedMark: function doRedMark() {
    this.text.doRedMark.apply(this.text, arguments);
  },
  unRedMark: function unRedMark() {
    this.text.unRedMark.apply(this.text, arguments);
  },
  doClick: function doClick() {
    if (this.isSelected()) {
      this.triggerExpand();
    } else {
      this.triggerCollapse();
    }
  },
  setOpened: function setOpened(v) {
    BI.VirtualTreeListNode.superclass.setOpened.apply(this, arguments);
    this.arrow.setSelected(v);
  },
  shouldUpdate: function shouldUpdate(opt) {
    var o = this.options;
    var keys = ["open", "layer", "pId", "value", 'keyword'];
    return BI.some(keys, function (idx, key) {
      return opt[key] !== o[key];
    });
  },
  update: function update(opt) {
    var o = this.options;

    if (opt.value !== o.value) {
      o.value = opt.value;
      this.text.setText(opt.value);
    }

    if (opt.open !== o.open) {
      o.open = opt.open;
      this.arrow.setSelected(opt.open);
    }

    if (!opt.keyword) {
      o.keyword = '';
      this.text.unRedMark(opt.value);
    } else if (opt.keyword !== o.keyword) {
      o.keyword = opt.keyword;
      this.text.doRedMark(opt.keyword);
    }
  }
});
BI.shortcut("bi.virtual_tree_list_node", BI.VirtualTreeListNode);

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author windy
 * @version 2.0
 * Created by windy on 2021/10/22
 * 兼容外部继承LoadingPane的情况
 */
BI.LoadingPane = BI.Pane;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * author: young
 * createdDate: 2019/4/19
 * description:
 * @Maintainers: young
 */
!function () {
  BI.ResizeContainerHtape = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-resize-container-htape",
      minSize: 260,
      maxSize: 260 * 1.5,
      initLeftSize: null,
      left: {
        type: "bi.default"
      },
      right: {
        type: "bi.default"
      }
    },
    render: function render() {
      var self = this,
          o = this.options;
      return {
        type: "bi.htape",
        items: [{
          type: "bi.resizable_container",
          minSize: o.minSize,
          maxSize: o.maxSize,
          content: o.left,
          resize: BI.bind(this._resizeContainer, this),
          width: o.initLeftSize || o.minSize
        }, {
          el: o.right
        }],
        ref: function ref(_ref) {
          self.contianer = _ref;
        }
      };
    },
    _resizeContainer: function _resizeContainer(size) {
      this.contianer.attr("items")[0].width = size;
      this.contianer.resize();
      this.fireEvent("EVENT_RESIZE", size);
    }
  });
  BI.ResizeContainerHtape.EVENT_RESIZE = "EVENT_RESIZE";
  BI.shortcut("bi.resize_container.htape", BI.ResizeContainerHtape);
}();

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * author: young
 * createdDate: 2019/4/19
 * description:
 * @Maintainers: young
 */
!function () {
  BI.ResizableContainer = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-resizable-container",
      content: {},
      direction: "e",
      // e s w n ew sn we ns
      minSize: 15,
      maxSize: Number.MAX_VALUE,
      resizable: true,
      start: BI.emptyFn,
      resize: BI.emptyFn,
      stop: BI.emptyFn,
      startDragging: BI.emptyFn,
      broadCastResize: true
    },
    render: function render() {
      var self = this,
          o = this.options;
      var startDrag = false;
      var size = 0,
          offset = 0;
      this.defaultSize = o.height ? o.height : null;
      this.handler = BI.createWidget(BI.extend(this._createHandle(), {
        invisible: !o.resizable
      }));
      this.handler.element.on("click", function (e) {
        e.stopPropagation();
      });

      function optimizeSize(s) {
        return BI.clamp(s, o.minSize, o.maxSize || Number.MAX_VALUE);
      }

      this._stared = false;
      var mouseMoveTracker = new BI.MouseMoveTracker(function (deltaX, deltaY) {
        if (mouseMoveTracker.isDragging()) {
          if (!self._stared) {
            self._stared = true;
            o.startDragging();
          }

          BI.$(document.body).css("cursor", self._isHorizontalResize() ? "ew-resize" : "ns-resize");
          startDrag = true;

          if (BI.get(o.direction, 0) === "w") {
            deltaX = -deltaX;
          }

          offset += deltaX;

          if (BI.get(o.direction, 0) === "n") {
            deltaY = -deltaY;
          }

          offset += deltaY;
          size = optimizeSize((self.defaultSize || self._getDefaultSize()) + offset);
          self.handler.element.addClass("dragging");
          o.resize(size);
          o.broadCastResize && BI.$(window).trigger("resize");
        }
      }, function () {
        if (startDrag === true) {
          size = optimizeSize(size);
          o.stop(size);
          self.defaultSize = size;
          size = 0;
          offset = 0;
          startDrag = false;
          self._stared = false;
          BI.$(document.body).css("cursor", "auto");
        }

        self.handler.element.removeClass("dragging");
        self.handler.element.removeClass("suitable");
        mouseMoveTracker.releaseMouseMoves();
      }, document);
      this.handler.element.on("mousedown", function (event) {
        mouseMoveTracker.captureMouseMoves(event);
      });
      return {
        type: "bi.absolute",
        items: [{
          el: o.content,
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }, BI.extend({
          el: this.handler
        }, this._getHandlePosition())]
      };
    },
    _isHorizontalResize: function _isHorizontalResize() {
      return BI.get(this.options.direction, 0) === "w" || BI.get(this.options.direction, 0) === "e";
    },
    _createHandle: function _createHandle() {
      if (this._isHorizontalResize()) {
        return {
          type: "bi.icon_label",
          cls: "horizontal-drag-font resize-handle-ew",
          width: 5
        };
      }

      return {
        type: "bi.icon_label",
        cls: "vertical-drag-font resize-handle-ns",
        height: 5
      };
    },
    _getHandlePosition: function _getHandlePosition() {
      switch (this.options.direction) {
        case "e":
          return {
            right: -2,
            top: 0,
            bottom: 0
          };

        case "ew":
          return {
            right: 8,
            top: 0,
            bottom: 0
          };

        case "w":
          return {
            left: -2,
            top: 0,
            bottom: 0
          };

        case "we":
          return {
            left: 8,
            top: 0,
            bottom: 0
          };

        case "s":
          return {
            left: 0,
            right: 0,
            bottom: -3
          };

        case "sn":
          return {
            left: 0,
            right: 0,
            bottom: 2
          };

        case "n":
          return {
            top: -3,
            left: 0,
            right: 0
          };

        case "ns":
          return {
            top: 2,
            left: 0,
            right: 0
          };

        default:
          break;
      }
    },
    _getDefaultSize: function _getDefaultSize() {
      var o = this.options;

      if (this._isHorizontalResize()) {
        return o.width || o.minSize;
      }

      return o.height || o.minSize;
    },
    setMinSize: function setMinSize(minWidth) {
      this.options.minSize = minWidth;
    },
    setMaxSize: function setMaxSize(maxWidth) {
      this.options.maxSize = maxWidth;
    },
    setResizable: function setResizable(resizable) {
      this.options.resizable = resizable;
      this.handler.setVisible(resizable);
      BI.$(window).trigger("resize");
    },
    reset: function reset() {
      this.defaultSize = null;
    }
  });
  BI.shortcut("bi.resizable_container", BI.ResizableContainer);
}();

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * author: young
 * createdDate: 2019/4/19
 * description:
 * @Maintainers: young
 */
!function () {
  BI.ResizeContainerVtape = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-resize-container-vtape",
      minSize: 100,
      maxSize: 200,
      initTopSize: null,
      top: {
        type: "bi.default"
      },
      bottom: {
        type: "bi.default"
      }
    },
    render: function render() {
      var self = this,
          o = this.options;
      return {
        type: "bi.vtape",
        items: [{
          type: "bi.resizable_container",
          direction: "s",
          minSize: o.minSize,
          maxSize: o.maxSize,
          content: o.top,
          resize: BI.bind(this._resizeContainer, this),
          height: o.initTopSize || o.minSize
        }, {
          el: o.bottom
        }],
        ref: function ref(_ref) {
          self.contianer = _ref;
        }
      };
    },
    _resizeContainer: function _resizeContainer(size) {
      this.contianer.attr("items")[0].height = size;
      this.contianer.resize();
      this.fireEvent("EVENT_RESIZE", size);
    }
  });
  BI.ResizeContainerVtape.EVENT_RESIZE = "EVENT_RESIZE";
  BI.shortcut("bi.resize_container.vtape", BI.ResizeContainerVtape);
}();

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 自定义滚动条
 */
!function () {
  BI.ScrollbarContainer = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-scrollbar-container",
      el: {}
    },
    render: function render() {
      var self = this,
          o = this.options;
      return [o.el, {
        type: "bi.absolute",
        items: [{
          el: {
            type: "bi.grid_table_scrollbar",
            ref: function ref(_ref) {
              self.verticalScrollbar = _ref;
            },
            listeners: [{
              eventName: BI.GridTableScrollbar.EVENT_SCROLL,
              action: function action(scrollTop) {
                try {
                  self.element.scrollTop(scrollTop);
                } catch (e) {}
              }
            }]
          },
          top: 0,
          bottom: 0,
          right: 0
        }, {
          el: {
            type: 'bi.grid_table_scrollbar',
            orientation: 'horizontal',
            ref: function ref(_ref) {
              self.horizontalScrollbar = _ref;
            },
            listeners: [{
              eventName: BI.GridTableScrollbar.EVENT_SCROLL,
              action: function action(scrollLeft) {
                try {
                  self.element.scrollLeft(scrollLeft);
                } catch (e) {}
              }
            }]
          },
          left: 0,
          bottom: 0,
          right: 0
        }]
      }];
    },
    _handleResize: function _handleResize() {
      var scrollTop = this.element.scrollTop();
      var scrollHeight = this.element[0].scrollHeight;
      var height = this.element.height();
      this.verticalScrollbar.setContentSize(scrollHeight);
      this.verticalScrollbar.setSize(height);
      this.verticalScrollbar.setPosition(scrollTop);
      this.verticalScrollbar.populate();
      var scrollLeft = this.element.scrollLeft();
      var scrollWidth = this.element[0].scrollWidth;
      var width = this.element.width();
      this.horizontalScrollbar.setContentSize(scrollWidth);
      this.horizontalScrollbar.setSize(width);
      this.horizontalScrollbar.setPosition(scrollLeft);
      this.horizontalScrollbar.populate();
    },
    mounted: function mounted() {
      var self = this;
      this.element.scroll(function () {
        var scrollTop = self.element.scrollTop();
        self.verticalScrollbar.setVisible(true);
        self.verticalScrollbar.setPosition(scrollTop);
        self.verticalScrollbar.populate();
        var scrollLeft = self.element.scrollLeft();
        self.horizontalScrollbar.setVisible(true);
        self.horizontalScrollbar.setPosition(scrollLeft);
        self.horizontalScrollbar.populate();
      });
      this.resizeObserver = BI.ResizeDetector.addResizeListener(this, this._handleResize.bind(this));

      if (window.MutationObserver) {
        this.mutationObserver = new window.MutationObserver(this._handleResize.bind(this));
        this.mutationObserver.observe(this.element[0], {
          attributes: true,
          childList: true,
          subtree: true
        });
      }

      this.verticalPopper = BI.Popper.createPopper(this.element[0], this.verticalScrollbar.element[0], {
        placement: 'right-start',
        strategy: 'fixed',
        modifiers: [{
          name: 'offset',
          options: {
            offset: [0, 0]
          }
        }, {
          name: "flip",
          enabled: false
        }]
      });
      this.horizontalPopper = BI.Popper.createPopper(this.element[0], this.horizontalScrollbar.element[0], {
        placement: 'bottom-start',
        strategy: 'fixed',
        modifiers: [{
          name: 'offset',
          options: {
            offset: [0, 0]
          }
        }, {
          name: "flip",
          enabled: false
        }]
      });

      this._handleResize();
    },
    destroyed: function destroyed() {
      this.resizeObserver();
      this.mutationObserver && this.mutationObserver.disconnect();
      this.verticalPopper.destroy();
      this.horizontalPopper.destroy();
    }
  });
  BI.shortcut("bi.scrollbar_container", BI.ScrollbarContainer);
  BI.config("bi.scrollbar_container", function (ob) {
    // 只做chrome和edge的，因为chrome下滚动条可以隐藏，其他的不可以
    if (BI.isIE()) {
      return BI.extend({}, ob, {
        type: "bi.el"
      });
    }

    return ob;
  });
}();

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * ------------------------------------------------------------------
 * 组合色选择的单个组合，有五种颜色
 * @param    {array}  value     初始选择的颜色组合
 * @param    {array}  colors    所有颜色组合配置
 * ------------------------------------------------------------------
 */
!function () {
  var SelectColorItem = BI.inherit(BI.BasicButton, {
    props: {
      extraCls: "bi-select-color-item bi-border",
      value: [],
      colors: [],
      once: true,
      height: 50,
      width: 130
    },
    mounted: function mounted() {
      var o = this.options;
      BI.each(this.layouts, function (i, layout) {
        layout.element.css("background-color", o.value[i]);
      });
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.layouts = [];
      return {
        type: "bi.absolute",
        items: [{
          el: {
            type: "bi.button_group",
            items: BI.map(o.colors, function () {
              return {
                type: "bi.layout",
                ref: function ref(_ref) {
                  self.layouts.push(_ref);
                }
              };
            }),
            layouts: [{
              type: "bi.center",
              hgap: 0.5,
              vgap: 2
            }]
          },
          left: 1,
          right: 2,
          top: 0,
          bottom: 0
        }]
      };
    }
  });
  SelectColorItem.EVENT_CHANGE = "EVENT_CHANGE";
  BI.shortcut("bi.select_color_item", SelectColorItem);
}();

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * ------------------------------------------------------------------
 * 组合色选择的弹出层，列出所有的颜色组合
 * @param    {array}  colors    所有颜色组合配置
 * @param    {array}  value     当前选中颜色组合
 * ------------------------------------------------------------------
 */
!function () {
  var SelectColorPopup = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-select-color-popup",
      height: 160,
      items: []
    },
    render: function render() {
      var self = this,
          o = this.options;
      var items = [];
      BI.each(o.colors, function (i, style) {
        items.push({
          type: "bi.select_color_item_wrapper",
          selected: BI.isEqual(o.value, style.colors),
          header: style.value,
          colors: style.colors.slice(0, 5),
          value: style.colors
        });
      });
      return {
        type: "bi.absolute",
        items: [{
          el: {
            type: "bi.button_group",
            items: items,
            layouts: [{
              type: "bi.vertical",
              hgap: 5
            }],
            listeners: [{
              eventName: BI.ButtonGroup.EVENT_CHANGE,
              action: function action(value, item) {
                self.popup.setValue(value);
                item.setSelected && item.setSelected(true);
                self.fireEvent(SelectColorPopup.EVENT_CHANGE, value);
              }
            }],
            ref: function ref(_ref) {
              self.popup = _ref;
            }
          },
          top: 5,
          right: 0,
          bottom: 5,
          left: 0
        }]
      };
    },
    getValue: function getValue() {
      return this.popup.getValue();
    }
  });
  SelectColorPopup.EVENT_CHANGE = "EVENT_CHANGE";
  BI.shortcut("bi.select_color_popup", SelectColorPopup);
}();

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * ------------------------------------------------------------------
 * 组合色选择
 * @param    {array}  value     初始选择的颜色组合
 * @param    {array}  colors    所有颜色组合配置
 * ------------------------------------------------------------------
 */
!function () {
  BI.SelectColorCombo = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-select-color-combo",
      width: 130,
      items: [],
      colors: [],
      value: []
    },
    _store: function _store() {
      return BI.Models.getModel("bi.model.select.color.combo", {
        value: this.options.value
      });
    },
    watch: {
      selectedColor: function selectedColor(color) {
        color = BI.isArray(color) ? color : [color];
        this.combo.setValue(color);
      }
    },
    render: function render() {
      var self = this,
          o = this.options;
      return {
        type: "bi.combo",
        value: this.model.selectedColor,
        adjustLength: 5,
        el: {
          type: "bi.select_color_trigger",
          title: function title() {
            var res = BI.find(o.colors, function (i, style) {
              if (BI.isEqual(style.colors, self.model.selectedColor)) {
                return true;
              }
            });
            return res && res.text;
          },
          value: this.model.selectedColor
        },
        popup: {
          el: {
            type: "bi.select_color_popup",
            value: this.model.selectedColor,
            colors: o.colors,
            listeners: [{
              eventName: "EVENT_CHANGE",
              action: function action(value) {
                self.store.setSelectedColor(value);
                self.combo.hideView();
                self.fireEvent(BI.SelectColorCombo.EVENT_CHANGE);
              }
            }],
            ref: function ref(_ref) {
              self.popup = _ref;
            }
          },
          stopPropagation: false,
          minWidth: 152
        },
        ref: function ref(_ref2) {
          self.combo = _ref2;
        },
        listeners: [{
          eventName: BI.Combo.EVENT_AFTER_INIT,
          action: function action() {
            self.popup.setValue(self.model.selectedColor);
          }
        }]
      };
    }
  });
  BI.SelectColorCombo.EVENT_CHANGE = "EVENT_CHANGE";
  BI.shortcut("bi.select_color_combo", BI.SelectColorCombo);
}();

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var SelectColorComboModel = BI.inherit(Fix.Model, {
    state: function state() {
      return {
        selectedColor: this.options.value
      };
    },
    actions: {
      setSelectedColor: function setSelectedColor(v) {
        this.model.selectedColor = v;
      }
    }
  });
  BI.model("bi.model.select.color.combo", SelectColorComboModel);
}();

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * ------------------------------------------------------------------
 * 组合色选择的弹窗触发器，有五种颜色
 * @param    {array}  value     初始选择的颜色组合
 * @param    {array}  colors    所有颜色组合配置
 * ------------------------------------------------------------------
 */
!function () {
  var SelectColorTrigger = BI.inherit(BI.Trigger, {
    props: {
      extraCls: " bi-select-color-trigger bi-border",
      height: 28,
      value: []
    },
    mounted: function mounted() {
      var self = this,
          o = this.options;
      BI.each(this.layouts, function (i, layout) {
        layout.element.css("background-color", o.value[i]);
      });
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.layouts = [];
      return {
        type: "bi.absolute",
        items: [{
          el: {
            type: "bi.button_group",
            items: BI.map(o.value.slice(0, 5), function () {
              return {
                type: "bi.layout",
                ref: function ref(_ref) {
                  self.layouts.push(_ref);
                }
              };
            }),
            layouts: [{
              type: "bi.center",
              hgap: 0.5,
              vgap: 2
            }],
            ref: function ref(_ref2) {
              self.colorContainer = _ref2;
            }
          },
          left: 1,
          right: 2,
          top: 0,
          bottom: 0
        }, {
          el: {
            type: "bi.icon_button",
            disableSelected: true,
            cls: "icon-combo-down-icon trigger-triangle-font",
            width: 15,
            height: 10,
            ref: function ref(_ref3) {
              self.down = _ref3;
            }
          },
          right: 4,
          bottom: 5
        }]
      };
    },
    populate: function populate(items) {
      this.options.items = items;
    },
    setValue: function setValue(vals) {
      this.value = vals;
      BI.each(this.layouts, function (i, layout) {
        layout.element.css("background-color", vals[i]);
      });
    },
    getValue: function getValue() {
      return this.value;
    }
  });
  SelectColorTrigger.EVENT_CHANGE = "EVENT_CHANGE";
  BI.shortcut("bi.select_color_trigger", SelectColorTrigger);
}();

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * ------------------------------------------------------------------
 * 组合色选择的单个组合加上标题形成的新容器
 * @param    {String}  header     颜色组合标题名称
 * @param    {Array}   value      初始选择的颜色组合
 * @param    {Array}   colors     所有颜色组合配置
 * ------------------------------------------------------------------
 */
!function () {
  var SelectColorItemWrapper = BI.inherit(BI.BasicButton, {
    props: {
      extraCls: "bi-select-color-item-wrapper",
      header: "",
      value: [],
      colors: [],
      height: 50,
      width: 130
    },
    render: function render() {
      var self = this,
          o = this.options;
      return {
        type: "bi.vtape",
        hgap: 2,
        items: [{
          type: "bi.label",
          textAlign: "left",
          text: o.header,
          lgap: 3
        }, {
          el: {
            type: "bi.select_color_item",
            value: o.value,
            colors: o.colors,
            ref: function ref(_ref) {
              self.item = _ref;
            },
            listeners: [{
              eventName: "EVENT_CHANGE",
              action: function action() {
                self.fireEvent(BI.Controller.EVENT_CHANGE, this.getValue());
              }
            }]
          },
          height: 28
        }]
      };
    },
    setSelected: function setSelected(v) {
      this.item.setSelected(v);
    },
    isSelected: function isSelected() {
      return this.item.isSelected();
    }
  });
  BI.shortcut("bi.select_color_item_wrapper", SelectColorItemWrapper);
}();

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var Widget = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-steps-item",
      text: "",
      stepWidth: 88,
      stepHeight: 50,
      showLine: true
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.constant = BI.Constants.getConstant("bi.constants.steps.status");
      this.status = this.constant.NEXT;
      return {
        type: "bi.htape",
        height: o.stepHeight,
        items: [{
          el: {
            type: "bi.vertical_adapt",
            items: [{
              type: "bi.layout",
              cls: "step-line",
              height: 2,
              width: "100%",
              invisible: !o.showLine
            }]
          },
          rgap: 8
        }, {
          el: {
            type: "bi.right_vertical_adapt",
            items: [{
              type: "bi.icon_change_button",
              iconCls: "step-next",
              iconWidth: 14,
              iconHeight: 14,
              ref: function ref(_ref) {
                self.icon = _ref;
              },
              rgap: 8
            }, {
              type: "bi.label",
              cls: "step-text",
              textAlign: "left",
              whiteSpace: "nowrap",
              rgap: 5,
              text: o.text
            }]
          },
          width: o.stepWidth
        }]
      };
    },
    setStatus: function setStatus(status) {
      if (status === this.status) {
        return;
      }

      this.status = status;

      switch (status) {
        case this.constant.CURR:
          this.icon.setIcon("step-now");
          this.element.addClass("active");
          break;

        case this.constant.PREV:
          this.icon.setIcon("step-prev");
          this.element.addClass("active");
          break;

        case this.constant.NEXT:
        default:
          this.icon.setIcon("step-next");
          this.element.removeClass("active");
          break;
      }
    }
  });
  BI.shortcut("bi.steps.item", Widget);
}();

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  BI.constant("bi.constants.steps.status", {
    PREV: 0,
    CURR: 1,
    NEXT: 2
  });
}();

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 步骤条组件
 * 需要外部给宽度
 */
!function () {
  BI.Steps = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-steps",
      stepItems: [],
      stepHeight: 50,
      stepWidth: 88
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.steps = [];
      this.currStep = 0;
      this.constant = BI.Constants.getConstant("bi.constants.steps.status"); // 初始化第一个步骤

      this.steps.push(BI.createWidget(this._createStep(o.stepItems[0], false)));
      var grid = BI.createWidget({
        type: "bi.grid",
        rows: 1,
        width: "100%",
        columns: o.stepItems.length - 1,
        items: BI.map(o.stepItems.slice(1), function (idx, val) {
          return {
            row: 0,
            column: idx,
            el: BI.extend(self._createStep(val, true), {
              ref: function ref(_ref) {
                self.steps.push(_ref);
              }
            })
          };
        })
      });
      return {
        type: "bi.htape",
        items: [{
          el: this.steps[0],
          width: o.stepWidth
        }, {
          el: grid
        }],
        height: o.stepHeight
      };
    },
    _createStep: function _createStep(v, showLine) {
      var o = this.options;
      return BI.extend(v, {
        type: "bi.steps.item",
        stepHeight: o.stepHeight,
        stepWidth: o.stepWidth,
        showLine: showLine
      });
    },
    mounted: function mounted() {
      this.steps[0] && this.steps[0].setStatus(this.constant.CURR);
    },
    setValue: function setValue(val) {
      var self = this;
      this.currStep = val;
      BI.each(this.options.stepItems, function (i) {
        if (i < val) {
          self.steps[i].setStatus(self.constant.PREV);
        } else if (i === val) {
          self.steps[i].setStatus(self.constant.CURR);
        } else {
          self.steps[i].setStatus(self.constant.NEXT);
        }
      });
    },
    getValue: function getValue() {
      return this.currStep;
    }
  });
  BI.shortcut("bi.steps", BI.Steps);
}();

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * ASCII 32-126 单位字体大小宽度
 * windows下场景,默认字体族：Avenir, "Segoe UI", PingFangSC-Regular, "Microsoft YaHei"
 * https://kms.fineres.com/pages/viewpage.action?pageId=271278482
 */
!function () {
  var WIDTHS = {
    32: 0.274,
    33: 0.284,
    34: 0.393,
    35: 0.592,
    36: 0.540,
    37: 0.819,
    38: 0.801,
    39: 0.230,
    40: 0.303,
    41: 0.303,
    42: 0.418,
    43: 0.684,
    44: 0.218,
    45: 0.400,
    46: 0.218,
    47: 0.391,
    48: 0.54,
    49: 0.54,
    50: 0.54,
    51: 0.54,
    52: 0.54,
    53: 0.54,
    54: 0.54,
    55: 0.54,
    56: 0.54,
    57: 0.54,
    58: 0.218,
    59: 0.218,
    60: 0.684,
    61: 0.684,
    62: 0.684,
    63: 0.449,
    64: 0.955,
    65: 0.646,
    66: 0.574,
    67: 0.620,
    68: 0.703,
    69: 0.507,
    70: 0.488,
    71: 0.687,
    72: 0.710,
    73: 0.267,
    74: 0.358,
    75: 0.580,
    76: 0.471,
    77: 0.899,
    78: 0.749,
    79: 0.754,
    80: 0.561,
    81: 0.754,
    82: 0.599,
    83: 0.532,
    84: 0.524,
    85: 0.688,
    86: 0.622,
    87: 0.934,
    88: 0.591,
    89: 0.553,
    90: 0.571,
    91: 0.303,
    92: 0.379,
    93: 0.303,
    94: 0.684,
    95: 0.416,
    96: 0.269,
    97: 0.509,
    98: 0.588,
    99: 0.463,
    100: 0.590,
    101: 0.524,
    102: 0.313,
    103: 0.590,
    104: 0.567,
    105: 0.243,
    106: 0.243,
    107: 0.498,
    108: 0.243,
    109: 0.862,
    110: 0.567,
    111: 0.587,
    112: 0.588,
    113: 0.590,
    114: 0.348,
    115: 0.425,
    116: 0.340,
    117: 0.567,
    118: 0.479,
    119: 0.723,
    120: 0.459,
    121: 0.484,
    122: 0.453,
    123: 0.303,
    124: 0.240,
    125: 0.303,
    126: 0.684
  };
  BI.constant("bi.constant.char.widths", WIDTHS);
}();

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * DynamicGridView
 *
 * Created by GUY on 2020/6/24.
 * @class GridView
 * @extends BI.Widget
 */
!function () {
  var GridView = BI.inherit(BI.Widget, {
    props: function props() {
      return {
        baseCls: "bi-dynamic-collection-view",
        overscanHeight: 100,
        blockSize: 10,
        scrollTop: 0,
        scrollLeft: 0,
        columnSize: [],
        isNeedFreeze: false,
        freezeCols: [],
        isNeedMerge: false,
        mergeCols: [],
        mergeRule: BI.emptyFn,
        stopScrollEvent: false,
        items: [],
        el: {},
        trRenderer: null
      };
    },
    created: function created() {
      var self = this;
      this.renderedIndex = -1;
      this.cache = {};
      this.trCache = {};
      this._debounceRelease = BI.debounce(function () {
        self._scrollLock = false;
      }, 1000 / 60);
    },
    render: function render() {
      var self = this,
          o = this.options;
      return BI.extend(o.el, {
        type: "bi.vertical",
        scrolly: false,
        scrollable: true,
        items: [{
          type: "bi.default",
          tagName: o.trRenderer ? "div" : "table",
          css: {
            marginLeft: o.isNeedFreeze ? -1 * BI.sum(o.columnSize.slice(0, o.freezeCols.length)) : 0
          },
          ref: function ref() {
            self.table = this;
          },
          items: (o.trRenderer ? [] : [{
            type: "bi.default",
            tagName: "colgroup",
            ref: function ref() {
              self.colGroup = this;
            }
          }]).concat([{
            type: "bi.layout",
            ref: function ref() {
              self.topBlank = this;
            }
          }, {
            type: "bi.default",
            tagName: o.trRenderer ? "div" : "tbody",
            ref: function ref() {
              self.container = this;
            }
          }, {
            type: "bi.layout",
            ref: function ref() {
              self.bottomBlank = this;
            }
          }])
        }]
      });
    },
    mounted: function mounted() {
      var self = this,
          o = this.options;

      if (o.items.length > 0) {
        this._populate();
      }

      this.element.scroll(function (e) {
        if (self._scrollLock === true) {
          return;
        }

        o.scrollLeft = self.element.scrollLeft();
        o.scrollTop = self.element.scrollTop();
        !o.stopScrollEvent && self._calculateBlocksToRender();
        self.fireEvent(GridView.EVENT_SCROLL, {
          scrollLeft: o.scrollLeft,
          scrollTop: o.scrollTop
        });
      });
      BI.ResizeDetector.addResizeListener(this, function () {
        try {
          self._calculateBlocksToRender();
        } catch (e) {}
      });
    },
    _renderMoreIf: function _renderMoreIf() {
      var self = this,
          o = this.options;
      var height = this.element.height();
      var minContentHeight = o.scrollTop + height + o.overscanHeight;
      var index = this.cache[this.renderedIndex] && this.cache[this.renderedIndex].index + this.cache[this.renderedIndex].size || 0,
          cnt = this.renderedIndex + 1;
      var lastHeight;

      var getElementHeight = function getElementHeight() {
        return self.container.element.height() + self.topBlank.element.height() + self.bottomBlank.element.height();
      };

      while ((lastHeight = getElementHeight()) < minContentHeight && index < o.items.length) {
        // 找到最大扩展行，考虑到行合并的情况
        var queue = [];

        for (var i = index; i < index + o.blockSize && i < o.items.length; i++) {
          queue.push(i);
        }

        var spanSizeTo = index + o.blockSize;

        while (queue.length > 0) {
          var row = queue[0];

          for (var j = 0; j < o.columnSize.length; j++) {
            var mergeRows = self.itemsMap[row][j].__mergeRows;
            var rowspan = mergeRows ? mergeRows.length : 1;
            var spanTo = row + (rowspan | 0);

            for (var i = row; i < spanTo; i++) {
              if (queue.indexOf(i) < 0) {
                queue.push(i);
                spanSizeTo = spanTo;
              }
            }
          }

          queue.shift();
        }

        var items = o.items.slice(index, spanSizeTo);

        this._addItems(items, index);

        var addedHeight = getElementHeight() - lastHeight;
        this.cache[cnt] = {
          index: index,
          height: addedHeight,
          size: spanSizeTo - index
        };
        this.tree.set(cnt, addedHeight);
        this.renderedIndex = cnt;
        cnt++;
        index += spanSizeTo - index;
      }
    },
    _addItem: function _addItem(rows, index) {
      var self = this,
          o = this.options;

      if (o.trRenderer) {
        return BI.createWidget(o.trRenderer(rows, index, this.itemsMap[index]), {
          root: true
        });
      }

      var tr = BI.createWidget({
        type: "bi.adaptive",
        root: true,
        tagName: "tr",
        height: o.rowSizeGetter ? o.rowSizeGetter(index) : null,
        items: BI.map(rows, function (j, item) {
          if (BI.isNotEmptyObject(self.itemsMap[index][j])) {
            var rowspan = self.itemsMap[index][j].__mergeRows.length;
            var colspan = self.itemsMap[index][j].__mergeCols.length;
            return {
              type: "bi.default",
              tagName: "td",
              attributes: {
                rowspan: rowspan > 1 ? rowspan : undefined,
                colspan: colspan > 1 ? colspan : undefined
              },
              cls: "bi-collection-table-cell",
              items: [BI.extend({
                type: "bi.label"
              }, item)]
            };
          }
        })
      });
      return tr;
    },
    _serialize: function _serialize(items, columnSize, mergeCols, mergeRows) {
      mergeCols = mergeCols || [];
      mergeRows = mergeRows || [];
      var self = this,
          o = this.options;
      var result = [],
          cache = {},
          preCol = {},
          preRow = {},
          map = {};
      var summaryColumnSize = [];

      for (var i = 0; i < columnSize.length; i++) {
        if (i === 0) {
          summaryColumnSize[i] = columnSize[i];
        } else {
          summaryColumnSize[i] = summaryColumnSize[i - 1] + columnSize[i];
        }
      }

      var mergeRow = function mergeRow(i, j) {
        preCol[j].__mergeRows.push(i);
      };

      var mergeCol = function mergeCol(i, j) {
        preRow[i]._width += columnSize[j];

        preRow[i].__mergeCols.push(j);
      };

      var createOneEl = function createOneEl(r, c) {
        var width = columnSize[c];
        map[r][c]._row = r;
        map[r][c]._col = c;
        map[r][c]._width = width;
        preCol[c] = map[r][c];
        preCol[c].__mergeRows = [r];
        preRow[r] = map[r][c];
        preRow[r].__mergeCols = [c];
      };

      BI.each(items, function (i, cols) {
        for (var j = 0; j < cols.length; j++) {
          if (!cache[i]) {
            cache[i] = {};
          }

          if (!map[i]) {
            map[i] = {};
          }

          cache[i][j] = cols[j];
          map[i][j] = {};

          if (mergeCols === true || mergeCols.indexOf(j) > -1 || mergeRows === true || mergeRows.indexOf(i) > -1) {
            if (i === 0 && j === 0) {
              createOneEl(0, 0);
            } else if (j === 0 && i > 0) {
              var isNeedMergeRow = o.mergeRule(cache[i][j], cache[i - 1][j]);

              if (isNeedMergeRow === true) {
                mergeRow(i, j);
                preRow[i] = preCol[j];
              } else {
                createOneEl(i, j);
              }
            } else if (i === 0 && j > 0) {
              var isNeedMergeCol = o.mergeRule(cache[i][j], cache[i][j - 1]);

              if (isNeedMergeCol === true) {
                mergeCol(i, j);
                preCol[j] = preRow[i];
              } else {
                createOneEl(i, j);
              }
            } else {
              var isNeedMergeRow = o.mergeRule(cache[i][j], cache[i - 1][j]);
              var isNeedMergeCol = o.mergeRule(cache[i][j], cache[i][j - 1]);

              if (isNeedMergeCol && isNeedMergeRow) {
                continue; // mergeRow(i, j);//优先合并列
              }

              if (isNeedMergeCol) {
                mergeCol(i, j);
              }

              if (isNeedMergeRow) {
                mergeRow(i, j);
              }

              if (!isNeedMergeCol && !isNeedMergeRow) {
                createOneEl(i, j);
              }
            }
          } else {
            createOneEl(i, j);
          }
        }
      });
      return map;
    },
    _addItems: function _addItems(items, startIndex) {
      var self = this;

      var fragment = BI.Widget._renderEngine.createFragment();

      BI.each(items, function (i, rows) {
        var tr = self._addItem(rows, startIndex + i);

        self.trCache[startIndex + i] = tr;
        fragment.appendChild(tr.element[0]);
      });
      this.container.element.append(fragment);
    },
    _calculateBlocksToRender: function _calculateBlocksToRender() {
      if (!this.tree || this.options.items.length === 0) {
        return;
      }

      var self = this,
          o = this.options;

      this._renderMoreIf();

      var height = this.element.height();
      var minContentHeightFrom = o.scrollTop - o.overscanHeight;
      var minContentHeightTo = o.scrollTop + height + o.overscanHeight;
      var start = this.tree.greatestLowerBound(minContentHeightFrom);
      var end = this.tree.leastUpperBound(minContentHeightTo);
      var needDestroyed = [];

      for (var i = 0; i < start; i++) {
        if (this.cache[i]) {
          var index = this.cache[i].index;

          if (!this.cache[i].destroyed) {
            for (var j = index; j < index + this.cache[i].size && j < o.items.length; j++) {
              needDestroyed.push(this.trCache[j]);
              delete this.trCache[j];
            }

            this.cache[i].destroyed = true;
          }
        }
      }

      for (var i = end + 1; i <= this.renderedIndex; i++) {
        if (this.cache[i]) {
          var index = this.cache[i].index;

          if (!this.cache[i].destroyed) {
            for (var j = index; j < index + this.cache[i].size && j < o.items.length; j++) {
              needDestroyed.push(this.trCache[j]);
              delete this.trCache[j];
            }

            this.cache[i].destroyed = true;
          }
        }
      }

      var firstFragment = BI.Widget._renderEngine.createFragment(),
          lastFragment = BI.Widget._renderEngine.createFragment();

      var currentFragment = firstFragment;

      for (var i = start < 0 ? 0 : start; i <= end && i <= this.renderedIndex; i++) {
        var index = this.cache[i].index;

        if (!this.cache[i].destroyed) {
          currentFragment = lastFragment;
        }

        if (this.cache[i].destroyed === true) {
          for (var j = index; j < index + this.cache[i].size && j < o.items.length; j++) {
            var tr = self._addItem(o.items[j], j);

            this.trCache[j] = tr;
            currentFragment.appendChild(tr.element[0]);
          }

          this.cache[i].destroyed = false;
        }
      }

      this.container.element.prepend(firstFragment);
      this.container.element.append(lastFragment);
      this.topBlank.setHeight(this.tree.sumTo(Math.max(-1, start - 1)));
      this.bottomBlank.setHeight(this.tree.sumTo(this.renderedIndex) - this.tree.sumTo(Math.min(end, this.renderedIndex)));
      BI.each(needDestroyed, function (i, child) {
        child && child._destroy();
      }); // 更新高度

      for (var i = start < 0 ? 0 : start; i <= end && i <= this.renderedIndex; i++) {
        var index = this.cache[i].index;
        var h = 0;

        for (var j = index; j < index + this.cache[i].size && j < o.items.length; j++) {
          if (o.rowSizeGetter) {
            var t = o.rowSizeGetter(j);
            this.trCache[j].element.height(t);
            h += t;
          } else {
            h += this.trCache[j].element.height();
          }
        }

        if (this.cache[i].height !== h) {
          this.cache[i].height = h;
          this.tree.set(i, h);
        }
      }
    },
    _populate: function _populate(items) {
      var self = this,
          o = this.options;

      if (items && this.options.items !== items) {
        this.options.items = items;
        this.itemsMap = this._serialize(o.items, o.columnSize, o.mergeCols);
      }

      if (!this.tree) {
        this.tree = BI.PrefixIntervalTree.empty(Math.ceil(o.items.length / o.blockSize));
      }

      this.table.setWidth(BI.sum(o.columnSize));
      this.table.element.css({
        marginLeft: o.isNeedFreeze ? -1 * BI.sum(o.columnSize.slice(0, o.freezeCols.length)) : 0
      });

      if (this.colGroup) {
        BI.each(o.columnSize, function (i, size) {
          if (self.colGroup.element.children().eq(i).length === 0) {
            self.colGroup.addItem({
              type: "bi.layout",
              tagName: "col",
              width: size
            });
          } else {
            self.colGroup.element.children().eq(i).css("width", size);
          }
        });
      }

      this._calculateBlocksToRender(); // try {
      //     this.element.scrollTop(o.scrollTop);
      // } catch (e) {
      // }

    },
    _clearChildren: function _clearChildren() {
      this.colGroup.empty();
      this.container.empty();
    },
    setColumnSize: function setColumnSize(columnSize) {
      this.options.columnSize = columnSize;
    },
    setRegionColumnSize: function setRegionColumnSize(regionColumnSize) {
      this.options.regionColumnSize = regionColumnSize;
    },
    getMaxScrollTop: function getMaxScrollTop() {
      return this.container.element.height() + this.topBlank.element.height() + this.bottomBlank.element.height() - this.element.height();
    },
    getScrollTop: function getScrollTop() {
      return this.options.scrollTop;
    },
    getScrollLeft: function getScrollLeft() {
      return this.options.scrollLeft;
    },
    setScrollLeft: function setScrollLeft(scrollLeft) {
      if (this.options.scrollLeft === scrollLeft) {
        return;
      }

      this._scrollLock = true;
      this.options.scrollLeft = scrollLeft;

      this._debounceRelease(); // this._calculateChildrenToRender();


      this.element.scrollLeft(this.options.scrollLeft);
    },
    setScrollTop: function setScrollTop(scrollTop) {
      if (this.options.scrollTop === scrollTop) {
        return;
      }

      this._scrollLock = true;
      this.options.scrollTop = scrollTop;

      this._debounceRelease();

      this._calculateBlocksToRender();

      this.element.scrollTop(this.options.scrollTop);
      this.fireEvent("EVENT_SYNC", scrollTop);
    },
    restore: function restore() {
      this.renderedIndex = -1;

      this._clearChildren();

      this.cache = {};
      this.tree = null;
      this.trCache = {};
      this.options.scrollTop = 0; // 依赖于cache的占位元素也要初始化

      this.topBlank.setHeight(0);
      this.bottomBlank.setHeight(0);
    },
    populate: function populate(items) {
      var o = this.options;

      if (items && this.options.items !== items) {
        this.restore();
      }

      this._populate(items);
    },
    destroyed: function destroyed() {
      this.restore();
    }
  });
  GridView.EVENT_SCROLL = "EVENT_SCROLL";
  BI.shortcut("bi.dynamic_collection_view", GridView);
}();

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 原生表格滚动条，为了IE8的兼容
 *
 * Created by GUY on 2016/1/12.
 * @class BI.NativeTableScrollbar
 * @extends BI.Widget
 */
BI.NativeTableScrollbar = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.NativeTableScrollbar.superclass._defaultConfig.apply(this, arguments), {
      attributes: {
        tabIndex: 0
      },
      contentSize: 0,
      defaultPosition: 0,
      position: 0,
      size: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options; // 把滚动条size改掉

    this.element.width(36);
    var throttle = BI.throttle(function () {
      self.fireEvent(BI.NativeTableScrollbar.EVENT_SCROLL, self.element.scrollTop());
    }, 150, {
      leading: false
    });
    this.element.scroll(function () {
      throttle();
    });
    return {
      type: "bi.default",
      scrolly: true,
      items: [{
        type: "bi.layout",
        width: 1,
        ref: function ref(_ref) {
          self.inner = _ref;
        }
      }]
    };
  },
  mounted: function mounted() {
    this._populate();
  },
  _populate: function _populate() {
    var self = this,
        o = this.options;

    if (o.size < 1 || o.contentSize <= o.size) {
      this.setVisible(false);
      return;
    }

    this.setVisible(true);

    try {
      this.element.scrollTop(o.position);
    } catch (e) {}

    this.inner.element.height(o.contentSize);
  },
  setContentSize: function setContentSize(contentSize) {
    this.options.contentSize = contentSize;
  },
  setPosition: function setPosition(position) {
    this.options.position = position;
  },
  setSize: function setSize(size) {
    this.setHeight(size);
    this.options.size = size;
  },
  populate: function populate() {
    this._populate();
  }
});
BI.NativeTableScrollbar.EVENT_SCROLL = "EVENT_SCROLL";
BI.shortcut("bi.native_table_scrollbar", BI.NativeTableScrollbar);
BI.NativeTableHorizontalScrollbar = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.NativeTableHorizontalScrollbar.superclass._defaultConfig.apply(this, arguments), {
      attributes: {
        tabIndex: 0
      },
      contentSize: 0,
      position: 0,
      size: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options; // 把滚动台size改掉

    this.element.height(36);
    var throttle = BI.throttle(function () {
      self.fireEvent(BI.NativeTableScrollbar.EVENT_SCROLL, self.element.scrollLeft());
    }, 150, {
      leading: false
    });
    this.element.scroll(function () {
      throttle();
    });
    return {
      type: "bi.default",
      scrollx: true,
      items: [{
        type: "bi.layout",
        height: 1,
        ref: function ref(_ref) {
          self.inner = _ref;
        }
      }]
    };
  },
  setContentSize: function setContentSize(contentSize) {
    this.options.contentSize = contentSize;
  },
  setPosition: function setPosition(position) {
    this.options.position = position;
  },
  setSize: function setSize(size) {
    this.setWidth(size);
    this.options.size = size;
  },
  _populate: function _populate() {
    var self = this,
        o = this.options;

    if (o.size < 1 || o.contentSize <= o.size) {
      this.setVisible(false);
      return;
    }

    this.setVisible(true);

    try {
      this.element.scrollLeft(o.position);
    } catch (e) {}

    this.inner.element.width(o.contentSize);
  },
  populate: function populate() {
    this._populate();
  }
});
BI.NativeTableHorizontalScrollbar.EVENT_SCROLL = "EVENT_SCROLL";
BI.shortcut("bi.native_table_horizontal_scrollbar", BI.NativeTableHorizontalScrollbar);

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var constants = {
    INSERT_HELPER_WIDTH: 12,
    INSERT_HELPER_OFFSET: 6,
    DRAG_START_DISTANCE: 20,
    DRAG_HELPER_WIDTH: 200,
    DRAG_HELPER_HEIGHT: 300,
    TRANSITION_DURATION: 300
  };
  BI.SortableTable = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-sortable-table",
      el: {
        type: "bi.grid_table"
      },
      sortable: true
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.header = {};
      this.cell = {};
      this.quickSelectHelper = new BI.SortableTable.QuickSelectHelper();
      this.styleHelper = new BI.SortableTable.StyleHelper(this.header, this.cell, BI.bind(this._getCell, this), this.quickSelectHelper);
      return [BI.extend({
        type: "bi.grid_table",
        width: o.width,
        height: o.height,
        headerRowSize: o.headerRowSize,
        rowSize: o.rowSize,
        columnSize: o.columnSize,
        header: this._formatHeader(o.header),
        items: this._formatCell(o.items),
        listeners: [{
          eventName: BI.Table.EVENT_TABLE_SCROLL,
          action: function action() {
            self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
          }
        }, {
          eventName: BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE,
          action: function action() {
            self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
          }
        }, {
          eventName: BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE,
          action: function action() {
            self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
          }
        }]
      }, o.el, {
        ref: function ref(_ref) {
          self.table = _ref;
          o.el.ref && o.el.ref.call(this, _ref);
        },
        mounted: function mounted() {
          self.autoScrollHelper = new BI.SortableTable.AutoScrollHelper(self.table, BI.bind(self._onAutoScroll, self));
        }
      })];
    },
    _getColumnsLeftPosition: function _getColumnsLeftPosition() {
      var position = [];
      var columnSizes = this.table.getColumnSize();
      BI.each(columnSizes, function (idx) {
        if (idx === 0) {
          position.push(0);
        } else {
          position.push(position[idx - 1] + columnSizes[idx - 1]);
        }
      });
      return position;
    },
    _exchangeItemsAndHeaderPosition: function _exchangeItemsAndHeaderPosition(sourceIndexes, targetIndex) {
      var o = this.options;

      if (sourceIndexes.length === 1 && sourceIndexes[0] === targetIndex) {
        return false;
      }

      var header = BI.unzip(o.header);
      var items = BI.unzip(o.items);
      var columnSize = this.getColumnSize();
      var deleteIndexes = BI.map(sourceIndexes, function (idx, sourceIndex) {
        return sourceIndex < targetIndex ? sourceIndex : sourceIndex + sourceIndexes.length;
      });
      o.header = BI.unzip(this._dealExchangeConfig(header, sourceIndexes, targetIndex, deleteIndexes));
      o.items = BI.unzip(this._dealExchangeConfig(items, sourceIndexes, targetIndex, deleteIndexes));
      o.columnSize = this._dealExchangeConfig(columnSize, sourceIndexes, targetIndex, deleteIndexes);
      return true;
    },
    _dealExchangeConfig: function _dealExchangeConfig(targets, sourceIndexes, targetIndex, deleteIndexes) {
      var sourceTargets = BI.filter(targets, function (idx) {
        return BI.contains(sourceIndexes, idx);
      });
      sourceTargets.unshift(targetIndex, 0);
      [].splice.apply(targets, sourceTargets);
      BI.removeAt(targets, deleteIndexes);
      return targets;
    },
    _getCell: function _getCell(cell) {
      if (this.options.customCell) {
        return cell.element;
      }

      var parent = cell.element.parent();

      while (parent) {
        if (parent.hasClass('bi-grid-table-cell')) {
          break;
        }

        parent = parent.parent();
      }

      return parent;
    },
    _formatHeader: function _formatHeader() {
      var self = this,
          o = this.options;
      return BI.map(o.header, function (i, row) {
        return BI.map(row, function (j, col) {
          return BI.extend({}, col, {
            ref: function ref(_ref2) {
              self.header[j] = self.header[j] || {};
              self.header[j][i] = _ref2;
              col.ref && col.ref.call(this, _ref2);
              var hasSelected = false;

              _ref2.element.on("mousedown", function (e) {
                self.disableSelectText(true);

                if (!BI.contains(self.quickSelectHelper.getSelectedColumns(), j)) {
                  self._clickSelectColumn(j, e);

                  self.fireEvent("EVENT_TABLE_SELECT_COLUMN", j);
                } else {
                  hasSelected = true;
                }

                self._prepareDrag(e, _ref2, j);
              });

              _ref2.element.on("click", function (e) {
                if (hasSelected) {
                  hasSelected = false;

                  self._clickSelectColumn(j, e);

                  self.fireEvent("EVENT_TABLE_SELECT_COLUMN", j);
                }
              });
            },
            mounted: function mounted() {
              if (!self.startDrag) {
                if (BI.contains(self.quickSelectHelper.getSelectedColumns(), j)) {
                  self.styleHelper.selectCell(true, self.header[j][i], {
                    column: j,
                    row: i,
                    header: true
                  });

                  self._initDrag(j, self.header[j][i], true);
                }

                if (BI.contains(self.quickSelectHelper.getSelectedColumns(), j + 1)) {
                  var preEle = self._getCell(self.header[j][i]);

                  preEle.addClass('column-select-helper');
                }
              }

              if (self.columnIndex === j) {
                self.styleHelper.setInVisibility(self.header[j][i]);
              }
            },
            destroyed: function destroyed() {
              self.header[j] && delete self.header[j][i];

              if (BI.size(self.header[j]) === 0) {
                delete self.header[j];
              }
            }
          });
        });
      });
    },
    _clickSelectColumn: function _clickSelectColumn(col, e) {
      var self = this;
      this.quickSelectHelper.selectColumns(col, e);
      BI.each(this.header, function (j, col) {
        BI.each(col, function (i, h) {
          var selected;

          if (BI.contains(self.quickSelectHelper.getSelectedColumns(), BI.parseInt(j))) {
            selected = self.styleHelper.selectColumn(true, j);
          } else {
            selected = self.styleHelper.selectColumn(false, j);
          }

          self._initDrag(j, h, selected);
        });
      });
    },
    _formatCell: function _formatCell() {
      var self = this,
          o = this.options;
      return BI.map(o.items, function (i, row) {
        return BI.map(row, function (j, cell) {
          return BI.extend({}, cell, {
            ref: function ref(_ref3) {
              self.cell[j] = self.cell[j] || {};
              self.cell[j][i] = _ref3;
              cell.ref && cell.ref.call(this, _ref3);
            },
            mounted: function mounted() {
              if (!self.startDrag) {
                BI.contains(self.quickSelectHelper.getSelectedColumns(), j) && self.styleHelper.selectCell(true, self.cell[j][i], {
                  column: j,
                  row: i,
                  lastRowCell: i === o.items.length - 1
                });

                if (BI.contains(self.quickSelectHelper.getSelectedColumns(), j + 1)) {
                  var preEle = self._getCell(self.cell[j][i]);

                  preEle.addClass('column-select-helper');
                }
              }

              if (self.columnIndex === j) {
                self.styleHelper.setInVisibility(self.cell[j][i]);
              }
            },
            destroyed: function destroyed() {
              self.cell[j] && delete self.cell[j][i];

              if (BI.size(self.cell[j]) === 0) {
                delete self.cell[j];
              }
            }
          }, {
            lastRowCell: i === o.items.length - 1
          });
        });
      });
    },
    _drop: function _drop(indexes) {
      var o = this.options;
      var insertIndex = this.columnIndex > this.newColumnIndex ? this.newColumnIndex : this.newColumnIndex + 1; // 调整item顺序，重新populate

      var flag = this._exchangeItemsAndHeaderPosition(indexes, insertIndex);

      if (flag === true) {
        this.setColumnSize(o.columnSize);
        var selectedCols = this.getSelectedColumns();
        this.populate(o.items, o.header);
        var splitIndex = BI.findIndex(selectedCols, function (idx, col) {
          return col >= insertIndex;
        });
        var firstSelectCol = insertIndex - (selectedCols[0] < insertIndex ? splitIndex < 0 ? selectedCols.length : splitIndex : 0);
        this.selectColumns(BI.map(selectedCols, function (idx) {
          return BI.clamp(firstSelectCol + idx, 0, o.columnSize.length);
        }));
        this.fireEvent("EVENT_TABLE_SORT", indexes, insertIndex);
      }
    },
    _shouldStartDrag: function _shouldStartDrag(curPosX, startPosX) {
      return Math.abs(curPosX - startPosX) > constants.DRAG_START_DISTANCE;
    },

    /**
     * firefox: 拖拽的时候会触发文本的选中进而影响mousetracker mouseup的触发
     * @param disable
     */
    disableSelectText: function disableSelectText(disable) {
      BI.each(this.header, function (j, col) {
        BI.each(col, function (i, h) {
          h.element[disable ? 'addClass' : 'removeClass']('bi-user-select-disable');
        });
      });
    },
    _prepareDrag: function _prepareDrag(event, node, columnIndex) {
      this.tracker.captureMouseMoves(BI.extend({}, event, {
        preventDefault: BI.emptyFn
      }));
      this.start = false;
      this.startDrag = false;
      this.startX = this.oStartX = event.pageX;
      this.startY = event.pageY;
      this.boundingClientRect = node.element[0].getBoundingClientRect();
      this.columnIndex = this.newColumnIndex = columnIndex;
      this.positions = this._getColumnsLeftPosition();
      this.offsetX = this.positions[columnIndex];
      this.height = node.element[0].offsetHeight;
      this.width = node.element[0].offsetWidth;
      this.widths = this.table.getColumnSize();
      this.tableWidth = this.table.getWidth();
      this.tableHeight = this.table.getHeight();
      var containerBoundingRect = this.element[0].getBoundingClientRect();
      this.minTranslateX = containerBoundingRect.left - this.boundingClientRect.left - this.width / 2;
      this.maxTranslateX = containerBoundingRect.left + containerBoundingRect.width - this.boundingClientRect.left - this.width / 2;
      this.initialScrollX = this.table.getActualRightHorizontalScroll();
    },
    _initDrag: function _initDrag(idx, header, selected) {
      if (!this.options.sortable) {
        return;
      }

      var self = this;

      if (BI.isNull(this.tracker)) {
        this.tracker = new BI.MouseMoveTracker(function (deltaX, deltaY) {
          self.startX += deltaX;
          self.startY += deltaY;

          if (self.tracker.isDragging() && (self.startDrag || self._shouldStartDrag(self.startX, self.oStartX))) {
            self.startDrag = true;

            self._updateHelperPosition();

            self._animateColumns();

            self._autoScroll();
          }
        }, function () {
          self.dragHelper && self.dragHelper.setVisible(false);
          self.tracker.releaseMouseMoves();
          self.startDrag && self._drop(BI.sortBy(self.quickSelectHelper.getSelectedColumns()));

          self._stopDrag();
        }, window);
      }

      if (!selected) {
        header.element.off('mouseup');
      } else {
        header.element.off('mouseup').on('mouseup', function (event) {
          if (Math.abs(self.startX - event.pageX) < 5 && Math.abs(self.startY - event.pageY) < 5) {
            self._stopDrag();
          }
        });
      }
    },
    _updateHelperPosition: function _updateHelperPosition() {
      if (BI.isNull(this.dragHelper)) {
        this.dragHelper = BI.createWidget({
          type: "bi.layout",
          cls: "sortable_table_drag_helper cursor-drag-hand",
          zIndex: BI.zIndex_layer
        });
        BI.createWidget({
          type: "bi.absolute",
          element: 'body',
          items: [{
            el: this.dragHelper,
            left: this.boundingClientRect.left,
            top: this.boundingClientRect.top
          }]
        });
        this.translateX = this.startX - this.oStartX;
        this.styleHelper.setColumnInVisibility(this.columnIndex);
        this.styleHelper.setColumnDisabled(this._getOtherSelectedColumns(this.columnIndex));
      } else {
        this.translateX = this.startX - this.oStartX;
        this.styleHelper.setTranslateX(this.dragHelper.element, this.translateX);
        this.dragHelper.setWidth(this.widths[this.columnIndex]);
        this.dragHelper.setHeight(this.tableHeight);
        this.dragHelper.setVisible(true);
      }
    },
    _animateColumns: function _animateColumns() {
      var self = this;
      var sortingOffset = {
        left: this.offsetX + this.translateX + this.table.getActualRightHorizontalScroll() - this.initialScrollX,
        top: 0
      };
      this.newColumnIndex = null;
      BI.some(this.header, function (colKey, col) {
        if (colKey === self.columnIndex) {
          return false;
        }

        var translate = {
          x: 0,
          y: 0
        };
        BI.some(col, function (rowKey, header) {
          var width = header.element[0].offsetWidth;
          var height = header.element[0].offsetHeight;
          var offset = {
            height: self.height > height ? height / 2 : self.height / 2,
            width: self.width > width ? width / 2 : self.width / 2
          };
          self.styleHelper.setTransitionDuration(colKey, constants.TRANSITION_DURATION);

          if (colKey > self.columnIndex && sortingOffset.left + offset.width >= self.positions[colKey]) {
            translate.x = -self.width;
            self.newColumnIndex = parseInt(colKey);
          } else if (colKey < self.columnIndex && sortingOffset.left <= self.positions[colKey] + offset.width) {
            translate.x = self.width;

            if (self.newColumnIndex === null) {
              self.newColumnIndex = parseInt(colKey);
            }
          }

          self.styleHelper.setColumnTranslateX(colKey, translate.x);
        });
      });

      if (this.newColumnIndex === null) {
        this.newColumnIndex = this.columnIndex;
      }
    },
    _autoScroll: function _autoScroll() {
      this.autoScrollHelper.update({
        translateX: this.translateX,
        minTranslateX: this.minTranslateX,
        maxTranslateX: this.maxTranslateX,
        width: this.width
      });
    },
    _onAutoScroll: function _onAutoScroll(offsetX) {
      this.translateX += offsetX;

      this._animateColumns();
    },
    _getOtherSelectedColumns: function _getOtherSelectedColumns(columnIndex) {
      var columns = BI.clone(this.quickSelectHelper.getSelectedColumns());
      var index = columns.indexOf(columnIndex);
      columns.splice(index, 1);
      return columns;
    },
    _stopDrag: function _stopDrag() {
      var self = this;
      this.startDrag = false;
      this.styleHelper.setColumnInVisibility(this.columnIndex, false);
      this.styleHelper.setColumnDisabled(this._getOtherSelectedColumns(this.columnIndex), false);
      this.autoScrollHelper.clear();
      this.columnIndex = -1;
      this.tracker && this.tracker.releaseMouseMoves();
      BI.each(this.header, function (colKey) {
        self.styleHelper.setColumnTranslateX(colKey);
        self.styleHelper.setTransitionDuration(colKey, null);
      });
      this.dragHelper && this.dragHelper.destroy();
      this.dragHelper = null;
      this.disableSelectText(false);
    },
    selectColumns: function selectColumns(cols) {
      var self = this;
      cols = BI.isArray(cols) ? cols : [cols];
      this.quickSelectHelper.clearColumns();
      BI.each(this.header, function (j) {
        self.styleHelper.selectColumn(false, j);
      });
      BI.each(cols, function (idx, col) {
        self._clickSelectColumn(col, {
          ctrlKey: true
        });
      });
    },
    getSelectedColumns: function getSelectedColumns() {
      return this.quickSelectHelper.getSelectedColumns();
    },
    setWidth: function setWidth(width) {
      BI.SortableTable.superclass.setWidth.apply(this, arguments);
      this.table.setWidth(width);
    },
    setHeight: function setHeight(height) {
      BI.SortableTable.superclass.setHeight.apply(this, arguments);
      this.table.setHeight(height);
    },
    setVerticalScroll: function setVerticalScroll(scrollTop) {
      this.table.setVerticalScroll(scrollTop);
    },
    setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
      this.table.setLeftHorizontalScroll(scrollLeft);
    },
    setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
      this.table.setRightHorizontalScroll(scrollLeft);
    },
    setColumnSize: function setColumnSize(columnSize) {
      this.table.setColumnSize(columnSize);
    },
    getColumnSize: function getColumnSize() {
      return this.table.getColumnSize();
    },
    getFirstColumnHeaderRowSize: function getFirstColumnHeaderRowSize() {
      return this.table.getFirstColumnHeaderRowSize();
    },
    getFirstColumnRowSize: function getFirstColumnRowSize() {
      return this.table.getFirstColumnRowSize();
    },
    setRegionColumnSize: function setRegionColumnSize(columnSize) {
      this.options.regionColumnSize = columnSize;
      this.table.setRegionColumnSize(columnSize);
    },
    getRegionColumnSize: function getRegionColumnSize() {
      return this.table.getRegionColumnSize();
    },
    getVerticalScroll: function getVerticalScroll() {
      return this.table.getVerticalScroll();
    },
    getLeftHorizontalScroll: function getLeftHorizontalScroll() {
      return this.table.getLeftHorizontalScroll();
    },
    getRightHorizontalScroll: function getRightHorizontalScroll() {
      return this.table.getRightHorizontalScroll();
    },
    setSortable: function setSortable(sortable) {
      this.options.sortable = sortable;
    },
    attr: function attr() {
      BI.SortableTable.superclass.attr.apply(this, arguments);
      return this.table.attr.apply(this.table, arguments);
    },
    restore: function restore() {
      this.table.restore();
    },
    populate: function populate(items, headers) {
      var o = this.options;
      this.header = {};
      this.cell = {};
      this.styleHelper.update(this.header, this.cell);
      this.quickSelectHelper.clearColumns();

      this._stopDrag();

      o.header = headers || o.header;
      o.items = items || o.items;
      this.table.populate(this._formatCell(o.items), this._formatHeader(o.header));
    }
  });
  BI.shortcut("bi.sortable_table", BI.SortableTable);
}();

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var MOUSE_EVENT_KEY = {
    CLICK: 0,
    CONTROL_CLICK: 1,
    SHIFT_CLICK: 2
  };

  function QuickSelectHelper() {
    this.selectedColumns = [];
    this.lastSelectedColumn = null;
  }

  QuickSelectHelper.prototype.selectColumns = function (v, e) {
    var self = this;

    switch (this.getMouseHotKey(e)) {
      case MOUSE_EVENT_KEY.CLICK:
        this.selectedColumns = [v];
        this.lastSelectedColumn = v;
        break;

      case MOUSE_EVENT_KEY.CONTROL_CLICK:
        var cancelSelect = BI.some(this.selectedColumns, function (i, target) {
          if (target === v) {
            self.selectedColumns.splice(i, 1);
            return true;
          }
        });

        if (!cancelSelect) {
          this.selectedColumns.push(v);
        }

        break;

      case MOUSE_EVENT_KEY.SHIFT_CLICK:
        var startIndex = self.lastSelectedColumn;
        var endIndex = v;
        var sliceStartIndex = BI.min([startIndex, endIndex]);
        var sliceEndIndex = BI.max([startIndex, endIndex]) + 1;
        this.selectedColumns = BI.uniq(BI.concat(this.selectedColumns, BI.range(sliceStartIndex, sliceEndIndex)));
        break;

      default:
        break;
    }
  };

  QuickSelectHelper.prototype.getMouseHotKey = function (event) {
    if (event.ctrlKey || event.metaKey) {
      // ctrl/command逐个单选
      return MOUSE_EVENT_KEY.CONTROL_CLICK;
    }

    if (event.shiftKey) {
      // shift多选
      return MOUSE_EVENT_KEY.SHIFT_CLICK;
    } // 单选


    return MOUSE_EVENT_KEY.CLICK;
  };

  QuickSelectHelper.prototype.getSelectedColumns = function () {
    return this.selectedColumns;
  };

  QuickSelectHelper.prototype.MOUSE_EVENT_KEY = {
    CLICK: 0,
    CONTROL_CLICK: 1,
    SHIFT_CLICK: 2
  };

  QuickSelectHelper.prototype.clearColumns = function () {
    this.selectedColumns = [];
    this.lastSelectedColumn = null;
  };

  BI.SortableTable.QuickSelectHelper = QuickSelectHelper;
}();

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  function AutoScrollHelper(container, onScrollCallback) {
    this.container = container;
    this.onScrollCallback = onScrollCallback;
  }

  AutoScrollHelper.prototype.update = function (config) {
    var _this = this;

    var offsetX = 0,
        autoScroll = false;
    var translateX = config.translateX,
        minTranslateX = config.minTranslateX,
        maxTranslateX = config.maxTranslateX,
        width = config.width;

    if (translateX <= minTranslateX + width / 2) {
      offsetX = -10 * Math.abs((translateX - width / 2 - minTranslateX) / width);
      autoScroll = true;
    } else if (translateX >= maxTranslateX - width / 2) {
      offsetX = 10 * Math.abs((maxTranslateX - width / 2 - translateX) / width);
      autoScroll = true;
    }

    this.clear();

    if (autoScroll) {
      this.interval = setInterval(function () {
        var initialScrollLeft = _this.container.getActualRightHorizontalScroll();

        _this.container.setRightHorizontalScroll(initialScrollLeft + offsetX);

        _this.onScrollCallback(offsetX);

        if (_this.container.getActualRightHorizontalScroll() === initialScrollLeft) {
          _this.clear();
        }
      }, 5);
    }
  };

  AutoScrollHelper.prototype.clear = function () {
    if (this.interval === null) {
      return;
    }

    clearInterval(this.interval);
    this.interval = null;
  };

  BI.SortableTable.AutoScrollHelper = AutoScrollHelper;
}();

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  function StyleHelper(headers, cells, cellWrapperGetter, quickSelectHelper) {
    this.cellWrapperGetter = cellWrapperGetter;
    this.headers = headers;
    this.cells = cells;
    this.quickSelectHelper = quickSelectHelper;
  }

  StyleHelper.prototype.setTranslateX = function (widget, translateX) {
    widget[0].style.transform = BI.isNull(translateX) ? '' : "translateX(".concat(translateX, "px)");
  };

  StyleHelper.prototype.setInVisibility = function (widget) {
    var invisible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var widgetWrapper = this.cellWrapperGetter(widget);
    widgetWrapper[0].style.opacity = invisible ? 0 : '';
    widgetWrapper[0].style.visibility = invisible ? 'hidden' : '';
  };

  StyleHelper.prototype.setDraggingStyle = function (widget) {
    var disabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var cls = arguments.length > 2 ? arguments[2] : undefined;
    var widgetWrapper = this.cellWrapperGetter(widget);
    widgetWrapper[disabled ? 'addClass' : 'removeClass'](cls || 'dragging-state');
  };

  StyleHelper.prototype.setColumnDisabled = function (columnIndexes) {
    var disabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var self = this;
    BI.each(columnIndexes, function (idx, columnIndex) {
      BI.each(self.cells[columnIndex], function (i, cell) {
        self.setDraggingStyle(cell, disabled);

        if (columnIndex > 0 && self.cells[columnIndex - 1]) {
          self.setDraggingStyle(self.cells[columnIndex - 1][i], disabled, "dragging-pre-column-state");
        }
      });
      BI.each(self.headers[columnIndex], function (i, header) {
        self.setDraggingStyle(header, disabled, "dragging-state dragging-header");

        if (columnIndex > 0 && self.headers[columnIndex - 1]) {
          self.setDraggingStyle(self.headers[columnIndex - 1][i], disabled, "dragging-pre-column-state");
        }
      });
      self.selectColumn(disabled ? false : BI.contains(self.quickSelectHelper.getSelectedColumns(), columnIndex), columnIndex);
    });
  };

  StyleHelper.prototype.setColumnInVisibility = function (columnIndex) {
    var invisible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var self = this;
    BI.each(this.cells[columnIndex], function (i, cell) {
      self.setInVisibility(cell, invisible);
    });
    BI.each(this.headers[columnIndex], function (i, header) {
      self.setInVisibility(header, invisible);
    });
    this.selectColumn(invisible ? false : BI.contains(this.quickSelectHelper.getSelectedColumns(), columnIndex), columnIndex);
  };

  StyleHelper.prototype.setTransitionDuration = function (columnIndex, duration) {
    var self = this;
    BI.each(this.cells[columnIndex], function (i, cell) {
      var cellWrapper = self.cellWrapperGetter(cell);
      cellWrapper[0].style.transitionDuration = BI.isNull(duration) ? '' : "".concat(duration, "ms");
    });
    BI.each(this.headers[columnIndex], function (i, header) {
      var headerWrapper = self.cellWrapperGetter(header);
      headerWrapper[0].style.transitionDuration = BI.isNull(duration) ? '' : "".concat(duration, "ms");
    });
  };

  StyleHelper.prototype.setColumnTranslateX = function (columnIndex, translateX) {
    var self = this;
    BI.each(this.cells[columnIndex], function (i, cell) {
      self.setTranslateX(self.cellWrapperGetter(cell), translateX);
    });
    BI.each(this.headers[columnIndex], function (i, header) {
      self.setTranslateX(self.cellWrapperGetter(header), translateX);
    });
  };

  StyleHelper.prototype.selectColumn = function (selected, cIdx) {
    var self = this;
    BI.each(this.headers[cIdx], function (row, header) {
      self.selectCell(selected, header, {
        column: cIdx,
        row: row,
        header: true,
        cursor: 'cursor-hand'
      });
    });
    BI.each(this.cells[cIdx], function (row, cell) {
      self.selectCell(selected, cell, {
        column: cIdx,
        row: row,
        header: false,
        lastRowCell: cell.attr('lastRowCell')
      });
    });
    return selected;
  };

  StyleHelper.prototype.selectCell = function (selected, cell, opt) {
    var column = opt.column;
    var row = opt.row;
    var header = opt.header || false;
    var cursor = opt.cursor || "";
    var lastRowCell = opt.lastRowCell || false;
    var element = this.cellWrapperGetter(cell);
    element[selected ? "addClass" : "removeClass"](cursor + ' column-select' + (lastRowCell ? ' last-row-cell' : '') + (header ? BI.isEmpty(this.cells) ? " empty-cell header" : " header" : ""));

    if (column > 0) {
      var target = header ? this.headers : this.cells;

      if (target[column - 1]) {
        var preEle = this.cellWrapperGetter(target[column - 1][row]);
        preEle[selected ? "addClass" : "removeClass"]('column-select-helper');
      }
    }
  };

  StyleHelper.prototype.update = function (headers, cells) {
    this.headers = headers;
    this.cells = cells;
  };

  BI.SortableTable.StyleHelper = StyleHelper;
}();

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 表格
 *
 * Created by GUY on 2015/9/22.
 * @class BI.TableCell
 * @extends BI.Single
 */
BI.TableCell = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TableCell.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-table-cell",
      textAlign: "left",
      text: ""
    });
  },
  _init: function _init() {
    BI.TableCell.superclass._init.apply(this, arguments);

    var o = this.options;
    BI.createWidget({
      type: "bi.label",
      element: this,
      whiteSpace: o.whiteSpace || "nowrap",
      textAlign: this.options.textAlign,
      height: this.options.height,
      text: this.options.text,
      value: this.options.value,
      lgap: o.lgap,
      rgap: o.rgap,
      hgap: o.hgap || 5
    });
  }
});
BI.shortcut("bi.table_cell", BI.TableCell);

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 表格单元格
 *
 * Created by GUY on 2016/1/12.
 * @class BI.CollectionTableCell
 * @extends BI.Widget
 */
BI.CollectionTableCell = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.CollectionTableCell.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-collection-table-cell bi-border-right bi-border-bottom",
      width: 0,
      height: 0,
      _left: 0,
      _top: 0,
      firstRowTopLine: true,
      firstColumnLeftLine: true,
      cell: {}
    });
  },
  _init: function _init() {
    BI.CollectionTableCell.superclass._init.apply(this, arguments);

    var o = this.options;
    this.cell = BI.createWidget(BI.extend({
      type: "bi.label"
    }, o.cell, {
      cls: (o.cell.cls || "") + " collection-table-cell-wrapper",
      width: o.width - (o.firstColumnLeftLine && o._left === 0 ? 1 : 0) - 1,
      height: o.height - (o.firstRowTopLine && o._top === 0 ? 1 : 0) - 1
    }));
    BI.createWidget({
      type: "bi.absolute",
      cls: (o.firstRowTopLine ? "bi-collection-table-cell-top-line" : "") + (o.firstColumnLeftLine ? " bi-collection-table-cell-left-line" : ""),
      element: this,
      items: [{
        el: this.cell,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
  },
  setWidth: function setWidth(width) {
    BI.CollectionTableCell.superclass.setWidth.apply(this, arguments);
    var o = this.options;
    this.cell.setWidth(o.width - (o.firstColumnLeftLine && o._left === 0 ? 1 : 0) - 1);
  },
  setHeight: function setHeight(height) {
    BI.CollectionTableCell.superclass.setHeight.apply(this, arguments);
    var o = this.options;
    this.cell.setHeight(o.height - (o.firstRowTopLine && o._top === 0 ? 1 : 0) - 1);
  }
});
BI.shortcut("bi.collection_table_cell", BI.CollectionTableCell);

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * CollectionTable
 *
 * Created by GUY on 2016/1/12.
 * @class BI.CollectionTable
 * @extends BI.Widget
 */
BI.CollectionTable = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.CollectionTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-collection-table",
      headerRowSize: 25,
      rowSize: 25,
      columnSize: [],
      isNeedFreeze: false,
      freezeCols: [],
      isNeedMerge: false,
      mergeCols: [],
      mergeRule: BI.emptyFn,
      header: [],
      items: [],
      regionColumnSize: [],
      customCell: false // 自定义单元格处理

    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this._width = 0;
    this._height = 0;
    this.topLeftCollection = BI.createWidget({
      type: "bi.collection_view",
      overflowX: !BI.isFireFox(),
      overflowY: !BI.isFireFox(),
      cellSizeAndPositionGetter: function cellSizeAndPositionGetter(index) {
        return self.topLeftItems[index];
      }
    });
    this.topLeftCollection.on(BI.CollectionView.EVENT_SCROLL, function (scroll) {
      self.bottomLeftCollection.setScrollLeft(scroll.scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.topRightCollection = BI.createWidget({
      type: "bi.collection_view",
      overflowX: !BI.isFireFox(),
      overflowY: !BI.isFireFox(),
      cellSizeAndPositionGetter: function cellSizeAndPositionGetter(index) {
        return self.topRightItems[index];
      }
    });
    this.topRightCollection.on(BI.CollectionView.EVENT_SCROLL, function (scroll) {
      self.bottomRightCollection.setScrollLeft(scroll.scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.bottomLeftCollection = BI.createWidget({
      type: "bi.collection_view",
      overflowX: !BI.isFireFox(),
      overflowY: !BI.isFireFox(),
      cellSizeAndPositionGetter: function cellSizeAndPositionGetter(index) {
        return self.bottomLeftItems[index];
      }
    });
    this.bottomLeftCollection.on(BI.CollectionView.EVENT_SCROLL, function (scroll) {
      self.bottomRightCollection.setScrollTop(scroll.scrollTop);
      self.topLeftCollection.setScrollLeft(scroll.scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.bottomRightCollection = BI.createWidget({
      type: "bi.collection_view",
      overflowX: !BI.isFireFox(),
      overflowY: !BI.isFireFox(),
      cellSizeAndPositionGetter: function cellSizeAndPositionGetter(index) {
        return self.bottomRightItems[index];
      }
    });
    this.bottomRightCollection.on(BI.CollectionView.EVENT_SCROLL, function (scroll) {
      self.bottomLeftCollection.setScrollTop(scroll.scrollTop);
      self.topRightCollection.setScrollLeft(scroll.scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.topLeft = BI.createWidget({
      type: "bi.vertical",
      scrollable: false,
      scrolly: false,
      items: [this.topLeftCollection]
    });
    this.topRight = BI.createWidget({
      type: "bi.vertical",
      scrollable: false,
      scrolly: false,
      items: [this.topRightCollection]
    });
    this.bottomLeft = BI.createWidget({
      type: "bi.vertical",
      scrollable: false,
      scrolly: false,
      items: [this.bottomLeftCollection]
    });
    this.bottomRight = BI.createWidget({
      type: "bi.vertical",
      scrollable: false,
      scrolly: false,
      items: [this.bottomRightCollection]
    });
    this.shadow = BI.createWidget({
      type: "bi.layout",
      cls: "collection-table-shadow"
    });
    this.contextLayout = BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.topLeft,
        top: 0,
        left: 0
      }, {
        el: this.topRight,
        top: 0
      }, {
        el: this.bottomLeft,
        left: 0
      }, {
        el: this.bottomRight
      }, {
        el: this.shadow,
        top: 0,
        bottom: 0
      }]
    });
    this.topScrollbar = BI.createWidget({
      type: "bi.grid_table_scrollbar",
      width: BI.GridTableScrollbar.SIZE
    });
    this.topScrollbar.on(BI.GridTableScrollbar.EVENT_SCROLL, function (scrollTop) {
      self.bottomLeftCollection.setScrollTop(scrollTop);
      self.bottomRightCollection.setScrollTop(scrollTop);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.leftScrollbar = BI.createWidget({
      type: "bi.grid_table_horizontal_scrollbar",
      height: BI.GridTableScrollbar.SIZE
    });
    this.leftScrollbar.on(BI.GridTableScrollbar.EVENT_SCROLL, function (scrollLeft) {
      self.topLeftCollection.setScrollLeft(scrollLeft);
      self.bottomLeftCollection.setScrollLeft(scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.rightScrollbar = BI.createWidget({
      type: "bi.grid_table_horizontal_scrollbar",
      height: BI.GridTableScrollbar.SIZE
    });
    this.rightScrollbar.on(BI.GridTableScrollbar.EVENT_SCROLL, function (scrollLeft) {
      self.topRightCollection.setScrollLeft(scrollLeft);
      self.bottomRightCollection.setScrollLeft(scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.scrollBarLayout = BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.topScrollbar,
        right: 0,
        top: 0
      }, {
        el: this.leftScrollbar,
        left: 0
      }, {
        el: this.rightScrollbar
      }]
    });

    if (!(BI.isChrome() && BI.isWindows() && !BI.isEdge())) {
      BI.createWidget({
        type: "bi.absolute",
        element: this,
        items: [{
          el: {
            type: "bi.default",
            cls: "bi-table-fix-scroll"
          },
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        }]
      });
    }

    this._width = o.width - BI.GridTableScrollbar.SIZE;
    this._height = o.height - BI.GridTableScrollbar.SIZE;

    if (o.header.length > 0 || o.items.length > 0) {
      this._digest();

      this._populate();
    }
  },
  _getFreezeColLength: function _getFreezeColLength() {
    var o = this.options;
    return o.isNeedFreeze === true ? BI.clamp(o.freezeCols.length, 0, o.columnSize.length) : 0;
  },
  _getFreezeHeaderHeight: function _getFreezeHeaderHeight() {
    var o = this.options;

    if (o.header.length * o.headerRowSize >= this._height) {
      return 0;
    }

    return o.header.length * o.headerRowSize;
  },
  _getActualItems: function _getActualItems() {
    var o = this.options;

    if (o.header.length * o.headerRowSize >= this._height) {
      return o.header.concat(o.items);
    }

    return o.items;
  },
  _getContentHeight: function _getContentHeight() {
    var o = this.options;

    if (this._getFreezeHeaderHeight() <= 0) {
      return o.header.length * o.headerRowSize + o.items.length * o.rowSize;
    }

    return this._getActualItems().length * this.options.rowSize;
  },
  _populateScrollbar: function _populateScrollbar() {
    var o = this.options;
    var regionSize = this.getRegionSize(),
        totalLeftColumnSize = 0,
        totalRightColumnSize = 0,
        totalColumnSize = 0,
        summaryColumnSizeArray = [];
    BI.each(o.columnSize, function (i, size) {
      if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
        totalLeftColumnSize += size;
      } else {
        totalRightColumnSize += size;
      }

      totalColumnSize += size;

      if (i === 0) {
        summaryColumnSizeArray[i] = size;
      } else {
        summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
      }
    });
    this.topScrollbar.setContentSize(this._getContentHeight());

    var freezeHeaderHeight = this._getFreezeHeaderHeight();

    var topScrollbarSize = this._height - freezeHeaderHeight;
    this.topScrollbar.setSize(topScrollbarSize);
    var scrollTop = this.bottomRightCollection.getScrollTop();
    this.topScrollbar.setPosition(scrollTop);
    this.topScrollbar.populate();
    this.leftScrollbar.setContentSize(totalLeftColumnSize);
    this.leftScrollbar.setSize(regionSize);
    var leftScrollLeft = this.bottomLeftCollection.getScrollLeft();
    this.leftScrollbar.setPosition(leftScrollLeft);
    this.leftScrollbar.populate();
    this.rightScrollbar.setContentSize(totalRightColumnSize);
    this.rightScrollbar.setSize(this._width - regionSize);
    var rightScrollLeft = this.bottomRightCollection.getScrollLeft();
    this.rightScrollbar.setPosition(rightScrollLeft);
    this.rightScrollbar.populate();
    var items = this.scrollBarLayout.attr("items");
    items[0].top = this._getFreezeHeaderHeight();
    items[1].top = this._height;
    items[2].top = this._height;
    items[2].left = regionSize;
    this.scrollBarLayout.attr("items", items);
    this.scrollBarLayout.resize();
    var shadowVisible = false;

    if (totalLeftColumnSize > 0 && totalRightColumnSize > 0) {
      shadowVisible = totalLeftColumnSize > regionSize && leftScrollLeft < totalLeftColumnSize - regionSize || rightScrollLeft > 0;

      if (shadowVisible) {
        var firstColumnSize = this.getFirstColumnRowSize();
        var contentHeight = BI.sum(firstColumnSize);
        this.shadow.setHeight(Math.min(this._height, freezeHeaderHeight + contentHeight));
      }
    }

    this.shadow.setVisible(shadowVisible);
  },
  _populateTable: function _populateTable() {
    var self = this,
        o = this.options;
    var regionSize = this.getRegionSize(),
        totalLeftColumnSize = 0,
        totalRightColumnSize = 0,
        totalColumnSize = 0,
        summaryColumnSizeArray = [];
    BI.each(o.columnSize, function (i, size) {
      if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
        totalLeftColumnSize += size;
      } else {
        totalRightColumnSize += size;
      }

      totalColumnSize += size;

      if (i === 0) {
        summaryColumnSizeArray[i] = size;
      } else {
        summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
      }
    });
    var otlw = regionSize;

    var otlh = this._getFreezeHeaderHeight();

    var otrw = this._width - regionSize;

    var otrh = this._getFreezeHeaderHeight();

    var oblw = regionSize;
    var oblh = this._height - otlh;
    var obrw = this._width - regionSize;
    var obrh = this._height - otrh;
    var scrollBarSize = BI.isFireFox() ? 0 : BI.DOM.getScrollWidth();
    var tlw = otlw + scrollBarSize;
    var tlh = otlh + scrollBarSize;
    var trw = otrw + scrollBarSize;
    var trh = otrh + scrollBarSize;
    var blw = oblw + scrollBarSize;
    var blh = oblh + scrollBarSize;
    var brw = obrw + scrollBarSize;
    var brh = obrh + scrollBarSize;

    var digest = function digest(el) {
      el.element.css({
        overflow: "scroll",
        overflowX: "scroll",
        overflowY: "scroll"
      });
    };

    this.topLeft.setWidth(otlw);
    this.topLeft.setHeight(otlh);
    this.topRight.setWidth(otrw);
    this.topRight.setHeight(otrh);
    this.bottomLeft.setWidth(oblw);
    this.bottomLeft.setHeight(oblh);
    this.bottomRight.setWidth(obrw);
    this.bottomRight.setHeight(obrh);
    this.topLeftCollection.setWidth(tlw);
    this.topLeftCollection.setHeight(tlh);
    this.topRightCollection.setWidth(trw);
    this.topRightCollection.setHeight(trh);
    this.bottomLeftCollection.setWidth(blw);
    this.bottomLeftCollection.setHeight(blh);
    this.bottomRightCollection.setWidth(brw);
    this.bottomRightCollection.setHeight(brh);
    digest(this.topLeftCollection);
    digest(this.topRightCollection);
    digest(this.bottomLeftCollection);
    digest(this.bottomRightCollection);
    var items = this.contextLayout.attr("items");
    items[1].left = regionSize;
    items[2].top = this._getFreezeHeaderHeight();
    items[3].left = regionSize;
    items[3].top = this._getFreezeHeaderHeight();
    items[4].left = regionSize;
    this.contextLayout.attr("items", items);
    this.contextLayout.resize();
    var leftHeader = [],
        rightHeader = [],
        leftItems = [],
        rightItems = [];

    var run = function run(positions, items, rendered, firstRowTopLine, firstColumnLeftLine) {
      BI.each(positions, function (i, item) {
        if (o.customCell) {
          items[item.row][item.col]._rowIndex = item.row;
          items[item.row][item.col]._columnIndex = item.col;
          items[item.row][item.col].firstRowTopLine = firstRowTopLine;
          items[item.row][item.col].firstColumnLeftLine = firstColumnLeftLine;
          rendered.push(items[item.row][item.col]);
          return;
        }

        var cell = {
          type: "bi.collection_table_cell",
          cell: items[item.row][item.col],
          _rowIndex: item.row,
          _columnIndex: item.col,
          firstRowTopLine: firstRowTopLine,
          firstColumnLeftLine: firstColumnLeftLine
        };
        rendered.push(cell);
      });
    };

    run(this.topLeftItems, o.header, leftHeader, true, true);
    run(this.topRightItems, o.header, rightHeader, true, this.topLeftItems.length <= 0);
    run(this.bottomLeftItems, this._getActualItems(), leftItems, this.topRightItems.length <= 0, true);
    run(this.bottomRightItems, this._getActualItems(), rightItems, this.topRightItems.length <= 0, this.topLeftItems.length <= 0);

    this.topLeftCollection._populate(leftHeader);

    this.topRightCollection._populate(rightHeader);

    this.bottomLeftCollection._populate(leftItems);

    this.bottomRightCollection._populate(rightItems);
  },
  _syncScroll: function _syncScroll() {
    this.setLeftHorizontalScroll(this.getLeftHorizontalScroll());
    this.setRightHorizontalScroll(this.getRightHorizontalScroll());
    this.setVerticalScroll(this.getVerticalScroll());
  },
  _digest: function _digest() {
    var o = this.options;

    var freezeColLength = this._getFreezeColLength(); // 如果表头位置不够，取消表头冻结


    if (this._getFreezeHeaderHeight() <= 0) {
      this.topLeftItems = [];
      this.topRightItems = [];
      this.bottomLeftItems = BI.CollectionTable.serialize(this._getActualItems(), 0, freezeColLength, function (row) {
        if (row <= o.header.length - 1) {
          return o.headerRowSize;
        }

        return o.rowSize;
      }, o.columnSize, o.mergeCols, BI.range(o.header.length), o.mergeRule, function (rows) {
        if (rows <= o.header.length) {
          return rows * o.headerRowSize;
        }

        return o.header.length * o.headerRowSize + (rows - o.header.length) * o.rowSize;
      });
      this.bottomRightItems = BI.CollectionTable.serialize(this._getActualItems(), freezeColLength, o.columnSize.length, function (row) {
        if (row <= o.header.length - 1) {
          return o.headerRowSize;
        }

        return o.rowSize;
      }, o.columnSize, o.mergeCols, BI.range(o.header.length), o.mergeRule, function (rows) {
        if (rows <= o.header.length) {
          return rows * o.headerRowSize;
        }

        return o.header.length * o.headerRowSize + (rows - o.header.length) * o.rowSize;
      });
    } else {
      this.topLeftItems = BI.CollectionTable.serialize(o.header, 0, freezeColLength, o.headerRowSize, o.columnSize, o.mergeCols, [], o.mergeRule);
      this.topRightItems = BI.CollectionTable.serialize(o.header, freezeColLength, o.columnSize.length, o.headerRowSize, o.columnSize, true, [], o.mergeRule);
      this.bottomLeftItems = BI.CollectionTable.serialize(o.items, 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols, [], o.mergeRule);
      this.bottomRightItems = BI.CollectionTable.serialize(o.items, freezeColLength, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols, [], o.mergeRule);
    }
  },
  _populate: function _populate() {
    if (this._width <= 0 || this._height <= 0) {
      return;
    }

    if (this._isNeedDigest === true) {
      this._digest();
    }

    this._isNeedDigest = false;

    this._populateTable();

    this._populateScrollbar();

    this._syncScroll();
  },
  attr: function attr(key, value) {
    var v = BI.CollectionTable.superclass.attr.apply(this, arguments);

    if (BI.isNotNull(value)) {
      switch (key) {
        case "scrollLeft":
          this.topRightCollection.attr(key, value);
          this.bottomRightCollection.attr(key, value);
          break;

        case "scrollTop":
          this.bottomLeftCollection.attr(key, value);
          this.bottomRightCollection.attr(key, value);
          break;
      }
    }

    return v;
  },
  getRegionSize: function getRegionSize() {
    var o = this.options;
    var regionSize = o.regionColumnSize[0] || 0;

    if (o.isNeedFreeze === false || o.freezeCols.length === 0) {
      return 0;
    }

    if (!regionSize) {
      BI.each(o.freezeCols, function (i, col) {
        regionSize += o.columnSize[col];
      });
    }

    return regionSize;
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.bottomLeftCollection.setScrollTop(scrollTop);
    this.bottomRightCollection.setScrollTop(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.topLeftCollection.setScrollLeft(scrollLeft);
    this.bottomLeftCollection.setScrollLeft(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.topRightCollection.setScrollLeft(scrollLeft);
    this.bottomRightCollection.setScrollLeft(scrollLeft);
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.bottomRightCollection.getScrollTop();
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    return this.bottomLeftCollection.getScrollLeft();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.bottomRightCollection.getScrollLeft();
  },
  setWidth: function setWidth(width) {
    BI.CollectionTable.superclass.setWidth.apply(this, arguments);
    this._width = this.options.width - BI.GridTableScrollbar.SIZE;
  },
  setHeight: function setHeight(height) {
    BI.CollectionTable.superclass.setHeight.apply(this, arguments);
    this._height = this.options.height - BI.GridTableScrollbar.SIZE;
  },
  setColumnSize: function setColumnSize(columnSize) {
    this._isNeedDigest = true;
    this.options.columnSize = columnSize;
  },
  setRegionColumnSize: function setRegionColumnSize(regionColumnSize) {
    this._isNeedDigest = true;
    this.options.regionColumnSize = regionColumnSize;
  },
  getColumnSize: function getColumnSize() {
    return this.options.columnSize;
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.options.regionColumnSize;
  },
  getFirstColumnHeaderRowSize: function getFirstColumnHeaderRowSize() {
    var freezeColLength = this._getFreezeColLength();

    var items = this.topLeftItems;

    if (freezeColLength <= 0) {
      items = this.topRightItems;
    }

    if (this._getFreezeHeaderHeight() <= 0) {
      items = this.bottomLeftItems;

      if (freezeColLength <= 0) {
        items = this.bottomRightItems;
      }

      items = (items || []).slice(0, this.options.header.length);
    }

    var rowHeight = [];
    BI.each(items, function (i, item) {
      if (item.col === 0) {
        rowHeight.push(item.height);
      }
    });
    return rowHeight;
  },
  getFirstColumnRowSize: function getFirstColumnRowSize() {
    var freezeColLength = this._getFreezeColLength();

    var items = this.bottomLeftItems;

    if (freezeColLength <= 0) {
      items = this.bottomRightItems;
    }

    if (this._getFreezeHeaderHeight() <= 0) {
      items = (items || []).slice(this.options.header.length);
    }

    var rowHeight = [];
    BI.each(items, function (i, item) {
      if (item.col === 0) {
        rowHeight.push(item.height);
      }
    });
    return rowHeight;
  },
  getLastColumnRowSize: function getLastColumnRowSize() {
    var items = this.bottomRightItems;

    if (this._getFreezeHeaderHeight() <= 0) {
      items = (items || []).slice(this.options.header.length);
    }

    var max = BI.max(BI.map(items, 'x'));
    var rowHeight = [];
    BI.each(items, function (i, item) {
      if (item.x === max) {
        rowHeight.push(item.height);
      }
    });
    return rowHeight;
  },
  populate: function populate(items, header) {
    if (items && items !== this.options.items) {
      this._isNeedDigest = true;
      this.options.items = items;

      this._restore();
    }

    if (header && header !== this.options.header) {
      this._isNeedDigest = true;
      this.options.header = header;

      this._restore();
    }

    this._populate();
  },
  _restore: function _restore() {
    this.topLeftCollection.restore();
    this.topRightCollection.restore();
    this.bottomLeftCollection.restore();
    this.bottomRightCollection.restore();
  },
  restore: function restore() {
    this._restore();
  }
});
BI.extend(BI.CollectionTable, {
  map: function map(items, startCol, endCol, rowHeight, columnSize, mergeCols, mergeRows, mergeRule, rowHeightsGetter) {
    mergeCols = mergeCols || [];
    mergeRows = mergeRows || [];
    var rowHeightGetter = BI.isFunction(rowHeight) ? rowHeight : function () {
      return rowHeight;
    };
    var result = [],
        cache = {},
        preCol = {},
        preRow = {},
        map = {};
    var summaryColumnSize = [];

    for (var i = startCol; i < endCol; i++) {
      if (i === startCol) {
        summaryColumnSize[i] = columnSize[i];
      } else {
        summaryColumnSize[i] = summaryColumnSize[i - 1] + columnSize[i];
      }
    }

    var mergeRow = function mergeRow(i, j) {
      preCol[j]._height += rowHeightGetter(i);

      preCol[j].__mergeRows.push(i);
    };

    var mergeCol = function mergeCol(i, j) {
      preRow[i]._width += columnSize[j];

      preRow[i].__mergeCols.push(j);
    };

    var createOneEl = function createOneEl(r, c) {
      var width = columnSize[c];
      var height = rowHeightGetter(r);
      map[r][c]._row = r;
      map[r][c]._col = c;
      map[r][c]._width = width;
      map[r][c]._height = height;
      preCol[c] = map[r][c];
      preCol[c].__mergeRows = [r];
      preRow[r] = map[r][c];
      preRow[r].__mergeCols = [c];
      result.push({
        x: summaryColumnSize[c] - columnSize[c],
        y: rowHeightsGetter ? rowHeightsGetter(r) : +r * rowHeight,
        item: map[r][c]
      });
    };

    BI.each(items, function (i, cols) {
      for (var j = startCol; j < endCol; j++) {
        if (!cache[i]) {
          cache[i] = {};
        }

        if (!map[i]) {
          map[i] = {};
        }

        cache[i][j] = cols[j];
        map[i][j] = {};

        if (mergeCols === true || mergeCols.indexOf(j) > -1 || mergeRows === true || mergeRows.indexOf(i) > -1) {
          if (i === 0 && j === startCol) {
            createOneEl(0, startCol);
          } else if (j === startCol && i > 0) {
            var isNeedMergeRow = mergeRule(cache[i][j], cache[i - 1][j]);

            if (isNeedMergeRow === true) {
              mergeRow(i, j);
              preRow[i] = preCol[j];
            } else {
              createOneEl(i, j);
            }
          } else if (i === 0 && j > startCol) {
            var isNeedMergeCol = mergeRule(cache[i][j], cache[i][j - 1]);

            if (isNeedMergeCol === true) {
              mergeCol(i, j);
              preCol[j] = preRow[i];
            } else {
              createOneEl(i, j);
            }
          } else {
            var isNeedMergeRow = mergeRule(cache[i][j], cache[i - 1][j]);
            var isNeedMergeCol = mergeRule(cache[i][j], cache[i][j - 1]);

            if (isNeedMergeCol && isNeedMergeRow) {
              continue; // mergeRow(i, j);//优先合并列
            }

            if (isNeedMergeCol) {
              mergeCol(i, j);
            }

            if (isNeedMergeRow) {
              mergeRow(i, j);
            }

            if (!isNeedMergeCol && !isNeedMergeRow) {
              createOneEl(i, j);
            }
          }
        } else {
          createOneEl(i, j);
        }
      }
    });
    return {
      map: map,
      cells: result
    };
  },
  serialize: function serialize(items, startCol, endCol, rowHeight, columnSize, mergeCols, mergeRows, mergeRule, rowHeightsGetter) {
    var res = BI.CollectionTable.map(items, startCol, endCol, rowHeight, columnSize, mergeCols, mergeRows, mergeRule, rowHeightsGetter);
    return BI.map(res.cells, function (i, item) {
      return {
        x: item.x,
        y: item.y,
        row: item.item._row,
        col: item.item._col,
        width: item.item._width,
        height: item.item._height
      };
    });
  }
});
BI.shortcut("bi.collection_table", BI.CollectionTable);

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * QuickCollectionTable
 *
 * Created by GUY on 2016/1/12.
 * @class BI.QuickCollectionTable
 * @extends BI.CollectionTable
 */
BI.QuickCollectionTable = BI.inherit(BI.CollectionTable, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.QuickCollectionTable.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-quick-collection-table"
    });
  },
  render: function render() {
    BI.QuickCollectionTable.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    this.topLeftCollection.setOverflowX(false);
    this.topLeftCollection.setOverflowY(false);
    this.topRightCollection.setOverflowX(false);
    this.topRightCollection.setOverflowY(false);
    this.bottomLeftCollection.setOverflowX(false);
    this.bottomLeftCollection.setOverflowY(false);
    this.bottomRightCollection.setOverflowX(false);
    this.bottomRightCollection.setOverflowY(false);
  },
  mounted: function mounted() {
    // BI.QuickCollectionTable.superclass.mounted.apply(this, arguments);
    var self = this;
    this._topLeftWheelHandler = new BI.WheelHandler(BI.bind(this._onWheelLeft, this), BI.bind(this._shouldHandleLeftX, this), BI.bind(this._shouldHandleY, this));
    this._topRightWheelHandler = new BI.WheelHandler(BI.bind(this._onWheelRight, this), BI.bind(this._shouldHandleRightX, this), BI.bind(this._shouldHandleY, this));
    this._bottomLeftWheelHandler = new BI.WheelHandler(BI.bind(this._onWheelLeft, this), BI.bind(this._shouldHandleLeftX, this), BI.bind(this._shouldHandleY, this));
    this._bottomRightWheelHandler = new BI.WheelHandler(BI.bind(this._onWheelRight, this), BI.bind(this._shouldHandleRightX, this), BI.bind(this._shouldHandleY, this));
    this.topLeftCollection.element.mousewheel(function (e) {
      self._topLeftWheelHandler.onWheel(e.originalEvent);
    });
    this.topRightCollection.element.mousewheel(function (e) {
      self._topRightWheelHandler.onWheel(e.originalEvent);
    });
    this.bottomLeftCollection.element.mousewheel(function (e) {
      self._bottomLeftWheelHandler.onWheel(e.originalEvent);
    });
    this.bottomRightCollection.element.mousewheel(function (e) {
      self._bottomRightWheelHandler.onWheel(e.originalEvent);
    });
  },
  _shouldHandleLeftX: function _shouldHandleLeftX(delta) {
    if (delta > 0) {
      return this.bottomLeftCollection.getScrollLeft() < this.bottomLeftCollection.getMaxScrollLeft();
    }

    return this.bottomLeftCollection.getScrollLeft() > 0;
  },
  _shouldHandleRightX: function _shouldHandleRightX(delta) {
    if (delta > 0) {
      return this.bottomRightCollection.getScrollLeft() < this.bottomRightCollection.getMaxScrollLeft();
    }

    return this.bottomRightCollection.getScrollLeft() > 0;
  },
  _shouldHandleY: function _shouldHandleY(delta) {
    if (delta > 0) {
      return this.bottomRightCollection.getScrollTop() < this.bottomRightCollection.getMaxScrollTop();
    }

    return this.bottomRightCollection.getScrollTop() > 0;
  },
  _onWheelLeft: function _onWheelLeft(deltaX, deltaY) {
    var self = this;
    var scrollTop = this.bottomLeftCollection.getScrollTop();
    var scrollLeft = this.bottomLeftCollection.getScrollLeft();

    if (Math.abs(deltaY) > Math.abs(deltaX)) {
      deltaX = 0;
    } else {
      deltaY = 0;
    }

    scrollTop += deltaY;
    scrollLeft += deltaX;
    this.bottomLeftCollection.setScrollTop(scrollTop);
    this.bottomRightCollection.setScrollTop(scrollTop);
    this.topLeftCollection.setScrollLeft(scrollLeft);
    this.bottomLeftCollection.setScrollLeft(scrollLeft);

    self._populateScrollbar();

    this.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
  },
  _onWheelRight: function _onWheelRight(deltaX, deltaY) {
    var self = this;
    var scrollTop = this.bottomRightCollection.getScrollTop();
    var scrollLeft = this.bottomRightCollection.getScrollLeft();

    if (Math.abs(deltaY) > Math.abs(deltaX)) {
      deltaX = 0;
    } else {
      deltaY = 0;
    }

    scrollTop += deltaY;
    scrollLeft += deltaX;
    this.bottomLeftCollection.setScrollTop(scrollTop);
    this.bottomRightCollection.setScrollTop(scrollTop);
    this.topRightCollection.setScrollLeft(scrollLeft);
    this.bottomRightCollection.setScrollLeft(scrollLeft);

    self._populateScrollbar();

    this.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
  },
  _populateTable: function _populateTable() {
    var self = this,
        o = this.options;
    var regionSize = this.getRegionSize(),
        totalLeftColumnSize = 0,
        totalRightColumnSize = 0,
        totalColumnSize = 0,
        summaryColumnSizeArray = [];
    BI.each(o.columnSize, function (i, size) {
      if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
        totalLeftColumnSize += size;
      } else {
        totalRightColumnSize += size;
      }

      totalColumnSize += size;

      if (i === 0) {
        summaryColumnSizeArray[i] = size;
      } else {
        summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
      }
    });
    var otlw = regionSize;

    var otlh = this._getFreezeHeaderHeight();

    var otrw = this._width - regionSize;

    var otrh = this._getFreezeHeaderHeight();

    var oblw = regionSize;
    var oblh = this._height - otlh;
    var obrw = this._width - regionSize;
    var obrh = this._height - otrh;
    this.topLeft.setWidth(otlw);
    this.topLeft.setHeight(otlh);
    this.topRight.setWidth(otrw);
    this.topRight.setHeight(otrh);
    this.bottomLeft.setWidth(oblw);
    this.bottomLeft.setHeight(oblh);
    this.bottomRight.setWidth(obrw);
    this.bottomRight.setHeight(obrh);
    this.topLeftCollection.setWidth(otlw);
    this.topLeftCollection.setHeight(otlh);
    this.topRightCollection.setWidth(otrw);
    this.topRightCollection.setHeight(otrh);
    this.bottomLeftCollection.setWidth(oblw);
    this.bottomLeftCollection.setHeight(oblh);
    this.bottomRightCollection.setWidth(obrw);
    this.bottomRightCollection.setHeight(obrh);
    var items = this.contextLayout.attr("items");
    items[1].left = regionSize;
    items[2].top = this._getFreezeHeaderHeight();
    items[3].left = regionSize;
    items[3].top = this._getFreezeHeaderHeight();
    items[4].left = regionSize;
    this.contextLayout.attr("items", items);
    this.contextLayout.resize();
    var leftHeader = [],
        rightHeader = [],
        leftItems = [],
        rightItems = [];

    var run = function run(positions, items, rendered, firstRowTopLine, firstColumnLeftLine) {
      BI.each(positions, function (i, item) {
        if (!firstRowTopLine && o.customCell) {
          items[item.row][item.col]._rowIndex = item.row;
          items[item.row][item.col]._columnIndex = item.col;
          items[item.row][item.col].firstRowTopLine = firstRowTopLine;
          items[item.row][item.col].firstColumnLeftLine = firstColumnLeftLine;
          rendered.push(items[item.row][item.col]);
          return;
        }

        var cell = {
          type: "bi.collection_table_cell",
          cell: items[item.row][item.col],
          _rowIndex: item.row,
          _columnIndex: item.col,
          firstRowTopLine: firstRowTopLine,
          firstColumnLeftLine: firstColumnLeftLine
        };
        rendered.push(cell);
      });
    };

    run(this.topLeftItems, o.header, leftHeader, true, true);
    run(this.topRightItems, o.header, rightHeader, true, this.topLeftItems.length <= 0);
    run(this.bottomLeftItems, this._getActualItems(), leftItems, this.topRightItems.length <= 0, true);
    run(this.bottomRightItems, this._getActualItems(), rightItems, this.topRightItems.length <= 0, this.topLeftItems.length <= 0);

    this.topLeftCollection._populate(leftHeader);

    this.topRightCollection._populate(rightHeader);

    this.bottomLeftCollection._populate(leftItems);

    this.bottomRightCollection._populate(rightItems);
  }
});
BI.shortcut("bi.quick_collection_table", BI.QuickCollectionTable);

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 行高自动算的表格
 *
 * Created by GUY on 2016/1/12.
 * @class BI.AutoHeightCollectionTable
 * @extends BI.Widget
 */
!function () {
  var getTextLines = function getTextLines(text, fontSize, cellWidth, maxLines) {
    var width = 0;
    var lines = 1;
    var charWidth = 0;
    var widths = BI.Constants.getConstant("bi.constant.char.widths");

    for (var i = 0, len = text.length; i < len; i++) {
      var _char = text.charCodeAt(i); // 回车和换行


      if (_char === 13 || _char === 10) {
        width = 0;
        lines++;
        continue;
      }

      if (_char >= 32 && _char <= 126) {
        charWidth = widths[_char] * fontSize;
      } else {
        charWidth = fontSize;
      }

      width += charWidth;

      if (width > cellWidth) {
        width = charWidth;
        lines++;
      }

      if (lines === maxLines) {
        break;
      }
    }

    return lines;
  };

  var getCellRowHeight = function getCellRowHeight(text, fontSize, width, lineHeight, rowGap, rowHeight, maxHeight) {
    var maxLines = Math.ceil((maxHeight - rowGap) / lineHeight);
    var lines = getTextLines(text || '', fontSize, width, maxLines);
    return Math.min(Math.max(lines * lineHeight + rowGap, rowHeight), maxHeight);
  };

  BI.AutoHeightCollectionTable = BI.inherit(BI.CollectionTable, {
    _defaultConfig: function _defaultConfig() {
      return BI.extend(BI.AutoHeightCollectionTable.superclass._defaultConfig.apply(this, arguments), {
        baseCls: "bi-collection-table bi-collection-auto-height-table",
        isAutoHeight: true,
        isHeaderAutoHeight: true,
        fontSize: 12,
        fontLineHeight: 14,
        columnGaps: [],
        rowGap: 1,
        headerFontSize: 12,
        headerFontLineHeight: 14,
        headerColumnGaps: [],
        headerRowGap: 1,
        rowSize: 0,
        // 在这个组件里rowSize表示最小高
        headerRowSize: 0,
        // 在这个组件里rowSize表示最小高
        maxRowSize: 400
      });
    },
    _getFreezeHeaderHeight: function _getFreezeHeaderHeight() {
      var o = this.options;

      if (!o.isHeaderAutoHeight) {
        return BI.AutoHeightCollectionTable.superclass._getFreezeHeaderHeight.call(this);
      }

      if (this.headerIntervalTree) {
        var allHeaderHeight = this.headerIntervalTree.sumUntil(o.header.length);

        if (allHeaderHeight >= this._height) {
          return 0;
        }

        return allHeaderHeight;
      }

      return 0;
    },
    _getActualItems: function _getActualItems() {
      var o = this.options;

      if (!o.isHeaderAutoHeight) {
        return BI.AutoHeightCollectionTable.superclass._getActualItems.call(this);
      }

      if (this.headerIntervalTree) {
        var allHeaderHeight = this.headerIntervalTree.sumUntil(o.header.length);

        if (allHeaderHeight >= this._height) {
          return o.header.concat(o.items);
        }
      }

      return o.items;
    },
    _getContentHeight: function _getContentHeight() {
      var o = this.options;

      if (!o.isAutoHeight && !o.isHeaderAutoHeight) {
        return BI.AutoHeightCollectionTable.superclass._getContentHeight.call(this);
      }

      if (!o.isHeaderAutoHeight) {
        var allHeaderHeight = this._getFreezeHeaderHeight();

        if (allHeaderHeight <= 0) {
          return o.header.length * o.headerRowSize + (this.intervalTree ? this.intervalTree.sumUntil(o.items.length) : 0);
        } else {
          return this.intervalTree ? this.intervalTree.sumUntil(o.items.length) : 0;
        }
      }

      if (!o.isAutoHeight) {
        var allHeaderHeight = this.headerIntervalTree ? this.headerIntervalTree.sumUntil(o.header.length) : 0;

        if (allHeaderHeight >= this._height) {
          return allHeaderHeight + o.items.length * o.rowSize;
        } else {
          return o.items.length * o.rowSize;
        }
      }

      if (this.headerIntervalTree) {
        var allHeaderHeight = this.headerIntervalTree.sumUntil(o.header.length);

        if (allHeaderHeight >= this._height) {
          return allHeaderHeight + this.intervalTree ? this.intervalTree.sumUntil(o.items.length) : 0;
        } else {
          return this.intervalTree ? this.intervalTree.sumUntil(o.items.length) : 0;
        }
      }

      return 0;
    },
    _getOneRowHeight: function _getOneRowHeight(index) {
      var self = this,
          o = this.options;
      var columns = this.options.items[index];
      var maxHeight = 0;
      var heightCache = this.heightCache;

      var freezeColLength = this._getFreezeColLength();

      for (var i = 0, len = columns.length; i < len; i++) {
        var column = columns[i];

        if (heightCache[index] && heightCache[index][i]) {
          var cellHeight = heightCache[index][i];
        } else {
          var cell = self.mergeRules.map[index] && self.mergeRules.map[index][i];
          var mergeRows = cell && cell.__mergeRows || [];
          var mergeCols = cell && cell.__mergeCols || []; // 要考虑行合并和列合并的情况

          var columnSize = o.columnSize[i] - (o.columnGaps[i] || 0) - ((BI.isFunction(column.columnGap) ? column.columnGap() : column.columnGap) || 0) - (i === 0 || i === freezeColLength ? 2 : 1) - (column.layer || 0) * 30;

          if (mergeCols.length > 1) {
            // 合并列每一列要累计
            for (var t = 1; t < mergeCols.length; t++) {
              columnSize += o.columnSize[i + t];
            }

            i += mergeCols.length - 1;
          }

          var cellHeight = getCellRowHeight(column.text, o.fontSize, columnSize, o.fontLineHeight, o.rowGap, o.rowSize, o.maxRowSize);
          cellHeight = cellHeight / (mergeRows.length || 1);

          if (mergeRows.length > 0) {
            // 合并行每一行要使用平均值
            for (var t = index; t < index + mergeRows.length; t++) {
              if (!heightCache[t]) {
                heightCache[t] = {};
              }

              heightCache[t][i] = cellHeight;
            }
          }
        }

        if (cellHeight >= o.maxRowSize) {
          return o.maxRowSize;
        }

        maxHeight = Math.max(maxHeight, cellHeight);
      }

      return maxHeight;
    },
    _getOneHeaderRowHeight: function _getOneHeaderRowHeight(index) {
      var self = this,
          o = this.options;
      var columns = this.options.header[index];
      var maxHeight = 0;
      var heightCache = this.headerHeightCache;

      var freezeColLength = this._getFreezeColLength();

      for (var i = 0, len = columns.length; i < len; i++) {
        var column = columns[i];

        if (heightCache[index] && heightCache[index][i]) {
          var cellHeight = heightCache[index][i];
        } else {
          var cell = self.headerMergeRules.map[index] && self.headerMergeRules.map[index][i];
          var mergeRows = cell && cell.__mergeRows || [];
          var mergeCols = cell && cell.__mergeCols || []; // 要考虑行合并和列合并的情况

          var columnSize = o.columnSize[i] - (o.columnGaps[i] || 0) - ((column.cell ? BI.isFunction(column.cell.columnGap) ? column.cell.columnGap() : column.cell.columnGap : column.columnGap) || 0) - (i === 0 || i === freezeColLength ? 2 : 1);

          if (mergeCols.length > 1) {
            // 合并列每一列要累计
            for (var t = 1; t < mergeCols.length; t++) {
              columnSize += o.columnSize[i + t];
            }

            i += mergeCols.length - 1;
          }

          var cellHeight = getCellRowHeight(column.cell ? column.cell.text : column.text, o.headerFontSize, columnSize, o.headerFontLineHeight, o.headerRowGap, o.headerRowSize, o.maxRowSize);
          cellHeight = cellHeight / (mergeRows.length || 1);

          if (mergeRows.length > 0) {
            // 合并行每一行要使用平均值
            for (var t = index; t < index + mergeRows.length; t++) {
              if (!heightCache[t]) {
                heightCache[t] = {};
              }

              heightCache[t][i] = cellHeight;
            }
          }
        }

        if (cellHeight >= o.maxRowSize) {
          return o.maxRowSize;
        }

        maxHeight = Math.max(maxHeight, cellHeight);
      }

      return maxHeight;
    },
    _getActualRowHeights: function _getActualRowHeights() {
      var self = this,
          o = this.options;
      var items = this.options.items; // logn复杂度算线段树长

      this.intervalTree = BI.PrefixIntervalTree.empty(o.items.length);
      this.heightCache = {}; // 先计算一遍合并规则

      this.mergeRules = BI.CollectionTable.map(o.items, 0, this._getFreezeColLength(), o.rowSize, o.columnSize, o.mergeCols, [], o.mergeRule);
      BI.each(items, function (i, row) {
        self.intervalTree.set(i, self._getOneRowHeight(i));
      });
      return this.intervalTree;
    },
    _getActualHeaderRowHeights: function _getActualHeaderRowHeights() {
      var self = this,
          o = this.options;
      var items = this.options.header; // logn复杂度算线段树长

      this.headerIntervalTree = BI.PrefixIntervalTree.empty(o.header.length);
      this.headerHeightCache = {}; // 先计算一遍合并规则

      this.headerMergeRules = BI.CollectionTable.map(o.header, this._getFreezeColLength(), o.columnSize.length, o.headerRowSize, o.columnSize, true, [], o.mergeRule);
      BI.each(items, function (i, row) {
        self.headerIntervalTree.set(i, self._getOneHeaderRowHeight(i));
      });
      return this.headerIntervalTree;
    },
    _digest: function _digest() {
      var self = this,
          o = this.options;

      if (!o.isAutoHeight && !o.isHeaderAutoHeight) {
        return BI.AutoHeightCollectionTable.superclass._digest.call(this);
      }

      if (o.isHeaderAutoHeight) {
        this._getActualHeaderRowHeights();

        var allHeaderHeight = this.headerIntervalTree.sumUntil(o.header.length);
      } else {
        var allHeaderHeight = o.header.length * o.headerRowSize;
      }

      if (o.isAutoHeight) {
        this._getActualRowHeights();
      }

      var freezeColLength = this._getFreezeColLength(); // 如果表头位置不够，取消表头冻结


      if (allHeaderHeight >= this._height) {
        var heightCache = {},
            allHeightCache = {};
        this.topLeftItems = [];
        this.topRightItems = [];
        this.bottomLeftItems = BI.CollectionTable.serialize(this._getActualItems(), 0, freezeColLength, function (row) {
          if (heightCache[row]) {
            return heightCache[row];
          }

          if (row <= o.header.length - 1) {
            if (!o.isHeaderAutoHeight) {
              return heightCache[row] = o.headerRowSize;
            }

            return heightCache[row] = self.headerIntervalTree.get(row);
          }

          if (!o.isAutoHeight) {
            return heightCache[row] = o.rowSize;
          }

          return heightCache[row] = self.intervalTree.get(row - o.header.length);
        }, o.columnSize, o.mergeCols, BI.range(o.header.length), o.mergeRule, function (rows) {
          if (rows <= 0) {
            return 0;
          }

          if (allHeightCache[rows]) {
            return allHeightCache[rows];
          }

          if (rows <= o.header.length) {
            if (!o.isHeaderAutoHeight) {
              return allHeightCache[rows] = rows * o.headerRowSize;
            }

            return allHeightCache[rows] = self.headerIntervalTree.sumUntil(rows);
          }

          if (!o.isAutoHeight) {
            return allHeightCache[rows] = allHeaderHeight + (rows - o.header.length) * o.rowSize;
          }

          return allHeightCache[rows] = allHeaderHeight + self.intervalTree.sumUntil(rows - o.header.length);
        });
        this.bottomRightItems = BI.CollectionTable.serialize(this._getActualItems(), freezeColLength, o.columnSize.length, function (row) {
          if (heightCache[row]) {
            return heightCache[row];
          }

          if (row <= o.header.length - 1) {
            if (!o.isHeaderAutoHeight) {
              return heightCache[row] = o.headerRowSize;
            }

            return heightCache[row] = self.headerIntervalTree.get(row);
          }

          if (!o.isAutoHeight) {
            return heightCache[row] = o.rowSize;
          }

          return heightCache[row] = self.intervalTree.get(row - o.header.length);
        }, o.columnSize, o.mergeCols, BI.range(o.header.length), o.mergeRule, function (rows) {
          if (rows <= 0) {
            return 0;
          }

          if (allHeightCache[rows]) {
            return allHeightCache[rows];
          }

          if (rows <= o.header.length) {
            if (!o.isHeaderAutoHeight) {
              return allHeightCache[rows] = rows * o.headerRowSize;
            }

            return allHeightCache[rows] = self.headerIntervalTree.sumUntil(rows);
          }

          if (!o.isAutoHeight) {
            return allHeightCache[rows] = allHeaderHeight + (rows - o.header.length) * o.rowSize;
          }

          return allHeightCache[rows] = allHeaderHeight + self.intervalTree.sumUntil(rows - o.header.length);
        });
      } else {
        var headerHeightCache = {},
            headerAllHeightCache = {};
        var itemHeightCache = {},
            itemAllHeightCache = {};
        this.topLeftItems = BI.CollectionTable.serialize(o.header, 0, freezeColLength, function (row) {
          if (headerHeightCache[row]) {
            return headerHeightCache[row];
          }

          if (!o.isHeaderAutoHeight) {
            return headerHeightCache[row] = o.headerRowSize;
          }

          return headerHeightCache[row] = self.headerIntervalTree.get(row);
        }, o.columnSize, o.mergeCols, [], o.mergeRule, function (rows) {
          if (rows === 0) {
            return 0;
          }

          if (headerAllHeightCache[rows]) {
            return headerAllHeightCache[rows];
          }

          if (!o.isHeaderAutoHeight) {
            return rows * o.headerRowSize;
          }

          return headerAllHeightCache[rows] = self.headerIntervalTree.sumUntil(rows);
        });
        this.topRightItems = BI.CollectionTable.serialize(o.header, freezeColLength, o.columnSize.length, function (row) {
          if (headerHeightCache[row]) {
            return headerHeightCache[row];
          }

          if (!o.isHeaderAutoHeight) {
            return headerHeightCache[row] = o.headerRowSize;
          }

          return headerHeightCache[row] = self.headerIntervalTree.get(row);
        }, o.columnSize, true, [], o.mergeRule, function (rows) {
          if (rows === 0) {
            return 0;
          }

          if (headerAllHeightCache[rows]) {
            return headerAllHeightCache[rows];
          }

          if (!o.isHeaderAutoHeight) {
            return rows * o.headerRowSize;
          }

          return headerAllHeightCache[rows] = self.headerIntervalTree.sumUntil(rows);
        });
        this.bottomLeftItems = BI.CollectionTable.serialize(o.items, 0, freezeColLength, function (row) {
          if (itemHeightCache[row]) {
            return itemHeightCache[row];
          }

          if (!o.isAutoHeight) {
            return itemHeightCache[row] = o.rowSize;
          }

          return itemHeightCache[row] = self.intervalTree.get(row);
        }, o.columnSize, o.mergeCols, [], o.mergeRule, function (rows) {
          if (rows === 0) {
            return 0;
          }

          if (itemAllHeightCache[rows]) {
            return itemAllHeightCache[rows];
          }

          if (!o.isAutoHeight) {
            return rows * o.rowSize;
          }

          return itemAllHeightCache[rows] = self.intervalTree.sumUntil(rows);
        });
        this.bottomRightItems = BI.CollectionTable.serialize(o.items, freezeColLength, o.columnSize.length, function (row) {
          if (itemHeightCache[row]) {
            return itemHeightCache[row];
          }

          if (!o.isAutoHeight) {
            return itemHeightCache[row] = o.rowSize;
          }

          return itemHeightCache[row] = self.intervalTree.get(row);
        }, o.columnSize, o.mergeCols, [], o.mergeRule, function (rows) {
          if (rows === 0) {
            return 0;
          }

          if (itemAllHeightCache[rows]) {
            return itemAllHeightCache[rows];
          }

          if (!o.isAutoHeight) {
            return rows * o.rowSize;
          }

          return itemAllHeightCache[rows] = self.intervalTree.sumUntil(rows);
        });
      } // this.topLeftCollection.restore();
      // this.topRightCollection.restore();
      // this.bottomLeftCollection.restore();
      // this.bottomRightCollection.restore();

    }
  });
  BI.shortcut("bi.collection_auto_height_table", BI.AutoHeightCollectionTable);
}();

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  /**
   * DynamicGridTable
   *
   * Created by GUY on 2020/6/26.
   * @class GridTable
   * @extends BI.Widget
   */
  var GridTable = BI.DynamicCollectionTable = BI.inherit(BI.Widget, {
    _defaultConfig: function _defaultConfig() {
      return BI.extend(GridTable.superclass._defaultConfig.apply(this, arguments), {
        baseCls: "bi-dynamic-collection-table",
        headerRowSize: 25,
        // rowSize: 25,
        columnSize: [],
        isNeedFreeze: false,
        freezeCols: [],
        isNeedMerge: false,
        mergeCols: [],
        mergeRule: BI.emptyFn,
        header: [],
        items: [],
        regionColumnSize: [],
        trRenderer: null,
        headerEl: {},
        bodyEl: {},
        bordered: true
      });
    },
    attr: function attr(key, value) {
      var v = GridTable.superclass.attr.apply(this, arguments);

      if (!BI.isNull(value)) {
        return v;
      }

      this.topRightCollection.attr.apply(this.topRightCollection, arguments);
      return this.bottomRightCollection.attr.apply(this.bottomRightCollection, arguments);
    },
    render: function render() {
      var self = this,
          o = this.options;
      this._width = 0;
      this._height = 0;
      this.topLeftCollection = BI.createWidget({
        type: "bi.dynamic_collection_view",
        stopScrollEvent: true,
        renderMore: true,
        columnSize: o.columnSize.slice(0, o.freezeCols.length),
        isNeedMerge: o.isNeedMerge,
        mergeCols: o.mergeCols,
        mergeRule: o.mergeRule,
        rowSizeGetter: function rowSizeGetter(index) {
          return o.headerRowSize;
        }
      });
      this.topLeftCollection.on(BI.CollectionView.EVENT_SCROLL, function (scroll) {
        self.bottomLeftCollection.setScrollLeft(scroll.scrollLeft);

        self._populateScrollbar();

        self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
      });
      this.topRightCollection = BI.createWidget({
        type: "bi.dynamic_collection_view",
        columnSize: o.columnSize,
        isNeedFreeze: o.isNeedFreeze,
        freezeCols: o.freezeCols,
        isNeedMerge: o.isNeedMerge,
        mergeCols: o.mergeCols,
        mergeRule: o.mergeRule,
        regionColumnSize: o.regionColumnSize,
        rowSizeGetter: function rowSizeGetter(index) {
          return o.headerRowSize;
        }
      });
      this.topRightCollection.on(BI.CollectionView.EVENT_SCROLL, function (scroll) {
        self.bottomRightCollection.setScrollLeft(scroll.scrollLeft);

        self._populateScrollbar();

        self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
      });
      this.bottomRightCollection = BI.createWidget({
        type: "bi.dynamic_collection_view",
        columnSize: o.columnSize,
        isNeedFreeze: o.isNeedFreeze,
        freezeCols: o.freezeCols,
        isNeedMerge: o.isNeedMerge,
        mergeCols: o.mergeCols,
        mergeRule: o.mergeRule,
        regionColumnSize: o.regionColumnSize,
        trRenderer: o.trRenderer,
        el: o.bodyEl
      });
      this.bottomRightCollection.on(BI.CollectionView.EVENT_SCROLL, function (scroll) {
        self.bottomLeftCollection.setScrollTop(scroll.scrollTop);
        self.topRightCollection.setScrollLeft(scroll.scrollLeft);

        self._populateScrollbar();

        self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
      });
      this.bottomRightCollection.on("EVENT_SYNC", function () {
        self.bottomLeftCollection._calculateBlocksToRender();
      });
      this.bottomLeftCollection = BI.createWidget({
        type: "bi.dynamic_collection_view",
        stopScrollEvent: true,
        renderMore: true,
        columnSize: o.columnSize.slice(0, o.freezeCols.length),
        isNeedMerge: o.isNeedMerge,
        mergeCols: o.mergeCols,
        mergeRule: o.mergeRule,
        rowSizeGetter: function rowSizeGetter(index) {
          return self.bottomRightCollection.trCache[index].element.height();
        },
        trRenderer: o.trRenderer
      });
      this.bottomLeftCollection.on(BI.CollectionView.EVENT_SCROLL, function (scroll) {
        self.bottomRightCollection.setScrollTop(scroll.scrollTop);
        self.topLeftCollection.setScrollLeft(scroll.scrollLeft);

        self._populateScrollbar();

        self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
      });
      this.topLeft = BI.createWidget({
        type: "bi.vertical",
        scrollable: false,
        scrolly: false,
        items: [this.topLeftCollection]
      });
      this.topRight = BI.createWidget({
        type: "bi.vertical",
        scrollable: false,
        scrolly: false,
        items: [this.topRightCollection]
      });
      this.bottomLeft = BI.createWidget({
        type: "bi.vertical",
        scrollable: false,
        scrolly: false,
        items: [this.bottomLeftCollection]
      });
      this.bottomRight = BI.createWidget({
        type: "bi.vertical",
        // scrollable: false,
        scrolly: false,
        items: [this.bottomRightCollection]
      });
      this.contextLayout = BI.createWidget({
        type: "bi.absolute",
        cls: o.bordered ? "bordered bi-split" : "",
        element: this,
        items: [{
          el: this.topLeft,
          top: 0,
          left: 0
        }, {
          el: this.topRight,
          top: 0
        }, {
          el: this.bottomLeft,
          left: 0
        }, {
          el: this.bottomRight
        }]
      }); // this.topScrollbar = BI.createWidget({
      //     type: "bi.grid_table_scrollbar",
      //     width: BI.GridTableScrollbar.SIZE
      // });
      // this.topScrollbar.on(BI.GridTableScrollbar.EVENT_SCROLL, function (scrollTop) {
      //     self.bottomLeftCollection.setScrollTop(scrollTop);
      //     self.bottomRightCollection.setScrollTop(scrollTop);
      //     self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
      // });

      this.leftScrollbar = BI.createWidget({
        type: "bi.grid_table_horizontal_scrollbar",
        height: BI.GridTableScrollbar.SIZE
      });
      this.leftScrollbar.on(BI.GridTableScrollbar.EVENT_SCROLL, function (scrollLeft) {
        self.topLeftCollection.setScrollLeft(scrollLeft);
        self.bottomLeftCollection.setScrollLeft(scrollLeft);
        self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
      }); // this.rightScrollbar = BI.createWidget({
      //     type: "bi.grid_table_horizontal_scrollbar",
      //     height: BI.GridTableScrollbar.SIZE
      // });
      // this.rightScrollbar.on(BI.GridTableScrollbar.EVENT_SCROLL, function (scrollLeft) {
      //     self.topRightCollection.setScrollLeft(scrollLeft);
      //     self.bottomRightCollection.setScrollLeft(scrollLeft);
      //     self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
      // });

      this.scrollBarLayout = BI.createWidget({
        type: "bi.absolute",
        element: this,
        items: [{
          el: this.leftScrollbar,
          left: 0,
          bottom: 0
        }]
      });
      this._width = o.width - BI.GridTableScrollbar.SIZE;
      this._height = o.height - BI.GridTableScrollbar.SIZE;

      if (!(BI.isChrome() && BI.isWindows() && !BI.isEdge())) {
        BI.createWidget({
          type: "bi.absolute",
          element: this,
          items: [{
            el: {
              type: "bi.default",
              cls: "bi-table-fix-scroll"
            },
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          }]
        });
      }
    },
    mounted: function mounted() {
      var o = this.options;

      if (o.header.length > 0 || o.items.length > 0) {
        this._digest();

        this._populate();
      }
    },
    _getFreezeColLength: function _getFreezeColLength() {
      var o = this.options;
      return o.isNeedFreeze === true ? BI.clamp(o.freezeCols.length, 0, o.columnSize.length) : 0;
    },
    _getFreezeHeaderHeight: function _getFreezeHeaderHeight() {
      var o = this.options;

      if (o.header.length * o.headerRowSize >= this._height) {
        return 0;
      }

      return o.header.length * o.headerRowSize;
    },
    _getActualItems: function _getActualItems() {
      var o = this.options;

      if (o.header.length * o.headerRowSize >= this._height) {
        return o.header.concat(o.items);
      }

      return o.items;
    },
    _populateScrollbar: function _populateScrollbar() {
      var o = this.options;
      var regionSize = this.getRegionSize(),
          totalLeftColumnSize = 0,
          totalRightColumnSize = 0,
          totalColumnSize = 0,
          summaryColumnSizeArray = [];
      BI.each(o.columnSize, function (i, size) {
        if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
          totalLeftColumnSize += size;
        } else {
          totalRightColumnSize += size;
        }

        totalColumnSize += size;

        if (i === 0) {
          summaryColumnSizeArray[i] = size;
        } else {
          summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
        }
      }); // this.topScrollbar.setContentSize(this._getActualItems().length * o.rowSize);
      // this.topScrollbar.setSize(this._height - this._getFreezeHeaderHeight());
      // this.topScrollbar.setPosition(this.bottomRightCollection.getScrollTop());
      // this.topScrollbar.populate();

      this.leftScrollbar.setContentSize(totalLeftColumnSize);
      this.leftScrollbar.setSize(regionSize);
      this.leftScrollbar.setPosition(this.bottomLeftCollection.getScrollLeft());
      this.leftScrollbar.populate(); // this.rightScrollbar.setContentSize(totalRightColumnSize);
      // this.rightScrollbar.setSize(this._width - regionSize);
      // this.rightScrollbar.setPosition(this.bottomRightCollection.getScrollLeft());
      // this.rightScrollbar.populate();

      var items = this.scrollBarLayout.attr("items"); // items[0].top = this._getFreezeHeaderHeight();

      items[0].top = this._height; // items[2].top = this._height;
      // items[2].left = regionSize;

      this.scrollBarLayout.attr("items", items);
      this.scrollBarLayout.resize();
    },
    _populateTable: function _populateTable() {
      var self = this,
          o = this.options;
      var regionSize = this.getRegionSize(),
          totalLeftColumnSize = 0,
          totalRightColumnSize = 0,
          totalColumnSize = 0,
          summaryColumnSizeArray = [];
      BI.each(o.columnSize, function (i, size) {
        if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
          totalLeftColumnSize += size;
        } else {
          totalRightColumnSize += size;
        }

        totalColumnSize += size;

        if (i === 0) {
          summaryColumnSizeArray[i] = size;
        } else {
          summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
        }
      });
      var otlw = regionSize;

      var otlh = this._getFreezeHeaderHeight();

      var otrw = this._width - regionSize;

      var otrh = this._getFreezeHeaderHeight();

      var oblw = regionSize;
      var oblh = this._height - otlh;
      var obrw = this._width - regionSize;
      var obrh = this._height - otrh;
      var scrollBarSize = BI.DOM.getScrollWidth();
      var tlw = otlw + scrollBarSize;
      var tlh = otlh + scrollBarSize;
      var trw = otrw + scrollBarSize;
      var trh = otrh + scrollBarSize;
      var blw = oblw + scrollBarSize;
      var blh = oblh + scrollBarSize;
      var brw = obrw + scrollBarSize;
      var brh = obrh + scrollBarSize;

      var digest = function digest(el) {
        el.element.css({
          overflow: "scroll",
          overflowX: "scroll",
          overflowY: "scroll"
        });
      };

      this.topLeft.setWidth(otlw);
      this.topLeft.setHeight(otlh);
      this.topRight.setWidth(otrw);
      this.topRight.setHeight(otrh);
      this.bottomLeft.setWidth(oblw);
      this.bottomLeft.setHeight(oblh);
      this.bottomRight.setWidth(obrw);
      this.bottomRight.setHeight(obrh);
      this.topLeftCollection.setWidth(tlw);
      this.topLeftCollection.setHeight(tlh);
      this.topRightCollection.setWidth(trw);
      this.topRightCollection.setHeight(trh);
      this.bottomLeftCollection.setWidth(blw);
      this.bottomLeftCollection.setHeight(blh);
      this.bottomRightCollection.setWidth(brw);
      this.bottomRightCollection.setHeight(brh);
      digest(this.topLeftCollection);
      digest(this.topRightCollection);
      digest(this.bottomLeftCollection); // if (o.isNeedFreeze && o.freezeCols.length > 0) {

      digest(this.bottomRightCollection); // }

      var items = this.contextLayout.attr("items");
      items[1].left = regionSize;
      items[2].top = this._getFreezeHeaderHeight();
      items[3].left = regionSize;
      items[3].top = this._getFreezeHeaderHeight();
      this.contextLayout.attr("items", items);
      this.contextLayout.resize();
      var leftHeader = [],
          rightHeader = [],
          leftItems = [],
          rightItems = [];

      var run = function run(positions, items, rendered, firstRowTopLine, firstColumnLeftLine) {
        BI.each(positions, function (i, item) {
          if (o.customCell) {
            items[item.row][item.col]._rowIndex = item.row;
            items[item.row][item.col]._columnIndex = item.col;
            items[item.row][item.col].firstRowTopLine = firstRowTopLine;
            items[item.row][item.col].firstColumnLeftLine = firstColumnLeftLine;
            rendered.push(items[item.row][item.col]);
            return;
          }

          var cell = {
            type: "bi.collection_table_cell",
            cell: items[item.row][item.col],
            _rowIndex: item.row,
            _columnIndex: item.col,
            firstRowTopLine: firstRowTopLine,
            firstColumnLeftLine: firstColumnLeftLine
          };
          rendered.push(cell);
        });
      }; // run(this.topLeftItems, o.header, leftHeader, true, true);
      // run(this.topRightItems, o.header, rightHeader, true, this.topLeftItems.length <= 0);
      // run(this.bottomLeftItems, this._getActualItems(), leftItems, this.topRightItems.length <= 0, true);
      // run(this.bottomRightItems, this._getActualItems(), rightItems, this.topRightItems.length <= 0, this.topLeftItems.length <= 0);
      // if (o.isNeedFreeze && o.freezeCols.length > 0) {
      // }


      this.topRightCollection.setColumnSize(o.columnSize);

      this.topRightCollection._populate(o.header);

      this.bottomRightCollection.setColumnSize(o.columnSize);

      this.bottomRightCollection._populate(o.items);

      if (o.isNeedFreeze && o.freezeCols.length > 0) {
        this.topLeftCollection.setColumnSize(o.columnSize.slice(0, o.freezeCols.length));

        this.topLeftCollection._populate(BI.map(o.header, function (i, rows) {
          return rows.slice(0, o.freezeCols.length);
        }));

        this.bottomLeftCollection.setColumnSize(o.columnSize.slice(0, o.freezeCols.length));

        this.bottomLeftCollection._populate(BI.map(o.items, function (i, rows) {
          return rows.slice(0, o.freezeCols.length);
        }));
      }
    },
    _digest: function _digest() {
      var o = this.options; // var freezeColLength = this._getFreezeColLength();
      // 如果表头位置不够，取消表头冻结
      // if (this._getFreezeHeaderHeight() <= 0) {
      //     this.topLeftItems = [];
      //     this.topRightItems = [];
      //     this.bottomLeftItems = BI.CollectionTable.serialize(this._getActualItems(), 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols, BI.range(o.header.length), o.mergeRule);
      //     this.bottomRightItems = BI.CollectionTable.serialize(this._getActualItems(), freezeColLength, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols, BI.range(o.header.length), o.mergeRule);
      // } else {
      // this.topLeftItems = BI.CollectionTable.serialize(o.header, 0, freezeColLength, o.headerRowSize, o.columnSize, o.mergeCols, [], o.mergeRule);
      // this.topRightItems = BI.CollectionTable.serialize(o.header, freezeColLength, o.columnSize.length, o.headerRowSize, o.columnSize, true, [], o.mergeRule);
      // this.bottomLeftItems = BI.CollectionTable.serialize(o.items, 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols, [], o.mergeRule);
      // this.bottomRightItems = BI.CollectionTable.serialize(o.items, 0, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols, [], o.mergeRule);
      // }
    },
    _populate: function _populate() {
      if (this._width <= 0 || this._height <= 0) {
        return;
      }

      if (this._isNeedDigest === true) {
        this._digest();
      }

      this._isNeedDigest = false;

      this._populateTable();

      this._populateScrollbar();
    },
    getRegionSize: function getRegionSize() {
      var o = this.options;
      var regionSize = o.regionColumnSize[0] || 0;

      if (o.isNeedFreeze === false || o.freezeCols.length === 0) {
        return 0;
      }

      if (!regionSize) {
        BI.each(o.freezeCols, function (i, col) {
          regionSize += o.columnSize[col];
        });
      }

      return regionSize;
    },
    setVerticalScroll: function setVerticalScroll(scrollTop) {},
    setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {},
    setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {},
    getVerticalScroll: function getVerticalScroll() {
      return this.bottomRightCollection.getScrollTop();
    },
    getLeftHorizontalScroll: function getLeftHorizontalScroll() {
      return this.bottomLeftCollection.getScrollLeft();
    },
    getRightHorizontalScroll: function getRightHorizontalScroll() {
      return this.bottomRightCollection.getScrollLeft();
    },
    setWidth: function setWidth(width) {
      GridTable.superclass.setWidth.apply(this, arguments);
      this._width = this.options.width - BI.GridTableScrollbar.SIZE;
    },
    setHeight: function setHeight(height) {
      GridTable.superclass.setHeight.apply(this, arguments);
      this._height = this.options.height - BI.GridTableScrollbar.SIZE;
    },
    setColumnSize: function setColumnSize(columnSize) {
      this._isNeedDigest = true;
      this.options.columnSize = columnSize;
      this.topRightCollection.setColumnSize(columnSize);
      this.bottomRightCollection.setColumnSize(columnSize);
    },
    setRegionColumnSize: function setRegionColumnSize(regionColumnSize) {
      this._isNeedDigest = true;
      this.options.regionColumnSize = regionColumnSize;
      this.topRightCollection.setRegionColumnSize(regionColumnSize);
      this.bottomRightCollection.setRegionColumnSize(regionColumnSize);
    },
    getColumnSize: function getColumnSize() {
      return this.options.columnSize;
    },
    getRegionColumnSize: function getRegionColumnSize() {
      return this.options.regionColumnSize;
    },
    populate: function populate(items, header) {
      if (items && items !== this.options.items) {
        this._isNeedDigest = true;
        this.options.items = items;

        this._restore();
      }

      if (header && header !== this.options.header) {
        this._isNeedDigest = true;
        this.options.header = header;

        this._restore();
      }

      this._populate();
    },
    _restore: function _restore() {
      this.topLeftCollection.restore();
      this.topRightCollection.restore();
      this.bottomLeftCollection.restore();
      this.bottomRightCollection.restore();
    },
    restore: function restore() {
      this._restore();
    }
  });
  BI.shortcut("bi.dynamic_collection_table", GridTable);
}();

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 表格单元格
 *
 * Created by GUY on 2016/1/12.
 * @class BI.GridTableCell
 * @extends BI.Widget
 */
BI.GridTableCell = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.GridTableCell.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-grid-table-cell  bi-border-right bi-border-bottom",
      width: 0,
      height: 0,
      firstRowTopLine: true,
      firstColumnLeftLine: true,
      _rowIndex: 0,
      _columnIndex: 0,
      _left: 0,
      _top: 0,
      cell: {}
    });
  },
  _init: function _init() {
    BI.GridTableCell.superclass._init.apply(this, arguments);

    var o = this.options;
    this.cell = BI.createWidget(BI.extend({
      type: "bi.label"
    }, o.cell, {
      cls: (o.cell.cls || "") + " grid-table-cell-wrapper",
      width: o.width - (o.firstColumnLeftLine && o._columnIndex === 0 ? 1 : 0) - 1,
      height: o.height - (o.firstRowTopLine && o._rowIndex === 0 ? 1 : 0) - 1
    }));
    BI.createWidget({
      type: "bi.absolute",
      cls: (o.firstRowTopLine ? "bi-grid-table-cell-top-line" : "") + (o.firstColumnLeftLine ? " bi-grid-table-cell-left-line" : ""),
      element: this,
      items: [{
        el: this.cell,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
  },
  setWidth: function setWidth(width) {
    BI.GridTableCell.superclass.setWidth.apply(this, arguments);
    var o = this.options;
    this.cell.setWidth(o.width - (o.firstColumnLeftLine && o._columnIndex === 0 ? 1 : 0) - 1);
  },
  setHeight: function setHeight(height) {
    BI.GridTableCell.superclass.setHeight.apply(this, arguments);
    var o = this.options;
    this.cell.setHeight(o.height - (o.firstRowTopLine && o._rowIndex === 0 ? 1 : 0) - 1);
  }
});
BI.shortcut("bi.grid_table_cell", BI.GridTableCell);

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * GridTable
 *
 * Created by GUY on 2016/1/12.
 * @class BI.GridTable
 * @extends BI.Widget
 */
BI.GridTable = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.GridTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-grid-table",
      headerRowSize: 25,
      rowSize: 25,
      columnSize: [],
      isNeedFreeze: false,
      freezeCols: [],
      header: [],
      items: [],
      regionColumnSize: [],
      customCell: false // 自定义单元格处理

    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this._width = 0;
    this._height = 0;

    var columnLeftWidthGetter = function columnLeftWidthGetter(index) {
      return o.columnSize[index];
    };

    var columnRightWidthGetter = function columnRightWidthGetter(index) {
      return o.columnSize[index + self._getFreezeColLength()];
    };

    this.topLeftGrid = BI.createWidget({
      type: "bi.grid_view",
      overflowX: !BI.isFireFox(),
      overflowY: !BI.isFireFox(),
      rowHeightGetter: this._headerRowHeightGetter.bind(this),
      columnWidthGetter: columnLeftWidthGetter
    });
    this.topLeftGrid.on(BI.GridView.EVENT_SCROLL, function (scroll) {
      self.bottomLeftGrid.setScrollLeft(scroll.scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.topRightGrid = BI.createWidget({
      type: "bi.grid_view",
      overflowX: !BI.isFireFox(),
      overflowY: !BI.isFireFox(),
      rowHeightGetter: this._headerRowHeightGetter.bind(this),
      columnWidthGetter: columnRightWidthGetter
    });
    this.topRightGrid.on(BI.GridView.EVENT_SCROLL, function (scroll) {
      self.bottomRightGrid.setScrollLeft(scroll.scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.bottomLeftGrid = BI.createWidget({
      type: "bi.grid_view",
      overflowX: !BI.isFireFox(),
      overflowY: !BI.isFireFox(),
      rowHeightGetter: this._rowHeightGetter.bind(this),
      columnWidthGetter: columnLeftWidthGetter
    });
    this.bottomLeftGrid.on(BI.GridView.EVENT_SCROLL, function (scroll) {
      self.bottomRightGrid.setScrollTop(scroll.scrollTop);
      self.topLeftGrid.setScrollLeft(scroll.scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.bottomRightGrid = BI.createWidget({
      type: "bi.grid_view",
      overflowX: !BI.isFireFox(),
      overflowY: !BI.isFireFox(),
      rowHeightGetter: this._rowHeightGetter.bind(this),
      columnWidthGetter: columnRightWidthGetter
    });
    this.bottomRightGrid.on(BI.GridView.EVENT_SCROLL, function (scroll) {
      self.bottomLeftGrid.setScrollTop(scroll.scrollTop);
      self.topRightGrid.setScrollLeft(scroll.scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.topLeft = BI.createWidget({
      type: "bi.vertical",
      scrollable: false,
      scrolly: false,
      items: [this.topLeftGrid]
    });
    this.topRight = BI.createWidget({
      type: "bi.vertical",
      scrollable: false,
      scrolly: false,
      items: [this.topRightGrid]
    });
    this.bottomLeft = BI.createWidget({
      type: "bi.vertical",
      scrollable: false,
      scrolly: false,
      items: [this.bottomLeftGrid]
    });
    this.bottomRight = BI.createWidget({
      type: "bi.vertical",
      scrollable: false,
      scrolly: false,
      items: [this.bottomRightGrid]
    });
    this.shadow = BI.createWidget({
      type: "bi.layout",
      cls: "grid-table-shadow"
    });
    this.contextLayout = BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.topLeft,
        top: 0,
        left: 0
      }, {
        el: this.topRight,
        top: 0
      }, {
        el: this.bottomLeft,
        left: 0
      }, {
        el: this.bottomRight
      }, {
        el: this.shadow,
        top: 0,
        bottom: 0
      }]
    });
    this.topScrollbar = BI.createWidget({
      type: "bi.grid_table_scrollbar",
      width: BI.GridTableScrollbar.SIZE
    });
    this.topScrollbar.on(BI.GridTableScrollbar.EVENT_SCROLL, function (scrollTop) {
      self.bottomLeftGrid.setScrollTop(scrollTop);
      self.bottomRightGrid.setScrollTop(scrollTop);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.leftScrollbar = BI.createWidget({
      type: "bi.grid_table_horizontal_scrollbar",
      height: BI.GridTableScrollbar.SIZE
    });
    this.leftScrollbar.on(BI.GridTableHorizontalScrollbar.EVENT_SCROLL, function (scrollLeft) {
      self.topLeftGrid.setScrollLeft(scrollLeft);
      self.bottomLeftGrid.setScrollLeft(scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.rightScrollbar = BI.createWidget({
      type: "bi.grid_table_horizontal_scrollbar",
      height: BI.GridTableScrollbar.SIZE
    });
    this.rightScrollbar.on(BI.GridTableHorizontalScrollbar.EVENT_SCROLL, function (scrollLeft) {
      self.topRightGrid.setScrollLeft(scrollLeft);
      self.bottomRightGrid.setScrollLeft(scrollLeft);

      self._populateScrollbar();

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.scrollBarLayout = BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.topScrollbar,
        right: 0,
        top: 0
      }, {
        el: this.leftScrollbar,
        left: 0
      }, {
        el: this.rightScrollbar
      }]
    });

    if (!(BI.isChrome() && BI.isWindows() && !BI.isEdge())) {
      BI.createWidget({
        type: "bi.absolute",
        element: this,
        items: [{
          el: {
            type: "bi.default",
            cls: "bi-table-fix-scroll"
          },
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        }]
      });
    }

    this._width = o.width - BI.GridTableScrollbar.SIZE;
    this._height = o.height - BI.GridTableScrollbar.SIZE;
    this.header = this._getHeader();
    this.items = this._getItems();

    if (o.header.length > 0 || o.items.length > 0) {
      this._populate();
    }
  },
  _rowHeightGetter: function _rowHeightGetter() {
    return this.options.rowSize;
  },
  _headerRowHeightGetter: function _headerRowHeightGetter() {
    return this.options.headerRowSize;
  },
  _getFreezeColLength: function _getFreezeColLength() {
    var o = this.options;
    return o.isNeedFreeze === true ? BI.clamp(o.freezeCols.length, 0, o.columnSize.length) : 0;
  },
  _getFreezeHeaderHeight: function _getFreezeHeaderHeight() {
    var o = this.options;

    if (o.header.length * o.headerRowSize >= this._height) {
      return 0;
    }

    return o.header.length * o.headerRowSize;
  },
  _getActualItems: function _getActualItems() {
    var o = this.options;

    if (o.header.length * o.headerRowSize >= this._height) {
      return o.header.concat(o.items);
    }

    return o.items;
  },
  _getContentHeight: function _getContentHeight() {
    return this._getActualItems().length * this.options.rowSize;
  },
  _getHeader: function _getHeader() {
    var o = this.options;

    var freezeColLength = this._getFreezeColLength();

    var leftHeader = [],
        rightHeader = [];
    BI.each(o.header, function (i, cols) {
      leftHeader[i] = [];
      rightHeader[i] = [];
      BI.each(cols, function (j, col) {
        var cell;

        if (o.customCell) {
          cell = col;
        } else {
          cell = {
            type: "bi.grid_table_cell",
            cell: col
          };
        }

        cell.firstRowTopLine = true;

        if (j === freezeColLength && freezeColLength > 0) {
          cell.firstColumnLeftLine = false;
        }

        if (j < freezeColLength) {
          leftHeader[i].push(cell);
        } else {
          rightHeader[i].push(cell);
        }
      });
    });
    return [leftHeader, rightHeader];
  },
  _populateScrollbar: function _populateScrollbar() {
    var o = this.options;
    var regionSize = this.getRegionSize(),
        totalLeftColumnSize = 0,
        totalRightColumnSize = 0,
        totalColumnSize = 0,
        summaryColumnSizeArray = [];
    BI.each(o.columnSize, function (i, size) {
      if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
        totalLeftColumnSize += size;
      } else {
        totalRightColumnSize += size;
      }

      totalColumnSize += size;

      if (i === 0) {
        summaryColumnSizeArray[i] = size;
      } else {
        summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
      }
    });
    this.topScrollbar.setContentSize(this._getContentHeight());

    var freezeHeaderHeight = this._getFreezeHeaderHeight();

    var topScrollbarSize = this._height - freezeHeaderHeight;
    this.topScrollbar.setSize(topScrollbarSize);
    this.topScrollbar.setPosition(Math.min(this.bottomLeftGrid.getScrollTop(), this.bottomRightGrid.getScrollTop()));
    this.topScrollbar.populate();
    this.leftScrollbar.setContentSize(totalLeftColumnSize);
    this.leftScrollbar.setSize(regionSize);
    var leftScrollLeft = Math.max(this.bottomLeftGrid.getScrollLeft(), this.topLeftGrid.getScrollLeft());
    this.leftScrollbar.setPosition(leftScrollLeft);
    this.leftScrollbar.populate();
    this.rightScrollbar.setContentSize(totalRightColumnSize);
    this.rightScrollbar.setSize(this._width - regionSize);
    var rightScrollLeft = Math.max(this.bottomRightGrid.getScrollLeft(), this.topRightGrid.getScrollLeft());
    this.rightScrollbar.setPosition(rightScrollLeft);
    this.rightScrollbar.populate();
    var items = this.scrollBarLayout.attr("items");
    items[0].top = this._getFreezeHeaderHeight();
    items[1].top = this._height;
    items[2].top = this._height;
    items[2].left = regionSize;
    this.scrollBarLayout.attr("items", items);
    this.scrollBarLayout.resize();
    var shadowVisible = false;

    if (totalLeftColumnSize > 0 && totalRightColumnSize > 0) {
      shadowVisible = totalLeftColumnSize > regionSize && leftScrollLeft < totalLeftColumnSize - regionSize || rightScrollLeft > 0;

      if (shadowVisible) {
        var firstColumnSize = this.getFirstColumnRowSize();
        var contentHeight = BI.sum(firstColumnSize);
        this.shadow.setHeight(Math.min(this._height, freezeHeaderHeight + contentHeight));
      }
    }

    this.shadow.setVisible(shadowVisible);
  },
  _getItems: function _getItems() {
    var o = this.options;

    var freezeColLength = this._getFreezeColLength();

    var leftItems = [],
        rightItems = [];
    var firstRowTopLine = !(o.header && o.header.length > 0);
    BI.each(this._getActualItems(), function (i, cols) {
      leftItems[i] = [];
      rightItems[i] = [];
      BI.each(cols, function (j, col) {
        var cell;

        if (o.customCell) {
          col && (col.firstRowTopLine = firstRowTopLine);
          cell = col;
        } else {
          cell = {
            type: "bi.grid_table_cell",
            cell: col,
            firstRowTopLine: firstRowTopLine
          };
        }

        if (j === freezeColLength && freezeColLength > 0) {
          cell.firstColumnLeftLine = false;
        }

        if (j < freezeColLength) {
          leftItems[i].push(cell);
        } else {
          rightItems[i].push(cell);
        }
      });
    });
    return [leftItems, rightItems];
  },
  _digest: function _digest() {
    var self = this,
        o = this.options;

    var freezeColLength = this._getFreezeColLength();

    var totalLeftColumnSize = 0,
        totalRightColumnSize = 0,
        totalColumnSize = 0,
        summaryColumnSizeArray = [];
    BI.each(o.columnSize, function (i, size) {
      if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
        totalLeftColumnSize += size;
      } else {
        totalRightColumnSize += size;
      }

      totalColumnSize += size;

      if (i === 0) {
        summaryColumnSizeArray[i] = size;
      } else {
        summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
      }
    });
    this.topLeftGrid.setEstimatedColumnSize(freezeColLength > 0 ? totalLeftColumnSize / freezeColLength : 0);
    this.topLeftGrid.setEstimatedRowSize(o.headerRowSize);
    this.topRightGrid.setEstimatedColumnSize(o.columnSize.length - freezeColLength > 0 ? totalRightColumnSize / (o.columnSize.length - freezeColLength) : 0);
    this.topRightGrid.setEstimatedRowSize(o.headerRowSize);
    this.bottomLeftGrid.setEstimatedColumnSize(freezeColLength > 0 ? totalLeftColumnSize / freezeColLength : 0);
    this.bottomLeftGrid.setEstimatedRowSize(o.rowSize);
    this.bottomRightGrid.setEstimatedColumnSize(o.columnSize.length - freezeColLength > 0 ? totalRightColumnSize / (o.columnSize.length - freezeColLength) : 0);
    this.bottomRightGrid.setEstimatedRowSize(o.rowSize);
    this.topLeftGrid.setColumnCount(freezeColLength);
    this.topRightGrid.setColumnCount(o.columnSize.length - freezeColLength);
    this.bottomLeftGrid.setColumnCount(freezeColLength);
    this.bottomRightGrid.setColumnCount(o.columnSize.length - freezeColLength);
  },
  _populateTable: function _populateTable() {
    var self = this,
        o = this.options;
    var regionSize = this.getRegionSize();
    var otlw = regionSize;

    var otlh = this._getFreezeHeaderHeight();

    var otrw = this._width - regionSize;

    var otrh = this._getFreezeHeaderHeight();

    var oblw = regionSize;
    var oblh = this._height - otlh;
    var obrw = this._width - regionSize;
    var obrh = this._height - otrh;
    var scrollBarSize = BI.isFireFox() ? 0 : BI.DOM.getScrollWidth();
    var tlw = otlw + scrollBarSize;
    var tlh = otlh + scrollBarSize;
    var trw = otrw + scrollBarSize;
    var trh = otrh + scrollBarSize;
    var blw = oblw + scrollBarSize;
    var blh = oblh + scrollBarSize;
    var brw = obrw + scrollBarSize;
    var brh = obrh + scrollBarSize;

    var digest = function digest(el) {
      el.element.css({
        overflow: "scroll",
        overflowX: "scroll",
        overflowY: "scroll"
      });
    };

    this.topLeft.setWidth(otlw);
    this.topLeft.setHeight(otlh);
    this.topRight.setWidth(otrw);
    this.topRight.setHeight(otrh);
    this.bottomLeft.setWidth(oblw);
    this.bottomLeft.setHeight(oblh);
    this.bottomRight.setWidth(obrw);
    this.bottomRight.setHeight(obrh);
    this.topLeftGrid.setWidth(tlw);
    this.topLeftGrid.setHeight(tlh);
    this.topRightGrid.setWidth(trw);
    this.topRightGrid.setHeight(trh);
    this.bottomLeftGrid.setWidth(blw);
    this.bottomLeftGrid.setHeight(blh);
    this.bottomRightGrid.setWidth(brw);
    this.bottomRightGrid.setHeight(brh);
    digest(this.topLeftGrid);
    digest(this.topRightGrid);
    digest(this.bottomLeftGrid);
    digest(this.bottomRightGrid);
    var items = this.contextLayout.attr("items");
    items[1].left = regionSize;
    items[2].top = this._getFreezeHeaderHeight();
    items[3].left = regionSize;
    items[3].top = this._getFreezeHeaderHeight();
    items[4].left = regionSize;
    this.contextLayout.attr("items", items);
    this.contextLayout.resize();

    var headers = this._getHeader();

    var tableItems = this._getItems(headers);

    this.topLeftGrid._populate(headers[0]);

    this.topRightGrid._populate(headers[1]);

    this.bottomLeftGrid._populate(tableItems[0]);

    this.bottomRightGrid._populate(tableItems[1]);
  },
  _syncScroll: function _syncScroll() {
    this.setLeftHorizontalScroll(this.getLeftHorizontalScroll());
    this.setRightHorizontalScroll(this.getRightHorizontalScroll());
    this.setVerticalScroll(this.getVerticalScroll());
  },
  _populate: function _populate() {
    if (this._width <= 0 || this._height <= 0) {
      return;
    }

    this._digest();

    this._populateTable();

    this._populateScrollbar();

    this._syncScroll();
  },
  attr: function attr(key, value) {
    var v = BI.GridTable.superclass.attr.apply(this, arguments);

    if (BI.isNotNull(value)) {
      switch (key) {
        case "scrollLeft":
          this.topRightGrid.attr(key, value);
          this.bottomRightGrid.attr(key, value);
          break;

        case "scrollTop":
          this.bottomLeftGrid.attr(key, value);
          this.bottomRightGrid.attr(key, value);
          break;
      }
    }

    return v;
  },
  getRegionSize: function getRegionSize() {
    var o = this.options;
    var regionSize = o.regionColumnSize[0] || 0;

    if (o.isNeedFreeze === false || o.freezeCols.length === 0) {
      return 0;
    }

    if (!regionSize) {
      BI.each(o.freezeCols, function (i, col) {
        regionSize += o.columnSize[col];
      });
    }

    return regionSize;
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.bottomLeftGrid.setScrollTop(scrollTop);
    this.bottomRightGrid.setScrollTop(scrollTop);

    this._populateScrollbar();
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.topLeftGrid.setScrollLeft(scrollLeft);
    this.bottomLeftGrid.setScrollLeft(scrollLeft);

    this._populateScrollbar();
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.topRightGrid.setScrollLeft(scrollLeft);
    this.bottomRightGrid.setScrollLeft(scrollLeft);

    this._populateScrollbar();
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.bottomRightGrid.getScrollTop();
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    return this.bottomLeftGrid.getScrollLeft();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.bottomRightGrid.getScrollLeft();
  },
  getActualRightHorizontalScroll: function getActualRightHorizontalScroll() {
    return this.bottomRightGrid.element.scrollLeft();
  },
  setWidth: function setWidth(width) {
    BI.GridTable.superclass.setWidth.apply(this, arguments);
    this._width = this.options.width - BI.GridTableScrollbar.SIZE;
  },
  setHeight: function setHeight(height) {
    BI.GridTable.superclass.setHeight.apply(this, arguments);
    this._height = this.options.height - BI.GridTableScrollbar.SIZE;
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.options.columnSize = columnSize;
    this._isNeedDigest = true;
  },
  setRegionColumnSize: function setRegionColumnSize(regionColumnSize) {
    this.options.regionColumnSize = regionColumnSize;
    this._isNeedDigest = true;
  },
  getColumnSize: function getColumnSize() {
    return this.options.columnSize;
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.options.regionColumnSize;
  },
  getFirstColumnHeaderRowSize: function getFirstColumnHeaderRowSize() {
    var o = this.options,
        items = this.options.header;
    return BI.map(items, function () {
      return o.headerRowSize;
    });
  },
  getFirstColumnRowSize: function getFirstColumnRowSize() {
    var o = this.options,
        items = this.options.items;
    return BI.map(items, function () {
      return o.rowSize;
    });
  },
  populate: function populate(items, header) {
    var headerChanged = this.options.header !== header;
    var itemsChanged = this.options.items !== items;

    if (header && headerChanged) {
      this.options.header = header;
    }

    if (items && itemsChanged) {
      this.options.items = items;
    }

    if (items && itemsChanged) {
      this.items = this._getItems();

      this._restore();
    }

    if (header && headerChanged) {
      this.header = this._getHeader();

      this._restore();
    }

    this._populate();
  },
  _restore: function _restore() {
    this.topLeftGrid.restore();
    this.topRightGrid.restore();
    this.bottomLeftGrid.restore();
    this.bottomRightGrid.restore();
  },
  restore: function restore() {
    this._restore();
  }
});
BI.shortcut("bi.grid_table", BI.GridTable);

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * QuickGridTable
 *
 * Created by GUY on 2016/1/12.
 * @class BI.QuickGridTable
 * @extends BI.GridTable
 */
BI.QuickGridTable = BI.inherit(BI.GridTable, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.QuickGridTable.superclass._defaultConfig.apply(this, arguments), {
      extraCls: "bi-quick-grid-table"
    });
  },
  render: function render() {
    BI.QuickGridTable.superclass.render.apply(this, arguments);
    var self = this,
        o = this.options;
    this.topLeftGrid.setOverflowX(false);
    this.topLeftGrid.setOverflowY(false);
    this.topRightGrid.setOverflowX(false);
    this.topRightGrid.setOverflowY(false);
    this.bottomLeftGrid.setOverflowX(false);
    this.bottomLeftGrid.setOverflowY(false);
    this.bottomRightGrid.setOverflowX(false);
    this.bottomRightGrid.setOverflowY(false);
  },
  mounted: function mounted() {
    // BI.QuickGridTable.superclass.mounted.apply(this, arguments);
    var self = this;
    this._topLeftWheelHandler = new BI.WheelHandler(BI.bind(this._onWheelLeft, this), BI.bind(this._shouldHandleLeftX, this), BI.bind(this._shouldHandleY, this));
    this._topRightWheelHandler = new BI.WheelHandler(BI.bind(this._onWheelRight, this), BI.bind(this._shouldHandleRightX, this), BI.bind(this._shouldHandleY, this));
    this._bottomLeftWheelHandler = new BI.WheelHandler(BI.bind(this._onWheelLeft, this), BI.bind(this._shouldHandleLeftX, this), BI.bind(this._shouldHandleY, this));
    this._bottomRightWheelHandler = new BI.WheelHandler(BI.bind(this._onWheelRight, this), BI.bind(this._shouldHandleRightX, this), BI.bind(this._shouldHandleY, this));
    this.topLeftGrid.element.mousewheel(function (e) {
      self._topLeftWheelHandler.onWheel(e.originalEvent);
    });
    this.topRightGrid.element.mousewheel(function (e) {
      self._topRightWheelHandler.onWheel(e.originalEvent);
    });
    this.bottomLeftGrid.element.mousewheel(function (e) {
      self._bottomLeftWheelHandler.onWheel(e.originalEvent);
    });
    this.bottomRightGrid.element.mousewheel(function (e) {
      self._bottomRightWheelHandler.onWheel(e.originalEvent);
    });
  },
  _shouldHandleLeftX: function _shouldHandleLeftX(delta) {
    if (delta > 0) {
      return this.bottomLeftGrid.getScrollLeft() < this.bottomLeftGrid.getMaxScrollLeft();
    }

    return this.bottomLeftGrid.getScrollLeft() > 0;
  },
  _shouldHandleRightX: function _shouldHandleRightX(delta) {
    if (delta > 0) {
      return this.bottomRightGrid.getScrollLeft() < this.bottomRightGrid.getMaxScrollLeft();
    }

    return this.bottomRightGrid.getScrollLeft() > 0;
  },
  _shouldHandleY: function _shouldHandleY(delta) {
    if (delta > 0) {
      return this.bottomRightGrid.getScrollTop() < this.bottomRightGrid.getMaxScrollTop();
    }

    return this.bottomRightGrid.getScrollTop() > 0;
  },
  _onWheelLeft: function _onWheelLeft(deltaX, deltaY) {
    var self = this;
    var scrollTop = this.bottomLeftGrid.getScrollTop();
    var scrollLeft = this.bottomLeftGrid.getScrollLeft();

    if (Math.abs(deltaY) > Math.abs(deltaX)) {
      deltaX = 0;
    } else {
      deltaY = 0;
    }

    scrollTop += deltaY;
    scrollLeft += deltaX;
    this.bottomLeftGrid.setScrollTop(scrollTop);
    this.bottomRightGrid.setScrollTop(scrollTop);
    this.topLeftGrid.setScrollLeft(scrollLeft);
    this.bottomLeftGrid.setScrollLeft(scrollLeft);

    self._populateScrollbar();

    this.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
  },
  _onWheelRight: function _onWheelRight(deltaX, deltaY) {
    var self = this;
    var scrollTop = this.bottomRightGrid.getScrollTop();
    var scrollLeft = this.bottomRightGrid.getScrollLeft();

    if (Math.abs(deltaY) > Math.abs(deltaX)) {
      deltaX = 0;
    } else {
      deltaY = 0;
    }

    scrollTop += deltaY;
    scrollLeft += deltaX;
    this.bottomLeftGrid.setScrollTop(scrollTop);
    this.bottomRightGrid.setScrollTop(scrollTop);
    this.topRightGrid.setScrollLeft(scrollLeft);
    this.bottomRightGrid.setScrollLeft(scrollLeft);

    self._populateScrollbar();

    this.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
  },
  _populateTable: function _populateTable() {
    var self = this,
        o = this.options;
    var regionSize = this.getRegionSize(),
        totalLeftColumnSize = 0,
        totalRightColumnSize = 0,
        totalColumnSize = 0,
        summaryColumnSizeArray = [];

    var freezeColLength = this._getFreezeColLength();

    BI.each(o.columnSize, function (i, size) {
      if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
        totalLeftColumnSize += size;
      } else {
        totalRightColumnSize += size;
      }

      totalColumnSize += size;

      if (i === 0) {
        summaryColumnSizeArray[i] = size;
      } else {
        summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
      }
    });
    var otlw = regionSize;

    var otlh = this._getFreezeHeaderHeight();

    var otrw = this._width - regionSize;

    var otrh = this._getFreezeHeaderHeight();

    var oblw = regionSize;
    var oblh = this._height - otlh;
    var obrw = this._width - regionSize;
    var obrh = this._height - otrh;
    this.topLeft.setWidth(otlw);
    this.topLeft.setHeight(otlh);
    this.topRight.setWidth(otrw);
    this.topRight.setHeight(otrh);
    this.bottomLeft.setWidth(oblw);
    this.bottomLeft.setHeight(oblh);
    this.bottomRight.setWidth(obrw);
    this.bottomRight.setHeight(obrh);
    this.topLeftGrid.setWidth(otlw);
    this.topLeftGrid.setHeight(otlh);
    this.topRightGrid.setWidth(otrw);
    this.topRightGrid.setHeight(otrh);
    this.bottomLeftGrid.setWidth(oblw);
    this.bottomLeftGrid.setHeight(oblh);
    this.bottomRightGrid.setWidth(obrw);
    this.bottomRightGrid.setHeight(obrh);
    this.topLeftGrid.setEstimatedColumnSize(freezeColLength > 0 ? totalLeftColumnSize / freezeColLength : 0);
    this.topLeftGrid.setEstimatedRowSize(o.headerRowSize);
    this.topRightGrid.setEstimatedColumnSize(o.columnSize.length - freezeColLength > 0 ? totalRightColumnSize / (o.columnSize.length - freezeColLength) : 0);
    this.topRightGrid.setEstimatedRowSize(o.headerRowSize);
    this.bottomLeftGrid.setEstimatedColumnSize(freezeColLength > 0 ? totalLeftColumnSize / freezeColLength : 0);
    this.bottomLeftGrid.setEstimatedRowSize(o.rowSize);
    this.bottomRightGrid.setEstimatedColumnSize(o.columnSize.length - freezeColLength > 0 ? totalRightColumnSize / (o.columnSize.length - freezeColLength) : 0);
    this.bottomRightGrid.setEstimatedRowSize(o.rowSize);
    this.topLeftGrid.setColumnCount(freezeColLength);
    this.topRightGrid.setColumnCount(o.columnSize.length - freezeColLength);
    this.bottomLeftGrid.setColumnCount(freezeColLength);
    this.bottomRightGrid.setColumnCount(o.columnSize.length - freezeColLength);
    var items = this.contextLayout.attr("items");
    items[1].left = regionSize;
    items[2].top = this._getFreezeHeaderHeight();
    items[3].left = regionSize;
    items[3].top = this._getFreezeHeaderHeight();
    items[4].left = regionSize;
    this.contextLayout.attr("items", items);
    this.contextLayout.resize();
    var leftHeader = [],
        rightHeader = [],
        leftItems = [],
        rightItems = [];
    BI.each(o.header, function (i, cols) {
      leftHeader[i] = [];
      rightHeader[i] = [];
      BI.each(cols, function (j, col) {
        var cell;

        if (o.customCell) {
          cell = col;
        } else {
          cell = {
            type: "bi.grid_table_cell",
            cell: col
          };
        }

        cell.firstRowTopLine = true;

        if (j === freezeColLength && freezeColLength > 0) {
          cell.firstColumnLeftLine = false;
        }

        if (j < freezeColLength) {
          leftHeader[i].push(cell);
        } else {
          rightHeader[i].push(cell);
        }
      });
    });
    var firstRowTopLine = !(o.header && o.header.length > 0);
    BI.each(this._getActualItems(), function (i, cols) {
      leftItems[i] = [];
      rightItems[i] = [];
      BI.each(cols, function (j, col) {
        var cell;

        if (o.customCell) {
          col && (col.firstRowTopLine = firstRowTopLine);
          cell = col;
        } else {
          cell = {
            type: "bi.grid_table_cell",
            cell: col,
            firstRowTopLine: firstRowTopLine
          };
        }

        if (j < freezeColLength) {
          leftItems[i].push(cell);
        } else {
          rightItems[i].push(cell);
        }
      });
    });

    this.topLeftGrid._populate(leftHeader);

    this.topRightGrid._populate(rightHeader);

    this.bottomLeftGrid._populate(leftItems);

    this.bottomRightGrid._populate(rightItems);
  }
});
BI.shortcut("bi.quick_grid_table", BI.QuickGridTable);

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 表格滚动条
 *
 * Created by GUY on 2016/1/12.
 * @class BI.GridTableScrollbar
 * @extends BI.Widget
 */
BI.GridTableScrollbar = BI.inherit(BI.Widget, {
  _const: {
    FACE_MARGIN: 4,
    FACE_MARGIN_2: 4 * 2,
    FACE_SIZE_MIN: 30,
    KEYBOARD_SCROLL_AMOUNT: 40
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.GridTableScrollbar.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "scrollbar-layout-main public-scrollbar-main",
      attributes: {
        tabIndex: 0
      },
      contentSize: 0,
      defaultPosition: 0,
      isOpaque: false,
      orientation: "vertical",
      position: 0,
      size: 0
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.focused = false;
    this.isDragging = false;
    this.face = BI.createWidget({
      type: "bi.layout",
      cls: "scrollbar-layout-face public-scrollbar-face " + (this._isHorizontal() ? "scrollbar-layout-face-horizontal" : "scrollbar-layout-face-vertical")
    });
    this.contextLayout = BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.face,
        left: 0,
        top: 0
      }]
    });
  },
  mounted: function mounted() {
    var self = this,
        o = this.options;
    var onWheel = o.orientation === "horizontal" ? this._onWheelX : this._onWheelY;
    this._wheelHandler = new BI.WheelHandler(BI.bind(onWheel, this), BI.bind(this._shouldHandleX, this), BI.bind(this._shouldHandleY, this));
    this._mouseMoveTracker = new BI.MouseMoveTracker(BI.bind(this._onMouseMove, this), BI.bind(this._onMouseMoveEnd, this), _global.document);
    this.element.on("mousedown", BI.bind(this._onMouseDown, this));
    this.element.on("mousewheel", function (e) {
      self._wheelHandler.onWheel(e.originalEvent);
    });
    this.element.on("keydown", BI.bind(this._onKeyDown, this));
    this.element.on("focus", function () {
      self.focused = true;

      self._populate();
    });
    this.element.on("blur", function () {
      self.focused = false;

      self._populate();
    });

    if (this._isHorizontal()) {
      this.element.addClass("scrollbar-layout-main-horizontal");
    } else {
      this.element.addClass("scrollbar-layout-main-vertical");
    }

    this._populate();
  },
  _isHorizontal: function _isHorizontal() {
    return this.options.orientation === "horizontal";
  },
  _getScale: function _getScale() {
    var o = this.options;
    var scale = o.size / o.contentSize;
    var faceSize = o.size * scale;

    if (faceSize < this._const.FACE_SIZE_MIN) {
      scale = (o.size - this._const.FACE_SIZE_MIN) / (o.contentSize - o.size);
    }

    return scale;
  },
  _getFaceSize: function _getFaceSize() {
    var o = this.options;
    var scale = o.size / o.contentSize;
    var faceSize = o.size * scale;

    if (faceSize < this._const.FACE_SIZE_MIN) {
      faceSize = this._const.FACE_SIZE_MIN;
    }

    return faceSize;
  },
  _shouldHandleX: function _shouldHandleX(delta) {
    return this.options.orientation === "horizontal" ? this._shouldHandleChange(delta) : false;
  },
  _shouldHandleY: function _shouldHandleY(delta) {
    return this.options.orientation !== "horizontal" ? this._shouldHandleChange(delta) : false;
  },
  _shouldHandleChange: function _shouldHandleChange(delta) {
    return this.options.position + delta !== this.options.position;
  },
  _onWheelY: function _onWheelY(deltaX, deltaY) {
    this._onWheel(deltaY);
  },
  _onWheelX: function _onWheelX(deltaX, deltaY) {
    this._onWheel(deltaX);
  },
  _onWheel: function _onWheel(delta) {
    var maxPosition = this.options.contentSize - this.options.size;
    this.options.position += delta;

    if (this.options.position < 0) {
      this.options.position = 0;
    } else if (this.options.position > maxPosition) {
      this.options.position = maxPosition;
    }

    this._populate();

    this.fireEvent(BI.GridTableScrollbar.EVENT_SCROLL, this.options.position);
  },
  _onMouseDown: function _onMouseDown(e) {
    if (e.target !== this.face.element[0]) {
      var position = this._isHorizontal() ? e.offsetX : e.offsetY;
      position /= this._getScale();
      this.options.position = BI.clamp(position - this._getFaceSize() * 0.5 / this._getScale(), 0, this.options.contentSize - this.options.size);

      this._populate();

      this.fireEvent(BI.GridTableScrollbar.EVENT_SCROLL, this.options.position);
    } else {
      this._mouseMoveTracker.captureMouseMoves(e);
    }

    try {
      this.element[0].focus();
    } catch (e) {}
  },
  _onMouseMove: function _onMouseMove(deltaX, deltaY) {
    var delta = this._isHorizontal() ? deltaX : deltaY;
    delta /= this._getScale();
    this.options.position = BI.clamp(this.options.position + delta, 0, this.options.contentSize - this.options.size);
    this.isDragging = this._mouseMoveTracker.isDragging();

    this._populate();

    this.fireEvent(BI.GridTableScrollbar.EVENT_SCROLL, this.options.position);
  },
  _onMouseMoveEnd: function _onMouseMoveEnd(event) {
    this._mouseMoveTracker.releaseMouseMoves();

    if (this.isDragging === true) {
      this.isDragging = false;

      this._populate();
    }
  },
  _onKeyDown: function _onKeyDown(event) {
    var Keys = {
      BACKSPACE: 8,
      TAB: 9,
      RETURN: 13,
      ALT: 18,
      ESC: 27,
      SPACE: 32,
      PAGE_UP: 33,
      PAGE_DOWN: 34,
      END: 35,
      HOME: 36,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40,
      DELETE: 46,
      COMMA: 188,
      PERIOD: 190,
      A: 65,
      Z: 90,
      ZERO: 48,
      NUMPAD_0: 96,
      NUMPAD_9: 105
    };
    var keyCode = event.keyCode;

    if (keyCode === Keys.TAB) {
      return;
    }

    var distance = 40;
    var direction = 0;

    if (this._isHorizontal()) {
      switch (keyCode) {
        case Keys.HOME:
          direction = -1;
          distance = this.options.contentSize;
          break;

        case Keys.LEFT:
          direction = -1;
          break;

        case Keys.RIGHT:
          direction = 1;
          break;

        default:
          return;
      }
    }

    if (!this._isHorizontal()) {
      switch (keyCode) {
        case Keys.SPACE:
          if (event.shiftKey) {
            direction = -1;
          } else {
            direction = 1;
          }

          break;

        case Keys.HOME:
          direction = -1;
          distance = this.options.contentSize;
          break;

        case Keys.UP:
          direction = -1;
          break;

        case Keys.DOWN:
          direction = 1;
          break;

        case Keys.PAGE_UP:
          direction = -1;
          distance = this.options.size;
          break;

        case Keys.PAGE_DOWN:
          direction = 1;
          distance = this.options.size;
          break;

        default:
          return;
      }
    }

    this.options.position = BI.clamp(this.options.position + distance * direction, 0, this.options.contentSize - this.options.size);
    event.preventDefault();

    this._populate();

    this.fireEvent(BI.GridTableScrollbar.EVENT_SCROLL, this.options.position);
  },
  _populate: function _populate() {
    var self = this,
        o = this.options;

    if (o.size < 1 || o.contentSize <= o.size) {
      this.setVisible(false);
      return;
    }

    this.setVisible(true);
    var size = o.size;

    var isHorizontal = this._isHorizontal();

    var isActive = this.focused || this.isDragging;

    var faceSize = this._getFaceSize();

    var isOpaque = o.isOpaque;
    this.element[isOpaque === true ? "addClass" : "removeClass"]("public-scrollbar-main-opaque");
    this.element[isActive === true ? "addClass" : "removeClass"]("public-scrollbar-main-active");
    this.face.element[isActive === true ? "addClass" : "removeClass"]("public-scrollbar-face-active");

    var position = o.position * this._getScale() + this._const.FACE_MARGIN;

    var items = this.contextLayout.attr("items");

    if (isHorizontal) {
      this.setWidth(size);
      this.face.setWidth(faceSize - this._const.FACE_MARGIN_2);
      items[0].left = position;
      items[0].top = 0;
    } else {
      this.setHeight(size);
      this.face.setHeight(faceSize - this._const.FACE_MARGIN_2);
      items[0].left = 0;
      items[0].top = position;
    }

    this.contextLayout.attr("items", items);
    this.contextLayout.resize();
  },
  setContentSize: function setContentSize(contentSize) {
    this.options.contentSize = contentSize;
  },
  setPosition: function setPosition(position) {
    this.options.position = position;
  },
  setSize: function setSize(size) {
    this.options.size = size;
  },
  populate: function populate() {
    this._populate();
  }
});
BI.GridTableScrollbar.SIZE = 10;
BI.GridTableScrollbar.EVENT_SCROLL = "EVENT_SCROLL";
BI.shortcut("bi.grid_table_scrollbar", BI.GridTableScrollbar);
BI.GridTableHorizontalScrollbar = BI.inherit(BI.Widget, {
  _const: {
    FACE_MARGIN: 4,
    FACE_MARGIN_2: 4 * 2,
    FACE_SIZE_MIN: 30,
    KEYBOARD_SCROLL_AMOUNT: 40
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.GridTableHorizontalScrollbar.superclass._defaultConfig.apply(this, arguments), {
      attributes: {
        tabIndex: 0
      },
      contentSize: 0,
      position: 0,
      size: 0
    });
  },
  _init: function _init() {
    BI.GridTableHorizontalScrollbar.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.scrollbar = BI.createWidget({
      type: "bi.grid_table_scrollbar",
      orientation: "horizontal",
      isOpaque: true,
      position: o.position,
      contentSize: o.contentSize,
      size: o.size
    });
    this.scrollbar.on(BI.GridTableScrollbar.EVENT_SCROLL, function () {
      self.fireEvent(BI.GridTableHorizontalScrollbar.EVENT_SCROLL, arguments);
    });
    BI.createWidget({
      type: "bi.absolute",
      cls: "horizontal-scrollbar",
      element: this,
      width: o.size,
      height: BI.GridTableScrollbar.SIZE,
      items: [{
        el: {
          type: "bi.absolute",
          scrollable: false,
          height: BI.GridTableScrollbar.SIZE,
          items: [{
            el: this.scrollbar,
            left: 0,
            top: 0
          }]
        },
        top: 0,
        left: 0,
        right: 0
      }]
    });
  },
  setContentSize: function setContentSize(contentSize) {
    this.options.contentSize = contentSize;
    this.scrollbar.setContentSize(contentSize);
  },
  setPosition: function setPosition(position) {
    this.options.position = position;
    this.scrollbar.setPosition(position);
  },
  setSize: function setSize(size) {
    this.setWidth(size);
    this.options.size = size;
    this.scrollbar.setSize(size);
  },
  populate: function populate() {
    this.scrollbar.populate();
    var o = this.options;

    if (o.size < 1 || o.contentSize <= o.size) {
      this.setVisible(false);
      return;
    }

    this.setVisible(true);
  }
});
BI.GridTableHorizontalScrollbar.EVENT_SCROLL = "EVENT_SCROLL";
BI.shortcut("bi.grid_table_horizontal_scrollbar", BI.GridTableHorizontalScrollbar);

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 行高自动算的表格
 *
 * Created by GUY on 2016/1/12.
 * @class BI.AutoHeightGridTable
 * @extends BI.Widget
 */
!function () {
  var getTextLines = function getTextLines(text, fontSize, cellWidth, maxLines) {
    var width = 0;
    var lines = 1;
    var charWidth = 0;
    var widths = BI.Constants.getConstant("bi.constant.char.widths");

    for (var i = 0, len = text.length; i < len; i++) {
      var _char = text.charCodeAt(i); // 回车和换行


      if (_char === 13 || _char === 10) {
        width = 0;
        lines++;
        continue;
      }

      if (_char >= 32 && _char <= 126) {
        charWidth = widths[_char] * fontSize;
      } else {
        charWidth = fontSize;
      }

      width += charWidth;

      if (width > cellWidth) {
        width = charWidth;
        lines++;
      }

      if (lines === maxLines) {
        break;
      }
    }

    return lines;
  };

  var getCellRowHeight = function getCellRowHeight(text, fontSize, width, lineHeight, rowGap, rowHeight, maxHeight) {
    var maxLines = Math.ceil((maxHeight - rowGap) / lineHeight);
    var lines = getTextLines(text || "", fontSize, width, maxLines);
    return Math.min(Math.max(lines * lineHeight + rowGap, rowHeight), maxHeight);
  };

  BI.AutoHeightGridTable = BI.inherit(BI.GridTable, {
    _defaultConfig: function _defaultConfig() {
      return BI.extend(BI.AutoHeightGridTable.superclass._defaultConfig.apply(this, arguments), {
        baseCls: "bi-grid-table bi-grid-auto-height-table",
        isAutoHeight: true,
        isHeaderAutoHeight: true,
        fontSize: 12,
        fontLineHeight: 14,
        columnGaps: [],
        rowGap: 1,
        headerFontSize: 12,
        headerFontLineHeight: 14,
        headerColumnGaps: [],
        headerRowGap: 1,
        rowSize: 0,
        // 在这个组件里rowSize表示最小高
        headerRowSize: 0,
        // 在这个组件里rowSize表示最小高
        maxRowSize: 400
      });
    },
    _getFreezeHeaderHeight: function _getFreezeHeaderHeight() {
      var o = this.options;

      if (!o.isHeaderAutoHeight) {
        return BI.AutoHeightGridTable.superclass._getFreezeHeaderHeight.call(this);
      }

      if (this.headerIntervalTree) {
        var allHeaderHeight = this.headerIntervalTree.sumUntil(o.header.length);

        if (allHeaderHeight >= this._height) {
          return 0;
        }

        return allHeaderHeight;
      }

      return 0;
    },
    _getActualItems: function _getActualItems() {
      var o = this.options;

      if (!o.isHeaderAutoHeight) {
        return BI.AutoHeightGridTable.superclass._getActualItems.call(this);
      }

      if (this.headerIntervalTree) {
        var allHeaderHeight = this.headerIntervalTree.sumUntil(o.header.length);

        if (allHeaderHeight >= this._height) {
          return o.header.concat(o.items);
        }

        return o.items;
      }

      return o.items;
    },
    _getContentHeight: function _getContentHeight() {
      var o = this.options;

      if (!o.isAutoHeight && !o.isHeaderAutoHeight) {
        return BI.AutoHeightGridTable.superclass._getContentHeight.call(this);
      }

      if (!o.isHeaderAutoHeight) {
        var allHeaderHeight = this._getFreezeHeaderHeight();

        if (allHeaderHeight <= 0) {
          return o.header.length * o.headerRowSize + (this.intervalTree ? this.intervalTree.sumUntil(o.items.length) : 0);
        } else {
          return this.intervalTree ? this.intervalTree.sumUntil(o.items.length) : 0;
        }
      }

      if (!o.isAutoHeight) {
        var allHeaderHeight = this.headerIntervalTree ? this.headerIntervalTree.sumUntil(o.header.length) : 0;

        if (allHeaderHeight >= this._height) {
          return allHeaderHeight + o.items.length * o.rowSize;
        } else {
          return o.items.length * o.rowSize;
        }
      }

      if (this.headerIntervalTree) {
        var allHeaderHeight = this.headerIntervalTree.sumUntil(o.header.length);

        if (allHeaderHeight >= this._height) {
          return allHeaderHeight + this.intervalTree ? this.intervalTree.sumUntil(o.items.length) : 0;
        } else {
          return this.intervalTree ? this.intervalTree.sumUntil(o.items.length) : 0;
        }
      }

      return 0;
    },
    _getHeaderContentHeight: function _getHeaderContentHeight() {
      var o = this.options;

      if (!o.isHeaderAutoHeight) {
        return o.header.length * o.headerRowSize;
      }

      if (this.headerIntervalTree) {
        return this.headerIntervalTree.sumUntil(o.header.length);
      }

      return 0;
    },
    _getOneRowHeight: function _getOneRowHeight(index) {
      var o = this.options;
      var columns = this.options.items[index];
      var maxHeight = 0;

      var freezeColLength = this._getFreezeColLength();

      for (var i = 0, len = columns.length; i < len; i++) {
        var column = columns[i];
        var columnSize = o.columnSize[i] - (o.columnGaps[i] || 0) - ((BI.isFunction(column.columnGap) ? column.columnGap() : column.columnGap) || 0) - (i === 0 || i === freezeColLength ? 2 : 1);
        maxHeight = Math.max(maxHeight, getCellRowHeight(column.text, o.fontSize, columnSize, o.fontLineHeight, o.rowGap, o.rowSize, o.maxRowSize));

        if (maxHeight >= o.maxRowSize) {
          return o.maxRowSize;
        }
      }

      return maxHeight;
    },
    _getOneHeaderRowHeight: function _getOneHeaderRowHeight(index) {
      var o = this.options;
      var columns = this.options.header[index];
      var maxHeight = 0;

      var freezeColLength = this._getFreezeColLength();

      for (var i = 0, len = columns.length; i < len; i++) {
        var column = columns[i];
        var columnSize = o.columnSize[i] - (o.columnGaps[i] || 0) - ((column.cell ? BI.isFunction(column.cell.columnGap) ? column.cell.columnGap() : column.cell.columnGap : column.columnGap) || 0) - (i === 0 || i === freezeColLength ? 2 : 1);
        maxHeight = Math.max(maxHeight, getCellRowHeight(column.cell ? column.cell.text : column.text, o.headerFontSize, columnSize, o.headerFontLineHeight, o.headerRowGap, o.headerRowSize, o.maxRowSize));

        if (maxHeight >= o.maxRowSize) {
          return o.maxRowSize;
        }
      }

      return maxHeight;
    },
    _getActualRowHeights: function _getActualRowHeights() {
      var self = this,
          o = this.options;
      var items = this.options.items; // logn复杂度算线段树长

      this.intervalTree = BI.PrefixIntervalTree.empty(o.items.length);
      BI.each(items, function (i, row) {
        self.intervalTree.set(i, self._getOneRowHeight(i));
      });
      return this.intervalTree;
    },
    _getActualHeaderRowHeights: function _getActualHeaderRowHeights() {
      var self = this,
          o = this.options;
      var items = this.options.header; // logn复杂度算线段树长

      this.headerIntervalTree = BI.PrefixIntervalTree.empty(o.header.length);
      BI.each(items, function (i, row) {
        self.headerIntervalTree.set(i, self._getOneHeaderRowHeight(i));
      });
      return this.headerIntervalTree;
    },
    _headerRowHeightGetter: function _headerRowHeightGetter(i) {
      if (!this.options.isHeaderAutoHeight) {
        return BI.AutoHeightGridTable.superclass._headerRowHeightGetter.call(this, i);
      }

      return this.headerIntervalTree ? this.headerIntervalTree.get(i) : this.options.headerRowSize;
    },
    _rowHeightGetter: function _rowHeightGetter(i) {
      if (!this.options.isAutoHeight) {
        return BI.AutoHeightGridTable.superclass._rowHeightGetter.call(this, i);
      }

      return this.intervalTree ? this.intervalTree.get(i) : this.options.rowSize;
    },
    _digest: function _digest() {
      var o = this.options;

      if (!o.isAutoHeight && !o.isHeaderAutoHeight) {
        return BI.AutoHeightGridTable.superclass._digest.call(this);
      }

      if (o.isHeaderAutoHeight) {
        this._getActualHeaderRowHeights();
      }

      if (o.isAutoHeight) {
        this._getActualRowHeights();
      }

      var freezeColLength = this._getFreezeColLength();

      var totalLeftColumnSize = 0,
          totalRightColumnSize = 0,
          totalColumnSize = 0,
          summaryColumnSizeArray = [];
      BI.each(o.columnSize, function (i, size) {
        if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
          totalLeftColumnSize += size;
        } else {
          totalRightColumnSize += size;
        }

        totalColumnSize += size;

        if (i === 0) {
          summaryColumnSizeArray[i] = size;
        } else {
          summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
        }
      });
      var estimatedRowHeight = o.items.length > 0 ? this._getContentHeight() / o.items.length : 0;
      var estimatedHeaderRowHeight = this._getHeaderContentHeight() / o.header.length;
      this.topLeftGrid.setEstimatedColumnSize(freezeColLength > 0 ? totalLeftColumnSize / freezeColLength : 0);
      this.topLeftGrid.setEstimatedRowSize(estimatedHeaderRowHeight);
      this.topRightGrid.setEstimatedColumnSize(o.columnSize.length - freezeColLength > 0 ? totalRightColumnSize / (o.columnSize.length - freezeColLength) : 0);
      this.topRightGrid.setEstimatedRowSize(estimatedHeaderRowHeight);
      this.bottomLeftGrid.setEstimatedColumnSize(freezeColLength > 0 ? totalLeftColumnSize / freezeColLength : 0);
      this.bottomLeftGrid.setEstimatedRowSize(estimatedRowHeight);
      this.bottomRightGrid.setEstimatedColumnSize(o.columnSize.length - freezeColLength > 0 ? totalRightColumnSize / (o.columnSize.length - freezeColLength) : 0);
      this.bottomRightGrid.setEstimatedRowSize(estimatedRowHeight);
      this.topLeftGrid.setColumnCount(freezeColLength);
      this.topRightGrid.setColumnCount(o.columnSize.length - freezeColLength);
      this.bottomLeftGrid.setColumnCount(freezeColLength);
      this.bottomRightGrid.setColumnCount(o.columnSize.length - freezeColLength); // this.topLeftGrid.restore();
      // this.topRightGrid.restore();
      // this.bottomLeftGrid.restore();
      // this.bottomRightGrid.restore();
    },
    getFirstColumnHeaderRowSize: function getFirstColumnHeaderRowSize() {
      var self = this,
          o = this.options;

      if (!o.isHeaderAutoHeight) {
        return BI.AutoHeightGridTable.superclass.getFirstColumnHeaderRowSize.call(this);
      }

      var items = o.header;
      return BI.map(items, function (i) {
        return self.headerIntervalTree && self.headerIntervalTree.get(i);
      });
    },
    getFirstColumnRowSize: function getFirstColumnRowSize() {
      var self = this,
          o = this.options;

      if (!o.isAutoHeight) {
        return BI.AutoHeightGridTable.superclass.getFirstColumnRowSize.call(this);
      }

      var items = o.items;
      return BI.map(items, function (i) {
        return self.intervalTree && self.intervalTree.get(i);
      });
    }
  });
  BI.shortcut("bi.grid_auto_height_table", BI.AutoHeightGridTable);
}();

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 表格
 *
 * Created by GUY on 2015/9/22.
 * @class BI.TableHeaderCell
 * @extends BI.Single
 */
BI.TableHeaderCell = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TableHeaderCell.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-table-header-cell",
      text: ""
    });
  },
  _init: function _init() {
    BI.TableHeaderCell.superclass._init.apply(this, arguments);

    var o = this.options;
    BI.createWidget({
      type: "bi.label",
      element: this,
      textAlign: o.textAlign || "center",
      height: this.options.height,
      text: this.options.text,
      value: this.options.value,
      lgap: o.lgap,
      rgap: o.rgap,
      hgap: o.hgap || 5
    });
  }
});
BI.shortcut("bi.table_header_cell", BI.TableHeaderCell);

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 表格
 *
 * 能处理静态宽度以及动态宽度的表， 百分比宽度的表请使用PreviewTable
 *
 * Created by GUY on 2015/9/22.
 * @class BI.Table
 * @extends BI.Widget
 */
BI.Table = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.Table.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-table",
      logic: {
        // 冻结的页面布局逻辑
        dynamic: false
      },
      isNeedFreeze: false,
      // 是否需要冻结单元格
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为true时生效
      isNeedMerge: false,
      // 是否需要合并单元格
      mergeCols: [],
      // 合并的单元格列号
      mergeRule: function mergeRule(row1, row2) {
        // 合并规则, 默认相等时合并
        return BI.isEqual(row1, row2);
      },
      columnSize: [],
      headerRowSize: 25,
      footerRowSize: 25,
      rowSize: 25,
      bordered: true,
      stripe: false,
      hover: false,
      regionColumnSize: false,
      header: [],
      footer: false,
      items: [],
      // 二维数组
      el: {
        type: "bi.vertical_fill"
      }
    });
  },
  _calculateWidth: function _calculateWidth(width) {
    if (!width || width === "0") {
      return "";
    }

    width = BI.parseFloat(width);

    if (width < 0) {
      width = 0;
    }

    return width > 1.01 ? width : width * 100 + "%";
  },
  _calculateHeight: function _calculateHeight(height) {
    return height ? height : "";
  },
  _isColumnSizeValid: function _isColumnSizeValid(columnSize, indexes) {
    return !BI.some(columnSize, function (i, c) {
      if (indexes && !indexes.includes(i)) {
        return false;
      }

      if (!c || !BI.isNumeric(c)) {
        return true;
      }
    });
  },
  _isRightFreeze: function _isRightFreeze() {
    return BI.isNotEmptyArray(this.options.freezeCols) && BI.first(this.options.freezeCols) !== 0;
  },
  _createTopLeft: function _createTopLeft() {
    var o = this.options,
        isRight = this._isRightFreeze();

    this.topLeftColGroupTds = {};
    this.topLeftBodyTds = {};
    this.topLeftBodyItems = {};

    var table = this._table();

    var colgroup = this._createColGroup(this.columnLeft, this.topLeftColGroupTds);

    var body = this.topLeftBody = this._body();

    body.element.append(this._createHeaderCells(this.topLeftItems, this.columnLeft, this.mergeLeft, this.topLeftBodyTds, this.topLeftBodyItems));
    this.topLeftContainer = BI.createWidget({
      type: "bi.default",
      element: table,
      width: this._calculateWidth(w),
      items: [colgroup, body]
    });

    if (isRight) {
      var w = 0,
          isValid = true;
      BI.each(o.columnSize, function (i, col) {
        if (!BI.isNumeric(col)) {
          isValid = false;
        }

        if (!o.freezeCols.includes(i)) {
          w += col;
        }
      });

      if (isValid && BI.isNumeric(w) && w > 1) {
        w = BI.parseFloat(w);
      }
    }

    return this.topLeftContainer;
  },
  _createTopRight: function _createTopRight() {
    var o = this.options,
        isRight = this._isRightFreeze();

    this.topRightColGroupTds = {};
    this.topRightBodyTds = {};
    this.topRightBodyItems = {};

    var table = this._table();

    var colgroup = this._createColGroup(this.columnRight, this.topRightColGroupTds);

    var body = this.topRightBody = this._body();

    body.element.append(this._createHeaderCells(this.topRightItems, this.columnRight, this.mergeRight, this.topRightBodyTds, this.topRightBodyItems, this.columnLeft.length));
    this.topRightContainer = BI.createWidget({
      type: "bi.default",
      width: this._calculateWidth(w),
      element: table,
      items: [colgroup, body]
    });

    if (!isRight) {
      var w = 0,
          isValid = true;
      BI.each(o.columnSize, function (i, col) {
        if (!BI.isNumeric(col)) {
          isValid = false;
        }

        if (!o.freezeCols.includes(i)) {
          w += col;
        }
      });

      if (isValid && BI.isNumeric(w) && w > 1) {
        w = BI.parseFloat(w);
      }
    }

    return this.topRightContainer;
  },
  _createBottomLeft: function _createBottomLeft() {
    var o = this.options,
        isRight = this._isRightFreeze();

    this.bottomLeftColGroupTds = {};
    this.bottomLeftBodyTds = {};
    this.bottomLeftBodyItems = {};

    var table = this._table();

    var colgroup = this._createColGroup(this.columnLeft, this.bottomLeftColGroupTds);

    var body = this._createBottomLeftBody();

    this.bottomLeftContainer = BI.createWidget({
      type: "bi.default",
      width: this._calculateWidth(w),
      element: table,
      items: [colgroup, body]
    });

    if (isRight) {
      var w = 0,
          isValid = true;
      BI.each(o.columnSize, function (i, col) {
        if (!BI.isNumeric(col)) {
          isValid = false;
        }

        if (!o.freezeCols.includes(i)) {
          w += col;
        }
      });

      if (isValid && BI.isNumeric(w) && w > 1) {
        w = BI.parseFloat(w);
      }
    }

    return this.bottomLeftContainer;
  },
  _createBottomLeftBody: function _createBottomLeftBody() {
    var body = this.bottomLeftBody = this._body();

    body.element.append(this._createCells(this.bottomLeftItems, this.columnLeft, this.mergeLeft, this.bottomLeftBodyTds, this.bottomLeftBodyItems));
    return body;
  },
  _createBottomRight: function _createBottomRight() {
    var o = this.options,
        isRight = this._isRightFreeze();

    this.bottomRightColGroupTds = {};
    this.bottomRightBodyTds = {};
    this.bottomRightBodyItems = {};

    var table = this._table();

    var colgroup = this._createColGroup(this.columnRight, this.bottomRightColGroupTds);

    var body = this._createBottomRightBody();

    this.bottomRightContainer = BI.createWidget({
      type: "bi.default",
      element: table,
      items: [colgroup, body]
    });

    if (!isRight) {
      var w = 0,
          isValid = true;
      BI.each(o.columnSize, function (i, col) {
        if (!BI.isNumeric(col)) {
          isValid = false;
        }

        if (!o.freezeCols.includes(i)) {
          w += col;
        }
      });

      if (isValid && BI.isNumeric(w) && w > 1) {
        w = BI.parseFloat(w);
      }
    }

    return this.bottomRightContainer;
  },
  _createBottomRightBody: function _createBottomRightBody() {
    var body = this.bottomRightBody = this._body();

    body.element.append(this._createCells(this.bottomRightItems, this.columnRight, this.mergeRight, this.bottomRightBodyTds, this.bottomRightBodyItems, this.columnLeft.length));
    return body;
  },
  _createFreezeTable: function _createFreezeTable() {
    var self = this,
        o = this.options;

    var isRight = this._isRightFreeze();

    var split = this._split(o.header);

    this.topLeftItems = split.left;
    this.topRightItems = split.right;
    split = this._split(o.items);
    this.bottomLeftItems = split.left;
    this.bottomRightItems = split.right;
    this.columnLeft = [];
    this.columnRight = [];
    BI.each(o.columnSize, function (i, size) {
      if (o.freezeCols.includes(i)) {
        self[isRight ? "columnRight" : "columnLeft"].push(size);
      } else {
        self[isRight ? "columnLeft" : "columnRight"].push(size);
      }
    });
    this.mergeLeft = [];
    this.mergeRight = [];
    BI.each(o.mergeCols, function (i, col) {
      if (o.freezeCols.includes(col)) {
        self[isRight ? "mergeRight" : "mergeLeft"].push(col);
      } else {
        self[isRight ? "mergeLeft" : "mergeRight"].push(col);
      }
    });

    var topLeft = this._createTopLeft();

    var topRight = this._createTopRight();

    var bottomLeft = this._createBottomLeft();

    var bottomRight = this._createBottomRight();

    this.scrollTopLeft = BI.createWidget({
      type: "bi.adaptive",
      cls: "scroll-top-left",
      width: "100%",
      height: "100%",
      scrollable: false,
      items: [topLeft]
    });
    this.scrollTopRight = BI.createWidget({
      type: "bi.adaptive",
      cls: "scroll-top-right",
      width: "100%",
      height: "100%",
      scrollable: false,
      items: [topRight]
    });
    this.scrollBottomLeft = BI.createWidget({
      type: "bi.adaptive",
      cls: "scroll-bottom-left",
      width: "100%",
      height: "100%",
      scrollable: isRight || null,
      scrollx: !isRight,
      items: [bottomLeft]
    });
    this.scrollBottomRight = BI.createWidget({
      type: "bi.adaptive",
      cls: "scroll-bottom-right",
      width: "100%",
      height: "100%",
      scrollable: !isRight || null,
      scrollx: isRight,
      items: [bottomRight]
    });
    this.topLeft = BI.createWidget({
      type: "bi.adaptive",
      cls: "top-left",
      scrollable: false,
      items: [this.scrollTopLeft]
    });
    this.topRight = BI.createWidget({
      type: "bi.adaptive",
      cls: "top-right",
      scrollable: false,
      items: [this.scrollTopRight]
    });
    this.bottomLeft = BI.createWidget({
      type: "bi.adaptive",
      cls: "bottom-left",
      scrollable: false,
      items: [this.scrollBottomLeft]
    });
    this.bottomRight = BI.createWidget({
      type: "bi.adaptive",
      cls: "bottom-right",
      scrollable: false,
      items: [this.scrollBottomRight]
    });
    var headerHeight = o.header.length * (o.headerRowSize || o.rowSize);
    var leftWidth = BI.sum(o.freezeCols, function (i, col) {
      return o.columnSize[col];
    });

    this._resize = function () {
      if (self.scrollBottomLeft.element.is(":visible")) {
        self.scrollBottomLeft.element.css({
          "overflow-x": "auto"
        });
        self.scrollBottomRight.element.css({
          "overflow-x": "auto"
        }); // self.setColumnSize(o.columnSize);

        if (isRight) {
          self.scrollBottomLeft.element.css({
            "overflow-y": "auto"
          });
        } else {
          self.scrollBottomRight.element.css({
            "overflow-y": "auto"
          });
        }

        if (self.scrollBottomLeft.element.hasHorizonScroll() || self.scrollBottomRight.element.hasHorizonScroll()) {
          self.scrollBottomLeft.element.css("overflow-x", "scroll");
          self.scrollBottomRight.element.css("overflow-x", "scroll");
        }

        if (self.scrollBottomLeft.element.hasVerticalScroll()) {
          self.scrollTopLeft.element.css("overflow-y", "scroll");
        } else {
          self.scrollTopLeft.element.css("overflow-y", "hidden");
        }

        self.scrollTopLeft.element[0].scrollLeft = self.scrollBottomLeft.element[0].scrollLeft;
        self.scrollBottomLeft.element[0].scrollTop = self.scrollBottomRight.element[0].scrollTop;
      }

      if (self.scrollBottomRight.element.hasVerticalScroll()) {
        self.scrollTopRight.element.css("overflow-y", "scroll");
      } else {
        self.scrollTopRight.element.css("overflow-y", "hidden");
      }

      self.scrollTopRight.element[0].scrollLeft = self.scrollBottomRight.element[0].scrollLeft;
    };

    var regionColumnSize = o.regionColumnSize && o.regionColumnSize.concat(["fill"]);

    if (o.freezeCols.length === 0) {
      regionColumnSize = ["fill", "fill"];
      isRight ? (this.topRight = null, this.bottomRight = null) : (this.topLeft = null, this.bottomLeft = null);
    } else if (o.freezeCols.length >= o.columnSize.length) {
      regionColumnSize = ["fill", "fill"];
      isRight ? (this.topLeft = null, this.bottomLeft = null) : (this.topRight = null, this.bottomRight = null);
    } // this.partitions = BI.createWidget(BI.extend({
    //     element: this,
    //     cls: o.bordered ? "bordered bi-split" : ""
    // }, BI.LogicFactory.createLogic("table", BI.extend({}, o.logic, {
    //     rows: 2,
    //     columns: 2,
    //     columnSize: regionColumnSize || (isRight ? ["fill", leftWidth] : [leftWidth, "fill"]),
    //     rowSize: [headerHeight, "fill"],
    //     items: [[{
    //         el: this.topLeft
    //     }, {
    //         el: this.topRight
    //     }], [{
    //         el: this.bottomLeft
    //     }, {
    //         el: this.bottomRight
    //     }]]
    // }))));


    BI.createWidget(o.el, {
      element: this,
      cls: "".concat(o.bordered ? "bordered" : "", " ").concat(o.stripe ? "stripe" : "", " ").concat(o.hover ? "hover" : ""),
      rowSize: ["", "fill"],
      items: [{
        type: "bi.horizontal_fill",
        columnSize: regionColumnSize || (isRight ? ["fill", leftWidth] : [leftWidth, "fill"]),
        items: [this.topLeft, this.topRight]
      }, {
        type: "bi.horizontal_fill",
        columnSize: regionColumnSize || (isRight ? ["fill", leftWidth] : [leftWidth, "fill"]),
        items: [this.bottomLeft, this.bottomRight]
      }]
    });

    this._initFreezeScroll();

    BI.ResizeDetector.addResizeListener(this, function () {
      self._resize();

      self.fireEvent(BI.Table.EVENT_TABLE_RESIZE);
    });
  },
  mounted: function mounted() {
    this._resize && this._resize();

    if (!(BI.isChrome() && BI.isWindows() && !BI.isEdge())) {
      BI.createWidget({
        type: "bi.absolute",
        element: this,
        items: [{
          el: {
            type: "bi.default",
            cls: "bi-table-fix-scroll"
          },
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        }]
      });
    }

    this.fireEvent(BI.Table.EVENT_TABLE_AFTER_INIT);
  },
  _initFreezeScroll: function _initFreezeScroll() {
    var self = this,
        o = this.options;
    scroll(this.scrollBottomRight.element, this.scrollTopRight.element, this.scrollBottomLeft.element);
    scroll(this.scrollBottomLeft.element, this.scrollTopLeft.element);

    function scroll(scrollElement, scrollTopElement, otherElement) {
      scrollElement.scroll(function (e) {
        otherElement === null || otherElement === void 0 ? void 0 : otherElement.scrollTop(scrollElement.scrollTop());
        scrollTopElement.scrollLeft(scrollElement.scrollLeft());
        self.fireEvent(BI.Table.EVENT_TABLE_SCROLL);
      });
    }
  },
  resize: function resize() {
    this._resize && this._resize();
  },
  _createCells: function _createCells(items, columnSize, mergeCols, TDs, Ws, start, rowSize, isHeader) {
    var self = this,
        o = this.options,
        preCol = {},
        preRow = {},
        preRW = {},
        preCW = {},
        map = {};
    columnSize = columnSize || o.columnSize;
    mergeCols = mergeCols || o.mergeCols;
    TDs = TDs || {};
    Ws = Ws || {};
    start = start || 0;
    rowSize || (rowSize = o.rowSize);
    var frag = document.createDocumentFragment();
    BI.each(items, function (i, rows) {
      var tr = BI.$("<tr>").addClass((i & 1) === 0 ? "odd" : "even").height(rowSize);
      BI.each(rows, function (j, row) {
        if (!map[i]) {
          map[i] = {};
        }

        if (!TDs[i]) {
          TDs[i] = {};
        }

        if (!Ws[i]) {
          Ws[i] = {};
        }

        map[i][j] = row;

        if (o.isNeedMerge && mergeCols.includes(j)) {
          if (i === 0 && j === 0) {
            createOneEl(0, 0);
          } else if (j === 0 && i > 0) {
            var isNeedMergeRow = o.mergeRule(map[i][j], map[i - 1][j]);

            if (isNeedMergeRow === true) {
              mergeRow(i, j);
              preRow[i] = preCol[j];
              preRW[i] = preCW[j];
            } else {
              createOneEl(i, j);
            }
          } else if (i === 0 && j > 0) {
            var isNeedMergeCol = o.mergeRule(map[i][j], map[i][j - 1]);

            if (isNeedMergeCol === true) {
              mergeCol(i, j);
              preCol[j] = preRow[i];
              preCW[j] = preRW[i];
            } else {
              createOneEl(i, j);
            }
          } else {
            var isNeedMergeRow = o.mergeRule(map[i][j], map[i - 1][j]);
            var isNeedMergeCol = o.mergeRule(map[i][j], map[i][j - 1]);

            if (isNeedMergeCol && isNeedMergeRow) {
              return;
            }

            if (isNeedMergeCol) {
              mergeCol(i, j);
            }

            if (isNeedMergeRow) {
              mergeRow(i, j);
            }

            if (!isNeedMergeCol && !isNeedMergeRow) {
              createOneEl(i, j);
            }
          }
        } else {
          createOneEl(i, j);
        }
      });

      function mergeRow(i, j) {
        // var height = (preCol[j].attr("height") | 0) + rowSize;
        // preCol[j].attr("height", height).css("height", height);
        // preCW[j].element.css("height", height);
        var rowspan = ((preCol[j].attr("rowspan") || 1) | 0) + 1;
        preCol[j].attr("rowspan", rowspan);
        BI.pushDistinct(preCol[j].__mergeRows, i);
        TDs[i][j] = preCol[j];
        Ws[i][j] = preCW[j];
      }

      function mergeCol(i, j) {
        if (columnSize[j]) {// var width = preRow[i].attr("width") | 0;
          // width = width + columnSize[j];
          // width = self._calculateWidth(width);
          // preRow[i].attr("width", width);
          // preRW[i].element.width(width);
        }

        var colspan = ((preRow[i].attr("colspan") || 1) | 0) + 1;
        preRow[i].attr("colspan", colspan);
        BI.pushDistinct(preRow[i].__mergeCols, j);
        TDs[i][j] = preRow[i];
        Ws[i][j] = preRW[i];
      }

      function createOneEl(r, c) {
        // var width = self._calculateWidth(columnSize[c]);
        // var height = self._calculateHeight(rowSize);
        var td = BI.$("<td>").css({
          // height: height || "",
          position: "relative"
        }).addClass((c & 1) === 0 ? "odd-col" : "even-col").addClass(r === 0 ? "first-row" : "").addClass(c === 0 ? "first-col" : "").addClass(c === rows.length - 1 ? "last-col" : "");
        var w = BI.createWidget(map[r][c], {
          type: "bi.table_cell",
          // width: BI.isNumeric(width) ? (width - (c === 0 ? 2 : 1)) : "",
          // height: BI.isNumeric(height) ? (height - (r === 0 ? 2 : 1)) : "",
          _row: r,
          _col: c + start
        });
        self.addWidget(w.getName(), w);

        w._mount(); // w.element.css("position", "relative");


        td.append(w.element);
        tr.append(td);
        preCol[c] = td;
        preCol[c].__mergeRows = [r];
        preCW[c] = w;
        preRow[r] = td;
        preRow[r].__mergeCols = [c];
        preRW[r] = w;
        TDs[r][c] = td;
        Ws[r][c] = w;
      }

      frag.appendChild(tr[0]);
    });
    return frag;
  },
  _createColGroupCells: function _createColGroupCells(columnSize, store) {
    var self = this,
        o = this.options;
    columnSize = columnSize || o.columnSize;
    store = store || {};
    var frag = document.createDocumentFragment();
    BI.each(columnSize, function (i, size) {
      var width = self._calculateWidth(size);

      var col = BI.$("<col>").css("width", width);
      store[i] = col;
      frag.appendChild(col[0]);
    });
    return frag;
  },
  _createHeaderCells: function _createHeaderCells(items, columnSize, mergeCols, TDs, Ws, start) {
    var self = this,
        o = this.options;
    start || (start = 0);

    var frag = this._createCells(items, columnSize, BI.range(o.columnSize.length), TDs, Ws, start, o.headerRowSize || o.rowSize, true);

    return frag;
  },
  _createFooterCells: function _createFooterCells(items, columnSize, TDs, Ws) {
    var o = this.options;

    var frag = this._createCells(items, columnSize, [], TDs, Ws, 0);

    return frag;
  },
  _createColGroup: function _createColGroup(columnSize, store, widgets) {
    var self = this,
        o = this.options;
    this.colgroup = this._colgroup();
    this.colgroup.element.append(this._createColGroupCells(columnSize, store, widgets));
    return this.colgroup;
  },
  _createHeader: function _createHeader() {
    var self = this,
        o = this.options;

    if (o.header === false) {
      return;
    }

    this.header = this._header();
    this.header.element.append(this._createHeaderCells(o.header, null, null, this.headerTds, this.headerItems));
    return this.header;
  },
  _createFooter: function _createFooter(columnSize, store, widgets) {
    var self = this,
        o = this.options;

    if (o.footer === false) {
      return;
    }

    this.footer = this._footer();
    this.footer.element.append(this._createFooterCells(o.footer, null, this.footerTds, this.footerItems));
    return this.footer;
  },
  _createBody: function _createBody() {
    var self = this,
        o = this.options;
    this.body = this._body();
    this.body.element.append(this._createCells(o.items, null, null, this.bodyTds, this.bodyItems));
    return this.body;
  },
  _createNormalTable: function _createNormalTable() {
    var self = this,
        o = this.options,
        table = this._table();

    this.colgroupTds = {};
    this.headerTds = {};
    this.footerTds = {};
    this.bodyTds = {};
    this.headerItems = {};
    this.footerItems = {};
    this.bodyItems = {};

    var colgroup = this._createColGroup(null, this.colgroupTds);

    var header = this._createHeader();

    var footer = this._createFooter();

    var body = this._createBody();

    this.tableContainer = BI.createWidget({
      type: "bi.default",
      element: table,
      width: this._calculateWidth(w),
      items: [colgroup, header, footer, body]
    });

    if (this._isColumnSizeValid(o.columnSize)) {
      var w = BI.sum(o.columnSize) || undefined;
      w = this._calculateWidth(w);
    }

    this.scrollBottomRight = BI.createWidget({
      type: "bi.adaptive",
      width: "100%",
      height: "100%",
      cls: "scroll-bottom-right",
      scrollable: true,
      items: [this.tableContainer]
    });
    BI.createWidget({
      type: "bi.adaptive",
      cls: "".concat(o.bordered ? "bordered" : "", " ").concat(o.stripe ? "stripe" : "", " \"bottom-right\""),
      element: this,
      scrollable: false,
      items: [this.scrollBottomRight]
    });

    this._initNormalScroll();
  },
  _initNormalScroll: function _initNormalScroll() {
    var self = this;
    this.scrollBottomRight.element.scroll(function (e) {
      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL);
    });
  },
  _split: function _split(items) {
    var o = this.options,
        left = [],
        right = [],
        isRight = this._isRightFreeze();

    BI.each(items, function (i, rows) {
      left.push([]);
      right.push([]);
      BI.each(rows, function (j, cell) {
        if (o.freezeCols.includes(j)) {
          (isRight ? right : left)[i].push(cell);
        } else {
          (isRight ? left : right)[i].push(cell);
        }
      });
    });
    return {
      left: left,
      right: right
    };
  },
  _table: function _table() {
    return BI.createWidget({
      type: "bi.layout",
      tagName: "table",
      cls: "table-view-table",
      attribute: {
        cellspacing: 0,
        cellpadding: 0
      }
    });
  },
  _header: function _header() {
    return BI.createWidget({
      type: "bi.layout",
      cls: "table-view-header",
      tagName: "thead"
    });
  },
  _footer: function _footer() {
    return BI.createWidget({
      type: "bi.layout",
      cls: "table-view-footer",
      tagName: "tfoot"
    });
  },
  _body: function _body() {
    return BI.createWidget({
      type: "bi.layout",
      tagName: "tbody",
      cls: "table-view-body"
    });
  },
  _colgroup: function _colgroup() {
    return BI.createWidget({
      type: "bi.layout",
      tagName: "colgroup"
    });
  },
  render: function render() {
    if (this.options.items.length > 0 || this.options.header.length > 0) {
      this.populate(this.options.items);
    }
  },
  setColumnSize: function setColumnSize(columnSize) {
    var self = this,
        o = this.options;

    var isRight = this._isRightFreeze();

    o.columnSize = columnSize || [];

    if (o.isNeedFreeze) {
      var columnLeft = [];
      var columnRight = [];
      BI.each(o.columnSize, function (i, size) {
        if (o.freezeCols.includes(i)) {
          isRight ? columnRight.push(size) : columnLeft.push(size);
        } else {
          isRight ? columnLeft.push(size) : columnRight.push(size);
        }
      });
      var topleft = 0,
          topright = 1,
          bottomleft = 2,
          bottomright = 3;

      var run = function run(direction) {
        var colgroupTds, bodyTds, bodyItems, sizes;

        switch (direction) {
          case topleft:
            colgroupTds = self.topLeftColGroupTds;
            bodyTds = self.topLeftBodyTds;
            bodyItems = self.topLeftBodyItems;
            sizes = columnLeft;
            break;

          case topright:
            colgroupTds = self.topRightColGroupTds;
            bodyTds = self.topRightBodyTds;
            bodyItems = self.topRightBodyItems;
            sizes = columnRight;
            break;

          case bottomleft:
            colgroupTds = self.bottomLeftColGroupTds;
            bodyTds = self.bottomLeftBodyTds;
            bodyItems = self.bottomLeftBodyItems;
            sizes = columnLeft;
            break;

          case bottomright:
            colgroupTds = self.bottomRightColGroupTds;
            bodyTds = self.bottomRightBodyTds;
            bodyItems = self.bottomRightBodyItems;
            sizes = columnRight;
            break;
        }

        BI.each(colgroupTds, function (i, colgroup) {
          var width = colgroup.attr("width") | 0;

          if (sizes[i] !== "" && width !== sizes[i]) {
            var w = self._calculateWidth(sizes[i]);

            colgroup.attr("width", w).css("width", w);
          }
        });
      };

      run(topleft);
      run(topright);
      run(bottomleft);
      run(bottomright);
      var lw = 0,
          rw = 0,
          lValid = true,
          rValid = true;
      this.columnLeft = [];
      this.columnRight = [];
      BI.each(o.columnSize, function (i, size) {
        if (o.freezeCols.includes(i)) {
          if (!BI.isNumeric(size)) {
            isRight ? rValid = false : lValid = false;
          }

          lw += size;
          self[isRight ? "columnRight" : "columnLeft"].push(size);
        } else {
          if (!BI.isNumeric(size)) {
            isRight ? lValid = false : rValid = false;
          }

          rw += size;
          self[isRight ? "columnLeft" : "columnRight"].push(size);
        }
      });

      if (lValid) {
        lw = this._calculateWidth(lw);

        if (BI.isNumeric(lw)) {
          lw = BI.parseFloat(lw);
        }
      }

      if (rValid) {
        rw = this._calculateWidth(rw);

        if (BI.isNumeric(rw)) {
          rw = BI.parseFloat(rw);
        }
      }

      if (lValid || rValid && isRight) {
        this.topLeftContainer.element.width(isRight ? rw : lw);
        this.bottomLeftContainer.element.width(isRight ? rw : lw);
      } else {
        this.topLeftContainer.element.width("");
        this.bottomLeftContainer.element.width("");
      }

      if (rValid || lValid && isRight) {
        this.topRightContainer.element.width(isRight ? lw : rw);
        this.bottomRightContainer.element.width(isRight ? lw : rw);
      } else {
        this.topRightContainer.element.width("");
        this.bottomRightContainer.element.width("");
      }

      this.scrollTopLeft.element[0].scrollLeft = this.scrollBottomLeft.element[0].scrollLeft;
      this.scrollTopRight.element[0].scrollLeft = this.scrollBottomRight.element[0].scrollLeft;
    } else {
      BI.each(this.colgroupTds, function (i, colgroup) {
        var width = colgroup.attr("width") | 0;

        if (o.columnSize[i] !== "" && width !== o.columnSize[i]) {
          var w = self._calculateWidth(o.columnSize[i]);

          colgroup.attr("width", w).css("width", w);
        }
      });

      if (this._isColumnSizeValid(o.columnSize)) {
        var w = this._calculateWidth(BI.sum(o.columnSize));

        if (w > 1.05) {
          this.tableContainer.element.width(w);
        }
      } else {
        this.tableContainer.element.width("");
      }
    }
  },
  getColumnSize: function getColumnSize() {
    return this.options.columnSize;
  },
  getCalculateColumnSize: function getCalculateColumnSize() {
    var self = this,
        o = this.options;
    var columnSize = [];

    if (o.isNeedFreeze === true) {
      if (BI.size(this.bottomLeftBodyTds) > 0 || BI.size(this.bottomRightBodyTds) > 0) {
        if (!BI.any(this.bottomLeftBodyTds, function (i, tds) {
          if (!BI.any(tds, function (i, item) {
            if (item.__mergeCols.length > 1) {
              return true;
            }
          })) {
            BI.each(tds, function (i, item) {
              var width = item.width() / item.__mergeCols.length;

              columnSize.push(width);
            });
            return true;
          }
        })) {
          BI.each(this.bottomLeftBodyTds[0], function (i, item) {
            var width = item.width() / item.__mergeCols.length;

            columnSize.push(width);
          });
        }

        if (!BI.any(this.bottomRightBodyTds, function (i, tds) {
          if (!BI.any(tds, function (i, item) {
            if (item.__mergeCols.length > 1) {
              return true;
            }
          })) {
            BI.each(tds, function (i, item) {
              var width = item.width() / item.__mergeCols.length;

              columnSize.push(width);
            });
            return true;
          }
        })) {
          BI.each(this.bottomRightBodyTds[0], function (i, item) {
            var width = item.width() / item.__mergeCols.length;

            columnSize.push(width);
          });
        }

        return columnSize;
      }

      if (!BI.any(this.topLeftBodyTds, function (i, tds) {
        if (!BI.any(tds, function (i, item) {
          if (item.__mergeCols.length > 1) {
            return true;
          }
        })) {
          BI.each(tds, function (i, item) {
            var width = item.width() / item.__mergeCols.length;

            columnSize.push(width);
          });
          return true;
        }
      })) {
        BI.each(this.topLeftBodyTds[BI.size(this.topLeftBodyTds) - 1], function (i, item) {
          var width = item.width() / item.__mergeCols.length;

          columnSize.push(width);
        });
      }

      if (!BI.any(this.topRightBodyTds, function (i, tds) {
        if (!BI.any(tds, function (i, item) {
          if (item.__mergeCols.length > 1) {
            return true;
          }
        })) {
          BI.each(tds, function (i, item) {
            var width = item.width() / item.__mergeCols.length;

            columnSize.push(width);
          });
          return true;
        }
      })) {
        BI.each(this.topRightBodyTds[BI.size(this.topRightBodyTds) - 1], function (i, item) {
          var width = item.width() / item.__mergeCols.length;

          columnSize.push(width);
        });
      }
    } else {
      BI.each(this.headerTds[BI.size(this.headerTds) - 1], function (i, item) {
        var width = item.width() / item.__mergeCols.length;

        columnSize.push(width);
      });
    }

    return columnSize;
  },
  setHeaderColumnSize: function setHeaderColumnSize(columnSize) {
    var self = this,
        o = this.options;

    var isRight = this._isRightFreeze();

    if (o.isNeedFreeze) {
      var columnLeft = [];
      var columnRight = [];
      BI.each(columnSize, function (i, size) {
        if (o.freezeCols.includes(i)) {
          isRight ? columnRight.push(size) : columnLeft.push(size);
        } else {
          isRight ? columnLeft.push(size) : columnRight.push(size);
        }
      });
      var topleft = 0,
          topright = 1;

      var run = function run(direction) {
        var colgroupTds, bodyTds, bodyItems, sizes;

        switch (direction) {
          case topleft:
            colgroupTds = self.topLeftColGroupTds;
            bodyTds = self.topLeftBodyTds;
            bodyItems = self.topLeftBodyItems;
            sizes = columnLeft;
            break;

          case topright:
            colgroupTds = self.topRightColGroupTds;
            bodyTds = self.topRightBodyTds;
            bodyItems = self.topRightBodyItems;
            sizes = columnRight;
            break;
        }

        BI.each(colgroupTds, function (i, colgroup) {
          var width = colgroup.attr("width") | 0;

          if (width !== sizes[i]) {
            var w = self._calculateWidth(sizes[i]);

            colgroup.attr("width", w).css("width", w);
          }
        });
      };

      run(topleft);
      run(topright);
      var lw = 0,
          rw = 0;
      BI.each(columnSize, function (i, size) {
        if (o.freezeCols.includes(i)) {
          lw += size;
        } else {
          rw += size;
        }
      });
      lw = this._calculateWidth(lw);
      rw = this._calculateWidth(rw);

      if (BI.isNumeric(lw)) {
        lw = BI.parseFloat(lw);
      }

      if (BI.isNumeric(rw)) {
        rw = BI.parseFloat(rw);
      }

      this.topLeftContainer.element.width(isRight ? rw : lw);
      this.topRightContainer.element.width(isRight ? lw : rw);
      this.scrollTopLeft.element[0].scrollLeft = this.scrollBottomLeft.element[0].scrollLeft;
      this.scrollTopRight.element[0].scrollLeft = this.scrollBottomRight.element[0].scrollLeft;
    } else {
      BI.each(this.colgroupTds, function (i, colgroup) {
        var width = colgroup.attr("width") | 0;

        if (width !== columnSize[i]) {
          var w = self._calculateWidth(columnSize[i]);

          colgroup.attr("width", w).css("width", w);
        }
      });

      var cW = this._calculateWidth(BI.sum(columnSize));

      this.tableContainer.element.width(cW);
    }
  },
  setRegionColumnSize: function setRegionColumnSize(columnSize) {
    var self = this,
        o = this.options;
    o.regionColumnSize = columnSize;

    if (o.freezeCols.length === 0) {
      if (o.isNeedFreeze) {//     this.topLeft.element.css("width", columnSize);
        //     this.topRight.element.css("left", columnSize);
        //     this.bottomLeft.element.css("width", columnSize);
        //     this.bottomRight.element.css("left", columnSize);
      } else {// this.tableContainer.element.width(columnSize[0]);
      }
    } else if (o.freezeCols.length > 0 && o.freezeCols.length < o.columnSize.length) {
      if (o.isNeedFreeze) {
        this.topLeft.element.css("width", columnSize); // this.topRight.element.css("left", columnSize + "px");

        this.bottomLeft.element.css("width", columnSize); // this.bottomRight.element.css("left", columnSize + "px");
      } else {// this.tableContainer.element.width(columnSize[0]);
      }
    } else {
      if (o.isNeedFreeze) {// this.partitions.attr("columnSize", this._isRightFreeze() ? [0, "fill"] : ["fill", 0]);
        // this.partitions.resize();
      } else {// this.tableContainer.element.width(columnSize[0]);
      }
    }
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.options.regionColumnSize;
  },
  getCalculateRegionColumnSize: function getCalculateRegionColumnSize() {
    var o = this.options;

    if (o.isNeedFreeze) {
      return [this.scrollBottomLeft.element.width(), this.scrollBottomRight.element.width()];
    }

    return [this.scrollBottomRight.element.width()];
  },
  getCalculateRegionRowSize: function getCalculateRegionRowSize() {
    var o = this.options;

    if (o.isNeedFreeze) {
      return [this.scrollTopRight.element.height(), this.scrollBottomRight.element.height()];
    }

    return [this.scrollBottomRight.element.height()];
  },
  getClientRegionColumnSize: function getClientRegionColumnSize() {
    var o = this.options;

    if (o.isNeedFreeze) {
      return [this.scrollBottomLeft.element[0].clientWidth, this.scrollBottomRight.element[0].clientWidth];
    }

    return [this.scrollBottomRight.element[0].clientWidth];
  },
  getClientRegionRowSize: function getClientRegionRowSize() {
    var o = this.options;

    if (o.isNeedFreeze) {
      return [this.scrollBottomLeft.element[0].clientHeight, this.scrollBottomRight.element[0].clientHeight];
    }

    return [this.scrollBottomRight.element[0].clientHeight];
  },
  getScrollRegionColumnSize: function getScrollRegionColumnSize() {
    var o = this.options;

    if (o.isNeedFreeze) {
      return [this.scrollBottomLeft.element[0].scrollWidth, this.scrollBottomRight.element[0].scrollWidth];
    }

    return [this.scrollBottomRight.element[0].scrollWidth];
  },
  getScrollRegionRowSize: function getScrollRegionRowSize() {
    var o = this.options;

    if (o.isNeedFreeze) {
      if (o.freezeCols.length < o.columnSize.length) {
        return [this.scrollTopRight.element[0].scrollHeight, this.scrollBottomRight.element[0].scrollHeight];
      }

      return [this.scrollTopLeft.element[0].scrollHeight, this.scrollBottomLeft.element[0].scrollHeight];
    }

    return [this.scrollBottomRight.element[0].scrollHeight];
  },
  hasVerticalScroll: function hasVerticalScroll() {
    var o = this.options;

    if (o.isNeedFreeze) {
      return this.scrollBottomRight.element.hasVerticalScroll() || this.scrollBottomLeft.element.hasVerticalScroll();
    }

    return this.scrollBottomRight.element.hasVerticalScroll();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    var o = this.options;

    if (o.isNeedFreeze) {
      if (this.scrollBottomRight.element[0].scrollTop !== scrollTop) {
        this.scrollBottomRight.element[0].scrollTop = scrollTop;
      }

      if (this.scrollBottomLeft.element[0].scrollTop !== scrollTop) {
        this.scrollBottomLeft.element[0].scrollTop = scrollTop;
      }
    } else {
      if (this.scrollBottomRight.element[0].scrollTop !== scrollTop) {
        this.scrollBottomRight.element[0].scrollTop = scrollTop;
      }
    }
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    var o = this.options;

    if (o.isNeedFreeze) {
      if (this.scrollBottomLeft.element[0].scrollLeft !== scrollLeft) {
        this.scrollBottomLeft.element[0].scrollLeft = scrollLeft;
      }

      if (this.scrollTopLeft.element[0].scrollLeft !== scrollLeft) {
        this.scrollTopLeft.element[0].scrollLeft = scrollLeft;
      }
    } else {
      if (this.scrollBottomRight.element[0].scrollLeft !== scrollLeft) {
        this.scrollBottomRight.element[0].scrollLeft = scrollLeft;
      }
    }
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    var o = this.options;

    if (o.isNeedFreeze) {
      if (this.scrollBottomRight.element[0].scrollLeft !== scrollLeft) {
        this.scrollBottomRight.element[0].scrollLeft = scrollLeft;
      }

      if (this.scrollTopRight.element[0].scrollLeft !== scrollLeft) {
        this.scrollTopRight.element[0].scrollLeft = scrollLeft;
      }
    } else {
      if (this.scrollBottomRight.element[0].scrollLeft !== scrollLeft) {
        this.scrollBottomRight.element[0].scrollLeft = scrollLeft;
      }
    }
  },
  getVerticalScroll: function getVerticalScroll() {
    var o = this.options;

    if (o.isNeedFreeze) {
      return this.scrollBottomRight.element[0].scrollTop || this.scrollBottomLeft.element[0].scrollTop;
    }

    return this.scrollBottomRight.element[0].scrollTop;
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    var o = this.options;

    if (o.isNeedFreeze) {
      return this.scrollBottomLeft.element[0].scrollLeft;
    }

    return this.scrollBottomRight.element[0].scrollLeft;
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    var o = this.options;

    if (o.isNeedFreeze) {
      return this.scrollBottomRight.element[0].scrollLeft;
    }

    return this.scrollBottomRight.element[0].scrollLeft;
  },
  getColumns: function getColumns() {
    var o = this.options;

    if (o.isNeedFreeze) {
      return {
        topLeft: this.topLeftBodyItems,
        topRight: this.topRightBodyItems,
        bottomLeft: this.bottomLeftBodyItems,
        bottomRight: this.bottomRightBodyItems
      };
    }

    return {
      header: this.headerItems,
      body: this.bodyItems,
      footer: this.footerItems
    };
  },
  // _empty: function () {
  //     this.scrollBottomRight && this.scrollBottomRight.destroy();
  //     BI.each(this.partitions && this.partitions._children, function (name, child) {
  //         child && child.destroy();
  //     });
  // },
  populate: function populate(items, header) {
    if (!items) {
      return;
    }

    this.options.items = items || [];

    if (header) {
      this.options.header = header;
    }

    this.empty();

    if (this.options.isNeedFreeze) {
      this._createFreezeTable();
    } else {
      this._createNormalTable();
    }
  }
});
BI.Table.EVENT_TABLE_AFTER_INIT = "EVENT_TABLE_AFTER_INIT";
BI.Table.EVENT_TABLE_RESIZE = "EVENT_TABLE_RESIZE";
BI.Table.EVENT_TABLE_SCROLL = "EVENT_TABLE_SCROLL";
BI.Table.EVENT_TABLE_BEFORE_COLUMN_RESIZE = "EVENT_TABLE_BEFORE_COLUMN_RESIZE";
BI.Table.EVENT_TABLE_COLUMN_RESIZE = "EVENT_TABLE_COLUMN_RESIZE";
BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE = "EVENT_TABLE_AFTER_COLUMN_RESIZE";
BI.Table.EVENT_TABLE_BEFORE_REGION_RESIZE = "EVENT_TABLE_BEFORE_REGION_RESIZE";
BI.Table.EVENT_TABLE_REGION_RESIZE = "EVENT_TABLE_REGION_RESIZE";
BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE = "EVENT_TABLE_AFTER_REGION_RESIZE";
BI.shortcut("bi.table_view", BI.Table);

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 表格单元格
 *
 * Created by GUY on 2016/1/12.
 * @class BI.ResizableTableCell
 * @extends BI.Widget
 */
BI.ResizableTableCell = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ResizableTableCell.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-resizable-table-cell",
      cell: {},
      minSize: 30,
      // suitableSize,
      maxSize: Number.MAX_VALUE,
      start: BI.emptyFn,
      resize: BI.emptyFn,
      stop: BI.emptyFn,
      _rowIndex: null,
      _columnIndex: null,
      _left: 0,
      _top: 0,
      firstRowTopLine: true,
      firstColumnLeftLine: true
    });
  },
  render: function render() {
    var self = this,
        o = this.options;
    this.cell = BI.createWidget(BI.extend({
      type: "bi.label"
    }, o.cell, {
      width: o.width,
      height: o.height,
      _rowIndex: o._rowIndex,
      _columnIndex: o._columnIndex,
      _left: o._left,
      _top: o._top,
      firstRowTopLine: o.firstRowTopLine,
      firstColumnLeftLine: o.firstColumnLeftLine
    }));
    this.handler = BI.createWidget({
      type: "bi.absolute",
      cls: "resizable-table-cell-resizer-container",
      width: 6,
      items: [{
        el: {
          type: "bi.layout",
          cls: "resizable-table-cell-resizer-knob",
          width: 4
        },
        right: 0,
        top: 0,
        bottom: 0
      }]
    });
    return [{
      type: "bi.vertical_adapt",
      columnSize: ["fill"],
      items: [this.cell]
    }, {
      type: "bi.absolute",
      items: [{
        el: this.handler,
        right: 0,
        top: 0,
        bottom: 0
      }]
    }];
  },
  mounted: function mounted() {
    var self = this,
        o = this.options;
    var startDrag = false;
    var size = 0,
        offset = 0,
        defaultSize = o.width;

    function optimizeSize(s) {
      var optSize = BI.clamp(s, o.minSize, o.maxSize || Number.MAX_VALUE); // if (o.suitableSize) {
      //     if (Math.abs(o.suitableSize - optSize) < 5) {
      //         optSize = o.suitableSize;
      //         self.handler.element.addClass("suitable");
      //     } else {
      //         self.handler.element.removeClass("suitable");
      //     }
      // }

      return optSize;
    }

    var mouseMoveTracker = new BI.MouseMoveTracker(function (deltaX, deltaY) {
      if (mouseMoveTracker.isDragging()) {
        startDrag = true;
        offset += deltaX;
        size = optimizeSize(defaultSize + offset);
        self.handler.element.addClass("dragging");
        o.resize(size, self);
      }
    }, function () {
      if (startDrag === true) {
        size = optimizeSize(size);
        o.stop(size);
        size = 0;
        offset = 0;
        defaultSize = o.width || self.element.width();
        startDrag = false;
      }

      self.handler.element.removeClass("dragging");
      self.handler.element.removeClass("suitable");
      mouseMoveTracker.releaseMouseMoves();
    }, _global.document);
    this.handler.element.on("mousedown", function (event) {
      defaultSize = o.width || self.element.width();
      optimizeSize(defaultSize);
      mouseMoveTracker.captureMouseMoves(event);
    });
  },
  setWidth: function setWidth(width) {
    BI.ResizableTableCell.superclass.setWidth.apply(this, arguments);
    var o = this.options;
    this.cell.setWidth(o.width);
  },
  setHeight: function setHeight(height) {
    BI.ResizableTableCell.superclass.setHeight.apply(this, arguments);
    var o = this.options;
    this.cell.setHeight(o.height);
  }
});
BI.shortcut("bi.resizable_table_cell", BI.ResizableTableCell);

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 可调整列宽的grid表格
 *
 * Created by GUY on 2016/1/12.
 * @class BI.ResizableTable
 * @extends BI.Widget
 */
BI.ResizableTable = BI.inherit(BI.Widget, {
  props: {
    baseCls: "bi-resizable-table",
    el: {
      type: "bi.grid_table"
    },
    isNeedFreeze: false,
    isNeedResize: true,
    headerRowSize: 25,
    rowSize: 25,
    isNeedMerge: true,
    // 是否需要合并单元格
    mergeCols: [],
    mergeRule: BI.emptyFn,
    columnSize: [],
    minColumnSize: [],
    maxColumnSize: [],
    freezeCols: [],
    header: [],
    items: [],
    regionColumnSize: []
  },
  render: function render() {
    var self = this,
        o = this.options;
    return [BI.extend({
      type: "bi.grid_table",
      width: o.width,
      height: o.height,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      columnSize: o.columnSize,
      isNeedFreeze: o.isNeedFreeze,
      freezeCols: o.freezeCols,
      isNeedMerge: o.isNeedMerge,
      mergeCols: o.mergeCols,
      mergeRule: BI.bind(this._mergeRule, this),
      header: this._formatHeader(o.header),
      items: o.items,
      regionColumnSize: o.regionColumnSize,
      listeners: [{
        eventName: BI.Table.EVENT_TABLE_SCROLL,
        action: function action() {
          self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
        }
      }]
    }, o.el, {
      ref: function ref(_ref) {
        self.table = _ref;
        o.el.ref && o.el.ref.call(this, _ref);
      }
    }), {
      type: "bi.absolute",
      items: [{
        el: this._createResizerHandler(),
        left: 0,
        top: 0,
        bottom: 0
      }, {
        el: {
          type: "bi.layout",
          cls: "resizable-table-resizer",
          invisible: true,
          width: 2,
          ref: function ref(_ref) {
            self.resizer = _ref;
          }
        },
        left: 0,
        top: 0
      }]
    }];
  },
  mounted: function mounted() {
    var self = this,
        o = this.options;
    var size = 0,
        offset = 0,
        defaultSize = 0,
        start = false;

    this._populate();

    var mouseMoveTracker = new BI.MouseMoveTracker(function (deltaX, deltaY) {
      if (mouseMoveTracker.isDragging()) {
        start = true;
        offset += deltaX;
        size = BI.clamp(defaultSize + offset, 30, o.width - 40);
        self.regionResizerHandler.element.addClass("dragging");

        self._setRegionResizerHandlerPosition(size - 3, 0);
      }
    }, function () {
      if (start === true) {
        o.regionColumnSize[0] = BI.clamp(size, 30, (o.width || self.element.width()) - 40);
        self.table.setRegionColumnSize(o.regionColumnSize); // if (o.isResizeAdapt === true) {
        //     var freezeColumnSize = self._getFreezeColumnSize();
        //     o.columnSize[self._getFreezeColLength() - 1] += o.regionColumnSize[0] - freezeColumnSize;
        //     self.table.setColumnSize(o.columnSize);
        // }
        // self.table.populate();

        self._populate();

        self.regionResizerHandler.element.removeClass("dragging");
        self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE);
        start = false;
      }

      mouseMoveTracker.releaseMouseMoves();
    }, _global.document);
    this.regionResizerHandler.element.on("mousedown", function (event) {
      defaultSize = size = self._getRegionSize();
      offset = 0;

      self._setResizerPosition(0, 0);

      mouseMoveTracker.captureMouseMoves(event);
    });
  },
  _mergeRule: function _mergeRule(row1, row2) {
    var o = this.options;

    if (row1.type === "bi.resizable_table_cell") {
      row1 = row1.cell;
    }

    if (row2.type === "bi.resizable_table_cell") {
      row2 = row2.cell;
    }

    return o.mergeRule(row1, row2);
  },
  _createResizerHandler: function _createResizerHandler() {
    var self = this;
    return {
      type: "bi.absolute",
      cls: "resizable-table-region-resizer",
      invisible: true,
      width: 6,
      items: [{
        el: {
          type: "bi.layout",
          width: 2,
          cls: "resizable-table-region-resizer-knob"
        },
        left: 2,
        top: 0,
        bottom: 0
      }],
      ref: function ref(_ref) {
        self.regionResizerHandler = _ref;
      }
    };
  },
  _setResizerPosition: function _setResizerPosition(left, top) {
    this.resizer.element.css({
      left: left + "px",
      top: top + "px"
    });
  },
  _setRegionResizerHandlerPosition: function _setRegionResizerHandlerPosition(left, top) {
    this.regionResizerHandler.element.css({
      left: left + "px",
      top: top + "px"
    });
  },
  _getRegionSize: function _getRegionSize() {
    var o = this.options;
    var regionSize = o.regionColumnSize[0] || 0;

    if (o.isNeedFreeze === false || o.freezeCols.length === 0) {
      return 0;
    }

    if (!regionSize) {
      BI.each(o.freezeCols, function (i, col) {
        regionSize += o.columnSize[col];
      });
    }

    return regionSize;
  },
  _getHeaderHeight: function _getHeaderHeight() {
    var o = this.options;
    var headerHeights = this.table.getFirstColumnHeaderRowSize && this.table.getFirstColumnHeaderRowSize();
    return headerHeights ? BI.sum(headerHeights) : o.headerRowSize * o.header.length;
  },
  _getItemsHeight: function _getItemsHeight() {
    var o = this.options;
    return this.table.getFirstColumnRowSize ? BI.sum(this.table.getFirstColumnRowSize()) : o.items.length * o.rowSize;
  },
  _getRegionRowSize: function _getRegionRowSize() {
    var o = this.options;

    var headerHeight = this._getHeaderHeight();

    var itemHeight = this._getItemsHeight();

    return [headerHeight, Math.min((o.height || this.element.height()) - headerHeight, itemHeight)];
  },
  _getFreezeColLength: function _getFreezeColLength() {
    var o = this.options;
    return o.isNeedFreeze === true ? BI.clamp(o.freezeCols.length, 0, o.columnSize.length) : 0;
  },
  _getFreezeColumnSize: function _getFreezeColumnSize() {
    var columnSize = this.options.columnSize;
    var sum = 0;

    for (var i = 0, len = this._getFreezeColLength(); i < len; i++) {
      sum += columnSize[i];
    }

    return sum;
  },
  _getResizerLeft: function _getResizerLeft(j, resizeObj) {
    var tableOffsetLeft = this.element.offset().left;
    return resizeObj.element.offset().left - tableOffsetLeft;
  },
  _formatHeader: function _formatHeader(header) {
    var self = this,
        o = this.options;

    if (!o.isNeedResize) {
      return header;
    }

    var result = [];

    var resize = function resize(j, size, resizeObj) {
      self.resizer.setVisible(true);

      var rowSize = self._getRegionRowSize();

      var height = rowSize[0] + rowSize[1];
      self.resizer.setHeight(height); // TODO 不知道为什么加入这段代码会使得列宽调整出问题
      // if (o.minColumnSize[j]) {
      //     if (size === o.minColumnSize[j]) {
      //         self.resizer.element.addClass("suitable");
      //     } else {
      //         self.resizer.element.removeClass("suitable");
      //     }
      // }

      self._setResizerPosition(self._getResizerLeft(j, resizeObj) + size, 0);
    };

    var stop = function stop(j, size) {
      self.resizer.setVisible(false);
      var columnSize = o.columnSize.slice();
      columnSize[j] = size; // 缩小单列宽度，若有多余宽（容器宽度>总列宽）

      var freezeColLength = self._getFreezeColLength();

      var freezeContainerWidth = self._getRegionSize();

      var unFreezeContainerWidth = (o.width || self.element.width()) - BI.GridTableScrollbar.SIZE - freezeContainerWidth;
      var totalColumnWidth = 0;
      var remainWidth = 0;

      if (j < freezeColLength) {
        // 调整冻结列宽
        remainWidth = freezeContainerWidth - BI.sum(columnSize.slice(0, freezeColLength));

        if (remainWidth > 0) {
          // 无滚动条且缩小
          if (j === freezeColLength - 1) {
            // 若为冻结列最后一列，则将多余宽度按比例分配给该列右侧的所有列，冻结区域宽度相应需要有所调整。
            totalColumnWidth = BI.sum(columnSize.slice(j + 1));
            BI.each(columnSize, function (idx, columnWidth) {
              idx > j && (columnSize[idx] = Math.floor(columnWidth + remainWidth * columnWidth / totalColumnWidth));
            });
            freezeContainerWidth -= remainWidth;
          } else {
            // 若非缩小冻结列最后一列，则将多余宽度按比例分配给该列右侧冻结列
            totalColumnWidth = BI.sum(columnSize.slice(j + 1, freezeColLength));
            BI.each(columnSize, function (idx, columnWidth) {
              idx > j && idx < freezeColLength && (columnSize[idx] = Math.floor(columnWidth + remainWidth * columnWidth / totalColumnWidth));
            });
          }
        }
      } else {
        // 调整非冻结列宽
        remainWidth = unFreezeContainerWidth - BI.sum(columnSize.slice(freezeColLength));

        if (remainWidth > 0) {
          // 无滚动条且缩小
          if (j === BI.size(columnSize) - 1) {
            // 缩小最后一列，按比例将缩小的宽度分配给其他列（包括冻结列）。冻结区域宽度相应需要有所调整。
            totalColumnWidth = BI.sum(columnSize.slice(0, BI.size(columnSize) - 1));
            BI.each(columnSize, function (idx, columnWidth) {
              var increaseWidth = Math.floor(remainWidth * columnWidth / totalColumnWidth);

              if (idx < j) {
                columnSize[idx] = columnWidth + increaseWidth;

                if (idx < freezeColLength) {
                  freezeContainerWidth += increaseWidth;
                }
              }
            });
          } else {
            // 若非最后一列，则将多余宽度按比例分配给该列右侧的非冻结列
            totalColumnWidth = BI.sum(columnSize.slice(j + 1));
            BI.each(columnSize, function (idx, columnWidth) {
              idx > j && (columnSize[idx] = Math.floor(columnWidth + remainWidth * columnWidth / totalColumnWidth));
            });
          }
        }
      }

      o.columnSize = columnSize;
      self.setColumnSize(columnSize);
      self.setRegionColumnSize([freezeContainerWidth]);

      self._populate();

      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, j);
    };

    BI.each(header, function (i, cols) {
      if (i === header.length - 1) {
        result[i] = [];
        BI.each(cols, function (j, col) {
          result[i][j] = {
            type: "bi.resizable_table_cell",
            cell: col,
            suitableSize: o.minColumnSize[j],
            maxSize: o.maxColumnSize[j],
            resize: BI.bind(resize, null, j),
            stop: BI.bind(stop, null, j)
          };

          if (o.isNeedMerge) {
            var r = i;

            while (r > 0 && self._mergeRule(result[r][j], result[r - 1][j])) {
              result[r - 1][j] = {
                type: "bi.resizable_table_cell",
                cell: result[r - 1][j],
                suitableSize: o.minColumnSize[j],
                maxSize: o.maxColumnSize[j],
                resize: BI.bind(resize, null, j),
                stop: BI.bind(stop, null, j)
              };
              r--;
            }
          }
        });
      } else {
        result.push(cols);
      }
    });
    return result;
  },
  _populate: function _populate() {
    var o = this.options;

    var regionSize = this._getRegionSize();

    if (regionSize > 0) {
      this.regionResizerHandler.setVisible(true);

      this._setRegionResizerHandlerPosition(regionSize - 3, this._getHeaderHeight());
    } else {
      this.regionResizerHandler.setVisible(false);
    }
  },
  setWidth: function setWidth(width) {
    BI.ResizableTable.superclass.setWidth.apply(this, arguments);
    this.table.setWidth(width);
  },
  setHeight: function setHeight(height) {
    BI.ResizableTable.superclass.setHeight.apply(this, arguments);
    this.table.setHeight(height);
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.table.setVerticalScroll(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.table.setLeftHorizontalScroll(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.table.setRightHorizontalScroll(scrollLeft);
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.options.columnSize = columnSize;
    this.table.setColumnSize(columnSize);
  },
  getColumnSize: function getColumnSize() {
    return this.table.getColumnSize();
  },
  getFirstColumnHeaderRowSize: function getFirstColumnHeaderRowSize() {
    return this.table.getFirstColumnHeaderRowSize();
  },
  getFirstColumnRowSize: function getFirstColumnRowSize() {
    return this.table.getFirstColumnRowSize();
  },
  setRegionColumnSize: function setRegionColumnSize(columnSize) {
    this.options.regionColumnSize = columnSize;
    this.table.setRegionColumnSize(columnSize);
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.table.getRegionColumnSize();
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    return this.table.getLeftHorizontalScroll();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.table.getRightHorizontalScroll();
  },
  getActualRightHorizontalScroll: function getActualRightHorizontalScroll() {
    return this.table.getActualRightHorizontalScroll();
  },
  attr: function attr() {
    BI.ResizableTable.superclass.attr.apply(this, arguments);
    return this.table.attr.apply(this.table, arguments);
  },
  restore: function restore() {
    this.table.restore();
  },
  populate: function populate(items, header) {
    if (items) {
      this.options.items = items;
    }

    if (header) {
      this.options.header = header;

      if (this.options.isNeedResize) {
        header = this._formatHeader(header);
      }
    }

    this.table.populate(items, header);

    this._populate();
  }
});
BI.shortcut("bi.resizable_table", BI.ResizableTable);

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 列宽自适应的表格
 * 1.列宽支持传递""表示自动，在自动列宽的前提下，列宽会平分剩余宽度
 * 2.自动列宽前提下，区域列宽变化会和列宽变化同步，当区域列宽过小时，列宽最小值为minColumnSize
 *
 * Created by GUY on 2021/9/10.
 * @class BI.ColumnSizeAdaptiveTable
 * @extends BI.Widget
 */
BI.ColumnSizeAdaptiveTable = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.ColumnSizeAdaptiveTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-column-size-adaptive-table",
      el: {
        type: "bi.resizable_table"
      },
      isNeedResize: true,
      isNeedFreeze: false,
      // 是否需要冻结单元格
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为true时生效
      isNeedMerge: false,
      // 是否需要合并单元格
      mergeCols: [],
      // 合并的单元格列号
      mergeRule: BI.emptyFn,
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      header: [],
      items: [],
      // 二维数组
      // 交叉表头
      crossHeader: [],
      crossItems: []
    });
  },
  _init: function _init() {
    BI.ColumnSizeAdaptiveTable.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    var data = this._digest();

    this.table = BI.createWidget(o.el, {
      type: "bi.resizable_table",
      element: this,
      width: o.width,
      height: o.height,
      isNeedResize: o.isNeedResize,
      isNeedFreeze: o.isNeedFreeze,
      freezeCols: data.freezeCols,
      isNeedMerge: o.isNeedMerge,
      mergeCols: o.mergeCols,
      mergeRule: o.mergeRule,
      columnSize: data.columnSize,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      regionColumnSize: data.regionColumnSize,
      header: o.header,
      items: o.items,
      // 交叉表头
      crossHeader: o.crossHeader,
      crossItems: o.crossItems
    });
    this.table.on(BI.Table.EVENT_TABLE_SCROLL, function () {
      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();

      self._populate();

      self.table.populate();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, function (index) {
      // 谁resize了谁改
      o.columnSize[index] = this.getColumnSize()[index]; // o.regionColumnSize = this.getRegionColumnSize();

      self._populate();

      self.table.populate();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
    });
  },
  _getFreezeColLength: function _getFreezeColLength() {
    var o = this.options;

    if (o.isNeedFreeze === true) {
      // 冻结列与总列数相同时
      if (o.freezeCols.length === o.columnSize.length) {
        return 0;
      }

      return BI.clamp(o.freezeCols.length, 0, o.columnSize.length);
    }

    return 0;
  },
  _digest: function _digest() {
    var o = this.options;
    var regionColumnSize = o.regionColumnSize.slice();
    var freezeCols = o.freezeCols.slice();
    var regionSize = o.regionColumnSize[0];

    var freezeColLength = this._getFreezeColLength();

    var emptyColumns = [];
    var allColumnSize = BI.sum(o.columnSize, function (i, size) {
      return size || 0;
    });
    BI.each(o.columnSize, function (i, size) {
      if (!size) {
        emptyColumns.push(i);
      }
    }); // 空列就平分剩下的宽度

    var emptyColumnSize = (o.width - BI.GridTableScrollbar.SIZE - allColumnSize) / emptyColumns.length;
    var columnSize = o.columnSize.map(function (size, i) {
      if (!size) {
        if (o.minColumnSize[i]) {
          return BI.clamp(emptyColumnSize, o.minColumnSize, o.width - BI.GridTableScrollbar.SIZE);
        }

        return emptyColumnSize;
      }

      return size;
    });

    if (!regionSize || regionSize > o.width - BI.GridTableScrollbar.SIZE || regionSize < BI.GridTableScrollbar.SIZE) {
      var rs = BI.sum(columnSize, function (i, size) {
        if (i < freezeColLength) {
          return size;
        }

        return 0;
      });
      regionSize = BI.clamp(rs, 0, 4 / 5 * o.width);
    }

    if (freezeColLength === 0) {
      regionSize = 0;
    }

    if (freezeCols.length >= columnSize.length) {
      freezeCols = [];
    }

    var summaryFreezeColumnSize = 0,
        summaryColumnSize = 0;
    BI.each(columnSize, function (i, size) {
      if (i < freezeColLength) {
        summaryFreezeColumnSize += size;
      }

      summaryColumnSize += size;
    }); // 区域列宽宽度总和不大于区域宽度

    if (freezeColLength > 0 && summaryFreezeColumnSize < regionSize) {
      columnSize[freezeColLength - 1] += regionSize - summaryFreezeColumnSize;
    } // 区域列宽宽度总和大于区域宽度


    if (freezeColLength > 0 && summaryFreezeColumnSize > regionSize) {
      columnSize[freezeColLength - 1] = regionSize - (summaryFreezeColumnSize - columnSize[freezeColLength - 1]);

      if (columnSize[freezeColLength - 1] < (o.minColumnSize[freezeColLength - 1] || emptyColumnSize)) {
        columnSize[freezeColLength - 1] = o.minColumnSize[freezeColLength - 1] || emptyColumnSize;
      }
    } // 冻结只取冻结区域宽度


    var actualSize = summaryColumnSize;

    if (o.isNeedFreeze && freezeColLength > 0) {
      actualSize = summaryColumnSize - summaryFreezeColumnSize + regionSize;
    } // 列宽总和不大于表格总宽度


    if (columnSize.length > 0 && actualSize < o.width - BI.GridTableScrollbar.SIZE) {
      // BI-49217 列宽总和小于表格总宽度（容器宽度）时，将最后一列重新赋值，以使其填满容器
      columnSize[columnSize.length - 1] = o.width - BI.GridTableScrollbar.SIZE - regionSize - (summaryColumnSize - summaryFreezeColumnSize - columnSize[columnSize.length - 1]);
    }

    regionColumnSize[0] = regionSize;
    return {
      freezeCols: freezeCols,
      columnSize: columnSize,
      regionColumnSize: regionColumnSize
    };
  },
  _populate: function _populate() {
    var o = this.options;

    var data = this._digest(); // o.regionColumnSize = data.regionColumnSize;
    // o.columnSize = data.columnSize;


    this.table.setColumnSize(data.columnSize);
    this.table.setRegionColumnSize(data.regionColumnSize);
    this.table.attr("freezeCols", data.freezeCols);
  },
  setWidth: function setWidth(width) {
    BI.ColumnSizeAdaptiveTable.superclass.setWidth.apply(this, arguments);
    this.table.setWidth(width);
  },
  setHeight: function setHeight(height) {
    BI.ColumnSizeAdaptiveTable.superclass.setHeight.apply(this, arguments);
    this.table.setHeight(height);
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.options.columnSize = columnSize;
  },
  getColumnSize: function getColumnSize() {
    return this.table.getColumnSize();
  },
  setRegionColumnSize: function setRegionColumnSize(regionColumnSize) {
    this.options.regionColumnSize = regionColumnSize;
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.table.getRegionColumnSize();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.table.setVerticalScroll(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.table.setLeftHorizontalScroll(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.table.setRightHorizontalScroll(scrollLeft);
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    return this.table.getLeftHorizontalScroll();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.table.getRightHorizontalScroll();
  },
  attr: function attr(key, value) {
    var v = BI.ColumnSizeAdaptiveTable.superclass.attr.apply(this, arguments);

    if (key === "freezeCols") {
      return v;
    }

    return this.table.attr.apply(this.table, arguments);
  },
  restore: function restore() {
    this.table.restore();
  },
  populate: function populate(items) {
    var self = this,
        o = this.options;

    this._populate();

    this.table.populate.apply(this.table, arguments);
  },
  destroy: function destroy() {
    this.table.destroy();
    BI.ColumnSizeAdaptiveTable.superclass.destroy.apply(this, arguments);
  }
});
BI.shortcut("bi.column_size_adaptive_table", BI.ColumnSizeAdaptiveTable);

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 自适应宽度的表格
 *
 * Created by GUY on 2016/2/3.
 * @class BI.AdaptiveTable
 * @extends BI.Widget
 */
BI.AdaptiveTable = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.AdaptiveTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-adaptive-table",
      el: {
        type: "bi.resizable_table"
      },
      isNeedResize: true,
      isNeedFreeze: false,
      // 是否需要冻结单元格
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为true时生效
      isNeedMerge: false,
      // 是否需要合并单元格
      mergeCols: [],
      // 合并的单元格列号
      mergeRule: BI.emptyFn,
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      header: [],
      items: [],
      // 二维数组
      // 交叉表头
      crossHeader: [],
      crossItems: []
    });
  },
  _init: function _init() {
    BI.AdaptiveTable.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    var data = this._digest();

    this.table = BI.createWidget(o.el, {
      type: "bi.resizable_table",
      element: this,
      width: o.width,
      height: o.height,
      isNeedResize: o.isNeedResize,
      isNeedFreeze: o.isNeedFreeze,
      freezeCols: data.freezeCols,
      isNeedMerge: o.isNeedMerge,
      mergeCols: o.mergeCols,
      mergeRule: o.mergeRule,
      columnSize: data.columnSize,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      regionColumnSize: data.regionColumnSize,
      header: o.header,
      items: o.items,
      // 交叉表头
      crossHeader: o.crossHeader,
      crossItems: o.crossItems
    });
    this.table.on(BI.Table.EVENT_TABLE_SCROLL, function () {
      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();

      self._populate();

      self.table.populate();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, function () {
      o.columnSize = this.getColumnSize();
      o.regionColumnSize = this.getRegionColumnSize();

      self._populate();

      self.table.populate();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
    });
  },
  _getFreezeColLength: function _getFreezeColLength() {
    var o = this.options;

    if (o.isNeedFreeze === true) {
      // 冻结列与总列数相同时
      if (o.freezeCols.length === o.columnSize.length) {
        return 0;
      }

      return BI.clamp(o.freezeCols.length, 0, o.columnSize.length);
    }

    return 0;
  },
  _digest: function _digest() {
    var o = this.options;
    var columnSize = o.columnSize.slice();
    var regionColumnSize = o.regionColumnSize.slice();
    var freezeCols = o.freezeCols.slice();
    var regionSize = o.regionColumnSize[0];

    var freezeColLength = this._getFreezeColLength();

    if (!regionSize || regionSize > o.width - BI.GridTableScrollbar.SIZE || regionSize < BI.GridTableScrollbar.SIZE) {
      var rs = BI.sum(columnSize, function (i, size) {
        if (i < freezeColLength) {
          return size;
        }

        return 0;
      });
      regionSize = BI.clamp(rs, 1 / 5 * o.width, 4 / 5 * o.width);
    }

    if (freezeColLength === 0) {
      regionSize = 0;
    }

    if (freezeCols.length >= columnSize.length) {
      freezeCols = [];
    }

    if (!BI.isNumber(columnSize[0])) {
      columnSize = o.minColumnSize.slice();
    }

    var summaryFreezeColumnSize = 0,
        summaryColumnSize = 0;
    BI.each(columnSize, function (i, size) {
      if (i < freezeColLength) {
        summaryFreezeColumnSize += size;
      }

      summaryColumnSize += size;
    });

    if (freezeColLength > 0 && summaryFreezeColumnSize < regionSize) {
      columnSize[freezeColLength - 1] += regionSize - summaryFreezeColumnSize;
    } // 冻结只取冻结区域宽度


    var actualSize = summaryColumnSize;

    if (o.isNeedFreeze && freezeColLength > 0) {
      actualSize = summaryColumnSize - summaryFreezeColumnSize + regionSize;
    } // 列宽总和不大于表格总宽度


    if (columnSize.length > 0 && actualSize < o.width - BI.GridTableScrollbar.SIZE) {
      // BI-49217 列宽总和小于表格总宽度（容器宽度）时，将最后一列重新赋值，以使其填满容器
      columnSize[columnSize.length - 1] = o.width - BI.GridTableScrollbar.SIZE - regionSize - (summaryColumnSize - summaryFreezeColumnSize - columnSize[columnSize.length - 1]);
    }

    regionColumnSize[0] = regionSize;
    return {
      freezeCols: freezeCols,
      columnSize: columnSize,
      regionColumnSize: regionColumnSize
    };
  },
  _populate: function _populate() {
    var o = this.options;

    var data = this._digest();

    o.regionColumnSize = data.regionColumnSize;
    o.columnSize = data.columnSize;
    this.table.setColumnSize(data.columnSize);
    this.table.setRegionColumnSize(data.regionColumnSize);
    this.table.attr("freezeCols", data.freezeCols);
  },
  setWidth: function setWidth(width) {
    BI.AdaptiveTable.superclass.setWidth.apply(this, arguments);
    this.table.setWidth(width);
  },
  setHeight: function setHeight(height) {
    BI.AdaptiveTable.superclass.setHeight.apply(this, arguments);
    this.table.setHeight(height);
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.options.columnSize = columnSize;
  },
  getColumnSize: function getColumnSize() {
    return this.table.getColumnSize();
  },
  getFirstColumnHeaderRowSize: function getFirstColumnHeaderRowSize() {
    return this.table.getFirstColumnHeaderRowSize();
  },
  getFirstColumnRowSize: function getFirstColumnRowSize() {
    return this.table.getFirstColumnRowSize();
  },
  setRegionColumnSize: function setRegionColumnSize(regionColumnSize) {
    this.options.regionColumnSize = regionColumnSize;
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.table.getRegionColumnSize();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.table.setVerticalScroll(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.table.setLeftHorizontalScroll(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.table.setRightHorizontalScroll(scrollLeft);
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    return this.table.getLeftHorizontalScroll();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.table.getRightHorizontalScroll();
  },
  attr: function attr(key, value) {
    var v = BI.AdaptiveTable.superclass.attr.apply(this, arguments);

    if (key === "freezeCols") {
      return v;
    }

    return this.table.attr.apply(this.table, arguments);
  },
  restore: function restore() {
    this.table.restore();
  },
  populate: function populate(items) {
    var self = this,
        o = this.options;

    this._populate();

    this.table.populate.apply(this.table, arguments);
  },
  destroy: function destroy() {
    this.table.destroy();
    BI.AdaptiveTable.superclass.destroy.apply(this, arguments);
  }
});
BI.shortcut("bi.adaptive_table", BI.AdaptiveTable);

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 层级树状结构的表格
 *
 * Created by GUY on 2016/8/12.
 * @class BI.DynamicSummaryLayerTreeTable
 * @extends BI.Widget
 */
BI.DynamicSummaryLayerTreeTable = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DynamicSummaryLayerTreeTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-dynamic-summary-layer-tree-table",
      el: {
        type: "bi.resizable_table"
      },
      isNeedResize: true,
      // 是否需要调整列宽
      isNeedFreeze: false,
      // 是否需要冻结单元格
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为tree时生效
      isNeedMerge: true,
      // 是否需要合并单元格
      mergeCols: [],
      mergeRule: BI.emptyFn,
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      footerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      // 行表头
      rowHeaderCreator: null,
      headerCellStyleGetter: BI.emptyFn,
      summaryCellStyleGetter: BI.emptyFn,
      sequenceCellStyleGetter: BI.emptyFn,
      // 传给汇总、序号单元格的store，能在单元格绘制时使用上下文中的cssScale
      tableStyleCellStoreGetter: null,
      header: [],
      footer: false,
      items: [],
      // 交叉表头
      crossHeader: [],
      crossItems: [],
      // 汇总行位置
      summaryText: BI.i18nText("BI-Summary_Values"),
      rowPosition: "bottom",
      colPosition: "right"
    });
  },
  _getVDeep: function _getVDeep() {
    return this.options.crossHeader.length; // 纵向深度
  },
  _getHDeep: function _getHDeep() {
    var o = this.options;
    return Math.max(o.mergeCols.length, o.freezeCols.length, BI.TableTree.maxDeep(o.items) - 1);
  },
  _createHeader: function _createHeader(vDeep) {
    var self = this,
        o = this.options;
    var header = o.header || [],
        crossHeader = o.crossHeader || [];
    var items = BI.isEmpty(header) ? BI.TableTree.formatCrossItems4Special(o.crossItems, vDeep, o.headerCellStyleGetter, {
      sumPosition: this.options.colPosition === "right",
      summaryText: o.summaryText
    }) : BI.TableTree.formatCrossItems(o.crossItems, vDeep, o.headerCellStyleGetter, {
      sumPosition: this.options.colPosition === "right",
      summaryText: o.summaryText
    });
    var result = [];
    BI.each(items, function (row, node) {
      var c = [crossHeader[row]];
      result.push(c.concat(node || []));
    });
    var rowHeaderCreator = BI.isFunction(o.rowHeaderCreator) ? o.rowHeaderCreator() : o.rowHeaderCreator;

    if (header && header.length > 0) {
      var newHeader = this._formatColumns(header);

      var deep = this._getHDeep();

      if (deep <= 0) {
        newHeader.unshift(rowHeaderCreator || {
          type: "bi.table_style_cell",
          text: BI.i18nText("BI-Row_Header"),
          styleGetter: o.headerCellStyleGetter,
          _store: o.tableStyleCellStoreGetter
        });
      } else {
        newHeader[0] = rowHeaderCreator || {
          type: "bi.table_style_cell",
          text: BI.i18nText("BI-Row_Header"),
          styleGetter: o.headerCellStyleGetter,
          _store: o.tableStyleCellStoreGetter
        };
      }

      result.push(newHeader);
    }

    return result;
  },
  _formatItems: function _formatItems(nodes, header, deep) {
    var self = this,
        o = this.options;
    var result = [];

    function track(node, layer) {
      node.type || (node.type = "bi.layer_tree_table_cell");
      node.layer = layer;
      var next = [node];
      next = next.concat(node.values || []);

      if (next.length > 0) {
        result.push(next);
      }

      if (BI.isNotEmptyArray(node.children)) {
        BI.each(node.children, function (index, child) {
          track(child, layer + 1);
        });
      }
    }

    BI.each(nodes, function (i, node) {
      BI.each(node.children, function (j, c) {
        track(c, 0);
      });

      if (BI.isArray(node.values)) {
        var next = [{
          type: "bi.table_style_cell",
          text: o.summaryText,
          title: o.summaryText,
          styleGetter: function styleGetter() {
            return o.summaryCellStyleGetter(true, BI.get(node, ["children", 0, "dId"]));
          },
          _store: o.tableStyleCellStoreGetter
        }].concat(node.values);
        o.rowPosition === "bottom" ? result.push(next) : result.unshift(next);
      }
    });
    return BI.DynamicSummaryTreeTable.formatSummaryItems(result, header, o.crossItems, 1);
  },
  _formatColumns: function _formatColumns(columns, deep) {
    if (BI.isNotEmptyArray(columns)) {
      deep = deep || this._getHDeep();
      return columns.slice(Math.max(0, deep - 1));
    }

    return columns;
  },
  _formatFreezeCols: function _formatFreezeCols() {
    if (this.options.freezeCols.length > 0) {
      return [0];
    }

    return [];
  },
  _formatColumnSize: function _formatColumnSize(columnSize, deep) {
    if (columnSize.length <= 0) {
      return [];
    }

    var result = [0];
    deep = deep || this._getHDeep();
    BI.each(columnSize, function (i, size) {
      if (i < deep) {
        result[0] += size;
        return;
      }

      result.push(size);
    });
    return result;
  },
  _recomputeColumnSize: function _recomputeColumnSize() {
    var o = this.options;
    o.regionColumnSize = this.table.getRegionColumnSize();
    var columnSize = this.table.getColumnSize().slice();

    if (o.freezeCols.length > 1) {
      for (var i = 0; i < o.freezeCols.length - 1; i++) {
        columnSize.splice(1, 0, 0);
      }
    }

    o.columnSize = columnSize;
  },
  _digest: function _digest() {
    var o = this.options;

    var deep = this._getHDeep();

    var vDeep = this._getVDeep();

    var header = this._createHeader(vDeep);

    var data = this._formatItems(o.items, header, deep);

    var columnSize = o.columnSize.slice();
    var minColumnSize = o.minColumnSize.slice();
    var maxColumnSize = o.maxColumnSize.slice();
    BI.removeAt(columnSize, data.deletedCols);
    BI.removeAt(minColumnSize, data.deletedCols);
    BI.removeAt(maxColumnSize, data.deletedCols);
    this.header = data.header;
    this.items = data.items;
    return {
      header: data.header,
      items: data.items,
      columnSize: this._formatColumnSize(columnSize, deep),
      minColumnSize: this._formatColumns(minColumnSize, deep),
      maxColumnSize: this._formatColumns(maxColumnSize, deep),
      freezeCols: this._formatFreezeCols()
    };
  },
  _init: function _init() {
    BI.DynamicSummaryLayerTreeTable.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    var data = this._digest();

    this.table = BI.createWidget(o.el, {
      type: "bi.resizable_table",
      element: this,
      width: o.width,
      height: o.height,
      isNeedResize: o.isNeedResize,
      isNeedFreeze: o.isNeedFreeze,
      freezeCols: data.freezeCols,
      isNeedMerge: o.isNeedMerge,
      mergeCols: [],
      mergeRule: o.mergeRule,
      columnSize: data.columnSize,
      minColumnSize: data.minColumnSize,
      maxColumnSize: data.maxColumnSize,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      regionColumnSize: o.regionColumnSize,
      header: data.header,
      items: data.items
    });
    this.table.on(BI.Table.EVENT_TABLE_SCROLL, function () {
      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, function () {
      self._recomputeColumnSize();

      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, function () {
      self._recomputeColumnSize();

      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
    });
  },
  setWidth: function setWidth(width) {
    BI.DynamicSummaryLayerTreeTable.superclass.setWidth.apply(this, arguments);
    this.table.setWidth(width);
  },
  setHeight: function setHeight(height) {
    BI.DynamicSummaryLayerTreeTable.superclass.setHeight.apply(this, arguments);
    this.table.setHeight(height);
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.options.columnSize = columnSize;
  },
  getColumnSize: function getColumnSize() {
    return this.options.columnSize;
  },
  getFirstColumnHeaderRowSize: function getFirstColumnHeaderRowSize() {
    return this.table.getFirstColumnHeaderRowSize();
  },
  getFirstColumnRowSize: function getFirstColumnRowSize() {
    var rowHeights = this.table.getFirstColumnRowSize();
    var groupedHeight = [];
    BI.each(this.items, function (i, rows) {
      if (rows[0].layer > 0) {
        groupedHeight[groupedHeight.length - 1] += rowHeights[i];
      } else {
        groupedHeight.push(rowHeights[i]);
      }
    });
    return groupedHeight;
  },
  setRegionColumnSize: function setRegionColumnSize(columnSize) {
    this.options.regionColumnSize = columnSize;
    this.table.setRegionColumnSize(columnSize);
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.table.getRegionColumnSize();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.table.setVerticalScroll(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.table.setLeftHorizontalScroll(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.table.setRightHorizontalScroll(scrollLeft);
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    return this.table.getLeftHorizontalScroll();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.table.getRightHorizontalScroll();
  },
  attr: function attr(key, value) {
    BI.DynamicSummaryLayerTreeTable.superclass.attr.apply(this, arguments);

    switch (key) {
      case "columnSize":
      case "minColumnSize":
      case "maxColumnSize":
      case "freezeCols":
      case "mergeCols":
        return;
    }

    return this.table.attr.apply(this.table, [key, value]);
  },
  restore: function restore() {
    this.table.restore();
  },
  populate: function populate(items, header, crossItems, crossHeader) {
    var o = this.options;

    if (items) {
      o.items = items;
    }

    if (header) {
      o.header = header;
    }

    if (crossItems) {
      o.crossItems = crossItems;
    }

    if (crossHeader) {
      o.crossHeader = crossHeader;
    }

    var data = this._digest();

    this.table.setColumnSize(data.columnSize);
    this.table.attr("minColumnSize", data.minColumnSize);
    this.table.attr("maxColumnSize", data.maxColumnSize);
    this.table.attr("freezeCols", data.freezeCols);
    this.table.populate(data.items, data.header);
  },
  destroy: function destroy() {
    this.table.destroy();
    BI.DynamicSummaryLayerTreeTable.superclass.destroy.apply(this, arguments);
  }
});
BI.shortcut("bi.dynamic_summary_layer_tree_table", BI.DynamicSummaryLayerTreeTable);

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 树状结构的表格
 *
 * Created by GUY on 2015/8/12.
 * @class BI.DynamicSummaryTreeTable
 * @extends BI.Widget
 */
BI.DynamicSummaryTreeTable = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.DynamicSummaryTreeTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-dynamic-summary-tree-table",
      el: {
        type: "bi.resizable_table"
      },
      isNeedResize: true,
      // 是否需要调整列宽
      isNeedFreeze: false,
      // 是否需要冻结单元格
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为tree时生效
      isNeedMerge: true,
      // 是否需要合并单元格
      mergeCols: [],
      mergeRule: BI.emptyFn,
      isNeedMergeCol: true,
      // 是否横向合并
      isNeedMergeRow: true,
      // 是否纵向合并
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      footerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      headerCellStyleGetter: BI.emptyFn,
      summaryCellStyleGetter: BI.emptyFn,
      sequenceCellStyleGetter: BI.emptyFn,
      // 传给汇总、序号单元格的store，能在单元格绘制时使用上下文中的cssScale
      tableStyleCellStoreGetter: null,
      summaryCellCreator: undefined,
      header: [],
      footer: false,
      items: [],
      // 交叉表头
      crossHeader: [],
      crossItems: [],
      // 汇总行位置
      summaryText: BI.i18nText("BI-Summary_Values"),
      rowPosition: "bottom",
      colPosition: "right",
      showInnerSummary: false
    });
  },
  _getVDeep: function _getVDeep() {
    return this.options.crossHeader.length; // 纵向深度
  },
  _getHDeep: function _getHDeep() {
    var o = this.options;
    return Math.max(o.mergeCols.length, o.freezeCols.length, BI.TableTree.maxDeep(o.items) - 1);
  },
  _init: function _init() {
    BI.DynamicSummaryTreeTable.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    var data = this._digest();

    this.table = BI.createWidget(o.el, {
      type: "bi.resizable_table",
      element: this,
      width: o.width,
      height: o.height,
      isNeedResize: o.isNeedResize,
      isNeedFreeze: o.isNeedFreeze,
      freezeCols: o.freezeCols,
      isNeedMerge: o.isNeedMerge,
      mergeCols: o.mergeCols,
      mergeRule: o.mergeRule,
      columnSize: o.columnSize,
      minColumnSize: o.minColumnSize,
      maxColumnSize: o.maxColumnSize,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      regionColumnSize: o.regionColumnSize,
      header: data.header,
      items: data.items
    });
    this.table.on(BI.Table.EVENT_TABLE_SCROLL, function () {
      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();
      var columnSize = this.getColumnSize();
      var length = o.columnSize.length - columnSize.length;
      o.columnSize = columnSize.slice();
      o.columnSize = o.columnSize.concat(BI.makeArray(length, 0));
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();
      var columnSize = this.getColumnSize();
      var length = o.columnSize.length - columnSize.length;
      o.columnSize = columnSize.slice();
      o.columnSize = o.columnSize.concat(BI.makeArray(length, 0));
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
    });
  },
  _digest: function _digest() {
    var o = this.options;

    var deep = this._getHDeep();

    var vDeep = this._getVDeep();

    var header = BI.TableTree.formatHeader(o.header, o.crossHeader, o.crossItems, deep, vDeep, o.headerCellStyleGetter, {
      sumPosition: o.colPosition === "right",
      summaryText: o.summaryText
    });
    var items = BI.DynamicSummaryTreeTable.formatHorizontalItems(o.items, deep, false, o.summaryCellStyleGetter, {
      sumPosition: o.rowPosition === "bottom",
      summaryText: o.summaryText,
      isNeedMergeRow: o.isNeedMergeRow,
      summaryCellCreator: o.summaryCellCreator,
      tableStyleCellStoreGetter: o.tableStyleCellStoreGetter
    });
    var data = BI.DynamicSummaryTreeTable.formatSummaryItems(items, header, o.crossItems, deep);
    var columnSize = o.columnSize.slice();
    var minColumnSize = o.minColumnSize.slice();
    var maxColumnSize = o.maxColumnSize.slice();
    BI.removeAt(columnSize, data.deletedCols);
    BI.removeAt(minColumnSize, data.deletedCols);
    BI.removeAt(maxColumnSize, data.deletedCols);
    return {
      header: data.header,
      items: data.items,
      columnSize: columnSize,
      minColumnSize: minColumnSize,
      maxColumnSize: maxColumnSize
    };
  },
  setWidth: function setWidth(width) {
    BI.DynamicSummaryTreeTable.superclass.setWidth.apply(this, arguments);
    this.table.setWidth(width);
  },
  setHeight: function setHeight(height) {
    BI.DynamicSummaryTreeTable.superclass.setHeight.apply(this, arguments);
    this.table.setHeight(height);
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.options.columnSize = columnSize;
  },
  getColumnSize: function getColumnSize() {
    return this.options.columnSize;
  },
  getFirstColumnHeaderRowSize: function getFirstColumnHeaderRowSize() {
    return this.table.getFirstColumnHeaderRowSize();
  },
  getFirstColumnRowSize: function getFirstColumnRowSize() {
    var o = this.options;
    var rowHeight = this.table.getFirstColumnRowSize();

    if (o.isNeedMergeRow) {
      return rowHeight;
    } // 利用tableTree的能力算高度


    var items = BI.TableTree.formatItems(o.items, this._getHDeep(), false, o.summaryCellStyleGetter, {
      sumPosition: o.rowPosition === "bottom",
      summaryText: o.summaryText,
      isNeedMergeRow: o.isNeedMergeRow,
      summaryCellCreator: o.summaryCellCreator
    });
    var groupedHeight = [];
    var last = null;
    BI.each(items, function (i, rows) {
      if (rows[0] === last) {
        groupedHeight[groupedHeight.length - 1] += rowHeight[i];
      } else {
        last = rows[0];
        groupedHeight.push(rowHeight[i]);
      }
    });
    return groupedHeight;
  },
  setRegionColumnSize: function setRegionColumnSize(columnSize) {
    this.options.regionColumnSize = columnSize;
    this.table.setRegionColumnSize(columnSize);
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.table.getRegionColumnSize();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.table.setVerticalScroll(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.table.setLeftHorizontalScroll(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.table.setRightHorizontalScroll(scrollLeft);
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    return this.table.getLeftHorizontalScroll();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.table.getRightHorizontalScroll();
  },
  attr: function attr(key) {
    BI.DynamicSummaryTreeTable.superclass.attr.apply(this, arguments);

    switch (key) {
      case "minColumnSize":
      case "maxColumnSize":
        return;
    }

    return this.table.attr.apply(this.table, arguments);
  },
  restore: function restore() {
    this.table.restore();
  },
  populate: function populate(items, header, crossItems, crossHeader) {
    var o = this.options;

    if (items) {
      o.items = items;
    }

    if (header) {
      o.header = header;
    }

    if (crossItems) {
      o.crossItems = crossItems;
    }

    if (crossHeader) {
      o.crossHeader = crossHeader;
    }

    var data = this._digest();

    this.table.setColumnSize(data.columnSize);
    this.table.attr("minColumnSize", data.minColumnSize);
    this.table.attr("maxColumnSize", data.maxColumnSize);
    this.table.populate(data.items, data.header);
  },
  destroy: function destroy() {
    this.table.destroy();
    BI.DynamicSummaryTreeTable.superclass.destroy.apply(this, arguments);
  }
});
BI.extend(BI.DynamicSummaryTreeTable, {
  formatHorizontalItems: function formatHorizontalItems(nodes, deep, isCross, _styleGetter, options) {
    options = options || {};
    var result = [];

    var sumPosition = options.sumPosition,
        summaryText = options.summaryText,
        isNeedMergeRow = options.isNeedMergeRow,
        summaryCellCreator = options.summaryCellCreator || function (v) {
      return v;
    }; // 标识由原本需要合并的节点


    function cloneNode(node, tag) {
      if (isNeedMergeRow) {
        return node;
      }

      var result = BI.clone(node);

      if (tag) {
        result.clone = true;
      }

      return result;
    }

    function cloneArray(arr, tag) {
      if (isNeedMergeRow) {
        return arr.slice();
      }

      return BI.map(arr, function (i, item) {
        return cloneNode(item, tag);
      });
    }

    function track(store, node) {
      var next;

      if (BI.isArray(node.children)) {
        var totalLength = 0;
        BI.each(node.children, function (index, child) {
          var next;

          if (store != -1) {
            next = cloneArray(store, node.summaryClone ? node.children.length > 0 : index !== 0);
            next.push(cloneNode(node, node.summaryClone ? node.children.length > 0 : index !== 0));
          } else {
            next = [];
          }

          totalLength += track(next, child);
        });

        if (store != -1) {
          next = cloneArray(store, !node.summaryClone);
          next.push(cloneNode(node, !node.summaryClone));
        } else {
          next = [];
        }

        if (BI.isNotEmptyArray(node.values)) {
          var summary = summaryCellCreator({
            text: summaryText,
            title: summaryText,
            type: "bi.table_style_cell",
            styleGetter: function styleGetter() {
              return _styleGetter(store === -1, BI.get(node, ["children", 0, "dId"]));
            },
            _store: options.tableStyleCellStoreGetter
          }, node, store === -1);

          for (var i = next.length; i < deep; i++) {
            next.push(summary);
          }

          if (!isCross) {
            next = next.concat(BI.map(node.values, function (j, value) {
              var style = _styleGetter(store === -1);

              return summaryCellCreator(BI.extend({}, value, {
                styles: style
              }), node, store === -1);
            }));
          }

          if (next.length > 0) {
            if (!isCross) {
              sumPosition ? result.push(next) : result.splice(result.length - totalLength, 0, next);
            } else {
              for (var k = 0, l = node.values.length; k < l; k++) {
                sumPosition ? result.push(next) : result.splice(result.length - totalLength, 0, next);
              }
            }
          }

          return totalLength + 1;
        }

        return totalLength;
      }

      if (store != -1) {
        next = store.slice();

        for (var i = next.length; i < deep; i++) {
          next.push(node);
        }
      } else {
        next = [];
      }

      if (!isCross && BI.isArray(node.values)) {
        next = next.concat(node.values);
      }

      if (isCross && BI.isArray(node.values)) {
        for (var i = 0, len = node.values.length; i < len - 1; i++) {
          if (next.length > 0) {
            result.push(next);
          }
        }
      }

      if (next.length > 0) {
        result.push(next);
      }

      return node.values ? 1 : 0;
    }

    BI.each(nodes, function (i, node) {
      track(-1, node, 0);
    }); // 填充空位

    BI.each(result, function (i, line) {
      var last = BI.last(line);

      for (var j = line.length; j < deep; j++) {
        line.push(last);
      }
    });
    return result;
  },
  formatSummaryItems: function formatSummaryItems(items, header, crossItems, deep) {
    // 求纵向需要去除的列
    var cols = [];
    var leaf = 0;

    function track(node) {
      if (BI.isArray(node.children)) {
        BI.each(node.children, function (index, child) {
          track(child);
        });

        if (BI.isNotEmptyArray(node.values)) {
          if (node.children.length === 1) {
            for (var i = 0; i < node.values.length; i++) {
              cols.push(leaf + i + deep);
            }
          }

          leaf += node.values.length;
        }

        return;
      }

      if (node.values && node.values.length > 1) {
        leaf += node.values.length;
      } else {
        leaf++;
      }
    }

    BI.each(crossItems, function (i, node) {
      track(node);
    });

    if (cols.length > 0) {
      var nHeader = [],
          nItems = [];
      BI.each(header, function (i, node) {
        var nNode = node.slice();
        BI.removeAt(nNode, cols);
        nHeader.push(nNode);
      });
      BI.each(items, function (i, node) {
        var nNode = node.slice();
        BI.removeAt(nNode, cols);
        nItems.push(nNode);
      });
      header = nHeader;
      items = nItems;
    }

    return {
      items: items,
      header: header,
      deletedCols: cols
    };
  }
});
BI.shortcut("bi.dynamic_summary_tree_table", BI.DynamicSummaryTreeTable);

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by GUY on 2016/5/7.
 * @class BI.LayerTreeTableCell
 * @extends BI.Single
 */
BI.LayerTreeTableCell = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.LayerTreeTableCell.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-layer-tree-table-cell",
      layer: 0,
      text: ""
    });
  },
  _init: function _init() {
    BI.LayerTreeTableCell.superclass._init.apply(this, arguments);

    var o = this.options;
    BI.createWidget({
      type: "bi.label",
      element: this.element,
      textAlign: "left",
      whiteSpace: "nowrap",
      height: o.height,
      text: o.text,
      value: o.value,
      lgap: 5 + 30 * o.layer,
      rgap: 5
    });
  }
});
BI.shortcut("bi.layer_tree_table_cell", BI.LayerTreeTableCell);

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 层级树状结构的表格
 *
 * Created by GUY on 2016/5/7.
 * @class BI.LayerTreeTable
 * @extends BI.Widget
 */
BI.LayerTreeTable = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.LayerTreeTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-layer-tree-table",
      el: {
        type: "bi.resizable_table"
      },
      isNeedResize: false,
      // 是否需要调整列宽
      isNeedFreeze: false,
      // 是否需要冻结单元格
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为tree时生效
      isNeedMerge: true,
      // 是否需要合并单元格
      mergeCols: [],
      mergeRule: BI.emptyFn,
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      rowHeaderCreator: null,
      headerCellStyleGetter: BI.emptyFn,
      summaryCellStyleGetter: BI.emptyFn,
      sequenceCellStyleGetter: BI.emptyFn,
      // 传给汇总、序号单元格的store，能在单元格绘制时使用上下文中的cssScale
      tableStyleCellStoreGetter: null,
      header: [],
      items: [],
      // 交叉表头
      crossHeader: [],
      crossItems: [],
      // 汇总行位置
      summaryText: BI.i18nText("BI-Summary_Values"),
      rowPosition: "bottom",
      colPosition: "right",
      showInnerSummary: false
    });
  },
  _getVDeep: function _getVDeep() {
    return this.options.crossHeader.length; // 纵向深度
  },
  _getHDeep: function _getHDeep() {
    var o = this.options;
    return Math.max(o.mergeCols.length, o.freezeCols.length, BI.TableTree.maxDeep(o.items) - 1);
  },
  _createHeader: function _createHeader(vDeep) {
    var self = this,
        o = this.options;
    var header = o.header || [],
        crossHeader = o.crossHeader || [];
    var items = BI.TableTree.formatCrossItems(o.crossItems, vDeep, o.headerCellStyleGetter, {
      sumPosition: o.colPosition === "right",
      summaryText: o.summaryText
    });
    var result = [];
    BI.each(items, function (row, node) {
      var c = [crossHeader[row]];
      result.push(c.concat(node || []));
    });

    if (header && header.length > 0) {
      var newHeader = this._formatColumns(header);

      var deep = this._getHDeep();

      if (deep <= 0) {
        newHeader.unshift(o.rowHeaderCreator || {
          type: "bi.table_style_cell",
          text: BI.i18nText("BI-Row_Header"),
          styleGetter: o.headerCellStyleGetter,
          _store: o.tableStyleCellStoreGetter
        });
      } else {
        newHeader[0] = o.rowHeaderCreator || {
          type: "bi.table_style_cell",
          text: BI.i18nText("BI-Row_Header"),
          styleGetter: o.headerCellStyleGetter,
          _store: o.tableStyleCellStoreGetter
        };
      }

      result.push(newHeader);
    }

    return result;
  },
  _formatItems: function _formatItems(nodes) {
    var self = this,
        o = this.options;
    var result = [];

    function track(node, layer) {
      node.type || (node.type = "bi.layer_tree_table_cell");
      node.layer = layer;
      var next = [node];
      next = next.concat(node.values || []);

      if (next.length > 0) {
        result.push(next);
      }

      if (BI.isNotEmptyArray(node.children)) {
        BI.each(node.children, function (index, child) {
          track(child, layer + 1);
        });
      }
    }

    BI.each(nodes, function (i, node) {
      BI.each(node.children, function (j, c) {
        track(c, 0);
      });

      if (BI.isArray(node.values)) {
        var next = [{
          type: "bi.table_style_cell",
          text: BI.i18nText("BI-Summary_Values"),
          styleGetter: function styleGetter() {
            return o.summaryCellStyleGetter(true);
          },
          _store: o.tableStyleCellStoreGetter
        }].concat(node.values);
        result.push(next);
      }
    });
    return result;
  },
  _formatColumns: function _formatColumns(columns, deep) {
    if (BI.isNotEmptyArray(columns)) {
      deep = deep || this._getHDeep();
      return columns.slice(Math.max(0, deep - 1));
    }

    return columns;
  },
  _formatFreezeCols: function _formatFreezeCols() {
    if (this.options.freezeCols.length > 0) {
      return [0];
    }

    return [];
  },
  _formatColumnSize: function _formatColumnSize(columnSize, deep) {
    if (columnSize.length <= 0) {
      return [];
    }

    var result = [0];
    deep = deep || this._getHDeep();
    BI.each(columnSize, function (i, size) {
      if (i < deep) {
        result[0] += size;
        return;
      }

      result.push(size);
    });
    return result;
  },
  _digest: function _digest() {
    var o = this.options;

    var deep = this._getHDeep();

    var vDeep = this._getVDeep();

    this.header = this._createHeader(vDeep);
    this.items = this._formatItems(o.items);
    return {
      header: this.header,
      items: this.items,
      columnSize: this._formatColumnSize(o.columnSize, deep),
      minColumnSize: this._formatColumns(o.minColumnSize, deep),
      maxColumnSize: this._formatColumns(o.maxColumnSize, deep),
      freezeCols: this._formatFreezeCols()
    };
  },
  _init: function _init() {
    BI.LayerTreeTable.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    var data = this._digest();

    this.table = BI.createWidget(o.el, {
      type: "bi.resizable_table",
      element: this,
      width: o.width,
      height: o.height,
      isNeedResize: o.isNeedResize,
      isNeedFreeze: o.isNeedFreeze,
      freezeCols: data.freezeCols,
      isNeedMerge: o.isNeedMerge,
      mergeCols: [],
      mergeRule: o.mergeRule,
      columnSize: data.columnSize,
      minColumnSize: data.minColumnSize,
      maxColumnSize: data.maxColumnSize,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      regionColumnSize: o.regionColumnSize,
      header: data.header,
      items: data.items
    });
    this.table.on(BI.Table.EVENT_TABLE_SCROLL, function () {
      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();
      o.columnSize = this.getColumnSize();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();
      o.columnSize = this.getColumnSize();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
    });
  },
  setWidth: function setWidth(width) {
    BI.LayerTreeTable.superclass.setWidth.apply(this, arguments);
    this.table.setWidth(width);
  },
  setHeight: function setHeight(height) {
    BI.LayerTreeTable.superclass.setHeight.apply(this, arguments);
    this.table.setHeight(height);
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.options.columnSize = columnSize;
  },
  getColumnSize: function getColumnSize() {
    var columnSize = this.table.getColumnSize();

    var deep = this._getHDeep();

    var pre = [];

    if (deep > 0) {
      pre = BI.makeArray(deep, columnSize[0] / deep);
    }

    return pre.concat(columnSize.slice(1));
  },
  getFirstColumnHeaderRowSize: function getFirstColumnHeaderRowSize() {
    return this.table.getFirstColumnHeaderRowSize();
  },
  getFirstColumnRowSize: function getFirstColumnRowSize() {
    var rowHeights = this.table.getFirstColumnRowSize();
    var groupedHeight = [];
    BI.each(this.items, function (i, rows) {
      if (rows[0].layer > 0) {
        groupedHeight[groupedHeight.length - 1] += rowHeights[i];
      } else {
        groupedHeight.push(rowHeights[i]);
      }
    });
    return groupedHeight;
  },
  setRegionColumnSize: function setRegionColumnSize(columnSize) {
    this.options.regionColumnSize = columnSize;
    this.table.setRegionColumnSize(columnSize);
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.table.getRegionColumnSize();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.table.setVerticalScroll(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.table.setLeftHorizontalScroll(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.table.setRightHorizontalScroll(scrollLeft);
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    return this.table.getLeftHorizontalScroll();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.table.getRightHorizontalScroll();
  },
  attr: function attr(key, value) {
    BI.LayerTreeTable.superclass.attr.apply(this, arguments);

    switch (key) {
      case "columnSize":
      case "minColumnSize":
      case "maxColumnSize":
      case "freezeCols":
      case "mergeCols":
        return;
    }

    return this.table.attr.apply(this.table, [key, value]);
  },
  restore: function restore() {
    this.table.restore();
  },
  populate: function populate(items, header, crossItems, crossHeader) {
    var o = this.options;
    o.items = items || [];

    if (header) {
      o.header = header;
    }

    if (crossItems) {
      o.crossItems = crossItems;
    }

    if (crossHeader) {
      o.crossHeader = crossHeader;
    }

    var data = this._digest();

    this.table.setColumnSize(data.columnSize);
    this.table.attr("freezeCols", data.freezeCols);
    this.table.attr("minColumnSize", data.minColumnSize);
    this.table.attr("maxColumnSize", data.maxColumnSize);
    this.table.populate(data.items, data.header);
  },
  destroy: function destroy() {
    this.table.destroy();
    BI.LayerTreeTable.superclass.destroy.apply(this, arguments);
  }
});
BI.shortcut("bi.layer_tree_table", BI.LayerTreeTable);

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 *
 * Created by GUY on 2016/5/26.
 * @class BI.TableStyleCell
 * @extends BI.Single
 */
BI.TableStyleCell = BI.inherit(BI.Single, {
  props: {
    baseCls: "bi-table-style-cell",
    styleGetter: BI.emptyFn
  },
  mounted: function mounted() {
    var _style$fontSize, _style$fontSize2;

    var style = BI.extend({}, this.options.styleGetter());
    style.fontSize && this.text.element.css(_defineProperty({
      fontSize: "".concat((_style$fontSize = style.fontSize) !== null && _style$fontSize !== void 0 ? _style$fontSize : 12, "px")
    }, "fontSize", "calc(var(--css-scale, 1) * ".concat((_style$fontSize2 = style.fontSize) !== null && _style$fontSize2 !== void 0 ? _style$fontSize2 : 12, "px)")));
  },
  render: function render() {
    var o = this.options,
        self = this;
    var style = BI.extend({}, o.styleGetter(), {
      height: o.height - 1
    });
    return {
      type: "bi.adaptive",
      items: [{
        el: {
          type: "bi.label",
          textAlign: style.textAlign || "left",
          css: style,
          hgap: 5,
          text: o.text,
          title: o.text,
          belowMouse: true,
          ref: function ref(_ref) {
            self.text = _ref;
          }
        }
      }]
    };
  },
  _digestStyle: function _digestStyle() {
    var o = this.options;
    var style = o.styleGetter();

    if (style) {
      this.text.element.css(style);
    }
  },
  setText: function setText(text) {
    this.text.setText(text);
  },
  setHeight: function setHeight(height) {
    BI.TableStyleCell.superclass.setHeight.call(this, height);
    this.text.setHeight(height - 1);
  },
  populate: function populate() {
    this._digestStyle();
  }
});
BI.shortcut("bi.table_style_cell", BI.TableStyleCell);

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 树状结构的表格
 *
 * Created by GUY on 2015/9/22.
 * @class BI.TableTree
 * @extends BI.Widget
 */
BI.TableTree = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.TableTree.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-table-tree",
      el: {
        type: "bi.resizable_table"
      },
      isNeedResize: true,
      // 是否需要调整列宽
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为tree时生效
      isNeedMerge: true,
      // 是否需要合并单元格
      mergeCols: [],
      mergeRule: BI.emptyFn,
      isNeedMergeCol: true,
      // 是否横向合并
      isNeedMergeRow: true,
      // 是否纵向合并
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      headerCellStyleGetter: BI.emptyFn,
      summaryCellStyleGetter: BI.emptyFn,
      sequenceCellStyleGetter: BI.emptyFn,
      // 传给汇总、序号单元格的store，能在单元格绘制时使用上下文中的cssScale
      tableStyleCellStoreGetter: null,
      header: [],
      items: [],
      // 交叉表头
      crossHeader: [],
      crossItems: [],
      // 汇总行位置
      summaryText: BI.i18nText("BI-Summary_Values"),
      rowPosition: "bottom",
      colPosition: "right",
      showInnerSummary: false
    });
  },
  _getVDeep: function _getVDeep() {
    return this.options.crossHeader.length; // 纵向深度
  },
  _getHDeep: function _getHDeep() {
    var o = this.options;
    return Math.max(o.mergeCols.length, o.freezeCols.length, BI.TableTree.maxDeep(o.items) - 1);
  },
  _init: function _init() {
    BI.TableTree.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;

    var data = this._digest();

    this.table = BI.createWidget(o.el, {
      type: "bi.resizable_table",
      element: this,
      width: o.width,
      height: o.height,
      isNeedResize: o.isNeedResize,
      isNeedFreeze: o.isNeedFreeze,
      freezeCols: o.freezeCols,
      isNeedMerge: o.isNeedMerge,
      mergeCols: o.mergeCols,
      mergeRule: o.mergeRule,
      columnSize: o.columnSize,
      minColumnSize: o.minColumnSize,
      maxColumnSize: o.maxColumnSize,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      regionColumnSize: o.regionColumnSize,
      header: data.header,
      items: data.items
    });
    this.table.on(BI.Table.EVENT_TABLE_SCROLL, function () {
      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();
      o.columnSize = this.getColumnSize();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();
      o.columnSize = this.getColumnSize();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
    });
  },
  _digest: function _digest() {
    var self = this,
        o = this.options;

    var deep = this._getHDeep();

    var vDeep = this._getVDeep();

    var header = BI.TableTree.formatHeader(o.header, o.crossHeader, o.crossItems, deep, vDeep, o.headerCellStyleGetter, {
      sumPosition: o.colPosition === "right",
      summaryText: o.summaryText
    });
    var items = BI.TableTree.formatItems(o.items, deep, false, o.summaryCellStyleGetter, {
      sumPosition: o.rowPosition === "bottom",
      summaryText: o.summaryText,
      isNeedMergeRow: o.isNeedMergeRow
    });
    return {
      header: header,
      items: items
    };
  },
  setWidth: function setWidth(width) {
    BI.TableTree.superclass.setWidth.apply(this, arguments);
    this.table.setWidth(width);
  },
  setHeight: function setHeight(height) {
    BI.TableTree.superclass.setHeight.apply(this, arguments);
    this.table.setHeight(height);
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.options.columnSize = columnSize;
    this.table.setColumnSize(columnSize);
  },
  getColumnSize: function getColumnSize() {
    return this.table.getColumnSize();
  },
  getFirstColumnHeaderRowSize: function getFirstColumnHeaderRowSize() {
    return this.table.getFirstColumnHeaderRowSize();
  },
  getFirstColumnRowSize: function getFirstColumnRowSize() {
    return this.table.getFirstColumnRowSize();
  },
  setRegionColumnSize: function setRegionColumnSize(columnSize) {
    this.options.regionColumnSize = columnSize;
    this.table.setRegionColumnSize(columnSize);
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.table.getRegionColumnSize();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.table.setVerticalScroll(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.table.setLeftHorizontalScroll(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.table.setRightHorizontalScroll(scrollLeft);
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    return this.table.getLeftHorizontalScroll();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.table.getRightHorizontalScroll();
  },
  attr: function attr() {
    BI.TableTree.superclass.attr.apply(this, arguments);
    return this.table.attr.apply(this.table, arguments);
  },
  restore: function restore() {
    this.table.restore();
  },
  populate: function populate(items, header, crossItems, crossHeader) {
    var o = this.options;

    if (items) {
      o.items = items || [];
    }

    if (header) {
      o.header = header;
    }

    if (crossItems) {
      o.crossItems = crossItems;
    }

    if (crossHeader) {
      o.crossHeader = crossHeader;
    }

    var data = this._digest();

    this.table.populate(data.items, data.header);
  },
  destroy: function destroy() {
    this.table.destroy();
    BI.TableTree.superclass.destroy.apply(this, arguments);
  }
});
BI.extend(BI.TableTree, {
  formatHeader: function formatHeader(header, crossHeader, crossItems, hDeep, vDeep, styleGetter, options) {
    var items = BI.isEmpty(header) ? BI.TableTree.formatCrossItems4Special(crossItems, vDeep, styleGetter, options) : BI.TableTree.formatCrossItems(crossItems, vDeep, styleGetter, options);
    var result = [];

    for (var i = 0; i < vDeep; i++) {
      var c = [];

      for (var j = 0; j < hDeep; j++) {
        c.push(crossHeader[i]);
      }

      result.push(c.concat(items[i] || []));
    }

    if (header && header.length > 0) {
      result.push(header);
    }

    return result;
  },
  formatItems: function formatItems(nodes, deep, isCross, _styleGetter, options) {
    options = options || {};

    var self = this,
        result = [],
        sumPosition = options.sumPosition,
        summaryText = options.summaryText || BI.i18nText("BI-Summary_Values"),
        summaryCellCreator = options.summaryCellCreator || function (v) {
      return v;
    };

    function track(store, node) {
      var next;

      if (BI.isArray(node.children)) {
        var totalLength = 0;
        BI.each(node.children, function (index, child) {
          var next;

          if (store != -1) {
            next = store.slice();
            next.push(node);
          } else {
            next = [];
          }

          totalLength += track(next, child);
        });

        if (store != -1) {
          next = store.slice();
          next.push(node);
        } else {
          next = [];
        }

        if (
        /** (store == -1 || node.children.length > 1) &&**/
        BI.isNotEmptyArray(node.values)) {
          var summary = summaryCellCreator({
            text: summaryText,
            title: summaryText,
            type: "bi.table_style_cell",
            styleGetter: function styleGetter() {
              return _styleGetter(store === -1);
            },
            _store: options.tableStyleCellStoreGetter
          }, node, store === -1);

          for (var i = next.length; i < deep; i++) {
            next.push(summary);
          }

          if (!isCross) {
            next = next.concat(node.values);
          }

          if (next.length > 0) {
            if (!isCross) {
              sumPosition ? result.push(next) : result.splice(result.length - totalLength, 0, next);
            } else {
              for (var k = 0, l = node.values.length; k < l; k++) {
                sumPosition ? result.push(next) : result.splice(result.length - totalLength, 0, next);
              }
            }
          }

          return totalLength + 1;
        }

        return totalLength;
      }

      if (store != -1) {
        next = store.slice();

        for (var i = next.length; i < deep; i++) {
          next.push(node);
        }
      } else {
        next = [];
      }

      if (!isCross && BI.isArray(node.values)) {
        next = next.concat(node.values);
      }

      if (isCross && BI.isArray(node.values)) {
        for (var i = 0, len = node.values.length; i < len - 1; i++) {
          if (next.length > 0) {
            result.push(next);
          }
        }
      }

      if (next.length > 0) {
        result.push(next);
      }

      return node.values ? 1 : 0;
    }

    BI.each(nodes, function (i, node) {
      track(-1, node);
    }); // 填充空位

    BI.each(result, function (i, line) {
      var last = BI.last(line);

      for (var j = line.length; j < deep; j++) {
        line.push(last);
      }
    });
    return result;
  },
  formatItems4Special: function formatItems4Special(nodes, deep, isCross, _styleGetter2, options) {
    options = options || {};
    var self = this,
        result = [],
        sumPosition = options.sumPosition,
        summaryText = options.summaryText || BI.i18nText("BI-Summary_Values");

    function track(store, node) {
      var next;

      if (BI.isArray(node.children)) {
        var totalLength = 0;
        BI.each(node.children, function (index, child) {
          var next;

          if (store != -1) {
            next = store.slice();
            next.push(node);
          } else {
            next = [];
          }

          totalLength += track(next, child);
        });

        if (store != -1) {
          next = store.slice();
          next.push(node);
        } else {
          next = [];
        }

        if (
        /** (store == -1 || node.children.length > 1) &&**/
        BI.isNotEmptyArray(node.values)) {
          var summary = {
            text: summaryText,
            title: summaryText,
            type: "bi.table_style_cell",
            styleGetter: function styleGetter() {
              return _styleGetter2(store === -1);
            },
            _store: options.tableStyleCellStoreGetter
          };

          for (var i = next.length; i < deep; i++) {
            next.push(summary);
          }

          if (next.length > 0) {
            if (!isCross) {
              sumPosition ? result.push(next) : result.splice(result.length - totalLength, 0, next);
            } else {
              for (var k = 0, l = node.values.length; k < l; k++) {
                sumPosition ? result.push(next) : result.splice(result.length - totalLength, 0, next);
              }
            }
          }

          return totalLength + node.values.length;
        }

        return totalLength;
      }

      if (store != -1) {
        next = store.slice();

        for (var i = next.length; i < deep; i++) {
          next.push(node);
        }
      } else {
        next = [];
      }

      if (next.length > 0) {
        result.push(next);
      }

      return node.values ? node.values.length : 0;
    }

    BI.each(nodes, function (i, node) {
      track(-1, node);
    }); // 填充空位

    BI.each(result, function (i, line) {
      var last = BI.last(line);

      for (var j = line.length; j < deep; j++) {
        line.push(last);
      }
    });
    return result;
  },
  formatCrossItems: function formatCrossItems(nodes, deep, styleGetter, options) {
    var items = BI.TableTree.formatItems(nodes, deep, true, styleGetter, options);
    return BI.unzip(items);
  },
  // 没有行维度时候格式化header，避免出现多个汇总
  formatCrossItems4Special: function formatCrossItems4Special(nodes, deep, styleGetter, options) {
    var items = BI.TableTree.formatItems4Special(nodes, deep, false, styleGetter, options);
    return BI.unzip(items);
  },
  maxDeep: function maxDeep(nodes) {
    function track(deep, node) {
      var d = deep;

      if (BI.isNotEmptyArray(node.children)) {
        BI.each(node.children, function (index, child) {
          d = Math.max(d, track(deep + 1, child));
        });
      }

      return d;
    }

    var deep = 1;

    if (BI.isObject(nodes)) {
      BI.each(nodes, function (i, node) {
        deep = Math.max(deep, track(1, node));
      });
    }

    return deep;
  }
});
BI.shortcut("bi.tree_table", BI.TableTree);

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @Author: Young
 * @CreationDate 2018-01-10 9:50

 */
!function () {
  var MIN_SIZE = 60;
  var TIP_HEIGHT = 30;
  BI.StyleTable = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-components-preview-table",
      $testId: "bi-components-preview-table",
      userSelectable: true,
      isNeedFreeze: true,
      showSequence: false,
      seqWidth: 60,
      sequenceCellStyleGetter: BI.emptyFn,
      headerCellStyleGetter: BI.emptyFn,
      // 传给汇总、序号单元格的store，能在单元格绘制时使用上下文中的cssScale
      tableStyleCellStoreGetter: null,
      showPartData: false,
      columnSortable: false,
      columnSelectable: false,
      tipPosition: "bottom",
      zebraVeins: true,
      freezeCols: [],
      columnSize: [],
      columnGaps: [],
      headerRowSize: 30,
      rowSize: 30,
      header: [],
      items: [],
      watermark: {},
      needFormat: true,
      fontSize: 12,
      minSize: 60,
      regionColumnSize: [],
      isHeaderAutoHeight: false,
      isAutoHeight: false
    },
    mounted: function mounted() {
      var self = this;
      this._resizeHandler = BI.debounce(function () {
        var width = self._getTableWidth(),
            height = self._getTableHeight();

        if (self.table.getWidth() !== width || self.table.getHeight() !== height) {
          self.table.setWidth(width);
          self.table.setHeight(height);
          self.table.populate();
        }
      }, 30);
      this.removeListener = BI.ResizeDetector.addResizeListener(this.wrapper, function () {
        self._resizeHandler();
      });

      this._populate();
    },
    render: function render() {
      var self = this,
          o = this.options;
      var watermark = o.watermark;
      return {
        type: "bi.absolute",
        items: [{
          el: {
            type: "bi.vtape",
            cls: o.userSelectable ? "user-selectable" : "",
            items: this._createTable()
          },
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        }, {
          el: {
            type: "bi.watermark",
            invisible: !watermark.valid,
            watermark: watermark
          },
          left: 0,
          top: 0,
          right: 0,
          bottom: 0
        }],
        ref: function ref(_ref) {
          self.wrapper = _ref;
        }
      };
    },
    _createTable: function _createTable() {
      var o = this.options,
          self = this;
      var tip = {
        el: {
          type: "bi.label",
          cls: "bi-tips",
          text: BI.i18nText("BI-Conf_Current_Preview_Part_Data"),
          textAlign: "right"
        },
        height: o.showPartData ? TIP_HEIGHT : 0
      };
      var table = {
        type: "bi.page_table",
        rowSize: o.rowSize,
        headerRowSize: o.headerRowSize,
        isNeedFreeze: o.isNeedFreeze,
        freezeCols: o.freezeCols,
        showSequence: o.showSequence,
        seqWidth: o.seqWidth,
        sequenceCellStyleGetter: o.sequenceCellStyleGetter,
        headerCellStyleGetter: o.headerCellStyleGetter,
        tableStyleCellStoreGetter: o.tableStyleCellStoreGetter,
        ref: function ref(_ref) {
          self.table = _ref;
        },
        el: {
          type: "bi.sequence_table",
          el: {
            type: "bi.adaptive_table",
            el: o.columnSelectable || o.columnSortable ? {
              type: "bi.sortable_table",
              sortable: o.columnSortable,
              ref: function ref(_ref2) {
                self.sortableTable = _ref2;
              },
              el: {
                type: "bi.resizable_table",
                el: this._getGridConfig()
              },
              listeners: [{
                eventName: 'EVENT_TABLE_SELECT_COLUMN',
                action: function action(j) {
                  self.fireEvent('EVENT_TABLE_SELECT_COLUMN', j);
                }
              }, {
                eventName: 'EVENT_TABLE_SORT',
                action: function action() {
                  self.fireEvent('EVENT_TABLE_SORT', arguments);
                }
              }]
            } : {
              type: "bi.resizable_table",
              el: this._getGridConfig()
            },
            listeners: [{
              eventName: 'EVENT_TABLE_AFTER_COLUMN_RESIZE',
              action: function action() {
                self.fireEvent('EVENT_TABLE_AFTER_COLUMN_RESIZE');
              }
            }]
          }
        }
      };

      switch (o.tipPosition) {
        case "top":
          return [tip, table];

        case "bottom":
        default:
          return [table, tip];
      }
    },
    _getGridConfig: function _getGridConfig() {
      var o = this.options;
      return {
        type: 'bi.grid_auto_height_table',
        columnGaps: o.columnGaps,
        isAutoHeight: o.isAutoHeight,
        isHeaderAutoHeight: o.isHeaderAutoHeight,
        fontSize: o.fontSize,
        fontLineHeight: o.fontSize * 1.4,
        headerFontSize: o.fontSize,
        headerFontLineHeight: o.fontSize * 1.4
      };
    },
    _getTableWidth: function _getTableWidth() {
      if (this.options.width) {
        return this.options.width;
      }

      return this.element.width();
    },
    _getTableHeight: function _getTableHeight() {
      var height = this.element.height();
      return this.options.showPartData ? height - TIP_HEIGHT : height;
    },
    _populate: function _populate() {
      this.populate(this.options.items, this.options.header);
    },
    // a、一列中最大宽度；b、所有宽度的均值*2；c、80
    _calculateColumnSize: function _calculateColumnSize() {
      if (this.options.columnSize && this.options.columnSize.length > 0) {
        return this.options.columnSize;
      }

      var fontSize = this.options.fontSize;
      var minSize = this.options.minSize;
      /**
       * 获取某个单元的模拟宽度
       * @param {object} cell 单元
       */

      function getSimulationWidth(cell) {
        if (BI.isNumber(cell.width)) {
          return cell.width;
        }

        if (BI.isNotEmptyString(cell.text)) {
          return BI.Func.getGBWidth(cell.text) * fontSize * 1.2;
        }

        return 0;
      }
      /**
       * 用于统计各列宽度
       * @param {array} items 单元格
       * @param {array} columnSizes 单元格宽度存储
       */


      function getColumnSizes(items, columnSizes) {
        BI.each(items, function (i, row) {
          BI.each(row, function (j, cell) {
            var width = 0; // 针对于表格中的元素是布局组件

            if (BI.isNotEmptyArray(cell.items)) {
              BI.each(cell.items, function (idx, item) {
                width += getSimulationWidth(item);
              });
            } else {
              width += getSimulationWidth(cell);
            }

            columnSizes[j] = columnSizes[j] || [];
            columnSizes[j].push(width);
          });
        });
      }

      var sizes = [];
      getColumnSizes(this.options.header, sizes);
      getColumnSizes(this.options.items, sizes);
      /**
       * 规则:
       * 默认显示列宽最大值 = 当前字段名和字段值宽度均值*2
       * 默认显示列宽最小值 = 80PX
       * 如果计算出的最大值小于最小值时，显示最小值(交互后加的)
       */

      var columnSize = BI.map(sizes, function (i, column) {
        // 根据要求过滤掉为空，不参与计算平均宽度的过程，否则导致计算方差太大
        var avgSize = Math.ceil(BI.average(BI.filter(column, function (index, value) {
          return value >= 0;
        })));
        var maxSize = avgSize * 2;
        var adaptSize = Math.ceil(BI.max(column));

        if (maxSize < minSize) {
          return minSize;
        }

        return adaptSize < minSize ? minSize : adaptSize > maxSize ? maxSize : adaptSize;
      });
      /**
       * 列宽实际显示的宽度是在原规则基础上加上图标的宽度(交互后加的)
       */

      BI.each(this.options.header, function (i, row) {
        BI.each(row, function (j, cell) {
          columnSize[j] += BI.isNumber(cell.iconWidth) ? cell.iconWidth : 0;
          columnSize[j] += BI.isNumber(cell.lgap) ? cell.lgap : 0;
          columnSize[j] += BI.isNumber(cell.rgap) ? cell.rgap : 0;
          columnSize[j] += BI.isNumber(cell.hgap) ? cell.hgap * 2 : 0;
        });
      });
      /**
       * 当默认字段宽度总和小于组件宽度时，多余宽度按照各字段默认宽度的比例进行再分配
       */

      var tableWidth = this._getTableWidth() - 10;
      var totalColumnSize = columnSize.reduce(function (a, b) {
        return a + b;
      }, 0);

      if (totalColumnSize >= tableWidth) {
        return columnSize;
      }

      var surplus = tableWidth - totalColumnSize;
      return BI.map(columnSize, function (index, column) {
        if (index === columnSize.length - 1) {
          return column + surplus;
        }

        surplus -= Math.ceil((tableWidth - totalColumnSize) / columnSize.length);
        return column + Math.ceil((tableWidth - totalColumnSize) / columnSize.length);
      });
    },
    _formatItems: function _formatItems() {
      var self = this;
      var items = BI.deepClone(this.options.items);
      var zebraVeins = this.options.zebraVeins;
      BI.each(items, function (i, row) {
        BI.each(row, function (j, item) {
          if (BI.isNotNull(self.options.header[0]) && BI.isNotNull(self.options.header[0][j]) && self.options.header[0][j].iconCls === "number-field-font" && self.options.needFormat) {
            item.text = BI.Format.numberFormat(item.text);
          } // BI-65648 单元格定高的预览表格回车显示成转义\n


          item.text = BI.replaceAll(item.text || "", "\n", "\\n");
          var zebraVeinsCls = i % 2 !== 0 ? "even-row" : "odd-row";
          item.cls = (item.cls || "") + " body-row " + (zebraVeins ? zebraVeinsCls : "");
        });
      });
      return items;
    },
    _formatHeader: function _formatHeader() {
      var header = BI.deepClone(this.options.header);
      BI.each(header, function (i, row) {
        BI.each(row, function (j, item) {
          item.cls = (item.cls || "") + " header-row ";
        });
      });
      return header;
    },
    populate: function populate(items, header, opt) {
      this.options.items = items;
      this.options.header = header;

      var columnSize = this._calculateColumnSize();

      this.table.attr("columnSize", columnSize); // freezeScroll===true 不重置滚动条位置（默认重置）

      opt = opt || {};

      if (BI.isNull(opt.freezeScroll) || opt.freezeScroll === false) {
        this.table.attr('scrollTop', 0);
        this.table.attr('scrollLeft', BI.sum(columnSize.slice(0, opt.scrollLeftIndex || 0)));
      }

      this.table.restore();
      this.table.setWidth(this._getTableWidth());
      this.table.setHeight(this._getTableHeight());
      this.table.attr("regionColumnSize", this.options.regionColumnSize);
      this.table.attr("minColumnSize", columnSize);
      this.table.attr("isNeedFreeze", true);
      this.table.attr("freezeCols", this.options.freezeCols);
      this.table.attr("showSequence", this.options.showSequence);
      this.table.populate(this._formatItems(), this._formatHeader());
    },
    setHorizontalScroll: function setHorizontalScroll(v) {
      this.table.setRightHorizontalScroll(v);
    },
    setVerticalScroll: function setVerticalScroll(v) {
      this.table.setVerticalScroll(v);
    },
    selectColumns: function selectColumns(cols) {
      this.sortableTable && this.sortableTable.selectColumns(cols);
    },
    setSortable: function setSortable(sortable) {
      this.sortableTable && this.sortableTable.setSortable(sortable);
    },
    getSelectedColumns: function getSelectedColumns() {
      return this.sortableTable && this.sortableTable.getSelectedColumns();
    },
    destroyed: function destroyed() {
      this.removeListener && this.removeListener();
    },
    getColumnSize: function getColumnSize() {
      return this.table.getColumnSize();
    }
  });
  BI.shortcut("bi.components.style_table", BI.StyleTable);
}();

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
  var clamp = function clamp(min, value, max) {
    if (value < min) {
      return min;
    }

    if (value > max) {
      return max;
    }

    return value;
  };

  var BUFFER_ROWS = 5;
  var NO_ROWS_SCROLL_RESULT = {
    index: 0,
    offset: 0,
    position: 0,
    contentHeight: 0
  };

  BI.TableScrollHelper = function (rowCount, defaultRowHeight, viewportHeight, rowHeightGetter) {
    this._rowOffsets = BI.PrefixIntervalTree.uniform(rowCount, defaultRowHeight);
    this._storedHeights = new Array(rowCount);

    for (var i = 0; i < rowCount; ++i) {
      this._storedHeights[i] = defaultRowHeight;
    }

    this._rowCount = rowCount;
    this._position = 0;
    this._contentHeight = rowCount * defaultRowHeight;
    this._defaultRowHeight = defaultRowHeight;
    this._rowHeightGetter = rowHeightGetter ? rowHeightGetter : function () {
      return defaultRowHeight;
    };
    this._viewportHeight = viewportHeight;

    this._updateHeightsInViewport(0, 0);
  };

  BI.TableScrollHelper.prototype = {
    constructor: BI.TableScrollHelper,
    setRowHeightGetter: function setRowHeightGetter(rowHeightGetter) {
      this._rowHeightGetter = rowHeightGetter;
    },
    setViewportHeight: function setViewportHeight(viewportHeight) {
      this._viewportHeight = viewportHeight;
    },
    getContentHeight: function getContentHeight() {
      return this._contentHeight;
    },
    _updateHeightsInViewport: function _updateHeightsInViewport(firstRowIndex, firstRowOffset) {
      var top = firstRowOffset;
      var index = firstRowIndex;

      while (top <= this._viewportHeight && index < this._rowCount) {
        this._updateRowHeight(index);

        top += this._storedHeights[index];
        index++;
      }
    },
    _updateHeightsAboveViewport: function _updateHeightsAboveViewport(firstRowIndex) {
      var index = firstRowIndex - 1;

      while (index >= 0 && index >= firstRowIndex - BUFFER_ROWS) {
        var delta = this._updateRowHeight(index);

        this._position += delta;
        index--;
      }
    },
    _updateRowHeight: function _updateRowHeight(rowIndex) {
      if (rowIndex < 0 || rowIndex >= this._rowCount) {
        return 0;
      }

      var newHeight = this._rowHeightGetter(rowIndex);

      if (newHeight !== this._storedHeights[rowIndex]) {
        var change = newHeight - this._storedHeights[rowIndex];

        this._rowOffsets.set(rowIndex, newHeight);

        this._storedHeights[rowIndex] = newHeight;
        this._contentHeight += change;
        return change;
      }

      return 0;
    },
    getRowPosition: function getRowPosition(rowIndex) {
      this._updateRowHeight(rowIndex);

      return this._rowOffsets.sumUntil(rowIndex);
    },
    scrollBy: function scrollBy(delta) {
      if (this._rowCount === 0) {
        return NO_ROWS_SCROLL_RESULT;
      }

      var firstRow = this._rowOffsets.greatestLowerBound(this._position);

      firstRow = clamp(firstRow, 0, Math.max(this._rowCount - 1, 0));

      var firstRowPosition = this._rowOffsets.sumUntil(firstRow);

      var rowIndex = firstRow;
      var position = this._position;

      var rowHeightChange = this._updateRowHeight(rowIndex);

      if (firstRowPosition !== 0) {
        position += rowHeightChange;
      }

      var visibleRowHeight = this._storedHeights[rowIndex] - (position - firstRowPosition);

      if (delta >= 0) {
        while (delta > 0 && rowIndex < this._rowCount) {
          if (delta < visibleRowHeight) {
            position += delta;
            delta = 0;
          } else {
            delta -= visibleRowHeight;
            position += visibleRowHeight;
            rowIndex++;
          }

          if (rowIndex < this._rowCount) {
            this._updateRowHeight(rowIndex);

            visibleRowHeight = this._storedHeights[rowIndex];
          }
        }
      } else if (delta < 0) {
        delta = -delta;
        var invisibleRowHeight = this._storedHeights[rowIndex] - visibleRowHeight;

        while (delta > 0 && rowIndex >= 0) {
          if (delta < invisibleRowHeight) {
            position -= delta;
            delta = 0;
          } else {
            position -= invisibleRowHeight;
            delta -= invisibleRowHeight;
            rowIndex--;
          }

          if (rowIndex >= 0) {
            var change = this._updateRowHeight(rowIndex);

            invisibleRowHeight = this._storedHeights[rowIndex];
            position += change;
          }
        }
      }

      var maxPosition = this._contentHeight - this._viewportHeight;
      position = clamp(position, 0, maxPosition);
      this._position = position;

      var firstRowIndex = this._rowOffsets.greatestLowerBound(position);

      firstRowIndex = clamp(firstRowIndex, 0, Math.max(this._rowCount - 1, 0));
      firstRowPosition = this._rowOffsets.sumUntil(firstRowIndex);
      var firstRowOffset = firstRowPosition - position;

      this._updateHeightsInViewport(firstRowIndex, firstRowOffset);

      this._updateHeightsAboveViewport(firstRowIndex);

      return {
        index: firstRowIndex,
        offset: firstRowOffset,
        position: this._position,
        contentHeight: this._contentHeight
      };
    },
    _getRowAtEndPosition: function _getRowAtEndPosition(rowIndex) {
      // We need to update enough rows above the selected one to be sure that when
      // we scroll to selected position all rows between first shown and selected
      // one have most recent heights computed and will not resize
      this._updateRowHeight(rowIndex);

      var currentRowIndex = rowIndex;
      var top = this._storedHeights[currentRowIndex];

      while (top < this._viewportHeight && currentRowIndex >= 0) {
        currentRowIndex--;

        if (currentRowIndex >= 0) {
          this._updateRowHeight(currentRowIndex);

          top += this._storedHeights[currentRowIndex];
        }
      }

      var position = this._rowOffsets.sumTo(rowIndex) - this._viewportHeight;

      if (position < 0) {
        position = 0;
      }

      return position;
    },
    scrollTo: function scrollTo(position) {
      if (this._rowCount === 0) {
        return NO_ROWS_SCROLL_RESULT;
      }

      if (position <= 0) {
        // If position less than or equal to 0 first row should be fully visible
        // on top
        this._position = 0;

        this._updateHeightsInViewport(0, 0);

        return {
          index: 0,
          offset: 0,
          position: this._position,
          contentHeight: this._contentHeight
        };
      } else if (position >= this._contentHeight - this._viewportHeight) {
        // If position is equal to or greater than max scroll value, we need
        // to make sure to have bottom border of last row visible.
        var rowIndex = this._rowCount - 1;
        position = this._getRowAtEndPosition(rowIndex);
      }

      this._position = position;

      var firstRowIndex = this._rowOffsets.greatestLowerBound(position);

      firstRowIndex = clamp(firstRowIndex, 0, Math.max(this._rowCount - 1, 0));

      var firstRowPosition = this._rowOffsets.sumUntil(firstRowIndex);

      var firstRowOffset = firstRowPosition - position;

      this._updateHeightsInViewport(firstRowIndex, firstRowOffset);

      this._updateHeightsAboveViewport(firstRowIndex);

      return {
        index: firstRowIndex,
        offset: firstRowOffset,
        position: this._position,
        contentHeight: this._contentHeight
      };
    },

    /**
     * Allows to scroll to selected row with specified offset. It always
     * brings that row to top of viewport with that offset
     */
    scrollToRow: function scrollToRow(rowIndex, offset) {
      rowIndex = clamp(rowIndex, 0, Math.max(this._rowCount - 1, 0));
      offset = clamp(offset, -this._storedHeights[rowIndex], 0);

      var firstRow = this._rowOffsets.sumUntil(rowIndex);

      return this.scrollTo(firstRow - offset);
    },

    /**
     * Allows to scroll to selected row by bringing it to viewport with minimal
     * scrolling. This that if row is fully visible, scroll will not be changed.
     * If top border of row is above top of viewport it will be scrolled to be
     * fully visible on the top of viewport. If the bottom border of row is
     * below end of viewport, it will be scrolled up to be fully visible on the
     * bottom of viewport.
     */
    scrollRowIntoView: function scrollRowIntoView(rowIndex) {
      rowIndex = clamp(rowIndex, 0, Math.max(this._rowCount - 1, 0));

      var rowBegin = this._rowOffsets.sumUntil(rowIndex);

      var rowEnd = rowBegin + this._storedHeights[rowIndex];

      if (rowBegin < this._position) {
        return this.scrollTo(rowBegin);
      } else if (this._position + this._viewportHeight < rowEnd) {
        var position = this._getRowAtEndPosition(rowIndex);

        return this.scrollTo(position);
      }

      return this.scrollTo(this._position);
    }
  };
})();

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * Created by GUY on 2016/5/26.
 * @class BI.SequenceTableTreeNumber
 * @extends BI.Widget
 */
BI.SequenceTableTreeNumber = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SequenceTableTreeNumber.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-sequence-table-tree-number",
      isNeedFreeze: false,
      startSequence: 1,
      // 开始的序号
      scrollTop: 0,
      headerRowSize: 25,
      rowSize: 25,
      rowSizeGetter: BI.emptyFn,
      headerRowSizeGetter: BI.emptyFn,
      sequenceHeaderCreator: BI.emptyFn,
      sequenceSummaryText: BI.i18nText("BI-Summary_Values"),
      header: [],
      items: [],
      // 二维数组
      // 交叉表头
      crossHeader: [],
      crossItems: [],
      width: 60
    });
  },
  _init: function _init() {
    BI.SequenceTableTreeNumber.superclass._init.apply(this, arguments);

    var o = this.options;
    this.vCurr = 1;
    this.hCurr = 1;
    this.tasks = [];
    this.gridView = BI.createWidget({
      type: "bi.grid_view",
      overflowX: false,
      overflowY: false,
      scrollTop: o.scrollTop,
      columnCount: 1,
      estimatedColumnSize: o.width,
      width: o.width,
      rowHeightGetter: this._rowHeightGetter.bind(this),
      columnWidthGetter: function columnWidthGetter() {
        return o.width;
      }
    });
    this.headerContainer = BI.createWidget({
      type: "bi.absolute",
      cls: "sequence-table-header-cell bi-border-top bi-border-left bi-border-bottom bi-border-right",
      width: o.width,
      scrollable: false
    });
    this.layout = BI.createWidget({
      type: "bi.vtape",
      element: this,
      items: [{
        el: this.headerContainer,
        height: 2
      }, {
        el: this.gridView,
        height: "fill"
      }]
    }); // 缓存第一行对应的序号

    this.start = this.options.startSequence;
    this.cache = {};

    this._nextState();

    this.populate();
  },
  _rowHeightGetter: function _rowHeightGetter(i) {
    var o = this.options;

    var headerHeight = this._getHeaderHeight();

    if (headerHeight >= o.height) {
      if (i === 0) {
        return headerHeight;
      } else {
        if (this.rowHeights) {
          var rowHeight = this.rowHeights[i - 1];
          return BI.isNotNull(rowHeight) ? rowHeight : this.options.rowSize;
        }

        return this.options.rowSize;
      }
    }

    if (this.rowHeights) {
      var rowHeight = this.rowHeights[i];
      return BI.isNotNull(rowHeight) ? rowHeight : this.options.rowSize;
    }

    return this.options.rowSize;
  },
  _getNextSequence: function _getNextSequence(nodes) {
    var self = this;
    var start = this.start;
    var cnt = this.start;

    function track(node) {
      // 如果已经有缓存了就不改计数了，复杂表会出现这种情况
      var key = self._getCacheKey(node);

      self.cache[key] || (self.cache[key] = cnt);
      cnt++;
    }

    BI.each(nodes, function (i, node) {
      if (BI.isNotEmptyArray(node.children)) {
        BI.each(node.children, function (index, child) {
          if (index === 0) {
            var key = self._getCacheKey(child);

            if (self.cache[key]) {
              start = cnt = self.cache[key];
            }
          }

          track(child);
        });
      }
    });
    this.start = cnt;
    return start;
  },
  _getStart: function _getStart(nodes) {
    var self = this;
    var start = this.start;
    BI.some(nodes, function (i, node) {
      if (BI.isNotEmptyArray(node.children)) {
        return BI.some(node.children, function (index, child) {
          if (index === 0) {
            var key = self._getCacheKey(child);

            if (self.cache[key]) {
              start = self.cache[key];
              return true;
            }
          }
        });
      }
    });
    return start;
  },
  _formatNumber: function _formatNumber(nodes) {
    var o = this.options;
    var result = [];

    var count = this._getStart(nodes);

    function getLeafCount(node) {
      var cnt = 0;

      if (BI.isNotEmptyArray(node.children)) {
        BI.each(node.children, function (index, child) {
          cnt += getLeafCount(child);
        });
        cnt++;
      } else {
        cnt++;
      }

      return cnt;
    }

    var start = 0;
    var top = 0;
    BI.each(nodes, function (i, node) {
      if (BI.isArray(node.children)) {
        if (BI.isNotEmptyArray(node.values) && o.rowPosition === BICst.DESIGN.TABLE_ROW_SUM_POSITION.TOP) {
          result.push({
            text: o.sequenceSummaryText,
            start: start++,
            top: top,
            cnt: 1,
            isSummary: true,
            height: o.rowSize
          });
          top += o.rowSize;
        }

        BI.each(node.children, function (index, child) {
          var cnt = getLeafCount(child);
          result.push({
            text: count++,
            start: start,
            top: top,
            cnt: cnt,
            index: index,
            height: cnt * o.rowSize
          });
          start += cnt;
          top += cnt * o.rowSize;
        });

        if (BI.isNotEmptyArray(node.values) && o.rowPosition !== BICst.DESIGN.TABLE_ROW_SUM_POSITION.TOP) {
          result.push({
            text: o.sequenceSummaryText,
            start: start++,
            top: top,
            cnt: 1,
            isSummary: true,
            height: o.rowSize
          });
          top += o.rowSize;
        }
      }
    });
    var rowSize = this.rowHeights = o.rowSizeGetter();
    result = BI.map(result, function (key, item) {
      return [BI.extend({
        type: "bi.table_style_cell",
        cls: "sequence-table-number-cell bi-border-left bi-border-bottom bi-border-right",
        width: o.width,
        styleGetter: item.isSummary === true ? function () {
          return o.summaryCellStyleGetter(true);
        } : function (key) {
          return function () {
            return o.sequenceCellStyleGetter(key);
          };
        }(item.index),
        _store: o.tableStyleCellStoreGetter
      }, item, {
        height: rowSize[key] || item.height
      })];
    });
    return result;
  },
  _layout: function _layout() {
    var o = this.options;
    this.headerContainer.empty();

    var headerHeight = this._getHeaderHeight();

    var items = this.layout.attr("items");

    if (headerHeight >= o.height) {
      items[0].height = 0;
    } else {
      BI.createWidget({
        type: "bi.absolute",
        element: this.headerContainer,
        items: [{
          el: BI.extend({
            type: "bi.table_style_cell",
            height: headerHeight - 2,
            cls: "sequence-table-title-cell",
            styleGetter: o.headerCellStyleGetter,
            text: BI.i18nText("BI-Number_Index"),
            _store: o.tableStyleCellStoreGetter
          }, o.sequenceHeaderCreator()),
          left: 0,
          top: 0,
          right: 0,
          bottom: 0
        }]
      });
      items[0].height = headerHeight;
    }

    this.layout.attr("items", items);
    this.layout.resize();
    this.numbers = this._formatNumber(o.items);

    if (headerHeight >= o.height) {
      this.numbers.unshift([BI.extend({
        type: "bi.table_style_cell",
        height: headerHeight - 2,
        cls: "sequence-table-title-cell",
        styleGetter: o.headerCellStyleGetter,
        text: BI.i18nText("BI-Number_Index"),
        _store: o.tableStyleCellStoreGetter
      }, o.sequenceHeaderCreator())]);
      var estimatedRowSize = BI.isArray(this.numbers) ? (BI.sum(this.rowHeights) + headerHeight) / (this.numbers.length + 1) : 0;
      this.gridView.setEstimatedRowSize(estimatedRowSize);
      this.gridView.setHeight(o.height);
      this.gridView.restore();
    } else {
      var estimatedRowSize = BI.isArray(this.numbers) && this.numbers.length > 0 ? BI.sum(this.rowHeights) / this.numbers.length : 0;
      this.gridView.setEstimatedRowSize(estimatedRowSize);
      this.gridView.setHeight(o.height - headerHeight);
      this.gridView.restore();
    }
  },
  _getHeaderHeight: function _getHeaderHeight() {
    var o = this.options;
    var headerHeights = o.headerRowSizeGetter();
    return BI.sum(headerHeights);
  },
  _nextState: function _nextState() {
    var o = this.options;

    this._getNextSequence(o.items);
  },
  _prevState: function _prevState() {
    var o = this.options;
    var firstChild;
    BI.some(o.items, function (i, node) {
      if (BI.isNotEmptyArray(node.children)) {
        return BI.some(node.children, function (j, child) {
          firstChild = child;
          return true;
        });
      }
    });

    if (firstChild && BI.isNotEmptyObject(this.cache)) {
      this.start = this.cache[this._getCacheKey(firstChild)];
    } else {
      this.start = 1;
    }

    this._nextState();
  },
  _calculateChildrenToRender: function _calculateChildrenToRender() {
    var o = this.options;

    this.gridView._populate(this.numbers);

    this.gridView.setScrollTop(o.scrollTop);
  },
  _getCacheKey: function _getCacheKey(node) {
    if (!this.nullKey) {
      this.nullKey = BI.UUID();
    }

    var text = BI.isNull(node.text) ? node.value : node.text;
    return BI.isNull(text) ? this.nullKey : text;
  },
  _restore: function _restore() {
    this.gridView.restore();
  },
  _populate: function _populate() {
    var self = this;
    BI.each(this.tasks, function (i, task) {
      task.apply(self);
    });
    this.tasks = [];

    this._layout();

    this._calculateChildrenToRender();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    var o = this.options;

    if (o.scrollTop !== scrollTop) {
      o.scrollTop = scrollTop;
      this.gridView.setScrollTop(o.scrollTop);
    }
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.options.scrollTop;
  },
  setVPage: function setVPage(v) {
    if (v <= 1) {
      this.cache = {};
      this.start = this.options.startSequence;

      this._restore();

      this.tasks.push(this._nextState);
    } else if (v === this.vCurr + 1) {
      this.tasks.push(this._nextState);
    } else if (v === this.vCurr - 1) {
      this.tasks.push(this._prevState);
    }

    this.vCurr = v;
  },
  setHPage: function setHPage(v) {
    if (v !== this.hCurr) {
      this.tasks.push(this._prevState);
    }

    this.hCurr = v;
  },
  setWidth: function setWidth(width) {
    BI.SequenceTableTreeNumber.superclass.setWidth.apply(this, arguments);
    this.gridView.setWidth(width);
    this.headerContainer.setWidth(width);
  },
  restore: function restore() {
    this._restore();
  },
  populate: function populate(items, header, crossItems, crossHeader) {
    var o = this.options;

    if (items && items !== this.options.items) {
      o.items = items;

      this._restore();

      this.tasks.push(this._prevState);
    }

    if (header && header !== this.options.header) {
      o.header = header;
    }

    if (crossItems && crossItems !== this.options.crossItems) {
      o.crossItems = crossItems;
    }

    if (crossHeader && crossHeader !== this.options.crossHeader) {
      o.crossHeader = crossHeader;
    }

    this._populate();
  }
});
BI.shortcut("bi.sequence_table_tree_number", BI.SequenceTableTreeNumber);

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * Created by GUY on 2016/8/10.
 * @class BI.SequenceTableDynamicNumber
 * @extends BI.SequenceTableTreeNumber
 */
BI.SequenceTableDynamicNumber = BI.inherit(BI.SequenceTableTreeNumber, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SequenceTableDynamicNumber.superclass._defaultConfig.apply(this, arguments), {
      extraCls: 'bi-sequence-table-dynamic-number'
    });
  },
  _init: function _init() {
    BI.SequenceTableDynamicNumber.superclass._init.apply(this, arguments);
  },
  _formatNumber: function _formatNumber(nodes) {
    var o = this.options;
    var result = [];

    var count = this._getStart(nodes);

    function getLeafCount(node) {
      var cnt = 0;

      if (BI.isNotEmptyArray(node.children)) {
        BI.each(node.children, function (index, child) {
          cnt += getLeafCount(child);
        });

        if (BI.isNotEmptyArray(node.values)) {
          cnt++;
        }
      } else {
        cnt++;
      }

      return cnt;
    }

    var start = 0;
    var top = 0;
    BI.each(nodes, function (i, node) {
      if (BI.isArray(node.children)) {
        if (BI.isNotEmptyArray(node.values) && o.rowPosition === BICst.DESIGN.TABLE_ROW_SUM_POSITION.TOP) {
          result.push({
            text: o.sequenceSummaryText,
            title: o.sequenceSummaryText,
            start: start++,
            top: top,
            cnt: 1,
            isSummary: true,
            height: o.rowSize
          });
          top += o.rowSize;
        }

        BI.each(node.children, function (index, child) {
          var cnt = getLeafCount(child);
          var text = count++;
          result.push({
            text: text,
            title: text,
            start: start,
            top: top,
            cnt: cnt,
            index: index,
            height: cnt * o.rowSize
          });
          start += cnt;
          top += cnt * o.rowSize;
        });

        if (BI.isNotEmptyArray(node.values) && o.rowPosition !== BICst.DESIGN.TABLE_ROW_SUM_POSITION.TOP) {
          result.push({
            text: o.sequenceSummaryText,
            title: o.sequenceSummaryText,
            start: start++,
            top: top,
            cnt: 1,
            isSummary: true,
            height: o.rowSize
          });
          top += o.rowSize;
        }
      }
    });
    var rowSize = this.rowHeights = o.rowSizeGetter();
    result = BI.map(result, function (key, item) {
      return [BI.extend({
        type: "bi.table_style_cell",
        cls: "sequence-table-number-cell bi-border-left bi-border-bottom bi-border-right",
        width: o.width,
        styleGetter: item.isSummary === true ? function () {
          return o.summaryCellStyleGetter(true);
        } : function (key) {
          return function () {
            return o.sequenceCellStyleGetter(key);
          };
        }(item.index),
        _store: o.tableStyleCellStoreGetter
      }, item, {
        height: rowSize[key] || item.height
      })];
    });
    return result;
  }
});
BI.shortcut('bi.sequence_table_dynamic_number', BI.SequenceTableDynamicNumber);

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * 表格
 *
 * Created by GUY on 2015/9/22.
 * @class BI.PageTableCell
 * @extends BI.Single
 */
BI.PageTableCell = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.PageTableCell.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-page-table-cell",
      text: "",
      title: ""
    });
  },
  _init: function _init() {
    BI.PageTableCell.superclass._init.apply(this, arguments);

    BI.createWidget({
      type: "bi.label",
      element: this,
      textAlign: "left",
      whiteSpace: "nowrap",
      height: this.options.height,
      text: this.options.text,
      title: this.options.title,
      value: this.options.value,
      lgap: 5,
      rgap: 5
    });

    if (BI.isNotNull(this.options.styles) && BI.isObject(this.options.styles)) {
      this.element.css(this.options.styles);
    }
  }
});
BI.shortcut("bi.page_table_cell", BI.PageTableCell);

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 分页表格
 *
 * Created by GUY on 2016/2/15.
 * @class BI.PageTable
 * @extends BI.Widget
 */
BI.PageTable = BI.inherit(BI.Widget, {
  _const: {
    scrollWidth: 18,
    minScrollWidth: 100
  },
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.PageTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-page-table",
      el: {
        type: "bi.sequence_table"
      },
      pager: {
        horizontal: {
          pages: false,
          // 总页数
          curr: 1,
          // 初始化当前页， pages为数字时可用
          hasPrev: BI.emptyFn,
          hasNext: BI.emptyFn,
          firstPage: 1,
          lastPage: BI.emptyFn
        },
        vertical: {
          pages: false,
          // 总页数
          curr: 1,
          // 初始化当前页， pages为数字时可用
          hasPrev: BI.emptyFn,
          hasNext: BI.emptyFn,
          firstPage: 1,
          lastPage: BI.emptyFn
        }
      },
      itemsCreator: BI.emptyFn,
      isNeedFreeze: false,
      // 是否需要冻结单元格
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为true时生效
      isNeedMerge: false,
      // 是否需要合并单元格
      mergeCols: [],
      // 合并的单元格列号
      mergeRule: BI.emptyFn,
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      rowSize: 25,
      showSequence: false,
      seqWidth: 60,
      regionColumnSize: [],
      headerCellStyleGetter: BI.emptyFn,
      summaryCellStyleGetter: BI.emptyFn,
      sequenceCellStyleGetter: BI.emptyFn,
      // 传给汇总、序号单元格的store，能在单元格绘制时使用上下文中的cssScale
      tableStyleCellStoreGetter: null,
      header: [],
      items: [],
      // 二维数组
      // 交叉表头
      crossHeader: [],
      crossItems: []
    });
  },
  _init: function _init() {
    BI.PageTable.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.hCurr = 1;
    this.vCurr = 1;
    this.table = BI.createWidget(o.el, {
      type: "bi.sequence_table",
      width: o.width,
      height: o.height && o.height - 30,
      isNeedResize: true,
      isNeedFreeze: o.isNeedFreeze,
      freezeCols: o.freezeCols,
      isNeedMerge: o.isNeedMerge,
      mergeCols: o.mergeCols,
      mergeRule: o.mergeRule,
      columnSize: o.columnSize,
      minColumnSize: o.minColumnSize,
      maxColumnSize: o.maxColumnSize,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      showSequence: o.showSequence,
      seqWidth: o.seqWidth,
      regionColumnSize: o.regionColumnSize,
      headerCellStyleGetter: o.headerCellStyleGetter,
      summaryCellStyleGetter: o.summaryCellStyleGetter,
      sequenceCellStyleGetter: o.sequenceCellStyleGetter,
      tableStyleCellStoreGetter: o.tableStyleCellStoreGetter,
      header: o.header,
      items: o.items,
      // 交叉表头
      crossHeader: o.crossHeader,
      crossItems: o.crossItems
    });
    this.table.on(BI.Table.EVENT_TABLE_SCROLL, function () {
      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();
      o.columnSize = this.getColumnSize();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();
      o.columnSize = this.getColumnSize();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
    });
    this.pager = BI.createWidget(o.pager, {
      type: "bi.direction_pager",
      height: 24
    });
    this.pager.on(BI.Pager.EVENT_CHANGE, function () {
      var vpage = this.getVPage && this.getVPage();

      if (BI.isNull(vpage)) {
        vpage = this.getCurrentPage();
      }

      var hpage = this.getHPage && this.getHPage();
      o.itemsCreator({
        vpage: vpage,
        hpage: hpage
      }, function () {
        self.table.setVPage ? self.table.setVPage(vpage) : self.table.setValue(vpage);
        self.table.setHPage && self.table.setHPage(hpage);
        self.populate.apply(self, arguments);
      });
    });
    BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.table,
        left: 0,
        top: 0
      }, {
        el: this.pager,
        left: 0,
        right: 10,
        bottom: 3
      }]
    });
  },
  setHPage: function setHPage(v) {
    this.hCurr = v;
    this.pager.setHPage && this.pager.setHPage(v);
    this.table.setHPage && this.table.setHPage(v);
  },
  setVPage: function setVPage(v) {
    this.vCurr = v;
    this.pager.setVPage && this.pager.setVPage(v);
    this.table.setVPage && this.table.setVPage(v);
  },
  getHPage: function getHPage() {
    var hpage = this.pager.getHPage && this.pager.getHPage();

    if (BI.isNotNull(hpage)) {
      return hpage;
    }

    hpage = this.pager.getCurrentPage && this.pager.getCurrentPage();

    if (BI.isNotNull(hpage)) {
      return hpage;
    }

    return this.hpage;
  },
  getVPage: function getVPage() {
    var vpage = this.pager.getVPage && this.pager.getVPage();

    if (BI.isNotNull(vpage)) {
      return vpage;
    }

    vpage = this.pager.getCurrentPage && this.pager.getCurrentPage();

    if (BI.isNotNull(vpage)) {
      return vpage;
    }

    return this.vpage;
  },
  setWidth: function setWidth(width) {
    BI.PageTable.superclass.setWidth.apply(this, arguments);
    this.table.setWidth(width);
  },
  setHeight: function setHeight(height) {
    BI.PageTable.superclass.setHeight.apply(this, arguments);
    var o = this.options;
    var showPager = false;

    if (this.pager.isShowPager && this.pager.isShowPager()) {
      showPager = true;
    } else if (this.pager.hasHNext && this.pager.hasHNext()) {
      showPager = true;
    } else if (this.pager.hasHPrev && this.pager.hasHPrev()) {
      showPager = true;
    } else if (this.pager.hasVNext && this.pager.hasVNext()) {
      showPager = true;
    } else if (this.pager.hasVPrev && this.pager.hasVPrev()) {
      showPager = true;
    } else if (this.pager.hasNext && this.pager.hasNext()) {
      showPager = true;
    } else if (this.pager.hasPrev && this.pager.hasPrev()) {
      showPager = true;
    }

    this.table.setHeight(height - (showPager ? o.pager && o.pager.height || 30 : 0));
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.options.columnSize = columnSize;
    this.table.setColumnSize(columnSize);
  },
  getColumnSize: function getColumnSize() {
    return this.table.getColumnSize();
  },
  setRegionColumnSize: function setRegionColumnSize(columnSize) {
    this.options.columnSize = columnSize;
    this.table.setRegionColumnSize(columnSize);
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.table.getRegionColumnSize();
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.table.setLeftHorizontalScroll(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.table.setRightHorizontalScroll(scrollLeft);
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.table.setVerticalScroll(scrollTop);
  },
  restore: function restore() {
    this.table.restore();
  },
  attr: function attr() {
    BI.PageTable.superclass.attr.apply(this, arguments);
    this.table.attr.apply(this.table, arguments);
  },
  populate: function populate() {
    this.pager.populate();
    this.table.populate.apply(this.table, arguments);
  },
  destroy: function destroy() {
    this.table.destroy();
    this.pager && this.pager.destroy();
    BI.PageTable.superclass.destroy.apply(this, arguments);
  }
});
BI.shortcut("bi.page_table", BI.PageTable);

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 预览表列
 *
 * Created by GUY on 2015/12/25.
 * @class BI.PreviewTableCell
 * @extends BI.Widget
 */
BI.PreviewTableCell = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.PreviewTableCell.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-preview-table-cell",
      text: ""
    });
  },
  _init: function _init() {
    BI.PreviewTableCell.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    BI.createWidget({
      type: "bi.label",
      element: this,
      textAlign: o.textAlign || "left",
      whiteSpace: o.whiteSpace || "normal",
      height: this.options.height,
      text: this.options.text,
      value: this.options.value,
      lgap: o.lgap,
      rgap: o.rgap,
      hgap: o.hgap || 5
    });
  }
});
BI.shortcut("bi.preview_table_cell", BI.PreviewTableCell);

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 预览表
 *
 * Created by GUY on 2015/12/25.
 * @class BI.PreviewTableHeaderCell
 * @extends BI.Widget
 */
BI.PreviewTableHeaderCell = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.PreviewTableHeaderCell.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-preview-table-header-cell",
      text: ""
    });
  },
  _init: function _init() {
    BI.PreviewTableHeaderCell.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    BI.createWidget({
      type: "bi.label",
      element: this,
      textAlign: o.textAlign || "left",
      whiteSpace: o.whiteSpace || "nowrap",
      height: this.options.height,
      text: this.options.text,
      value: this.options.value,
      lgap: o.lgap,
      rgap: o.rgap,
      hgap: o.hgap || 5
    });
  }
});
BI.shortcut("bi.preview_table_header_cell", BI.PreviewTableHeaderCell);

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 预览表
 *
 * Created by GUY on 2015/12/25.
 * @class BI.PreviewTable
 * @extends BI.Widget
 */
BI.PreviewTable = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.PreviewTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-preview-table",
      isNeedFreeze: false,
      freezeCols: [],
      rowSize: null,
      columnSize: [],
      headerRowSize: 30,
      header: [],
      items: []
    });
  },
  _init: function _init() {
    BI.PreviewTable.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.table = BI.createWidget({
      type: "bi.table_view",
      element: this,
      isNeedResize: false,
      isNeedFreeze: o.isNeedFreeze,
      freezeCols: o.freezeCols,
      rowSize: o.rowSize,
      columnSize: o.columnSize,
      headerRowSize: o.headerRowSize,
      header: BI.map(o.header, function (i, items) {
        return BI.map(items, function (j, item) {
          return BI.extend({
            type: "bi.preview_table_header_cell"
          }, item);
        });
      }),
      items: BI.map(o.items, function (i, items) {
        return BI.map(items, function (j, item) {
          return BI.extend({
            type: "bi.preview_table_cell"
          }, item);
        });
      })
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_INIT, function () {
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_INIT, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_RESIZE, function () {
      self._adjustColumns();
    });

    this._adjustColumns();
  },
  // 是否有自适应调节的列，即列宽为""
  _hasAdaptCol: function _hasAdaptCol(columnSize) {
    return BI.any(columnSize, function (i, size) {
      return size === "";
    });
  },
  _isPercentage: function _isPercentage(columnSize) {
    return columnSize[0] <= 1;
  },
  _adjustColumns: function _adjustColumns() {
    var self = this,
        o = this.options;

    if (o.isNeedFreeze === true) {
      // 如果存在百分比的情况
      if (this._isPercentage(o.columnSize)) {
        if (this._hasAdaptCol(o.columnSize)) {
          var findCols = [],
              remain = 0;
          BI.each(o.columnSize, function (i, size) {
            if (size === "") {
              findCols.push(i);
            } else {
              remain += size;
            }
          });
          remain = 1 - remain;
          var average = remain / findCols.length;
          BI.each(findCols, function (i, col) {
            o.columnSize[col] = average;
          });
        }

        var isRight = BI.first(o.freezeCols) !== 0;
        var freezeSize = [],
            notFreezeSize = [];
        BI.each(o.columnSize, function (i, size) {
          if (o.freezeCols.includes(i)) {
            freezeSize.push(size);
          } else {
            notFreezeSize.push(size);
          }
        });
        var sumFreezeSize = BI.sum(freezeSize),
            sumNotFreezeSize = BI.sum(notFreezeSize);
        BI.each(freezeSize, function (i, size) {
          freezeSize[i] = size / sumFreezeSize;
        });
        BI.each(notFreezeSize, function (i, size) {
          notFreezeSize[i] = size / sumNotFreezeSize;
        });
        this.table.setRegionColumnSize(isRight ? ["fill", sumFreezeSize] : [sumFreezeSize, "fill"]);
        this.table.setColumnSize(isRight ? notFreezeSize.concat(freezeSize) : freezeSize.concat(notFreezeSize));
      }
    } else {
      // 如果存在自适应宽度的列或者是百分比计算的列，需要将整个表宽设为100%
      if (this._hasAdaptCol(o.columnSize) || this._isPercentage(o.columnSize)) {
        this.table.setRegionColumnSize(["100%"]);
      }
    }
  },
  setColumnSize: function setColumnSize(columnSize) {
    return this.table.setColumnSize(columnSize);
  },
  getColumnSize: function getColumnSize() {
    return this.table.getColumnSize();
  },
  getCalculateColumnSize: function getCalculateColumnSize() {
    return this.table.getCalculateColumnSize();
  },
  setHeaderColumnSize: function setHeaderColumnSize(columnSize) {
    return this.table.setHeaderColumnSize(columnSize);
  },
  setRegionColumnSize: function setRegionColumnSize(columnSize) {
    return this.table.setRegionColumnSize(columnSize);
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.table.getRegionColumnSize();
  },
  getCalculateRegionColumnSize: function getCalculateRegionColumnSize() {
    return this.table.getCalculateRegionColumnSize();
  },
  getCalculateRegionRowSize: function getCalculateRegionRowSize() {
    return this.table.getCalculateRegionRowSize();
  },
  getClientRegionColumnSize: function getClientRegionColumnSize() {
    return this.table.getClientRegionColumnSize();
  },
  getScrollRegionColumnSize: function getScrollRegionColumnSize() {
    return this.table.getScrollRegionColumnSize();
  },
  getScrollRegionRowSize: function getScrollRegionRowSize() {
    return this.table.getScrollRegionRowSize();
  },
  hasVerticalScroll: function hasVerticalScroll() {
    return this.table.hasVerticalScroll();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    return this.table.setVerticalScroll(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    return this.table.setLeftHorizontalScroll(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    return this.table.setRightHorizontalScroll(scrollLeft);
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  getLeftHorizontalScroll: function getLeftHorizontalScroll() {
    return this.table.getLeftHorizontalScroll();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.table.getRightHorizontalScroll();
  },
  getColumns: function getColumns() {
    return this.table.getColumns();
  },
  populate: function populate(items, header) {
    if (items) {
      items = BI.map(items, function (i, items) {
        return BI.map(items, function (j, item) {
          return BI.extend({
            type: "bi.preview_table_cell"
          }, item);
        });
      });
    }

    if (header) {
      header = BI.map(header, function (i, items) {
        return BI.map(items, function (j, item) {
          return BI.extend({
            type: "bi.preview_table_header_cell"
          }, item);
        });
      });
    }

    this.table.populate(items, header);

    this._adjustColumns();
  }
});
BI.PreviewTable.EVENT_CHANGE = "PreviewTable.EVENT_CHANGE";
BI.shortcut("bi.preview_table", BI.PreviewTable);

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * Created by GUY on 2016/5/26.
 * @class BI.SequenceTableListNumber
 * @extends BI.Widget
 */
BI.SequenceTableListNumber = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SequenceTableListNumber.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-sequence-table-list-number",
      isNeedFreeze: false,
      scrollTop: 0,
      startSequence: 1,
      // 开始的序号
      headerRowSize: 25,
      rowSize: 25,
      rowSizeGetter: BI.emptyFn,
      headerRowSizeGetter: BI.emptyFn,
      sequenceHeaderCreator: BI.emptyFn,
      header: [],
      items: [],
      // 二维数组
      // 交叉表头
      crossHeader: [],
      crossItems: [],
      pageSize: 20,
      width: 60
    });
  },
  _init: function _init() {
    BI.SequenceTableListNumber.superclass._init.apply(this, arguments);

    var o = this.options;
    this.start = o.startSequence;
    this.gridView = BI.createWidget({
      type: "bi.grid_view",
      overflowX: false,
      overflowY: false,
      scrollTop: o.scrollTop,
      columnCount: 1,
      estimatedColumnSize: o.width,
      width: o.width,
      rowHeightGetter: this._rowHeightGetter.bind(this),
      columnWidthGetter: function columnWidthGetter() {
        return o.width;
      }
    });
    this.headerContainer = BI.createWidget({
      type: "bi.absolute",
      cls: "sequence-table-header-cell bi-border-top bi-border-left bi-border-bottom bi-border-right",
      width: o.width,
      scrollable: false
    });
    this.layout = BI.createWidget({
      type: "bi.vtape",
      element: this,
      items: [{
        el: this.headerContainer,
        height: 2
      }, {
        el: this.gridView,
        height: "fill"
      }]
    });
    this.populate();
  },
  _rowHeightGetter: function _rowHeightGetter(i) {
    if (this.rowHeights) {
      var rowHeight = this.rowHeights[i];
      return BI.isNotNull(rowHeight) ? rowHeight : this.options.rowSize;
    }

    return this.options.rowSize;
  },
  _layout: function _layout() {
    var o = this.options;
    this.headerContainer.empty();
    var headerHeights = o.headerRowSizeGetter();
    var headerHeight = BI.sum(headerHeights);
    BI.createWidget({
      type: "bi.absolute",
      element: this.headerContainer,
      items: [{
        el: BI.extend({
          type: "bi.table_style_cell",
          height: headerHeight - 2,
          cls: "sequence-table-title-cell",
          styleGetter: o.headerCellStyleGetter,
          text: BI.i18nText("BI-Number_Index"),
          _store: o.tableStyleCellStoreGetter
        }, o.sequenceHeaderCreator()),
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      }]
    });
    var items = this.layout.attr("items");

    if (o.isNeedFreeze === false) {
      items[0].height = 0;
    } else if (o.isNeedFreeze === true) {
      items[0].height = headerHeight;
    }

    this.layout.attr("items", items);
    this.layout.resize();
    this.numbers = this._formatNumber(o.items);
    var estimatedRowSize = o.items.length > 0 ? BI.sum(this.rowHeights) / o.items.length : 0;
    this.gridView.setEstimatedRowSize(estimatedRowSize);
    this.gridView.setHeight(o.height - headerHeight);
  },
  _formatNumber: function _formatNumber(items) {
    var self = this,
        o = this.options;
    var rowSize = this.rowHeights = o.rowSizeGetter();
    var result = BI.map(items, function (i, row) {
      return BI.map(row, function (j, item) {
        return {
          type: "bi.table_style_cell",
          cls: "sequence-table-number-cell bi-border-left bi-border-bottom bi-border-right " + (i % 2 !== 0 ? "even-row" : "odd-row"),
          width: o.width,
          height: rowSize ? rowSize[i] : o.rowSize,
          text: self.start + i,
          styleGetter: function styleGetter() {
            return o.sequenceCellStyleGetter(self.start + i - 1);
          },
          _store: o.tableStyleCellStoreGetter
        };
      });
    });
    return result;
  },
  _calculateChildrenToRender: function _calculateChildrenToRender() {
    var self = this,
        o = this.options;

    this.gridView._populate(this.numbers);

    this.gridView.setScrollTop(o.scrollTop);
  },
  _populate: function _populate() {
    this._calculateChildrenToRender();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    var o = this.options;

    if (o.scrollTop !== scrollTop) {
      o.scrollTop = scrollTop;
      this.gridView.setScrollTop(o.scrollTop);
    }
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.options.scrollTop;
  },
  setVPage: function setVPage(v) {
    v = v < 1 ? 1 : v;
    var o = this.options;
    this.start = (v - 1) * o.pageSize + 1;
  },
  setWidth: function setWidth(width) {
    BI.SequenceTableListNumber.superclass.setWidth.apply(this, arguments);
    this.gridView.setWidth(width);
    this.headerContainer.setWidth(width);
  },
  _restore: function _restore() {
    this.gridView.restore();
  },
  restore: function restore() {
    this._restore();
  },
  setPagesize: function setPagesize(size) {
    this.options.pageSize = size;
  },
  populate: function populate(items, header) {
    var o = this.options;

    if (items && items !== this.options.items) {
      o.items = items;
    }

    if (header && header !== this.options.header) {
      o.header = header;
    }

    this._restore();

    this._layout();

    this._populate();
  }
});
BI.shortcut("bi.sequence_table_list_number", BI.SequenceTableListNumber);

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * 带有序号的表格
 *
 * Created by GUY on 2016/5/26.
 * @class BI.SequenceTable
 * @extends BI.Widget
 */
BI.SequenceTable = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(BI.SequenceTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-sequence-table",
      el: {
        type: "bi.adaptive_table"
      },
      sequence: {},
      isNeedResize: true,
      isNeedFreeze: false,
      // 是否需要冻结单元格
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为true时生效
      isNeedMerge: false,
      // 是否需要合并单元格
      mergeCols: [],
      // 合并的单元格列号
      mergeRule: BI.emptyFn,
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      headerCellStyleGetter: BI.emptyFn,
      summaryCellStyleGetter: BI.emptyFn,
      sequenceCellStyleGetter: BI.emptyFn,
      // 传给汇总、序号单元格的store，能在单元格绘制时使用上下文中的cssScale
      tableStyleCellStoreGetter: null,
      header: [],
      items: [],
      // 二维数组
      // 交叉表头
      crossHeader: [],
      crossItems: [],
      showSequence: false,
      startSequence: 1,
      // 开始的序号
      seqWidth: 60
    });
  },
  _init: function _init() {
    BI.SequenceTable.superclass._init.apply(this, arguments);

    var self = this,
        o = this.options;
    this.table = BI.createWidget(o.el, {
      type: "bi.adaptive_table",
      width: o.showSequence === true ? o.width - o.seqWidth : o.width,
      height: o.height,
      isNeedResize: o.isNeedResize,
      isNeedFreeze: o.isNeedFreeze,
      freezeCols: o.freezeCols,
      isNeedMerge: o.isNeedMerge,
      mergeCols: o.mergeCols,
      mergeRule: o.mergeRule,
      columnSize: o.columnSize,
      minColumnSize: o.minColumnSize,
      maxColumnSize: o.maxColumnSize,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      regionColumnSize: o.regionColumnSize,
      headerCellStyleGetter: o.headerCellStyleGetter,
      summaryCellStyleGetter: o.summaryCellStyleGetter,
      sequenceCellStyleGetter: o.sequenceCellStyleGetter,
      tableStyleCellStoreGetter: o.tableStyleCellStoreGetter,
      header: o.header,
      items: o.items,
      // 交叉表头
      crossHeader: o.crossHeader,
      crossItems: o.crossItems
    });
    this.sequence = BI.createWidget(o.sequence, {
      type: "bi.sequence_table_list_number",
      invisible: o.showSequence === false,
      startSequence: o.startSequence,
      isNeedFreeze: o.isNeedFreeze,
      header: o.header,
      items: o.items,
      crossHeader: o.crossHeader,
      crossItems: o.crossItems,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      rowSizeGetter: function rowSizeGetter() {
        return self.table.getFirstColumnRowSize();
      },
      headerRowSizeGetter: function headerRowSizeGetter() {
        return self.table.getFirstColumnHeaderRowSize();
      },
      width: o.seqWidth,
      height: o.height && o.height - BI.GridTableScrollbar.SIZE,
      headerCellStyleGetter: o.headerCellStyleGetter,
      summaryCellStyleGetter: o.summaryCellStyleGetter,
      sequenceCellStyleGetter: o.sequenceCellStyleGetter,
      tableStyleCellStoreGetter: o.tableStyleCellStoreGetter
    });
    this.table.on(BI.Table.EVENT_TABLE_SCROLL, function () {
      if (self.sequence.getVerticalScroll() !== this.getVerticalScroll()) {
        self.sequence.setVerticalScroll(this.getVerticalScroll()); // self.sequence._populate();
      }

      self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();
      o.columnSize = this.getColumnSize();
      self.sequence.setVerticalScroll(this.getVerticalScroll());
      self.sequence.populate();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
    });
    this.table.on(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, function () {
      o.regionColumnSize = this.getRegionColumnSize();
      o.columnSize = this.getColumnSize();
      self.sequence.setVerticalScroll(this.getVerticalScroll());
      self.sequence.populate();
      self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
    });
    this.htape = BI.createWidget({
      type: "bi.absolute",
      element: this,
      items: [{
        el: this.sequence,
        left: 0,
        top: 0
      }, {
        el: this.table,
        top: 0,
        left: o.showSequence === true ? o.seqWidth : 0
      }]
    });

    this._populate();
  },
  _populate: function _populate() {
    var o = this.options;

    if (o.showSequence === true) {
      this.sequence.setVisible(true);
      this.table.element.css("left", o.seqWidth + "px");
      this.table.setWidth(o.width - o.seqWidth);
      this.sequence.setWidth(o.seqWidth);
    } else {
      this.sequence.setVisible(false);
      this.table.element.css("left", "0px");
      this.table.setWidth(o.width);
    }
  },
  setWidth: function setWidth(width) {
    BI.PageTable.superclass.setWidth.apply(this, arguments);
    this.table.setWidth(this.options.showSequence ? width - this.options.seqWidth : width);
  },
  setHeight: function setHeight(height) {
    BI.PageTable.superclass.setHeight.apply(this, arguments);
    this.table.setHeight(height);
    this.sequence.setHeight(height - BI.GridTableScrollbar.SIZE);
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.options.columnSize = columnSize;
    this.table.setColumnSize(columnSize);
  },
  getColumnSize: function getColumnSize() {
    return this.table.getColumnSize();
  },
  setRegionColumnSize: function setRegionColumnSize(columnSize) {
    this.options.columnSize = columnSize;
    this.table.setRegionColumnSize(columnSize);
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return this.table.getRegionColumnSize();
  },
  hasLeftHorizontalScroll: function hasLeftHorizontalScroll() {
    return this.table.hasLeftHorizontalScroll();
  },
  hasRightHorizontalScroll: function hasRightHorizontalScroll() {
    return this.table.hasRightHorizontalScroll();
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {
    this.table.setLeftHorizontalScroll(scrollLeft);
  },
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {
    this.table.setRightHorizontalScroll(scrollLeft);
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    this.table.setVerticalScroll(scrollTop);
    this.sequence.setVerticalScroll(scrollTop);
  },
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  setVPage: function setVPage(page) {
    this.sequence.setVPage && this.sequence.setVPage(page);
  },
  setHPage: function setHPage(page) {
    this.sequence.setHPage && this.sequence.setHPage(page);
  },
  attr: function attr() {
    BI.SequenceTable.superclass.attr.apply(this, arguments);
    this.table.attr.apply(this.table, arguments);
    this.sequence.attr.apply(this.sequence, arguments);
  },
  restore: function restore() {
    this.table.restore();
    this.sequence.restore();
  },
  populate: function populate(items, header, crossItems, crossHeader) {
    var o = this.options;

    if (items) {
      o.items = items;
    }

    if (header) {
      o.header = header;
    }

    if (crossItems) {
      o.crossItems = crossItems;
    }

    if (crossHeader) {
      o.crossHeader = crossHeader;
    }

    this._populate();

    this.table.populate.apply(this.table, arguments);
    this.sequence.populate.apply(this.sequence, arguments);
    this.sequence.setVerticalScroll(this.table.getVerticalScroll());
  },
  destroy: function destroy() {
    this.table.destroy();
    BI.SequenceTable.superclass.destroy.apply(this, arguments);
  }
});
BI.shortcut("bi.sequence_table", BI.SequenceTable);

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var Widget = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-spread-sequence-grid-table",
      el: {},
      isNeedResize: true,
      // 是否需要调整列宽
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为tree时生效
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      headerCellStyleGetter: BI.emptyFn,
      summaryCellStyleGetter: BI.emptyFn,
      sequenceCellStyleGetter: BI.emptyFn,
      sequenceHeaderCreator: BI.emptyFn,
      sequenceSummaryText: BI.i18nText("BI-Summary_Values"),
      header: [],
      items: [],
      showSequence: false,
      startSequence: 1,
      // 开始的序号
      seqWidth: 60
    },
    _getVDeep: function _getVDeep() {
      return this.options.crossHeader.length; // 纵向深度
    },
    _getHDeep: function _getHDeep() {
      var o = this.options;
      return Math.max(o.mergeCols.length, o.freezeCols.length, BI.TableTree.maxDeep(o.items) - 1);
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.contextLayout = BI.createWidget({
        type: "bi.vertical",
        element: this,
        scrolly: false,
        scrollable: true,
        items: []
      });
      this.header = this._getHeader();
      this.items = this._getItems();

      if (o.header.length > 0 || o.items.length > 0) {
        this._populate();
      }
    },
    _getFreezeColLength: function _getFreezeColLength() {
      var o = this.options;
      return o.isNeedFreeze === true ? BI.clamp(o.freezeCols.length, 0, o.columnSize.length) : 0;
    },
    _getFreezeHeaderHeight: function _getFreezeHeaderHeight() {
      var o = this.options;
      return o.header.length * o.headerRowSize;
    },
    _getActualItems: function _getActualItems() {
      var o = this.options;
      return o.items;
    },
    _getHeader: function _getHeader() {
      var o = this.options;
      var rightHeader = [];
      BI.each(o.header, function (i, cols) {
        rightHeader[i] = [];
        BI.each(cols, function (j, col) {
          var cell = {
            type: "bi.grid_table_cell",
            extraCls: (i === 0 ? "first-row" : "") + (j === 0 ? " first-col" : ""),
            cell: col
          };
          rightHeader[i].push(cell);
        });
      });
      return rightHeader;
    },
    _getItems: function _getItems() {
      var o = this.options;
      var rightItems = [];
      var firstRowTopLine = !(o.header && o.header.length > 0);
      BI.each(this._getActualItems(), function (i, cols) {
        rightItems[i] = [];
        BI.each(cols, function (j, col) {
          var cell;

          if (o.customCell) {
            col && (col.firstRowTopLine = firstRowTopLine);
            cell.extraCls = (i === 0 ? "first-row" : "") + (j === 0 ? " first-col" : "");
            cell = col;
          } else {
            cell = {
              type: "bi.grid_table_cell",
              cell: col,
              extraCls: (i === 0 ? "first-row" : "") + (j === 0 ? " first-col" : ""),
              firstRowTopLine: firstRowTopLine
            };
          }

          rightItems[i].push(cell);
        });
      });
      return rightItems;
    },
    _populateTable: function _populateTable() {
      var self = this,
          o = this.options;
      var regionSize = this.getRegionSize(),
          totalLeftColumnSize = 0,
          totalRightColumnSize = 0,
          totalColumnSize = 0,
          summaryColumnSizeArray = [];

      var freezeColLength = this._getFreezeColLength();

      BI.each(o.columnSize, function (i, size) {
        if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
          totalLeftColumnSize += size;
        } else {
          totalRightColumnSize += size;
        }

        totalColumnSize += size;

        if (i === 0) {
          summaryColumnSizeArray[i] = size;
        } else {
          summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
        }
      });
      this.contextLayout.populate(BI.map(this.header, function (i, lists) {
        var headerRow = {
          type: "bi.vertical_adapt",
          items: BI.map(lists, function (j, item) {
            return BI.extend({
              width: o.columnSize[j],
              height: o.headerRowSize
            }, item);
          })
        };
        return o.showSequence ? {
          type: "bi.vertical_adapt",
          items: [{
            type: "bi.table_style_cell",
            text: BI.i18nText("BI-Number_Index"),
            width: o.seqWidth,
            height: o.headerRowSize,
            styleGetter: o.headerCellStyleGetter,
            _store: o.tableStyleCellStoreGetter
          }, headerRow]
        } : headerRow;
      }).concat(BI.map(this.items, function (i, lists) {
        var row = {
          type: "bi.vertical_adapt",
          verticalAlign: "stretch",
          items: BI.map(lists, function (j, item) {
            return BI.extend({
              width: o.columnSize[j],
              height: o.rowSize
            }, item);
          })
        };
        return o.showSequence ? {
          type: "bi.vertical_adapt",
          verticalAlign: "stretch",
          items: [{
            type: "bi.table_style_cell",
            cls: "sequence-table-title-cell",
            width: o.seqWidth,
            styleGetter: function (key) {
              return function () {
                return o.sequenceCellStyleGetter(key);
              };
            }(i),
            text: i + 1,
            _store: o.tableStyleCellStoreGetter
          }, row]
        } : row;
      })));
    },
    _populate: function _populate() {
      this._populateTable();
    },
    getRegionSize: function getRegionSize() {
      var o = this.options;
      var regionSize = o.regionColumnSize[0] || 0;

      if (o.isNeedFreeze === false || o.freezeCols.length === 0) {
        return 0;
      }

      if (!regionSize) {
        BI.each(o.freezeCols, function (i, col) {
          regionSize += o.columnSize[col];
        });
      }

      return regionSize;
    },
    setVerticalScroll: function setVerticalScroll(scrollTop) {},
    setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {},
    setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {},
    getVerticalScroll: function getVerticalScroll() {},
    getLeftHorizontalScroll: function getLeftHorizontalScroll() {},
    getRightHorizontalScroll: function getRightHorizontalScroll() {},
    setColumnSize: function setColumnSize(columnSize) {
      this.options.columnSize = columnSize;
      this._isNeedDigest = true;
    },
    setRegionColumnSize: function setRegionColumnSize(regionColumnSize) {
      this.options.regionColumnSize = regionColumnSize;
      this._isNeedDigest = true;
    },
    getColumnSize: function getColumnSize() {
      return this.options.columnSize;
    },
    getRegionColumnSize: function getRegionColumnSize() {
      return this.options.regionColumnSize;
    },
    populate: function populate(items, header) {
      var headerChanged = this.options.header !== header;
      var itemsChanged = this.options.items !== items;

      if (header && headerChanged) {
        this.options.header = header;
      }

      if (items && itemsChanged) {
        this.options.items = items;
      }

      if (items && itemsChanged) {
        this.items = this._getItems();
      }

      if (header && headerChanged) {
        this.header = this._getHeader();
      }

      this._populate();
    },
    restore: function restore() {}
  });
  BI.shortcut("bi.spread_sequence_grid_table", Widget);
}();

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var Widget = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-spread-sequence-layer-tree-table",
      el: {},
      isNeedResize: true,
      // 是否需要调整列宽
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为tree时生效
      isNeedMerge: true,
      // 是否需要合并单元格
      mergeCols: [],
      mergeRule: BI.emptyFn,
      isNeedMergeCol: true,
      // 是否横向合并
      isNeedMergeRow: true,
      // 是否纵向合并
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      headerCellStyleGetter: BI.emptyFn,
      summaryCellStyleGetter: BI.emptyFn,
      sequenceCellStyleGetter: BI.emptyFn,
      // 传给汇总、序号单元格的store，能在单元格绘制时使用上下文中的cssScale
      tableStyleCellStoreGetter: null,
      sequenceHeaderCreator: BI.emptyFn,
      sequenceSummaryText: BI.i18nText("BI-Summary_Values"),
      header: [],
      items: [],
      // 交叉表头
      crossHeader: [],
      crossItems: [],
      // 汇总行位置
      summaryText: BI.i18nText("BI-Summary_Values"),
      rowPosition: "bottom",
      colPosition: "right",
      showInnerSummary: false,
      showSequence: false,
      startSequence: 1,
      // 开始的序号
      seqWidth: 60
    },
    _getVDeep: function _getVDeep() {
      return this.options.crossHeader.length; // 纵向深度
    },
    _getHDeep: function _getHDeep() {
      var o = this.options;
      return Math.max(o.mergeCols.length, o.freezeCols.length, BI.TableTree.maxDeep(o.items) - 1);
    },
    _createHeader: function _createHeader(vDeep) {
      var self = this,
          o = this.options;
      var header = o.header || [],
          crossHeader = o.crossHeader || [];
      var items = BI.isEmpty(header) ? BI.TableTree.formatCrossItems4Special(o.crossItems, vDeep, o.headerCellStyleGetter, {
        sumPosition: this.options.colPosition === "right",
        summaryText: o.summaryText
      }) : BI.TableTree.formatCrossItems(o.crossItems, vDeep, o.headerCellStyleGetter, {
        sumPosition: this.options.colPosition === "right",
        summaryText: o.summaryText
      });
      var result = [];
      BI.each(items, function (row, node) {
        var c = [crossHeader[row]];
        result.push(c.concat(node || []));
      });
      var rowHeaderCreator = BI.isFunction(o.rowHeaderCreator) ? o.rowHeaderCreator() : o.rowHeaderCreator;

      if (header && header.length > 0) {
        var newHeader = this._formatColumns(header);

        var deep = this._getHDeep();

        if (deep <= 0) {
          newHeader.unshift(rowHeaderCreator || {
            type: "bi.table_style_cell",
            text: BI.i18nText("BI-Row_Header"),
            styleGetter: o.headerCellStyleGetter,
            _store: o.tableStyleCellStoreGetter
          });
        } else {
          newHeader[0] = rowHeaderCreator || {
            type: "bi.table_style_cell",
            text: BI.i18nText("BI-Row_Header"),
            styleGetter: o.headerCellStyleGetter,
            _store: o.tableStyleCellStoreGetter
          };
        }

        result.push(newHeader);
      }

      return result;
    },
    _formatItems: function _formatItems(nodes, header, deep) {
      var self = this,
          o = this.options;
      var result = [];

      function track(node, layer) {
        node.type || (node.type = "bi.layer_tree_table_cell");
        node.layer = layer;
        var next = [node];
        next = next.concat(node.values || []);

        if (next.length > 0) {
          result.push(next);
        }

        if (BI.isNotEmptyArray(node.children)) {
          BI.each(node.children, function (index, child) {
            track(child, layer + 1);
          });
        }
      }

      BI.each(nodes, function (i, node) {
        BI.each(node.children, function (j, c) {
          track(c, 0);
        });

        if (BI.isArray(node.values)) {
          var next = [{
            type: "bi.table_style_cell",
            text: o.summaryText,
            title: o.summaryText,
            styleGetter: function styleGetter() {
              return o.summaryCellStyleGetter(true, BI.get(node, ["children", 0, "dId"]));
            },
            _store: o.tableStyleCellStoreGetter
          }].concat(node.values);
          o.rowPosition === "bottom" ? result.push(next) : result.unshift(next);
        }
      });
      return BI.DynamicSummaryTreeTable.formatSummaryItems(result, header, o.crossItems, 1);
    },
    _formatColumns: function _formatColumns(columns, deep) {
      if (BI.isNotEmptyArray(columns)) {
        deep = deep || this._getHDeep();
        return columns.slice(Math.max(0, deep - 1));
      }

      return columns;
    },
    _formatFreezeCols: function _formatFreezeCols() {
      if (this.options.freezeCols.length > 0) {
        return [0];
      }

      return [];
    },
    _formatMergeCols: function _formatMergeCols() {
      if (this.options.mergeCols.length > 0) {
        return [0];
      }

      return [];
    },
    _formatColumnSize: function _formatColumnSize(columnSize, deep) {
      if (columnSize.length <= 0) {
        return [];
      }

      var result = [0];
      deep = deep || this._getHDeep();
      BI.each(columnSize, function (i, size) {
        if (i < deep) {
          result[0] += size;
          return;
        }

        result.push(size);
      });
      return result;
    },
    _digest: function _digest() {
      var o = this.options;

      var deep = this._getHDeep();

      var vDeep = this._getVDeep();

      var header = this._createHeader(vDeep);

      var data = this._formatItems(o.items, header, deep);

      var columnSize = o.columnSize.slice();
      var minColumnSize = o.minColumnSize.slice();
      var maxColumnSize = o.maxColumnSize.slice();
      BI.removeAt(columnSize, data.deletedCols);
      BI.removeAt(minColumnSize, data.deletedCols);
      BI.removeAt(maxColumnSize, data.deletedCols);
      return {
        header: data.header,
        items: data.items,
        columnSize: this._formatColumnSize(columnSize, deep),
        minColumnSize: this._formatColumns(minColumnSize, deep),
        maxColumnSize: this._formatColumns(maxColumnSize, deep),
        freezeCols: this._formatFreezeCols(),
        mergeCols: this._formatMergeCols()
      };
    },
    render: function render() {
      var self = this,
          o = this.options;
      this._width = 0;
      this._height = 0;

      var data = this._digest();

      this.topRightCollection = BI.createWidget({
        type: "bi.collection_view",
        cellSizeAndPositionGetter: function cellSizeAndPositionGetter(index) {
          return self.topRightItems[index];
        }
      });
      this.bottomRight = BI.createWidget({
        type: "bi.vertical",
        scrolly: false
      });
      this.contextLayout = BI.createWidget({
        type: "bi.vertical",
        element: this,
        scrolly: false,
        scrollable: true,
        items: [o.showSequence ? {
          type: "bi.vertical_adapt",
          items: [BI.extend({
            type: "bi.table_style_cell",
            text: BI.i18nText("BI-Number_Index"),
            width: o.seqWidth,
            height: this._getFreezeHeaderHeight(data.header),
            styleGetter: o.headerCellStyleGetter,
            ref: function ref(_ref) {
              self.headerSeq = _ref;
            },
            _store: o.tableStyleCellStoreGetter
          }, o.sequenceHeaderCreator()), this.topRightCollection]
        } : {
          el: this.topRightCollection
        }, {
          el: this.bottomRight
        }]
      });

      if (data.header.length > 0 || data.items.length > 0) {
        this._digestTable(data.header, data.items, data);

        this._populate(data.header, data.items, data);
      }
    },
    populate: function populate(items, header, crossItems, crossHeader) {
      var o = this.options;

      if (items) {
        o.items = items;
      }

      if (header) {
        o.header = header;
      }

      if (crossItems) {
        o.crossItems = crossItems;
      }

      if (crossHeader) {
        o.crossHeader = crossHeader;
      }

      var data = this._digest(); // 表头所展示“序号”高度由headers决定，render的时候不一定传了header, 在populate的时候setHeight


      this.headerSeq && this.headerSeq.setHeight(this._getFreezeHeaderHeight(data.header));
      items = data.items;
      header = data.header;

      if (items && items !== this.options.items) {
        this._isNeedDigest = true;
        this.options.items = items;

        this._restore();
      }

      if (header && header !== this.options.header) {
        this._isNeedDigest = true;
        this.options.header = header;

        this._restore();
      }

      this._populate(header, items, data);
    },
    _getFreezeHeaderHeight: function _getFreezeHeaderHeight(header) {
      var o = this.options;
      return header.length * o.headerRowSize;
    },
    _populateTable: function _populateTable(header, items, data) {
      var self = this,
          o = this.options;
      var regionSize = this.getRegionSize(),
          totalLeftColumnSize = 0,
          totalRightColumnSize = 0,
          totalColumnSize = 0,
          summaryColumnSizeArray = [];
      BI.each(o.columnSize, function (i, size) {
        if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
          totalLeftColumnSize += size;
        } else {
          totalRightColumnSize += size;
        }

        totalColumnSize += size;

        if (i === 0) {
          summaryColumnSizeArray[i] = size;
        } else {
          summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
        }
      }); // var otlw = regionSize;
      // var otlh = this._getFreezeHeaderHeight(header);
      // var otrw = this._width - regionSize;
      // var otrh = this._getFreezeHeaderHeight(header);
      // var oblw = regionSize;
      // var oblh = this._height - otlh;
      // var obrw = this._width - regionSize;
      // var obrh = this._height - otrh;
      // var scrollBarSize = BI.DOM.getScrollWidth();
      // var tlw = otlw + scrollBarSize;
      // var tlh = otlh + scrollBarSize;
      // var trw = otrw + scrollBarSize;
      // var trh = otrh + scrollBarSize;
      // var blw = oblw + scrollBarSize;
      // var blh = oblh + scrollBarSize;
      // var brw = obrw + scrollBarSize;
      // var brh = obrh + scrollBarSize;
      //
      // var digest = function (el) {
      //     el.element.css({
      //         overflow: "scroll",
      //         overflowX: "scroll",
      //         overflowY: "scroll"
      //     });
      // };
      // this.topLeft.setWidth(otlw);
      // this.topLeft.setHeight(otlh);
      // this.topRight.setWidth(otrw);
      // this.topRight.setHeight(otrh);
      // this.bottomLeft.setWidth(oblw);
      // this.bottomLeft.setHeight(oblh);
      // this.bottomRight.setWidth(obrw);
      // this.bottomRight.setHeight(obrh);
      // this.topLeftCollection.setWidth(tlw);
      // this.topLeftCollection.setHeight(tlh);

      this.topRightCollection.setWidth(totalColumnSize);
      this.topRightCollection.setHeight(this._getFreezeHeaderHeight(header)); // this.bottomLeftCollection.setWidth(blw);
      // this.bottomLeftCollection.setHeight(blh);
      // this.bottomRightCollection.setWidth(brw);
      // this.bottomRightCollection.setHeight(brh);
      // digest(this.topLeftCollection);
      // digest(this.topRightCollection);
      // digest(this.bottomLeftCollection);
      // digest(this.bottomRightCollection);
      // var items = this.contextLayout.attr("items");
      // items[1].left = regionSize;
      // items[1].top = this._getFreezeHeaderHeight(header);
      // items[3].left = regionSize;
      // items[3].top = this._getFreezeHeaderHeight();
      // this.contextLayout.attr("items", items);
      // this.contextLayout.resize();

      var leftHeader = [],
          rightHeader = [],
          leftItems = [],
          rightItems = [];

      var run = function run(positions, items, rendered, firstRowTopLine, firstColumnLeftLine) {
        BI.each(positions, function (i, item) {
          if (!firstRowTopLine && o.customCell) {
            items[item.row][item.col]._rowIndex = item.row;
            items[item.row][item.col]._columnIndex = item.col;
            items[item.row][item.col].firstRowTopLine = firstRowTopLine;
            items[item.row][item.col].firstColumnLeftLine = firstColumnLeftLine;
            rendered.push(items[item.row][item.col]);
            return;
          }

          var cell = {
            type: "bi.collection_table_cell",
            cell: items[item.row][item.col],
            _rowIndex: item.row,
            _columnIndex: item.col,
            firstRowTopLine: firstRowTopLine,
            firstColumnLeftLine: firstColumnLeftLine
          };
          rendered.push(cell);
        });
      }; // run(this.topLeftItems, header, leftHeader, true, true);


      run(this.topRightItems, header, rightHeader, true, true); // run(this.bottomLeftItems, this._getActualItems(), leftItems, this.topRightItems.length <= 0, true);
      // run(this.bottomRightItems, this._getActualItems(), rightItems, this.topRightItems.length <= 0, this.topLeftItems.length <= 0);
      // this.topLeftCollection._populate(leftHeader);

      this.topRightCollection._populate(rightHeader); // this.bottomLeftCollection._populate(leftItems);
      // this.bottomRightCollection._populate(rightItems);


      this.bottomRight.populate(this.bottomRightItems);
    },
    _digestTable: function _digestTable(header, items, data) {
      var o = this.options;
      var freezeColLength = o.isNeedMerge === true ? BI.clamp(data.mergeCols.length, 0, data.columnSize.length) : 0; // // 如果表头位置不够，取消表头冻结
      // if (this._getFreezeHeaderHeight() <= 0) {
      //     this.topLeftItems = [];
      //     this.topRightItems = [];
      //     this.bottomLeftItems = this._serialize(this._getActualItems(), 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols, BI.range(o.header.length));
      //     this.bottomRightItems = this._serialize(this._getActualItems(), freezeColLength, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols, BI.range(o.header.length));
      // } else {
      // this.topLeftItems = this._serialize(header, 0, freezeColLength, o.headerRowSize, o.columnSize, o.mergeCols);

      this.topRightItems = BI.CollectionTable.serialize(header, 0, data.columnSize.length, o.headerRowSize, data.columnSize, true, [], o.mergeRule); // this.bottomLeftItems = this._serialize(o.items, 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols);
      // this.bottomRightItems = this._serialize(o.items, freezeColLength, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols);
      // }

      this.bottomRightItems = this._serializeItems(items, 0, freezeColLength, o.rowSize, data.columnSize, data.mergeCols);
    },
    _serializeItems: function _serializeItems(items, startCol, endCol, rowHeight, columnSize, mergeCols, mergeRows) {
      mergeCols = mergeCols || [];
      mergeRows = mergeRows || [];
      var self = this,
          o = this.options;
      var count = o.startSequence;
      var result = [],
          cache = {},
          preCol = {},
          preRow = {},
          map = {};
      var summaryColumnSize = [];

      for (var i = startCol; i < endCol; i++) {
        if (i === startCol) {
          summaryColumnSize[i] = columnSize[i];
        } else {
          summaryColumnSize[i] = summaryColumnSize[i - 1] + columnSize[i];
        }
      }

      var mergeRow = function mergeRow(i, j) {
        preCol[j]._height += rowHeight;

        preCol[j].__mergeRows.push(i); //指向前一列


        preRow[i] = preCol[j];
      };

      var mergeCol = function mergeCol(i, j) {
        preRow[i]._width += columnSize[j];

        preRow[i].__mergeCols.push(j);
      };

      var createOneEl = function createOneEl(r, c) {
        var width = columnSize[c];
        var height = rowHeight;
        map[r][c]._row = r;
        map[r][c]._col = c;
        map[r][c]._width = width;
        map[r][c]._height = height;
        var el = {
          x: summaryColumnSize[c] - columnSize[c],
          y: +r * rowHeight,
          item: map[r][c]
        };
        preCol[c] = map[r][c];
        preCol[c].__mergeRows = [r];
        preRow[r] = map[r][c];
        preRow[r].__mergeCols = [c];
        result.push(el);
      };

      BI.each(items, function (i, cols) {
        for (var j = startCol; j < endCol; j++) {
          if (!cache[i]) {
            cache[i] = {};
          }

          if (!map[i]) {
            map[i] = {};
          }

          cache[i][j] = cols[j];
          map[i][j] = {};

          if (mergeCols === true || mergeCols.indexOf(j) > -1 || mergeRows === true || mergeRows.indexOf(i) > -1) {
            if (i === 0 && j === startCol) {
              createOneEl(0, startCol);
            } else if (j === startCol && i > 0) {
              var isNeedMergeRow = o.mergeRule(cache[i][j], cache[i - 1][j]);

              if (isNeedMergeRow === true) {
                mergeRow(i, j);
                preRow[i] = preCol[j];
              } else {
                createOneEl(i, j);
              }
            } else if (i === 0 && j > startCol) {
              var isNeedMergeCol = o.mergeRule(cache[i][j], cache[i][j - 1]);

              if (isNeedMergeCol === true) {
                mergeCol(i, j);
                preCol[j] = preRow[i];
              } else {
                createOneEl(i, j);
              }
            } else {
              var isNeedMergeRow = o.mergeRule(cache[i][j], cache[i - 1][j]);
              var isNeedMergeCol = o.mergeRule(cache[i][j], cache[i][j - 1]);

              if (isNeedMergeCol && isNeedMergeRow) {
                continue; // mergeRow(i, j);//优先合并列
              }

              if (isNeedMergeCol) {
                mergeCol(i, j);
              }

              if (isNeedMergeRow) {
                mergeRow(i, j);
              }

              if (!isNeedMergeCol && !isNeedMergeRow) {
                createOneEl(i, j);
              }
            }
          } else {
            createOneEl(i, j);
          }
        }
      }); // 构建父子之间的关系

      var stacks = [],
          lastLayer;
      BI.each(result, function (i, item) {
        var node = items[item.item._row][item.item._col];

        if (!node.layer || node.layer <= lastLayer) {
          stacks = stacks.slice(0, node.layer || 0);
        }

        item.parent = stacks[stacks.length - 1];

        if (!node.children || node.children.length === 0) {
          item.isLastNode = true;
          return;
        }

        stacks.push(item);
        lastLayer = node.layer;
      });
      var tree = [];
      var prefix = BI.UUID();
      BI.each(result, function (i, item) {
        // 序号显示逐行递增，但最后一行的序号样式和文本需要由summaryCellStyleGetter和summaryText决定
        var isSummarySeq = items.length - 1 === item.item._row;
        var layout = {
          type: "bi.vertical",
          scrolly: false,
          items: [{
            type: "bi.layout",
            tagName: "input",
            cls: "spread-sequence-table-checkbox",
            invisible: true,
            attributes: {
              type: "checkbox",
              id: prefix + "-" + item.item._row + "-" + item.item._col
            }
          }, !items[item.item._row][item.item._col].children ? {
            type: "bi.layout"
          } : {
            type: "bi.vertical_adapt",
            cls: "summary-line",
            verticalAlign: "stretch",
            items: [!item.parent && o.showSequence === true ? {
              type: "bi.table_style_cell",
              cls: "sequence-table-title-cell",
              width: o.seqWidth,
              styleGetter: function (key) {
                return function () {
                  return isSummarySeq ? o.summaryCellStyleGetter(true) : o.sequenceCellStyleGetter(key);
                };
              }(count),
              text: isSummarySeq ? o.summaryText : count,
              _store: o.tableStyleCellStoreGetter
            } : {
              type: "bi.layout"
            }, {
              el: createNode(item, {
                width: summaryColumnSize[endCol - 1] - (item.item._col > 0 ? summaryColumnSize[item.item._col - 1] : 0) // height: o.rowSize

              }, true)
            }, getLeaves(getSummaryRow(item.item._row, item.item._col))]
          }, {
            type: "bi.vertical_adapt",
            cls: "expand-line",
            verticalAlign: "stretch",
            items: [!item.parent && o.showSequence === true ? {
              type: "bi.table_style_cell",
              cls: "sequence-table-title-cell",
              width: o.seqWidth,
              styleGetter: function (key) {
                return function () {
                  return isSummarySeq ? o.summaryCellStyleGetter(true) : o.sequenceCellStyleGetter(key);
                };
              }(count),
              text: isSummarySeq ? o.summaryText : count++,
              _store: o.tableStyleCellStoreGetter
            } : {
              type: "bi.layout"
            }, {
              type: "bi.vertical",
              items: [{
                el: {
                  type: "bi.vertical_adapt",
                  verticalAlign: "stretch",
                  items: [{
                    el: createNode(item)
                  }, getLeaves(getSummaryRow(item.item._row, item.item._col))]
                }
              }, {
                type: "bi.vertical",
                scrolly: false,
                items: []
              }]
            }]
          }]
        };
        item.layout = layout;

        if (item.parent) {
          getNext(item.parent).push(layout);
        }
      });

      function createNode(item, options, isPlus) {
        var node = BI.extend({
          type: "bi.label",
          textAlign: "left",
          lgap: 25,
          width: item.item._width,
          // height: item.item._height,
          _columnIndex: item.item._col,
          _rowIndex: item.item._row,
          firstRowTopLine: false,
          firstColumnLeftLine: true,
          extraCls: "collection-cell" + (item.item._row === 0 ? " first-row" : "") + (item.item._col === 0 ? " first-col" : ""),
          mounted: function mounted() {
            if (!item.isLastNode) {
              BI.createWidget({
                type: "bi.absolute_vertical_adapt",
                element: this,
                lgap: 6,
                items: [{
                  type: "bi.icon_button",
                  tagName: "label",
                  attributes: {
                    "for": prefix + "-" + item.item._row + "-" + item.item._col
                  },
                  cls: (isPlus ? "plus-font" : "minus-font") + " icon-size-12",
                  iconWidth: 12,
                  iconHeight: 12,
                  width: 12,
                  height: 12
                }]
              });
            }
          } // height: item.item._height

        }, options, items[item.item._row][item.item._col]);
        return node;
      }

      function getSummaryRow(i, j) {
        var item = map[i][j];

        if (o.rowPosition === "bottom") {
          return i + item.__mergeRows.length - 1;
        } else {
          return i;
        }
      }

      function getNext(item) {
        return item.layout.items[2].items[1].items[1].items;
      }

      function getLeaves(row) {
        var leaves = items[row].slice(endCol);
        return {
          type: "bi.vertical_adapt",
          items: BI.map(leaves, function (i, leaf) {
            return BI.extend({
              type: "bi.label",
              width: columnSize[endCol + i],
              height: rowHeight,
              extraCls: "collection-cell"
            }, leaf);
          })
        };
      }

      BI.each(result, function (i, item) {
        if (!item.parent) {
          tree.push(item.layout);
        }
      });
      return tree;
    },
    _populate: function _populate(header, items, data) {
      if (this._isNeedDigest === true) {
        this._digestTable(header, items, data);
      }

      this._isNeedDigest = false;

      this._populateTable(header, items, data);
    },
    getRegionSize: function getRegionSize() {
      var o = this.options;
      var regionSize = o.regionColumnSize[0] || 0;

      if (o.isNeedFreeze === false || o.freezeCols.length === 0) {
        return 0;
      }

      if (!regionSize) {
        BI.each(o.freezeCols, function (i, col) {
          regionSize += o.columnSize[col];
        });
      }

      return regionSize;
    },
    setVerticalScroll: function setVerticalScroll(scrollTop) {},
    setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {},
    setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {},
    getVerticalScroll: function getVerticalScroll() {},
    getLeftHorizontalScroll: function getLeftHorizontalScroll() {},
    getRightHorizontalScroll: function getRightHorizontalScroll() {},
    setColumnSize: function setColumnSize(columnSize) {
      this._isNeedDigest = true;
      this.options.columnSize = columnSize;
    },
    setRegionColumnSize: function setRegionColumnSize(regionColumnSize) {
      this._isNeedDigest = true;
      this.options.regionColumnSize = regionColumnSize;
    },
    getColumnSize: function getColumnSize() {
      return this.options.columnSize;
    },
    getRegionColumnSize: function getRegionColumnSize() {
      return this.options.regionColumnSize;
    },
    _restore: function _restore() {
      // this.topLeftCollection.restore();
      this.topRightCollection.restore(); // this.bottomLeftCollection.restore();
      // this.bottomRightCollection.restore();
    },
    restore: function restore() {
      this._restore();
    }
  });
  BI.shortcut("bi.spread_sequence_layer_tree_table", Widget);
}();

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var Widget = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-spread-sequence-list-table",
      el: {},
      isNeedResize: true,
      // 是否需要调整列宽
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为tree时生效
      isNeedMerge: true,
      // 是否需要合并单元格
      mergeCols: [],
      mergeRule: BI.emptyFn,
      isNeedMergeCol: true,
      // 是否横向合并
      isNeedMergeRow: true,
      // 是否纵向合并
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      headerCellStyleGetter: BI.emptyFn,
      summaryCellStyleGetter: BI.emptyFn,
      sequenceCellStyleGetter: BI.emptyFn,
      // 传给汇总、序号单元格的store，能在单元格绘制时使用上下文中的cssScale
      tableStyleCellStoreGetter: null,
      sequenceHeaderCreator: BI.emptyFn,
      sequenceSummaryText: BI.i18nText("BI-Summary_Values"),
      header: [],
      items: [],
      // 交叉表头
      crossHeader: [],
      crossItems: [],
      // 汇总行位置
      summaryText: BI.i18nText("BI-Summary_Values"),
      rowPosition: "bottom",
      colPosition: "right",
      showInnerSummary: false,
      showSequence: false,
      startSequence: 1,
      // 开始的序号
      seqWidth: 60
    },
    _getVDeep: function _getVDeep() {
      return this.options.crossHeader.length; // 纵向深度
    },
    _getHDeep: function _getHDeep() {
      var o = this.options;
      return Math.max(o.mergeCols.length, o.freezeCols.length, BI.TableTree.maxDeep(o.items) - 1);
    },
    render: function render() {
      var self = this,
          o = this.options;
      this._width = 0;
      this._height = 0;

      var data = this._digest();

      this.topRightCollection = BI.createWidget({
        type: "bi.collection_view",
        cellSizeAndPositionGetter: function cellSizeAndPositionGetter(index) {
          return self.topRightItems[index];
        }
      });
      this.bottomRight = BI.createWidget({
        type: "bi.vertical",
        scrolly: false
      });
      this.contextLayout = BI.createWidget({
        type: "bi.vertical",
        element: this,
        scrolly: false,
        scrollable: true,
        items: [o.showSequence ? {
          type: "bi.vertical_adapt",
          items: [BI.extend({
            type: "bi.table_style_cell",
            text: BI.i18nText("BI-Number_Index"),
            width: o.seqWidth,
            height: this._getFreezeHeaderHeight(data.header),
            styleGetter: o.headerCellStyleGetter,
            ref: function ref(_ref) {
              self.headerSeq = _ref;
            },
            _store: o.tableStyleCellStoreGetter
          }, o.sequenceHeaderCreator()), this.topRightCollection]
        } : {
          el: this.topRightCollection
        }, {
          el: this.bottomRight
        }]
      });

      if (data.header.length > 0 || data.items.length > 0) {
        this._digestTable(data.header, data.items);

        this._populate(data.header, data.items);
      }
    },
    _digest: function _digest() {
      var o = this.options;

      var deep = this._getHDeep();

      var vDeep = this._getVDeep();

      var header = BI.TableTree.formatHeader(o.header, o.crossHeader, o.crossItems, deep, vDeep, o.headerCellStyleGetter, {
        sumPosition: o.colPosition === "right",
        summaryText: o.summaryText
      });
      var items = BI.DynamicSummaryTreeTable.formatHorizontalItems(o.items, deep, false, o.summaryCellStyleGetter, {
        sumPosition: o.rowPosition === "bottom",
        summaryText: o.summaryText,
        isNeedMergeRow: o.isNeedMergeRow,
        tableStyleCellStoreGetter: o.tableStyleCellStoreGetter
      });
      var data = BI.DynamicSummaryTreeTable.formatSummaryItems(items, header, o.crossItems, deep);
      var columnSize = o.columnSize.slice();
      var minColumnSize = o.minColumnSize.slice();
      var maxColumnSize = o.maxColumnSize.slice();
      BI.removeAt(columnSize, data.deletedCols);
      BI.removeAt(minColumnSize, data.deletedCols);
      BI.removeAt(maxColumnSize, data.deletedCols);
      return {
        header: data.header,
        items: data.items,
        columnSize: columnSize,
        minColumnSize: minColumnSize,
        maxColumnSize: maxColumnSize
      };
    },
    populate: function populate(items, header, crossItems, crossHeader) {
      var o = this.options;

      if (items) {
        o.items = items;
      }

      if (header) {
        o.header = header;
      }

      if (crossItems) {
        o.crossItems = crossItems;
      }

      if (crossHeader) {
        o.crossHeader = crossHeader;
      }

      var data = this._digest(); // 表头所展示“序号”高度由headers决定，render的时候不一定传了header, 在populate的时候setHeight


      this.headerSeq && this.headerSeq.setHeight(this._getFreezeHeaderHeight(data.header));
      this.setColumnSize(data.columnSize);
      o.minColumnSize = data.minColumnSize;
      o.maxColumnSize = data.maxColumnSize;
      items = data.items;
      header = data.header;

      if (items && items !== this.options.items) {
        this._isNeedDigest = true;
        this.options.items = items;

        this._restore();
      }

      if (header && header !== this.options.header) {
        this._isNeedDigest = true;
        this.options.header = header;

        this._restore();
      }

      this._populate(header, items);
    },
    _getFreezeColLength: function _getFreezeColLength() {
      var o = this.options;
      return o.isNeedMerge === true ? BI.clamp(o.mergeCols.length, 0, o.columnSize.length) : 0;
    },
    _getFreezeHeaderHeight: function _getFreezeHeaderHeight(header) {
      var o = this.options;
      return header.length * o.headerRowSize;
    },
    _populateTable: function _populateTable(header, items) {
      var self = this,
          o = this.options;
      var regionSize = this.getRegionSize(),
          totalLeftColumnSize = 0,
          totalRightColumnSize = 0,
          totalColumnSize = 0,
          summaryColumnSizeArray = [];
      BI.each(o.columnSize, function (i, size) {
        if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
          totalLeftColumnSize += size;
        } else {
          totalRightColumnSize += size;
        }

        totalColumnSize += size;

        if (i === 0) {
          summaryColumnSizeArray[i] = size;
        } else {
          summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
        }
      }); // var otlw = regionSize;
      // var otlh = this._getFreezeHeaderHeight(header);
      // var otrw = this._width - regionSize;
      // var otrh = this._getFreezeHeaderHeight(header);
      // var oblw = regionSize;
      // var oblh = this._height - otlh;
      // var obrw = this._width - regionSize;
      // var obrh = this._height - otrh;
      // var scrollBarSize = BI.DOM.getScrollWidth();
      // var tlw = otlw + scrollBarSize;
      // var tlh = otlh + scrollBarSize;
      // var trw = otrw + scrollBarSize;
      // var trh = otrh + scrollBarSize;
      // var blw = oblw + scrollBarSize;
      // var blh = oblh + scrollBarSize;
      // var brw = obrw + scrollBarSize;
      // var brh = obrh + scrollBarSize;
      //
      // var digest = function (el) {
      //     el.element.css({
      //         overflow: "scroll",
      //         overflowX: "scroll",
      //         overflowY: "scroll"
      //     });
      // };
      // this.topLeft.setWidth(otlw);
      // this.topLeft.setHeight(otlh);
      // this.topRight.setWidth(otrw);
      // this.topRight.setHeight(otrh);
      // this.bottomLeft.setWidth(oblw);
      // this.bottomLeft.setHeight(oblh);
      // this.bottomRight.setWidth(obrw);
      // this.bottomRight.setHeight(obrh);
      // this.topLeftCollection.setWidth(tlw);
      // this.topLeftCollection.setHeight(tlh);

      this.topRightCollection.setWidth(totalColumnSize);
      this.topRightCollection.setHeight(this._getFreezeHeaderHeight(header)); // this.bottomLeftCollection.setWidth(blw);
      // this.bottomLeftCollection.setHeight(blh);
      // this.bottomRightCollection.setWidth(brw);
      // this.bottomRightCollection.setHeight(brh);
      // digest(this.topLeftCollection);
      // digest(this.topRightCollection);
      // digest(this.bottomLeftCollection);
      // digest(this.bottomRightCollection);
      // var items = this.contextLayout.attr("items");
      // items[1].left = regionSize;
      // items[1].top = this._getFreezeHeaderHeight(header);
      // items[3].left = regionSize;
      // items[3].top = this._getFreezeHeaderHeight();
      // this.contextLayout.attr("items", items);
      // this.contextLayout.resize();

      var leftHeader = [],
          rightHeader = [],
          leftItems = [],
          rightItems = [];

      var run = function run(positions, items, rendered, firstRowTopLine, firstColumnLeftLine) {
        BI.each(positions, function (i, item) {
          if (!firstRowTopLine && o.customCell) {
            items[item.row][item.col]._rowIndex = item.row;
            items[item.row][item.col]._columnIndex = item.col;
            items[item.row][item.col].firstRowTopLine = firstRowTopLine;
            items[item.row][item.col].firstColumnLeftLine = firstColumnLeftLine;
            rendered.push(items[item.row][item.col]);
            return;
          }

          var cell = {
            type: "bi.collection_table_cell",
            cell: items[item.row][item.col],
            _rowIndex: item.row,
            _columnIndex: item.col,
            firstRowTopLine: firstRowTopLine,
            firstColumnLeftLine: firstColumnLeftLine
          };
          rendered.push(cell);
        });
      }; // run(this.topLeftItems, header, leftHeader, true, true);


      run(this.topRightItems, header, rightHeader, true, true); // run(this.bottomLeftItems, this._getActualItems(), leftItems, this.topRightItems.length <= 0, true);
      // run(this.bottomRightItems, this._getActualItems(), rightItems, this.topRightItems.length <= 0, this.topLeftItems.length <= 0);
      // this.topLeftCollection._populate(leftHeader);

      this.topRightCollection._populate(rightHeader); // this.bottomLeftCollection._populate(leftItems);
      // this.bottomRightCollection._populate(rightItems);


      this.bottomRight.populate(this.bottomRightItems);
    },
    _digestTable: function _digestTable(header, items) {
      var o = this.options;

      var freezeColLength = this._getFreezeColLength(); // // 如果表头位置不够，取消表头冻结
      // if (this._getFreezeHeaderHeight() <= 0) {
      //     this.topLeftItems = [];
      //     this.topRightItems = [];
      //     this.bottomLeftItems = this._serialize(this._getActualItems(), 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols, BI.range(o.header.length));
      //     this.bottomRightItems = this._serialize(this._getActualItems(), freezeColLength, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols, BI.range(o.header.length));
      // } else {
      // this.topLeftItems = this._serialize(header, 0, freezeColLength, o.headerRowSize, o.columnSize, o.mergeCols);


      this.topRightItems = BI.CollectionTable.serialize(header, 0, o.columnSize.length, o.headerRowSize, o.columnSize, true, [], o.mergeRule); // this.bottomLeftItems = this._serialize(o.items, 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols);
      // this.bottomRightItems = this._serialize(o.items, freezeColLength, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols);
      // }

      this.bottomRightItems = this._serializeItems(items, 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols);
    },
    _serializeItems: function _serializeItems(items, startCol, endCol, rowHeight, columnSize, mergeCols, mergeRows) {
      mergeCols = mergeCols || [];
      mergeRows = mergeRows || [];
      var self = this,
          o = this.options;
      var count = o.startSequence;
      var result = [],
          cache = {},
          preCol = {},
          preRow = {},
          map = {};
      var summaryColumnSize = [];

      for (var i = startCol; i < endCol; i++) {
        if (i === startCol) {
          summaryColumnSize[i] = columnSize[i];
        } else {
          summaryColumnSize[i] = summaryColumnSize[i - 1] + columnSize[i];
        }
      }

      var mergeRow = function mergeRow(i, j) {
        preCol[j]._height += rowHeight;

        preCol[j].__mergeRows.push(i); //指向前一列


        preRow[i] = preCol[j];
      };

      var mergeCol = function mergeCol(i, j) {
        preRow[i]._width += columnSize[j];

        preRow[i].__mergeCols.push(j);
      };

      var createOneEl = function createOneEl(r, c) {
        var width = columnSize[c];
        var height = rowHeight;
        map[r][c]._row = r;
        map[r][c]._col = c;
        map[r][c]._width = width;
        map[r][c]._height = height;
        var el = {
          x: summaryColumnSize[c] - columnSize[c],
          y: +r * rowHeight,
          item: map[r][c],
          parent: preRow[r] && preRow[r].el
        };
        preCol[c] = map[r][c];
        preCol[c].__mergeRows = [r];
        preRow[r] = map[r][c];
        preRow[r].__mergeCols = [c];
        preRow[r].el = el;
        result.push(el);
      };

      BI.each(items, function (i, cols) {
        for (var j = startCol; j < endCol; j++) {
          if (!cache[i]) {
            cache[i] = {};
          }

          if (!map[i]) {
            map[i] = {};
          }

          cache[i][j] = cols[j];
          map[i][j] = {};

          if (mergeCols === true || mergeCols.indexOf(j) > -1 || mergeRows === true || mergeRows.indexOf(i) > -1) {
            if (i === 0 && j === startCol) {
              createOneEl(0, startCol);
            } else if (j === startCol && i > 0) {
              var isNeedMergeRow = o.mergeRule(cache[i][j], cache[i - 1][j]);

              if (isNeedMergeRow === true) {
                mergeRow(i, j);
                preRow[i] = preCol[j];
              } else {
                createOneEl(i, j);
              }
            } else if (i === 0 && j > startCol) {
              var isNeedMergeCol = o.mergeRule(cache[i][j], cache[i][j - 1]);

              if (isNeedMergeCol === true) {
                mergeCol(i, j);
                preCol[j] = preRow[i];
              } else {
                createOneEl(i, j);
              }
            } else {
              var isNeedMergeRow = o.mergeRule(cache[i][j], cache[i - 1][j]);
              var isNeedMergeCol = o.mergeRule(cache[i][j], cache[i][j - 1]);

              if (isNeedMergeCol && isNeedMergeRow) {
                continue; // mergeRow(i, j);//优先合并列
              }

              if (isNeedMergeCol) {
                mergeCol(i, j);
              }

              if (isNeedMergeRow) {
                mergeRow(i, j);
              }

              if (!isNeedMergeCol && !isNeedMergeRow) {
                createOneEl(i, j);
              }
            }
          } else {
            createOneEl(i, j);
          }
        }
      });
      var tree = [];
      var prefix = BI.UUID();
      BI.each(result, function (i, item) {
        var layout = {
          type: "bi.vertical",
          scrolly: false,
          items: [{
            type: "bi.layout",
            tagName: "input",
            cls: "spread-sequence-table-checkbox",
            invisible: true,
            attributes: {
              type: "checkbox",
              id: prefix + "-" + item.item._row + "-" + item.item._col
            }
          }, !items[item.item._row][item.item._col].children ? {
            type: "bi.layout"
          } : {
            type: "bi.vertical_adapt",
            verticalAlign: "stretch",
            cls: "summary-line",
            items: [{
              el: createNode(item, {
                width: summaryColumnSize[endCol - 1] - (item.item._col > 0 ? summaryColumnSize[item.item._col - 1] : 0) // height: o.rowSize

              }, true)
            }, getLeaves(getSummaryRow(item.item._row, item.item._col))]
          }, {
            type: "bi.vertical_adapt",
            verticalAlign: "stretch",
            cls: "expand-line",
            items: [{
              el: !item.parent && o.showSequence === true ? createNodes(item) : {
                type: "bi.vtape",
                width: item.item._width,
                scrolly: false,
                scrollable: false,
                items: createNodes(item)
              }
            }, {
              type: "bi.vertical",
              scrolly: false,
              items: []
            }]
          }]
        };
        item.layout = layout;

        if (item.parent) {
          getNext(item.parent).push(layout);
        }
      });

      function _createNode(item, options, isPlus, hasIcon) {
        return BI.extend({
          type: "bi.label",
          textAlign: "left",
          lgap: 25,
          width: item.item._width,
          height: rowHeight,
          _columnIndex: item.item._col,
          _rowIndex: item.item._row,
          firstRowTopLine: false,
          firstColumnLeftLine: true,
          extraCls: "collection-cell" + (item.item._row === 0 ? " first-row" : "") + (item.item._col === 0 ? " first-col" : ""),
          mounted: function mounted() {
            if (hasIcon && !item.isLastNode) {
              BI.createWidget({
                type: "bi.absolute_vertical_adapt",
                element: this,
                lgap: 6,
                items: [{
                  type: "bi.icon_button",
                  tagName: "label",
                  attributes: {
                    "for": prefix + "-" + item.item._row + "-" + item.item._col
                  },
                  cls: (isPlus ? "plus-font" : "minus-font") + " icon-size-12",
                  iconWidth: 12,
                  iconHeight: 12,
                  width: 12,
                  height: 12
                }]
              });
            }
          } // height: item.item._height

        }, options, items[item.item._row][item.item._col]);
      }

      function createNode(item, options, isPlus) {
        var node = _createNode(item, options, isPlus, true);

        if (!item.parent && o.showSequence === true) {
          // 序号显示逐行递增，但最后一行的序号样式和文本需要由summaryCellStyleGetter和summaryText决定
          var isSummarySeq = items.length - 1 === item.item._row;
          return {
            type: "bi.vertical_adapt",
            verticalAlign: "stretch",
            items: [{
              type: "bi.table_style_cell",
              cls: "sequence-table-title-cell",
              width: o.seqWidth,
              styleGetter: function (key) {
                return function () {
                  return isSummarySeq ? o.summaryCellStyleGetter(true) : o.sequenceCellStyleGetter(key);
                };
              }(count),
              text: isPlus ? count : isSummarySeq ? o.summaryText : count++,
              _store: o.tableStyleCellStoreGetter
            }, {
              el: node
            }]
          };
        }

        return node;
      }

      function createNodes(item, options, isPlus) {
        var node = _createNode(item, options, isPlus, true);

        var current = items[item.item._row][item.item._col];
        var isLastNode = !current.children || current.children.length === 0;

        if (!item.parent && o.showSequence === true) {
          var isSummarySeq = items.length - 1 === item.item._row;
          return {
            type: "bi.vertical_adapt",
            verticalAlign: "stretch",
            items: [{
              type: "bi.table_style_cell",
              cls: "sequence-table-title-cell",
              width: o.seqWidth,
              styleGetter: function (key) {
                return function () {
                  return isSummarySeq ? o.summaryCellStyleGetter(true) : o.sequenceCellStyleGetter(key);
                };
              }(count),
              text: isPlus ? count : isSummarySeq ? o.summaryText : count++,
              _store: o.tableStyleCellStoreGetter
            }, {
              el: {
                type: "bi.vtape",
                width: item.item._width,
                scrolly: false,
                scrollable: false,
                items: isLastNode ? [{
                  el: node
                }] : BI.map([node].concat(BI.map(BI.range(item.item.__mergeRows.length - 1), function () {
                  return _createNode(item, options, isPlus, false);
                })), function (i, node) {
                  return {
                    el: node,
                    height: rowHeight
                  };
                })
              }
            }]
          };
        }

        return isLastNode ? [{
          el: node
        }] : BI.map([node].concat(BI.map(BI.range(item.item.__mergeRows.length - 1), function () {
          return _createNode(item, options, isPlus, false);
        })), function (i, node) {
          return {
            el: node,
            height: rowHeight
          };
        });
      }

      function getSummaryRow(i, j) {
        var item = map[i][j];

        if (o.rowPosition === "bottom") {
          return i + item.__mergeRows.length - 1;
        } else {
          return i;
        }
      }

      function getNext(item) {
        return item.layout.items[2].items[1].items;
      }

      function getLeaves(row) {
        var leaves = items[row].slice(endCol);
        return {
          type: "bi.vertical_adapt",
          items: BI.map(leaves, function (i, leaf) {
            return BI.extend({
              type: "bi.label",
              width: columnSize[endCol + i],
              height: rowHeight,
              extraCls: "collection-cell"
            }, leaf);
          })
        };
      }

      BI.each(result, function (i, item) {
        // 叶子节点
        if (getNext(item).length === 0) {
          var leaves = getLeaves(item.item._row);
          item.isLastNode = true;
          getNext(item).push(leaves);
        }

        if (!item.parent) {
          tree.push(item.layout);
        }
      });
      return tree;
    },
    _populate: function _populate(header, items) {
      if (this._isNeedDigest === true) {
        this._digestTable(header, items);
      }

      this._isNeedDigest = false;

      this._populateTable(header, items);
    },
    getRegionSize: function getRegionSize() {
      var o = this.options;
      var regionSize = o.regionColumnSize[0] || 0;

      if (o.isNeedFreeze === false || o.freezeCols.length === 0) {
        return 0;
      }

      if (!regionSize) {
        BI.each(o.freezeCols, function (i, col) {
          regionSize += o.columnSize[col];
        });
      }

      return regionSize;
    },
    setVerticalScroll: function setVerticalScroll(scrollTop) {},
    setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {},
    setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {},
    getVerticalScroll: function getVerticalScroll() {},
    getLeftHorizontalScroll: function getLeftHorizontalScroll() {},
    getRightHorizontalScroll: function getRightHorizontalScroll() {},
    setColumnSize: function setColumnSize(columnSize) {
      this._isNeedDigest = true;
      this.options.columnSize = columnSize;
    },
    setRegionColumnSize: function setRegionColumnSize(regionColumnSize) {
      this._isNeedDigest = true;
      this.options.regionColumnSize = regionColumnSize;
    },
    getColumnSize: function getColumnSize() {
      return this.options.columnSize;
    },
    getRegionColumnSize: function getRegionColumnSize() {
      return this.options.regionColumnSize;
    },
    _restore: function _restore() {
      // this.topLeftCollection.restore();
      this.topRightCollection.restore(); // this.bottomLeftCollection.restore();
      // this.bottomRightCollection.restore();
    },
    restore: function restore() {
      this._restore();
    }
  });
  BI.shortcut("bi.spread_sequence_list_table", Widget);
}();

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function () {
  var Widget = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-spread-sequence-table",
      el: {},
      isNeedResize: true,
      // 是否需要调整列宽
      freezeCols: [],
      // 冻结的列号,从0开始,isNeedFreeze为tree时生效
      isNeedMerge: true,
      // 是否需要合并单元格
      mergeCols: [],
      mergeRule: BI.emptyFn,
      isNeedMergeCol: true,
      // 是否横向合并
      isNeedMergeRow: true,
      // 是否纵向合并
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 25,
      rowSize: 25,
      regionColumnSize: [],
      headerCellStyleGetter: BI.emptyFn,
      summaryCellStyleGetter: BI.emptyFn,
      sequenceCellStyleGetter: BI.emptyFn,
      // 传给汇总、序号单元格的store，能在单元格绘制时使用上下文中的cssScale
      tableStyleCellStoreGetter: null,
      sequenceHeaderCreator: BI.emptyFn,
      sequenceSummaryText: BI.i18nText("BI-Summary_Values"),
      header: [],
      items: [],
      // 交叉表头
      crossHeader: [],
      crossItems: [],
      // 汇总行位置
      summaryText: BI.i18nText("BI-Summary_Values"),
      rowPosition: "bottom",
      colPosition: "right",
      showInnerSummary: false,
      showSequence: false,
      startSequence: 1,
      // 开始的序号
      seqWidth: 60
    },
    _getVDeep: function _getVDeep() {
      return this.options.crossHeader.length; // 纵向深度
    },
    _getHDeep: function _getHDeep() {
      var o = this.options;
      return Math.max(o.mergeCols.length, o.freezeCols.length, BI.TableTree.maxDeep(o.items) - 1);
    },
    render: function render() {
      var self = this,
          o = this.options;
      this._width = 0;
      this._height = 0;

      var data = this._digest();

      this.topRightCollection = BI.createWidget({
        type: "bi.collection_view",
        cellSizeAndPositionGetter: function cellSizeAndPositionGetter(index) {
          return self.topRightItems[index];
        }
      });
      this.bottomRight = BI.createWidget({
        type: "bi.vertical",
        scrolly: false
      });
      this.contextLayout = BI.createWidget({
        type: "bi.vertical",
        element: this,
        scrolly: false,
        scrollable: true,
        items: [o.showSequence ? {
          type: "bi.vertical_adapt",
          items: [BI.extend({
            type: "bi.table_style_cell",
            text: BI.i18nText("BI-Number_Index"),
            width: o.seqWidth,
            height: this._getFreezeHeaderHeight(data.header),
            styleGetter: o.headerCellStyleGetter,
            ref: function ref(_ref) {
              self.headerSeq = _ref;
            },
            _store: o.tableStyleCellStoreGetter
          }, o.sequenceHeaderCreator()), this.topRightCollection]
        } : {
          el: this.topRightCollection
        }, {
          el: this.bottomRight
        }]
      });

      if (data.header.length > 0 || data.items.length > 0) {
        this._digestTable(data.header, data.items);

        this._populate(data.header, data.items);
      }
    },
    _digest: function _digest() {
      var o = this.options;

      var deep = this._getHDeep();

      var vDeep = this._getVDeep();

      var header = BI.TableTree.formatHeader(o.header, o.crossHeader, o.crossItems, deep, vDeep, o.headerCellStyleGetter, {
        sumPosition: o.colPosition === "right",
        summaryText: o.summaryText
      });
      var items = BI.DynamicSummaryTreeTable.formatHorizontalItems(o.items, deep, false, o.summaryCellStyleGetter, {
        sumPosition: o.rowPosition === "bottom",
        summaryText: o.summaryText,
        isNeedMergeRow: o.isNeedMergeRow,
        tableStyleCellStoreGetter: o.tableStyleCellStoreGetter
      });
      var data = BI.DynamicSummaryTreeTable.formatSummaryItems(items, header, o.crossItems, deep);
      var columnSize = o.columnSize.slice();
      var minColumnSize = o.minColumnSize.slice();
      var maxColumnSize = o.maxColumnSize.slice();
      BI.removeAt(columnSize, data.deletedCols);
      BI.removeAt(minColumnSize, data.deletedCols);
      BI.removeAt(maxColumnSize, data.deletedCols);
      return {
        header: data.header,
        items: data.items,
        columnSize: columnSize,
        minColumnSize: minColumnSize,
        maxColumnSize: maxColumnSize
      };
    },
    populate: function populate(items, header, crossItems, crossHeader) {
      var o = this.options;

      if (items) {
        o.items = items;
      }

      if (header) {
        o.header = header;
      }

      if (crossItems) {
        o.crossItems = crossItems;
      }

      if (crossHeader) {
        o.crossHeader = crossHeader;
      }

      var data = this._digest(); // 表头所展示“序号”高度由headers决定，render的时候不一定传了header, 在populate的时候setHeight


      this.headerSeq && this.headerSeq.setHeight(this._getFreezeHeaderHeight(data.header));
      this.setColumnSize(data.columnSize);
      o.minColumnSize = data.minColumnSize;
      o.maxColumnSize = data.maxColumnSize;
      items = data.items;
      header = data.header;

      if (items && items !== this.options.items) {
        this._isNeedDigest = true;
        this.options.items = items;

        this._restore();
      }

      if (header && header !== this.options.header) {
        this._isNeedDigest = true;
        this.options.header = header;

        this._restore();
      }

      this._populate(header, items);
    },
    _getFreezeColLength: function _getFreezeColLength() {
      var o = this.options;
      return o.isNeedMerge === true ? BI.clamp(o.mergeCols.length, 0, o.columnSize.length) : 0;
    },
    _getFreezeHeaderHeight: function _getFreezeHeaderHeight(header) {
      var o = this.options;
      return header.length * o.headerRowSize;
    },
    _populateTable: function _populateTable(header, items) {
      var self = this,
          o = this.options;
      var regionSize = this.getRegionSize(),
          totalLeftColumnSize = 0,
          totalRightColumnSize = 0,
          totalColumnSize = 0,
          summaryColumnSizeArray = [];
      BI.each(o.columnSize, function (i, size) {
        if (o.isNeedFreeze === true && o.freezeCols.includes(i)) {
          totalLeftColumnSize += size;
        } else {
          totalRightColumnSize += size;
        }

        totalColumnSize += size;

        if (i === 0) {
          summaryColumnSizeArray[i] = size;
        } else {
          summaryColumnSizeArray[i] = summaryColumnSizeArray[i - 1] + size;
        }
      }); // var otlw = regionSize;
      // var otlh = this._getFreezeHeaderHeight(header);
      // var otrw = this._width - regionSize;
      // var otrh = this._getFreezeHeaderHeight(header);
      // var oblw = regionSize;
      // var oblh = this._height - otlh;
      // var obrw = this._width - regionSize;
      // var obrh = this._height - otrh;
      // var scrollBarSize = BI.DOM.getScrollWidth();
      // var tlw = otlw + scrollBarSize;
      // var tlh = otlh + scrollBarSize;
      // var trw = otrw + scrollBarSize;
      // var trh = otrh + scrollBarSize;
      // var blw = oblw + scrollBarSize;
      // var blh = oblh + scrollBarSize;
      // var brw = obrw + scrollBarSize;
      // var brh = obrh + scrollBarSize;
      //
      // var digest = function (el) {
      //     el.element.css({
      //         overflow: "scroll",
      //         overflowX: "scroll",
      //         overflowY: "scroll"
      //     });
      // };
      // this.topLeft.setWidth(otlw);
      // this.topLeft.setHeight(otlh);
      // this.topRight.setWidth(otrw);
      // this.topRight.setHeight(otrh);
      // this.bottomLeft.setWidth(oblw);
      // this.bottomLeft.setHeight(oblh);
      // this.bottomRight.setWidth(obrw);
      // this.bottomRight.setHeight(obrh);
      // this.topLeftCollection.setWidth(tlw);
      // this.topLeftCollection.setHeight(tlh);

      this.topRightCollection.setWidth(totalColumnSize);
      this.topRightCollection.setHeight(this._getFreezeHeaderHeight(header)); // this.bottomLeftCollection.setWidth(blw);
      // this.bottomLeftCollection.setHeight(blh);
      // this.bottomRightCollection.setWidth(brw);
      // this.bottomRightCollection.setHeight(brh);
      // digest(this.topLeftCollection);
      // digest(this.topRightCollection);
      // digest(this.bottomLeftCollection);
      // digest(this.bottomRightCollection);
      // var items = this.contextLayout.attr("items");
      // items[1].left = regionSize;
      // items[1].top = this._getFreezeHeaderHeight(header);
      // items[3].left = regionSize;
      // items[3].top = this._getFreezeHeaderHeight();
      // this.contextLayout.attr("items", items);
      // this.contextLayout.resize();

      var leftHeader = [],
          rightHeader = [],
          leftItems = [],
          rightItems = [];

      var run = function run(positions, items, rendered, firstRowTopLine, firstColumnLeftLine) {
        BI.each(positions, function (i, item) {
          if (!firstRowTopLine && o.customCell) {
            items[item.row][item.col]._rowIndex = item.row;
            items[item.row][item.col]._columnIndex = item.col;
            items[item.row][item.col].firstRowTopLine = firstRowTopLine;
            items[item.row][item.col].firstColumnLeftLine = firstColumnLeftLine;
            rendered.push(items[item.row][item.col]);
            return;
          }

          var cell = {
            type: "bi.collection_table_cell",
            cell: items[item.row][item.col],
            _rowIndex: item.row,
            _columnIndex: item.col,
            firstRowTopLine: firstRowTopLine,
            firstColumnLeftLine: firstColumnLeftLine
          };
          rendered.push(cell);
        });
      }; // run(this.topLeftItems, header, leftHeader, true, true);


      run(this.topRightItems, header, rightHeader, true, true); // run(this.bottomLeftItems, this._getActualItems(), leftItems, this.topRightItems.length <= 0, true);
      // run(this.bottomRightItems, this._getActualItems(), rightItems, this.topRightItems.length <= 0, this.topLeftItems.length <= 0);
      // this.topLeftCollection._populate(leftHeader);

      this.topRightCollection._populate(rightHeader); // this.bottomLeftCollection._populate(leftItems);
      // this.bottomRightCollection._populate(rightItems);


      this.bottomRight.populate(this.bottomRightItems);
    },
    _digestTable: function _digestTable(header, items) {
      var o = this.options;

      var freezeColLength = this._getFreezeColLength(); // // 如果表头位置不够，取消表头冻结
      // if (this._getFreezeHeaderHeight() <= 0) {
      //     this.topLeftItems = [];
      //     this.topRightItems = [];
      //     this.bottomLeftItems = this._serialize(this._getActualItems(), 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols, BI.range(o.header.length));
      //     this.bottomRightItems = this._serialize(this._getActualItems(), freezeColLength, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols, BI.range(o.header.length));
      // } else {
      // this.topLeftItems = this._serialize(header, 0, freezeColLength, o.headerRowSize, o.columnSize, o.mergeCols);


      this.topRightItems = BI.CollectionTable.serialize(header, 0, o.columnSize.length, o.headerRowSize, o.columnSize, true, [], o.mergeRule); // this.bottomLeftItems = this._serialize(o.items, 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols);
      // this.bottomRightItems = this._serialize(o.items, freezeColLength, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols);
      // }

      this.bottomRightItems = this._serializeItems(items, 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols);
    },
    _serializeItems: function _serializeItems(items, startCol, endCol, rowHeight, columnSize, mergeCols, mergeRows) {
      mergeCols = mergeCols || [];
      mergeRows = mergeRows || [];
      var self = this,
          o = this.options;
      var count = o.startSequence;
      var result = [],
          cache = {},
          preCol = {},
          preRow = {},
          map = {};
      var summaryColumnSize = [];

      for (var i = startCol; i < endCol; i++) {
        if (i === startCol) {
          summaryColumnSize[i] = columnSize[i];
        } else {
          summaryColumnSize[i] = summaryColumnSize[i - 1] + columnSize[i];
        }
      }

      var mergeRow = function mergeRow(i, j) {
        preCol[j]._height += rowHeight;

        preCol[j].__mergeRows.push(i); //指向前一列


        preRow[i] = preCol[j];
      };

      var mergeCol = function mergeCol(i, j) {
        preRow[i]._width += columnSize[j];

        preRow[i].__mergeCols.push(j);
      };

      var createOneEl = function createOneEl(r, c) {
        var width = columnSize[c];
        var height = rowHeight;
        map[r][c]._row = r;
        map[r][c]._col = c;
        map[r][c]._width = width;
        map[r][c]._height = height;
        var el = {
          x: summaryColumnSize[c] - columnSize[c],
          y: +r * rowHeight,
          item: map[r][c],
          parent: preRow[r] && preRow[r].el
        };
        preCol[c] = map[r][c];
        preCol[c].__mergeRows = [r];
        preRow[r] = map[r][c];
        preRow[r].__mergeCols = [c];
        preRow[r].el = el;
        result.push(el);
      };

      BI.each(items, function (i, cols) {
        for (var j = startCol; j < endCol; j++) {
          if (!cache[i]) {
            cache[i] = {};
          }

          if (!map[i]) {
            map[i] = {};
          }

          cache[i][j] = cols[j];
          map[i][j] = {};

          if (mergeCols === true || mergeCols.indexOf(j) > -1 || mergeRows === true || mergeRows.indexOf(i) > -1) {
            if (i === 0 && j === startCol) {
              createOneEl(0, startCol);
            } else if (j === startCol && i > 0) {
              var isNeedMergeRow = o.mergeRule(cache[i][j], cache[i - 1][j]);

              if (isNeedMergeRow === true) {
                mergeRow(i, j);
                preRow[i] = preCol[j];
              } else {
                createOneEl(i, j);
              }
            } else if (i === 0 && j > startCol) {
              var isNeedMergeCol = o.mergeRule(cache[i][j], cache[i][j - 1]);

              if (isNeedMergeCol === true) {
                mergeCol(i, j);
                preCol[j] = preRow[i];
              } else {
                createOneEl(i, j);
              }
            } else {
              var isNeedMergeRow = o.mergeRule(cache[i][j], cache[i - 1][j]);
              var isNeedMergeCol = o.mergeRule(cache[i][j], cache[i][j - 1]);

              if (isNeedMergeCol && isNeedMergeRow) {
                continue; // mergeRow(i, j);//优先合并列
              }

              if (isNeedMergeCol) {
                mergeCol(i, j);
              }

              if (isNeedMergeRow) {
                mergeRow(i, j);
              }

              if (!isNeedMergeCol && !isNeedMergeRow) {
                createOneEl(i, j);
              }
            }
          } else {
            createOneEl(i, j);
          }
        }
      });
      var tree = [];
      var prefix = BI.UUID();
      BI.each(result, function (i, item) {
        var layout = {
          type: "bi.vertical",
          scrolly: false,
          items: [{
            type: "bi.layout",
            tagName: "input",
            cls: "spread-sequence-table-checkbox",
            invisible: true,
            attributes: {
              type: "checkbox",
              id: prefix + "-" + item.item._row + "-" + item.item._col
            }
          }, !items[item.item._row][item.item._col].children ? {
            type: "bi.layout"
          } : {
            type: "bi.vertical_adapt",
            verticalAlign: "stretch",
            cls: "summary-line",
            items: [{
              el: createNode(item, {
                width: summaryColumnSize[endCol - 1] - (item.item._col > 0 ? summaryColumnSize[item.item._col - 1] : 0) // height: o.rowSize

              }, true)
            }, getLeaves(getSummaryRow(item.item._row, item.item._col))]
          }, {
            type: "bi.vertical_adapt",
            verticalAlign: "stretch",
            cls: "expand-line",
            items: [{
              el: createNode(item)
            }, {
              type: "bi.vertical",
              scrolly: false,
              items: []
            }]
          }]
        };
        item.layout = layout;

        if (item.parent) {
          getNext(item.parent).push(layout);
        }
      });

      function createNode(item, options, isPlus) {
        var node = BI.extend({
          type: "bi.label",
          textAlign: "left",
          lgap: 25,
          width: item.item._width,
          // height: item.item._height,
          _columnIndex: item.item._col,
          _rowIndex: item.item._row,
          firstRowTopLine: false,
          firstColumnLeftLine: true,
          extraCls: "collection-cell" + (item.item._row === 0 ? " first-row" : "") + (item.item._col === 0 ? " first-col" : ""),
          mounted: function mounted() {
            if (!item.isLastNode) {
              BI.createWidget({
                type: "bi.absolute_vertical_adapt",
                element: this,
                lgap: 6,
                items: [{
                  type: "bi.icon_button",
                  tagName: "label",
                  attributes: {
                    "for": prefix + "-" + item.item._row + "-" + item.item._col
                  },
                  cls: (isPlus ? "plus-font" : "minus-font") + " icon-size-12",
                  iconWidth: 12,
                  iconHeight: 12,
                  width: 12,
                  height: 12
                }]
              });
            }
          } // height: item.item._height

        }, options, items[item.item._row][item.item._col]);

        if (!item.parent && o.showSequence === true) {
          // 序号显示逐行递增，但最后一行的序号的样式和文本需要由summaryCellStyleGetter和summaryText决定
          var isSummarySeq = items.length - 1 === item.item._row;
          return {
            type: "bi.vertical_adapt",
            verticalAlign: "stretch",
            items: [{
              type: "bi.table_style_cell",
              cls: "sequence-table-title-cell",
              width: o.seqWidth,
              styleGetter: function (key) {
                return function () {
                  return isSummarySeq ? o.summaryCellStyleGetter(true) : o.sequenceCellStyleGetter(key);
                };
              }(count),
              text: isPlus ? count : isSummarySeq ? o.summaryText : count++,
              _store: o.tableStyleCellStoreGetter
            }, {
              el: node
            }]
          };
        }

        return node;
      }

      function getSummaryRow(i, j) {
        var item = map[i][j];

        if (o.rowPosition === "bottom") {
          return i + item.__mergeRows.length - 1;
        } else {
          return i;
        }
      }

      function getNext(item) {
        return item.layout.items[2].items[1].items;
      }

      function getLeaves(row) {
        var leaves = items[row].slice(endCol);
        return {
          type: "bi.vertical_adapt",
          items: BI.map(leaves, function (i, leaf) {
            return BI.extend({
              type: "bi.label",
              width: columnSize[endCol + i],
              height: rowHeight,
              extraCls: "collection-cell"
            }, leaf);
          })
        };
      }

      BI.each(result, function (i, item) {
        // 叶子节点
        if (getNext(item).length === 0) {
          var leaves = getLeaves(item.item._row);
          item.isLastNode = true;
          getNext(item).push(leaves);
        }

        if (!item.parent) {
          tree.push(item.layout);
        }
      });
      return tree;
    },
    _populate: function _populate(header, items) {
      if (this._isNeedDigest === true) {
        this._digestTable(header, items);
      }

      this._isNeedDigest = false;

      this._populateTable(header, items);
    },
    getRegionSize: function getRegionSize() {
      var o = this.options;
      var regionSize = o.regionColumnSize[0] || 0;

      if (o.isNeedFreeze === false || o.freezeCols.length === 0) {
        return 0;
      }

      if (!regionSize) {
        BI.each(o.freezeCols, function (i, col) {
          regionSize += o.columnSize[col];
        });
      }

      return regionSize;
    },
    setVerticalScroll: function setVerticalScroll(scrollTop) {},
    setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {},
    setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {},
    getVerticalScroll: function getVerticalScroll() {},
    getLeftHorizontalScroll: function getLeftHorizontalScroll() {},
    getRightHorizontalScroll: function getRightHorizontalScroll() {},
    setColumnSize: function setColumnSize(columnSize) {
      this._isNeedDigest = true;
      this.options.columnSize = columnSize;
    },
    setRegionColumnSize: function setRegionColumnSize(regionColumnSize) {
      this._isNeedDigest = true;
      this.options.regionColumnSize = regionColumnSize;
    },
    getColumnSize: function getColumnSize() {
      return this.options.columnSize;
    },
    getRegionColumnSize: function getRegionColumnSize() {
      return this.options.regionColumnSize;
    },
    _restore: function _restore() {
      // this.topLeftCollection.restore();
      this.topRightCollection.restore(); // this.bottomLeftCollection.restore();
      // this.bottomRightCollection.restore();
    },
    restore: function restore() {
      this._restore();
    }
  });
  BI.shortcut("bi.spread_sequence_table", Widget);
}();

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(42);

var _stickytable2 = __webpack_require__(72);

__webpack_require__(71);

var _excluded = ["items", "id", "pId", "layer", "isParent", "draggable", "checkable", "open", "prevComponent"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * StickyTable
 *
 * Created by GUY on 2022/9/24.
 * @class StickyTable
 * @extends BI.Widget
 */
var FreezeTable = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(FreezeTable.superclass._defaultConfig.apply(this, arguments), {
      baseCls: "bi-sticky-table",
      headerRowSize: 30,
      rowSize: 30,
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      freezeCols: [0],
      scrollLeft: 0,
      scrollTop: 0,
      sortable: true,
      checkable: true,
      bordered: false,
      stripe: false,
      hover: false,
      header: [],
      items: [],
      itemsCreator: BI.emptyFn
    });
  },
  // attr: function (key, value) {
  //     var v = FreezeTable.superclass.attr.apply(this, arguments);
  //     if (!value) {
  //         return v;
  //     }
  //     return this.tableColletion.attr.apply(this.tableColletion, arguments);
  // },
  render: function render() {
    var _this = this,
        _listeners;

    var self = this,
        o = this.options;
    this.headerColletion = BI.createWidget({
      type: "bi.sticky_table_header",
      css: {
        overflowY: "scroll",
        overflowX: "hidden"
      },
      columnSize: o.columnSize,
      minColumnSize: o.minColumnSize,
      maxColumnSize: o.maxColumnSize,
      freezeCols: o.freezeCols.slice(),
      header: o.header,
      headerRowSize: o.headerRowSize
    });
    this.bottomRightCollection = BI.createWidget({
      type: "bi.virtual_tree_list",
      css: {
        overflowY: "scroll",
        overflowX: "auto"
      },
      items: this._formatItems(o.items),
      itemsCreator: function itemsCreator(op, callback) {
        o.itemsCreator(op, function (items) {
          callback(_this._formatItems(items));
        });
      },
      el: {
        type: 'bi.virtual_group_list',
        configRender: function configRender(render) {
          return _objectSpread(_objectSpread({}, render), {}, {
            scrolly: false
          });
        },
        listeners: [{
          eventName: "EVENT_CHANGE",
          action: function action() {
            self.fireEvent("EVENT_CHANGE", arguments);
          }
        }],
        rowHeight: o.rowSize,
        el: {
          type: "bi.sticky_table_layout",
          ref: function ref(_ref) {
            _this.tableColletion = _ref;
          },
          mirror: {
            appendTo: this.element[0]
          },
          columnSize: o.columnSize,
          minColumnSize: o.minColumnSize,
          maxColumnSize: o.maxColumnSize,
          isNeedFreeze: o.isNeedFreeze,
          freezeCols: o.freezeCols.slice(),
          sortable: o.sortable,
          checkable: o.checkable,
          listeners: (_listeners = {}, _defineProperty(_listeners, _stickytable2.StickyTableLayout.EVENT_STOP_DRAG, function (move) {
            BI.nextTick(function () {
              _this.bottomRightCollection.move(move[0], move[1]);

              _this.fireEvent("EVENT_STOP_DRAG", _this.bottomRightCollection.getTree(), move[0], move[1]);

              _this.fireEvent("EVENT_SORT", _this.bottomRightCollection.getTree(), move[0], move[1]);
            });
          }), _defineProperty(_listeners, _stickytable2.StickyTableLayout.EVENT_START_DRAG, function (sourceId) {
            o.scrollLeft = 0;

            _this._scrollHandler();

            _this.bottomRightCollection.element.scrollLeft(0);

            _this.headerColletion.element.scrollLeft(0);

            _this.fireEvent("EVENT_START_DRAG", _this.bottomRightCollection.getTree(), sourceId);
          }), _listeners)
        }
      }
    });
    this.contextLayout = BI.createWidget({
      type: "bi.vertical_fill",
      rowSize: ["", "fill"],
      cls: "".concat(o.bordered ? "bordered" : "", " ").concat(o.stripe ? "stripe" : "", " ").concat(o.hover ? "hover" : ""),
      element: this,
      items: [{
        el: this.headerColletion
      }, {
        el: this.bottomRightCollection
      }]
    });
  },
  _scrollHandler: function _scrollHandler() {
    var o = this.options;

    if (o.scrollLeft > 0) {
      this.element.addClass("fixed-left-scroll");
    } else {
      this.element.removeClass("fixed-left-scroll");
    }

    var containerWidth = this.tableColletion.table.element.width();
    var clientWidth = this.element.width();

    if (containerWidth - (o.scrollLeft + clientWidth - BI.GridTableScrollbar.SIZE) < 1) {
      this.element.removeClass("fixed-right-scroll");
    } else {
      this.element.addClass("fixed-right-scroll");
    }
  },
  _freeHandler: function _freeHandler() {
    var _this2 = this;

    // 冻结列不止第一列和最后一列
    if (this._hasOtherFreezeCol()) {
      var realColumnSize = this.headerColletion.getRealColumnSize();
      this.options.freezeCols.forEach(function (col) {
        var firstRowLength = _this2.options.header[0].length;

        if (col !== 0 && col !== firstRowLength - 1) {
          _this2.element[0].style.setProperty("--index-".concat(col, "-left"), "".concat(realColumnSize.slice(0, col).reduce(function (item, sum) {
            return sum + item;
          }, 0), "px"));
        }
      });
    }
  },
  _handleResize: function _handleResize() {
    this.options.scrollLeft = this.bottomRightCollection.element.scrollLeft();

    this._scrollHandler();

    this._freeHandler();
  },
  _hasOtherFreezeCol: function _hasOtherFreezeCol() {
    var o = this.options;
    return BI.some(o.freezeCols, function (i, col) {
      var firstRowLength = o.header[0].length;

      if (col !== 0 && col !== firstRowLength - 1) {
        return true;
      }
    });
  },
  mounted: function mounted() {
    var _this3 = this;

    var o = this.options;

    if (o.header.length > 0 || o.items.length > 0) {
      this._digest();

      this._populate();
    }

    this._scrollHandler();

    this._freeHandler();

    this.bottomRightCollection.element.scroll(function () {
      o.scrollTop = _this3.bottomRightCollection.element.scrollTop();
      o.scrollLeft = _this3.bottomRightCollection.element.scrollLeft();

      _this3._scrollHandler();

      _this3.headerColletion.element.scrollLeft(o.scrollLeft);
    });
    this.resizeObserver = BI.ResizeDetector.addResizeListener(this, this._handleResize.bind(this)); // this.headerColletion.element.scroll(() => {
    //     o.scrollLeft = this.headerColletion.element.scrollLeft();
    //     this.bottomRightCollection.element.scrollLeft(o.scrollLeft);
    // });
  },
  destroyed: function destroyed() {
    this.resizeObserver();
  },
  _populateTable: function _populateTable() {
    var self = this,
        o = this.options;
    this.headerColletion.populate(o.header);
    this.bottomRightCollection.populate(this._formatItems(o.items));
  },
  _formatItems: function _formatItems(items) {
    var _this4 = this;

    return items.map(function (_ref2) {
      var items = _ref2.items,
          id = _ref2.id,
          pId = _ref2.pId,
          layer = _ref2.layer,
          isParent = _ref2.isParent,
          draggable = _ref2.draggable,
          checkable = _ref2.checkable,
          open = _ref2.open,
          prevComponent = _ref2.prevComponent,
          others = _objectWithoutProperties(_ref2, _excluded);

      return {
        type: "bi.sticky_table_row",
        id: id,
        pId: pId,
        layer: layer,
        isParent: isParent,
        draggable: draggable,
        checkable: checkable,
        prevComponent: prevComponent,
        open: open,
        height: _this4.options.rowSize,
        dimension: others,
        items: items
      };
    });
  },
  _digest: function _digest() {
    var o = this.options; // var freezeColLength = this._getFreezeColLength();
    // 如果表头位置不够，取消表头冻结
    // if (this._getFreezeHeaderHeight() <= 0) {
    //     this.topLeftItems = [];
    //     this.topRightItems = [];
    //     this.bottomLeftItems = BI.CollectionTable.serialize(this._getActualItems(), 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols, BI.range(o.header.length), o.mergeRule);
    //     this.bottomRightItems = BI.CollectionTable.serialize(this._getActualItems(), freezeColLength, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols, BI.range(o.header.length), o.mergeRule);
    // } else {
    // this.topRightItems = BI.CollectionTable.serialize(o.header, freezeColLength, o.columnSize.length, o.headerRowSize, o.columnSize, true, [], o.mergeRule);
    // this.bottomLeftItems = BI.CollectionTable.serialize(o.items, 0, freezeColLength, o.rowSize, o.columnSize, o.mergeCols, [], o.mergeRule);
    // this.bottomRightItems = BI.CollectionTable.serialize(o.items, 0, o.columnSize.length, o.rowSize, o.columnSize, o.mergeCols, [], o.mergeRule);
    // }
  },
  _populate: function _populate() {
    this._populateTable();
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    return this.bottomRightCollection.scrollTo(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {},
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {},
  getVerticalScroll: function getVerticalScroll() {
    return this.options.scrollTop;
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.options.scrollLeft;
  },
  setWidth: function setWidth(width) {
    FreezeTable.superclass.setWidth.apply(this, arguments);
    this._width = this.options.width - BI.GridTableScrollbar.SIZE;
  },
  setHeight: function setHeight(height) {
    FreezeTable.superclass.setHeight.apply(this, arguments);
    this._height = this.options.height - BI.GridTableScrollbar.SIZE;
  },
  setColumnSize: function setColumnSize(columnSize) {
    var o = this.options;
    this._isNeedDigest = true;
    this.options.columnSize = columnSize;
    this.headerColletion.setColumnSize(columnSize);
    this.tableColletion.setColumnSize(columnSize);

    this._scrollHandler();

    this._freeHandler();
  },
  getColumnSize: function getColumnSize() {
    return this.options.columnSize;
  },
  getRegionSize: function getRegionSize() {
    return 0;
  },
  getRegionColumnSize: function getRegionColumnSize() {
    return [];
  },
  setRegionColumnSize: function setRegionColumnSize() {},
  getValue: function getValue() {
    return this.bottomRightCollection.getValue();
  },
  populate: function populate(items, header) {
    if (items && items !== this.options.items) {
      this._isNeedDigest = true;
      this.options.items = items;

      this._restore();
    }

    if (header && header !== this.options.header) {
      this._isNeedDigest = true;
      this.options.header = header;

      this._restore();
    }

    this._populate();
  },
  _restore: function _restore() {},
  restore: function restore() {
    this._restore();
  }
});
BI.shortcut("bi.freeze_table", FreezeTable);
var Table = BI.TableComponnet = BI.inherit(BI.Widget, {
  _defaultConfig: function _defaultConfig() {
    return BI.extend(Table.superclass._defaultConfig.apply(this, arguments), {
      freezeCols: [],
      // 冻结的列号,从0开始
      isNeedMerge: false,
      mergeRule: BI.emptyFn,
      columnSize: [],
      minColumnSize: [],
      maxColumnSize: [],
      headerRowSize: 30,
      rowSize: 30,
      sortable: true,
      resizable: true,
      // API保持统一用这个
      checkable: true,
      bordered: false,
      stripe: true,
      hover: true,
      header: [],
      // 二维数组
      items: [],
      itemsCreator: BI.emptyFn
    });
  },
  attr: function attr(key, value) {
    var v = Table.superclass.attr.apply(this, arguments);

    if (BI.isNull(value)) {
      return v;
    }

    return this.table.attr.apply(this.table, arguments);
  },
  render: function render() {
    var _this5 = this;

    var o = this.options;

    if (o.items[0] && o.items[0].length > 0) {
      return {
        type: "bi.resizable_table",
        ref: function ref(_ref) {
          _this5.table = _ref;
        },
        el: {
          type: "bi.table_view",
          bordered: o.bordered,
          stripe: o.stripe,
          hover: o.hover
        },
        width: o.width,
        height: o.height,
        isNeedFreeze: true,
        freezeCols: o.freezeCols,
        isNeedResize: o.isNeedResize || o.resizable,
        minColumnSize: o.minColumnSize,
        maxColumnSize: o.maxColumnSize,
        columnSize: o.columnSize,
        headerRowSize: o.headerRowSize,
        rowSize: o.rowSize,
        isNeedMerge: o.isNeedMerge,
        mergeRule: o.mergeRule,
        header: o.header,
        items: o.items
      };
    }

    return {
      type: "bi.resizable_table",
      ref: function ref(_ref) {
        _this5.table = _ref;
      },
      el: {
        type: "bi.freeze_table",
        ref: function ref(_ref) {
          _this5.innerTable = _ref;
        },
        listeners: [{
          eventName: "EVENT_SORT",
          action: function action() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this5.fireEvent.apply(_this5, ["EVENT_SORT"].concat(args));
          }
        }, {
          eventName: "EVENT_START_DRAG",
          action: function action() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            _this5.fireEvent.apply(_this5, ["EVENT_START_DRAG"].concat(args));
          }
        }, {
          eventName: "EVENT_STOP_DRAG",
          action: function action() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            _this5.fireEvent.apply(_this5, ["EVENT_STOP_DRAG"].concat(args));
          }
        }, {
          eventName: "EVENT_CHANGE",
          action: function action() {
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }

            _this5.fireEvent.apply(_this5, ["EVENT_CHANGE"].concat(args));
          }
        }],
        freezeCols: o.freezeCols,
        itemsCreator: o.itemsCreator,
        sortable: o.sortable,
        checkable: o.checkable,
        bordered: o.bordered,
        stripe: o.stripe,
        hover: o.hover
      },
      width: o.width,
      height: o.height,
      isNeedResize: o.isNeedResize || o.resizable,
      minColumnSize: o.minColumnSize,
      maxColumnSize: o.maxColumnSize,
      columnSize: o.columnSize,
      headerRowSize: o.headerRowSize,
      rowSize: o.rowSize,
      header: o.header,
      items: o.items
    };
  },
  setVerticalScroll: function setVerticalScroll(scrollTop) {
    return this.table.setVerticalScroll(scrollTop);
  },
  setLeftHorizontalScroll: function setLeftHorizontalScroll(scrollLeft) {},
  setRightHorizontalScroll: function setRightHorizontalScroll(scrollLeft) {},
  getVerticalScroll: function getVerticalScroll() {
    return this.table.getVerticalScroll();
  },
  getRightHorizontalScroll: function getRightHorizontalScroll() {
    return this.table.getRightHorizontalScroll();
  },
  setWidth: function setWidth(width) {
    Table.superclass.setWidth.apply(this, arguments);
    this.table.setWidth(width);
  },
  setHeight: function setHeight(height) {
    Table.superclass.setHeight.apply(this, arguments);
    this.table.setHeight(height);
  },
  setColumnSize: function setColumnSize(columnSize) {
    this.table.setColumnSize(columnSize);
  },
  getColumnSize: function getColumnSize() {
    return this.options.columnSize;
  },
  populate: function populate(items, header) {
    this.table.populate(items, header);
  },
  getValue: function getValue() {
    return this.innerTable.getValue();
  },
  restore: function restore() {
    this.table.restore();
  }
});
BI.shortcut("bi.components.table", Table);

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by astronaut007 on 2018/10/23
 */
!function () {
  BI.WaterMark = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-watermark",
      watermark: {},
      angle: 20 // 水印倾斜度数

    },
    mounted: function mounted() {
      var self = this;
      BI.$(this.container.paper.canvas).css({
        position: "absolute",
        zIndex: "99999",
        pointerEvents: "none"
      });
      this.canvas = BI.Func.createEmptyCanvas();

      this._paint();

      BI.ResizeDetector.addResizeListener(this, function () {
        self._paint();
      });
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.value = BI.extend({
        text: "",
        fontSize: 12,
        color: "#999",
        horizontalGap: 200,
        verticalGap: 100
      }, o.watermark);
      return {
        type: "bi.svg",
        ref: function ref(_ref) {
          self.container = _ref;
        }
      };
    },
    _initCanvas: function _initCanvas() {
      var containerWidth = this.container.element.width(),
          containerHeight = this.container.element.height();

      if (containerHeight === 0 || containerWidth === 0) {
        return false;
      }

      this.canvas.width = containerWidth;
      this.canvas.height = containerHeight;
      return true;
    },
    _initSvg: function _initSvg() {
      if (this.svgImage) {
        this.container.clear();
      }
    },
    _paint: function _paint() {
      if (this._initCanvas()) {
        this._initSvg(); // 将离屏canvas绘制的水印转为svg中的image元素


        BI.Func.paintWaterMark(this.canvas, this.value);
        var imgURL = this.canvas.toDataURL("image/png");
        this.svgImage = this.container.image(imgURL, 0, 0, this.canvas.width, this.canvas.height);
      }
    },
    setValue: function setValue(value) {
      this.value = BI.extend(this.value, value);

      this._paint();
    }
  });
  BI.shortcut("bi.watermark", BI.WaterMark);
}();

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by astronaut007 on 2018/10/23
 */
!function () {
  BI.DivWaterMark = BI.inherit(BI.Widget, {
    props: {
      baseCls: "bi-div-watermark",
      watermark: {},
      angle: 20 // 水印倾斜度数

    },
    mounted: function mounted() {
      var self = this,
          o = this.options;
      this.element.css({
        fontSize: this.value.fontSize + "px",
        color: this.value.color
      });

      this._showWatermark();

      BI.ResizeDetector.addResizeListener(this, function () {
        self._showWatermark();
      });
    },
    render: function render() {
      var self = this,
          o = this.options;
      this.value = BI.extend({
        text: "",
        fontSize: 12,
        color: "#999",
        horizontalGap: 200,
        verticalGap: 100
      }, o.watermark);
      this.deg = Math.PI / 180 * this.options.angle;
      this.markWidth = BI.DOM.getTextSizeWidth(this.value.text, this.value.fontSize) + this.value.horizontalGap;
      return {
        type: "bi.absolute",
        ref: function ref(_ref) {
          self.container = _ref;
        },
        items: [{
          el: {
            type: "bi.button_group",
            layouts: [{
              type: "bi.vertical",
              bgap: this.value.verticalGap
            }],
            cls: "watermark-container",
            ref: function ref(_ref2) {
              self.watermarkContainer = _ref2;
            }
          },
          left: 0,
          top: 0,
          right: 0,
          bottom: 0
        }]
      };
    },
    setValue: function setValue(value) {
      this.value = BI.extend(this.value, value);

      this._showWatermark();
    },
    _showWatermark: function _showWatermark() {
      var self = this,
          o = this.options;
      var hgap = this.value.horizontalGap;
      this.markWidth = BI.DOM.getTextSizeWidth(this.value.text, this.value.fontSize) + hgap;

      var items = [],
          actualSize = this._getContainerSize();

      var textHeight = BI.DOM.getTextSizeHeight(this.value.text, this.value.fontSize);
      var watermarkHeight = textHeight + this.value.verticalGap;
      var col = BI.parseInt(actualSize.width / this.markWidth);
      var row = BI.parseInt(actualSize.height / watermarkHeight);

      var style = this._addFilterForOldIE();

      var texts = (this.value.text + "").split("\n");

      for (var r = 0; r < row + 3; r++) {
        var rowItems = [];

        for (var c = 0; c < col + 3; c++) {
          var markItem;

          if (texts.length > 1) {
            markItem = BI.createWidget({
              type: "bi.vertical",
              hgap: hgap / 2,
              items: BI.map(texts, function (i, text) {
                return {
                  type: "bi.label",
                  cls: "watermark-text",
                  text: text
                };
              })
            });
          } else {
            markItem = BI.createWidget({
              type: "bi.label",
              hgap: hgap / 2,
              cls: "watermark-text",
              text: this.value.text
            });
          }

          markItem.element.css(BI.extend({
            fontSize: self.value.fontSize + "px",
            color: self.value.color
          }, style));
          rowItems.push(markItem);
        }

        items.push({
          el: {
            type: "bi.horizontal",
            scrollx: false,
            items: rowItems
          },
          lgap: r % 2 === 0 ? -(this.markWidth / 2) : 0
        });
      }

      this.watermarkContainer.populate(items);
      this.container.attr("items")[0].left = -this._getContainerLeft();
      this.container.attr("items")[0].right = -this.markWidth;
      this.container.attr("items")[0].bottom = -this._getContainerBottom();
      this.container.resize();
    },
    _addFilterForOldIE: function _addFilterForOldIE() {
      if (BI.isIE9Below()) {
        var rad = -this.deg;
        var m11 = Math.cos(rad),
            m12 = -1 * Math.sin(rad),
            m21 = Math.sin(rad),
            m22 = m11;
        var filters = "progid:DXImageTransform.Microsoft.Chroma(color='white') progid:DXImageTransform.Microsoft.Matrix(M11=" + m11 + ",M12=" + m12 + ",M21=" + m21 + ",M22=" + m22 + ",SizingMethod='auto expand')";
        return {
          filter: filters
        };
      }

      return {};
    },
    _getContainerSize: function _getContainerSize() {
      var height = this.element.height(),
          width = this.element.width();
      return {
        width: width * Math.cos(this.deg) + height * Math.sin(this.deg),
        height: width * Math.sin(this.deg) + height / Math.cos(this.deg)
      };
    },
    _getContainerLeft: function _getContainerLeft() {
      var height = this.element.height();
      return height * Math.tan(Math.PI / 180 * 20);
    },
    _getContainerBottom: function _getContainerBottom() {
      return this._getContainerSize().height - this.element.height();
    }
  });
  BI.shortcut("bi.div.watermark", BI.DivWaterMark);
}();

/***/ }),
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(window, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // define __esModule on exports

      /******/


      __webpack_require__.r = function (exports) {
        /******/
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          /******/
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
          /******/
        }
        /******/


        Object.defineProperty(exports, '__esModule', {
          value: true
        });
        /******/
      };
      /******/

      /******/
      // create a fake namespace object

      /******/
      // mode & 1: value is a module id, require it

      /******/
      // mode & 2: merge all properties of value into the ns

      /******/
      // mode & 4: return value when already ns object

      /******/
      // mode & 8|1: behave like require

      /******/


      __webpack_require__.t = function (value, mode) {
        /******/
        if (mode & 1) value = __webpack_require__(value);
        /******/

        if (mode & 8) return value;
        /******/

        if (mode & 4 && _typeof(value) === 'object' && value && value.__esModule) return value;
        /******/

        var ns = Object.create(null);
        /******/

        __webpack_require__.r(ns);
        /******/


        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value
        });
        /******/

        if (mode & 2 && typeof value != 'string') for (var key in value) {
          __webpack_require__.d(ns, key, function (key) {
            return value[key];
          }.bind(null, key));
        }
        /******/

        return ns;
        /******/
      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 66);
      /******/
    }
    /************************************************************************/

    /******/
    ([
    /* 0 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _AbstractEvent = __webpack_require__(64);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _AbstractEvent2["default"];
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _AbstractPlugin = __webpack_require__(60);

      var _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _AbstractPlugin2["default"];
      /***/
    },
    /* 2 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _closest = __webpack_require__(51);

      Object.defineProperty(exports, 'closest', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_closest)["default"];
        }
      });

      var _requestNextAnimationFrame = __webpack_require__(49);

      Object.defineProperty(exports, 'requestNextAnimationFrame', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_requestNextAnimationFrame)["default"];
        }
      });

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /***/

    },
    /* 3 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _SensorEvent = __webpack_require__(44);

      Object.keys(_SensorEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _SensorEvent[key];
          }
        });
      });
      /***/
    },
    /* 4 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _Sensor = __webpack_require__(47);

      var _Sensor2 = _interopRequireDefault(_Sensor);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Sensor2["default"];
      /***/
    },
    /* 5 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _DragEvent = __webpack_require__(14);

      Object.keys(_DragEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _DragEvent[key];
          }
        });
      });

      var _DraggableEvent = __webpack_require__(13);

      Object.keys(_DraggableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _DraggableEvent[key];
          }
        });
      });

      var _Plugins = __webpack_require__(12);

      Object.keys(_Plugins).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _Plugins[key];
          }
        });
      });

      var _Sensors = __webpack_require__(6);

      Object.keys(_Sensors).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _Sensors[key];
          }
        });
      });

      var _Draggable = __webpack_require__(37);

      var _Draggable2 = _interopRequireDefault(_Draggable);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Draggable2["default"];
      /***/
    },
    /* 6 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _Sensor = __webpack_require__(4);

      Object.defineProperty(exports, 'Sensor', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Sensor)["default"];
        }
      });

      var _MouseSensor = __webpack_require__(46);

      Object.defineProperty(exports, 'MouseSensor', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_MouseSensor)["default"];
        }
      });

      var _TouchSensor = __webpack_require__(43);

      Object.defineProperty(exports, 'TouchSensor', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_TouchSensor)["default"];
        }
      });

      var _DragSensor = __webpack_require__(41);

      Object.defineProperty(exports, 'DragSensor', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_DragSensor)["default"];
        }
      });

      var _ForceTouchSensor = __webpack_require__(39);

      Object.defineProperty(exports, 'ForceTouchSensor', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_ForceTouchSensor)["default"];
        }
      });

      var _SensorEvent = __webpack_require__(3);

      Object.keys(_SensorEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _SensorEvent[key];
          }
        });
      });

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /***/

    },
    /* 7 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _SnappableEvent = __webpack_require__(18);

      Object.keys(_SnappableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _SnappableEvent[key];
          }
        });
      });
      /***/
    },
    /* 8 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _CollidableEvent = __webpack_require__(23);

      Object.keys(_CollidableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _CollidableEvent[key];
          }
        });
      });
      /***/
    },
    /* 9 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _SortableEvent = __webpack_require__(27);

      Object.keys(_SortableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _SortableEvent[key];
          }
        });
      });
      /***/
    },
    /* 10 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _SwappableEvent = __webpack_require__(30);

      Object.keys(_SwappableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _SwappableEvent[key];
          }
        });
      });
      /***/
    },
    /* 11 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _DroppableEvent = __webpack_require__(33);

      Object.keys(_DroppableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _DroppableEvent[key];
          }
        });
      });
      /***/
    },
    /* 12 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _Announcement = __webpack_require__(62);

      Object.defineProperty(exports, 'Announcement', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Announcement)["default"];
        }
      });
      Object.defineProperty(exports, 'defaultAnnouncementOptions', {
        enumerable: true,
        get: function get() {
          return _Announcement.defaultOptions;
        }
      });

      var _Focusable = __webpack_require__(59);

      Object.defineProperty(exports, 'Focusable', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Focusable)["default"];
        }
      });

      var _Mirror = __webpack_require__(57);

      Object.defineProperty(exports, 'Mirror', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Mirror)["default"];
        }
      });
      Object.defineProperty(exports, 'defaultMirrorOptions', {
        enumerable: true,
        get: function get() {
          return _Mirror.defaultOptions;
        }
      });

      var _Scrollable = __webpack_require__(53);

      Object.defineProperty(exports, 'Scrollable', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Scrollable)["default"];
        }
      });
      Object.defineProperty(exports, 'defaultScrollableOptions', {
        enumerable: true,
        get: function get() {
          return _Scrollable.defaultOptions;
        }
      });

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /***/

    },
    /* 13 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _DraggableEvent = __webpack_require__(63);

      Object.keys(_DraggableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _DraggableEvent[key];
          }
        });
      });
      /***/
    },
    /* 14 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _DragEvent = __webpack_require__(65);

      Object.keys(_DragEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _DragEvent[key];
          }
        });
      });
      /***/
    },
    /* 15 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = undefined;

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _AbstractPlugin = __webpack_require__(1);

      var _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onSortableSorted = Symbol('onSortableSorted');
      /**
       * SwapAnimation default options
       * @property {Object} defaultOptions
       * @property {Number} defaultOptions.duration
       * @property {String} defaultOptions.easingFunction
       * @property {Boolean} defaultOptions.horizontal
       * @type {Object}
       */

      var defaultOptions = exports.defaultOptions = {
        duration: 150,
        easingFunction: 'ease-in-out',
        horizontal: false
      };
      /**
       * SwapAnimation plugin adds swap animations for sortable
       * @class SwapAnimation
       * @module SwapAnimation
       * @extends AbstractPlugin
       */

      var SwapAnimation = /*#__PURE__*/function (_AbstractPlugin2$defa) {
        _inheritsLoose(SwapAnimation, _AbstractPlugin2$defa);

        /**
         * SwapAnimation constructor.
         * @constructs SwapAnimation
         * @param {Draggable} draggable - Draggable instance
         */
        function SwapAnimation(draggable) {
          var _this;

          _this = _AbstractPlugin2$defa.call(this, draggable) || this;
          /**
           * SwapAnimation options
           * @property {Object} options
           * @property {Number} defaultOptions.duration
           * @property {String} defaultOptions.easingFunction
           * @type {Object}
           */

          _this.options = _extends({}, defaultOptions, _this.getOptions());
          /**
           * Last animation frame
           * @property {Number} lastAnimationFrame
           * @type {Number}
           */

          _this.lastAnimationFrame = null;
          _this[onSortableSorted] = _this[onSortableSorted].bind(_assertThisInitialized(_this));
          return _this;
        }
        /**
         * Attaches plugins event listeners
         */


        var _proto = SwapAnimation.prototype;

        _proto.attach = function attach() {
          this.draggable.on('sortable:sorted', this[onSortableSorted]);
        }
        /**
         * Detaches plugins event listeners
         */
        ;

        _proto.detach = function detach() {
          this.draggable.off('sortable:sorted', this[onSortableSorted]);
        }
        /**
         * Returns options passed through draggable
         * @return {Object}
         */
        ;

        _proto.getOptions = function getOptions() {
          return this.draggable.options.swapAnimation || {};
        }
        /**
         * Sortable sorted handler
         * @param {SortableSortedEvent} sortableEvent
         * @private
         */
        ;

        _proto[onSortableSorted] = function (_ref8) {
          var _this2 = this;

          var oldIndex = _ref8.oldIndex,
              newIndex = _ref8.newIndex,
              dragEvent = _ref8.dragEvent;
          var source = dragEvent.source,
              over = dragEvent.over;
          cancelAnimationFrame(this.lastAnimationFrame); // Can be done in a separate frame

          this.lastAnimationFrame = requestAnimationFrame(function () {
            if (oldIndex >= newIndex) {
              animate(source, over, _this2.options);
            } else {
              animate(over, source, _this2.options);
            }
          });
        };

        return SwapAnimation;
      }(_AbstractPlugin2["default"]);

      exports["default"] = SwapAnimation;
      /**
       * Animates two elements
       * @param {HTMLElement} from
       * @param {HTMLElement} to
       * @param {Object} options
       * @param {Number} options.duration
       * @param {String} options.easingFunction
       * @param {String} options.horizontal
       * @private
       */

      function animate(from, to, _ref9) {
        var duration = _ref9.duration,
            easingFunction = _ref9.easingFunction,
            horizontal = _ref9.horizontal;

        for (var _i = 0, _arr = [from, to]; _i < _arr.length; _i++) {
          var element = _arr[_i];
          element.style.pointerEvents = 'none';
        }

        if (horizontal) {
          var width = from.offsetWidth;
          from.style.transform = "translate3d(".concat(width, "px, 0, 0)");
          to.style.transform = "translate3d(-".concat(width, "px, 0, 0)");
        } else {
          var height = from.offsetHeight;
          from.style.transform = "translate3d(0, ".concat(height, "px, 0)");
          to.style.transform = "translate3d(0, -".concat(height, "px, 0)");
        }

        requestAnimationFrame(function () {
          for (var _i2 = 0, _arr2 = [from, to]; _i2 < _arr2.length; _i2++) {
            var _element = _arr2[_i2];

            _element.addEventListener('transitionend', resetElementOnTransitionEnd);

            _element.style.transition = "transform ".concat(duration, "ms ").concat(easingFunction);
            _element.style.transform = '';
          }
        });
      }
      /**
       * Resets animation style properties after animation has completed
       * @param {Event} event
       * @private
       */


      function resetElementOnTransitionEnd(event) {
        event.target.style.transition = '';
        event.target.style.pointerEvents = '';
        event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);
      }
      /***/

    },
    /* 16 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = undefined;

      var _SwapAnimation = __webpack_require__(15);

      var _SwapAnimation2 = _interopRequireDefault(_SwapAnimation);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _SwapAnimation2["default"];
      exports.defaultOptions = _SwapAnimation.defaultOptions;
      /***/
    },
    /* 17 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _AbstractPlugin = __webpack_require__(1);

      var _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);

      var _SnappableEvent = __webpack_require__(7);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onDragStart = Symbol('onDragStart');
      var onDragStop = Symbol('onDragStop');
      var onDragOver = Symbol('onDragOver');
      var onDragOut = Symbol('onDragOut');
      var onMirrorCreated = Symbol('onMirrorCreated');
      var onMirrorDestroy = Symbol('onMirrorDestroy');
      /**
       * Snappable plugin which snaps draggable elements into place
       * @class Snappable
       * @module Snappable
       * @extends AbstractPlugin
       */

      var Snappable = /*#__PURE__*/function (_AbstractPlugin2$defa2) {
        _inheritsLoose(Snappable, _AbstractPlugin2$defa2);

        /**
         * Snappable constructor.
         * @constructs Snappable
         * @param {Draggable} draggable - Draggable instance
         */
        function Snappable(draggable) {
          var _this3;

          _this3 = _AbstractPlugin2$defa2.call(this, draggable) || this;
          /**
           * Keeps track of the first source element
           * @property {HTMLElement|null} firstSource
           */

          _this3.firstSource = null;
          /**
           * Keeps track of the mirror element
           * @property {HTMLElement} mirror
           */

          _this3.mirror = null;
          _this3[onDragStart] = _this3[onDragStart].bind(_assertThisInitialized(_this3));
          _this3[onDragStop] = _this3[onDragStop].bind(_assertThisInitialized(_this3));
          _this3[onDragOver] = _this3[onDragOver].bind(_assertThisInitialized(_this3));
          _this3[onDragOut] = _this3[onDragOut].bind(_assertThisInitialized(_this3));
          _this3[onMirrorCreated] = _this3[onMirrorCreated].bind(_assertThisInitialized(_this3));
          _this3[onMirrorDestroy] = _this3[onMirrorDestroy].bind(_assertThisInitialized(_this3));
          return _this3;
        }
        /**
         * Attaches plugins event listeners
         */


        var _proto2 = Snappable.prototype;

        _proto2.attach = function attach() {
          this.draggable.on('drag:start', this[onDragStart]).on('drag:stop', this[onDragStop]).on('drag:over', this[onDragOver]).on('drag:out', this[onDragOut]).on('droppable:over', this[onDragOver]).on('droppable:out', this[onDragOut]).on('mirror:created', this[onMirrorCreated]).on('mirror:destroy', this[onMirrorDestroy]);
        }
        /**
         * Detaches plugins event listeners
         */
        ;

        _proto2.detach = function detach() {
          this.draggable.off('drag:start', this[onDragStart]).off('drag:stop', this[onDragStop]).off('drag:over', this[onDragOver]).off('drag:out', this[onDragOut]).off('droppable:over', this[onDragOver]).off('droppable:out', this[onDragOut]).off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]);
        }
        /**
         * Drag start handler
         * @private
         * @param {DragStartEvent} event - Drag start event
         */
        ;

        _proto2[onDragStart] = function (event) {
          if (event.canceled()) {
            return;
          }

          this.firstSource = event.source;
        }
        /**
         * Drag stop handler
         * @private
         * @param {DragStopEvent} event - Drag stop event
         */
        ;

        _proto2[onDragStop] = function () {
          this.firstSource = null;
        }
        /**
         * Drag over handler
         * @private
         * @param {DragOverEvent|DroppableOverEvent} event - Drag over event
         */
        ;

        _proto2[onDragOver] = function (event) {
          var _this4 = this;

          if (event.canceled()) {
            return;
          }

          var source = event.source || event.dragEvent.source;

          if (source === this.firstSource) {
            this.firstSource = null;
            return;
          }

          var snapInEvent = new _SnappableEvent.SnapInEvent({
            dragEvent: event,
            snappable: event.over || event.droppable
          });
          this.draggable.trigger(snapInEvent);

          if (snapInEvent.canceled()) {
            return;
          }

          if (this.mirror) {
            this.mirror.style.display = 'none';
          }

          source.classList.remove(this.draggable.getClassNameFor('source:dragging'));
          source.classList.add(this.draggable.getClassNameFor('source:placed')); // Need to cancel this in drag out

          setTimeout(function () {
            source.classList.remove(_this4.draggable.getClassNameFor('source:placed'));
          }, this.draggable.options.placedTimeout);
        }
        /**
         * Drag out handler
         * @private
         * @param {DragOutEvent|DroppableOutEvent} event - Drag out event
         */
        ;

        _proto2[onDragOut] = function (event) {
          if (event.canceled()) {
            return;
          }

          var source = event.source || event.dragEvent.source;
          var snapOutEvent = new _SnappableEvent.SnapOutEvent({
            dragEvent: event,
            snappable: event.over || event.droppable
          });
          this.draggable.trigger(snapOutEvent);

          if (snapOutEvent.canceled()) {
            return;
          }

          if (this.mirror) {
            this.mirror.style.display = '';
          }

          source.classList.add(this.draggable.getClassNameFor('source:dragging'));
        }
        /**
         * Mirror created handler
         * @param {MirrorCreatedEvent} mirrorEvent
         * @private
         */
        ;

        _proto2[onMirrorCreated] = function (_ref10) {
          var mirror = _ref10.mirror;
          this.mirror = mirror;
        }
        /**
         * Mirror destroy handler
         * @param {MirrorDestroyEvent} mirrorEvent
         * @private
         */
        ;

        _proto2[onMirrorDestroy] = function () {
          this.mirror = null;
        };

        return Snappable;
      }(_AbstractPlugin2["default"]);

      exports["default"] = Snappable;
      /***/
    },
    /* 18 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SnapOutEvent = exports.SnapInEvent = exports.SnapEvent = undefined;

      var _AbstractEvent = __webpack_require__(0);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /**
       * Base snap event
       * @class SnapEvent
       * @module SnapEvent
       * @extends AbstractEvent
       */


      var SnapEvent = /*#__PURE__*/function (_AbstractEvent2$defau) {
        _inheritsLoose(SnapEvent, _AbstractEvent2$defau);

        function SnapEvent() {
          return _AbstractEvent2$defau.apply(this, arguments) || this;
        }

        _createClass(SnapEvent, [{
          key: "dragEvent",

          /**
           * Drag event that triggered this snap event
           * @property dragEvent
           * @type {DragEvent}
           * @readonly
           */
          get: function get() {
            return this.data.dragEvent;
          }
          /**
           * Snappable element
           * @property snappable
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "snappable",
          get: function get() {
            return this.data.snappable;
          }
        }]);

        return SnapEvent;
      }(_AbstractEvent2["default"]);

      exports.SnapEvent = SnapEvent;
      /**
       * Snap in event
       * @class SnapInEvent
       * @module SnapInEvent
       * @extends SnapEvent
       */

      SnapEvent.type = 'snap';

      var SnapInEvent = /*#__PURE__*/function (_SnapEvent) {
        _inheritsLoose(SnapInEvent, _SnapEvent);

        function SnapInEvent() {
          return _SnapEvent.apply(this, arguments) || this;
        }

        return SnapInEvent;
      }(SnapEvent);

      exports.SnapInEvent = SnapInEvent;
      /**
       * Snap out event
       * @class SnapOutEvent
       * @module SnapOutEvent
       * @extends SnapEvent
       */

      SnapInEvent.type = 'snap:in';
      SnapInEvent.cancelable = true;

      var SnapOutEvent = /*#__PURE__*/function (_SnapEvent2) {
        _inheritsLoose(SnapOutEvent, _SnapEvent2);

        function SnapOutEvent() {
          return _SnapEvent2.apply(this, arguments) || this;
        }

        return SnapOutEvent;
      }(SnapEvent);

      exports.SnapOutEvent = SnapOutEvent;
      SnapOutEvent.type = 'snap:out';
      SnapOutEvent.cancelable = true;
      /***/
    },
    /* 19 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _SnappableEvent = __webpack_require__(7);

      Object.keys(_SnappableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _SnappableEvent[key];
          }
        });
      });

      var _Snappable = __webpack_require__(17);

      var _Snappable2 = _interopRequireDefault(_Snappable);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Snappable2["default"];
      /***/
    },
    /* 20 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = undefined;

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _AbstractPlugin = __webpack_require__(1);

      var _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);

      var _utils = __webpack_require__(2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onMirrorCreated = Symbol('onMirrorCreated');
      var onMirrorDestroy = Symbol('onMirrorDestroy');
      var onDragOver = Symbol('onDragOver');
      var resize = Symbol('resize');
      /**
       * ResizeMirror default options
       * @property {Object} defaultOptions
       * @type {Object}
       */

      var defaultOptions = exports.defaultOptions = {};
      /**
       * The ResizeMirror plugin resizes the mirror element to the dimensions of the draggable element that the mirror is hovering over
       * @class ResizeMirror
       * @module ResizeMirror
       * @extends AbstractPlugin
       */

      var ResizeMirror = /*#__PURE__*/function (_AbstractPlugin2$defa3) {
        _inheritsLoose(ResizeMirror, _AbstractPlugin2$defa3);

        /**
         * ResizeMirror constructor.
         * @constructs ResizeMirror
         * @param {Draggable} draggable - Draggable instance
         */
        function ResizeMirror(draggable) {
          var _this5;

          _this5 = _AbstractPlugin2$defa3.call(this, draggable) || this;
          /**
           * ResizeMirror options
           * @property {Object} options
           * @type {Object}
           */

          _this5.options = _extends({}, defaultOptions, _this5.getOptions());
          /**
           * ResizeMirror remembers the last width when resizing the mirror
           * to avoid additional writes to the DOM
           * @property {number} lastWidth
           */

          _this5.lastWidth = 0;
          /**
           * ResizeMirror remembers the last height when resizing the mirror
           * to avoid additional writes to the DOM
           * @property {number} lastHeight
           */

          _this5.lastHeight = 0;
          /**
           * Keeps track of the mirror element
           * @property {HTMLElement} mirror
           */

          _this5.mirror = null;
          _this5[onMirrorCreated] = _this5[onMirrorCreated].bind(_assertThisInitialized(_this5));
          _this5[onMirrorDestroy] = _this5[onMirrorDestroy].bind(_assertThisInitialized(_this5));
          _this5[onDragOver] = _this5[onDragOver].bind(_assertThisInitialized(_this5));
          return _this5;
        }
        /**
         * Attaches plugins event listeners
         */


        var _proto3 = ResizeMirror.prototype;

        _proto3.attach = function attach() {
          this.draggable.on('mirror:created', this[onMirrorCreated]).on('drag:over', this[onDragOver]).on('drag:over:container', this[onDragOver]);
        }
        /**
         * Detaches plugins event listeners
         */
        ;

        _proto3.detach = function detach() {
          this.draggable.off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]).off('drag:over', this[onDragOver]).off('drag:over:container', this[onDragOver]);
        }
        /**
         * Returns options passed through draggable
         * @return {Object}
         */
        ;

        _proto3.getOptions = function getOptions() {
          return this.draggable.options.resizeMirror || {};
        }
        /**
         * Mirror created handler
         * @param {MirrorCreatedEvent} mirrorEvent
         * @private
         */
        ;

        _proto3[onMirrorCreated] = function (_ref11) {
          var mirror = _ref11.mirror;
          this.mirror = mirror;
        }
        /**
         * Mirror destroy handler
         * @param {MirrorDestroyEvent} mirrorEvent
         * @private
         */
        ;

        _proto3[onMirrorDestroy] = function () {
          this.mirror = null;
        }
        /**
         * Drag over handler
         * @param {DragOverEvent | DragOverContainer} dragEvent
         * @private
         */
        ;

        _proto3[onDragOver] = function (dragEvent) {
          this[resize](dragEvent);
        }
        /**
         * Resize function for
         * @param {DragOverEvent | DragOverContainer} dragEvent
         * @private
         */
        ;

        _proto3[resize] = function (_ref12) {
          var _this6 = this;

          var overContainer = _ref12.overContainer,
              over = _ref12.over;
          requestAnimationFrame(function () {
            if (_this6.mirror.parentNode !== overContainer) {
              overContainer.appendChild(_this6.mirror);
            }

            var overElement = over || _this6.draggable.getDraggableElementsForContainer(overContainer)[0];

            if (!overElement) {
              return;
            }

            (0, _utils.requestNextAnimationFrame)(function () {
              var overRect = overElement.getBoundingClientRect();

              if (_this6.lastHeight === overRect.height && _this6.lastWidth === overRect.width) {
                return;
              }

              _this6.mirror.style.width = "".concat(overRect.width, "px");
              _this6.mirror.style.height = "".concat(overRect.height, "px");
              _this6.lastWidth = overRect.width;
              _this6.lastHeight = overRect.height;
            });
          });
        };

        return ResizeMirror;
      }(_AbstractPlugin2["default"]);

      exports["default"] = ResizeMirror;
      /***/
    },
    /* 21 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = undefined;

      var _ResizeMirror = __webpack_require__(20);

      var _ResizeMirror2 = _interopRequireDefault(_ResizeMirror);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _ResizeMirror2["default"];
      exports.defaultOptions = _ResizeMirror.defaultOptions;
      /***/
    },
    /* 22 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _AbstractPlugin = __webpack_require__(1);

      var _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);

      var _utils = __webpack_require__(2);

      var _CollidableEvent = __webpack_require__(8);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onDragMove = Symbol('onDragMove');
      var onDragStop = Symbol('onDragStop');
      var onRequestAnimationFrame = Symbol('onRequestAnimationFrame');
      /**
       * Collidable plugin which detects colliding elements while dragging
       * @class Collidable
       * @module Collidable
       * @extends AbstractPlugin
       */

      var Collidable = /*#__PURE__*/function (_AbstractPlugin2$defa4) {
        _inheritsLoose(Collidable, _AbstractPlugin2$defa4);

        /**
         * Collidable constructor.
         * @constructs Collidable
         * @param {Draggable} draggable - Draggable instance
         */
        function Collidable(draggable) {
          var _this7;

          _this7 = _AbstractPlugin2$defa4.call(this, draggable) || this;
          /**
           * Keeps track of currently colliding elements
           * @property {HTMLElement|null} currentlyCollidingElement
           * @type {HTMLElement|null}
           */

          _this7.currentlyCollidingElement = null;
          /**
           * Keeps track of currently colliding elements
           * @property {HTMLElement|null} lastCollidingElement
           * @type {HTMLElement|null}
           */

          _this7.lastCollidingElement = null;
          /**
           * Animation frame for finding colliding elements
           * @property {Number|null} currentAnimationFrame
           * @type {Number|null}
           */

          _this7.currentAnimationFrame = null;
          _this7[onDragMove] = _this7[onDragMove].bind(_assertThisInitialized(_this7));
          _this7[onDragStop] = _this7[onDragStop].bind(_assertThisInitialized(_this7));
          _this7[onRequestAnimationFrame] = _this7[onRequestAnimationFrame].bind(_assertThisInitialized(_this7));
          return _this7;
        }
        /**
         * Attaches plugins event listeners
         */


        var _proto4 = Collidable.prototype;

        _proto4.attach = function attach() {
          this.draggable.on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);
        }
        /**
         * Detaches plugins event listeners
         */
        ;

        _proto4.detach = function detach() {
          this.draggable.off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);
        }
        /**
         * Returns current collidables based on `collidables` option
         * @return {HTMLElement[]}
         */
        ;

        _proto4.getCollidables = function getCollidables() {
          var collidables = this.draggable.options.collidables;

          if (typeof collidables === 'string') {
            return Array.prototype.slice.call(document.querySelectorAll(collidables));
          } else if (collidables instanceof NodeList || collidables instanceof Array) {
            return Array.prototype.slice.call(collidables);
          } else if (collidables instanceof HTMLElement) {
            return [collidables];
          } else if (typeof collidables === 'function') {
            return collidables();
          } else {
            return [];
          }
        }
        /**
         * Drag move handler
         * @private
         * @param {DragMoveEvent} event - Drag move event
         */
        ;

        _proto4[onDragMove] = function (event) {
          var target = event.sensorEvent.target;
          this.currentAnimationFrame = requestAnimationFrame(this[onRequestAnimationFrame](target));

          if (this.currentlyCollidingElement) {
            event.cancel();
          }

          var collidableInEvent = new _CollidableEvent.CollidableInEvent({
            dragEvent: event,
            collidingElement: this.currentlyCollidingElement
          });
          var collidableOutEvent = new _CollidableEvent.CollidableOutEvent({
            dragEvent: event,
            collidingElement: this.lastCollidingElement
          });
          var enteringCollidable = Boolean(this.currentlyCollidingElement && this.lastCollidingElement !== this.currentlyCollidingElement);
          var leavingCollidable = Boolean(!this.currentlyCollidingElement && this.lastCollidingElement);

          if (enteringCollidable) {
            if (this.lastCollidingElement) {
              this.draggable.trigger(collidableOutEvent);
            }

            this.draggable.trigger(collidableInEvent);
          } else if (leavingCollidable) {
            this.draggable.trigger(collidableOutEvent);
          }

          this.lastCollidingElement = this.currentlyCollidingElement;
        }
        /**
         * Drag stop handler
         * @private
         * @param {DragStopEvent} event - Drag stop event
         */
        ;

        _proto4[onDragStop] = function (event) {
          var lastCollidingElement = this.currentlyCollidingElement || this.lastCollidingElement;
          var collidableOutEvent = new _CollidableEvent.CollidableOutEvent({
            dragEvent: event,
            collidingElement: lastCollidingElement
          });

          if (lastCollidingElement) {
            this.draggable.trigger(collidableOutEvent);
          }

          this.lastCollidingElement = null;
          this.currentlyCollidingElement = null;
        }
        /**
         * Animation frame function
         * @private
         * @param {HTMLElement} target - Current move target
         * @return {Function}
         */
        ;

        _proto4[onRequestAnimationFrame] = function (target) {
          var _this8 = this;

          return function () {
            var collidables = _this8.getCollidables();

            _this8.currentlyCollidingElement = (0, _utils.closest)(target, function (element) {
              return collidables.includes(element);
            });
          };
        };

        return Collidable;
      }(_AbstractPlugin2["default"]);

      exports["default"] = Collidable;
      /***/
    },
    /* 23 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.CollidableOutEvent = exports.CollidableInEvent = exports.CollidableEvent = undefined;

      var _AbstractEvent = __webpack_require__(0);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /**
       * Base collidable event
       * @class CollidableEvent
       * @module CollidableEvent
       * @extends AbstractEvent
       */


      var CollidableEvent = /*#__PURE__*/function (_AbstractEvent2$defau2) {
        _inheritsLoose(CollidableEvent, _AbstractEvent2$defau2);

        function CollidableEvent() {
          return _AbstractEvent2$defau2.apply(this, arguments) || this;
        }

        _createClass(CollidableEvent, [{
          key: "dragEvent",

          /**
           * Drag event that triggered this colliable event
           * @property dragEvent
           * @type {DragEvent}
           * @readonly
           */
          get: function get() {
            return this.data.dragEvent;
          }
        }]);

        return CollidableEvent;
      }(_AbstractEvent2["default"]);

      exports.CollidableEvent = CollidableEvent;
      /**
       * Collidable in event
       * @class CollidableInEvent
       * @module CollidableInEvent
       * @extends CollidableEvent
       */

      CollidableEvent.type = 'collidable';

      var CollidableInEvent = /*#__PURE__*/function (_CollidableEvent2) {
        _inheritsLoose(CollidableInEvent, _CollidableEvent2);

        function CollidableInEvent() {
          return _CollidableEvent2.apply(this, arguments) || this;
        }

        _createClass(CollidableInEvent, [{
          key: "collidingElement",

          /**
           * Element you are currently colliding with
           * @property collidingElement
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.collidingElement;
          }
        }]);

        return CollidableInEvent;
      }(CollidableEvent);

      exports.CollidableInEvent = CollidableInEvent;
      /**
       * Collidable out event
       * @class CollidableOutEvent
       * @module CollidableOutEvent
       * @extends CollidableEvent
       */

      CollidableInEvent.type = 'collidable:in';

      var CollidableOutEvent = /*#__PURE__*/function (_CollidableEvent3) {
        _inheritsLoose(CollidableOutEvent, _CollidableEvent3);

        function CollidableOutEvent() {
          return _CollidableEvent3.apply(this, arguments) || this;
        }

        _createClass(CollidableOutEvent, [{
          key: "collidingElement",

          /**
           * Element you were previously colliding with
           * @property collidingElement
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.collidingElement;
          }
        }]);

        return CollidableOutEvent;
      }(CollidableEvent);

      exports.CollidableOutEvent = CollidableOutEvent;
      CollidableOutEvent.type = 'collidable:out';
      /***/
    },
    /* 24 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _CollidableEvent = __webpack_require__(8);

      Object.keys(_CollidableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _CollidableEvent[key];
          }
        });
      });

      var _Collidable = __webpack_require__(22);

      var _Collidable2 = _interopRequireDefault(_Collidable);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Collidable2["default"];
      /***/
    },
    /* 25 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _Collidable = __webpack_require__(24);

      Object.defineProperty(exports, 'Collidable', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Collidable)["default"];
        }
      });

      var _ResizeMirror = __webpack_require__(21);

      Object.defineProperty(exports, 'ResizeMirror', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_ResizeMirror)["default"];
        }
      });
      Object.defineProperty(exports, 'defaultResizeMirrorOptions', {
        enumerable: true,
        get: function get() {
          return _ResizeMirror.defaultOptions;
        }
      });

      var _Snappable = __webpack_require__(19);

      Object.defineProperty(exports, 'Snappable', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Snappable)["default"];
        }
      });

      var _SwapAnimation = __webpack_require__(16);

      Object.defineProperty(exports, 'SwapAnimation', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_SwapAnimation)["default"];
        }
      });
      Object.defineProperty(exports, 'defaultSwapAnimationOptions', {
        enumerable: true,
        get: function get() {
          return _SwapAnimation.defaultOptions;
        }
      });

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /***/

    },
    /* 26 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _Draggable = __webpack_require__(5);

      var _Draggable2 = _interopRequireDefault(_Draggable);

      var _SortableEvent = __webpack_require__(9);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onDragStart = Symbol('onDragStart');
      var onDragOverContainer = Symbol('onDragOverContainer');
      var onDragOver = Symbol('onDragOver');
      var onDragStop = Symbol('onDragStop');
      /**
       * Returns announcement message when a Draggable element has been sorted with another Draggable element
       * or moved into a new container
       * @param {SortableSortedEvent} sortableEvent
       * @return {String}
       */

      function onSortableSortedDefaultAnnouncement(_ref13) {
        var dragEvent = _ref13.dragEvent;
        var sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'sortable element';

        if (dragEvent.over) {
          var overText = dragEvent.over.textContent.trim() || dragEvent.over.id || 'sortable element';
          var isFollowing = dragEvent.source.compareDocumentPosition(dragEvent.over) & Node.DOCUMENT_POSITION_FOLLOWING;

          if (isFollowing) {
            return "Placed ".concat(sourceText, " after ").concat(overText);
          } else {
            return "Placed ".concat(sourceText, " before ").concat(overText);
          }
        } else {
          // need to figure out how to compute container name
          return "Placed ".concat(sourceText, " into a different container");
        }
      }
      /**
       * @const {Object} defaultAnnouncements
       * @const {Function} defaultAnnouncements['sortable:sorted']
       */


      var defaultAnnouncements = {
        'sortable:sorted': onSortableSortedDefaultAnnouncement
      };
      /**
       * Sortable is built on top of Draggable and allows sorting of draggable elements. Sortable will keep
       * track of the original index and emits the new index as you drag over draggable elements.
       * @class Sortable
       * @module Sortable
       * @extends Draggable
       */

      var Sortable = /*#__PURE__*/function (_Draggable2$default) {
        _inheritsLoose(Sortable, _Draggable2$default);

        /**
         * Sortable constructor.
         * @constructs Sortable
         * @param {HTMLElement[]|NodeList|HTMLElement} containers - Sortable containers
         * @param {Object} options - Options for Sortable
         */
        function Sortable() {
          var _this9;

          var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          _this9 = _Draggable2$default.call(this, containers, _extends({}, options, {
            announcements: _extends({}, defaultAnnouncements, options.announcements || {})
          })) || this;
          /**
           * start index of source on drag start
           * @property startIndex
           * @type {Number}
           */

          _this9.startIndex = null;
          /**
           * start container on drag start
           * @property startContainer
           * @type {HTMLElement}
           * @default null
           */

          _this9.startContainer = null;
          _this9[onDragStart] = _this9[onDragStart].bind(_assertThisInitialized(_this9));
          _this9[onDragOverContainer] = _this9[onDragOverContainer].bind(_assertThisInitialized(_this9));
          _this9[onDragOver] = _this9[onDragOver].bind(_assertThisInitialized(_this9));
          _this9[onDragStop] = _this9[onDragStop].bind(_assertThisInitialized(_this9));

          _this9.on('drag:start', _this9[onDragStart]).on('drag:over:container', _this9[onDragOverContainer]).on('drag:over', _this9[onDragOver]).on('drag:stop', _this9[onDragStop]);

          return _this9;
        }
        /**
         * Destroys Sortable instance.
         */


        var _proto5 = Sortable.prototype;

        _proto5.destroy = function destroy() {
          _Draggable2$default.prototype.destroy.call(this);

          this.off('drag:start', this[onDragStart]).off('drag:over:container', this[onDragOverContainer]).off('drag:over', this[onDragOver]).off('drag:stop', this[onDragStop]);
        }
        /**
         * Returns true index of element within its container during drag operation, i.e. excluding mirror and original source
         * @param {HTMLElement} element - An element
         * @return {Number}
         */
        ;

        _proto5.index = function index(element) {
          return this.getDraggableElementsForContainer(element.parentNode).indexOf(element);
        }
        /**
         * Drag start handler
         * @private
         * @param {DragStartEvent} event - Drag start event
         */
        ;

        _proto5[onDragStart] = function (event) {
          this.startContainer = event.source.parentNode;
          this.startIndex = this.index(event.source);
          var sortableStartEvent = new _SortableEvent.SortableStartEvent({
            dragEvent: event,
            startIndex: this.startIndex,
            startContainer: this.startContainer
          });
          this.trigger(sortableStartEvent);

          if (sortableStartEvent.canceled()) {
            event.cancel();
          }
        }
        /**
         * Drag over container handler
         * @private
         * @param {DragOverContainerEvent} event - Drag over container event
         */
        ;

        _proto5[onDragOverContainer] = function (event) {
          if (event.canceled()) {
            return;
          }

          var source = event.source,
              over = event.over,
              overContainer = event.overContainer;
          var oldIndex = this.index(source);
          var sortableSortEvent = new _SortableEvent.SortableSortEvent({
            dragEvent: event,
            currentIndex: oldIndex,
            source: source,
            over: over
          });
          this.trigger(sortableSortEvent);

          if (sortableSortEvent.canceled()) {
            return;
          }

          var children = this.getDraggableElementsForContainer(overContainer);
          var moves = move({
            source: source,
            over: over,
            overContainer: overContainer,
            children: children
          });

          if (!moves) {
            return;
          }

          var oldContainer = moves.oldContainer,
              newContainer = moves.newContainer;
          var newIndex = this.index(event.source);
          var sortableSortedEvent = new _SortableEvent.SortableSortedEvent({
            dragEvent: event,
            oldIndex: oldIndex,
            newIndex: newIndex,
            oldContainer: oldContainer,
            newContainer: newContainer
          });
          this.trigger(sortableSortedEvent);
        }
        /**
         * Drag over handler
         * @private
         * @param {DragOverEvent} event - Drag over event
         */
        ;

        _proto5[onDragOver] = function (event) {
          if (event.over === event.originalSource || event.over === event.source) {
            return;
          }

          var source = event.source,
              over = event.over,
              overContainer = event.overContainer;
          var oldIndex = this.index(source);
          var sortableSortEvent = new _SortableEvent.SortableSortEvent({
            dragEvent: event,
            currentIndex: oldIndex,
            source: source,
            over: over
          });
          this.trigger(sortableSortEvent);

          if (sortableSortEvent.canceled()) {
            return;
          }

          var children = this.getDraggableElementsForContainer(overContainer);
          var moves = move({
            source: source,
            over: over,
            overContainer: overContainer,
            children: children
          });

          if (!moves) {
            return;
          }

          var oldContainer = moves.oldContainer,
              newContainer = moves.newContainer;
          var newIndex = this.index(source);
          var sortableSortedEvent = new _SortableEvent.SortableSortedEvent({
            dragEvent: event,
            oldIndex: oldIndex,
            newIndex: newIndex,
            oldContainer: oldContainer,
            newContainer: newContainer
          });
          this.trigger(sortableSortedEvent);
        }
        /**
         * Drag stop handler
         * @private
         * @param {DragStopEvent} event - Drag stop event
         */
        ;

        _proto5[onDragStop] = function (event) {
          var sortableStopEvent = new _SortableEvent.SortableStopEvent({
            dragEvent: event,
            oldIndex: this.startIndex,
            newIndex: this.index(event.source),
            oldContainer: this.startContainer,
            newContainer: event.source.parentNode
          });
          this.trigger(sortableStopEvent);
          this.startIndex = null;
          this.startContainer = null;
        };

        return Sortable;
      }(_Draggable2["default"]);

      exports["default"] = Sortable;

      function index(element) {
        return Array.prototype.indexOf.call(element.parentNode.children, element);
      }

      function move(_ref14) {
        var source = _ref14.source,
            over = _ref14.over,
            overContainer = _ref14.overContainer,
            children = _ref14.children;
        var emptyOverContainer = !children.length;
        var differentContainer = source.parentNode !== overContainer;
        var sameContainer = over && !differentContainer;

        if (emptyOverContainer) {
          return moveInsideEmptyContainer(source, overContainer);
        } else if (sameContainer) {
          return moveWithinContainer(source, over);
        } else if (differentContainer) {
          return moveOutsideContainer(source, over, overContainer);
        } else {
          return null;
        }
      }

      function moveInsideEmptyContainer(source, overContainer) {
        var oldContainer = source.parentNode;
        overContainer.appendChild(source);
        return {
          oldContainer: oldContainer,
          newContainer: overContainer
        };
      }

      function moveWithinContainer(source, over) {
        var oldIndex = index(source);
        var newIndex = index(over);

        if (oldIndex < newIndex) {
          source.parentNode.insertBefore(source, over.nextElementSibling);
        } else {
          source.parentNode.insertBefore(source, over);
        }

        return {
          oldContainer: source.parentNode,
          newContainer: source.parentNode
        };
      }

      function moveOutsideContainer(source, over, overContainer) {
        var oldContainer = source.parentNode;

        if (over) {
          over.parentNode.insertBefore(source, over);
        } else {
          // need to figure out proper position
          overContainer.appendChild(source);
        }

        return {
          oldContainer: oldContainer,
          newContainer: source.parentNode
        };
      }
      /***/

    },
    /* 27 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SortableStopEvent = exports.SortableSortedEvent = exports.SortableSortEvent = exports.SortableStartEvent = exports.SortableEvent = undefined;

      var _AbstractEvent = __webpack_require__(0);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /**
       * Base sortable event
       * @class SortableEvent
       * @module SortableEvent
       * @extends AbstractEvent
       */


      var SortableEvent = /*#__PURE__*/function (_AbstractEvent2$defau3) {
        _inheritsLoose(SortableEvent, _AbstractEvent2$defau3);

        function SortableEvent() {
          return _AbstractEvent2$defau3.apply(this, arguments) || this;
        }

        _createClass(SortableEvent, [{
          key: "dragEvent",

          /**
           * Original drag event that triggered this sortable event
           * @property dragEvent
           * @type {DragEvent}
           * @readonly
           */
          get: function get() {
            return this.data.dragEvent;
          }
        }]);

        return SortableEvent;
      }(_AbstractEvent2["default"]);

      exports.SortableEvent = SortableEvent;
      /**
       * Sortable start event
       * @class SortableStartEvent
       * @module SortableStartEvent
       * @extends SortableEvent
       */

      SortableEvent.type = 'sortable';

      var SortableStartEvent = /*#__PURE__*/function (_SortableEvent2) {
        _inheritsLoose(SortableStartEvent, _SortableEvent2);

        function SortableStartEvent() {
          return _SortableEvent2.apply(this, arguments) || this;
        }

        _createClass(SortableStartEvent, [{
          key: "startIndex",

          /**
           * Start index of source on sortable start
           * @property startIndex
           * @type {Number}
           * @readonly
           */
          get: function get() {
            return this.data.startIndex;
          }
          /**
           * Start container on sortable start
           * @property startContainer
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "startContainer",
          get: function get() {
            return this.data.startContainer;
          }
        }]);

        return SortableStartEvent;
      }(SortableEvent);

      exports.SortableStartEvent = SortableStartEvent;
      /**
       * Sortable sort event
       * @class SortableSortEvent
       * @module SortableSortEvent
       * @extends SortableEvent
       */

      SortableStartEvent.type = 'sortable:start';
      SortableStartEvent.cancelable = true;

      var SortableSortEvent = /*#__PURE__*/function (_SortableEvent3) {
        _inheritsLoose(SortableSortEvent, _SortableEvent3);

        function SortableSortEvent() {
          return _SortableEvent3.apply(this, arguments) || this;
        }

        _createClass(SortableSortEvent, [{
          key: "currentIndex",

          /**
           * Index of current draggable element
           * @property currentIndex
           * @type {Number}
           * @readonly
           */
          get: function get() {
            return this.data.currentIndex;
          }
          /**
           * Draggable element you are hovering over
           * @property over
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "over",
          get: function get() {
            return this.data.oldIndex;
          }
          /**
           * Draggable container element you are hovering over
           * @property overContainer
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "overContainer",
          get: function get() {
            return this.data.newIndex;
          }
        }]);

        return SortableSortEvent;
      }(SortableEvent);

      exports.SortableSortEvent = SortableSortEvent;
      /**
       * Sortable sorted event
       * @class SortableSortedEvent
       * @module SortableSortedEvent
       * @extends SortableEvent
       */

      SortableSortEvent.type = 'sortable:sort';
      SortableSortEvent.cancelable = true;

      var SortableSortedEvent = /*#__PURE__*/function (_SortableEvent4) {
        _inheritsLoose(SortableSortedEvent, _SortableEvent4);

        function SortableSortedEvent() {
          return _SortableEvent4.apply(this, arguments) || this;
        }

        _createClass(SortableSortedEvent, [{
          key: "oldIndex",

          /**
           * Index of last sorted event
           * @property oldIndex
           * @type {Number}
           * @readonly
           */
          get: function get() {
            return this.data.oldIndex;
          }
          /**
           * New index of this sorted event
           * @property newIndex
           * @type {Number}
           * @readonly
           */

        }, {
          key: "newIndex",
          get: function get() {
            return this.data.newIndex;
          }
          /**
           * Old container of draggable element
           * @property oldContainer
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "oldContainer",
          get: function get() {
            return this.data.oldContainer;
          }
          /**
           * New container of draggable element
           * @property newContainer
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "newContainer",
          get: function get() {
            return this.data.newContainer;
          }
        }]);

        return SortableSortedEvent;
      }(SortableEvent);

      exports.SortableSortedEvent = SortableSortedEvent;
      /**
       * Sortable stop event
       * @class SortableStopEvent
       * @module SortableStopEvent
       * @extends SortableEvent
       */

      SortableSortedEvent.type = 'sortable:sorted';

      var SortableStopEvent = /*#__PURE__*/function (_SortableEvent5) {
        _inheritsLoose(SortableStopEvent, _SortableEvent5);

        function SortableStopEvent() {
          return _SortableEvent5.apply(this, arguments) || this;
        }

        _createClass(SortableStopEvent, [{
          key: "oldIndex",

          /**
           * Original index on sortable start
           * @property oldIndex
           * @type {Number}
           * @readonly
           */
          get: function get() {
            return this.data.oldIndex;
          }
          /**
           * New index of draggable element
           * @property newIndex
           * @type {Number}
           * @readonly
           */

        }, {
          key: "newIndex",
          get: function get() {
            return this.data.newIndex;
          }
          /**
           * Original container of draggable element
           * @property oldContainer
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "oldContainer",
          get: function get() {
            return this.data.oldContainer;
          }
          /**
           * New container of draggable element
           * @property newContainer
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "newContainer",
          get: function get() {
            return this.data.newContainer;
          }
        }]);

        return SortableStopEvent;
      }(SortableEvent);

      exports.SortableStopEvent = SortableStopEvent;
      SortableStopEvent.type = 'sortable:stop';
      /***/
    },
    /* 28 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _SortableEvent = __webpack_require__(9);

      Object.keys(_SortableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _SortableEvent[key];
          }
        });
      });

      var _Sortable = __webpack_require__(26);

      var _Sortable2 = _interopRequireDefault(_Sortable);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Sortable2["default"];
      /***/
    },
    /* 29 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _Draggable = __webpack_require__(5);

      var _Draggable2 = _interopRequireDefault(_Draggable);

      var _SwappableEvent = __webpack_require__(10);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onDragStart = Symbol('onDragStart');
      var onDragOver = Symbol('onDragOver');
      var onDragStop = Symbol('onDragStop');
      /**
       * Returns an announcement message when the Draggable element is swapped with another draggable element
       * @param {SwappableSwappedEvent} swappableEvent
       * @return {String}
       */

      function onSwappableSwappedDefaultAnnouncement(_ref15) {
        var dragEvent = _ref15.dragEvent,
            swappedElement = _ref15.swappedElement;
        var sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'swappable element';
        var overText = swappedElement.textContent.trim() || swappedElement.id || 'swappable element';
        return "Swapped ".concat(sourceText, " with ").concat(overText);
      }
      /**
       * @const {Object} defaultAnnouncements
       * @const {Function} defaultAnnouncements['swappabled:swapped']
       */


      var defaultAnnouncements = {
        'swappabled:swapped': onSwappableSwappedDefaultAnnouncement
      };
      /**
       * Swappable is built on top of Draggable and allows swapping of draggable elements.
       * Order is irrelevant to Swappable.
       * @class Swappable
       * @module Swappable
       * @extends Draggable
       */

      var Swappable = /*#__PURE__*/function (_Draggable2$default2) {
        _inheritsLoose(Swappable, _Draggable2$default2);

        /**
         * Swappable constructor.
         * @constructs Swappable
         * @param {HTMLElement[]|NodeList|HTMLElement} containers - Swappable containers
         * @param {Object} options - Options for Swappable
         */
        function Swappable() {
          var _this10;

          var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          _this10 = _Draggable2$default2.call(this, containers, _extends({}, options, {
            announcements: _extends({}, defaultAnnouncements, options.announcements || {})
          })) || this;
          /**
           * Last draggable element that was dragged over
           * @property lastOver
           * @type {HTMLElement}
           */

          _this10.lastOver = null;
          _this10[onDragStart] = _this10[onDragStart].bind(_assertThisInitialized(_this10));
          _this10[onDragOver] = _this10[onDragOver].bind(_assertThisInitialized(_this10));
          _this10[onDragStop] = _this10[onDragStop].bind(_assertThisInitialized(_this10));

          _this10.on('drag:start', _this10[onDragStart]).on('drag:over', _this10[onDragOver]).on('drag:stop', _this10[onDragStop]);

          return _this10;
        }
        /**
         * Destroys Swappable instance.
         */


        var _proto6 = Swappable.prototype;

        _proto6.destroy = function destroy() {
          _Draggable2$default2.prototype.destroy.call(this);

          this.off('drag:start', this._onDragStart).off('drag:over', this._onDragOver).off('drag:stop', this._onDragStop);
        }
        /**
         * Drag start handler
         * @private
         * @param {DragStartEvent} event - Drag start event
         */
        ;

        _proto6[onDragStart] = function (event) {
          var swappableStartEvent = new _SwappableEvent.SwappableStartEvent({
            dragEvent: event
          });
          this.trigger(swappableStartEvent);

          if (swappableStartEvent.canceled()) {
            event.cancel();
          }
        }
        /**
         * Drag over handler
         * @private
         * @param {DragOverEvent} event - Drag over event
         */
        ;

        _proto6[onDragOver] = function (event) {
          if (event.over === event.originalSource || event.over === event.source || event.canceled()) {
            return;
          }

          var swappableSwapEvent = new _SwappableEvent.SwappableSwapEvent({
            dragEvent: event,
            over: event.over,
            overContainer: event.overContainer
          });
          this.trigger(swappableSwapEvent);

          if (swappableSwapEvent.canceled()) {
            return;
          } // swap originally swapped element back


          if (this.lastOver && this.lastOver !== event.over) {
            swap(this.lastOver, event.source);
          }

          if (this.lastOver === event.over) {
            this.lastOver = null;
          } else {
            this.lastOver = event.over;
          }

          swap(event.source, event.over);
          var swappableSwappedEvent = new _SwappableEvent.SwappableSwappedEvent({
            dragEvent: event,
            swappedElement: event.over
          });
          this.trigger(swappableSwappedEvent);
        }
        /**
         * Drag stop handler
         * @private
         * @param {DragStopEvent} event - Drag stop event
         */
        ;

        _proto6[onDragStop] = function (event) {
          var swappableStopEvent = new _SwappableEvent.SwappableStopEvent({
            dragEvent: event
          });
          this.trigger(swappableStopEvent);
          this.lastOver = null;
        };

        return Swappable;
      }(_Draggable2["default"]);

      exports["default"] = Swappable;

      function withTempElement(callback) {
        var tmpElement = document.createElement('div');
        callback(tmpElement);
        tmpElement.parentNode.removeChild(tmpElement);
      }

      function swap(source, over) {
        var overParent = over.parentNode;
        var sourceParent = source.parentNode;
        withTempElement(function (tmpElement) {
          sourceParent.insertBefore(tmpElement, source);
          overParent.insertBefore(source, over);
          sourceParent.insertBefore(over, tmpElement);
        });
      }
      /***/

    },
    /* 30 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SwappableStopEvent = exports.SwappableSwappedEvent = exports.SwappableSwapEvent = exports.SwappableStartEvent = exports.SwappableEvent = undefined;

      var _AbstractEvent = __webpack_require__(0);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /**
       * Base swappable event
       * @class SwappableEvent
       * @module SwappableEvent
       * @extends AbstractEvent
       */


      var SwappableEvent = /*#__PURE__*/function (_AbstractEvent2$defau4) {
        _inheritsLoose(SwappableEvent, _AbstractEvent2$defau4);

        function SwappableEvent() {
          return _AbstractEvent2$defau4.apply(this, arguments) || this;
        }

        _createClass(SwappableEvent, [{
          key: "dragEvent",

          /**
           * Original drag event that triggered this swappable event
           * @property dragEvent
           * @type {DragEvent}
           * @readonly
           */
          get: function get() {
            return this.data.dragEvent;
          }
        }]);

        return SwappableEvent;
      }(_AbstractEvent2["default"]);

      exports.SwappableEvent = SwappableEvent;
      /**
       * Swappable start event
       * @class SwappableStartEvent
       * @module SwappableStartEvent
       * @extends SwappableEvent
       */

      SwappableEvent.type = 'swappable';

      var SwappableStartEvent = /*#__PURE__*/function (_SwappableEvent2) {
        _inheritsLoose(SwappableStartEvent, _SwappableEvent2);

        function SwappableStartEvent() {
          return _SwappableEvent2.apply(this, arguments) || this;
        }

        return SwappableStartEvent;
      }(SwappableEvent);

      exports.SwappableStartEvent = SwappableStartEvent;
      /**
       * Swappable swap event
       * @class SwappableSwapEvent
       * @module SwappableSwapEvent
       * @extends SwappableEvent
       */

      SwappableStartEvent.type = 'swappable:start';
      SwappableStartEvent.cancelable = true;

      var SwappableSwapEvent = /*#__PURE__*/function (_SwappableEvent3) {
        _inheritsLoose(SwappableSwapEvent, _SwappableEvent3);

        function SwappableSwapEvent() {
          return _SwappableEvent3.apply(this, arguments) || this;
        }

        _createClass(SwappableSwapEvent, [{
          key: "over",

          /**
           * Draggable element you are over
           * @property over
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.over;
          }
          /**
           * Draggable container you are over
           * @property overContainer
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "overContainer",
          get: function get() {
            return this.data.overContainer;
          }
        }]);

        return SwappableSwapEvent;
      }(SwappableEvent);

      exports.SwappableSwapEvent = SwappableSwapEvent;
      /**
       * Swappable swapped event
       * @class SwappableSwappedEvent
       * @module SwappableSwappedEvent
       * @extends SwappableEvent
       */

      SwappableSwapEvent.type = 'swappable:swap';
      SwappableSwapEvent.cancelable = true;

      var SwappableSwappedEvent = /*#__PURE__*/function (_SwappableEvent4) {
        _inheritsLoose(SwappableSwappedEvent, _SwappableEvent4);

        function SwappableSwappedEvent() {
          return _SwappableEvent4.apply(this, arguments) || this;
        }

        _createClass(SwappableSwappedEvent, [{
          key: "swappedElement",

          /**
           * The draggable element that you swapped with
           * @property swappedElement
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.swappedElement;
          }
        }]);

        return SwappableSwappedEvent;
      }(SwappableEvent);

      exports.SwappableSwappedEvent = SwappableSwappedEvent;
      /**
       * Swappable stop event
       * @class SwappableStopEvent
       * @module SwappableStopEvent
       * @extends SwappableEvent
       */

      SwappableSwappedEvent.type = 'swappable:swapped';

      var SwappableStopEvent = /*#__PURE__*/function (_SwappableEvent5) {
        _inheritsLoose(SwappableStopEvent, _SwappableEvent5);

        function SwappableStopEvent() {
          return _SwappableEvent5.apply(this, arguments) || this;
        }

        return SwappableStopEvent;
      }(SwappableEvent);

      exports.SwappableStopEvent = SwappableStopEvent;
      SwappableStopEvent.type = 'swappable:stop';
      /***/
    },
    /* 31 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _SwappableEvent = __webpack_require__(10);

      Object.keys(_SwappableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _SwappableEvent[key];
          }
        });
      });

      var _Swappable = __webpack_require__(29);

      var _Swappable2 = _interopRequireDefault(_Swappable);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Swappable2["default"];
      /***/
    },
    /* 32 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _utils = __webpack_require__(2);

      var _Draggable = __webpack_require__(5);

      var _Draggable2 = _interopRequireDefault(_Draggable);

      var _DroppableEvent = __webpack_require__(11);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onDragStart = Symbol('onDragStart');
      var onDragMove = Symbol('onDragMove');
      var onDragStop = Symbol('onDragStop');
      var dropInDropzone = Symbol('dropInDropZone');
      var returnToOriginalDropzone = Symbol('returnToOriginalDropzone');
      var closestDropzone = Symbol('closestDropzone');
      var getDropzones = Symbol('getDropzones');
      /**
       * Returns an announcement message when the Draggable element is dropped into a dropzone element
       * @param {DroppableDroppedEvent} droppableEvent
       * @return {String}
       */

      function onDroppableDroppedDefaultAnnouncement(_ref16) {
        var dragEvent = _ref16.dragEvent,
            dropzone = _ref16.dropzone;
        var sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'draggable element';
        var dropzoneText = dropzone.textContent.trim() || dropzone.id || 'droppable element';
        return "Dropped ".concat(sourceText, " into ").concat(dropzoneText);
      }
      /**
       * Returns an announcement message when the Draggable element has returned to its original dropzone element
       * @param {DroppableReturnedEvent} droppableEvent
       * @return {String}
       */


      function onDroppableReturnedDefaultAnnouncement(_ref17) {
        var dragEvent = _ref17.dragEvent,
            dropzone = _ref17.dropzone;
        var sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'draggable element';
        var dropzoneText = dropzone.textContent.trim() || dropzone.id || 'droppable element';
        return "Returned ".concat(sourceText, " from ").concat(dropzoneText);
      }
      /**
       * @const {Object} defaultAnnouncements
       * @const {Function} defaultAnnouncements['droppable:dropped']
       * @const {Function} defaultAnnouncements['droppable:returned']
       */


      var defaultAnnouncements = {
        'droppable:dropped': onDroppableDroppedDefaultAnnouncement,
        'droppable:returned': onDroppableReturnedDefaultAnnouncement
      };
      var defaultClasses = {
        'droppable:active': 'draggable-dropzone--active',
        'droppable:occupied': 'draggable-dropzone--occupied'
      };
      var defaultOptions = {
        dropzone: '.draggable-droppable'
      };
      /**
       * Droppable is built on top of Draggable and allows dropping draggable elements
       * into dropzone element
       * @class Droppable
       * @module Droppable
       * @extends Draggable
       */

      var Droppable = /*#__PURE__*/function (_Draggable2$default3) {
        _inheritsLoose(Droppable, _Draggable2$default3);

        /**
         * Droppable constructor.
         * @constructs Droppable
         * @param {HTMLElement[]|NodeList|HTMLElement} containers - Droppable containers
         * @param {Object} options - Options for Droppable
         */
        function Droppable() {
          var _this11;

          var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          _this11 = _Draggable2$default3.call(this, containers, _extends({}, defaultOptions, options, {
            classes: _extends({}, defaultClasses, options.classes || {}),
            announcements: _extends({}, defaultAnnouncements, options.announcements || {})
          })) || this;
          /**
           * All dropzone elements on drag start
           * @property dropzones
           * @type {HTMLElement[]}
           */

          _this11.dropzones = null;
          /**
           * Last dropzone element that the source was dropped into
           * @property lastDropzone
           * @type {HTMLElement}
           */

          _this11.lastDropzone = null;
          /**
           * Initial dropzone element that the source was drag from
           * @property initialDropzone
           * @type {HTMLElement}
           */

          _this11.initialDropzone = null;
          _this11[onDragStart] = _this11[onDragStart].bind(_assertThisInitialized(_this11));
          _this11[onDragMove] = _this11[onDragMove].bind(_assertThisInitialized(_this11));
          _this11[onDragStop] = _this11[onDragStop].bind(_assertThisInitialized(_this11));

          _this11.on('drag:start', _this11[onDragStart]).on('drag:move', _this11[onDragMove]).on('drag:stop', _this11[onDragStop]);

          return _this11;
        }
        /**
         * Destroys Droppable instance.
         */


        var _proto7 = Droppable.prototype;

        _proto7.destroy = function destroy() {
          _Draggable2$default3.prototype.destroy.call(this);

          this.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);
        }
        /**
         * Drag start handler
         * @private
         * @param {DragStartEvent} event - Drag start event
         */
        ;

        _proto7[onDragStart] = function (event) {
          if (event.canceled()) {
            return;
          }

          this.dropzones = _toConsumableArray(this[getDropzones]());
          var dropzone = (0, _utils.closest)(event.sensorEvent.target, this.options.dropzone);

          if (!dropzone) {
            event.cancel();
            return;
          }

          var droppableStartEvent = new _DroppableEvent.DroppableStartEvent({
            dragEvent: event,
            dropzone: dropzone
          });
          this.trigger(droppableStartEvent);

          if (droppableStartEvent.canceled()) {
            event.cancel();
            return;
          }

          this.initialDropzone = dropzone;

          var _iterator = _createForOfIteratorHelper(this.dropzones),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var dropzoneElement = _step.value;

              if (dropzoneElement.classList.contains(this.getClassNameFor('droppable:occupied'))) {
                continue;
              }

              dropzoneElement.classList.add(this.getClassNameFor('droppable:active'));
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
        /**
         * Drag move handler
         * @private
         * @param {DragMoveEvent} event - Drag move event
         */
        ;

        _proto7[onDragMove] = function (event) {
          if (event.canceled()) {
            return;
          }

          var dropzone = this[closestDropzone](event.sensorEvent.target);
          var overEmptyDropzone = dropzone && !dropzone.classList.contains(this.getClassNameFor('droppable:occupied'));

          if (overEmptyDropzone && this[dropInDropzone](event, dropzone)) {
            this.lastDropzone = dropzone;
          } else if ((!dropzone || dropzone === this.initialDropzone) && this.lastDropzone) {
            this[returnToOriginalDropzone](event);
            this.lastDropzone = null;
          }
        }
        /**
         * Drag stop handler
         * @private
         * @param {DragStopEvent} event - Drag stop event
         */
        ;

        _proto7[onDragStop] = function (event) {
          var droppableStopEvent = new _DroppableEvent.DroppableStopEvent({
            dragEvent: event,
            dropzone: this.lastDropzone || this.initialDropzone
          });
          this.trigger(droppableStopEvent);
          var occupiedClass = this.getClassNameFor('droppable:occupied');

          var _iterator2 = _createForOfIteratorHelper(this.dropzones),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var dropzone = _step2.value;
              dropzone.classList.remove(this.getClassNameFor('droppable:active'));
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          if (this.lastDropzone && this.lastDropzone !== this.initialDropzone) {
            this.initialDropzone.classList.remove(occupiedClass);
          }

          this.dropzones = null;
          this.lastDropzone = null;
          this.initialDropzone = null;
        }
        /**
         * Drops a draggable element into a dropzone element
         * @private
         * @param {DragMoveEvent} event - Drag move event
         * @param {HTMLElement} dropzone - Dropzone element to drop draggable into
         */
        ;

        _proto7[dropInDropzone] = function (event, dropzone) {
          var droppableDroppedEvent = new _DroppableEvent.DroppableDroppedEvent({
            dragEvent: event,
            dropzone: dropzone
          });
          this.trigger(droppableDroppedEvent);

          if (droppableDroppedEvent.canceled()) {
            return false;
          }

          var occupiedClass = this.getClassNameFor('droppable:occupied');

          if (this.lastDropzone) {
            this.lastDropzone.classList.remove(occupiedClass);
          }

          dropzone.appendChild(event.source);
          dropzone.classList.add(occupiedClass);
          return true;
        }
        /**
         * Moves the previously dropped element back into its original dropzone
         * @private
         * @param {DragMoveEvent} event - Drag move event
         */
        ;

        _proto7[returnToOriginalDropzone] = function (event) {
          var droppableReturnedEvent = new _DroppableEvent.DroppableReturnedEvent({
            dragEvent: event,
            dropzone: this.lastDropzone
          });
          this.trigger(droppableReturnedEvent);

          if (droppableReturnedEvent.canceled()) {
            return;
          }

          this.initialDropzone.appendChild(event.source);
          this.lastDropzone.classList.remove(this.getClassNameFor('droppable:occupied'));
        }
        /**
         * Returns closest dropzone element for even target
         * @private
         * @param {HTMLElement} target - Event target
         * @return {HTMLElement|null}
         */
        ;

        _proto7[closestDropzone] = function (target) {
          if (!this.dropzones) {
            return null;
          }

          return (0, _utils.closest)(target, this.dropzones);
        }
        /**
         * Returns all current dropzone elements for this draggable instance
         * @private
         * @return {NodeList|HTMLElement[]|Array}
         */
        ;

        _proto7[getDropzones] = function () {
          var dropzone = this.options.dropzone;

          if (typeof dropzone === 'string') {
            return document.querySelectorAll(dropzone);
          } else if (dropzone instanceof NodeList || dropzone instanceof Array) {
            return dropzone;
          } else if (typeof dropzone === 'function') {
            return dropzone();
          } else {
            return [];
          }
        };

        return Droppable;
      }(_Draggable2["default"]);

      exports["default"] = Droppable;
      /***/
    },
    /* 33 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DroppableStopEvent = exports.DroppableReturnedEvent = exports.DroppableDroppedEvent = exports.DroppableStartEvent = exports.DroppableEvent = undefined;

      var _AbstractEvent = __webpack_require__(0);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /**
       * Base droppable event
       * @class DroppableEvent
       * @module DroppableEvent
       * @extends AbstractEvent
       */


      var DroppableEvent = /*#__PURE__*/function (_AbstractEvent2$defau5) {
        _inheritsLoose(DroppableEvent, _AbstractEvent2$defau5);

        function DroppableEvent() {
          return _AbstractEvent2$defau5.apply(this, arguments) || this;
        }

        _createClass(DroppableEvent, [{
          key: "dragEvent",

          /**
           * Original drag event that triggered this droppable event
           * @property dragEvent
           * @type {DragEvent}
           * @readonly
           */
          get: function get() {
            return this.data.dragEvent;
          }
        }]);

        return DroppableEvent;
      }(_AbstractEvent2["default"]);

      exports.DroppableEvent = DroppableEvent;
      /**
       * Droppable start event
       * @class DroppableStartEvent
       * @module DroppableStartEvent
       * @extends DroppableEvent
       */

      DroppableEvent.type = 'droppable';

      var DroppableStartEvent = /*#__PURE__*/function (_DroppableEvent2) {
        _inheritsLoose(DroppableStartEvent, _DroppableEvent2);

        function DroppableStartEvent() {
          return _DroppableEvent2.apply(this, arguments) || this;
        }

        _createClass(DroppableStartEvent, [{
          key: "dropzone",

          /**
           * The initial dropzone element of the currently dragging draggable element
           * @property dropzone
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.dropzone;
          }
        }]);

        return DroppableStartEvent;
      }(DroppableEvent);

      exports.DroppableStartEvent = DroppableStartEvent;
      /**
       * Droppable dropped event
       * @class DroppableDroppedEvent
       * @module DroppableDroppedEvent
       * @extends DroppableEvent
       */

      DroppableStartEvent.type = 'droppable:start';
      DroppableStartEvent.cancelable = true;

      var DroppableDroppedEvent = /*#__PURE__*/function (_DroppableEvent3) {
        _inheritsLoose(DroppableDroppedEvent, _DroppableEvent3);

        function DroppableDroppedEvent() {
          return _DroppableEvent3.apply(this, arguments) || this;
        }

        _createClass(DroppableDroppedEvent, [{
          key: "dropzone",

          /**
           * The dropzone element you dropped the draggable element into
           * @property dropzone
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.dropzone;
          }
        }]);

        return DroppableDroppedEvent;
      }(DroppableEvent);

      exports.DroppableDroppedEvent = DroppableDroppedEvent;
      /**
       * Droppable returned event
       * @class DroppableReturnedEvent
       * @module DroppableReturnedEvent
       * @extends DroppableEvent
       */

      DroppableDroppedEvent.type = 'droppable:dropped';
      DroppableDroppedEvent.cancelable = true;

      var DroppableReturnedEvent = /*#__PURE__*/function (_DroppableEvent4) {
        _inheritsLoose(DroppableReturnedEvent, _DroppableEvent4);

        function DroppableReturnedEvent() {
          return _DroppableEvent4.apply(this, arguments) || this;
        }

        _createClass(DroppableReturnedEvent, [{
          key: "dropzone",

          /**
           * The dropzone element you dragged away from
           * @property dropzone
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.dropzone;
          }
        }]);

        return DroppableReturnedEvent;
      }(DroppableEvent);

      exports.DroppableReturnedEvent = DroppableReturnedEvent;
      /**
       * Droppable stop event
       * @class DroppableStopEvent
       * @module DroppableStopEvent
       * @extends DroppableEvent
       */

      DroppableReturnedEvent.type = 'droppable:returned';
      DroppableReturnedEvent.cancelable = true;

      var DroppableStopEvent = /*#__PURE__*/function (_DroppableEvent5) {
        _inheritsLoose(DroppableStopEvent, _DroppableEvent5);

        function DroppableStopEvent() {
          return _DroppableEvent5.apply(this, arguments) || this;
        }

        _createClass(DroppableStopEvent, [{
          key: "dropzone",

          /**
           * The final dropzone element of the draggable element
           * @property dropzone
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.dropzone;
          }
        }]);

        return DroppableStopEvent;
      }(DroppableEvent);

      exports.DroppableStopEvent = DroppableStopEvent;
      DroppableStopEvent.type = 'droppable:stop';
      DroppableStopEvent.cancelable = true;
      /***/
    },
    /* 34 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _DroppableEvent = __webpack_require__(11);

      Object.keys(_DroppableEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _DroppableEvent[key];
          }
        });
      });

      var _Droppable = __webpack_require__(32);

      var _Droppable2 = _interopRequireDefault(_Droppable);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Droppable2["default"];
      /***/
    },
    /* 35 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /**
       * The Emitter is a simple emitter class that provides you with `on()`, `off()` and `trigger()` methods
       * @class Emitter
       * @module Emitter
       */

      var Emitter = /*#__PURE__*/function () {
        function Emitter() {
          this.callbacks = {};
        }
        /**
         * Registers callbacks by event name
         * @param {String} type
         * @param {...Function} callbacks
         */


        var _proto8 = Emitter.prototype;

        _proto8.on = function on(type) {
          var _this$callbacks$type;

          if (!this.callbacks[type]) {
            this.callbacks[type] = [];
          }

          for (var _len = arguments.length, callbacks = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            callbacks[_key - 1] = arguments[_key];
          }

          (_this$callbacks$type = this.callbacks[type]).push.apply(_this$callbacks$type, callbacks);

          return this;
        }
        /**
         * Unregisters callbacks by event name
         * @param {String} type
         * @param {Function} callback
         */
        ;

        _proto8.off = function off(type, callback) {
          if (!this.callbacks[type]) {
            return null;
          }

          var copy = this.callbacks[type].slice(0);

          for (var i = 0; i < copy.length; i++) {
            if (callback === copy[i]) {
              this.callbacks[type].splice(i, 1);
            }
          }

          return this;
        }
        /**
         * Triggers event callbacks by event object
         * @param {AbstractEvent} event
         */
        ;

        _proto8.trigger = function trigger(event) {
          if (!this.callbacks[event.type]) {
            return null;
          }

          var callbacks = _toConsumableArray(this.callbacks[event.type]);

          var caughtErrors = [];

          for (var i = callbacks.length - 1; i >= 0; i--) {
            var callback = callbacks[i];

            try {
              callback(event);
            } catch (error) {
              caughtErrors.push(error);
            }
          }

          if (caughtErrors.length) {
            /* eslint-disable no-console */
            console.error("Draggable caught errors while triggering '".concat(event.type, "'"), caughtErrors);
            /* eslint-disable no-console */
          }

          return this;
        };

        return Emitter;
      }();

      exports["default"] = Emitter;
      /***/
    },
    /* 36 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _Emitter = __webpack_require__(35);

      var _Emitter2 = _interopRequireDefault(_Emitter);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Emitter2["default"];
      /***/
    },
    /* 37 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = undefined;

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _utils = __webpack_require__(2);

      var _Plugins = __webpack_require__(12);

      var _Emitter = __webpack_require__(36);

      var _Emitter2 = _interopRequireDefault(_Emitter);

      var _Sensors = __webpack_require__(6);

      var _DraggableEvent = __webpack_require__(13);

      var _DragEvent = __webpack_require__(14);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onDragStart = Symbol('onDragStart');
      var onDragMove = Symbol('onDragMove');
      var onDragStop = Symbol('onDragStop');
      var onDragPressure = Symbol('onDragPressure');
      /**
       * @const {Object} defaultAnnouncements
       * @const {Function} defaultAnnouncements['drag:start']
       * @const {Function} defaultAnnouncements['drag:stop']
       */

      var defaultAnnouncements = {
        'drag:start': function dragStart(event) {
          return "Picked up ".concat(event.source.textContent.trim() || event.source.id || 'draggable element');
        },
        'drag:stop': function dragStop(event) {
          return "Released ".concat(event.source.textContent.trim() || event.source.id || 'draggable element');
        }
      };
      var defaultClasses = {
        'container:dragging': 'draggable-container--is-dragging',
        'source:dragging': 'draggable-source--is-dragging',
        'source:placed': 'draggable-source--placed',
        'container:placed': 'draggable-container--placed',
        'body:dragging': 'draggable--is-dragging',
        'draggable:over': 'draggable--over',
        'container:over': 'draggable-container--over',
        'source:original': 'draggable--original',
        mirror: 'draggable-mirror'
      };
      var defaultOptions = exports.defaultOptions = {
        draggable: '.draggable-source',
        handle: null,
        delay: 100,
        placedTimeout: 800,
        plugins: [],
        sensors: []
      };
      /**
       * This is the core draggable library that does the heavy lifting
       * @class Draggable
       * @module Draggable
       */

      var Draggable = /*#__PURE__*/function () {
        /**
         * Draggable constructor.
         * @constructs Draggable
         * @param {HTMLElement[]|NodeList|HTMLElement} containers - Draggable containers
         * @param {Object} options - Options for draggable
         */
        function Draggable() {
          var _this12 = this;

          var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [document.body];
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          /**
           * Draggable containers
           * @property containers
           * @type {HTMLElement[]}
           */
          if (containers instanceof NodeList || containers instanceof Array) {
            this.containers = _toConsumableArray(containers);
          } else if (containers instanceof HTMLElement) {
            this.containers = [containers];
          } else {
            throw new Error('Draggable containers are expected to be of type `NodeList`, `HTMLElement[]` or `HTMLElement`');
          }

          this.options = _extends({}, defaultOptions, options, {
            classes: _extends({}, defaultClasses, options.classes || {}),
            announcements: _extends({}, defaultAnnouncements, options.announcements || {})
          });
          /**
           * Draggables event emitter
           * @property emitter
           * @type {Emitter}
           */

          this.emitter = new _Emitter2["default"]();
          /**
           * Current drag state
           * @property dragging
           * @type {Boolean}
           */

          this.dragging = false;
          /**
           * Active plugins
           * @property plugins
           * @type {Plugin[]}
           */

          this.plugins = [];
          /**
           * Active sensors
           * @property sensors
           * @type {Sensor[]}
           */

          this.sensors = [];
          this[onDragStart] = this[onDragStart].bind(this);
          this[onDragMove] = this[onDragMove].bind(this);
          this[onDragStop] = this[onDragStop].bind(this);
          this[onDragPressure] = this[onDragPressure].bind(this);
          document.addEventListener('drag:start', this[onDragStart], true);
          document.addEventListener('drag:move', this[onDragMove], true);
          document.addEventListener('drag:stop', this[onDragStop], true);
          document.addEventListener('drag:pressure', this[onDragPressure], true);
          var defaultPlugins = Object.values(Draggable.Plugins).map(function (Plugin) {
            return Plugin;
          });
          var defaultSensors = [_Sensors.MouseSensor, _Sensors.TouchSensor];
          this.addPlugin.apply(this, [].concat(_toConsumableArray(defaultPlugins), _toConsumableArray(this.options.plugins)));
          this.addSensor.apply(this, [].concat(defaultSensors, _toConsumableArray(this.options.sensors)));
          var draggableInitializedEvent = new _DraggableEvent.DraggableInitializedEvent({
            draggable: this
          });
          this.on('mirror:created', function (_ref18) {
            var mirror = _ref18.mirror;
            return _this12.mirror = mirror;
          });
          this.on('mirror:destroy', function () {
            return _this12.mirror = null;
          });
          this.trigger(draggableInitializedEvent);
        }
        /**
         * Destroys Draggable instance. This removes all internal event listeners and
         * deactivates sensors and plugins
         */

        /**
         * Default plugins draggable uses
         * @static
         * @property {Object} Plugins
         * @property {Announcement} Plugins.Announcement
         * @property {Focusable} Plugins.Focusable
         * @property {Mirror} Plugins.Mirror
         * @property {Scrollable} Plugins.Scrollable
         * @type {Object}
         */


        var _proto9 = Draggable.prototype;

        _proto9.destroy = function destroy() {
          document.removeEventListener('drag:start', this[onDragStart], true);
          document.removeEventListener('drag:move', this[onDragMove], true);
          document.removeEventListener('drag:stop', this[onDragStop], true);
          document.removeEventListener('drag:pressure', this[onDragPressure], true);
          var draggableDestroyEvent = new _DraggableEvent.DraggableDestroyEvent({
            draggable: this
          });
          this.trigger(draggableDestroyEvent);
          this.removePlugin.apply(this, _toConsumableArray(this.plugins.map(function (plugin) {
            return plugin.constructor;
          })));
          this.removeSensor.apply(this, _toConsumableArray(this.sensors.map(function (sensor) {
            return sensor.constructor;
          })));
        }
        /**
         * Adds plugin to this draggable instance. This will end up calling the attach method of the plugin
         * @param {...typeof Plugin} plugins - Plugins that you want attached to draggable
         * @return {Draggable}
         * @example draggable.addPlugin(CustomA11yPlugin, CustomMirrorPlugin)
         */
        ;

        _proto9.addPlugin = function addPlugin() {
          var _this13 = this;

          for (var _len2 = arguments.length, plugins = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            plugins[_key2] = arguments[_key2];
          }

          var activePlugins = plugins.map(function (Plugin) {
            return new Plugin(_this13);
          });
          activePlugins.forEach(function (plugin) {
            return plugin.attach();
          });
          this.plugins = [].concat(_toConsumableArray(this.plugins), _toConsumableArray(activePlugins));
          return this;
        }
        /**
         * Removes plugins that are already attached to this draggable instance. This will end up calling
         * the detach method of the plugin
         * @param {...typeof Plugin} plugins - Plugins that you want detached from draggable
         * @return {Draggable}
         * @example draggable.removePlugin(MirrorPlugin, CustomMirrorPlugin)
         */
        ;

        _proto9.removePlugin = function removePlugin() {
          for (var _len3 = arguments.length, plugins = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            plugins[_key3] = arguments[_key3];
          }

          var removedPlugins = this.plugins.filter(function (plugin) {
            return plugins.includes(plugin.constructor);
          });
          removedPlugins.forEach(function (plugin) {
            return plugin.detach();
          });
          this.plugins = this.plugins.filter(function (plugin) {
            return !plugins.includes(plugin.constructor);
          });
          return this;
        }
        /**
         * Adds sensors to this draggable instance. This will end up calling the attach method of the sensor
         * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable
         * @return {Draggable}
         * @example draggable.addSensor(ForceTouchSensor, CustomSensor)
         */
        ;

        _proto9.addSensor = function addSensor() {
          var _this14 = this;

          for (var _len4 = arguments.length, sensors = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            sensors[_key4] = arguments[_key4];
          }

          var activeSensors = sensors.map(function (Sensor) {
            return new Sensor(_this14.containers, _this14.options);
          });
          activeSensors.forEach(function (sensor) {
            return sensor.attach();
          });
          this.sensors = [].concat(_toConsumableArray(this.sensors), _toConsumableArray(activeSensors));
          return this;
        }
        /**
         * Removes sensors that are already attached to this draggable instance. This will end up calling
         * the detach method of the sensor
         * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable
         * @return {Draggable}
         * @example draggable.removeSensor(TouchSensor, DragSensor)
         */
        ;

        _proto9.removeSensor = function removeSensor() {
          for (var _len5 = arguments.length, sensors = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            sensors[_key5] = arguments[_key5];
          }

          var removedSensors = this.sensors.filter(function (sensor) {
            return sensors.includes(sensor.constructor);
          });
          removedSensors.forEach(function (sensor) {
            return sensor.detach();
          });
          this.sensors = this.sensors.filter(function (sensor) {
            return !sensors.includes(sensor.constructor);
          });
          return this;
        }
        /**
         * Adds container to this draggable instance
         * @param {...HTMLElement} containers - Containers you want to add to draggable
         * @return {Draggable}
         * @example draggable.addContainer(document.body)
         */
        ;

        _proto9.addContainer = function addContainer() {
          for (var _len6 = arguments.length, containers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            containers[_key6] = arguments[_key6];
          }

          this.containers = [].concat(_toConsumableArray(this.containers), containers);
          this.sensors.forEach(function (sensor) {
            return sensor.addContainer.apply(sensor, containers);
          });
          return this;
        }
        /**
         * Removes container from this draggable instance
         * @param {...HTMLElement} containers - Containers you want to remove from draggable
         * @return {Draggable}
         * @example draggable.removeContainer(document.body)
         */
        ;

        _proto9.removeContainer = function removeContainer() {
          for (var _len7 = arguments.length, containers = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            containers[_key7] = arguments[_key7];
          }

          this.containers = this.containers.filter(function (container) {
            return !containers.includes(container);
          });
          this.sensors.forEach(function (sensor) {
            return sensor.removeContainer.apply(sensor, containers);
          });
          return this;
        }
        /**
         * Adds listener for draggable events
         * @param {String} type - Event name
         * @param {...Function} callbacks - Event callbacks
         * @return {Draggable}
         * @example draggable.on('drag:start', (dragEvent) => dragEvent.cancel());
         */
        ;

        _proto9.on = function on(type) {
          var _this$emitter;

          for (var _len8 = arguments.length, callbacks = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
            callbacks[_key8 - 1] = arguments[_key8];
          }

          (_this$emitter = this.emitter).on.apply(_this$emitter, [type].concat(callbacks));

          return this;
        }
        /**
         * Removes listener from draggable
         * @param {String} type - Event name
         * @param {Function} callback - Event callback
         * @return {Draggable}
         * @example draggable.off('drag:start', handlerFunction);
         */
        ;

        _proto9.off = function off(type, callback) {
          this.emitter.off(type, callback);
          return this;
        }
        /**
         * Triggers draggable event
         * @param {AbstractEvent} event - Event instance
         * @return {Draggable}
         * @example draggable.trigger(event);
         */
        ;

        _proto9.trigger = function trigger(event) {
          this.emitter.trigger(event);
          return this;
        }
        /**
         * Returns class name for class identifier
         * @param {String} name - Name of class identifier
         * @return {String|null}
         */
        ;

        _proto9.getClassNameFor = function getClassNameFor(name) {
          return this.options.classes[name];
        }
        /**
         * Returns true if this draggable instance is currently dragging
         * @return {Boolean}
         */
        ;

        _proto9.isDragging = function isDragging() {
          return Boolean(this.dragging);
        }
        /**
         * Returns all draggable elements
         * @return {HTMLElement[]}
         */
        ;

        _proto9.getDraggableElements = function getDraggableElements() {
          var _this15 = this;

          return this.containers.reduce(function (current, container) {
            return [].concat(_toConsumableArray(current), _toConsumableArray(_this15.getDraggableElementsForContainer(container)));
          }, []);
        }
        /**
         * Returns draggable elements for a given container, excluding the mirror and
         * original source element if present
         * @param {HTMLElement} container
         * @return {HTMLElement[]}
         */
        ;

        _proto9.getDraggableElementsForContainer = function getDraggableElementsForContainer(container) {
          var _this16 = this;

          var allDraggableElements = container.querySelectorAll(this.options.draggable);
          return _toConsumableArray(allDraggableElements).filter(function (childElement) {
            return childElement !== _this16.originalSource && childElement !== _this16.mirror;
          });
        }
        /**
         * Drag start handler
         * @private
         * @param {Event} event - DOM Drag event
         */
        ;

        _proto9[onDragStart] = function (event) {
          var _this17 = this;

          var sensorEvent = getSensorEvent(event);
          var target = sensorEvent.target,
              container = sensorEvent.container;

          if (!this.containers.includes(container)) {
            return;
          }

          if (this.options.handle && target && !(0, _utils.closest)(target, this.options.handle)) {
            sensorEvent.cancel();
            return;
          } // Find draggable source element


          this.originalSource = (0, _utils.closest)(target, this.options.draggable);
          this.sourceContainer = container;

          if (!this.originalSource) {
            sensorEvent.cancel();
            return;
          }

          if (this.lastPlacedSource && this.lastPlacedContainer) {
            clearTimeout(this.placedTimeoutID);
            this.lastPlacedSource.classList.remove(this.getClassNameFor('source:placed'));
            this.lastPlacedContainer.classList.remove(this.getClassNameFor('container:placed'));
          }

          this.source = this.originalSource.cloneNode(true);
          this.originalSource.parentNode.insertBefore(this.source, this.originalSource);
          this.originalSource.style.display = 'none';
          var dragEvent = new _DragEvent.DragStartEvent({
            source: this.source,
            originalSource: this.originalSource,
            sourceContainer: container,
            sensorEvent: sensorEvent
          });
          this.trigger(dragEvent);
          this.dragging = !dragEvent.canceled();

          if (dragEvent.canceled()) {
            this.source.parentNode.removeChild(this.source);
            this.originalSource.style.display = null;
            return;
          }

          this.originalSource.classList.add(this.getClassNameFor('source:original'));
          this.source.classList.add(this.getClassNameFor('source:dragging'));
          this.sourceContainer.classList.add(this.getClassNameFor('container:dragging'));
          document.body.classList.add(this.getClassNameFor('body:dragging'));
          applyUserSelect(document.body, 'none');
          requestAnimationFrame(function () {
            var oldSensorEvent = getSensorEvent(event);
            var newSensorEvent = oldSensorEvent.clone({
              target: _this17.source
            });

            _this17[onDragMove](_extends({}, event, {
              detail: newSensorEvent
            }));
          });
        }
        /**
         * Drag move handler
         * @private
         * @param {Event} event - DOM Drag event
         */
        ;

        _proto9[onDragMove] = function (event) {
          if (!this.dragging) {
            return;
          }

          var sensorEvent = getSensorEvent(event);
          var container = sensorEvent.container;
          var target = sensorEvent.target;
          var dragMoveEvent = new _DragEvent.DragMoveEvent({
            source: this.source,
            originalSource: this.originalSource,
            sourceContainer: container,
            sensorEvent: sensorEvent
          });
          this.trigger(dragMoveEvent);

          if (dragMoveEvent.canceled()) {
            sensorEvent.cancel();
          }

          target = (0, _utils.closest)(target, this.options.draggable);
          var withinCorrectContainer = (0, _utils.closest)(sensorEvent.target, this.containers);
          var overContainer = sensorEvent.overContainer || withinCorrectContainer;
          var isLeavingContainer = this.currentOverContainer && overContainer !== this.currentOverContainer;
          var isLeavingDraggable = this.currentOver && target !== this.currentOver;
          var isOverContainer = overContainer && this.currentOverContainer !== overContainer;
          var isOverDraggable = withinCorrectContainer && target && this.currentOver !== target;

          if (isLeavingDraggable) {
            var dragOutEvent = new _DragEvent.DragOutEvent({
              source: this.source,
              originalSource: this.originalSource,
              sourceContainer: container,
              sensorEvent: sensorEvent,
              over: this.currentOver
            });
            this.currentOver.classList.remove(this.getClassNameFor('draggable:over'));
            this.currentOver = null;
            this.trigger(dragOutEvent);
          }

          if (isLeavingContainer) {
            var dragOutContainerEvent = new _DragEvent.DragOutContainerEvent({
              source: this.source,
              originalSource: this.originalSource,
              sourceContainer: container,
              sensorEvent: sensorEvent,
              overContainer: this.currentOverContainer
            });
            this.currentOverContainer.classList.remove(this.getClassNameFor('container:over'));
            this.currentOverContainer = null;
            this.trigger(dragOutContainerEvent);
          }

          if (isOverContainer) {
            overContainer.classList.add(this.getClassNameFor('container:over'));
            var dragOverContainerEvent = new _DragEvent.DragOverContainerEvent({
              source: this.source,
              originalSource: this.originalSource,
              sourceContainer: container,
              sensorEvent: sensorEvent,
              overContainer: overContainer
            });
            this.currentOverContainer = overContainer;
            this.trigger(dragOverContainerEvent);
          }

          if (isOverDraggable) {
            target.classList.add(this.getClassNameFor('draggable:over'));
            var dragOverEvent = new _DragEvent.DragOverEvent({
              source: this.source,
              originalSource: this.originalSource,
              sourceContainer: container,
              sensorEvent: sensorEvent,
              overContainer: overContainer,
              over: target
            });
            this.currentOver = target;
            this.trigger(dragOverEvent);
          }
        }
        /**
         * Drag stop handler
         * @private
         * @param {Event} event - DOM Drag event
         */
        ;

        _proto9[onDragStop] = function (event) {
          var _this18 = this;

          if (!this.dragging) {
            return;
          }

          this.dragging = false;
          var dragStopEvent = new _DragEvent.DragStopEvent({
            source: this.source,
            originalSource: this.originalSource,
            sensorEvent: event.sensorEvent,
            sourceContainer: this.sourceContainer
          });
          this.trigger(dragStopEvent);
          this.source.parentNode.insertBefore(this.originalSource, this.source);
          this.source.parentNode.removeChild(this.source);
          this.originalSource.style.display = '';
          this.source.classList.remove(this.getClassNameFor('source:dragging'));
          this.originalSource.classList.remove(this.getClassNameFor('source:original'));
          this.originalSource.classList.add(this.getClassNameFor('source:placed'));
          this.sourceContainer.classList.add(this.getClassNameFor('container:placed'));
          this.sourceContainer.classList.remove(this.getClassNameFor('container:dragging'));
          document.body.classList.remove(this.getClassNameFor('body:dragging'));
          applyUserSelect(document.body, '');

          if (this.currentOver) {
            this.currentOver.classList.remove(this.getClassNameFor('draggable:over'));
          }

          if (this.currentOverContainer) {
            this.currentOverContainer.classList.remove(this.getClassNameFor('container:over'));
          }

          this.lastPlacedSource = this.originalSource;
          this.lastPlacedContainer = this.sourceContainer;
          this.placedTimeoutID = setTimeout(function () {
            if (_this18.lastPlacedSource) {
              _this18.lastPlacedSource.classList.remove(_this18.getClassNameFor('source:placed'));
            }

            if (_this18.lastPlacedContainer) {
              _this18.lastPlacedContainer.classList.remove(_this18.getClassNameFor('container:placed'));
            }

            _this18.lastPlacedSource = null;
            _this18.lastPlacedContainer = null;
          }, this.options.placedTimeout);
          this.source = null;
          this.originalSource = null;
          this.currentOverContainer = null;
          this.currentOver = null;
          this.sourceContainer = null;
        }
        /**
         * Drag pressure handler
         * @private
         * @param {Event} event - DOM Drag event
         */
        ;

        _proto9[onDragPressure] = function (event) {
          if (!this.dragging) {
            return;
          }

          var sensorEvent = getSensorEvent(event);
          var source = this.source || (0, _utils.closest)(sensorEvent.originalEvent.target, this.options.draggable);
          var dragPressureEvent = new _DragEvent.DragPressureEvent({
            sensorEvent: sensorEvent,
            source: source,
            pressure: sensorEvent.pressure
          });
          this.trigger(dragPressureEvent);
        };

        return Draggable;
      }();

      exports["default"] = Draggable;
      Draggable.Plugins = {
        Announcement: _Plugins.Announcement,
        Focusable: _Plugins.Focusable,
        Mirror: _Plugins.Mirror,
        Scrollable: _Plugins.Scrollable
      };

      function getSensorEvent(event) {
        return event.detail;
      }

      function applyUserSelect(element, value) {
        element.style.webkitUserSelect = value;
        element.style.mozUserSelect = value;
        element.style.msUserSelect = value;
        element.style.oUserSelect = value;
        element.style.userSelect = value;
      }
      /***/

    },
    /* 38 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _Sensor = __webpack_require__(4);

      var _Sensor2 = _interopRequireDefault(_Sensor);

      var _SensorEvent = __webpack_require__(3);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onMouseForceWillBegin = Symbol('onMouseForceWillBegin');
      var onMouseForceDown = Symbol('onMouseForceDown');
      var onMouseDown = Symbol('onMouseDown');
      var onMouseForceChange = Symbol('onMouseForceChange');
      var onMouseMove = Symbol('onMouseMove');
      var onMouseUp = Symbol('onMouseUp');
      var onMouseForceGlobalChange = Symbol('onMouseForceGlobalChange');
      /**
       * This sensor picks up native force touch events and dictates drag operations
       * @class ForceTouchSensor
       * @module ForceTouchSensor
       * @extends Sensor
       */

      var ForceTouchSensor = /*#__PURE__*/function (_Sensor2$default) {
        _inheritsLoose(ForceTouchSensor, _Sensor2$default);

        /**
         * ForceTouchSensor constructor.
         * @constructs ForceTouchSensor
         * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers
         * @param {Object} options - Options
         */
        function ForceTouchSensor() {
          var _this19;

          var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          _this19 = _Sensor2$default.call(this, containers, options) || this;
          /**
           * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed
           * @property mightDrag
           * @type {Boolean}
           */

          _this19.mightDrag = false;
          _this19[onMouseForceWillBegin] = _this19[onMouseForceWillBegin].bind(_assertThisInitialized(_this19));
          _this19[onMouseForceDown] = _this19[onMouseForceDown].bind(_assertThisInitialized(_this19));
          _this19[onMouseDown] = _this19[onMouseDown].bind(_assertThisInitialized(_this19));
          _this19[onMouseForceChange] = _this19[onMouseForceChange].bind(_assertThisInitialized(_this19));
          _this19[onMouseMove] = _this19[onMouseMove].bind(_assertThisInitialized(_this19));
          _this19[onMouseUp] = _this19[onMouseUp].bind(_assertThisInitialized(_this19));
          return _this19;
        }
        /**
         * Attaches sensors event listeners to the DOM
         */


        var _proto10 = ForceTouchSensor.prototype;

        _proto10.attach = function attach() {
          var _iterator3 = _createForOfIteratorHelper(this.containers),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var container = _step3.value;
              container.addEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);
              container.addEventListener('webkitmouseforcedown', this[onMouseForceDown], false);
              container.addEventListener('mousedown', this[onMouseDown], true);
              container.addEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          document.addEventListener('mousemove', this[onMouseMove]);
          document.addEventListener('mouseup', this[onMouseUp]);
        }
        /**
         * Detaches sensors event listeners to the DOM
         */
        ;

        _proto10.detach = function detach() {
          var _iterator4 = _createForOfIteratorHelper(this.containers),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var container = _step4.value;
              container.removeEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);
              container.removeEventListener('webkitmouseforcedown', this[onMouseForceDown], false);
              container.removeEventListener('mousedown', this[onMouseDown], true);
              container.removeEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }

          document.removeEventListener('mousemove', this[onMouseMove]);
          document.removeEventListener('mouseup', this[onMouseUp]);
        }
        /**
         * Mouse force will begin handler
         * @private
         * @param {Event} event - Mouse force will begin event
         */
        ;

        _proto10[onMouseForceWillBegin] = function (event) {
          event.preventDefault();
          this.mightDrag = true;
        }
        /**
         * Mouse force down handler
         * @private
         * @param {Event} event - Mouse force down event
         */
        ;

        _proto10[onMouseForceDown] = function (event) {
          if (this.dragging) {
            return;
          }

          var target = document.elementFromPoint(event.clientX, event.clientY);
          var container = event.currentTarget;
          var dragStartEvent = new _SensorEvent.DragStartSensorEvent({
            clientX: event.clientX,
            clientY: event.clientY,
            target: target,
            container: container,
            originalEvent: event
          });
          this.trigger(container, dragStartEvent);
          this.currentContainer = container;
          this.dragging = !dragStartEvent.canceled();
          this.mightDrag = false;
        }
        /**
         * Mouse up handler
         * @private
         * @param {Event} event - Mouse up event
         */
        ;

        _proto10[onMouseUp] = function (event) {
          if (!this.dragging) {
            return;
          }

          var dragStopEvent = new _SensorEvent.DragStopSensorEvent({
            clientX: event.clientX,
            clientY: event.clientY,
            target: null,
            container: this.currentContainer,
            originalEvent: event
          });
          this.trigger(this.currentContainer, dragStopEvent);
          this.currentContainer = null;
          this.dragging = false;
          this.mightDrag = false;
        }
        /**
         * Mouse down handler
         * @private
         * @param {Event} event - Mouse down event
         */
        ;

        _proto10[onMouseDown] = function (event) {
          if (!this.mightDrag) {
            return;
          } // Need workaround for real click
          // Cancel potential drag events


          event.stopPropagation();
          event.stopImmediatePropagation();
          event.preventDefault();
        }
        /**
         * Mouse move handler
         * @private
         * @param {Event} event - Mouse force will begin event
         */
        ;

        _proto10[onMouseMove] = function (event) {
          if (!this.dragging) {
            return;
          }

          var target = document.elementFromPoint(event.clientX, event.clientY);
          var dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({
            clientX: event.clientX,
            clientY: event.clientY,
            target: target,
            container: this.currentContainer,
            originalEvent: event
          });
          this.trigger(this.currentContainer, dragMoveEvent);
        }
        /**
         * Mouse force change handler
         * @private
         * @param {Event} event - Mouse force change event
         */
        ;

        _proto10[onMouseForceChange] = function (event) {
          if (this.dragging) {
            return;
          }

          var target = event.target;
          var container = event.currentTarget;
          var dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({
            pressure: event.webkitForce,
            clientX: event.clientX,
            clientY: event.clientY,
            target: target,
            container: container,
            originalEvent: event
          });
          this.trigger(container, dragPressureEvent);
        }
        /**
         * Mouse force global change handler
         * @private
         * @param {Event} event - Mouse force global change event
         */
        ;

        _proto10[onMouseForceGlobalChange] = function (event) {
          if (!this.dragging) {
            return;
          }

          var target = event.target;
          var dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({
            pressure: event.webkitForce,
            clientX: event.clientX,
            clientY: event.clientY,
            target: target,
            container: this.currentContainer,
            originalEvent: event
          });
          this.trigger(this.currentContainer, dragPressureEvent);
        };

        return ForceTouchSensor;
      }(_Sensor2["default"]);

      exports["default"] = ForceTouchSensor;
      /***/
    },
    /* 39 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _ForceTouchSensor = __webpack_require__(38);

      var _ForceTouchSensor2 = _interopRequireDefault(_ForceTouchSensor);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _ForceTouchSensor2["default"];
      /***/
    },
    /* 40 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _utils = __webpack_require__(2);

      var _Sensor = __webpack_require__(4);

      var _Sensor2 = _interopRequireDefault(_Sensor);

      var _SensorEvent = __webpack_require__(3);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onMouseDown = Symbol('onMouseDown');
      var onMouseUp = Symbol('onMouseUp');
      var onDragStart = Symbol('onDragStart');
      var onDragOver = Symbol('onDragOver');
      var onDragEnd = Symbol('onDragEnd');
      var onDrop = Symbol('onDrop');
      var reset = Symbol('reset');
      /**
       * This sensor picks up native browser drag events and dictates drag operations
       * @class DragSensor
       * @module DragSensor
       * @extends Sensor
       */

      var DragSensor = /*#__PURE__*/function (_Sensor2$default2) {
        _inheritsLoose(DragSensor, _Sensor2$default2);

        /**
         * DragSensor constructor.
         * @constructs DragSensor
         * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers
         * @param {Object} options - Options
         */
        function DragSensor() {
          var _this20;

          var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          _this20 = _Sensor2$default2.call(this, containers, options) || this;
          /**
           * Mouse down timer which will end up setting the draggable attribute, unless canceled
           * @property mouseDownTimeout
           * @type {Number}
           */

          _this20.mouseDownTimeout = null;
          /**
           * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed
           * @property draggableElement
           * @type {HTMLElement}
           */

          _this20.draggableElement = null;
          /**
           * Native draggable element could be links or images, their draggable state will be disabled during drag operation
           * @property nativeDraggableElement
           * @type {HTMLElement}
           */

          _this20.nativeDraggableElement = null;
          _this20[onMouseDown] = _this20[onMouseDown].bind(_assertThisInitialized(_this20));
          _this20[onMouseUp] = _this20[onMouseUp].bind(_assertThisInitialized(_this20));
          _this20[onDragStart] = _this20[onDragStart].bind(_assertThisInitialized(_this20));
          _this20[onDragOver] = _this20[onDragOver].bind(_assertThisInitialized(_this20));
          _this20[onDragEnd] = _this20[onDragEnd].bind(_assertThisInitialized(_this20));
          _this20[onDrop] = _this20[onDrop].bind(_assertThisInitialized(_this20));
          return _this20;
        }
        /**
         * Attaches sensors event listeners to the DOM
         */


        var _proto11 = DragSensor.prototype;

        _proto11.attach = function attach() {
          document.addEventListener('mousedown', this[onMouseDown], true);
        }
        /**
         * Detaches sensors event listeners to the DOM
         */
        ;

        _proto11.detach = function detach() {
          document.removeEventListener('mousedown', this[onMouseDown], true);
        }
        /**
         * Drag start handler
         * @private
         * @param {Event} event - Drag start event
         */
        ;

        _proto11[onDragStart] = function (event) {
          var _this21 = this;

          // Need for firefox. "text" key is needed for IE
          event.dataTransfer.setData('text', '');
          event.dataTransfer.effectAllowed = this.options.type;
          var target = document.elementFromPoint(event.clientX, event.clientY);
          this.currentContainer = (0, _utils.closest)(event.target, this.containers);

          if (!this.currentContainer) {
            return;
          }

          var dragStartEvent = new _SensorEvent.DragStartSensorEvent({
            clientX: event.clientX,
            clientY: event.clientY,
            target: target,
            container: this.currentContainer,
            originalEvent: event
          }); // Workaround

          setTimeout(function () {
            _this21.trigger(_this21.currentContainer, dragStartEvent);

            if (dragStartEvent.canceled()) {
              _this21.dragging = false;
            } else {
              _this21.dragging = true;
            }
          }, 0);
        }
        /**
         * Drag over handler
         * @private
         * @param {Event} event - Drag over event
         */
        ;

        _proto11[onDragOver] = function (event) {
          if (!this.dragging) {
            return;
          }

          var target = document.elementFromPoint(event.clientX, event.clientY);
          var container = this.currentContainer;
          var dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({
            clientX: event.clientX,
            clientY: event.clientY,
            target: target,
            container: container,
            originalEvent: event
          });
          this.trigger(container, dragMoveEvent);

          if (!dragMoveEvent.canceled()) {
            event.preventDefault();
            event.dataTransfer.dropEffect = this.options.type;
          }
        }
        /**
         * Drag end handler
         * @private
         * @param {Event} event - Drag end event
         */
        ;

        _proto11[onDragEnd] = function (event) {
          if (!this.dragging) {
            return;
          }

          document.removeEventListener('mouseup', this[onMouseUp], true);
          var target = document.elementFromPoint(event.clientX, event.clientY);
          var container = this.currentContainer;
          var dragStopEvent = new _SensorEvent.DragStopSensorEvent({
            clientX: event.clientX,
            clientY: event.clientY,
            target: target,
            container: container,
            originalEvent: event
          });
          this.trigger(container, dragStopEvent);
          this.dragging = false;
          this[reset]();
        }
        /**
         * Drop handler
         * @private
         * @param {Event} event - Drop event
         */
        ;

        _proto11[onDrop] = function (event) {
          // eslint-disable-line class-methods-use-this
          event.preventDefault();
        }
        /**
         * Mouse down handler
         * @private
         * @param {Event} event - Mouse down event
         */
        ;

        _proto11[onMouseDown] = function (event) {
          var _this22 = this;

          // Firefox bug for inputs within draggables https://bugzilla.mozilla.org/show_bug.cgi?id=739071
          if (event.target && (event.target.form || event.target.contenteditable)) {
            return;
          }

          var nativeDraggableElement = (0, _utils.closest)(event.target, function (element) {
            return element.draggable;
          });

          if (nativeDraggableElement) {
            nativeDraggableElement.draggable = false;
            this.nativeDraggableElement = nativeDraggableElement;
          }

          document.addEventListener('mouseup', this[onMouseUp], true);
          document.addEventListener('dragstart', this[onDragStart], false);
          document.addEventListener('dragover', this[onDragOver], false);
          document.addEventListener('dragend', this[onDragEnd], false);
          document.addEventListener('drop', this[onDrop], false);
          var target = (0, _utils.closest)(event.target, this.options.draggable);

          if (!target) {
            return;
          }

          this.mouseDownTimeout = setTimeout(function () {
            target.draggable = true;
            _this22.draggableElement = target;
          }, this.options.delay);
        }
        /**
         * Mouse up handler
         * @private
         * @param {Event} event - Mouse up event
         */
        ;

        _proto11[onMouseUp] = function () {
          this[reset]();
        }
        /**
         * Mouse up handler
         * @private
         * @param {Event} event - Mouse up event
         */
        ;

        _proto11[reset] = function () {
          clearTimeout(this.mouseDownTimeout);
          document.removeEventListener('mouseup', this[onMouseUp], true);
          document.removeEventListener('dragstart', this[onDragStart], false);
          document.removeEventListener('dragover', this[onDragOver], false);
          document.removeEventListener('dragend', this[onDragEnd], false);
          document.removeEventListener('drop', this[onDrop], false);

          if (this.nativeDraggableElement) {
            this.nativeDraggableElement.draggable = true;
            this.nativeDraggableElement = null;
          }

          if (this.draggableElement) {
            this.draggableElement.draggable = false;
            this.draggableElement = null;
          }
        };

        return DragSensor;
      }(_Sensor2["default"]);

      exports["default"] = DragSensor;
      /***/
    },
    /* 41 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _DragSensor = __webpack_require__(40);

      var _DragSensor2 = _interopRequireDefault(_DragSensor);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _DragSensor2["default"];
      /***/
    },
    /* 42 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _utils = __webpack_require__(2);

      var _Sensor = __webpack_require__(4);

      var _Sensor2 = _interopRequireDefault(_Sensor);

      var _SensorEvent = __webpack_require__(3);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onTouchStart = Symbol('onTouchStart');
      var onTouchHold = Symbol('onTouchHold');
      var onTouchEnd = Symbol('onTouchEnd');
      var onTouchMove = Symbol('onTouchMove');
      /**
       * Prevents scrolling when set to true
       * @var {Boolean} preventScrolling
       */

      var preventScrolling = false; // WebKit requires cancelable `touchmove` events to be added as early as possible

      window.addEventListener('touchmove', function (event) {
        if (!preventScrolling) {
          return;
        } // Prevent scrolling


        event.preventDefault();
      }, {
        passive: false
      });
      /**
       * This sensor picks up native browser touch events and dictates drag operations
       * @class TouchSensor
       * @module TouchSensor
       * @extends Sensor
       */

      var TouchSensor = /*#__PURE__*/function (_Sensor2$default3) {
        _inheritsLoose(TouchSensor, _Sensor2$default3);

        /**
         * TouchSensor constructor.
         * @constructs TouchSensor
         * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers
         * @param {Object} options - Options
         */
        function TouchSensor() {
          var _this23;

          var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          _this23 = _Sensor2$default3.call(this, containers, options) || this;
          /**
           * Closest scrollable container so accidental scroll can cancel long touch
           * @property currentScrollableParent
           * @type {HTMLElement}
           */

          _this23.currentScrollableParent = null;
          /**
           * TimeoutID for long touch
           * @property tapTimeout
           * @type {Number}
           */

          _this23.tapTimeout = null;
          /**
           * touchMoved indicates if touch has moved during tapTimeout
           * @property touchMoved
           * @type {Boolean}
           */

          _this23.touchMoved = false;
          _this23[onTouchStart] = _this23[onTouchStart].bind(_assertThisInitialized(_this23));
          _this23[onTouchHold] = _this23[onTouchHold].bind(_assertThisInitialized(_this23));
          _this23[onTouchEnd] = _this23[onTouchEnd].bind(_assertThisInitialized(_this23));
          _this23[onTouchMove] = _this23[onTouchMove].bind(_assertThisInitialized(_this23));
          return _this23;
        }
        /**
         * Attaches sensors event listeners to the DOM
         */


        var _proto12 = TouchSensor.prototype;

        _proto12.attach = function attach() {
          document.addEventListener('touchstart', this[onTouchStart]);
        }
        /**
         * Detaches sensors event listeners to the DOM
         */
        ;

        _proto12.detach = function detach() {
          document.removeEventListener('touchstart', this[onTouchStart]);
        }
        /**
         * Touch start handler
         * @private
         * @param {Event} event - Touch start event
         */
        ;

        _proto12[onTouchStart] = function (event) {
          var container = (0, _utils.closest)(event.target, this.containers);

          if (!container) {
            return;
          }

          document.addEventListener('touchmove', this[onTouchMove]);
          document.addEventListener('touchend', this[onTouchEnd]);
          document.addEventListener('touchcancel', this[onTouchEnd]);
          container.addEventListener('contextmenu', onContextMenu);
          this.currentContainer = container;
          this.tapTimeout = setTimeout(this[onTouchHold](event, container), this.options.delay);
        }
        /**
         * Touch hold handler
         * @private
         * @param {Event} event - Touch start event
         * @param {HTMLElement} container - Container element
         */
        ;

        _proto12[onTouchHold] = function (event, container) {
          var _this24 = this;

          return function () {
            if (_this24.touchMoved) {
              return;
            }

            var touch = event.touches[0] || event.changedTouches[0];
            var target = event.target;
            var dragStartEvent = new _SensorEvent.DragStartSensorEvent({
              clientX: touch.pageX,
              clientY: touch.pageY,
              target: target,
              container: container,
              originalEvent: event
            });

            _this24.trigger(container, dragStartEvent);

            _this24.dragging = !dragStartEvent.canceled();
            preventScrolling = _this24.dragging;
          };
        }
        /**
         * Touch move handler
         * @private
         * @param {Event} event - Touch move event
         */
        ;

        _proto12[onTouchMove] = function (event) {
          this.touchMoved = true;

          if (!this.dragging) {
            return;
          }

          var touch = event.touches[0] || event.changedTouches[0];
          var target = document.elementFromPoint(touch.pageX - window.scrollX, touch.pageY - window.scrollY);
          var dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({
            clientX: touch.pageX,
            clientY: touch.pageY,
            target: target,
            container: this.currentContainer,
            originalEvent: event
          });
          this.trigger(this.currentContainer, dragMoveEvent);
        }
        /**
         * Touch end handler
         * @private
         * @param {Event} event - Touch end event
         */
        ;

        _proto12[onTouchEnd] = function (event) {
          this.touchMoved = false;
          preventScrolling = false;
          document.removeEventListener('touchend', this[onTouchEnd]);
          document.removeEventListener('touchcancel', this[onTouchEnd]);
          document.removeEventListener('touchmove', this[onTouchMove]);

          if (this.currentContainer) {
            this.currentContainer.removeEventListener('contextmenu', onContextMenu);
          }

          clearTimeout(this.tapTimeout);

          if (!this.dragging) {
            return;
          }

          var touch = event.touches[0] || event.changedTouches[0];
          var target = document.elementFromPoint(touch.pageX - window.scrollX, touch.pageY - window.scrollY);
          event.preventDefault();
          var dragStopEvent = new _SensorEvent.DragStopSensorEvent({
            clientX: touch.pageX,
            clientY: touch.pageY,
            target: target,
            container: this.currentContainer,
            originalEvent: event
          });
          this.trigger(this.currentContainer, dragStopEvent);
          this.currentContainer = null;
          this.dragging = false;
        };

        return TouchSensor;
      }(_Sensor2["default"]);

      exports["default"] = TouchSensor;

      function onContextMenu(event) {
        event.preventDefault();
        event.stopPropagation();
      }
      /***/

    },
    /* 43 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _TouchSensor = __webpack_require__(42);

      var _TouchSensor2 = _interopRequireDefault(_TouchSensor);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _TouchSensor2["default"];
      /***/
    },
    /* 44 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DragPressureSensorEvent = exports.DragStopSensorEvent = exports.DragMoveSensorEvent = exports.DragStartSensorEvent = exports.SensorEvent = undefined;

      var _AbstractEvent = __webpack_require__(0);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /**
       * Base sensor event
       * @class SensorEvent
       * @module SensorEvent
       * @extends AbstractEvent
       */


      var SensorEvent = /*#__PURE__*/function (_AbstractEvent2$defau6) {
        _inheritsLoose(SensorEvent, _AbstractEvent2$defau6);

        function SensorEvent() {
          return _AbstractEvent2$defau6.apply(this, arguments) || this;
        }

        _createClass(SensorEvent, [{
          key: "originalEvent",

          /**
           * Original browser event that triggered a sensor
           * @property originalEvent
           * @type {Event}
           * @readonly
           */
          get: function get() {
            return this.data.originalEvent;
          }
          /**
           * Normalized clientX for both touch and mouse events
           * @property clientX
           * @type {Number}
           * @readonly
           */

        }, {
          key: "clientX",
          get: function get() {
            return this.data.clientX;
          }
          /**
           * Normalized clientY for both touch and mouse events
           * @property clientY
           * @type {Number}
           * @readonly
           */

        }, {
          key: "clientY",
          get: function get() {
            return this.data.clientY;
          }
          /**
           * Normalized target for both touch and mouse events
           * Returns the element that is behind cursor or touch pointer
           * @property target
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "target",
          get: function get() {
            return this.data.target;
          }
          /**
           * Container that initiated the sensor
           * @property container
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "container",
          get: function get() {
            return this.data.container;
          }
          /**
           * Trackpad pressure
           * @property pressure
           * @type {Number}
           * @readonly
           */

        }, {
          key: "pressure",
          get: function get() {
            return this.data.pressure;
          }
        }]);

        return SensorEvent;
      }(_AbstractEvent2["default"]);

      exports.SensorEvent = SensorEvent;
      /**
       * Drag start sensor event
       * @class DragStartSensorEvent
       * @module DragStartSensorEvent
       * @extends SensorEvent
       */

      var DragStartSensorEvent = /*#__PURE__*/function (_SensorEvent2) {
        _inheritsLoose(DragStartSensorEvent, _SensorEvent2);

        function DragStartSensorEvent() {
          return _SensorEvent2.apply(this, arguments) || this;
        }

        return DragStartSensorEvent;
      }(SensorEvent);

      exports.DragStartSensorEvent = DragStartSensorEvent;
      /**
       * Drag move sensor event
       * @class DragMoveSensorEvent
       * @module DragMoveSensorEvent
       * @extends SensorEvent
       */

      DragStartSensorEvent.type = 'drag:start';

      var DragMoveSensorEvent = /*#__PURE__*/function (_SensorEvent3) {
        _inheritsLoose(DragMoveSensorEvent, _SensorEvent3);

        function DragMoveSensorEvent() {
          return _SensorEvent3.apply(this, arguments) || this;
        }

        return DragMoveSensorEvent;
      }(SensorEvent);

      exports.DragMoveSensorEvent = DragMoveSensorEvent;
      /**
       * Drag stop sensor event
       * @class DragStopSensorEvent
       * @module DragStopSensorEvent
       * @extends SensorEvent
       */

      DragMoveSensorEvent.type = 'drag:move';

      var DragStopSensorEvent = /*#__PURE__*/function (_SensorEvent4) {
        _inheritsLoose(DragStopSensorEvent, _SensorEvent4);

        function DragStopSensorEvent() {
          return _SensorEvent4.apply(this, arguments) || this;
        }

        return DragStopSensorEvent;
      }(SensorEvent);

      exports.DragStopSensorEvent = DragStopSensorEvent;
      /**
       * Drag pressure sensor event
       * @class DragPressureSensorEvent
       * @module DragPressureSensorEvent
       * @extends SensorEvent
       */

      DragStopSensorEvent.type = 'drag:stop';

      var DragPressureSensorEvent = /*#__PURE__*/function (_SensorEvent5) {
        _inheritsLoose(DragPressureSensorEvent, _SensorEvent5);

        function DragPressureSensorEvent() {
          return _SensorEvent5.apply(this, arguments) || this;
        }

        return DragPressureSensorEvent;
      }(SensorEvent);

      exports.DragPressureSensorEvent = DragPressureSensorEvent;
      DragPressureSensorEvent.type = 'drag:pressure';
      /***/
    },
    /* 45 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _utils = __webpack_require__(2);

      var _Sensor = __webpack_require__(4);

      var _Sensor2 = _interopRequireDefault(_Sensor);

      var _SensorEvent = __webpack_require__(3);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onContextMenuWhileDragging = Symbol('onContextMenuWhileDragging');
      var onMouseDown = Symbol('onMouseDown');
      var onMouseMove = Symbol('onMouseMove');
      var onMouseUp = Symbol('onMouseUp');
      /**
       * This sensor picks up native browser mouse events and dictates drag operations
       * @class MouseSensor
       * @module MouseSensor
       * @extends Sensor
       */

      var MouseSensor = /*#__PURE__*/function (_Sensor2$default4) {
        _inheritsLoose(MouseSensor, _Sensor2$default4);

        /**
         * MouseSensor constructor.
         * @constructs MouseSensor
         * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers
         * @param {Object} options - Options
         */
        function MouseSensor() {
          var _this25;

          var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          _this25 = _Sensor2$default4.call(this, containers, options) || this;
          /**
           * Indicates if mouse button is still down
           * @property mouseDown
           * @type {Boolean}
           */

          _this25.mouseDown = false;
          /**
           * Mouse down timer which will end up triggering the drag start operation
           * @property mouseDownTimeout
           * @type {Number}
           */

          _this25.mouseDownTimeout = null;
          /**
           * Indicates if context menu has been opened during drag operation
           * @property openedContextMenu
           * @type {Boolean}
           */

          _this25.openedContextMenu = false;
          _this25[onContextMenuWhileDragging] = _this25[onContextMenuWhileDragging].bind(_assertThisInitialized(_this25));
          _this25[onMouseDown] = _this25[onMouseDown].bind(_assertThisInitialized(_this25));
          _this25[onMouseMove] = _this25[onMouseMove].bind(_assertThisInitialized(_this25));
          _this25[onMouseUp] = _this25[onMouseUp].bind(_assertThisInitialized(_this25));
          return _this25;
        }
        /**
         * Attaches sensors event listeners to the DOM
         */


        var _proto13 = MouseSensor.prototype;

        _proto13.attach = function attach() {
          document.addEventListener('mousedown', this[onMouseDown], true);
        }
        /**
         * Detaches sensors event listeners to the DOM
         */
        ;

        _proto13.detach = function detach() {
          document.removeEventListener('mousedown', this[onMouseDown], true);
        }
        /**
         * Mouse down handler
         * @private
         * @param {Event} event - Mouse down event
         */
        ;

        _proto13[onMouseDown] = function (event) {
          var _this26 = this;

          if (event.button !== 0 || event.ctrlKey || event.metaKey) {
            return;
          }

          document.addEventListener('mouseup', this[onMouseUp]);
          var target = document.elementFromPoint(event.clientX, event.clientY);
          var container = (0, _utils.closest)(target, this.containers);

          if (!container) {
            return;
          }

          document.addEventListener('dragstart', preventNativeDragStart);
          this.mouseDown = true;
          clearTimeout(this.mouseDownTimeout);
          this.mouseDownTimeout = setTimeout(function () {
            if (!_this26.mouseDown) {
              return;
            }

            var dragStartEvent = new _SensorEvent.DragStartSensorEvent({
              clientX: event.clientX,
              clientY: event.clientY,
              target: target,
              container: container,
              originalEvent: event
            });

            _this26.trigger(container, dragStartEvent);

            _this26.currentContainer = container;
            _this26.dragging = !dragStartEvent.canceled();

            if (_this26.dragging) {
              document.addEventListener('contextmenu', _this26[onContextMenuWhileDragging]);
              document.addEventListener('mousemove', _this26[onMouseMove]);
            }
          }, this.options.delay);
        }
        /**
         * Mouse move handler
         * @private
         * @param {Event} event - Mouse move event
         */
        ;

        _proto13[onMouseMove] = function (event) {
          if (!this.dragging) {
            return;
          }

          var target = document.elementFromPoint(event.clientX, event.clientY);
          var dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({
            clientX: event.clientX,
            clientY: event.clientY,
            target: target,
            container: this.currentContainer,
            originalEvent: event
          });
          this.trigger(this.currentContainer, dragMoveEvent);
        }
        /**
         * Mouse up handler
         * @private
         * @param {Event} event - Mouse up event
         */
        ;

        _proto13[onMouseUp] = function (event) {
          this.mouseDown = Boolean(this.openedContextMenu);

          if (this.openedContextMenu) {
            this.openedContextMenu = false;
            return;
          }

          document.removeEventListener('mouseup', this[onMouseUp]);
          document.removeEventListener('dragstart', preventNativeDragStart);

          if (!this.dragging) {
            return;
          }

          var target = document.elementFromPoint(event.clientX, event.clientY);
          var dragStopEvent = new _SensorEvent.DragStopSensorEvent({
            clientX: event.clientX,
            clientY: event.clientY,
            target: target,
            container: this.currentContainer,
            originalEvent: event
          });
          this.trigger(this.currentContainer, dragStopEvent);
          document.removeEventListener('contextmenu', this[onContextMenuWhileDragging]);
          document.removeEventListener('mousemove', this[onMouseMove]);
          this.currentContainer = null;
          this.dragging = false;
        }
        /**
         * Context menu handler
         * @private
         * @param {Event} event - Context menu event
         */
        ;

        _proto13[onContextMenuWhileDragging] = function (event) {
          event.preventDefault();
          this.openedContextMenu = true;
        };

        return MouseSensor;
      }(_Sensor2["default"]);

      exports["default"] = MouseSensor;

      function preventNativeDragStart(event) {
        event.preventDefault();
      }
      /***/

    },
    /* 46 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _MouseSensor = __webpack_require__(45);

      var _MouseSensor2 = _interopRequireDefault(_MouseSensor);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _MouseSensor2["default"];
      /***/
    },
    /* 47 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };
      /**
       * Base sensor class. Extend from this class to create a new or custom sensor
       * @class Sensor
       * @module Sensor
       */


      var Sensor = /*#__PURE__*/function () {
        /**
         * Sensor constructor.
         * @constructs Sensor
         * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers
         * @param {Object} options - Options
         */
        function Sensor() {
          var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          /**
           * Current containers
           * @property containers
           * @type {HTMLElement[]}
           */
          this.containers = _toConsumableArray(containers);
          /**
           * Current options
           * @property options
           * @type {Object}
           */

          this.options = _extends({}, options);
          /**
           * Current drag state
           * @property dragging
           * @type {Boolean}
           */

          this.dragging = false;
          /**
           * Current container
           * @property currentContainer
           * @type {HTMLElement}
           */

          this.currentContainer = null;
        }
        /**
         * Attaches sensors event listeners to the DOM
         * @return {Sensor}
         */


        var _proto14 = Sensor.prototype;

        _proto14.attach = function attach() {
          return this;
        }
        /**
         * Detaches sensors event listeners to the DOM
         * @return {Sensor}
         */
        ;

        _proto14.detach = function detach() {
          return this;
        }
        /**
         * Adds container to this sensor instance
         * @param {...HTMLElement} containers - Containers you want to add to this sensor
         * @example draggable.addContainer(document.body)
         */
        ;

        _proto14.addContainer = function addContainer() {
          for (var _len9 = arguments.length, containers = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            containers[_key9] = arguments[_key9];
          }

          this.containers = [].concat(_toConsumableArray(this.containers), containers);
        }
        /**
         * Removes container from this sensor instance
         * @param {...HTMLElement} containers - Containers you want to remove from this sensor
         * @example draggable.removeContainer(document.body)
         */
        ;

        _proto14.removeContainer = function removeContainer() {
          for (var _len10 = arguments.length, containers = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
            containers[_key10] = arguments[_key10];
          }

          this.containers = this.containers.filter(function (container) {
            return !containers.includes(container);
          });
        }
        /**
         * Triggers event on target element
         * @param {HTMLElement} element - Element to trigger event on
         * @param {SensorEvent} sensorEvent - Sensor event to trigger
         */
        ;

        _proto14.trigger = function trigger(element, sensorEvent) {
          var event = document.createEvent('Event');
          event.detail = sensorEvent;
          event.initEvent(sensorEvent.type, true, true);
          element.dispatchEvent(event);
          this.lastEvent = sensorEvent;
          return sensorEvent;
        };

        return Sensor;
      }();

      exports["default"] = Sensor;
      /***/
    },
    /* 48 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = requestNextAnimationFrame;

      function requestNextAnimationFrame(callback) {
        return requestAnimationFrame(function () {
          requestAnimationFrame(callback);
        });
      }
      /***/

    },
    /* 49 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _requestNextAnimationFrame = __webpack_require__(48);

      var _requestNextAnimationFrame2 = _interopRequireDefault(_requestNextAnimationFrame);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _requestNextAnimationFrame2["default"];
      /***/
    },
    /* 50 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = closest;
      var matchFunction = Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;
      /**
       * Get the closest parent element of a given element that matches the given
       * selector string or matching function
       *
       * @param {Element} element The child element to find a parent of
       * @param {String|Function} selector The string or function to use to match
       *     the parent element
       * @return {Element|null}
       */

      function closest(element, value) {
        if (!element) {
          return null;
        }

        var selector = value;
        var callback = value;
        var nodeList = value;
        var singleElement = value;
        var isSelector = Boolean(typeof value === 'string');
        var isFunction = Boolean(typeof value === 'function');
        var isNodeList = Boolean(value instanceof NodeList || value instanceof Array);
        var isElement = Boolean(value instanceof HTMLElement);

        function conditionFn(currentElement) {
          if (!currentElement) {
            return currentElement;
          } else if (isSelector) {
            return matchFunction.call(currentElement, selector);
          } else if (isNodeList) {
            return _toConsumableArray(nodeList).includes(currentElement);
          } else if (isElement) {
            return singleElement === currentElement;
          } else if (isFunction) {
            return callback(currentElement);
          } else {
            return null;
          }
        }

        var current = element;

        do {
          current = current.correspondingUseElement || current.correspondingElement || current;

          if (conditionFn(current)) {
            return current;
          }

          current = current.parentNode;
        } while (current && current !== document.body && current !== document);

        return null;
      }
      /***/

    },
    /* 51 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _closest = __webpack_require__(50);

      var _closest2 = _interopRequireDefault(_closest);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _closest2["default"];
      /***/
    },
    /* 52 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = exports.scroll = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _AbstractPlugin = __webpack_require__(1);

      var _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);

      var _utils = __webpack_require__(2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onDragStart = exports.onDragStart = Symbol('onDragStart');
      var onDragMove = exports.onDragMove = Symbol('onDragMove');
      var onDragStop = exports.onDragStop = Symbol('onDragStop');
      var scroll = exports.scroll = Symbol('scroll');
      /**
       * Scrollable default options
       * @property {Object} defaultOptions
       * @property {Number} defaultOptions.speed
       * @property {Number} defaultOptions.sensitivity
       * @property {HTMLElement[]} defaultOptions.scrollableElements
       * @type {Object}
       */

      var defaultOptions = exports.defaultOptions = {
        speed: 6,
        sensitivity: 50,
        scrollableElements: []
      };
      /**
       * Scrollable plugin which scrolls the closest scrollable parent
       * @class Scrollable
       * @module Scrollable
       * @extends AbstractPlugin
       */

      var Scrollable = /*#__PURE__*/function (_AbstractPlugin2$defa5) {
        _inheritsLoose(Scrollable, _AbstractPlugin2$defa5);

        /**
         * Scrollable constructor.
         * @constructs Scrollable
         * @param {Draggable} draggable - Draggable instance
         */
        function Scrollable(draggable) {
          var _this27;

          _this27 = _AbstractPlugin2$defa5.call(this, draggable) || this;
          /**
           * Scrollable options
           * @property {Object} options
           * @property {Number} options.speed
           * @property {Number} options.sensitivity
           * @property {HTMLElement[]} options.scrollableElements
           * @type {Object}
           */

          _this27.options = _extends({}, defaultOptions, _this27.getOptions());
          /**
           * Keeps current mouse position
           * @property {Object} currentMousePosition
           * @property {Number} currentMousePosition.clientX
           * @property {Number} currentMousePosition.clientY
           * @type {Object|null}
           */

          _this27.currentMousePosition = null;
          /**
           * Scroll animation frame
           * @property scrollAnimationFrame
           * @type {Number|null}
           */

          _this27.scrollAnimationFrame = null;
          /**
           * Closest scrollable element
           * @property scrollableElement
           * @type {HTMLElement|null}
           */

          _this27.scrollableElement = null;
          /**
           * Animation frame looking for the closest scrollable element
           * @property findScrollableElementFrame
           * @type {Number|null}
           */

          _this27.findScrollableElementFrame = null;
          _this27[onDragStart] = _this27[onDragStart].bind(_assertThisInitialized(_this27));
          _this27[onDragMove] = _this27[onDragMove].bind(_assertThisInitialized(_this27));
          _this27[onDragStop] = _this27[onDragStop].bind(_assertThisInitialized(_this27));
          _this27[scroll] = _this27[scroll].bind(_assertThisInitialized(_this27));
          return _this27;
        }
        /**
         * Attaches plugins event listeners
         */


        var _proto15 = Scrollable.prototype;

        _proto15.attach = function attach() {
          this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);
        }
        /**
         * Detaches plugins event listeners
         */
        ;

        _proto15.detach = function detach() {
          this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);
        }
        /**
         * Returns options passed through draggable
         * @return {Object}
         */
        ;

        _proto15.getOptions = function getOptions() {
          return this.draggable.options.scrollable || {};
        }
        /**
         * Returns closest scrollable elements by element
         * @param {HTMLElement} target
         * @return {HTMLElement}
         */
        ;

        _proto15.getScrollableElement = function getScrollableElement(target) {
          if (this.hasDefinedScrollableElements()) {
            return (0, _utils.closest)(target, this.options.scrollableElements) || document.documentElement;
          } else {
            return closestScrollableElement(target);
          }
        }
        /**
         * Returns true if at least one scrollable element have been defined via options
         * @param {HTMLElement} target
         * @return {Boolean}
         */
        ;

        _proto15.hasDefinedScrollableElements = function hasDefinedScrollableElements() {
          return Boolean(this.options.scrollableElements.length !== 0);
        }
        /**
         * Drag start handler. Finds closest scrollable parent in separate frame
         * @param {DragStartEvent} dragEvent
         * @private
         */
        ;

        _proto15[onDragStart] = function (dragEvent) {
          var _this28 = this;

          this.findScrollableElementFrame = requestAnimationFrame(function () {
            _this28.scrollableElement = _this28.getScrollableElement(dragEvent.source);
          });
        }
        /**
         * Drag move handler. Remembers mouse position and initiates scrolling
         * @param {DragMoveEvent} dragEvent
         * @private
         */
        ;

        _proto15[onDragMove] = function (dragEvent) {
          var _this29 = this;

          this.findScrollableElementFrame = requestAnimationFrame(function () {
            _this29.scrollableElement = _this29.getScrollableElement(dragEvent.sensorEvent.target);
          });

          if (!this.scrollableElement) {
            return;
          }

          var sensorEvent = dragEvent.sensorEvent;
          var scrollOffset = {
            x: 0,
            y: 0
          };

          if ('ontouchstart' in window) {
            scrollOffset.y = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
            scrollOffset.x = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
          }

          this.currentMousePosition = {
            clientX: sensorEvent.clientX - scrollOffset.x,
            clientY: sensorEvent.clientY - scrollOffset.y
          };
          this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);
        }
        /**
         * Drag stop handler. Cancels scroll animations and resets state
         * @private
         */
        ;

        _proto15[onDragStop] = function () {
          cancelAnimationFrame(this.scrollAnimationFrame);
          cancelAnimationFrame(this.findScrollableElementFrame);
          this.scrollableElement = null;
          this.scrollAnimationFrame = null;
          this.findScrollableElementFrame = null;
          this.currentMousePosition = null;
        }
        /**
         * Scroll function that does the heavylifting
         * @private
         */
        ;

        _proto15[scroll] = function () {
          if (!this.scrollableElement || !this.currentMousePosition) {
            return;
          }

          cancelAnimationFrame(this.scrollAnimationFrame);
          var _this$options = this.options,
              speed = _this$options.speed,
              sensitivity = _this$options.sensitivity;
          var rect = this.scrollableElement.getBoundingClientRect();
          var bottomCutOff = rect.bottom > window.innerHeight;
          var topCutOff = rect.top < 0;
          var cutOff = topCutOff || bottomCutOff;
          var documentScrollingElement = getDocumentScrollingElement();
          var scrollableElement = this.scrollableElement;
          var clientX = this.currentMousePosition.clientX;
          var clientY = this.currentMousePosition.clientY;

          if (scrollableElement !== document.body && scrollableElement !== document.documentElement && !cutOff) {
            var offsetHeight = scrollableElement.offsetHeight,
                offsetWidth = scrollableElement.offsetWidth;

            if (rect.top + offsetHeight - clientY < sensitivity) {
              scrollableElement.scrollTop += speed;
            } else if (clientY - rect.top < sensitivity) {
              scrollableElement.scrollTop -= speed;
            }

            if (rect.left + offsetWidth - clientX < sensitivity) {
              scrollableElement.scrollLeft += speed;
            } else if (clientX - rect.left < sensitivity) {
              scrollableElement.scrollLeft -= speed;
            }
          } else {
            var _window = window,
                innerHeight = _window.innerHeight,
                innerWidth = _window.innerWidth;

            if (clientY < sensitivity) {
              documentScrollingElement.scrollTop -= speed;
            } else if (innerHeight - clientY < sensitivity) {
              documentScrollingElement.scrollTop += speed;
            }

            if (clientX < sensitivity) {
              documentScrollingElement.scrollLeft -= speed;
            } else if (innerWidth - clientX < sensitivity) {
              documentScrollingElement.scrollLeft += speed;
            }
          }

          this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);
        };

        return Scrollable;
      }(_AbstractPlugin2["default"]);

      exports["default"] = Scrollable;
      /**
       * Returns true if the passed element has overflow
       * @param {HTMLElement} element
       * @return {Boolean}
       * @private
       */

      function hasOverflow(element) {
        var overflowRegex = /(auto|scroll)/;
        var computedStyles = getComputedStyle(element, null);
        var overflow = computedStyles.getPropertyValue('overflow') + computedStyles.getPropertyValue('overflow-y') + computedStyles.getPropertyValue('overflow-x');
        return overflowRegex.test(overflow);
      }
      /**
       * Returns true if the passed element is statically positioned
       * @param {HTMLElement} element
       * @return {Boolean}
       * @private
       */


      function isStaticallyPositioned(element) {
        var position = getComputedStyle(element).getPropertyValue('position');
        return position === 'static';
      }
      /**
       * Finds closest scrollable element
       * @param {HTMLElement} element
       * @return {HTMLElement}
       * @private
       */


      function closestScrollableElement(element) {
        if (!element) {
          return getDocumentScrollingElement();
        }

        var position = getComputedStyle(element).getPropertyValue('position');
        var excludeStaticParents = position === 'absolute';
        var scrollableElement = (0, _utils.closest)(element, function (parent) {
          if (excludeStaticParents && isStaticallyPositioned(parent)) {
            return false;
          }

          return hasOverflow(parent);
        });

        if (position === 'fixed' || !scrollableElement) {
          return getDocumentScrollingElement();
        } else {
          return scrollableElement;
        }
      }
      /**
       * Returns element that scrolls document
       * @return {HTMLElement}
       * @private
       */


      function getDocumentScrollingElement() {
        return document.scrollingElement || document.documentElement;
      }
      /***/

    },
    /* 53 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = undefined;

      var _Scrollable = __webpack_require__(52);

      var _Scrollable2 = _interopRequireDefault(_Scrollable);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Scrollable2["default"];
      exports.defaultOptions = _Scrollable.defaultOptions;
      /***/
    },
    /* 54 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.MirrorDestroyEvent = exports.MirrorMoveEvent = exports.MirrorAttachedEvent = exports.MirrorCreatedEvent = exports.MirrorCreateEvent = exports.MirrorEvent = undefined;

      var _AbstractEvent = __webpack_require__(0);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /**
       * Base mirror event
       * @class MirrorEvent
       * @module MirrorEvent
       * @extends AbstractEvent
       */


      var MirrorEvent = /*#__PURE__*/function (_AbstractEvent2$defau7) {
        _inheritsLoose(MirrorEvent, _AbstractEvent2$defau7);

        function MirrorEvent() {
          return _AbstractEvent2$defau7.apply(this, arguments) || this;
        }

        _createClass(MirrorEvent, [{
          key: "source",

          /**
           * Draggables source element
           * @property source
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.source;
          }
          /**
           * Draggables original source element
           * @property originalSource
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "originalSource",
          get: function get() {
            return this.data.originalSource;
          }
          /**
           * Draggables source container element
           * @property sourceContainer
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "sourceContainer",
          get: function get() {
            return this.data.sourceContainer;
          }
          /**
           * Sensor event
           * @property sensorEvent
           * @type {SensorEvent}
           * @readonly
           */

        }, {
          key: "sensorEvent",
          get: function get() {
            return this.data.sensorEvent;
          }
          /**
           * Drag event
           * @property dragEvent
           * @type {DragEvent}
           * @readonly
           */

        }, {
          key: "dragEvent",
          get: function get() {
            return this.data.dragEvent;
          }
          /**
           * Original event that triggered sensor event
           * @property originalEvent
           * @type {Event}
           * @readonly
           */

        }, {
          key: "originalEvent",
          get: function get() {
            if (this.sensorEvent) {
              return this.sensorEvent.originalEvent;
            }

            return null;
          }
        }]);

        return MirrorEvent;
      }(_AbstractEvent2["default"]);

      exports.MirrorEvent = MirrorEvent;
      /**
       * Mirror create event
       * @class MirrorCreateEvent
       * @module MirrorCreateEvent
       * @extends MirrorEvent
       */

      var MirrorCreateEvent = /*#__PURE__*/function (_MirrorEvent2) {
        _inheritsLoose(MirrorCreateEvent, _MirrorEvent2);

        function MirrorCreateEvent() {
          return _MirrorEvent2.apply(this, arguments) || this;
        }

        return MirrorCreateEvent;
      }(MirrorEvent);

      exports.MirrorCreateEvent = MirrorCreateEvent;
      /**
       * Mirror created event
       * @class MirrorCreatedEvent
       * @module MirrorCreatedEvent
       * @extends MirrorEvent
       */

      MirrorCreateEvent.type = 'mirror:create';

      var MirrorCreatedEvent = /*#__PURE__*/function (_MirrorEvent3) {
        _inheritsLoose(MirrorCreatedEvent, _MirrorEvent3);

        function MirrorCreatedEvent() {
          return _MirrorEvent3.apply(this, arguments) || this;
        }

        _createClass(MirrorCreatedEvent, [{
          key: "mirror",

          /**
           * Draggables mirror element
           * @property mirror
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.mirror;
          }
        }]);

        return MirrorCreatedEvent;
      }(MirrorEvent);

      exports.MirrorCreatedEvent = MirrorCreatedEvent;
      /**
       * Mirror attached event
       * @class MirrorAttachedEvent
       * @module MirrorAttachedEvent
       * @extends MirrorEvent
       */

      MirrorCreatedEvent.type = 'mirror:created';

      var MirrorAttachedEvent = /*#__PURE__*/function (_MirrorEvent4) {
        _inheritsLoose(MirrorAttachedEvent, _MirrorEvent4);

        function MirrorAttachedEvent() {
          return _MirrorEvent4.apply(this, arguments) || this;
        }

        _createClass(MirrorAttachedEvent, [{
          key: "mirror",

          /**
           * Draggables mirror element
           * @property mirror
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.mirror;
          }
        }]);

        return MirrorAttachedEvent;
      }(MirrorEvent);

      exports.MirrorAttachedEvent = MirrorAttachedEvent;
      /**
       * Mirror move event
       * @class MirrorMoveEvent
       * @module MirrorMoveEvent
       * @extends MirrorEvent
       */

      MirrorAttachedEvent.type = 'mirror:attached';

      var MirrorMoveEvent = /*#__PURE__*/function (_MirrorEvent5) {
        _inheritsLoose(MirrorMoveEvent, _MirrorEvent5);

        function MirrorMoveEvent() {
          return _MirrorEvent5.apply(this, arguments) || this;
        }

        _createClass(MirrorMoveEvent, [{
          key: "mirror",

          /**
           * Draggables mirror element
           * @property mirror
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.mirror;
          }
        }]);

        return MirrorMoveEvent;
      }(MirrorEvent);

      exports.MirrorMoveEvent = MirrorMoveEvent;
      /**
       * Mirror destroy event
       * @class MirrorDestroyEvent
       * @module MirrorDestroyEvent
       * @extends MirrorEvent
       */

      MirrorMoveEvent.type = 'mirror:move';
      MirrorMoveEvent.cancelable = true;

      var MirrorDestroyEvent = /*#__PURE__*/function (_MirrorEvent6) {
        _inheritsLoose(MirrorDestroyEvent, _MirrorEvent6);

        function MirrorDestroyEvent() {
          return _MirrorEvent6.apply(this, arguments) || this;
        }

        _createClass(MirrorDestroyEvent, [{
          key: "mirror",

          /**
           * Draggables mirror element
           * @property mirror
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.mirror;
          }
        }]);

        return MirrorDestroyEvent;
      }(MirrorEvent);

      exports.MirrorDestroyEvent = MirrorDestroyEvent;
      MirrorDestroyEvent.type = 'mirror:destroy';
      MirrorDestroyEvent.cancelable = true;
      /***/
    },
    /* 55 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _MirrorEvent = __webpack_require__(54);

      Object.keys(_MirrorEvent).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _MirrorEvent[key];
          }
        });
      });
      /***/
    },
    /* 56 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = exports.getAppendableContainer = exports.onScroll = exports.onMirrorMove = exports.onMirrorCreated = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _AbstractPlugin = __webpack_require__(1);

      var _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);

      var _MirrorEvent = __webpack_require__(55);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      function _objectWithoutProperties(obj, keys) {
        var target = {};

        for (var i in obj) {
          if (keys.indexOf(i) >= 0) continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
          target[i] = obj[i];
        }

        return target;
      }

      var onDragStart = exports.onDragStart = Symbol('onDragStart');
      var onDragMove = exports.onDragMove = Symbol('onDragMove');
      var onDragStop = exports.onDragStop = Symbol('onDragStop');
      var onMirrorCreated = exports.onMirrorCreated = Symbol('onMirrorCreated');
      var onMirrorMove = exports.onMirrorMove = Symbol('onMirrorMove');
      var onScroll = exports.onScroll = Symbol('onScroll');
      var getAppendableContainer = exports.getAppendableContainer = Symbol('getAppendableContainer');
      /**
       * Mirror default options
       * @property {Object} defaultOptions
       * @property {Boolean} defaultOptions.constrainDimensions
       * @property {Boolean} defaultOptions.xAxis
       * @property {Boolean} defaultOptions.yAxis
       * @property {null} defaultOptions.cursorOffsetX
       * @property {null} defaultOptions.cursorOffsetY
       * @type {Object}
       */

      var defaultOptions = exports.defaultOptions = {
        constrainDimensions: false,
        xAxis: true,
        yAxis: true,
        cursorOffsetX: null,
        cursorOffsetY: null
      };
      /**
       * Mirror plugin which controls the mirror positioning while dragging
       * @class Mirror
       * @module Mirror
       * @extends AbstractPlugin
       */

      var Mirror = /*#__PURE__*/function (_AbstractPlugin2$defa6) {
        _inheritsLoose(Mirror, _AbstractPlugin2$defa6);

        /**
         * Mirror constructor.
         * @constructs Mirror
         * @param {Draggable} draggable - Draggable instance
         */
        function Mirror(draggable) {
          var _this30;

          _this30 = _AbstractPlugin2$defa6.call(this, draggable) || this;
          /**
           * Mirror options
           * @property {Object} options
           * @property {Boolean} options.constrainDimensions
           * @property {Boolean} options.xAxis
           * @property {Boolean} options.yAxis
           * @property {Number|null} options.cursorOffsetX
           * @property {Number|null} options.cursorOffsetY
           * @property {String|HTMLElement|Function} options.appendTo
           * @type {Object}
           */

          _this30.options = _extends({}, defaultOptions, _this30.getOptions());
          /**
           * Scroll offset for touch devices because the mirror is positioned fixed
           * @property {Object} scrollOffset
           * @property {Number} scrollOffset.x
           * @property {Number} scrollOffset.y
           */

          _this30.scrollOffset = {
            x: 0,
            y: 0
          };
          /**
           * Initial scroll offset for touch devices because the mirror is positioned fixed
           * @property {Object} scrollOffset
           * @property {Number} scrollOffset.x
           * @property {Number} scrollOffset.y
           */

          _this30.initialScrollOffset = {
            x: window.scrollX,
            y: window.scrollY
          };
          _this30[onDragStart] = _this30[onDragStart].bind(_assertThisInitialized(_this30));
          _this30[onDragMove] = _this30[onDragMove].bind(_assertThisInitialized(_this30));
          _this30[onDragStop] = _this30[onDragStop].bind(_assertThisInitialized(_this30));
          _this30[onMirrorCreated] = _this30[onMirrorCreated].bind(_assertThisInitialized(_this30));
          _this30[onMirrorMove] = _this30[onMirrorMove].bind(_assertThisInitialized(_this30));
          _this30[onScroll] = _this30[onScroll].bind(_assertThisInitialized(_this30));
          return _this30;
        }
        /**
         * Attaches plugins event listeners
         */


        var _proto16 = Mirror.prototype;

        _proto16.attach = function attach() {
          this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]).on('mirror:created', this[onMirrorCreated]).on('mirror:move', this[onMirrorMove]);
        }
        /**
         * Detaches plugins event listeners
         */
        ;

        _proto16.detach = function detach() {
          this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]).off('mirror:created', this[onMirrorCreated]).off('mirror:move', this[onMirrorMove]);
        }
        /**
         * Returns options passed through draggable
         * @return {Object}
         */
        ;

        _proto16.getOptions = function getOptions() {
          return this.draggable.options.mirror || {};
        };

        _proto16[onDragStart] = function (dragEvent) {
          if (dragEvent.canceled()) {
            return;
          }

          if ('ontouchstart' in window) {
            document.addEventListener('scroll', this[onScroll], true);
          }

          this.initialScrollOffset = {
            x: window.scrollX,
            y: window.scrollY
          };
          var source = dragEvent.source,
              originalSource = dragEvent.originalSource,
              sourceContainer = dragEvent.sourceContainer,
              sensorEvent = dragEvent.sensorEvent;
          var mirrorCreateEvent = new _MirrorEvent.MirrorCreateEvent({
            source: source,
            originalSource: originalSource,
            sourceContainer: sourceContainer,
            sensorEvent: sensorEvent,
            dragEvent: dragEvent
          });
          this.draggable.trigger(mirrorCreateEvent);

          if (isNativeDragEvent(sensorEvent) || mirrorCreateEvent.canceled()) {
            return;
          }

          var appendableContainer = this[getAppendableContainer](source) || sourceContainer;
          this.mirror = source.cloneNode(true);
          var mirrorCreatedEvent = new _MirrorEvent.MirrorCreatedEvent({
            source: source,
            originalSource: originalSource,
            sourceContainer: sourceContainer,
            sensorEvent: sensorEvent,
            dragEvent: dragEvent,
            mirror: this.mirror
          });
          var mirrorAttachedEvent = new _MirrorEvent.MirrorAttachedEvent({
            source: source,
            originalSource: originalSource,
            sourceContainer: sourceContainer,
            sensorEvent: sensorEvent,
            dragEvent: dragEvent,
            mirror: this.mirror
          });
          this.draggable.trigger(mirrorCreatedEvent);
          appendableContainer.appendChild(this.mirror);
          this.draggable.trigger(mirrorAttachedEvent);
        };

        _proto16[onDragMove] = function (dragEvent) {
          if (!this.mirror || dragEvent.canceled()) {
            return;
          }

          var source = dragEvent.source,
              originalSource = dragEvent.originalSource,
              sourceContainer = dragEvent.sourceContainer,
              sensorEvent = dragEvent.sensorEvent;
          var mirrorMoveEvent = new _MirrorEvent.MirrorMoveEvent({
            source: source,
            originalSource: originalSource,
            sourceContainer: sourceContainer,
            sensorEvent: sensorEvent,
            dragEvent: dragEvent,
            mirror: this.mirror
          });
          this.draggable.trigger(mirrorMoveEvent);
        };

        _proto16[onDragStop] = function (dragEvent) {
          if ('ontouchstart' in window) {
            document.removeEventListener('scroll', this[onScroll], true);
          }

          this.initialScrollOffset = {
            x: 0,
            y: 0
          };
          this.scrollOffset = {
            x: 0,
            y: 0
          };

          if (!this.mirror) {
            return;
          }

          var source = dragEvent.source,
              sourceContainer = dragEvent.sourceContainer,
              sensorEvent = dragEvent.sensorEvent;
          var mirrorDestroyEvent = new _MirrorEvent.MirrorDestroyEvent({
            source: source,
            mirror: this.mirror,
            sourceContainer: sourceContainer,
            sensorEvent: sensorEvent,
            dragEvent: dragEvent
          });
          this.draggable.trigger(mirrorDestroyEvent);

          if (!mirrorDestroyEvent.canceled()) {
            this.mirror.parentNode.removeChild(this.mirror);
          }
        };

        _proto16[onScroll] = function () {
          this.scrollOffset = {
            x: window.scrollX - this.initialScrollOffset.x,
            y: window.scrollY - this.initialScrollOffset.y
          };
        }
        /**
         * Mirror created handler
         * @param {MirrorCreatedEvent} mirrorEvent
         * @return {Promise}
         * @private
         */
        ;

        _proto16[onMirrorCreated] = function (_ref19) {
          var _this31 = this;

          var mirror = _ref19.mirror,
              source = _ref19.source,
              sensorEvent = _ref19.sensorEvent;
          var mirrorClass = this.draggable.getClassNameFor('mirror');

          var setState = function setState(_ref) {
            var mirrorOffset = _ref.mirrorOffset,
                initialX = _ref.initialX,
                initialY = _ref.initialY,
                args = _objectWithoutProperties(_ref, ['mirrorOffset', 'initialX', 'initialY']);

            _this31.mirrorOffset = mirrorOffset;
            _this31.initialX = initialX;
            _this31.initialY = initialY;
            return _extends({
              mirrorOffset: mirrorOffset,
              initialX: initialX,
              initialY: initialY
            }, args);
          };

          var initialState = {
            mirror: mirror,
            source: source,
            sensorEvent: sensorEvent,
            mirrorClass: mirrorClass,
            scrollOffset: this.scrollOffset,
            options: this.options
          };
          return Promise.resolve(initialState) // Fix reflow here
          .then(computeMirrorDimensions).then(calculateMirrorOffset).then(resetMirror).then(addMirrorClasses).then(positionMirror({
            initial: true
          })).then(removeMirrorID).then(setState);
        }
        /**
         * Mirror move handler
         * @param {MirrorMoveEvent} mirrorEvent
         * @return {Promise|null}
         * @private
         */
        ;

        _proto16[onMirrorMove] = function (mirrorEvent) {
          if (mirrorEvent.canceled()) {
            return null;
          }

          var initialState = {
            mirror: mirrorEvent.mirror,
            sensorEvent: mirrorEvent.sensorEvent,
            mirrorOffset: this.mirrorOffset,
            options: this.options,
            initialX: this.initialX,
            initialY: this.initialY,
            scrollOffset: this.scrollOffset
          };
          return Promise.resolve(initialState).then(positionMirror({
            raf: true
          }));
        }
        /**
         * Returns appendable container for mirror based on the appendTo option
         * @private
         * @param {Object} options
         * @param {HTMLElement} options.source - Current source
         * @return {HTMLElement}
         */
        ;

        _proto16[getAppendableContainer] = function (source) {
          var appendTo = this.options.appendTo;

          if (typeof appendTo === 'string') {
            return document.querySelector(appendTo);
          } else if (appendTo instanceof HTMLElement) {
            return appendTo;
          } else if (typeof appendTo === 'function') {
            return appendTo(source);
          } else {
            return source.parentNode;
          }
        };

        return Mirror;
      }(_AbstractPlugin2["default"]);

      exports["default"] = Mirror;
      /**
       * Computes mirror dimensions based on the source element
       * Adds sourceRect to state
       * @param {Object} state
       * @param {HTMLElement} state.source
       * @return {Promise}
       * @private
       */

      function computeMirrorDimensions(_ref2) {
        var source = _ref2.source,
            args = _objectWithoutProperties(_ref2, ['source']);

        return withPromise(function (resolve) {
          var sourceRect = source.getBoundingClientRect();
          resolve(_extends({
            source: source,
            sourceRect: sourceRect
          }, args));
        });
      }
      /**
       * Calculates mirror offset
       * Adds mirrorOffset to state
       * @param {Object} state
       * @param {SensorEvent} state.sensorEvent
       * @param {DOMRect} state.sourceRect
       * @return {Promise}
       * @private
       */


      function calculateMirrorOffset(_ref3) {
        var sensorEvent = _ref3.sensorEvent,
            sourceRect = _ref3.sourceRect,
            options = _ref3.options,
            args = _objectWithoutProperties(_ref3, ['sensorEvent', 'sourceRect', 'options']);

        return withPromise(function (resolve) {
          var top = options.cursorOffsetY === null ? sensorEvent.clientY - sourceRect.top : options.cursorOffsetY;
          var left = options.cursorOffsetX === null ? sensorEvent.clientX - sourceRect.left : options.cursorOffsetX;
          var mirrorOffset = {
            top: top,
            left: left
          };
          resolve(_extends({
            sensorEvent: sensorEvent,
            sourceRect: sourceRect,
            mirrorOffset: mirrorOffset,
            options: options
          }, args));
        });
      }
      /**
       * Applys mirror styles
       * @param {Object} state
       * @param {HTMLElement} state.mirror
       * @param {HTMLElement} state.source
       * @param {Object} state.options
       * @return {Promise}
       * @private
       */


      function resetMirror(_ref4) {
        var mirror = _ref4.mirror,
            source = _ref4.source,
            options = _ref4.options,
            args = _objectWithoutProperties(_ref4, ['mirror', 'source', 'options']);

        return withPromise(function (resolve) {
          var offsetHeight;
          var offsetWidth;

          if (options.constrainDimensions) {
            var computedSourceStyles = getComputedStyle(source);
            offsetHeight = computedSourceStyles.getPropertyValue('height');
            offsetWidth = computedSourceStyles.getPropertyValue('width');
          }

          mirror.style.position = 'fixed';
          mirror.style.pointerEvents = 'none';
          mirror.style.top = 0;
          mirror.style.left = 0;
          mirror.style.margin = 0;

          if (options.constrainDimensions) {
            mirror.style.height = offsetHeight;
            mirror.style.width = offsetWidth;
          }

          resolve(_extends({
            mirror: mirror,
            source: source,
            options: options
          }, args));
        });
      }
      /**
       * Applys mirror class on mirror element
       * @param {Object} state
       * @param {HTMLElement} state.mirror
       * @param {String} state.mirrorClass
       * @return {Promise}
       * @private
       */


      function addMirrorClasses(_ref5) {
        var mirror = _ref5.mirror,
            mirrorClass = _ref5.mirrorClass,
            args = _objectWithoutProperties(_ref5, ['mirror', 'mirrorClass']);

        return withPromise(function (resolve) {
          mirror.classList.add(mirrorClass);
          resolve(_extends({
            mirror: mirror,
            mirrorClass: mirrorClass
          }, args));
        });
      }
      /**
       * Removes source ID from cloned mirror element
       * @param {Object} state
       * @param {HTMLElement} state.mirror
       * @return {Promise}
       * @private
       */


      function removeMirrorID(_ref6) {
        var mirror = _ref6.mirror,
            args = _objectWithoutProperties(_ref6, ['mirror']);

        return withPromise(function (resolve) {
          mirror.removeAttribute('id');
          delete mirror.id;
          resolve(_extends({
            mirror: mirror
          }, args));
        });
      }
      /**
       * Positions mirror with translate3d
       * @param {Object} state
       * @param {HTMLElement} state.mirror
       * @param {SensorEvent} state.sensorEvent
       * @param {Object} state.mirrorOffset
       * @param {Number} state.initialY
       * @param {Number} state.initialX
       * @param {Object} state.options
       * @return {Promise}
       * @private
       */


      function positionMirror() {
        var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref20$withFrame = _ref20.withFrame,
            withFrame = _ref20$withFrame === void 0 ? false : _ref20$withFrame,
            _ref20$initial = _ref20.initial,
            initial = _ref20$initial === void 0 ? false : _ref20$initial;

        return function (_ref7) {
          var mirror = _ref7.mirror,
              sensorEvent = _ref7.sensorEvent,
              mirrorOffset = _ref7.mirrorOffset,
              initialY = _ref7.initialY,
              initialX = _ref7.initialX,
              scrollOffset = _ref7.scrollOffset,
              options = _ref7.options,
              args = _objectWithoutProperties(_ref7, ['mirror', 'sensorEvent', 'mirrorOffset', 'initialY', 'initialX', 'scrollOffset', 'options']);

          return withPromise(function (resolve) {
            var result = _extends({
              mirror: mirror,
              sensorEvent: sensorEvent,
              mirrorOffset: mirrorOffset,
              options: options
            }, args);

            if (mirrorOffset) {
              var x = sensorEvent.clientX - mirrorOffset.left - scrollOffset.x;
              var y = sensorEvent.clientY - mirrorOffset.top - scrollOffset.y;

              if (options.xAxis && options.yAxis || initial) {
                mirror.style.transform = "translate3d(".concat(x, "px, ").concat(y, "px, 0)");
              } else if (options.xAxis && !options.yAxis) {
                mirror.style.transform = "translate3d(".concat(x, "px, ").concat(initialY, "px, 0)");
              } else if (options.yAxis && !options.xAxis) {
                mirror.style.transform = "translate3d(".concat(initialX, "px, ").concat(y, "px, 0)");
              }

              if (initial) {
                result.initialX = x;
                result.initialY = y;
              }
            }

            resolve(result);
          }, {
            frame: withFrame
          });
        };
      }
      /**
       * Wraps functions in promise with potential animation frame option
       * @param {Function} callback
       * @param {Object} options
       * @param {Boolean} options.raf
       * @return {Promise}
       * @private
       */


      function withPromise(callback) {
        var _ref21 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref21$raf = _ref21.raf,
            raf = _ref21$raf === void 0 ? false : _ref21$raf;

        return new Promise(function (resolve, reject) {
          if (raf) {
            requestAnimationFrame(function () {
              callback(resolve, reject);
            });
          } else {
            callback(resolve, reject);
          }
        });
      }
      /**
       * Returns true if the sensor event was triggered by a native browser drag event
       * @param {SensorEvent} sensorEvent
       */


      function isNativeDragEvent(sensorEvent) {
        return /^drag/.test(sensorEvent.originalEvent.type);
      }
      /***/

    },
    /* 57 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = undefined;

      var _Mirror = __webpack_require__(56);

      var _Mirror2 = _interopRequireDefault(_Mirror);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Mirror2["default"];
      exports.defaultOptions = _Mirror.defaultOptions;
      /***/
    },
    /* 58 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _AbstractPlugin = __webpack_require__(1);

      var _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onInitialize = Symbol('onInitialize');
      var onDestroy = Symbol('onDestroy');
      /**
       * Focusable default options
       * @property {Object} defaultOptions
       * @type {Object}
       */

      var defaultOptions = {};
      /**
       * Focusable plugin
       * @class Focusable
       * @module Focusable
       * @extends AbstractPlugin
       */

      var Focusable = /*#__PURE__*/function (_AbstractPlugin2$defa7) {
        _inheritsLoose(Focusable, _AbstractPlugin2$defa7);

        /**
         * Focusable constructor.
         * @constructs Focusable
         * @param {Draggable} draggable - Draggable instance
         */
        function Focusable(draggable) {
          var _this32;

          _this32 = _AbstractPlugin2$defa7.call(this, draggable) || this;
          /**
           * Focusable options
           * @property {Object} options
           * @type {Object}
           */

          _this32.options = _extends({}, defaultOptions, _this32.getOptions());
          _this32[onInitialize] = _this32[onInitialize].bind(_assertThisInitialized(_this32));
          _this32[onDestroy] = _this32[onDestroy].bind(_assertThisInitialized(_this32));
          return _this32;
        }
        /**
         * Attaches listeners to draggable
         */


        var _proto17 = Focusable.prototype;

        _proto17.attach = function attach() {
          this.draggable.on('draggable:initialize', this[onInitialize]).on('draggable:destroy', this[onDestroy]);
        }
        /**
         * Detaches listeners from draggable
         */
        ;

        _proto17.detach = function detach() {
          this.draggable.off('draggable:initialize', this[onInitialize]).off('draggable:destroy', this[onDestroy]);
        }
        /**
         * Returns options passed through draggable
         * @return {Object}
         */
        ;

        _proto17.getOptions = function getOptions() {
          return this.draggable.options.focusable || {};
        }
        /**
         * Returns draggable containers and elements
         * @return {HTMLElement[]}
         */
        ;

        _proto17.getElements = function getElements() {
          return [].concat(_toConsumableArray(this.draggable.containers), _toConsumableArray(this.draggable.getDraggableElements()));
        }
        /**
         * Intialize handler
         * @private
         */
        ;

        _proto17[onInitialize] = function () {
          var _this33 = this;

          // Can wait until the next best frame is available
          requestAnimationFrame(function () {
            _this33.getElements().forEach(function (element) {
              return decorateElement(element);
            });
          });
        }
        /**
         * Destroy handler
         * @private
         */
        ;

        _proto17[onDestroy] = function () {
          var _this34 = this;

          // Can wait until the next best frame is available
          requestAnimationFrame(function () {
            _this34.getElements().forEach(function (element) {
              return stripElement(element);
            });
          });
        };

        return Focusable;
      }(_AbstractPlugin2["default"]);

      exports["default"] = Focusable;
      /**
       * Keeps track of all the elements that are missing tabindex attributes
       * so they can be reset when draggable gets destroyed
       * @const {HTMLElement[]} elementsWithMissingTabIndex
       */

      var elementsWithMissingTabIndex = [];
      /**
       * Decorates element with tabindex attributes
       * @param {HTMLElement} element
       * @return {Object}
       * @private
       */

      function decorateElement(element) {
        var hasMissingTabIndex = Boolean(!element.getAttribute('tabindex') && element.tabIndex === -1);

        if (hasMissingTabIndex) {
          elementsWithMissingTabIndex.push(element);
          element.tabIndex = 0;
        }
      }
      /**
       * Removes elements tabindex attributes
       * @param {HTMLElement} element
       * @private
       */


      function stripElement(element) {
        var tabIndexElementPosition = elementsWithMissingTabIndex.indexOf(element);

        if (tabIndexElementPosition !== -1) {
          element.tabIndex = -1;
          elementsWithMissingTabIndex.splice(tabIndexElementPosition, 1);
        }
      }
      /***/

    },
    /* 59 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _Focusable = __webpack_require__(58);

      var _Focusable2 = _interopRequireDefault(_Focusable);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Focusable2["default"];
      /***/
    },
    /* 60 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /**
       * All draggable plugins inherit from this class.
       * @abstract
       * @class AbstractPlugin
       * @module AbstractPlugin
       */

      var AbstractPlugin = /*#__PURE__*/function () {
        /**
         * AbstractPlugin constructor.
         * @constructs AbstractPlugin
         * @param {Draggable} draggable - Draggable instance
         */
        function AbstractPlugin(draggable) {
          /**
           * Draggable instance
           * @property draggable
           * @type {Draggable}
           */
          this.draggable = draggable;
        }
        /**
         * Override to add listeners
         * @abstract
         */


        var _proto18 = AbstractPlugin.prototype;

        _proto18.attach = function attach() {
          throw new Error('Not Implemented');
        }
        /**
         * Override to remove listeners
         * @abstract
         */
        ;

        _proto18.detach = function detach() {
          throw new Error('Not Implemented');
        };

        return AbstractPlugin;
      }();

      exports["default"] = AbstractPlugin;
      /***/
    },
    /* 61 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = undefined;

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _AbstractPlugin = __webpack_require__(1);

      var _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      var onInitialize = Symbol('onInitialize');
      var onDestroy = Symbol('onDestroy');
      var announceEvent = Symbol('announceEvent');
      var announceMessage = Symbol('announceMessage');
      var ARIA_RELEVANT = 'aria-relevant';
      var ARIA_ATOMIC = 'aria-atomic';
      var ARIA_LIVE = 'aria-live';
      var ROLE = 'role';
      /**
       * Announcement default options
       * @property {Object} defaultOptions
       * @property {Number} defaultOptions.expire
       * @type {Object}
       */

      var defaultOptions = exports.defaultOptions = {
        expire: 7000
      };
      /**
       * Announcement plugin
       * @class Announcement
       * @module Announcement
       * @extends AbstractPlugin
       */

      var Announcement = /*#__PURE__*/function (_AbstractPlugin2$defa8) {
        _inheritsLoose(Announcement, _AbstractPlugin2$defa8);

        /**
         * Announcement constructor.
         * @constructs Announcement
         * @param {Draggable} draggable - Draggable instance
         */
        function Announcement(draggable) {
          var _this35;

          _this35 = _AbstractPlugin2$defa8.call(this, draggable) || this;
          /**
           * Plugin options
           * @property options
           * @type {Object}
           */

          _this35.options = _extends({}, defaultOptions, _this35.getOptions());
          /**
           * Original draggable trigger method. Hack until we have onAll or on('all')
           * @property originalTriggerMethod
           * @type {Function}
           */

          _this35.originalTriggerMethod = _this35.draggable.trigger;
          _this35[onInitialize] = _this35[onInitialize].bind(_assertThisInitialized(_this35));
          _this35[onDestroy] = _this35[onDestroy].bind(_assertThisInitialized(_this35));
          return _this35;
        }
        /**
         * Attaches listeners to draggable
         */


        var _proto19 = Announcement.prototype;

        _proto19.attach = function attach() {
          this.draggable.on('draggable:initialize', this[onInitialize]);
        }
        /**
         * Detaches listeners from draggable
         */
        ;

        _proto19.detach = function detach() {
          this.draggable.off('draggable:destroy', this[onDestroy]);
        }
        /**
         * Returns passed in options
         */
        ;

        _proto19.getOptions = function getOptions() {
          return this.draggable.options.announcements || {};
        }
        /**
         * Announces event
         * @private
         * @param {AbstractEvent} event
         */
        ;

        _proto19[announceEvent] = function (event) {
          var message = this.options[event.type];

          if (message && typeof message === 'string') {
            this[announceMessage](message);
          }

          if (message && typeof message === 'function') {
            this[announceMessage](message(event));
          }
        }
        /**
         * Announces message to screen reader
         * @private
         * @param {String} message
         */
        ;

        _proto19[announceMessage] = function (message) {
          announce(message, {
            expire: this.options.expire
          });
        }
        /**
         * Initialize hander
         * @private
         */
        ;

        _proto19[onInitialize] = function () {
          var _this36 = this;

          // Hack until there is an api for listening for all events
          this.draggable.trigger = function (event) {
            try {
              _this36[announceEvent](event);
            } finally {
              // Ensure that original trigger is called
              _this36.originalTriggerMethod.call(_this36.draggable, event);
            }
          };
        }
        /**
         * Destroy hander
         * @private
         */
        ;

        _proto19[onDestroy] = function () {
          this.draggable.trigger = this.originalTriggerMethod;
        };

        return Announcement;
      }(_AbstractPlugin2["default"]);

      exports["default"] = Announcement;
      /**
       * @const {HTMLElement} liveRegion
       */

      var liveRegion = createRegion();
      /**
       * Announces message via live region
       * @param {String} message
       * @param {Object} options
       * @param {Number} options.expire
       */

      function announce(message, _ref22) {
        var expire = _ref22.expire;
        var element = document.createElement('div');
        element.textContent = message;
        liveRegion.appendChild(element);
        return setTimeout(function () {
          liveRegion.removeChild(element);
        }, expire);
      }
      /**
       * Creates region element
       * @return {HTMLElement}
       */


      function createRegion() {
        var element = document.createElement('div');
        element.setAttribute('id', 'draggable-live-region');
        element.setAttribute(ARIA_RELEVANT, 'additions');
        element.setAttribute(ARIA_ATOMIC, 'true');
        element.setAttribute(ARIA_LIVE, 'assertive');
        element.setAttribute(ROLE, 'log');
        element.style.position = 'fixed';
        element.style.width = '1px';
        element.style.height = '1px';
        element.style.top = '-1px';
        element.style.overflow = 'hidden';
        return element;
      } // Append live region element as early as possible


      document.addEventListener('DOMContentLoaded', function () {
        document.body.appendChild(liveRegion);
      });
      /***/
    },
    /* 62 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultOptions = undefined;

      var _Announcement = __webpack_require__(61);

      var _Announcement2 = _interopRequireDefault(_Announcement);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports["default"] = _Announcement2["default"];
      exports.defaultOptions = _Announcement.defaultOptions;
      /***/
    },
    /* 63 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DraggableDestroyEvent = exports.DraggableInitializedEvent = exports.DraggableEvent = undefined;

      var _AbstractEvent = __webpack_require__(0);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /**
       * Base draggable event
       * @class DraggableEvent
       * @module DraggableEvent
       * @extends AbstractEvent
       */


      var DraggableEvent = /*#__PURE__*/function (_AbstractEvent2$defau8) {
        _inheritsLoose(DraggableEvent, _AbstractEvent2$defau8);

        function DraggableEvent() {
          return _AbstractEvent2$defau8.apply(this, arguments) || this;
        }

        _createClass(DraggableEvent, [{
          key: "draggable",

          /**
           * Draggable instance
           * @property draggable
           * @type {Draggable}
           * @readonly
           */
          get: function get() {
            return this.data.draggable;
          }
        }]);

        return DraggableEvent;
      }(_AbstractEvent2["default"]);

      exports.DraggableEvent = DraggableEvent;
      /**
       * Draggable initialized event
       * @class DraggableInitializedEvent
       * @module DraggableInitializedEvent
       * @extends DraggableEvent
       */

      DraggableEvent.type = 'draggable';

      var DraggableInitializedEvent = /*#__PURE__*/function (_DraggableEvent2) {
        _inheritsLoose(DraggableInitializedEvent, _DraggableEvent2);

        function DraggableInitializedEvent() {
          return _DraggableEvent2.apply(this, arguments) || this;
        }

        return DraggableInitializedEvent;
      }(DraggableEvent);

      exports.DraggableInitializedEvent = DraggableInitializedEvent;
      /**
       * Draggable destory event
       * @class DraggableInitializedEvent
       * @module DraggableDestroyEvent
       * @extends DraggableDestroyEvent
       */

      DraggableInitializedEvent.type = 'draggable:initialize';

      var DraggableDestroyEvent = /*#__PURE__*/function (_DraggableEvent3) {
        _inheritsLoose(DraggableDestroyEvent, _DraggableEvent3);

        function DraggableDestroyEvent() {
          return _DraggableEvent3.apply(this, arguments) || this;
        }

        return DraggableDestroyEvent;
      }(DraggableEvent);

      exports.DraggableDestroyEvent = DraggableDestroyEvent;
      DraggableDestroyEvent.type = 'draggable:destroy';
      /***/
    },
    /* 64 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var _canceled = Symbol('canceled');
      /**
       * All events fired by draggable inherit this class. You can call `cancel()` to
       * cancel a specific event or you can check if an event has been canceled by
       * calling `canceled()`.
       * @abstract
       * @class AbstractEvent
       * @module AbstractEvent
       */


      var AbstractEvent = /*#__PURE__*/function () {
        /**
         * AbstractEvent constructor.
         * @constructs AbstractEvent
         * @param {object} data - Event data
         */

        /**
         * Event type
         * @static
         * @abstract
         * @property type
         * @type {String}
         */
        function AbstractEvent(data) {
          this[_canceled] = false;
          this.data = data;
        }
        /**
         * Read-only type
         * @abstract
         * @return {String}
         */

        /**
         * Event cancelable
         * @static
         * @abstract
         * @property cancelable
         * @type {Boolean}
         */


        var _proto20 = AbstractEvent.prototype;

        /**
         * Cancels the event instance
         * @abstract
         */
        _proto20.cancel = function cancel() {
          this[_canceled] = true;
        }
        /**
         * Check if event has been canceled
         * @abstract
         * @return {Boolean}
         */
        ;

        _proto20.canceled = function canceled() {
          return Boolean(this[_canceled]);
        }
        /**
         * Returns new event instance with existing event data.
         * This method allows for overriding of event data.
         * @param {Object} data
         * @return {AbstractEvent}
         */
        ;

        _proto20.clone = function clone(data) {
          return new this.constructor(_extends({}, this.data, data));
        };

        _createClass(AbstractEvent, [{
          key: "type",
          get: function get() {
            return this.constructor.type;
          }
          /**
           * Read-only cancelable
           * @abstract
           * @return {Boolean}
           */

        }, {
          key: "cancelable",
          get: function get() {
            return this.constructor.cancelable;
          }
        }]);

        return AbstractEvent;
      }();

      exports["default"] = AbstractEvent;
      AbstractEvent.type = 'event';
      AbstractEvent.cancelable = false;
      /***/
    },
    /* 65 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DragStopEvent = exports.DragPressureEvent = exports.DragOutContainerEvent = exports.DragOverContainerEvent = exports.DragOutEvent = exports.DragOverEvent = exports.DragMoveEvent = exports.DragStartEvent = exports.DragEvent = undefined;

      var _AbstractEvent = __webpack_require__(0);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      /**
       * Base drag event
       * @class DragEvent
       * @module DragEvent
       * @extends AbstractEvent
       */


      var DragEvent = /*#__PURE__*/function (_AbstractEvent2$defau9) {
        _inheritsLoose(DragEvent, _AbstractEvent2$defau9);

        function DragEvent() {
          return _AbstractEvent2$defau9.apply(this, arguments) || this;
        }

        _createClass(DragEvent, [{
          key: "source",

          /**
           * Draggables source element
           * @property source
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.source;
          }
          /**
           * Draggables original source element
           * @property originalSource
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "originalSource",
          get: function get() {
            return this.data.originalSource;
          }
          /**
           * Draggables mirror element
           * @property mirror
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "mirror",
          get: function get() {
            return this.data.mirror;
          }
          /**
           * Draggables source container element
           * @property sourceContainer
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "sourceContainer",
          get: function get() {
            return this.data.sourceContainer;
          }
          /**
           * Sensor event
           * @property sensorEvent
           * @type {SensorEvent}
           * @readonly
           */

        }, {
          key: "sensorEvent",
          get: function get() {
            return this.data.sensorEvent;
          }
          /**
           * Original event that triggered sensor event
           * @property originalEvent
           * @type {Event}
           * @readonly
           */

        }, {
          key: "originalEvent",
          get: function get() {
            if (this.sensorEvent) {
              return this.sensorEvent.originalEvent;
            }

            return null;
          }
        }]);

        return DragEvent;
      }(_AbstractEvent2["default"]);

      exports.DragEvent = DragEvent;
      /**
       * Drag start event
       * @class DragStartEvent
       * @module DragStartEvent
       * @extends DragEvent
       */

      DragEvent.type = 'drag';

      var DragStartEvent = /*#__PURE__*/function (_DragEvent2) {
        _inheritsLoose(DragStartEvent, _DragEvent2);

        function DragStartEvent() {
          return _DragEvent2.apply(this, arguments) || this;
        }

        return DragStartEvent;
      }(DragEvent);

      exports.DragStartEvent = DragStartEvent;
      /**
       * Drag move event
       * @class DragMoveEvent
       * @module DragMoveEvent
       * @extends DragEvent
       */

      DragStartEvent.type = 'drag:start';
      DragStartEvent.cancelable = true;

      var DragMoveEvent = /*#__PURE__*/function (_DragEvent3) {
        _inheritsLoose(DragMoveEvent, _DragEvent3);

        function DragMoveEvent() {
          return _DragEvent3.apply(this, arguments) || this;
        }

        return DragMoveEvent;
      }(DragEvent);

      exports.DragMoveEvent = DragMoveEvent;
      /**
       * Drag over event
       * @class DragOverEvent
       * @module DragOverEvent
       * @extends DragEvent
       */

      DragMoveEvent.type = 'drag:move';

      var DragOverEvent = /*#__PURE__*/function (_DragEvent4) {
        _inheritsLoose(DragOverEvent, _DragEvent4);

        function DragOverEvent() {
          return _DragEvent4.apply(this, arguments) || this;
        }

        _createClass(DragOverEvent, [{
          key: "overContainer",

          /**
           * Draggable container you are over
           * @property overContainer
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.overContainer;
          }
          /**
           * Draggable element you are over
           * @property over
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "over",
          get: function get() {
            return this.data.over;
          }
        }]);

        return DragOverEvent;
      }(DragEvent);

      exports.DragOverEvent = DragOverEvent;
      /**
       * Drag out event
       * @class DragOutEvent
       * @module DragOutEvent
       * @extends DragEvent
       */

      DragOverEvent.type = 'drag:over';
      DragOverEvent.cancelable = true;

      var DragOutEvent = /*#__PURE__*/function (_DragEvent5) {
        _inheritsLoose(DragOutEvent, _DragEvent5);

        function DragOutEvent() {
          return _DragEvent5.apply(this, arguments) || this;
        }

        _createClass(DragOutEvent, [{
          key: "overContainer",

          /**
           * Draggable container you are over
           * @property overContainer
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.overContainer;
          }
          /**
           * Draggable element you left
           * @property over
           * @type {HTMLElement}
           * @readonly
           */

        }, {
          key: "over",
          get: function get() {
            return this.data.over;
          }
        }]);

        return DragOutEvent;
      }(DragEvent);

      exports.DragOutEvent = DragOutEvent;
      /**
       * Drag over container event
       * @class DragOverContainerEvent
       * @module DragOverContainerEvent
       * @extends DragEvent
       */

      DragOutEvent.type = 'drag:out';

      var DragOverContainerEvent = /*#__PURE__*/function (_DragEvent6) {
        _inheritsLoose(DragOverContainerEvent, _DragEvent6);

        function DragOverContainerEvent() {
          return _DragEvent6.apply(this, arguments) || this;
        }

        _createClass(DragOverContainerEvent, [{
          key: "overContainer",

          /**
           * Draggable container you are over
           * @property overContainer
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.overContainer;
          }
        }]);

        return DragOverContainerEvent;
      }(DragEvent);

      exports.DragOverContainerEvent = DragOverContainerEvent;
      /**
       * Drag out container event
       * @class DragOutContainerEvent
       * @module DragOutContainerEvent
       * @extends DragEvent
       */

      DragOverContainerEvent.type = 'drag:over:container';

      var DragOutContainerEvent = /*#__PURE__*/function (_DragEvent7) {
        _inheritsLoose(DragOutContainerEvent, _DragEvent7);

        function DragOutContainerEvent() {
          return _DragEvent7.apply(this, arguments) || this;
        }

        _createClass(DragOutContainerEvent, [{
          key: "overContainer",

          /**
           * Draggable container you left
           * @property overContainer
           * @type {HTMLElement}
           * @readonly
           */
          get: function get() {
            return this.data.overContainer;
          }
        }]);

        return DragOutContainerEvent;
      }(DragEvent);

      exports.DragOutContainerEvent = DragOutContainerEvent;
      /**
       * Drag pressure event
       * @class DragPressureEvent
       * @module DragPressureEvent
       * @extends DragEvent
       */

      DragOutContainerEvent.type = 'drag:out:container';

      var DragPressureEvent = /*#__PURE__*/function (_DragEvent8) {
        _inheritsLoose(DragPressureEvent, _DragEvent8);

        function DragPressureEvent() {
          return _DragEvent8.apply(this, arguments) || this;
        }

        _createClass(DragPressureEvent, [{
          key: "pressure",

          /**
           * Pressure applied on draggable element
           * @property pressure
           * @type {Number}
           * @readonly
           */
          get: function get() {
            return this.data.pressure;
          }
        }]);

        return DragPressureEvent;
      }(DragEvent);

      exports.DragPressureEvent = DragPressureEvent;
      /**
       * Drag stop event
       * @class DragStopEvent
       * @module DragStopEvent
       * @extends DragEvent
       */

      DragPressureEvent.type = 'drag:pressure';

      var DragStopEvent = /*#__PURE__*/function (_DragEvent9) {
        _inheritsLoose(DragStopEvent, _DragEvent9);

        function DragStopEvent() {
          return _DragEvent9.apply(this, arguments) || this;
        }

        return DragStopEvent;
      }(DragEvent);

      exports.DragStopEvent = DragStopEvent;
      DragStopEvent.type = 'drag:stop';
      /***/
    },
    /* 66 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Plugins = exports.Sensors = exports.Sortable = exports.Swappable = exports.Droppable = exports.Draggable = exports.BasePlugin = exports.BaseEvent = undefined;

      var _Draggable = __webpack_require__(5);

      Object.defineProperty(exports, 'Draggable', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Draggable)["default"];
        }
      });

      var _Droppable = __webpack_require__(34);

      Object.defineProperty(exports, 'Droppable', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Droppable)["default"];
        }
      });

      var _Swappable = __webpack_require__(31);

      Object.defineProperty(exports, 'Swappable', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Swappable)["default"];
        }
      });

      var _Sortable = __webpack_require__(28);

      Object.defineProperty(exports, 'Sortable', {
        enumerable: true,
        get: function get() {
          return _interopRequireDefault(_Sortable)["default"];
        }
      });

      var _AbstractEvent = __webpack_require__(0);

      var _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);

      var _AbstractPlugin = __webpack_require__(1);

      var _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);

      var _Sensors = __webpack_require__(6);

      var Sensors = _interopRequireWildcard(_Sensors);

      var _Plugins = __webpack_require__(25);

      var Plugins = _interopRequireWildcard(_Plugins);

      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};

          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
          }

          newObj["default"] = obj;
          return newObj;
        }
      }

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }

      exports.BaseEvent = _AbstractEvent2["default"];
      exports.BasePlugin = _AbstractPlugin2["default"];
      exports.Sensors = Sensors;
      exports.Plugins = Plugins;
      /***/
    }
    /******/
    ])
  );
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(44)(module)))

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _inserter = __webpack_require__(28);

var _inserter2 = __webpack_require__(305);

var _inserter3 = __webpack_require__(306);

var _formula = __webpack_require__(307);

var _parameter = __webpack_require__(309);

var _socket = __webpack_require__(322);

BI.extend(BI, {
  FormulaInserter: _inserter.FormulaInserter,
  ComplexFormulaInserter: _inserter2.ComplexFormulaInserter,
  RegularFormulaInserter: _inserter3.RegularFormulaInserter,
  FormulaOpeartingPanel: _formula.FormulaOpeartingPanel,
  ParameterEditor: _parameter.ParameterEditor,
  initSocket: _socket.initSocket
});

/***/ }),
/* 302 */
/***/ (function(module, exports) {

module.exports = BI.CodeMirror;

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormulaFunctionItem = void 0;

var _decorator = __webpack_require__(1);

var _dec, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FormulaFunctionItem = (_dec = (0, _decorator.shortcut)(), _dec(_class = (_class2 = /*#__PURE__*/function (_BI$BasicButton) {
  _inheritsLoose(FormulaFunctionItem, _BI$BasicButton);

  function FormulaFunctionItem() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$BasicButton.call.apply(_BI$BasicButton, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      baseCls: "bi-list-item-select",
      text: "",
      title: "",
      value: ""
    });

    return _this;
  }

  var _proto = FormulaFunctionItem.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return {
      type: BI.TextButton.xtype,
      text: this.options.text,
      value: this.options.value,
      trigger: "dblclick",
      textAlign: "left",
      hgap: 5,
      handler: function handler() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        _this2.fireEvent.apply(_this2, [BI.Controller.EVENT_CHANGE, BI.Events.CLICK].concat(args));
      }
    };
  };

  return FormulaFunctionItem;
}(BI.BasicButton), _defineProperty(_class2, "xtype", "bi.formula.function_item"), _class2)) || _class);
exports.FormulaFunctionItem = FormulaFunctionItem;

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormulaVarItem = void 0;

var _decorator = __webpack_require__(1);

var _dec, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FormulaVarItem = (_dec = (0, _decorator.shortcut)(), _dec(_class = (_class2 = /*#__PURE__*/function (_BI$BasicButton) {
  _inheritsLoose(FormulaVarItem, _BI$BasicButton);

  function FormulaVarItem() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$BasicButton.call.apply(_BI$BasicButton, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "leaf", void 0);

    _defineProperty(_assertThisInitialized(_this), "props", {
      text: "",
      title: "",
      value: "",
      layoutType: BI.MidTreeLeafItem.xtype
    });

    return _this;
  }

  var _proto = FormulaVarItem.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return {
      type: BI.HTapeLayout.xtype,
      items: [{
        type: BI.Label.xtype,
        width: 16
      }, {
        type: this.options.layoutType,
        cls: "bi-list-item-select",
        ref: function ref(_ref) {
          _this2.leaf = _ref;
        },
        text: this.options.text,
        value: this.options.value,
        trigger: "dblclick",
        textAlign: "left",
        handler: function handler() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          _this2.fireEvent.apply(_this2, [BI.Controller.EVENT_CHANGE, BI.Events.CLICK].concat(args));
        }
      }]
    };
  };

  _proto.setSelected = function setSelected(flag) {
    _BI$BasicButton.prototype.setSelected.call(this, flag);

    this.leaf.setSelected(flag);
  };

  return FormulaVarItem;
}(BI.BasicButton), _defineProperty(_class2, "xtype", "bi.formula.var_item"), _class2)) || _class);
exports.FormulaVarItem = FormulaVarItem;

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComplexFormulaInserter = void 0;

var _inserter = __webpack_require__(28);

var _decorator = __webpack_require__(1);

var _dec, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ComplexFormulaInserter = (_dec = (0, _decorator.shortcut)(), _dec(_class = (_class2 = /*#__PURE__*/function (_FormulaInserter) {
  _inheritsLoose(ComplexFormulaInserter, _FormulaInserter);

  function ComplexFormulaInserter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _FormulaInserter.call.apply(_FormulaInserter, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      value: {
        formula: "",
        keepFormulaWhenExportOrEdit: false,
        keepFormulaWhenReportOrAnalyze: true
      }
    });

    _defineProperty(_assertThisInitialized(_this), "exportOrEditCheckbox", void 0);

    _defineProperty(_assertThisInitialized(_this), "reportOrAnalyzeCheckbox", void 0);

    return _this;
  }

  var _proto = ComplexFormulaInserter.prototype;

  _proto.getToolbarLayout = function getToolbarLayout() {
    var _this2 = this;

    return {
      type: BI.VerticalAdaptLayout.xtype,
      items: [{
        type: BI.MultiSelectItem.xtype,
        ref: function ref(_ref) {
          _this2.exportOrEditCheckbox = _ref;
        },
        width: 180,
        lgap: 10,
        text: BI.i18nText("BI-Basic_Export_Or_Edit_Keep_Formula"),
        selected: this.options.value.keepFormulaWhenExportOrEdit,
        listeners: [{
          eventName: BI.MultiSelectItem.EVENT_CHANGE,
          action: function action() {
            var isSelected = _this2.exportOrEditCheckbox.isSelected();

            if (isSelected) {
              _this2.reportOrAnalyzeCheckbox.setEnable(false);

              _this2.reportOrAnalyzeCheckbox.setSelected(true);
            } else {
              _this2.reportOrAnalyzeCheckbox.setEnable(true);
            }
          }
        }]
      }, {
        type: BI.MultiSelectItem.xtype,
        ref: function ref(_ref) {
          _this2.reportOrAnalyzeCheckbox = _ref;
        },
        width: 220,
        lgap: 10,
        text: BI.i18nText("BI-Basic_Report_Or_Analyze_Keep_Formula"),
        disabled: this.options.value.keepFormulaWhenExportOrEdit,
        selected: this.options.value.keepFormulaWhenReportOrAnalyze
      }, {
        type: BI.Button.xtype,
        text: BI.i18nText("BI-Basic_Check_Validation"),
        handler: function handler() {
          _this2.validate();
        }
      }]
    };
  };

  _proto.getValue = function getValue() {
    return {
      formula: this.formulaEditor.getValue(),
      keepFormulaWhenExportOrEdit: this.exportOrEditCheckbox.isSelected(),
      keepFormulaWhenReportOrAnalyze: this.reportOrAnalyzeCheckbox.isSelected()
    };
  };

  return ComplexFormulaInserter;
}(_inserter.FormulaInserter), _defineProperty(_class2, "xtype", "bi.formula_operating_panel.complex.inserter"), _class2)) || _class);
exports.ComplexFormulaInserter = ComplexFormulaInserter;

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RegularFormulaInserter = void 0;

var _inserter = __webpack_require__(28);

var _decorator = __webpack_require__(1);

var _dec, _class, _class2;

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RegularFormulaInserter = (_dec = (0, _decorator.shortcut)(), _dec(_class = (_class2 = /*#__PURE__*/function (_FormulaInserter) {
  _inheritsLoose(RegularFormulaInserter, _FormulaInserter);

  function RegularFormulaInserter() {
    return _FormulaInserter.apply(this, arguments) || this;
  }

  var _proto = RegularFormulaInserter.prototype;

  _proto.getToolbarLayout = function getToolbarLayout() {
    var _this = this;

    return {
      type: BI.AbsoluteLayout.xtype,
      items: [{
        el: {
          type: BI.Button.xtype,
          text: BI.i18nText("BI-Basic_Check_Validation"),
          handler: function handler() {
            _this.validate();
          }
        },
        right: 93,
        top: 12
      }]
    };
  };

  return RegularFormulaInserter;
}(_inserter.FormulaInserter), _defineProperty(_class2, "xtype", "bi.formula_operating_panel.regular.inserter"), _class2)) || _class);
exports.RegularFormulaInserter = RegularFormulaInserter;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormulaOpeartingPanel = void 0;

var _decorator = __webpack_require__(1);

var _formula = __webpack_require__(45);

var _formula2 = __webpack_require__(308);

var _inserter = __webpack_require__(28);

var _formula3 = __webpack_require__(46);

var _dec, _dec2, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var searchPaneWidth = 253;
var searchButtonWidth = 54;
var LabelTitleHeight = 24;
var FormulaOpeartingPanel = (_dec = (0, _decorator.shortcut)(), _dec2 = (0, _decorator.store)(_formula2.FormulaModel), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_BI$Pane) {
  _inheritsLoose(FormulaOpeartingPanel, _BI$Pane);

  function FormulaOpeartingPanel() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$Pane.call.apply(_BI$Pane, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "functionTypeGroup", void 0);

    _defineProperty(_assertThisInitialized(_this), "functionNameGroup", void 0);

    _defineProperty(_assertThisInitialized(_this), "model", void 0);

    _defineProperty(_assertThisInitialized(_this), "store", void 0);

    _defineProperty(_assertThisInitialized(_this), "descriptionLabel", void 0);

    _defineProperty(_assertThisInitialized(_this), "searchEditor", void 0);

    _defineProperty(_assertThisInitialized(_this), "relatedFunctionNameGroup", void 0);

    _defineProperty(_assertThisInitialized(_this), "formulaEditor", void 0);

    _defineProperty(_assertThisInitialized(_this), "varTree", void 0);

    _defineProperty(_assertThisInitialized(_this), "props", {
      inserterType: _inserter.FormulaInserter.xtype,
      value: {
        formula: ""
      },
      configLoader: function configLoader() {
        return new Promise(function (resolve) {
          resolve({
            vars: [],
            JSONs: []
          });
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "watch", {
      functionNames: function functionNames() {
        _this.functionNameGroup.populate(_this.model.functionNames);

        _this.scrollFunctionName2View();
      },
      selectedFunctionNameOrVarName: function selectedFunctionNameOrVarName() {
        if ((0, _formula.isBelong2FormulaFunction)(_this.model.selectedFunctionNameOrVarName)) {
          _this.functionNameGroup.setValue(_this.model.selectedFunctionNameOrVarName);

          _this.scrollFunctionName2View();
        }
      },
      selectedFunctionType: function selectedFunctionType() {
        _this.functionTypeGroup.setValue(_this.model.selectedFunctionType);

        _this.functionNameGroup.setValue(_this.model.selectedFunctionNameOrVarName);
      },
      functionDescription: function functionDescription() {
        _this.descriptionLabel.setText(_this.model.functionDescription);
      },
      relatedFunctionNames: function relatedFunctionNames() {
        var relatedFunctionNames = _this.model.relatedFunctionNames;

        _this.relatedFunctionNameGroup.populate(relatedFunctionNames);

        var relatedFunctionName = BI.isEmptyArray(relatedFunctionNames) ? null : BI.first(relatedFunctionNames).value;

        _this.relatedFunctionNameGroup.setValue(relatedFunctionName);

        relatedFunctionName && _this.store.setSelectedFunctionName(relatedFunctionName);
      },
      isCached: function isCached() {
        _this.functionTypeGroup.populate((0, _formula.transformFormulaJSONs2FunctionTypes)());

        _this.functionTypeGroup.setValue(_this.model.selectedFunctionType);

        _this.functionNameGroup.setValue(_this.model.selectedFunctionNameOrVarName);

        _this.varTree.populate((0, _formula.transformFormulaVarItems)());
      }
    });

    return _this;
  }

  var _proto = FormulaOpeartingPanel.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return {
      type: BI.VTapeLayout.xtype,
      items: [{
        el: {
          type: BI.LeftRightVerticalAdaptLayout.xtype,
          items: {
            left: [{
              type: BI.Label.xtype,
              text: BI.i18nText("BI-Basic_Please_Input_Formula")
            }],
            right: [{
              type: BI.SearchEditor.xtype,
              ref: function ref(_ref) {
                _this2.searchEditor = _ref;
              },
              width: searchPaneWidth - searchButtonWidth - 5,
              listeners: [{
                eventName: BI.SearchEditor.EVENT_ENTER,
                action: function action() {
                  _this2.store.setKeyword(_this2.searchEditor.getValue());
                }
              }, {
                eventName: BI.SearchEditor.EVENT_EMPTY,
                action: function action() {
                  _this2.store.setKeyword("");
                }
              }]
            }, {
              lgap: 5,
              el: {
                type: BI.Button.xtype,
                text: BI.i18nText("BI-Basic_Search"),
                minWidth: 0,
                width: searchButtonWidth,
                handler: function handler() {
                  _this2.store.setKeyword(_this2.searchEditor.getValue());
                }
              }
            }]
          }
        },
        height: LabelTitleHeight
      }, {
        el: {
          type: BI.HTapeLayout.xtype,
          items: [{
            type: this.options.inserterType,
            ref: function ref(_ref) {
              _this2.formulaEditor = _ref;
            },
            value: this.options.value,
            rgap: 10,
            listeners: [{
              eventName: "EVENT_SHOW_HINT",
              action: function action(hint) {
                _this2.store.setSelectedFunctionName(hint);

                _this2.scrollFunctionName2View();
              }
            }, {
              eventName: "EVENT_SELECT_HINT",
              action: function action(hint) {
                _this2.store.setSelectedFunctionName(hint);

                _this2.scrollFunctionName2View();
              }
            }]
          }, {
            el: {
              type: BI.ButtonGroup.xtype,
              ref: function ref(_ref) {
                _this2.relatedFunctionNameGroup = _ref;
              },
              cls: "bi-border",
              items: this.model.relatedFunctionNames,
              layouts: [{
                type: BI.VerticalLayout.xtype
              }],
              listeners: [{
                eventName: BI.ButtonGroup.EVENT_CHANGE,
                action: function action(val) {
                  _this2.store.setSelectedFunctionName(val);
                }
              }]
            },
            width: searchPaneWidth
          }]
        },
        height: 200,
        tgap: 10
      }, {
        type: BI.HTapeLayout.xtype,
        items: [{
          el: {
            type: BI.VTapeLayout.xtype,
            items: [{
              el: {
                type: BI.Label.xtype,
                text: BI.i18nText("BI-Basic_Function_Type"),
                textAlign: "left"
              },
              height: LabelTitleHeight
            }, {
              type: BI.ButtonGroup.xtype,
              ref: function ref(_ref) {
                _this2.functionTypeGroup = _ref;
              },
              value: this.model.selectedFunctionType,
              cls: "bi-border",
              items: (0, _formula.transformFormulaJSONs2FunctionTypes)(),
              layouts: [{
                type: BI.VerticalLayout.xtype
              }],
              listeners: [{
                eventName: BI.ButtonGroup.EVENT_CHANGE,
                action: function action(val) {
                  _this2.store.setSelectedFunctionType(val);
                }
              }]
            }]
          },
          width: 135
        }, {
          el: {
            type: BI.VTapeLayout.xtype,
            items: [{
              el: {
                type: BI.Label.xtype,
                text: BI.i18nText("BI-Basic_Function_Name"),
                textAlign: "left"
              },
              height: LabelTitleHeight
            }, {
              type: BI.ButtonGroup.xtype,
              ref: function ref(_ref) {
                _this2.functionNameGroup = _ref;
              },
              value: this.model.selectedFunctionNameOrVarName,
              cls: "bi-border",
              items: this.model.functionNames,
              layouts: [{
                type: BI.VerticalLayout.xtype
              }],
              listeners: [{
                eventName: BI.Controller.EVENT_CHANGE,
                action: function action(_type, val, _widget, e) {
                  _this2.store.setSelectedFunctionName(val, false);

                  if (e.type === "dblclick") {
                    _this2.formulaEditor.insertFunction(val);
                  }
                }
              }]
            }]
          },
          lgap: 5,
          width: 135
        }, {
          el: {
            type: BI.VTapeLayout.xtype,
            items: [{
              el: {
                type: BI.Label.xtype,
                text: BI.i18nText("BI-Basic_Vars"),
                textAlign: "left"
              },
              height: LabelTitleHeight
            }, {
              type: BI.CustomTree.xtype,
              cls: "bi-border",
              chooseType: BI.Selection.Single,
              ref: function ref(_ref) {
                _this2.varTree = _ref;
              },
              el: {
                type: BI.ButtonTree.xtype,
                layouts: [{
                  type: BI.VerticalLayout.xtype
                }]
              },
              items: (0, _formula.transformFormulaVarItems)(),
              listeners: [{
                eventName: BI.Controller.EVENT_CHANGE,
                action: function action(type, val, _widget, e) {
                  if (type !== BI.Events.CLICK) {
                    return;
                  }

                  _this2.store.setSelectedVarName(val);

                  if (e && e.type === "dblclick") {
                    _this2.formulaEditor.insertField(val);
                  }
                }
              }]
            }]
          },
          lgap: 5,
          width: 300
        }, {
          el: {
            type: BI.VTapeLayout.xtype,
            items: [{
              el: {
                type: BI.Label.xtype,
                text: BI.i18nText("BI-Basic_Function_Description"),
                textAlign: "left"
              },
              height: LabelTitleHeight
            }, {
              type: BI.VerticalLayout.xtype,
              cls: "bi-border",
              items: [{
                el: {
                  type: BI.Text.xtype,
                  ref: function ref(_ref) {
                    _this2.descriptionLabel = _ref;
                  },
                  text: this.model.functionDescription,
                  whiteSpace: "normal",
                  hgap: 5
                }
              }]
            }]
          },
          lgap: 5
        }]
      }]
    };
  };

  _proto.beforeRender = function beforeRender(callback) {
    var _this3 = this;

    if ((0, _formula.isFormulaConfigCached)()) {
      callback();
      return;
    }

    this.loading();
    this.options.configLoader().then(function (data) {
      _this3.loaded();

      (0, _formula.setFormulaConfigCache)(data);

      _this3.store.setSelectedFunctionName(_formula3.DEFAULT_FUNCTION_NAME);

      callback();
    });
  }
  /**
   * functionName滚动到可见区域
   */
  ;

  _proto.scrollFunctionName2View = function scrollFunctionName2View() {
    var _this4 = this;

    if (!this.model.needScrollToView) {
      return;
    }

    var functionNameWidget = this.functionNameGroup.getAllButtons().find(function (functionNameWidget) {
      return functionNameWidget.getValue() === _this4.model.selectedFunctionNameOrVarName;
    });

    if (BI.isNull(functionNameWidget)) {
      return;
    }

    functionNameWidget.element[0].scrollIntoView();
  };

  _proto.getValue = function getValue() {
    return this.formulaEditor.getValue();
  }
  /**
   * 对外加载数据的接口
   * @param data 数据
   */
  ;

  _proto.loadConfigData = function loadConfigData(data) {
    if ((0, _formula.isFormulaConfigCached)()) {
      return;
    }

    (0, _formula.setFormulaConfigCache)(data);
    this.store.setSelectedFunctionName(_formula3.DEFAULT_FUNCTION_NAME);
  };

  return FormulaOpeartingPanel;
}(BI.Pane), _defineProperty(_class2, "xtype", "bi.formula_operating_panel"), _class2)) || _class) || _class);
exports.FormulaOpeartingPanel = FormulaOpeartingPanel;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormulaModel = void 0;

var _decorator = __webpack_require__(1);

var _formula = __webpack_require__(45);

var _formula2 = __webpack_require__(46);

var _dec, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FormulaModel = (_dec = (0, _decorator.model)(), _dec(_class = (_class2 = /*#__PURE__*/function (_Model) {
  _inheritsLoose(FormulaModel, _Model);

  function FormulaModel() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Model.call.apply(_Model, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "computed", {
      functionNames: function functionNames() {
        return (0, _formula.transformFormulaJSONs2FunctionNames)(_this.model.selectedFunctionType);
      },
      functionDescription: function functionDescription() {
        return (0, _formula.getFunctionDescriptionByFunctionName)(_this.model.selectedFunctionNameOrVarName) || (0, _formula.getVarDescriptionByVarName)(_this.model.selectedFunctionNameOrVarName);
      },
      relatedFunctionNames: function relatedFunctionNames() {
        return (0, _formula.getSearchedFunctionNames)(_this.model.keyword);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "actions", {
      setSelectedFunctionType: function setSelectedFunctionType(val) {
        _this.model.selectedFunctionType = val;
        _this.model.selectedFunctionNameOrVarName = (BI.first((0, _formula.transformFormulaJSONs2FunctionNames)(_this.model.selectedFunctionType)) || {}).value;
      },
      setSelectedFunctionName: function setSelectedFunctionName(_functionName) {
        var needScrollToView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var functionName = _functionName.toUpperCase();

        var speculatedFunctionType = (0, _formula.getFunctionTypeByFunctionName)(functionName);

        if (BI.isNull(speculatedFunctionType)) {
          return;
        }

        _this.model.selectedFunctionType = speculatedFunctionType;
        _this.model.selectedFunctionNameOrVarName = functionName;
        _this.model.needScrollToView = needScrollToView;
      },
      setKeyword: function setKeyword(val) {
        _this.model.keyword = val;
      },
      setSelectedVarName: function setSelectedVarName(val) {
        _this.model.selectedFunctionNameOrVarName = val;
      }
    });

    return _this;
  }

  var _proto = FormulaModel.prototype;

  _proto.state = function state() {
    return {
      selectedFunctionType: (0, _formula.getFunctionTypeByFunctionName)(_formula2.DEFAULT_FUNCTION_NAME) || _formula2.DEFAULT_FUNCTION_TYPE,
      selectedFunctionNameOrVarName: _formula2.DEFAULT_FUNCTION_NAME,
      keyword: "",
      needScrollToView: true
    };
  };

  return FormulaModel;
}(_decorator.Model), _defineProperty(_class2, "xtype", "bi.model.formula_operating_panel"), _class2)) || _class);
exports.FormulaModel = FormulaModel;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParameterEditor = void 0;

var _decorator = __webpack_require__(1);

var _parameter = __webpack_require__(310);

var _parameter_input = __webpack_require__(311);

var _parameter_header = __webpack_require__(321);

var _parameter_header2 = __webpack_require__(110);

var _dec, _dec2, _class, _class2;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ParameterEditor = (_dec = (0, _decorator.shortcut)(), _dec2 = (0, _decorator.store)(_parameter.ParameterModel), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_BI$Widget) {
  _inheritsLoose(ParameterEditor, _BI$Widget);

  function ParameterEditor() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$Widget.call.apply(_BI$Widget, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      height: 200,
      title: "",
      headers: _parameter_header2.defaultHeaderItems,
      value: []
    });

    _defineProperty(_assertThisInitialized(_this), "parameterInputs", void 0);

    _defineProperty(_assertThisInitialized(_this), "model", void 0);

    _defineProperty(_assertThisInitialized(_this), "store", void 0);

    _defineProperty(_assertThisInitialized(_this), "watch", {
      parameters: function parameters() {
        _this.parameterInputs.populate(_this.renderParameterInputs());
      },
      selectedId: function selectedId(id) {
        _this.parameterInputs.setValue(id);
      }
    });

    return _this;
  }

  var _proto = ParameterEditor.prototype;

  _proto.render = function render() {
    var _this2 = this;

    this.setDefaultValue();
    return {
      type: BI.VTapeLayout.xtype,
      items: [{
        el: this.renderHeader(),
        height: 25
      }, {
        el: {
          type: BI.CenterLayout.xtype,
          cls: "bi-border",
          items: [{
            type: BI.Label.xtype,
            text: BI.i18nText("BI-Basic_Parameter_Name")
          }, {
            type: BI.Label.xtype,
            cls: "bi-border-left",
            text: BI.i18nText("BI-Basic_Parameter_Value")
          }]
        },
        height: 25
      }, {
        type: BI.ButtonGroup.xtype,
        cls: "bi-border",
        layouts: [{
          type: BI.VerticalLayout.xtype
        }],
        items: this.renderParameterInputs(),
        ref: function ref(_ref) {
          _this2.parameterInputs = _ref;
        }
      }]
    };
  };

  _proto.renderHeader = function renderHeader() {
    var _this3 = this;

    var _this$options = this.options,
        title = _this$options.title,
        headers = _this$options.headers;
    return {
      type: _parameter_header.ParameterHeader.xtype,
      title: title,
      headers: headers,
      listeners: [{
        eventName: "EVENT_INSERT",
        action: function action() {
          _this3.addItem({
            name: "",
            value: "",
            id: BI.UUID(),
            type: "String"
          });
        }
      }, {
        eventName: "EVENT_DELETE",
        action: function action() {
          _this3.removeSelectedItem();
        }
      }, {
        eventName: "EVENT_MOVE_UP",
        action: function action() {
          _this3.moveUp();
        }
      }, {
        eventName: "EVENT_MOVE_DOWN",
        action: function action() {
          _this3.moveDown();
        }
      }, {
        eventName: "EVENT_REFRESH",
        action: function action() {
          _this3.refresh();

          _this3.fireEvent("EVENT_REFRESH");
        }
      }]
    };
  };

  _proto.getValue = function getValue() {
    return this.model.parameters.map(function (item) {
      return {
        name: item.name,
        value: item.value,
        type: item.type
      };
    });
  };

  _proto.setValue = function setValue(value) {
    this.store.setParameters(value.map(function (item) {
      return _objectSpread(_objectSpread({}, item), {}, {
        id: BI.UUID()
      });
    }));
  };

  _proto.addItem = function addItem(item) {
    var _item$name = item.name,
        name = _item$name === void 0 ? "" : _item$name,
        _item$value = item.value,
        value = _item$value === void 0 ? "" : _item$value,
        _item$type = item.type,
        type = _item$type === void 0 ? "String" : _item$type;
    this.store.setParameters([].concat(_toConsumableArray(this.model.parameters), [{
      name: name,
      value: value,
      type: type,
      id: BI.UUID()
    }]));
  };

  _proto.removeSelectedItem = function removeSelectedItem() {
    var _this4 = this;

    if (this.model.selectedId) {
      BI.Msg.confirm(BI.i18nText("BI-Basic_Prompt"), BI.i18nText("BI-Basic_Parameter_Delete_Confirm"), function (re) {
        if (re) {
          _this4.store.removeSelectedParameter();
        }
      });
    } else {
      BI.Msg.alert(BI.i18nText("BI-Basic_Prompt"), BI.i18nText("BI-Basic_Parameter_Delete_Alert"));
    }
  };

  _proto.moveUp = function moveUp() {
    this.store.move("up");
  };

  _proto.moveDown = function moveDown() {
    this.store.move("down");
  };

  _proto.refresh = function refresh() {
    this.setDefaultValue();
  };

  _proto.setDefaultValue = function setDefaultValue() {
    var _this$options$value = this.options.value,
        value = _this$options$value === void 0 ? [] : _this$options$value;
    this.setValue(value);
  };

  _proto.renderParameterInputs = function renderParameterInputs() {
    var _this5 = this;

    return this.model.parameters.map(function (item) {
      return {
        type: _parameter_input.ParameterInput.xtype,
        inputName: item.name,
        inputValue: item.value,
        inputType: item.type,
        id: item.id,
        value: item.id,
        selected: item.id === _this5.model.selectedId,
        listeners: [{
          eventName: 'EVENT_CHANGE',
          action: function action() {
            _this5.fireEvent('EVENT_CHANGE');
          }
        }]
      };
    });
  };

  return ParameterEditor;
}(BI.Widget), _defineProperty(_class2, "xtype", "bi.parameter_editor"), _class2)) || _class) || _class);
exports.ParameterEditor = ParameterEditor;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParameterModel = void 0;

var _decorator = __webpack_require__(1);

var _dec, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ParameterModel = (_dec = (0, _decorator.model)(), _dec(_class = (_class2 = /*#__PURE__*/function (_Model) {
  _inheritsLoose(ParameterModel, _Model);

  function ParameterModel() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Model.call.apply(_Model, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "childContext", ["selectedId", "parameters"]);

    _defineProperty(_assertThisInitialized(_this), "actions", {
      setParameters: function setParameters(parameters) {
        _this.model.parameters = parameters;
      },
      removeSelectedParameter: function removeSelectedParameter() {
        _this.setParameters(_this.model.parameters.filter(function (item) {
          return item.id !== _this.model.selectedId;
        }));
      },
      move: function move(type) {
        if (_this.model.selectedId) {
          var index = _this.model.parameters.findIndex(function (item) {
            return item.id === _this.model.selectedId;
          });

          if (type === "up" && index > 0) {
            var oldItem = _this.model.parameters.splice(index, 1)[0];

            _this.model.parameters.splice(index - 1, 0, oldItem);
          }

          if (type === "down" && index < _this.model.parameters.length - 1) {
            var _oldItem = _this.model.parameters.splice(index, 1)[0];

            _this.model.parameters.splice(index + 1, 0, _oldItem);
          }
        }
      }
    });

    return _this;
  }

  var _proto = ParameterModel.prototype;

  _proto.state = function state() {
    return {
      parameters: [],
      selectedId: ""
    };
  };

  return ParameterModel;
}(_decorator.Model), _defineProperty(_class2, "xtype", "bi.model.parameter_editor"), _class2)) || _class);
exports.ParameterModel = ParameterModel;

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParameterInput = void 0;

var _decorator = __webpack_require__(1);

__webpack_require__(312);

var _input2 = __webpack_require__(14);

__webpack_require__(319);

var _parameter_input2 = __webpack_require__(320);

var _dec, _dec2, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var tipType = "tip";
var ParameterInput = (_dec = (0, _decorator.shortcut)(), _dec2 = (0, _decorator.store)(_parameter_input2.ParameterInputModel), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_BI$BasicButton) {
  _inheritsLoose(ParameterInput, _BI$BasicButton);

  function ParameterInput() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$BasicButton.call.apply(_BI$BasicButton, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      inputName: "",
      inputValue: "",
      inputType: "String",
      height: 22,
      id: "",
      baseCls: "parameter-editor-input",
      value: ""
    });

    _defineProperty(_assertThisInitialized(_this), "store", void 0);

    _defineProperty(_assertThisInitialized(_this), "model", void 0);

    _defineProperty(_assertThisInitialized(_this), "tab", void 0);

    _defineProperty(_assertThisInitialized(_this), "parameterName", void 0);

    _defineProperty(_assertThisInitialized(_this), "parameterValue", void 0);

    _defineProperty(_assertThisInitialized(_this), "iconCombo", void 0);

    return _this;
  }

  var _proto = ParameterInput.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$options = this.options,
        inputName = _this$options.inputName,
        inputValue = _this$options.inputValue;
    var inputType = this.options.inputType;
    var id = this.options.id;
    return {
      type: BI.CenterLayout.xtype,
      cls: "bi-border",
      items: [{
        type: BI.Editor.xtype,
        height: 22,
        allowBlank: true,
        value: inputName,
        ref: function ref(_ref) {
          _this2.parameterName = _ref;
        },
        listeners: [{
          eventName: BI.TextEditor.EVENT_CHANGE,
          action: function action() {
            inputName = _this2.parameterName.getValue();

            _this2.tab.setSelect(inputName ? inputType : tipType);

            inputValue = inputName ? inputValue : "";

            _this2.store.setParameterName(id, inputName);

            _this2.fireEvent(BI.TextEditor.EVENT_CHANGE);
          }
        }, {
          eventName: BI.TextEditor.EVENT_FOCUS,
          action: function action() {
            _this2.store.setSelectedId(id);
          }
        }]
      }, {
        type: BI.HTapeLayout.xtype,
        items: [{
          type: BI.Tab.xtype,
          single: true,
          showIndex: inputName ? inputType : tipType,
          ref: function ref(_ref) {
            _this2.tab = _ref;
          },
          cardCreator: function cardCreator(index) {
            return _this2.renderInputs(index);
          }
        }]
      }]
    };
  };

  _proto.renderInputs = function renderInputs(type) {
    var _this3 = this;

    var _this$options2 = this.options,
        inputValue = _this$options2.inputValue,
        id = _this$options2.id;

    if (type === "tip") {
      return {
        type: BI.TextButton.xtype,
        cls: "bi-error bi-border-left",
        text: BI.i18nText("BI-Basic_Parameter_Please_Set_Parameter_Name"),
        handler: function handler() {
          _this3.parameterName.focus();
        }
      };
    }

    var xtype = (0, _input2.getInput)(type);
    return {
      type: BI.HTapeLayout.xtype,
      items: [{
        el: {
          type: BI.IconCombo.xtype,
          cls: "bi-border-left bi-border-right",
          height: 22,
          width: 25,
          value: type,
          items: this.renderDownList(),
          ref: function ref(_ref) {
            _this3.iconCombo = _ref;
          },
          listeners: [{
            eventName: "EVENT_CHANGE",
            action: function action() {
              _this3.tab.setSelect(tipType);

              var typeValue = _this3.iconCombo.getValue()[0];

              if (typeValue) {
                _this3.tab.setSelect(typeValue);
              }

              _this3.store.setParameterValue(id, "", typeValue);

              _this3.fireEvent('EVENT_CHANGE');
            }
          }]
        },
        width: 25
      }, {
        type: xtype,
        value: inputValue,
        listeners: [{
          eventName: "EVENT_CHANGE",
          action: function action(value) {
            var type = _this3.iconCombo.getValue()[0];

            _this3.store.setParameterValue(id, value, type);

            _this3.fireEvent("EVENT_CHANGE");
          }
        }, {
          eventName: "EVENT_FOCUS",
          action: function action() {
            _this3.store.setSelectedId(id);
          }
        }]
      }]
    };
  };

  _proto.renderDownList = function renderDownList() {
    return [{
      text: BI.i18nText("BI-Basic_Parameter_Type_String"),
      value: "String",
      iconCls: "parameter-string-font"
    }, {
      text: BI.i18nText("BI-Basic_Parameter_Type_Int"),
      value: "Integer",
      iconCls: "parameter-int-font"
    }, {
      text: BI.i18nText("BI-Basic_Parameter_Type_Number"),
      value: "Double",
      iconCls: "parameter-double-font"
    }, {
      text: BI.i18nText("BI-Basic_Parameter_Type_Date"),
      value: "Date",
      iconCls: "parameter-date-font"
    }, {
      text: BI.i18nText("BI-Basic_Parameter_Type_Boolean"),
      value: "Boolean",
      iconCls: "parameter-boolean-font"
    }, {
      text: BI.i18nText("BI-Basic_Parameter_Type_Formula"),
      value: "Formula",
      iconCls: "parameter-formula-font"
    }];
  };

  return ParameterInput;
}(BI.BasicButton), _defineProperty(_class2, "xtype", "bi.parameter_editor.parameter_input"), _class2)) || _class) || _class);
exports.ParameterInput = ParameterInput;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(313);

__webpack_require__(314);

__webpack_require__(315);

__webpack_require__(316);

__webpack_require__(317);

__webpack_require__(318);

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputBoolean = void 0;

var _decorator = __webpack_require__(1);

var _input = __webpack_require__(14);

var _dec, _dec2, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InputBoolean = (_dec = (0, _decorator.shortcut)(), _dec2 = (0, _input.input)("Boolean"), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_BI$BasicButton) {
  _inheritsLoose(InputBoolean, _BI$BasicButton);

  function InputBoolean() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$BasicButton.call.apply(_BI$BasicButton, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      value: ""
    });

    _defineProperty(_assertThisInitialized(_this), "input", void 0);

    _defineProperty(_assertThisInitialized(_this), "hasSelected", void 0);

    return _this;
  }

  var _proto = InputBoolean.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var value = this.options.value;
    this.hasSelected = value === "true";
    return {
      type: BI.MultiSelectItem.xtype,
      width: 80,
      selected: this.hasSelected,
      text: "true",
      ref: function ref(_ref) {
        _this2.input = _ref;
      },
      listeners: [{
        eventName: BI.MultiSelectItem.EVENT_CHANGE,
        action: function action() {
          _this2.hasSelected = !_this2.hasSelected;

          _this2.fireEvent("EVENT_CHANGE", _this2.hasSelected);
        }
      }]
    };
  };

  _proto.doClick = function doClick() {
    this.fireEvent("EVENT_FOCUS");
  };

  return InputBoolean;
}(BI.BasicButton), _defineProperty(_class2, "xtype", "bi.parameter_editor.parameter_input.boolean"), _class2)) || _class) || _class);
exports.InputBoolean = InputBoolean;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputDate = void 0;

var _decorator = __webpack_require__(1);

var _input = __webpack_require__(14);

var _dec, _dec2, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InputDate = (_dec = (0, _decorator.shortcut)(), _dec2 = (0, _input.input)("Date"), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_BI$Widget) {
  _inheritsLoose(InputDate, _BI$Widget);

  function InputDate() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$Widget.call.apply(_BI$Widget, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      value: ""
    });

    _defineProperty(_assertThisInitialized(_this), "input", void 0);

    return _this;
  }

  var _proto = InputDate.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var value = this.options.value;
    var dates = value.split("-");
    return {
      type: BI.DynamicDateCombo.xtype,
      height: 22,
      allowBlank: true,
      value: dates.length === 3 ? {
        year: dates[0],
        month: dates[1],
        day: dates[2]
      } : "",
      ref: function ref(_ref) {
        _this2.input = _ref;
      },
      listeners: [{
        eventName: BI.DynamicDateCombo.EVENT_CONFIRM,
        action: function action() {
          var _ref2 = _this2.input.getValue().value,
              day = _ref2.day,
              month = _ref2.month,
              year = _ref2.year;

          _this2.fireEvent("EVENT_CHANGE", "".concat(year, "-").concat(month, "-").concat(day));
        }
      }, {
        eventName: BI.DynamicDateCombo.EVENT_FOCUS,
        action: function action() {
          _this2.fireEvent("EVENT_FOCUS");
        }
      }]
    };
  };

  return InputDate;
}(BI.Widget), _defineProperty(_class2, "xtype", "bi.parameter_editor.parameter_input.date"), _class2)) || _class) || _class);
exports.InputDate = InputDate;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputInt = void 0;

var _decorator = __webpack_require__(1);

var _input = __webpack_require__(14);

var _dec, _dec2, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InputInt = (_dec = (0, _decorator.shortcut)(), _dec2 = (0, _input.input)("Integer"), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_BI$Widget) {
  _inheritsLoose(InputInt, _BI$Widget);

  function InputInt() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$Widget.call.apply(_BI$Widget, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      value: ""
    });

    _defineProperty(_assertThisInitialized(_this), "input", void 0);

    return _this;
  }

  var _proto = InputInt.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var value = this.options.value;
    return {
      type: BI.Editor.xtype,
      height: 22,
      allowBlank: true,
      value: value,
      ref: function ref(_ref) {
        _this2.input = _ref;
      },
      validationChecker: function validationChecker(v) {
        return BI.isInteger(v);
      },
      listeners: [{
        eventName: BI.Editor.EVENT_CHANGE,
        action: function action() {
          var value = _this2.input.getValue();

          _this2.fireEvent("EVENT_CHANGE", value);
        }
      }, {
        eventName: BI.Editor.EVENT_FOCUS,
        action: function action() {
          _this2.fireEvent("EVENT_FOCUS");
        }
      }]
    };
  };

  return InputInt;
}(BI.Widget), _defineProperty(_class2, "xtype", "bi.parameter_editor.parameter_input.int"), _class2)) || _class) || _class);
exports.InputInt = InputInt;

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputDouble = void 0;

var _decorator = __webpack_require__(1);

var _input = __webpack_require__(14);

var _dec, _dec2, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InputDouble = (_dec = (0, _decorator.shortcut)(), _dec2 = (0, _input.input)("Double"), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_BI$Widget) {
  _inheritsLoose(InputDouble, _BI$Widget);

  function InputDouble() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$Widget.call.apply(_BI$Widget, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      value: ""
    });

    _defineProperty(_assertThisInitialized(_this), "input", void 0);

    return _this;
  }

  var _proto = InputDouble.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var value = this.options.value;
    return {
      type: BI.Editor.xtype,
      height: 22,
      allowBlank: true,
      value: value,
      ref: function ref(_ref) {
        _this2.input = _ref;
      },
      validationChecker: function validationChecker(v) {
        return BI.isNumeric(v);
      },
      listeners: [{
        eventName: BI.Editor.EVENT_CHANGE,
        action: function action() {
          var value = _this2.input.getValue();

          _this2.fireEvent("EVENT_CHANGE", value);
        }
      }, {
        eventName: BI.Editor.EVENT_FOCUS,
        action: function action() {
          _this2.fireEvent("EVENT_FOCUS");
        }
      }]
    };
  };

  return InputDouble;
}(BI.Widget), _defineProperty(_class2, "xtype", "bi.parameter_editor.parameter_input.double"), _class2)) || _class) || _class);
exports.InputDouble = InputDouble;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputString = void 0;

var _decorator = __webpack_require__(1);

var _input = __webpack_require__(14);

var _dec, _dec2, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InputString = (_dec = (0, _decorator.shortcut)(), _dec2 = (0, _input.input)("String"), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_BI$Widget) {
  _inheritsLoose(InputString, _BI$Widget);

  function InputString() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$Widget.call.apply(_BI$Widget, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      value: ""
    });

    _defineProperty(_assertThisInitialized(_this), "input", void 0);

    return _this;
  }

  var _proto = InputString.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var value = this.options.value;
    return {
      type: BI.Editor.xtype,
      height: 22,
      allowBlank: true,
      value: value,
      ref: function ref(_ref) {
        _this2.input = _ref;
      },
      listeners: [{
        eventName: BI.Editor.EVENT_CHANGE,
        action: function action() {
          var value = _this2.input.getValue();

          _this2.fireEvent("EVENT_CHANGE", value);
        }
      }, {
        eventName: BI.Editor.EVENT_FOCUS,
        action: function action() {
          _this2.fireEvent("EVENT_FOCUS");
        }
      }]
    };
  };

  return InputString;
}(BI.Widget), _defineProperty(_class2, "xtype", "bi.parameter_editor.parameter_input.string"), _class2)) || _class) || _class);
exports.InputString = InputString;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputFormula = void 0;

var _decorator = __webpack_require__(1);

var _input = __webpack_require__(14);

var _dec, _dec2, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InputFormula = (_dec = (0, _decorator.shortcut)(), _dec2 = (0, _input.input)("Formula"), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_BI$Widget) {
  _inheritsLoose(InputFormula, _BI$Widget);

  function InputFormula() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$Widget.call.apply(_BI$Widget, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      value: ""
    });

    _defineProperty(_assertThisInitialized(_this), "input", void 0);

    return _this;
  }

  var _proto = InputFormula.prototype;

  _proto.mounted = function mounted() {// TODO: 打开公式编辑器
  };

  _proto.render = function render() {
    var _this2 = this;

    var value = this.options.value;
    return {
      type: BI.Editor.xtype,
      height: 22,
      allowBlank: true,
      value: value,
      ref: function ref(_ref) {
        _this2.input = _ref;
      },
      listeners: [{
        eventName: BI.Editor.EVENT_CHANGE,
        action: function action() {
          var value = _this2.input.getValue();

          _this2.fireEvent("EVENT_CHANGE", value);
        }
      }, {
        eventName: BI.Editor.EVENT_FOCUS,
        action: function action() {
          _this2.fireEvent("EVENT_FOCUS");
        }
      }]
    };
  };

  return InputFormula;
}(BI.Widget), _defineProperty(_class2, "xtype", "bi.parameter_editor.parameter_input.formula"), _class2)) || _class) || _class);
exports.InputFormula = InputFormula;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParameterInputModel = void 0;

var _decorator = __webpack_require__(1);

var _dec, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ParameterInputModel = (_dec = (0, _decorator.model)(), _dec(_class = (_class2 = /*#__PURE__*/function (_Model) {
  _inheritsLoose(ParameterInputModel, _Model);

  function ParameterInputModel() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Model.call.apply(_Model, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "context", ["selectedId", "parameters"]);

    _defineProperty(_assertThisInitialized(_this), "actions", {
      setSelectedId: function setSelectedId(id) {
        _this.model.selectedId = id;
      },
      setParameterName: function setParameterName(id, name) {
        var thisParameter = _this.getParameter(id);

        if (thisParameter) {
          thisParameter.name = name;
        }
      },
      setParameterValue: function setParameterValue(id, value, type) {
        var thisParameter = _this.getParameter(id);

        if (thisParameter) {
          thisParameter.value = value;
          thisParameter.type = type;
        }
      }
    });

    return _this;
  }

  var _proto = ParameterInputModel.prototype;

  _proto.getParameter = function getParameter(id) {
    return this.model.parameters.find(function (item) {
      return item.id === id;
    });
  };

  return ParameterInputModel;
}(_decorator.Model), _defineProperty(_class2, "xtype", "bi.model.parameter_editor.parameter_input"), _class2)) || _class);
exports.ParameterInputModel = ParameterInputModel;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParameterHeader = void 0;

var _decorator = __webpack_require__(1);

var _parameter_header = __webpack_require__(110);

var _dec, _class, _class2;

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { _defaults(o, p); return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ParameterHeader = (_dec = (0, _decorator.shortcut)(), _dec(_class = (_class2 = /*#__PURE__*/function (_BI$Widget) {
  _inheritsLoose(ParameterHeader, _BI$Widget);

  function ParameterHeader() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BI$Widget.call.apply(_BI$Widget, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "props", {
      title: "",
      headers: _parameter_header.defaultHeaderItems
    });

    return _this;
  }

  var _proto = ParameterHeader.prototype;

  _proto.render = function render() {
    var title = this.options.title;
    return {
      type: BI.LeftRightVerticalAdaptLayout.xtype,
      items: {
        left: [{
          type: BI.Label.xtype,
          lgap: 2,
          text: title,
          textAlign: "left"
        }],
        right: this.renderItem()
      }
    };
  };

  _proto.renderItem = function renderItem() {
    var _this2 = this;

    var headers = this.options.headers;
    return headers.map(function (item) {
      if (BI.isString(item)) {
        var head = _parameter_header.headerItemsData.find(function (data) {
          return data.type === item;
        });

        if (head) {
          return {
            type: BI.IconButton.xtype,
            cls: head.cls,
            width: 25,
            title: BI.i18nText(head.title),
            handler: function handler() {
              _this2.fireEvent(head.event);
            }
          };
        }

        return {
          type: "bi.default"
        };
      }

      return item;
    });
  };

  return ParameterHeader;
}(BI.Widget), _defineProperty(_class2, "xtype", "bi.parameter_editor.header"), _class2)) || _class);
exports.ParameterHeader = ParameterHeader;

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initSocket = initSocket;

/**
 * 初始化socket连接
 * @param {*} options 连接socket的参数
 * @param {*} cb 返回连接结果
 */
function initSocket(options, cb) {
  var callback = BI.isFunction(cb) ? cb : BI.emptyFn;
  var useJavaxWebSocket = options.useJavaxWebSocket || false;

  if (useJavaxWebSocket) {
    return initJavaxWebSocket(options, callback);
  }

  return initFallbackWebSocket(null, options, callback);
}
/**
 * 新的websocket连接方案,无需额外的端口
 * @param options
 * @param callback
 * @returns {*}
 */


function initJavaxWebSocket(options, callback) {
  var socket;
  var requestUrl = options.requestUrl,
      contextPath = options.contextPath,
      webSocketNameSpace = options.webSocketNameSpace,
      query = options.query,
      extraOptions = options.options;
  var contextName = "".concat(contextPath === "/" ? "" : contextPath, "/websocket");

  try {
    socket = io("".concat(requestUrl).concat(location.port ? ":".concat(location.port) : "").concat(webSocketNameSpace), BI.extend({
      query: query,
      path: contextName,
      transports: ["websocket", "polling"],
      timeout: 15000
    }, extraOptions));
    var fallback = true; // 监听到失败或者超时时改用旧方案,仅初次建立连接时候失败会走降级方案,连接成功后再遇到断开连接将在当前方案基础上执行重连逻辑

    socket.on("connect_error", function () {
      socket.off("connect_error");
      socket.off("connect");
      fallback && initFallbackWebSocket(socket, options, callback);
    });
    socket.on("connect", function () {
      fallback = false;
      callback("success");
    });
    return socket;
  } catch (e) {
    throw new Error(e);
  }
}
/**
 * 旧的方案websocket连接方案,需要额外的端口
 * @param socket
 * @param options
 * @param callback
 * @returns {*}
 */


function initFallbackWebSocket(socket, options, callback) {
  var ports = options.webSocketPort,
      requestUrl = options.requestUrl,
      webSocketNameSpace = options.webSocketNameSpace,
      query = options.query,
      webSocketContextName = options.webSocketContextName,
      extraOptions = options.options;

  function reconnect(manager) {
    if (BI.isEmptyArray(ports)) {
      callback("fail");
      return;
    }

    manager.uri = "".concat(requestUrl, ":").concat(ports.shift()).concat(webSocketNameSpace);
    manager.connect(function () {});
  }

  try {
    if (BI.isNull(socket)) {
      socket = io("".concat(requestUrl, ":").concat(ports.shift()).concat(webSocketNameSpace), BI.extend({
        query: query,
        path: webSocketContextName,
        transports: ["polling", "websocket"],
        timeout: 5000
      }, extraOptions));
    } else {
      socket.io.opts.path = webSocketContextName;
      socket.io.opts.query = query;
      socket.io.opts.transports = ["polling", "websocket"];
      socket.io.uri = "".concat(requestUrl, ":").concat(ports.shift()).concat(webSocketNameSpace);
      socket.io.connect(function () {});
    } // 监听到失败或者超时时使用下一个端口


    socket.on("connect_error", function () {
      reconnect(socket.io);
    });
    socket.on("connect", function () {
      callback("success");
    });
    return socket;
  } catch (e) {
    throw new Error(e);
  }
}

/***/ }),
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */,
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */,
/* 569 */,
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(113);
__webpack_require__(114);
__webpack_require__(115);
__webpack_require__(116);
__webpack_require__(117);
__webpack_require__(118);
__webpack_require__(119);
__webpack_require__(120);
__webpack_require__(121);
__webpack_require__(122);
__webpack_require__(123);
__webpack_require__(124);
__webpack_require__(125);
__webpack_require__(126);
__webpack_require__(127);
__webpack_require__(128);
__webpack_require__(129);
__webpack_require__(130);
__webpack_require__(131);
__webpack_require__(132);
__webpack_require__(133);
__webpack_require__(134);
__webpack_require__(135);
__webpack_require__(136);
__webpack_require__(137);
__webpack_require__(138);
__webpack_require__(139);
__webpack_require__(140);
__webpack_require__(141);
__webpack_require__(142);
__webpack_require__(143);
__webpack_require__(144);
__webpack_require__(145);
__webpack_require__(146);
__webpack_require__(147);
__webpack_require__(148);
__webpack_require__(149);
__webpack_require__(150);
__webpack_require__(151);
__webpack_require__(152);
__webpack_require__(153);
__webpack_require__(154);
__webpack_require__(155);
__webpack_require__(156);
__webpack_require__(157);
__webpack_require__(158);
__webpack_require__(159);
__webpack_require__(160);
__webpack_require__(161);
__webpack_require__(162);
__webpack_require__(163);
__webpack_require__(164);
__webpack_require__(165);
__webpack_require__(166);
__webpack_require__(167);
__webpack_require__(168);
__webpack_require__(169);
__webpack_require__(170);
__webpack_require__(171);
__webpack_require__(172);
__webpack_require__(173);
__webpack_require__(174);
__webpack_require__(175);
__webpack_require__(176);
__webpack_require__(177);
__webpack_require__(178);
__webpack_require__(179);
__webpack_require__(180);
__webpack_require__(181);
__webpack_require__(182);
__webpack_require__(183);
__webpack_require__(184);
__webpack_require__(185);
__webpack_require__(186);
__webpack_require__(187);
__webpack_require__(188);
__webpack_require__(189);
__webpack_require__(190);
__webpack_require__(191);
__webpack_require__(192);
__webpack_require__(193);
__webpack_require__(194);
__webpack_require__(195);
__webpack_require__(196);
__webpack_require__(197);
__webpack_require__(198);
__webpack_require__(199);
__webpack_require__(200);
__webpack_require__(201);
__webpack_require__(202);
__webpack_require__(203);
__webpack_require__(71);
__webpack_require__(204);
__webpack_require__(72);
__webpack_require__(42);
__webpack_require__(205);
__webpack_require__(206);
module.exports = __webpack_require__(301);


/***/ })
/******/ ]);
//# sourceMappingURL=./materials_without_jquery.js.map