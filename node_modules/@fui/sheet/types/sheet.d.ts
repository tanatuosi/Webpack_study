import { Point, Range } from './base';
import { LinearGradient } from './renderer';
import { CellStyle } from './cell';
import { MenuItem } from 'types';
import { SheetElement } from './element';

export declare type RenderType = 'canvas';
export declare type ColumnSizes = number[];
export declare type RowSizes = number[];
export declare type RowData = {
    type: string;
    value?: string;
    style?: any;
    items?: any[];
    backgroundStyle?: {
        backgroundImage?: string;
        backgroundSize?: string;
        backgroundImageLayout?: string;
        backgroundColor?: string;
        linearGradient?: {
            degree: number;
            stops: {
                per: number;
                color: string;
            }[];
        };
        type: string;
    };
    borderStyle?: {
        borderTop: BorderType;
        borderBottom: BorderType;
        borderLeft: BorderType;
        borderRight: BorderType;
    };
    position: {
        x: number;
        y: number;
    };
    textArea?: {
        x: number;
        y: number;
        width: number;
        height: number;
        text: string;
    }[];
}[];
export interface BorderType {
    width: number;
    style: string;
    color: string;
    dash: number[];
}
export declare type ColumnRowData = RowData[];
export declare type Freeze = [number, number];

interface Obj {
    [key: string]: any;
}
export declare interface Position {
    x: number;
    y: number;
}

export declare interface Offset {
    offsetX?: number;
    offsetY?: number;
}
export interface Bounds {
    x?: number;
    y?: number;
    left?: number;
    top?: number;
    width: number;
    height: number;
}
export interface Scroll {
    x: number;
    y: number;
    sr: number;
    sc: number;
    er: number;
    ec: number;
}
export interface Selection {
    range?: Range;
    selectIndex?: Point;
}

export interface Config {
    name?: string;
    render?: RenderType;
    options?: SheetOptions;
    tableWidth?: number;
    tableHeight?: number;
}

export interface StickerOpt {
    position:
        | {
              row: number;
              col: number;
          }
        | {
              x: number;
              y: number;
              width: number;
              height: number;
          };
    el?: Function | string | HTMLElement;
    id?: string;
    tag?: 'delete' | 'normal';
    init?: (e: SheetElement, width: number, height: number, mount: Function | undefined, isInRange: boolean) => void;
    /**
     * 懒挂载，将挂载操作交回业务层
     */
    lazy?: boolean;
}

export interface SheetData {
    data?: ColumnRowData;
    colc: number;
    rowc: number;
    cols?: ColumnSizes;
    rows?: RowSizes;
    initialCols?: ColumnSizes;
    initialRows?: RowSizes;

    merges?: Range[];
    freeze?: Freeze;
    styles?: CellStyle[];
    stickers?: StickerOpt[];
}

export interface Sequnce {
    enable: boolean;
    size: number;
}
export interface SheetOptions {
    sheet: SheetData;
    selectable?: boolean;
    selection?: Selection;
    scroll?: Scroll;
    width?: number;
    height?: number;
    leftSequnce?: Sequnce;
    topSequnce?: Sequnce;
    offsetX?: number;
    offsetY?: number;
    align?: boolean;
    background?: {
        color?: string;
        image?: string;
        linear?: LinearGradient;
        imageLayout?: string;
        range?: Range;
    };
    contextMenuItems?: MenuItem[];
    activeBox?: boolean;

    /**
     * 同步创建sticker
     */
    sync?: boolean;
    supportCSSTransform?: boolean;
    disableContextMenu?: boolean | (() => boolean);
}

export interface SheetProps extends SheetOptions {
    selectable: boolean;
    selection: Selection;
    scroll: Scroll;
}

export interface Cell extends Obj {
    ci: number;
    ri: number;
    x: number;
    y: number;
    width: number;
    height: number;
    cp?: number;
    rp?: number;
    valid?: boolean;
    canCopy?: boolean;
    image?: string;
    textArea?: {
        x: number;
        y: number;
        width: number;
        height: number;
        text: string;
    }[];
    [key: string]: any;
}

export interface CurrencyLineAttr {
    intPart: number;
    deciPart: number;
}

export type Area = [Cell, Cell];

export interface RowsConfig {
    rows: RowSizes;
}

export interface ColsConfig {
    cols: ColumnSizes;
}
