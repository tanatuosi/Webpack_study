{"version":3,"file":"icon.js","sourceRoot":"","sources":["../../src/widgets/icon.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AAC9C,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAE1C;IAAA,IAAa,IAAI,GAAjB,MAAa,IAAK,SAAQ,cAAc;QAIpC,YAAmB,KAAU;YACzB,KAAK,CAAC,KAAK,CAAC,CAAC;YAEb,MAAM,KAA0E,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAEhG,EAFK,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,GAAG,EAAE,EAAE,eAAe,EAAE,GAAG,EAAE,IAAI,OAE3D,EAFgE,UAAU,cAArE,6DAAuE,CAE5E,CAAC;YAEF,IAAI,CAAC,SAAS,mBACV,KAAK,EAAE,KAAK,IAAI,IAAI,EACpB,MAAM,EAAE,MAAM,IAAI,IAAI,EACtB,IAAI,EACJ,eAAe,EAAE,eAAe,IAAI,EAAE,EACtC,GAAG;gBACH,IAAI,IACD,UAAU,CAChB,CAAC;QACN,CAAC;QAEM,WAAW;YACd,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,OAAO,IAAI,CAAC,QAAQ,CAAC;aACxB;YAED,MAAM,KASF,IAAI,CAAC,SAAS,EATZ,EACF,KAAK,EAAE,SAAS,EAChB,MAAM,EAAE,UAAU,EAClB,IAAI,EACJ,IAAI,EACJ,eAAe,EACf,GAAG,EAAE,YAAY,GAAG,CAAC,EACrB,IAAI,EAAE,aAAa,GAAG,CAAC,OAET,EADX,SAAS,cARV,qEASL,CAAiB,CAAC;YAEnB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAE9D,IAAI,CAAC,QAAQ,GAAG;gBACZ,YAAY,CAAC;oBACT,IAAI,EAAE,aAAa;oBACnB,IAAI;oBACJ,GAAG,EAAE,GAAG,GAAG,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC;oBACpC,MAAM,EAAE,MAAM,GAAG,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC;oBAC1C,KAAK;oBACL,KAAK,EAAE;wBACH,eAAe;qBAClB;oBACD,KAAK,EAAE,SAAS;oBAChB,MAAM,EAAE,UAAU;oBAClB,KAAK,EAAE;wBACH;4BACI,EAAE,EAAE;gCACA,IAAI,EAAE,UAAU;gCAChB,KAAK,kCACE,SAAS,KACZ,UAAU,EAAE,UAAU,GAAG,CAAC,EAC1B,QAAQ,EAAE,GAAG,IAAI,IAAI,EACrB,aAAa,EAAE,QAAQ,GAC1B;gCACD,KAAK,EAAE,SAAS;gCAChB,MAAM,EAAE,UAAU;gCAClB,IAAI;6BACP;4BACD,IAAI,EAAE,aAAa;4BACnB,GAAG,EAAE,YAAY;4BACjB,MAAM,EAAE,CAAC,YAAY;4BACrB,KAAK,EAAE,CAAC,aAAa;4BACrB,KAAK,EAAE,SAAS;4BAChB,MAAM,EAAE,UAAU;yBACrB;qBACJ;iBACJ,CAAC;aACL,CAAC;YAEF,OAAO,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;QAEM,YAAY;YACf,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,YAAY,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;QACpF,CAAC;KACJ,CAAA;IAnFY,IAAI;QADhB,MAAM,CAAC,SAAS,CAAC;OACL,IAAI,CAmFhB;IAAD,WAAC;KAAA;SAnFY,IAAI","sourcesContent":["import { widget, createWidget } from './base';\r\nimport { AbstractWidget } from './widget';\r\n@widget('bi.icon')\r\nexport class Icon extends AbstractWidget {\r\n    private iconStyle: IconStyle;\r\n    private children: any[];\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n        const { width, height, size = 16, backgroundColor, top, left, ...iconStyles } = (props.icon || {}) as Partial<\r\n            IconStyle\r\n        >;\r\n\r\n        this.iconStyle = {\r\n            width: width || size,\r\n            height: height || size,\r\n            size,\r\n            backgroundColor: backgroundColor || '',\r\n            top,\r\n            left,\r\n            ...iconStyles,\r\n        };\r\n    }\r\n\r\n    public getChildren() {\r\n        if (this.children) {\r\n            return this.children;\r\n        }\r\n\r\n        const {\r\n            width: iconWidth,\r\n            height: iconHeight,\r\n            text,\r\n            size,\r\n            backgroundColor,\r\n            top: additonalTop = 0,\r\n            left: additonalLeft = 0,\r\n            ...styleArgs\r\n        } = this.iconStyle;\r\n\r\n        const { left, right, height, top, bottom } = this.getBounds();\r\n\r\n        this.children = [\r\n            createWidget({\r\n                type: 'bi.absolute',\r\n                left,\r\n                top: top + (height - iconHeight) / 2,\r\n                bottom: bottom - (height - iconHeight) / 2,\r\n                right,\r\n                style: {\r\n                    backgroundColor,\r\n                },\r\n                width: iconWidth,\r\n                height: iconHeight,\r\n                items: [\r\n                    {\r\n                        el: {\r\n                            type: 'bi.label',\r\n                            style: {\r\n                                ...styleArgs,\r\n                                lineHeight: iconHeight - 1, // 设置折叠树的按钮行高比高度小一点，使其永远保持垂直居中\r\n                                fontSize: `${size}px`,\r\n                                verticalAlign: 'middle',\r\n                            },\r\n                            width: iconWidth,\r\n                            height: iconHeight,\r\n                            text,\r\n                        },\r\n                        left: additonalLeft,\r\n                        top: additonalTop,\r\n                        bottom: -additonalTop,\r\n                        right: -additonalLeft,\r\n                        width: iconWidth,\r\n                        height: iconHeight,\r\n                    },\r\n                ],\r\n            }),\r\n        ];\r\n\r\n        return this.children;\r\n    }\r\n\r\n    public getRealWidth() {\r\n        return this.getChildren().reduce((sum, child) => child.getRealWidth() + sum, 0);\r\n    }\r\n}\r\n\r\ninterface IconStyle {\r\n    width: number;\r\n    height: number;\r\n    size: number;\r\n    backgroundColor: string;\r\n    top?: number;\r\n    left?: number;\r\n    [key: string]: any;\r\n}\r\n"]}