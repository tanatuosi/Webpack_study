var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { widget, createWidget } from './base';
import { AbstractWidget } from './widget';
let Icon = /** @class */ (() => {
    let Icon = class Icon extends AbstractWidget {
        constructor(props) {
            super(props);
            const _a = (props.icon || {}), { width, height, size = 16, backgroundColor, top, left } = _a, iconStyles = __rest(_a, ["width", "height", "size", "backgroundColor", "top", "left"]);
            this.iconStyle = Object.assign({ width: width || size, height: height || size, size, backgroundColor: backgroundColor || '', top,
                left }, iconStyles);
        }
        getChildren() {
            if (this.children) {
                return this.children;
            }
            const _a = this.iconStyle, { width: iconWidth, height: iconHeight, text, size, backgroundColor, top: additonalTop = 0, left: additonalLeft = 0 } = _a, styleArgs = __rest(_a, ["width", "height", "text", "size", "backgroundColor", "top", "left"]);
            const { left, right, height, top, bottom } = this.getBounds();
            this.children = [
                createWidget({
                    type: 'bi.absolute',
                    left,
                    top: top + (height - iconHeight) / 2,
                    bottom: bottom - (height - iconHeight) / 2,
                    right,
                    style: {
                        backgroundColor,
                    },
                    width: iconWidth,
                    height: iconHeight,
                    items: [
                        {
                            el: {
                                type: 'bi.label',
                                style: Object.assign(Object.assign({}, styleArgs), { lineHeight: iconHeight - 1, fontSize: `${size}px`, verticalAlign: 'middle' }),
                                width: iconWidth,
                                height: iconHeight,
                                text,
                            },
                            left: additonalLeft,
                            top: additonalTop,
                            bottom: -additonalTop,
                            right: -additonalLeft,
                            width: iconWidth,
                            height: iconHeight,
                        },
                    ],
                }),
            ];
            return this.children;
        }
        getRealWidth() {
            return this.getChildren().reduce((sum, child) => child.getRealWidth() + sum, 0);
        }
    };
    Icon = __decorate([
        widget('bi.icon')
    ], Icon);
    return Icon;
})();
export { Icon };
//# sourceMappingURL=icon.js.map