var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { createWidget, widget } from './base';
import { AbstractWidget } from './widget';
let CheckBox = /** @class */ (() => {
    let CheckBox = class CheckBox extends AbstractWidget {
        constructor(props) {
            super(props);
        }
        getChildren() {
            return [
                createWidget({
                    type: 'bi.widget',
                    width: 5,
                    height: 8,
                    left: this.left,
                    top: this.top,
                    style: {
                        rotate: '45',
                        borderBottom: '2px solid #000',
                        borderRight: '2px solid #000',
                    },
                }),
            ];
        }
    };
    CheckBox = __decorate([
        widget('bi.checkbox')
    ], CheckBox);
    return CheckBox;
})();
export { CheckBox };
//# sourceMappingURL=checkbox.js.map