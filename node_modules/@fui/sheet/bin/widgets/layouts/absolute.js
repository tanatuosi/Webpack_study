var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { createWidget, widget } from '../base';
import { Layout } from './layout';
let Absolute = /** @class */ (() => {
    let Absolute = class Absolute extends Layout {
        constructor(props) {
            super(props);
            this.clickHandler = (e, left, top, click, relativePosition) => {
                let skip = false;
                for (let i = 0; i < this.children.length; i++) {
                    const bounds = this.children[i].getBounds();
                    const { x } = relativePosition || { x: left };
                    if (bounds.left <= x && bounds.right > x) {
                        return this.children[i].clickHandler.call(null, e, left, top, click);
                    }
                }
                if (this.props.listeners) {
                    this.props.listeners.forEach(listener => {
                        if (listener.eventName === 'CELL_CLICK') {
                            skip = listener.action.call(this, e, left, top, click);
                        }
                    });
                }
                return skip;
            };
            this.items = props.items || [];
            this.children = [];
            this.digest();
        }
        digest() {
            const bounds = this.getBounds();
            this.children = this.items.map(item => {
                const widget = item.el;
                widget.top = bounds.top + (item.top || 0);
                widget.left = bounds.left + (item.left || 0);
                widget.right = bounds.right - (item.right || 0);
                widget.bottom = bounds.bottom - (item.bottom || 0);
                if (widget.type === 'bi.label') {
                    widget.width = widget.right - widget.left;
                    widget.height = widget.bottom - widget.top;
                }
                else {
                    widget.width = bounds.width;
                    widget.height = bounds.height;
                }
                return createWidget(widget);
            });
        }
    };
    Absolute = __decorate([
        widget('bi.absolute')
    ], Absolute);
    return Absolute;
})();
export { Absolute };
//# sourceMappingURL=absolute.js.map