var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { createWidget, widget } from '../base';
import { Absolute } from './absolute';
class FlowLayout extends Absolute {
    adjustAndGenerate($left) {
        let left = $left;
        const bounds = this.getBounds();
        this.children = this.items.map((item, index) => {
            const widget = item.el;
            widget.top = bounds.top + (item.top || 0);
            widget.left = left + (item.left || 0);
            const width = this.children[index].getRealWidth();
            widget.width =
                index === 0 ? width : Math.min(bounds.width - (left - bounds.left) - (item.left || 0), width);
            widget.height = this.children[index].height;
            left += widget.width + (item.left || 0);
            return createWidget(widget);
        });
    }
}
let FlowLeft = /** @class */ (() => {
    let FlowLeft = class FlowLeft extends FlowLayout {
        digest() {
            super.digest();
            const bounds = this.getBounds();
            const left = bounds.left;
            this.adjustAndGenerate(left);
        }
    };
    FlowLeft = __decorate([
        widget('bi.flow_left')
    ], FlowLeft);
    return FlowLeft;
})();
export { FlowLeft };
let FlowCenter = /** @class */ (() => {
    let FlowCenter = class FlowCenter extends FlowLayout {
        digest() {
            super.digest();
            const bounds = this.getBounds();
            const totalWidth = this.children.reduce((sum, child, index) => child.getRealWidth() + this.items[index].left + sum, 0);
            const left = Math.max((bounds.width - totalWidth) / 2, 0) + bounds.left;
            this.adjustAndGenerate(left);
        }
    };
    FlowCenter = __decorate([
        widget('bi.flow_center')
    ], FlowCenter);
    return FlowCenter;
})();
export { FlowCenter };
let FlowRight = /** @class */ (() => {
    let FlowRight = class FlowRight extends FlowLayout {
        digest() {
            super.digest();
            const bounds = this.getBounds();
            const totalWidth = this.children.reduce((sum, child, index) => child.getRealWidth() + this.items[index].left + sum, 0);
            const left = Math.max(bounds.width - totalWidth, 0) + bounds.left;
            this.adjustAndGenerate(left);
        }
    };
    FlowRight = __decorate([
        widget('bi.flow_right')
    ], FlowRight);
    return FlowRight;
})();
export { FlowRight };
//# sourceMappingURL=flow.js.map