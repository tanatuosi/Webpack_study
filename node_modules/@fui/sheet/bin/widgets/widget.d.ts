import { Color } from './base/color';
import { TextShadow, UnderLine, Cell } from '../../types';
interface Style {
    top?: number;
    left?: number;
    width?: number;
    height?: number;
    color?: Color;
    fontStyle?: string;
    fontWeight?: string;
    fontSize?: string;
    fontFamily?: string;
    textAlign?: string;
    verticalAlign?: string;
    textDecoration?: string;
    lineHeight?: string;
    strikeThrough?: string;
    textShadow?: TextShadow;
    underline?: UnderLine;
    subscript?: boolean;
    supscript?: boolean;
    backgroundColor?: Color;
    backgroundImage?: string;
    backgroundSize?: string;
    borderTopColor?: Color;
    borderTopStyle?: string;
    borderTopWidth?: number;
    borderBottomColor?: Color;
    borderBottomStyle?: string;
    borderBottomWidth?: number;
    borderLeftColor?: Color;
    borderLeftStyle?: string;
    borderLeftWidth?: number;
    borderRightColor?: Color;
    borderRightStyle?: string;
    borderRightWidth?: number;
    rotate?: string;
    newLine?: string;
    verticalText?: string;
    verTextDirection?: string;
    cellJust?: 'NONE' | 'HEIGHT' | 'WIDTH';
    autoWrapInfo?: number[];
}
export declare class AbstractWidget {
    protected props: any;
    protected top: number;
    protected left: number;
    protected width: number;
    protected height: number;
    protected style: Style;
    constructor(props: any);
    getBounds(): {
        left: number;
        top: number;
        right: number;
        bottom: number;
        width: number;
        height: number;
    };
    getChildren(): void;
    getStyle(): Style;
    getText(): void;
    mouseDownHandler: (e: Event, x: number, y: number, click: Cell) => void;
    mouseLeaveHandler: (e: Event, x: number, y: number, click: Cell) => void;
    clickHandler: (e: Event, x: number, y: number, click: Cell) => boolean;
    hoverHandler: (e: Event, x: number, y: number, cell: Cell) => void;
    dbClickHandler: (e: Event, x: number, y: number, cell: Cell) => void;
    getRealWidth(): number;
}
export {};
