import '../polyfill/polyfill';
import './style.less';
import { Sheet, h } from '../component';
class FineSheet {
    constructor(rootEl, config, events = {}) {
        var _a, _b, _c;
        if (events.beforeInit && !events.beforeInit()) {
            return;
        }
        (_a = events.beforeCreate) === null || _a === void 0 ? void 0 : _a.call(events);
        this.parent = h(rootEl, 'sheet-root');
        const { width, height } = this.parent.offset();
        const { tableWidth = width, tableHeight = height } = config;
        const sheetOptions = Object.assign({ width: tableWidth, height: tableHeight }, config.options);
        this.sheet = new Sheet(sheetOptions, events);
        (_b = events.beforeMount) === null || _b === void 0 ? void 0 : _b.call(events);
        this.parent.children(this.sheet.el);
        (_c = events.mounted) === null || _c === void 0 ? void 0 : _c.call(events);
    }
    loadData(data) {
        this.sheet.loadData(data);
        return this;
    }
    updateData() {
        return this;
    }
    /**
     * 更新单个单元格
     * @param cell 单元格
     * @param data 更新数据
     */
    updateCell(cell, data) {
        this.sheet.updateCell(cell, data);
    }
    /**
     * 根据单元格坐标获取单元格位置
     * @param data
     */
    getCellPosition(data) {
        return this.sheet.getCellPosition(data);
    }
    /**
     * resize
     */
    resize(w, h) {
        const { width, height } = this.parent.offset();
        w = w || width;
        h = h || height;
        this.sheet.resize(w, h);
    }
    insertRows(ri, rowData, config) {
        this.sheet.insertRows(ri, rowData, config);
    }
    insertCols(ri, colData, config) {
        this.sheet.insertCols(ri, colData, config);
    }
    deleteRows(ri, rc) {
        this.sheet.deleteRows(ri, rc);
    }
    deleteCols(ci, cc) {
        this.sheet.deleteCols(ci, cc);
    }
    /**
     * 销毁全局dom元素
     */
    tear() {
        this.sheet.tear();
    }
}
export default {
    createSheet(rootEl, config, events) {
        return new FineSheet(rootEl, config, events);
    },
};
//# sourceMappingURL=finesheet.js.map