import { SheetOptions, SheetProps, Range, Point, Scroll, Cell, Bounds, Offset, Stick, ColumnRowData, RowsConfig, ColsConfig } from '../../types';
import { View } from './view';
import { Selection } from './selection';
export declare class DataProxy {
    private name;
    options: SheetProps;
    selection: Selection;
    scroll: Scroll;
    width: number;
    height: number;
    offset: Offset;
    maxScrollX: number;
    maxScrollY: number;
    view: View;
    constructor(name: string, options: SheetOptions);
    getRenderBounds(direction: string): Bounds;
    select(a: number, b: number, c: number | undefined, d: number | undefined, position: {
        x: number;
        y: number;
    }): void;
    scrollTo(x: number, y: number, cb?: Function): void;
    scrollX(x: number, cb?: Function): void;
    scrollY(y: number, cb?: Function): void;
    getViewRange(): Range;
    getScrollRange(): Range;
    getViewBounds(): Bounds;
    getScroll(): Scroll;
    getCellIndexs(x: number, y: number): Point;
    getCellByOffset(x: number, y: number): Cell | null;
    getPositionByOffset(x: number, y: number): {
        x: number;
        y: number;
    };
    /**
     * 更新data数据
     * @param ri row
     * @param ci col
     * @param data 更新数据
     */
    updateCell(ri: number, ci: number, data: any): void;
    getCellIndexsByOffset(x: number, y: number): Point | null;
    getFreezeBounds(): Bounds[];
    cellIsFreezed(cell: Cell): {
        horizontalFreezed: boolean;
        verticalFreezed: boolean;
    };
    getCellsInBounds(x: any, y: any, width: any, height: any): Cell[];
    getCellBounds(row: number, column: number): Bounds;
    getCell(row: number, column: number): Cell;
    getMergeCells(): Cell[];
    getRangeBounds(merge: Range): Bounds;
    correctDeltaY(deltaY: number): number;
    correctDeltaX(deltaX: number): number;
    getSequnceCells(): Cell[];
    isInSticker(x: number, y: number): boolean;
    getStickers(): Stick[];
    private getStickerBounds;
    getResizerCell(x: number, y: number): Bounds | null;
    getSelectCell(): Cell;
    getSelectRangeCells(): Cell[][];
    /**
     * getSelectRange
     */
    getSelectRange(): Range;
    private transformPosition;
    getSelectBounds(): Bounds[][];
    offset2Absolute({ x, y }: {
        x: number;
        y: number;
    }, cell: Cell): {
        x: number;
        y: number;
    };
    /**
     * 根据位置获得所在分区
     * @param positionX 横坐标
     * @param positionY 纵坐标
     */
    getQuadrantBounds(positionX: number, positionY: number): Bounds;
    spliteBounds(startX: number, startY: number, endX: number, endY: number): Bounds[];
    setOffset(offset: Offset): void;
    resizeRow(ri: number, height: number): void;
    resizeCol(ci: number, width: number): void;
    insertRows(ri: number, rowData: ColumnRowData, config: RowsConfig): void;
    insertCols(ci: number, colData: ColumnRowData, config: ColsConfig): void;
    deleteRows(ri: number, rc: number): void;
    deleteCols(ci: number, cc: number): void;
    setData(options: SheetOptions): void;
    resize(width: number, height: number): void;
    reset(): void;
    private update;
    correctBounds(bounds: any): Bounds | Cell;
    clearSelection(): void;
    private sc;
    private updateScrollRange;
    private updateOffset;
    private updateMaxScroll;
    private getMaxScrollBounds;
    private correctSelectRange;
    /**
     * 根据单元格坐标获取单元格位置(用于存在合并单元格时进行位置矫正）
     * @param data
     * @param merges
     */
    getCellPosition(data: {
        row: number;
        col: number;
    }, merges: Range[]): Bounds;
}
