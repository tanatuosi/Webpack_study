const DEFAULT_POINT = [-1, -1];
/**
 * 选区
 */
export class Selection {
    constructor() {
        /**
         * 选区起始点
         */
        this.start = { x: 0, y: 0 };
        /**
         * 选区结束点
         */
        this.end = { x: 0, y: 0 };
        this.selectedTexts = [];
        this.reset();
    }
    selectCell(ri, ci, position) {
        this.cell = [ci, ri];
        this.range = [DEFAULT_POINT, DEFAULT_POINT];
        this.start = position;
    }
    selectRange(sr, sc, er, ec, position) {
        if (this.cell === DEFAULT_POINT) {
            this.cell = [0, 0];
        }
        this.range = [
            [sc, sr],
            [ec, er],
        ];
        this.end = position;
    }
    getCell() {
        return this.cell;
    }
    getRange() {
        return [
            this.range[0] === DEFAULT_POINT ? this.cell : this.range[0],
            this.range[1] === DEFAULT_POINT ? this.cell : this.range[1],
        ];
    }
    getPosition() {
        if (this.start.y > this.end.y) {
            return {
                start: this.end,
                end: this.start,
            };
        }
        else if (this.start.y === this.end.y && this.start.x > this.end.x) {
            return {
                start: this.end,
                end: this.start,
            };
        }
        return {
            start: this.start,
            end: this.end,
        };
    }
    reset() {
        this.cell = DEFAULT_POINT;
        this.range = [DEFAULT_POINT, DEFAULT_POINT];
        this.start = { x: 0, y: 0 };
        this.end = { x: 0, y: 0 };
        this.setSelectedTexts([]);
    }
    setSelectedTexts(texts) {
        this.selectedTexts = texts;
    }
    getSelectedTexts() {
        return this.selectedTexts;
    }
}
//# sourceMappingURL=selection.js.map