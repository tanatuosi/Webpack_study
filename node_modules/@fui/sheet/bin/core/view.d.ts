import { ColumnRowData, Freeze, SheetData, Point, Range, Bounds, Cell, Position, Area, CellStyle, StickerOpt, RowsConfig, ColsConfig } from '../../types';
export interface ViewEvent {
    x: number;
    y: number;
    ri: number;
    ci: number;
}
export declare class View {
    freeze: Freeze;
    freezeWidth: number;
    freezeHeight: number;
    private data;
    private cols;
    private rows;
    private stickers;
    totalWidth: number;
    totalHeight: number;
    colc: number;
    rowc: number;
    merges: Range[];
    styles: CellStyle[];
    private hoverCellX;
    private hoverCellY;
    constructor(props: SheetData);
    doMouseDown(e: Event, ve: ViewEvent, relativePosition: {
        x: number;
        y: number;
    }): any;
    doMouseLeave(e: Event, ve: ViewEvent, relativePosition: {
        x: number;
        y: number;
    }): void;
    doClick(e: Event, ve: ViewEvent, relativePosition: {
        x: number;
        y: number;
    }): void;
    doDbClick(e: Event, ve: ViewEvent, relativePosition: {
        x: number;
        y: number;
    }): void;
    doHover(e: Event, ve: ViewEvent, relativePosition: {
        x: number;
        y: number;
    }): void;
    disHover(): void;
    getSumHeight(min?: number, max?: number): number;
    getSumWidth(min?: number, max?: number): number;
    getRowHeight(i: number): number;
    getColWidth(i: number): number;
    getCellsInRange(range: Range): Cell[];
    getCellSquareInRange(range: Range): Cell[][];
    getRangeBounds(range: Range): Bounds;
    getCellIndexs(x: number, y: number): Point;
    getCellPoistion(row: number, col: number): Position;
    getCellBounds(row: number, col: number): Bounds;
    findMergeRange(ri: number, ci: number): Range;
    getCellArea(sr: number, sc: number, er: number, ec: number): Area;
    getCell(ri: number, ci: number): Cell;
    getViewData(): ColumnRowData;
    /**
     * 判断鼠标悬浮下面是否有文字
     */
    isHoverText(cell: Cell, clientX: number, clientY: number): boolean;
    getMergeCell(ri: number, ci: number): Cell;
    /**
     * 更新cell数据
     * @param ri row
     * @param ci col
     * @param data 更新数据
     */
    updateCell(ri: number, ci: number, data: any): void;
    getStickers(): StickerOpt[];
    setRowHeight(ri: number, height: number): void;
    setColWidth(ci: number, width: number): void;
    insertRows(ri: number, rowData: ColumnRowData, config: RowsConfig): void;
    deleteRows(ri: number, rc: number): void;
    inserCols(ci: number, colData: ColumnRowData, config: ColsConfig): void;
    deleteCols(ci: number, cc: number): void;
    digest(): void;
    loadData(props: SheetData): void;
    private updateMerges;
    private updateStickers;
    getSelctionRange(sc: number, sr: number, ec: number, er: number): Cell[];
    reset(): void;
}
