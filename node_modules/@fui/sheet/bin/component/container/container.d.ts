import { Element } from '../element';
import { Waffle } from './waffle';
import { DataProxy } from '../../core';
import { Bounds, Stick } from '../../../types';
import { ScrollBar } from '../scrollbar';
import { Resizer } from '../resizer';
import { OB } from '../../utils/OB';
export declare class Container extends OB {
    el: Element;
    private data;
    protected gridContainer: Container;
    verticalScrollBar: ScrollBar;
    horizontalScrollBar: ScrollBar;
    protected verticalResizer: Resizer;
    protected horizontalResizer: Resizer;
    private toolTip;
    protected waffle: Waffle;
    private stickerTimeouts;
    private deltaXCache;
    private deltaYCache;
    private scrollTimeout?;
    private cellCache;
    private sync;
    private getPointByClient;
    private supportCSSTransform;
    /**
     * 运动状态
     *
     * 0: 静止
     * 1: 可以动了
     * 2: 已动
     * 3: XXX
     *
     * @private
     * @type {(0 | 1 | 2 | 3)}
     * @memberof Container
     */
    private moving;
    private previousPosition;
    constructor(data: DataProxy, options: {
        sync?: boolean;
        getPointByClient: (clientX: number, clientY: number) => {
            x: number;
            y: number;
        };
        supportCSSTransform: boolean;
    });
    correctBounds<T extends Bounds>(bounds: T): T;
    resize(): void;
    reset(): void;
    stick(stick: Stick, call?: Function): string;
    tearSticker(id: string): void;
    tear(): void;
    stickCell(ri: number, ci: number, call?: Function): string;
    whellScroll(wheelDeltaX: number, wheelDeltaY: number): {
        scrollX: number;
        scrollY: number;
        maxScrollX: number;
        maxScrollY: number;
    };
    private updateStickCells;
    setWheelMode(wheelMode: number): void;
    private initEvent;
    private initResizer;
    private initTootip;
    private initScrollbar;
    private mountResizer;
    private mountScrollbar;
    private updateScrollBar;
    private initWaffle;
    private onMouseDown;
    private onMouseMove;
    private onMouseleave;
    private onDoubleClick;
    private isDoubleClickable;
    private onMouseUp;
    private resizeHandler;
    private focusHandler;
    private scrollHandler;
    private showInputCell;
    private showSelectArea;
    private hideSelectArea;
    private clean;
    private getActiveCell;
    /**
     * 根据MouseEvent给鼠标设置样式
     *
     * 有Sticker的缘故，直接给target设置鼠标样式的时候会出现target变来变去的情况，
     * 不好控制样式的还原与变化，因此固定到统一的DOM上去做这件事
     *
     * @param e
     * @param cursor
     */
    private setMouseCursorByEvent;
    private getActivePosition;
    /**
     * 根据事件获得坐标信息
     * @param ev
     * @returns
     */
    private getPointInfo;
    /**
     * 根据事件获取窗口的坐标
     * @param event
     * @returns
     */
    private getClientByEvent;
    /**
     * 根据事件获取画布坐标
     * @param event
     * @returns
     */
    private getPointByEvent;
}
