import { Element } from './element';
import { DataProxy } from '../core';
import { Renderer } from '../renderer';
import { Cell } from 'types';
import { Container } from './container';
export declare class Table {
    el: Element;
    renderer: Renderer;
    data: DataProxy;
    container: Container;
    private cacheBorderSet;
    private cacheBorderPosition;
    constructor(data: DataProxy, container: Container);
    private reRender;
    render: () => void;
    renderSequnce(): void;
    refresh: () => void;
    resize: () => void;
    scroll(scrollDeltaX: number, scrollDeltaY: number): void;
    /**
     * 根据滚动信息计算出缓存区域、重新render的区域
     * @param deltaX 在x方向上的滚动距离
     * @param deltaY 在y方向上的滚动距离
     * @param bounds 当前渲染的区域
     * @returns
     */
    private getReRenderBounds;
    private clip;
    private clear;
    private drawSelf;
    private renderFreeze;
    private rerenderBounds;
    private clearBorderSet;
    private renderGrid;
    private renderContent;
    /**
     * 渲染单个单元格
     * @param quadrantBounds 所在象限的bounds
     * @param cells 单元格对象们
     */
    renderCell(cell: Cell): void;
    private renderBorder;
    private renderCellComponent;
    private renderCellBorder;
    private renderCellBorderLine;
    private debounceRender;
    private renderCellBg;
    private renderStickers;
}
