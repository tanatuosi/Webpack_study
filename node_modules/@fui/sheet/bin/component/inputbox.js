import { h } from './element';
import { unbindClickoutside, bindClickoutside, getSelection, bindMouseWhell, unbindMouseWhell } from '../utils';
export class InputBox {
    constructor({ data, editable = false }) {
        this.data = data;
        this.el = h('div', 'input-box').hide();
        this.input = h('div', 'cell-input').attr('contenteditable', `${!!editable}`);
        this.el.children(this.input);
        document.body.appendChild(this.el.el);
    }
    show(x, y, width, height) {
        if (width <= 0 || height <= 0) {
            return;
        }
        this.el
            .css({
            left: `${x - 2}px`,
            top: `${y - 2}px`,
            maxWidth: `${this.data.width - x + this.data.offset.offsetX - 12}px`,
            minWidth: `${width + 2}px`,
            minHeight: `${height + 2}px`,
            maxHeight: `${this.data.height - y + this.data.offset.offsetY - 12}px`,
        })
            .show();
        this.input.text('');
        this.text = this.text || h('span');
        this.text.text(this.data.getSelectCell().value);
        this.input.children(this.text);
        const selection = getSelection();
        const range = document.createRange();
        selection.removeAllRanges();
        range.selectNodeContents(this.text.el);
        range.setStart(range.startContainer, range.endOffset);
        selection.addRange(range);
        bindClickoutside(this.el);
        bindMouseWhell(this.el);
    }
    hide() {
        this.el.hide();
        unbindClickoutside(this.el);
        unbindMouseWhell(this.el);
    }
    tear() {
        document.body.removeChild(this.el.el);
    }
}
//# sourceMappingURL=inputbox.js.map