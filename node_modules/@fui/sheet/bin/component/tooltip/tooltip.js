import { h } from '../element';
export class ToolTip {
    constructor() {
        this.el = h('div', 'sheet-tooltip');
        this.hideEl();
        this.isShow = false;
        document.body.appendChild(this.el.el);
    }
    show(text, x, y) {
        let top = y + 10, left = x + 10;
        this.el.text(text);
        const width = this.el.el.clientWidth;
        let height = this.el.el.clientHeight;
        // 高度大于窗口高度的话，比较左右侧空间，选择大的一方宽度直接拉满
        if (height > window.innerHeight) {
            const lleft = x - 10, lright = window.innerWidth - x - 10;
            if (lleft > lright) {
                this.el.css('max-width', `${lleft}px`);
                left = 0;
            }
            else {
                this.el.css('max-width', `${lright}px`);
                left = x + 10;
            }
            height = this.el.el.clientHeight;
            top = y + 10 - height;
        }
        else {
            // 高度不够就往上
            if (window.innerHeight - y <= height) {
                top -= height + 15;
            }
            // 宽度不够就往左
            if (window.innerWidth - x <= width) {
                left -= width + 10;
            }
        }
        // 如果top小于0，则把top置为0
        top = Math.max(top, 0);
        // 如果left小于0，则把left置为0
        left = Math.max(left, 0);
        this.el.offset({ left, top });
        if (!this.isShow) {
            this.isShow = true;
            this.timeOut = setTimeout(() => {
                this.showEl();
            }, 900);
        }
    }
    hide() {
        this.timeOut && clearTimeout(this.timeOut);
        this.hideEl();
        this.isShow = false;
    }
    showEl() {
        this.el.css('visibility', 'visible');
        this.el.css('opacity', 'inherit');
    }
    hideEl() {
        this.el.css('visibility', 'hidden');
        this.el.css('opacity', '0');
    }
    tear() {
        document.body.removeChild(this.el.el);
    }
}
//# sourceMappingURL=tooltip.js.map