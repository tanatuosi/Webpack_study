import { h } from '../element';
import { unbindClickoutside, bindClickoutside, emptyFn, blockContextMenu } from '../../utils';
/**
 * 右键单元格的菜单
 */
export class ContextMenu {
    constructor(menuItems = [
        {
            key: 'copy',
            icon: '',
            label: '复制',
            accel: '',
        },
    ]) {
        this.el = h('div', 'sheet-menu')
            .css({
            userSelect: 'none',
        })
            .hide();
        this.clickHandler = emptyFn;
        this.menuItems = menuItems;
        this.buildItems();
        blockContextMenu(this.el.el);
        document.body.appendChild(this.el.el);
    }
    show(x, y, options) {
        const { width, height } = this.el.show().offset();
        this.configItems(options);
        let top = y, left = x;
        if (window.innerHeight - y <= height) {
            top -= height;
        }
        if (window.innerWidth - x <= width) {
            left -= width;
        }
        this.el.offset({ left, top });
        bindClickoutside(this.el);
    }
    hide() {
        this.el.hide();
        unbindClickoutside(this.el);
    }
    bindHandler(handler) {
        this.clickHandler = handler;
    }
    tear() {
        document.body.removeChild(this.el.el);
    }
    configItems(options) {
        this.menuItems.forEach(item => {
            options[item.key] ? this.el.childEnable(item.key) : this.el.disableChild(item.key);
        });
    }
    buildItems() {
        this.menuItems.forEach(it => {
            if (it.key === 'separator') {
                this.el.children(h('div', 'sheet-menuseparator'));
            }
            this.el.children(h('div', `sheet-menuitem ${it.key}`)
                .on('mousedown', e => {
                e.stopPropagation();
            })
                .on('click', () => {
                this.clickHandler(it.key);
                this.hide();
            })
                .children(h('div', 'sheet-menuitem-icon'), h('span', 'sheet-menuitem-label').text(it.label || ''), h('span', 'sheet-menuitem-accel').text(it.accel || '')));
        });
    }
}
//# sourceMappingURL=contextmenu.js.map