import { Table } from './table';
import { Element } from './element';
import { SheetOptions, Event, ColsConfig, RowsConfig, ColumnRowData, Cell, Bounds } from '../../types';
import { Container } from './container';
import { HotkeysManager } from './hotkeys';
import { ContextMenu } from './memu';
import { InputBox } from './inputbox';
import { Clipboard } from './clipboard';
import { Events } from '../wrappers/finesheet';
export declare class Sheet {
    private data;
    private eventsMap;
    el: Element;
    protected table: Table;
    protected container: Container;
    protected hotkeys: HotkeysManager;
    protected clipboard: Clipboard;
    protected contextMenu: ContextMenu;
    protected inputBox: InputBox;
    private events;
    private disableContextMenu;
    constructor(options: SheetOptions, events?: Events);
    private initEvent;
    private initHotKeys;
    private initCopyEvent;
    private scrollHandler;
    private resizeHandler;
    private scrollTable;
    private selectHandler;
    private showContextMenu;
    private contextMenuHandler;
    private render;
    private resizeEl;
    addEventListener(event: Event, callback: Function): void;
    removeEventListener(event: Event, callback: Function): void;
    copy: () => void;
    loadData(d: any): void;
    /**
     * 更新单元格数据+重绘
     * @param cell 原cell
     * @param data 新data
     */
    updateCell(cell: Cell, data: {
        [key: string]: any;
    }): void;
    /**
     * 根据单元格坐标获取单元格位置
     * @param data
     */
    getCellPosition(data: {
        row: number;
        col: number;
    }): Bounds;
    /**
     * 根据Bounds进行页面滚动，使其可见
     * @param cell 单元格的位置信息
     *
     * 修改 [REPORT-67635](https://work.fineres.com/browse/REPORT-67635) 引入
     */
    whellByBounds(cell: Bounds): void;
    /**
     * 获得sheet的视图界限信息
     *
     * 修改 [REPORT-67635](https://work.fineres.com/browse/REPORT-67635) 引入
     */
    getBounds(): {
        left: number;
        top: number;
        right: number;
        bottom: number;
        width: number;
        height: number;
    };
    insertRows(ri: number, rowData: ColumnRowData, config: RowsConfig): void;
    insertCols(ri: number, colData: ColumnRowData, config: ColsConfig): void;
    deleteRows(ri: number, rc: number): void;
    deleteCols(ci: number, cc: number): void;
    reset(): void;
    resize(width: number, height: number): void;
    /**
     * 设置横向滚动条显隐
     */
    setHScrollBarVisible(visible: boolean): void;
    /**
     * 设置纵向滚动条显隐
     */
    setVScrollBarVisible(visible: boolean): void;
    /**
     * 滚动页面
     * @param wheelDeltaX 横向滚动距离
     * @param wheelDeltaY 纵向滚动距离
     */
    whellScroll(wheelDeltaX: number, wheelDeltaY: number): {
        scrollX: number;
        scrollY: number;
        maxScrollX: number;
        maxScrollY: number;
    };
    /**
     * 销毁dom元素
     */
    tear(): void;
    /**
     * 通过clientX、clientY的坐标来获取画布坐标
     * @param clientX
     * @param clientY
     * @returns
     */
    private getPointByClient;
}
