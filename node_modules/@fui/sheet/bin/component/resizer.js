import { h } from './element';
import { clamp } from '../utils';
let moving = false;
export class Resizer {
    constructor(props) {
        this.onMouseDown = (e) => {
            e.preventDefault();
            e.stopPropagation();
            moving = true;
            this.prevX = 0;
            this.prevY = 0;
            this.distance = 0;
            this.lineEl.show();
            window.addEventListener('mousemove', this.onMouseMove);
            window.addEventListener('mouseup', this.onMouseUp);
        };
        this.onMouseMove = (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (moving) {
                const { prevX, prevY, min, max } = this;
                const movementX = prevX ? e.screenX - prevX : 0;
                const movementY = prevY ? e.screenY - prevY : 0;
                this.prevX = e.screenX;
                this.prevY = e.screenY;
                if (this.direction === 'vertical') {
                    this.distance += movementX;
                    this.el.css('margin-left', `${clamp(this.distance, min, max)}px`);
                }
                else {
                    this.distance += movementY;
                    this.el.css('margin-top', `${clamp(this.distance, min, max)}px`);
                }
                e.preventDefault();
            }
        };
        this.onMouseUp = (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (moving) {
                moving = false;
                this.lineEl.hide();
                const distance = parseFloat(this.el.css('margin-left')) || parseFloat(this.el.css('margin-top'));
                this.onResize && this.onResize(this.rect, distance, this.direction);
                this.el.css('margin-left', `0px`);
                this.el.css('margin-top', `0px`);
                this.distance = 0;
                this.hide();
            }
            window.removeEventListener('mousemove', this.onMouseMove);
            window.removeEventListener('mouseup', this.onMouseUp);
        };
        const { direction = 'vertical', onResize } = props;
        this.direction = direction;
        this.onResize = onResize;
        this.el = h('div', `sheet-resizer ${direction}`);
        this.hoverEl = h('div', 'sheet-resizer-hover');
        this.lineEl = h('div', 'sheet-resizer-line');
        this.el.children(this.hoverEl, this.lineEl);
        this.lineEl.hide();
        this.hoverEl.on('mousedown', this.onMouseDown);
    }
    show(rect, line, options) {
        if (moving) {
            return;
        }
        this.rect = rect;
        const { left, top, width, height } = rect;
        const vertical = this.direction === 'vertical';
        const { min = -Infinity, max = Infinity } = options;
        this.min = min;
        this.max = max;
        this.el.offset({
            left: vertical ? left + width - 5 : left,
            top: vertical ? top : top + height - 5,
        }).show();
        const hoverWidth = vertical ? 5 : width, hoverHeight = vertical ? height : 5;
        this.hoverEl.offset({
            width: hoverWidth,
            height: hoverHeight,
        });
        this.lineEl.offset({
            top: vertical ? height : 3,
            left: vertical ? 3 : width,
            width: line.width,
            height: line.height,
        });
    }
    hide() {
        if (moving) {
            return;
        }
        this.el.offset({
            width: 0,
            height: 0,
        }).hide();
    }
}
//# sourceMappingURL=resizer.js.map