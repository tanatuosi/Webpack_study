var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { AbstractCell } from './abstract.cell';
import { cell } from './register';
let TextCell = /** @class */ (() => {
    let TextCell = class TextCell extends AbstractCell {
        constructor(props) {
            super(props);
            this.text = props.text;
        }
        _copyHtml() {
            return '';
        }
        _copyText() {
            return '';
        }
    };
    TextCell = __decorate([
        cell('text')
    ], TextCell);
    return TextCell;
})();
export { TextCell };
//# sourceMappingURL=text.cell.js.map