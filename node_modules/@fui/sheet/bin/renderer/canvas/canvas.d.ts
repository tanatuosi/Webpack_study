import { Renderer } from '../Renderer';
import { DrawOptions, CanvasOptions, ImageLayout, CurrencyLineAttr } from '../../../types';
export declare class FineCanvas implements Renderer {
    protected canvas: HTMLCanvasElement;
    protected ctx: CanvasRenderingContext2D;
    protected cacheCanvas?: HTMLCanvasElement;
    constructor(canvas: HTMLCanvasElement, _options: CanvasOptions);
    drawText(text: string, x: number, y: number, width: number, height: number, options: DrawOptions): void;
    wrapText({ text, x, y, width: maxWidth, height: maxHeight, lineHeight, options, }: {
        text: string;
        x: number;
        y: number;
        width: number;
        height: number;
        lineHeight: number;
        options: DrawOptions;
    }, forceCallback: Function): void;
    drawLine(x: number, y: number, x1: number, y1: number, options: DrawOptions): void;
    private drawDoubleLine;
    drawRect(x: number, y: number, width: number, height: number, options: DrawOptions): void;
    /**
     * 生成一个圆角矩形的路径信息
     * @param x
     * @param y
     * @param width
     * @param height
     * @param radiusConfig
     */
    private drawRadiusRect;
    drawBias(x: number, y: number, width: number, height: number, backslash: boolean, texts: (string | number)[], options: DrawOptions): void;
    drawCurrencyLine(x: number, y: number, width: number, height: number, currencyLineAttr: CurrencyLineAttr, value: string, options: DrawOptions): void;
    drawSelf(sx: number, sy: number, dx: number, dy: number, w: number, h: number): void;
    drawImage(image: HTMLImageElement, x: number, y: number, width: number, height: number, type?: ImageLayout, options?: DrawOptions): void;
    draw(config: any, forceCallback: any): void;
    clear(x?: number, y?: number, width?: number, height?: number): void;
    clip(x: any, y: any, width: any, height: any, cb?: Function): void;
    getDefaultFont(): string;
    resize(width: number, height: number): void;
    private linePath;
    private text;
    private getVisualRangeText;
    private textVertical;
    private drawUnderline;
    private drawStrikeThrough;
    private getCacheCanvas;
    private getCacheContext;
    private makeLineTextOpts;
    private makeVerticalWrap;
    private makeVerticalOpts;
    /**
     * 文字单行显示
     */
    private makeSingleLineOpts;
    private newLine;
    private makeTextOpts;
    /**
     * 根据换行信息换行
     */
    private makeTextOptsByWrapInfo;
    /**
     * 自动根据行高列宽换行
     */
    private makeTextOptsByWrapAuto;
}
