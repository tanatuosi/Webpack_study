{"version":3,"file":"canvas.js","sourceRoot":"","sources":["../../../src/renderer/canvas/canvas.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    dpr,\r\n    getMetrics,\r\n    getFitGradient,\r\n    getBiasLines,\r\n    divide,\r\n    divideTextByWrapInfo,\r\n    setCtxFont,\r\n} from '../../utils';\r\nimport { Renderer } from '../Renderer';\r\nimport { DrawOptions, Point, CanvasOptions, ImageLayout, CurrencyLineAttr, RadiusConfig } from '../../../types';\r\nimport { h } from '../../component';\r\nimport { getRotatePosition } from './canvas.service';\r\n\r\nfunction resizeCanvas(canvas: HTMLCanvasElement, width: number, height: number): HTMLCanvasElement {\r\n    const pixelRatio = dpr();\r\n    canvas.width = Math.round(width * pixelRatio);\r\n    canvas.height = Math.round(height * pixelRatio);\r\n    h(canvas).offset({ width: canvas.width / pixelRatio, height: canvas.height / pixelRatio });\r\n    canvas.getContext('2d').setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n\r\n    return canvas;\r\n}\r\n\r\nexport class FineCanvas implements Renderer {\r\n    protected canvas: HTMLCanvasElement;\r\n    protected ctx: CanvasRenderingContext2D;\r\n    protected cacheCanvas?: HTMLCanvasElement;\r\n\r\n    public constructor(canvas: HTMLCanvasElement, _options: CanvasOptions) {\r\n        const pixelRatio = dpr();\r\n        this.canvas = canvas;\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    }\r\n\r\n    public drawText(text: string, x: number, y: number, width: number, height: number, options: DrawOptions): void {\r\n        this.text(text, x, y, width, height, options);\r\n    }\r\n\r\n    public wrapText(\r\n        {\r\n            text,\r\n            x,\r\n            y,\r\n            width: maxWidth,\r\n            height: maxHeight,\r\n            lineHeight,\r\n            options,\r\n        }: {\r\n            text: string;\r\n            x: number;\r\n            y: number;\r\n            width: number;\r\n            height: number;\r\n            lineHeight: number;\r\n            options: DrawOptions;\r\n        },\r\n        forceCallback: Function,\r\n    ): void {\r\n        this.ctx.save();\r\n        const { verticalAlign, clip, fontStyle, fontWeight, fontFamily, verticalText, textAlign } = options;\r\n        let { fontSize } = options;\r\n        if (clip) {\r\n            this.ctx.beginPath();\r\n            this.ctx.rect(x, y, maxWidth, maxHeight);\r\n            this.ctx.clip();\r\n            this.ctx.beginPath();\r\n        }\r\n\r\n        setCtxFont(this.ctx, { fontFamily, fontSize, fontStyle, fontWeight });\r\n        lineHeight = lineHeight || parseFloat(fontSize) * 1.2;\r\n        let textOpts = [];\r\n        const lineTextOpts = this.makeLineTextOpts(fontSize, text, x, y, maxWidth, maxHeight, lineHeight, options);\r\n        textOpts = lineTextOpts.textOpts;\r\n        fontSize = lineTextOpts.fontSize;\r\n        lineHeight = lineTextOpts.lineHeight;\r\n        if (verticalText === 'VERTICAL_TEXT') {\r\n            // 如果是文字竖排\r\n            const totalWidth = lineHeight * textOpts.length;\r\n            textOpts.forEach((opt, index) => {\r\n                const { text, width, height, options } = opt;\r\n                let { x, y } = opt;\r\n                switch (textAlign) {\r\n                    case 'left':\r\n                        break;\r\n                    case 'center':\r\n                        x = x + (maxWidth - totalWidth) / 2;\r\n                        break;\r\n                    case 'right':\r\n                        x = x + (maxWidth - totalWidth);\r\n                        break;\r\n                    case 'distributed':\r\n                        const offset = (maxWidth - totalWidth) / (textOpts.length - 1);\r\n                        x = x + offset * index;\r\n                        break;\r\n                }\r\n                const lineNum = Math.floor(height / lineHeight);\r\n                switch (verticalAlign) {\r\n                    case 'middle':\r\n                        y = y + Math.floor((lineNum - text.length) / 2) * lineHeight;\r\n                        break;\r\n                    case 'bottom':\r\n                        y = y + (lineNum - text.length) * lineHeight;\r\n                        break;\r\n                }\r\n                this.textVertical(\r\n                    text,\r\n                    x,\r\n                    y,\r\n                    width,\r\n                    height,\r\n                    {\r\n                        ...options,\r\n                        verticalAlign,\r\n                        fontFamily,\r\n                        fontSize,\r\n                        fontWeight,\r\n                        fontStyle,\r\n                        lineHeight,\r\n                        clip: false,\r\n                    },\r\n                    forceCallback,\r\n                );\r\n\r\n                // 文字竖排绘制第一列时绘制下划线和删除线\r\n                if (index === 0) {\r\n                    const rowNumber = textOpts.reduce((rowNum, opt) => Math.max(rowNum, opt.text.length), 0);\r\n                    const lineNumber = textOpts.length;\r\n\r\n                    const { baseline } = getMetrics({\r\n                        fontFamily,\r\n                        fontSize,\r\n                    });\r\n\r\n                    y = lineNumber === 1 ? y : opt.y;\r\n\r\n                    for (let i = 0; i < rowNumber; i++) {\r\n                        y += lineHeight;\r\n\r\n                        this.drawUnderline(\r\n                            x,\r\n                            y - lineHeight / 4 + parseFloat(baseline),\r\n                            x + width * lineNumber,\r\n                            y - lineHeight / 4 + parseFloat(baseline),\r\n                            options,\r\n                        );\r\n                        this.drawStrikeThrough(\r\n                            x,\r\n                            y - lineHeight / 4 + parseFloat(fontSize) / 10,\r\n                            x + width * lineNumber,\r\n                            y - lineHeight / 4 + parseFloat(fontSize) / 10,\r\n                            options,\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            const totalHeight = lineHeight * textOpts.length;\r\n            textOpts.forEach((opt): void => {\r\n                const { text, x, width, height, options } = opt;\r\n                let { y } = opt;\r\n                switch (verticalAlign) {\r\n                    case 'top':\r\n                        break;\r\n                    case 'middle':\r\n                        if (maxHeight - totalHeight > 0) {\r\n                            y = y + (maxHeight - totalHeight) / 2;\r\n                        } else {\r\n                            // 如果所有文本的高度大于当前可以绘区域的高度,就从2开始画字符，保持和后端绘制一致\r\n                            y += 2;\r\n                        }\r\n                        break;\r\n                    case 'bottom':\r\n                        if (maxHeight - totalHeight > 0) {\r\n                            y = y + (maxHeight - totalHeight);\r\n                        } else {\r\n                            y += 2;\r\n                        }\r\n                        break;\r\n                }\r\n                this.text(\r\n                    text,\r\n                    x,\r\n                    y,\r\n                    width,\r\n                    height,\r\n                    {\r\n                        ...options,\r\n                        verticalAlign: 'middle',\r\n                        fontFamily,\r\n                        fontSize,\r\n                        fontWeight,\r\n                        fontStyle,\r\n                        lineHeight,\r\n                        clip: false,\r\n                    },\r\n                    forceCallback,\r\n                );\r\n            });\r\n        }\r\n        this.ctx.restore();\r\n    }\r\n\r\n    public drawLine(x: number, y: number, x1: number, y1: number, options: DrawOptions): void {\r\n        const { color, lineWidth, lineStyle, lineDash } = options;\r\n\r\n        if (lineWidth === 0 || lineStyle === 'none') {\r\n            return;\r\n        }\r\n\r\n        this.ctx.save();\r\n\r\n        if (color) {\r\n            this.ctx.strokeStyle = color;\r\n        }\r\n        if (lineWidth) {\r\n            this.ctx.lineWidth = lineWidth;\r\n        }\r\n        switch (lineStyle) {\r\n            case 'solid':\r\n                break;\r\n            case 'dashed':\r\n                this.ctx.setLineDash(lineDash);\r\n                break;\r\n            case 'dotted':\r\n                this.ctx.setLineDash([1, 1]);\r\n                break;\r\n            case 'double':\r\n                this.ctx.lineWidth = lineWidth / 2;\r\n                // REPORT-24214 调整绘制双线段的逻辑，之前的写法在与其他线段重合时显示会有问题。\r\n                this.drawDoubleLine({ x, y, x1, y1 });\r\n                this.ctx.restore();\r\n\r\n                return;\r\n        }\r\n        this.ctx.beginPath();\r\n        this.linePath([\r\n            [x, y],\r\n            [x1, y1],\r\n        ]);\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    private drawDoubleLine({ x, y, x1, y1 }) {\r\n        const distance = 1;\r\n        const dx = x1 - x;\r\n        const dy = y1 - y;\r\n        const len = Math.sqrt(dx * dx + dy * dy);\r\n        const perpx = -dy * distance / len;\r\n        const perpy = dx * distance / len;\r\n        this.ctx.beginPath();\r\n        this.linePath([\r\n            [x + perpx, y + perpy],\r\n            [x1 + perpx, y1 + perpy],\r\n        ]);\r\n        this.linePath([\r\n            [x - perpx, y - perpy],\r\n            [x1 - perpx, y1 - perpy],\r\n        ]);\r\n    }\r\n\r\n    public drawRect(x: number, y: number, width: number, height: number, options: DrawOptions): void {\r\n        this.ctx.save();\r\n\r\n        const { color = '#fff', fillColor, lineWidth = 0, linearGradient, radiusConfig } = options;\r\n        const fillStyle: string | CanvasGradient | CanvasPattern = fillColor;\r\n        this.ctx.beginPath();\r\n        radiusConfig ? this.drawRadiusRect(x, y, width, height, radiusConfig) : this.ctx.rect(x, y, width, height);\r\n        this.ctx.closePath();\r\n        if (linearGradient) {\r\n            const { degree, stops } = linearGradient;\r\n            const [[sx, sy], [ex, ey]] = getFitGradient(degree, width, height);\r\n            const gd = this.ctx.createLinearGradient(x + sx, y + sy, x + ex, y + ey);\r\n            stops.forEach((stop): void => {\r\n                gd.addColorStop(stop.per, stop.color);\r\n            });\r\n            this.ctx.fillStyle = gd;\r\n            this.ctx.fill();\r\n\r\n            return this.ctx.restore();\r\n        }\r\n        if (fillStyle) {\r\n            this.ctx.fillStyle = fillStyle;\r\n            this.ctx.fill();\r\n        }\r\n        if (lineWidth) {\r\n            this.ctx.strokeStyle = color;\r\n            this.ctx.lineWidth = lineWidth;\r\n            this.ctx.stroke();\r\n        }\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * 生成一个圆角矩形的路径信息\r\n     * @param x\r\n     * @param y\r\n     * @param width\r\n     * @param height\r\n     * @param radiusConfig\r\n     */\r\n    private drawRadiusRect(x: number, y: number, width: number, height: number, radiusConfig: RadiusConfig) {\r\n        const { radius, tlRadius, trRadius, blRadius, brRadius } = radiusConfig;\r\n\r\n        /** 使用整数坐标避免发生子像素渲染 */\r\n        const maxEffectHRadius = Math.floor(Math.min(height / 2, radius));\r\n        const maxEffectWRadius = Math.floor(Math.min(width / 2, radius));\r\n\r\n        /** 填充4个二阶贝塞尔曲线与边界线 */\r\n        this.ctx.moveTo(x, y + maxEffectHRadius);\r\n        tlRadius ? this.ctx.quadraticCurveTo(x, y, x + maxEffectWRadius, y) : this.ctx.lineTo(x, y);\r\n        this.ctx.lineTo(x + width - maxEffectWRadius, y);\r\n\r\n        trRadius\r\n            ? this.ctx.quadraticCurveTo(x + width, y, x + width, y + maxEffectHRadius)\r\n            : this.ctx.lineTo(x + width, y);\r\n        this.ctx.lineTo(x + width, y + height - maxEffectHRadius);\r\n\r\n        brRadius\r\n            ? this.ctx.quadraticCurveTo(x + width, y + height, x + width - maxEffectWRadius, y + height)\r\n            : this.ctx.lineTo(x + width, y + height);\r\n        this.ctx.lineTo(x + maxEffectWRadius, y + height);\r\n\r\n        blRadius\r\n            ? this.ctx.quadraticCurveTo(x, y + height, x, y + height - maxEffectHRadius)\r\n            : this.ctx.lineTo(x, y + height);\r\n        this.ctx.lineTo(x, y + maxEffectHRadius);\r\n    }\r\n\r\n    public drawBias(\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        backslash: boolean,\r\n        texts: (string | number)[],\r\n        options: DrawOptions,\r\n    ): void {\r\n        this.ctx.save();\r\n        const {\r\n            fontSize = '9px',\r\n            color = '#000000',\r\n            fontWeight = 400,\r\n            fontFamily = 'sans-serif',\r\n            fontStyle = 'normal',\r\n        } = options;\r\n        const fonts = {\r\n            fontSize,\r\n            color,\r\n            fontWeight,\r\n            fontFamily,\r\n        };\r\n        const lineHeight = parseFloat(fontSize) * 1.3;\r\n        const lines = getBiasLines(x, y, width, height, backslash, texts.length - 1);\r\n        this.ctx.beginPath();\r\n        this.ctx.rect(x, y, width, height);\r\n        this.ctx.clip();\r\n        setCtxFont(this.ctx, { fontFamily, fontSize, fontStyle, fontWeight });\r\n\r\n        // 先这样吧, 逻辑之后优化，脑壳疼\r\n        lines.forEach((line, index) => {\r\n            const [start, end] = line;\r\n            this.drawLine(start[0], start[1], end[0], end[1], {\r\n                color,\r\n                lineWidth: 1,\r\n            });\r\n\r\n            // 第一个 (代码有点乱之后再整理)\r\n            if (index === 0) {\r\n                let h = lineHeight;\r\n                const rects = [];\r\n                if (h > height) {\r\n                    return;\r\n                }\r\n                while (h <= height) {\r\n                    let bounds = null;\r\n                    if (backslash) {\r\n                        const rw = Math.abs((end[0] - start[0]) / (end[1] - start[1])) * (height - h);\r\n                        bounds = {\r\n                            x,\r\n                            y: y + h - lineHeight,\r\n                            width: rw,\r\n                            height: lineHeight,\r\n                        };\r\n                    } else {\r\n                        const rw = Math.abs((end[0] - start[0]) / (end[1] - start[1])) * h;\r\n                        bounds = {\r\n                            x: x + rw,\r\n                            y: y + h - lineHeight,\r\n                            width: width - rw,\r\n                            height: lineHeight,\r\n                        };\r\n                    }\r\n                    rects.push(bounds);\r\n                    h += lineHeight;\r\n                }\r\n\r\n                const arrText = `${texts[0]}`.split('');\r\n                let line = '',\r\n                    rectIndex = 0;\r\n                const textOpts = [];\r\n                for (let n = 0; n < arrText.length; n++) {\r\n                    const testLine = line + arrText[n];\r\n                    const metrics = this.ctx.measureText(testLine);\r\n                    const testWidth = metrics.width;\r\n                    if (this.ctx.measureText(line).width > rects[rectIndex].width) {\r\n                        break;\r\n                    }\r\n                    if (testWidth > rects[rectIndex].width) {\r\n                        this.text(\r\n                            line,\r\n                            rects[rectIndex].x,\r\n                            rects[rectIndex].y,\r\n                            rects[rectIndex].width,\r\n                            rects[rectIndex].height,\r\n                            {\r\n                                ...fonts,\r\n                                textAlign: 'left',\r\n                                verticalAlign: 'middle',\r\n                            },\r\n                        );\r\n                        textOpts.push({\r\n                            x: rects[rectIndex].x,\r\n                            y: rects[rectIndex].y + rects[rectIndex].height / 2,\r\n                            ...rects[rectIndex],\r\n                            text: line,\r\n                            options,\r\n                        });\r\n                        line = arrText[n];\r\n                        rectIndex++;\r\n                        if (!rects[rectIndex]) {\r\n                            break;\r\n                        }\r\n                    } else {\r\n                        line = testLine;\r\n                    }\r\n                }\r\n\r\n                if (line && rects[rectIndex] && this.ctx.measureText(line).width <= rects[rectIndex].width) {\r\n                    this.text(\r\n                        line,\r\n                        rects[rectIndex].x,\r\n                        rects[rectIndex].y,\r\n                        rects[rectIndex].width,\r\n                        rects[rectIndex].height,\r\n                        {\r\n                            ...fonts,\r\n                            textAlign: 'left',\r\n                            verticalAlign: 'middle',\r\n                        },\r\n                    );\r\n                }\r\n            }\r\n\r\n            // 最后一个 (代码有点乱之后再整理)\r\n            if (index === lines.length - 1) {\r\n                let h = height - lineHeight;\r\n                const rects = [];\r\n                while (h >= 0) {\r\n                    let bounds = null;\r\n                    if (backslash) {\r\n                        const rw = Math.abs((end[0] - start[0]) / (end[1] - start[1])) * (h + y - end[1]);\r\n                        bounds = {\r\n                            x: x + width - rw,\r\n                            y: y + h,\r\n                            width: rw,\r\n                            height: lineHeight,\r\n                        };\r\n                    } else {\r\n                        const rw = Math.abs((end[0] - start[0]) / (end[1] - start[1])) * h;\r\n                        bounds = {\r\n                            x,\r\n                            y: y + h,\r\n                            width: rw,\r\n                            height: lineHeight,\r\n                        };\r\n                    }\r\n                    rects.push(bounds);\r\n                    h -= lineHeight;\r\n                }\r\n\r\n                const totalWidth = this.ctx.measureText(`${texts[texts.length - 1]}`).width;\r\n                let minNums = Math.floor(rects.length / 2);\r\n                let totalBoundsWidth =\r\n                    rects.length % 2 === 1\r\n                        ? rects[minNums].width\r\n                        : rects[minNums].width + rects[rects.length - minNums - 1].width;\r\n                while (totalBoundsWidth < totalWidth && minNums < rects.length - 1) {\r\n                    minNums++;\r\n                    totalBoundsWidth += rects[minNums].width + rects[rects.length - minNums - 1].width;\r\n                }\r\n                let textOpts = [],\r\n                    flag = true;\r\n                rects.reverse();\r\n                while (flag) {\r\n                    const arrText = `${texts[texts.length - 1]}`.split('');\r\n                    let line = '',\r\n                        rectIndex = rects.length - minNums - 1;\r\n                    textOpts = [];\r\n                    for (let n = 0; n < arrText.length; n++) {\r\n                        const testLine = line + arrText[n];\r\n                        const metrics = this.ctx.measureText(testLine);\r\n                        const testWidth = metrics.width;\r\n                        if (testWidth > rects[rectIndex].width) {\r\n                            textOpts.push({\r\n                                text: line,\r\n                                x: rects[rectIndex].x,\r\n                                y: rects[rectIndex].y,\r\n                                width: rects[rectIndex].width,\r\n                                height: rects[rectIndex].height,\r\n                                options: {\r\n                                    ...fonts,\r\n                                    textAlign: 'left',\r\n                                    verticalAlign: 'middle',\r\n                                },\r\n                            });\r\n                            line = arrText[n];\r\n                            rectIndex++;\r\n                            if (!rects[rectIndex]) {\r\n                                break;\r\n                            }\r\n                        } else {\r\n                            line = testLine;\r\n                        }\r\n                    }\r\n\r\n                    if (line && rectIndex < rects.length) {\r\n                        textOpts.push({\r\n                            text: line,\r\n                            x: rects[rectIndex].x,\r\n                            y: rects[rectIndex].y,\r\n                            width: rects[rectIndex].width,\r\n                            height: rects[rectIndex].height,\r\n                            options: {\r\n                                ...fonts,\r\n                                textAlign: 'left',\r\n                                verticalAlign: 'middle',\r\n                            },\r\n                        });\r\n                    }\r\n                    if (\r\n                        line && rectIndex >= rects.length ||\r\n                        line && this.ctx.measureText(line).width > rects[rectIndex].width\r\n                    ) {\r\n                        minNums++;\r\n                    } else {\r\n                        flag = false;\r\n                    }\r\n\r\n                    if (minNums >= rects.length) {\r\n                        flag = false;\r\n                    }\r\n                }\r\n\r\n                textOpts.forEach(opt => {\r\n                    const { text, x, y, width, height, options } = opt;\r\n                    this.text(text, x, y, width, height, options);\r\n                });\r\n            }\r\n\r\n            if (index !== 0 && texts.length > 2) {\r\n                const preLine = lines[index - 1];\r\n                if (backslash) {\r\n                    const pAngle = Math.atan(\r\n                        Math.abs((preLine[1][1] - preLine[0][1]) / (preLine[1][0] - preLine[0][0])),\r\n                    );\r\n                    const cAngle = Math.atan(Math.abs((line[1][1] - line[0][1]) / (line[1][0] - line[0][0])));\r\n                    const dist = Math.abs(lineHeight / 2 / Math.sin((cAngle - pAngle) / 2));\r\n                    this.ctx.save();\r\n                    this.ctx.translate(x + Math.cos(pAngle) * dist, y + height - Math.sin(pAngle) * dist);\r\n                    this.ctx.rotate(-(pAngle + (cAngle - pAngle) / 2));\r\n                    this.text(`${texts[index]}`, 0, 0, this.ctx.measureText(`${texts[index]}`).width, lineHeight, {\r\n                        ...fonts,\r\n                        textAlign: 'left',\r\n                        verticalAlign: 'middle',\r\n                    });\r\n                    this.ctx.restore();\r\n                } else {\r\n                    const pAngle = Math.atan((preLine[1][1] - preLine[0][1]) / (preLine[1][0] - preLine[0][0]));\r\n                    const cAngle = Math.atan((line[1][1] - line[0][1]) / (line[1][0] - line[0][0]));\r\n                    const dist = lineHeight / 2 / Math.sin((cAngle - pAngle) / 2);\r\n                    this.ctx.save();\r\n                    this.ctx.translate(x + Math.cos(pAngle) * dist, y + Math.sin(pAngle) * dist);\r\n                    this.ctx.rotate(pAngle + (cAngle - pAngle) / 2);\r\n                    this.text(`${texts[index]}`, 0, 0, this.ctx.measureText(`${texts[index]}`).width, lineHeight, {\r\n                        ...fonts,\r\n                        textAlign: 'left',\r\n                        verticalAlign: 'middle',\r\n                    });\r\n                    this.ctx.restore();\r\n                }\r\n            }\r\n        });\r\n        this.ctx.restore();\r\n    }\r\n\r\n    public drawCurrencyLine(\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        currencyLineAttr: CurrencyLineAttr,\r\n        value: string,\r\n        options: DrawOptions,\r\n    ) {\r\n        const { intPart, deciPart } = currencyLineAttr;\r\n        const sum = intPart + deciPart;\r\n        const averageWidth = width / sum;\r\n        const lineColor = {\r\n            'default': '#8e877e',\r\n            greed: '#2df713',\r\n            red: '#fe1713',\r\n        };\r\n        const drawLine = (color: string, x: number) => {\r\n            this.drawLine(x + averageWidth, y, x + averageWidth, y + height, {\r\n                color,\r\n                lineWidth: 1,\r\n            });\r\n        };\r\n        const intPartValue = value.split('.')[0];\r\n        value = value.replace('.', '');\r\n        const startIndex = intPartValue.length < intPart ? intPart - intPartValue.length : 0;\r\n\r\n        for (let index = 0; index < sum; index++) {\r\n            const textIndex = index - startIndex;\r\n            if (textIndex >= 0 && value.length > textIndex) {\r\n                const text = value.substring(textIndex, textIndex + 1);\r\n                options.textAlign = 'center';\r\n                this.text(text, x, y, averageWidth, height, options);\r\n            }\r\n            if (index + 1 !== sum) {\r\n                if (index + 1 === intPart) {\r\n                    drawLine(lineColor.red, x);\r\n                } else if ((index + 1) % 3 === 0) {\r\n                    drawLine(lineColor.greed, x);\r\n                } else {\r\n                    drawLine(lineColor.default, x);\r\n                }\r\n            }\r\n            x = x + averageWidth;\r\n        }\r\n    }\r\n\r\n    public drawSelf(sx: number, sy: number, dx: number, dy: number, w: number, h: number): void {\r\n        if (w === 0 || h === 0) {\r\n            return;\r\n        }\r\n\r\n        const pixelRatio = dpr();\r\n\r\n        sx *= pixelRatio;\r\n        sy *= pixelRatio;\r\n        dx *= pixelRatio;\r\n        dy *= pixelRatio;\r\n        w *= pixelRatio;\r\n        h *= pixelRatio;\r\n\r\n        w = Math.min(w, this.canvas.width - dx, this.canvas.width - sx);\r\n        h = Math.min(h, this.canvas.height - dy, this.canvas.height - sy);\r\n\r\n        this.ctx.save();\r\n\r\n        const cacheCanvas = this.getCacheCanvas();\r\n        const cacheContext = this.getCacheContext();\r\n\r\n        cacheContext.save();\r\n        cacheContext.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n        cacheContext.clearRect(0, 0, cacheCanvas.width, cacheCanvas.height);\r\n        cacheContext.drawImage(this.canvas, sx, sy, w, h, dx, dy, w, h);\r\n\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this.ctx.clearRect(dx, dy, w, h);\r\n        this.ctx.drawImage(cacheCanvas, dx, dy, w, h, dx, dy, w, h);\r\n\r\n        cacheContext.restore();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    public drawImage(\r\n        image: HTMLImageElement,\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        type: ImageLayout = 'center',\r\n        options: DrawOptions = {},\r\n    ): void {\r\n        this.ctx.save();\r\n\r\n        this.ctx.beginPath();\r\n        options.radiusConfig\r\n            ? this.drawRadiusRect(x, y, width, height, options.radiusConfig)\r\n            : this.ctx.rect(x, y, width, height);\r\n        this.ctx.clip();\r\n        // REPORT-23642 当现实方式为默认时，具体现实方式需要通过图片宽高和单元格宽高比较确定\r\n        if (type === 'default') {\r\n            type = image.width > width || image.height > height ? 'repeat' : 'center';\r\n        }\r\n        // REPORT-20044，TT-42573，REPORT-29103 普通的文字图片渲染时图片发虚，故设置为 imageSmoothingEnabled = false\r\n        // REPORT-20966，REPORT-37636 但是如果图片过大再缩放，关闭抗锯齿会丢失像素，所以需要开启抗锯齿。\r\n        // imageSmoothingEnabled 默认为true，如果图片大小和单元格大小相同，则没必要开启，开启之后会变模糊，故设置为false\r\n        if (image.width === width && image.height === height) {\r\n            this.ctx.imageSmoothingEnabled = false;\r\n        }\r\n        switch (type) {\r\n            case 'center':\r\n                this.ctx.drawImage(\r\n                    image,\r\n                    0,\r\n                    0,\r\n                    image.width,\r\n                    image.height,\r\n                    x + (width - image.width || 1) / 2, // REPORT-31883 如果图片大小恰好和单元格大小相同，则需要偏移0.5，否则会丢失图片边缘\r\n                    y + (height - image.height || 1) / 2,\r\n                    image.width,\r\n                    image.height,\r\n                );\r\n                break;\r\n            case 'stretch':\r\n                this.ctx.drawImage(image, 0, 0, image.width, image.height, x, y, width, height);\r\n                break;\r\n            case 'adapt':\r\n                const resizeWidth = height * (image.width / image.height);\r\n                const resizeHeight = width * (image.height / image.width);\r\n                if (resizeWidth <= width) {\r\n                    this.ctx.drawImage(image, x + (width - resizeWidth) / 2, y, resizeWidth, height);\r\n                } else if (resizeHeight <= height) {\r\n                    this.ctx.drawImage(image, x, y + (height - resizeHeight) / 2, width, resizeHeight);\r\n                }\r\n                break;\r\n            case 'repeat':\r\n                const ptrn = this.ctx.createPattern(image, 'repeat');\r\n                this.ctx.fillStyle = ptrn;\r\n                this.ctx.translate(x, y);\r\n                this.ctx.fillRect(0, 0, width, height);\r\n                break;\r\n        }\r\n        this.ctx.restore();\r\n    }\r\n\r\n    public draw(config: any, forceCallback): void {\r\n        const { type, x, y, x1, y1, text, width, height, image, imageLayout, options } = config;\r\n\r\n        switch (type) {\r\n            case 'text':\r\n                const { wrap, lineHeight } = options;\r\n                if (wrap === 'wrap') {\r\n                    this.wrapText(\r\n                        { text, x, y, width, height, lineHeight: parseFloat(lineHeight), options },\r\n                        forceCallback,\r\n                    );\r\n                } else {\r\n                    this.drawText(text, x, y, width, height, options);\r\n                }\r\n                break;\r\n            case 'rect':\r\n                this.drawRect(x, y, width, height, options);\r\n                break;\r\n            case 'line':\r\n                this.drawLine(x, y, x1, y1, options);\r\n                break;\r\n            case 'image':\r\n                this.drawImage(image, x, y, width, height, imageLayout);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    public clear(x = 0, y = 0, width = this.canvas.clientWidth, height = this.canvas.clientHeight): void {\r\n        this.ctx.clearRect(x, y, width, height);\r\n    }\r\n\r\n    public clip(x, y, width, height, cb?: Function): void {\r\n        if (width === 0 || height === 0) {\r\n            return cb && cb();\r\n        }\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.rect(x, y, width, height);\r\n        this.ctx.clip();\r\n        cb && cb();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    public getDefaultFont(): string {\r\n        const style = window.getComputedStyle(this.canvas);\r\n\r\n        return `${style.fontStyle} ${style.fontWeight} ${style.fontSize} ${style.fontFamily}`;\r\n    }\r\n\r\n    public resize(width: number, height: number) {\r\n        resizeCanvas(this.canvas, width, height);\r\n        this.cacheCanvas && resizeCanvas(this.cacheCanvas, width, height);\r\n    }\r\n\r\n    private linePath(points: Point[]): void {\r\n        if (points.length > 1) {\r\n            const [x, y] = points[0];\r\n            this.ctx.moveTo(x, y);\r\n            for (let i = 1; i < points.length; i++) {\r\n                this.ctx.lineTo(points[i][0], points[i][1]);\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n\r\n    private text(\r\n        text: string,\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        options: DrawOptions,\r\n        forceCallback?: Function,\r\n    ): void {\r\n        this.ctx.save();\r\n        const initialY = y;\r\n        const {\r\n            clip,\r\n            color = '',\r\n            verticalAlign,\r\n            textAlign,\r\n            fontWeight = 400,\r\n            fontSize = '12px',\r\n            fontFamily = 'sans-serif',\r\n            fontStyle = 'normal',\r\n            textShadow,\r\n            subscript,\r\n            supscript,\r\n            lineHeight,\r\n            rotate,\r\n        } = options;\r\n        if (color) {\r\n            this.ctx.fillStyle = color;\r\n        }\r\n        setCtxFont(this.ctx, { fontFamily, fontSize, fontStyle, fontWeight });\r\n\r\n        if (clip) {\r\n            this.ctx.beginPath();\r\n            this.ctx.rect(x, y, width, height);\r\n            this.ctx.clip();\r\n        }\r\n\r\n        if (textShadow) {\r\n            this.ctx.shadowColor = textShadow.shadowColor;\r\n            this.ctx.shadowOffsetX = textShadow.shadowOffsetX;\r\n            this.ctx.shadowOffsetY = textShadow.shadowOffsetY;\r\n            this.ctx.shadowBlur = textShadow.shadowBlur;\r\n        }\r\n\r\n        // 设置样式\r\n        const bounds = this.ctx.measureText(text);\r\n        const { baseline } = getMetrics({\r\n            fontFamily,\r\n            fontSize,\r\n        });\r\n        let lineLength = bounds.width;\r\n\r\n        if (rotate) {\r\n            const { baseX, baseY, textBaseline, textAlign: ctxTextAligh } = getRotatePosition({\r\n                x,\r\n                y,\r\n                width,\r\n                height,\r\n                rotate,\r\n                textAlign,\r\n                boundsWidth: bounds.width,\r\n                baseline,\r\n            });\r\n            this.ctx.textAlign = ctxTextAligh;\r\n            this.ctx.translate(baseX, baseY);\r\n            this.ctx.textBaseline = textBaseline;\r\n            this.ctx.rotate(-(rotate * Math.PI) / 180);\r\n            this.ctx.fillText(text, 0, 0);\r\n        } else {\r\n            if (supscript) {\r\n                this.ctx.textBaseline = 'top';\r\n                y = y - (height / 2 - baseline);\r\n            } else if (subscript) {\r\n                this.ctx.textBaseline = 'bottom';\r\n                y = y + height + (height / 2 - baseline);\r\n            } else {\r\n                switch (verticalAlign) {\r\n                    case 'top':\r\n                        this.ctx.textBaseline = 'top';\r\n                        break;\r\n                    case 'middle':\r\n                        this.ctx.textBaseline = 'middle';\r\n                        y = y + height / 2;\r\n                        break;\r\n                    case 'bottom':\r\n                        this.ctx.textBaseline = 'bottom';\r\n                        y = y + height;\r\n                        break;\r\n                }\r\n            }\r\n            switch (textAlign) {\r\n                case 'center':\r\n                    x = x + width / 2 - bounds.width / 2;\r\n                    break;\r\n                case 'left':\r\n                    x = x;\r\n                    break;\r\n                case 'right':\r\n                    x = x + width - bounds.width;\r\n                    break;\r\n            }\r\n            // 如果是分散对齐\r\n            if (textAlign === 'distributed' && text.length > 1) {\r\n                const offectX = (width - bounds.width) / (text.length - 1);\r\n                let fontX = x;\r\n                text.split('').forEach(word => {\r\n                    this.ctx.fillText(word, fontX, y);\r\n                    forceCallback &&\r\n                        forceCallback({\r\n                            text: word,\r\n                            x: fontX,\r\n                            y: initialY,\r\n                            width: this.ctx.measureText(word).width,\r\n                            height: lineHeight,\r\n                        });\r\n                    fontX = fontX + this.ctx.measureText(word).width + offectX;\r\n                });\r\n                lineLength = width;\r\n            } else {\r\n                let fontX = x;\r\n                `${text}`.split('').forEach(word => {\r\n                    forceCallback &&\r\n                        forceCallback({\r\n                            text: word,\r\n                            x: fontX,\r\n                            y: initialY,\r\n                            width: this.ctx.measureText(word).width,\r\n                            height: lineHeight,\r\n                        });\r\n                    fontX += this.ctx.measureText(word).width;\r\n                });\r\n\r\n                this.ctx.fillText(text, x, y);\r\n            }\r\n        }\r\n        // TODO: 下划线和删除线位置先临时这样写，后期还要再调整\r\n        this.drawUnderline(x, y + parseFloat(baseline), x + lineLength, y + parseFloat(baseline), options);\r\n        this.drawStrikeThrough(\r\n            x,\r\n            y + parseFloat(fontSize) / 20,\r\n            x + lineLength,\r\n            y + parseFloat(fontSize) / 20,\r\n            options,\r\n        );\r\n        this.ctx.restore();\r\n    }\r\n\r\n    // 优化最长可视字符获取逻辑\r\n    private getVisualRangeText(text: string, cellWidth: number, tailString: string): string {\r\n        // 节省计算\r\n        if (this.ctx.measureText(text).width < cellWidth) {\r\n            return text;\r\n        }\r\n\r\n        const self = this;\r\n\r\n        function dichotomy(start, end) {\r\n            const mid = Math.floor((start + end) / 2);\r\n            const nowText = text.substring(0, mid) + tailString;\r\n            const nextText = text.substring(0, mid + 1) + tailString;\r\n            if (self.ctx.measureText(nowText).width >= cellWidth) {\r\n                end = mid - 1;\r\n\r\n                return dichotomy(start, end);\r\n            } else {\r\n                // 当前小下个大就是找到了\r\n                if (self.ctx.measureText(nextText).width >= cellWidth) {\r\n                    return nowText;\r\n                }\r\n                start = mid + 1;\r\n\r\n                return dichotomy(start, end);\r\n            }\r\n        }\r\n\r\n        return dichotomy(0, text.length);\r\n    }\r\n\r\n    private textVertical(\r\n        text: string,\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        options: DrawOptions,\r\n        forceCallback: Function,\r\n    ) {\r\n        this.ctx.save();\r\n        const { lineHeight, color, textShadow } = options;\r\n        if (color) {\r\n            this.ctx.fillStyle = color;\r\n        }\r\n        if (textShadow) {\r\n            this.ctx.shadowColor = textShadow.shadowColor;\r\n            this.ctx.shadowOffsetX = textShadow.shadowOffsetX;\r\n            this.ctx.shadowOffsetY = textShadow.shadowOffsetY;\r\n            this.ctx.shadowBlur = textShadow.shadowBlur;\r\n        }\r\n\r\n        text.split('').forEach(word => {\r\n            const bounds = this.ctx.measureText(word);\r\n            y = y + lineHeight;\r\n            this.ctx.fillText(word, x + width / 2 - bounds.width / 2, y);\r\n            forceCallback &&\r\n                forceCallback({\r\n                    word,\r\n                    x: x + width / 2 - bounds.width / 2,\r\n                    y: y - lineHeight * 2 / 3,\r\n                    width: bounds.width,\r\n                    height: lineHeight,\r\n                });\r\n        });\r\n        this.ctx.restore();\r\n    }\r\n\r\n    private drawUnderline(x: number, y: number, x1: number, y1: number, options: DrawOptions) {\r\n        const { underline } = options;\r\n\r\n        if (underline && underline.width > 0) {\r\n            this.drawLine(x, y, x1, y1, {\r\n                lineWidth: underline.width,\r\n                color: underline.color,\r\n                lineDash: underline.dash,\r\n                lineStyle: underline.style,\r\n            });\r\n        }\r\n    }\r\n\r\n    private drawStrikeThrough(x: number, y: number, x1: number, y1: number, options: DrawOptions) {\r\n        const { strikeThrough, fontSize, color } = options;\r\n\r\n        if (strikeThrough === 'solid') {\r\n            this.drawLine(x, y, x1, y1, {\r\n                lineWidth: parseFloat(fontSize) / 10,\r\n                color,\r\n            });\r\n        }\r\n    }\r\n\r\n    private getCacheCanvas() {\r\n        if (!this.cacheCanvas) {\r\n            const pixelRatio = dpr();\r\n            this.cacheCanvas = document.createElement('canvas');\r\n            this.cacheCanvas.width = this.canvas.width;\r\n            this.cacheCanvas.height = this.canvas.height;\r\n            const ctx = this.cacheCanvas.getContext('2d');\r\n            ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n        }\r\n\r\n        return this.cacheCanvas;\r\n    }\r\n\r\n    private getCacheContext() {\r\n        return this.getCacheCanvas().getContext('2d');\r\n    }\r\n\r\n    private makeLineTextOpts(\r\n        fontSize: string,\r\n        text: string,\r\n        x: number,\r\n        y: number,\r\n        maxWidth: number,\r\n        maxHeight: number,\r\n        lineHeight: number,\r\n        options: DrawOptions,\r\n    ) {\r\n        const { newLine } = options;\r\n        let textOpts = [];\r\n        let newFontSize = 0;\r\n        const deafultPadding = 10;\r\n        switch (newLine) {\r\n            case 'SINGLE_LINE_ADJUST_FONT':\r\n                newFontSize = maxWidth / this.ctx.measureText(text).width * parseFloat(fontSize);\r\n                if (newFontSize * 1.2 + deafultPadding > maxHeight) {\r\n                    newFontSize = (maxHeight - deafultPadding) / 1.2;\r\n                }\r\n                fontSize = `${newFontSize}px`;\r\n                lineHeight = newFontSize * 1.2;\r\n                textOpts = [\r\n                    {\r\n                        text,\r\n                        x,\r\n                        y,\r\n                        width: maxWidth,\r\n                        height: lineHeight,\r\n                        options,\r\n                    },\r\n                ];\r\n                break;\r\n            case 'MULTI_LINE_ADJUST_FONT':\r\n                const ratio = 128 / 72;\r\n                newFontSize = parseFloat(fontSize) / ratio;\r\n                const maxWidth4DivideWords = maxWidth * ratio;\r\n                textOpts = this.makeTextOpts(text, x, y, maxWidth4DivideWords, maxHeight, lineHeight, options);\r\n                lineHeight = maxHeight / textOpts.length;\r\n                textOpts = this.makeTextOpts(text, x, y, maxWidth4DivideWords, maxHeight, lineHeight, options);\r\n\r\n                /**\r\n                 * TODO: 感觉这边需要重构一下\r\n                 * textOpts中的width肯定是不能乘一个比例的，这个宽度就是单元格宽度，乘了之后超过单元格宽度会有以下问题\r\n                 *   如果是居右的，那有部分内容是看不到的\r\n                 *   一开始就不乘呢，分词分的就不对，居左的话右边就会有空白\r\n                 * makeTextOpts这个方法返回值这块耦合性太强，宽度是宽度，根据fontSize改变如何分词用的宽度信息不能被设置成最后渲染的宽度才对\r\n                 */\r\n                textOpts.forEach(op => {\r\n                    op.width = maxWidth;\r\n                });\r\n                fontSize = `${newFontSize}px`; // kerry 说后台就是这样算的\r\n                break;\r\n            default:\r\n                textOpts = this.makeTextOpts(text, x, y, maxWidth, maxHeight, lineHeight, options);\r\n        }\r\n\r\n        return {\r\n            textOpts,\r\n            fontSize,\r\n            lineHeight,\r\n        };\r\n    }\r\n\r\n    private makeVerticalWrap(\r\n        text: string,\r\n        x: number,\r\n        y: number,\r\n        maxWidth: number,\r\n        maxHeight: number,\r\n        lineHeight: number,\r\n        options: DrawOptions,\r\n    ) {\r\n        const { newLine, verTextDirection, autoWrapInfo } = options;\r\n        const wordWidth = lineHeight;\r\n        const textOpts = [];\r\n\r\n        if (newLine === 'SINGLE_LINE') {\r\n            return [\r\n                {\r\n                    text: text.substring(0, autoWrapInfo[0]),\r\n                    x,\r\n                    y,\r\n                    width: wordWidth,\r\n                    height: maxHeight,\r\n                    options,\r\n                },\r\n            ];\r\n        }\r\n\r\n        let lines = divideTextByWrapInfo(text, autoWrapInfo);\r\n        if (verTextDirection === 'RIGHT_TO_LEFT') {\r\n            lines = lines.reverse();\r\n        }\r\n        lines.forEach(item => {\r\n            textOpts.push({\r\n                text: item,\r\n                x,\r\n                y,\r\n                width: wordWidth,\r\n                height: maxHeight,\r\n                options,\r\n            });\r\n            x += lineHeight;\r\n        });\r\n\r\n        return textOpts;\r\n    }\r\n\r\n    private makeVerticalOpts(\r\n        text: string,\r\n        x: number,\r\n        y: number,\r\n        maxWidth: number,\r\n        maxHeight: number,\r\n        lineHeight: number,\r\n        options: DrawOptions,\r\n    ) {\r\n        const { newLine, verTextDirection } = options;\r\n        const lineNum = Math.floor(maxHeight / lineHeight);\r\n        const textOpts = [];\r\n        const wordWidth = lineHeight;\r\n        if (newLine === 'SINGLE_LINE') {\r\n            return [\r\n                {\r\n                    text: text.substring(lineNum),\r\n                    x,\r\n                    y,\r\n                    width: wordWidth,\r\n                    height: maxHeight,\r\n                    options,\r\n                },\r\n            ];\r\n        }\r\n        let line = [];\r\n        text.split('\\n').forEach($word => {\r\n            let word = $word;\r\n\r\n            while (word !== '') {\r\n                if (word.length > lineNum) {\r\n                    line.push(word.substring(0, lineNum));\r\n                    word = word.substring(lineNum);\r\n                } else {\r\n                    line.push(word);\r\n                    word = '';\r\n                }\r\n            }\r\n        });\r\n        if (verTextDirection === 'RIGHT_TO_LEFT') {\r\n            line = line.reverse();\r\n        }\r\n        line.forEach(item => {\r\n            textOpts.push({\r\n                text: item,\r\n                x,\r\n                y,\r\n                width: wordWidth,\r\n                height: maxHeight,\r\n                options,\r\n            });\r\n            x += lineHeight;\r\n        });\r\n\r\n        return textOpts;\r\n    }\r\n\r\n    /**\r\n     * 文字单行显示\r\n     */\r\n    private makeSingleLineOpts(\r\n        text: string,\r\n        x: number,\r\n        y: number,\r\n        maxWidth: number,\r\n        maxHeight: number,\r\n        lineHeight: number,\r\n        options: DrawOptions,\r\n    ) {\r\n        const { overflowHide, hideType, appendTailStr, hideStrLength } = options;\r\n\r\n        // 存在换行符的时候只保留第一行文本\r\n        let resultWord = text.split('\\\\n')[0];\r\n\r\n        if (overflowHide) {\r\n            switch (hideType) {\r\n                case 'CHAR_LENGTH': // 保留指定字符长度\r\n                    resultWord =\r\n                        resultWord.length <= hideStrLength\r\n                            ? resultWord\r\n                            : resultWord.substring(0, hideStrLength) + appendTailStr;\r\n                    break;\r\n                case 'CELL_WIDTH': // 超出单元格省略\r\n                    resultWord = this.getVisualRangeText(resultWord, maxWidth, appendTailStr);\r\n                    break;\r\n            }\r\n        } else {\r\n            // 没有设置文本省略就获取单元格长度的\r\n            resultWord = this.getVisualRangeText(resultWord, maxWidth, '');\r\n        }\r\n\r\n        return [this.newLine(resultWord, x, y, maxWidth, maxHeight, lineHeight, options)];\r\n    }\r\n\r\n    private newLine(\r\n        text: string,\r\n        x: number,\r\n        y: number,\r\n        maxWidth: number,\r\n        maxHeight: number,\r\n        lineHeight: number,\r\n        options: DrawOptions,\r\n    ) {\r\n        return {\r\n            text,\r\n            x,\r\n            y,\r\n            width: maxWidth,\r\n            height: lineHeight,\r\n            options,\r\n        };\r\n    }\r\n\r\n    private makeTextOpts(\r\n        text: string,\r\n        x: number,\r\n        y: number,\r\n        maxWidth: number,\r\n        maxHeight: number,\r\n        lineHeight: number,\r\n        options: DrawOptions,\r\n    ) {\r\n        const { autoWrapInfo } = options;\r\n\r\n        return autoWrapInfo\r\n            ? this.makeTextOptsByWrapInfo(text, x, y, maxWidth, maxHeight, lineHeight, options)\r\n            : this.makeTextOptsByWrapAuto(text, x, y, maxWidth, maxHeight, lineHeight, options);\r\n    }\r\n\r\n    /**\r\n     * 根据换行信息换行\r\n     */\r\n    private makeTextOptsByWrapInfo(\r\n        text: string,\r\n        x: number,\r\n        y: number,\r\n        maxWidth: number,\r\n        maxHeight: number,\r\n        lineHeight: number,\r\n        options: DrawOptions,\r\n    ) {\r\n        const { newLine, verticalText, cellJust, rotate, autoWrapInfo } = options;\r\n        if (rotate !== 0) {\r\n            return [this.newLine(text, x, y, maxWidth, maxHeight, lineHeight, options)];\r\n        }\r\n        if (newLine === 'SINGLE_LINE' || cellJust === 'NONE') {\r\n            return [this.newLine(text.substring(0, autoWrapInfo[0]), x, y, maxWidth, maxHeight, lineHeight, options)];\r\n        }\r\n        if (verticalText === 'VERTICAL_TEXT') {\r\n            return this.makeVerticalWrap(text, x, y, maxWidth, maxHeight, lineHeight, options);\r\n        }\r\n        const words = divideTextByWrapInfo(text, autoWrapInfo);\r\n        const textOpts = [];\r\n        words.forEach(word => {\r\n            textOpts.push(this.newLine(word, x, y, maxWidth, maxHeight, lineHeight, options));\r\n            y += lineHeight;\r\n        });\r\n\r\n        return textOpts;\r\n    }\r\n\r\n    /**\r\n     * 自动根据行高列宽换行\r\n     */\r\n    private makeTextOptsByWrapAuto(\r\n        text: string,\r\n        x: number,\r\n        y: number,\r\n        maxWidth: number,\r\n        maxHeight: number,\r\n        lineHeight: number,\r\n        options: DrawOptions,\r\n    ) {\r\n        const { newLine, verticalText, cellJust, rotate } = options;\r\n        if (rotate !== 0) {\r\n            return [this.newLine(text, x, y, maxWidth, maxHeight, lineHeight, options)];\r\n        }\r\n        if (newLine === 'SINGLE_LINE' || cellJust === 'NONE') {\r\n            return this.makeSingleLineOpts(text, x, y, maxWidth, maxHeight, lineHeight, options);\r\n        }\r\n        if (verticalText === 'VERTICAL_TEXT') {\r\n            return this.makeVerticalOpts(text, x, y, maxWidth, maxHeight, lineHeight, options);\r\n        }\r\n        const words = divide(text);\r\n        let line = '';\r\n        const textOpts = [];\r\n        words.forEach(word => {\r\n            const testLine = line + word;\r\n            const testWidth = this.ctx.measureText(testLine).width;\r\n            if (word === '\\n') {\r\n                // 如果是换行\r\n                textOpts.push(this.newLine(line, x, y, maxWidth, maxHeight, lineHeight, options));\r\n                line = '';\r\n                y += lineHeight;\r\n            } else if (testWidth <= maxWidth) {\r\n                // 如果一行能够放得下\r\n                line = testLine;\r\n            } else {\r\n                if (line !== '') {\r\n                    textOpts.push(this.newLine(line, x, y, maxWidth, maxHeight, lineHeight, options));\r\n                    line = '';\r\n                    y += lineHeight;\r\n                }\r\n                if (this.ctx.measureText(word).width / maxWidth > 1) {\r\n                    const arrText = `${word}`.split('');\r\n                    for (let n = 0; n < arrText.length; n++) {\r\n                        const testLine = line + arrText[n];\r\n                        const testWidth = this.ctx.measureText(testLine).width;\r\n                        if (testWidth >= maxWidth) {\r\n                            // 跳过分词首个字符就过大的情况\r\n                            if (line !== '') {\r\n                                textOpts.push(this.newLine(line, x, y, maxWidth, maxHeight, lineHeight, options));\r\n                                y += lineHeight;\r\n                            }\r\n                            line = arrText[n];\r\n                        } else {\r\n                            line = testLine;\r\n                        }\r\n                    }\r\n                } else {\r\n                    line = word;\r\n                }\r\n            }\r\n        });\r\n        textOpts.push(this.newLine(line, x, y, maxWidth, maxHeight, lineHeight, options));\r\n\r\n        return textOpts;\r\n    }\r\n}\r\n"]}