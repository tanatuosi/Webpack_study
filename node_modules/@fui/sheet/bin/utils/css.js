import isColor from 'is-color';
import isBorderStyle from 'is-border-style';
function isLength(str) {
    const length = /^(\+|-)?([0-9]*\.)?[0-9]+(em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|%)$/i;
    const zero = /^(\+|-)?(0*\.)?0+$/;
    return length.test(str) || zero.test(str);
}
/**
 * 将字符串转成border
 * @param css css字符串
 */
export function parseBorder(css) {
    const result = {
        style: 'none',
        color: '#000000',
        width: 0,
    };
    css.split(' ').forEach((property) => {
        if (isColor(property)) {
            result.color = property;
        }
        if (isLength(property)) {
            result.width = parseFloat(property);
        }
        if (isBorderStyle(property)) {
            result.style = property;
        }
    });
    return result;
}
/**
 * lineGradient计算
 * @param angle 弧度
 * @param w 宽
 * @param h 高
 */
export function getFitGradient(angle, w, h) {
    // +90使得angle数值和css中一直，再转成弧度
    angle = angle * Math.PI / 180;
    const dist = Math.sqrt(w * w + h * h);
    const diagAngle = Math.atan(w / h);
    const d = Math.cos(diagAngle - angle) * dist / 2;
    const dx = Math.sin(angle) * d;
    const dy = Math.cos(angle) * d;
    return [[w / 2 - dx, h / 2 - dy], [w / 2 + dx, h / 2 + dy]];
}
//# sourceMappingURL=css.js.map