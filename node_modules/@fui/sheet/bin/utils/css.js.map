{"version":3,"file":"css.js","sourceRoot":"","sources":["../../src/utils/css.ts"],"names":[],"mappings":"AACA,OAAO,OAAO,MAAM,UAAU,CAAC;AAC/B,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAE5C,SAAS,QAAQ,CAAC,GAAG;IACjB,MAAM,MAAM,GAAG,+EAA+E,CAAC;IAC/F,MAAM,IAAI,GAAG,oBAAoB,CAAC;IAElC,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9C,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,GAAW;IACnC,MAAM,MAAM,GAAG;QACX,KAAK,EAAE,MAAM;QACb,KAAK,EAAE,SAAS;QAChB,KAAK,EAAE,CAAC;KACX,CAAC;IACF,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAClB,CAAC,QAAQ,EAAQ,EAAE;QACf,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;YACnB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;SAC3B;QACD,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACpB,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;SACvC;QACD,IAAI,aAAa,CAAC,QAAQ,CAAC,EAAE;YACzB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;SAC3B;IACL,CAAC,CACJ,CAAC;IAEF,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,cAAc,CAAC,KAAa,EAAE,CAAS,EAAE,CAAS;IAC9D,4BAA4B;IAC5B,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;IAE9B,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAEnC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;IAEjD,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC/B,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAE/B,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAChE,CAAC","sourcesContent":["import { Border, Line } from '../../types';\r\nimport isColor from 'is-color';\r\nimport isBorderStyle from 'is-border-style';\r\n\r\nfunction isLength(str): boolean {\r\n    const length = /^(\\+|-)?([0-9]*\\.)?[0-9]+(em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|%)$/i;\r\n    const zero = /^(\\+|-)?(0*\\.)?0+$/;\r\n\r\n    return length.test(str) || zero.test(str);\r\n}\r\n\r\n/**\r\n * 将字符串转成border\r\n * @param css css字符串\r\n */\r\nexport function parseBorder(css: string): Border {\r\n    const result = {\r\n        style: 'none',\r\n        color: '#000000',\r\n        width: 0,\r\n    };\r\n    css.split(' ').forEach(\r\n        (property): void => {\r\n            if (isColor(property)) {\r\n                result.color = property;\r\n            }\r\n            if (isLength(property)) {\r\n                result.width = parseFloat(property);\r\n            }\r\n            if (isBorderStyle(property)) {\r\n                result.style = property;\r\n            }\r\n        },\r\n    );\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * lineGradient计算\r\n * @param angle 弧度\r\n * @param w 宽\r\n * @param h 高\r\n */\r\nexport function getFitGradient(angle: number, w: number, h: number): Line {\r\n    // +90使得angle数值和css中一直，再转成弧度\r\n    angle = angle * Math.PI / 180;\r\n\r\n    const dist = Math.sqrt(w * w + h * h);\r\n    const diagAngle = Math.atan(w / h);\r\n\r\n    const d = Math.cos(diagAngle - angle) * dist / 2;\r\n\r\n    const dx = Math.sin(angle) * d;\r\n    const dy = Math.cos(angle) * d;\r\n\r\n    return [[w / 2 - dx, h / 2 - dy], [w / 2 + dx, h / 2 + dy]];\r\n}\r\n"]}