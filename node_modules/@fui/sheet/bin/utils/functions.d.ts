import { Range } from '../../types';
import isEmpty from 'lodash-es/isEmpty';
import clamp from 'lodash-es/clamp';
import merge from 'lodash-es/merge';
import find from 'lodash-es/find';
import isEqual from 'lodash-es/isEqual';
import remove from 'lodash-es/remove';
import cloneDeep from 'lodash-es/cloneDeep';
import uuid from 'uuid/v4';
import debounce from 'lodash-es/debounce';
import inRange from 'lodash-es/inRange';
import isNumber from 'lodash-es/isNumber';
import isFunction from 'lodash-es/isFunction';
import isNil from 'lodash-es/isNil';
export declare function intersectRect(r1: Range, r2: Range): boolean;
export declare const emptyFn: () => void;
export declare function cArray(start?: number, end?: number): number[];
export declare function xTo26(n: number | string): string;
export declare function mergeRange(p: Range, q: Range): Range;
export declare function divide(text: string): string[];
/**
 * 根据换行信息分割字符串
 * @param text 原字符串
 * @param autoWrapInfo 换行数据
 */
export declare function divideTextByWrapInfo(text: string, autoWrapInfo: number[]): string[];
export declare function between(a: number, b: number, c: number): boolean;
export declare function getIEVersion(): number;
export declare function isIE(): boolean;
/**
 * 判断点p是否在矩形内
 * @param p p点
 * @param matrix 矩形
 */
declare function isPointInMatrix(p: {
    x: number;
    y: number;
}, matrix: {
    x: number;
    y: number;
    width: number;
    height: number;
}): boolean;
/**
 * 判断点是否在线段上
 * @param x0 线段起点x
 * @param y0 线段起点y
 * @param x1 线段终点x
 * @param y1 线段终点y
 * @param x2 测试点x
 * @param y2 测试点y
 * @returns boolean
 */
declare function isPointOnLine(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number): boolean;
export { isEmpty, isEqual, merge, clamp, find, uuid, remove, cloneDeep, debounce, isPointInMatrix, isPointOnLine, inRange, isNumber, isFunction, isNil, };
